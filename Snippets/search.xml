<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_HowToKeep_ASPNET_Session_Alive</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>KeepSessionAliveUsingJavaScript</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_HowToKeep_ASPNET_Session_Alive</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>KeepSessionAliveUsingJavaScript</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!--

http://www.beansoftware.com/ASP.NET-Tutorials/Keep-Session-Alive.aspx

use JavaScript that will make periodic calls to some .aspx page on website, 
restart session timeout and keep session alive in that way. 
Implementation code will use JavaScript setInterval function. It could look like this: 
--&gt;

&lt;%--    
    In this example, image will be used to keep session alive,
    By changing image's src parameter, we'll make periodical requests
    to web server.
    --%&gt;
    &lt;img id="imgSessionAlive" width="1" height="1" /&gt;


    &lt;script type="text/javascript" &gt;
    // Helper variable used to prevent caching on some browsers
    var counter;
    counter = 0;

    function KeepSessionAlive() 
    {
	    // Increase counter value, so we'll always get unique URL
	    counter++;
	
	    // Gets reference of image
	    var img = document.getElementById("imgSessionAlive");
	
	    // Set new src value, which will cause request to server, so
	    // session will stay alive
	    img.src = "http://YourWebSiteUrl.com/RefreshSessionState.aspx?c=" + counter;
	
	    // Schedule new call of KeepSessionAlive function after 60 seconds
	    setTimeout(KeepSessionAlive, 60000);
	}

    // Run function for a first time
    KeepSessionAlive();
    &lt;/script&gt;
    
 &lt;!--
 
    In this example, RefreshSessionState.aspx page will be called every minute. 
    This is far less than default session timeout which is 20 minutes. 
    If you just want to keep session alive, you can set this time for 19 minutes (19 * 60 * 1000 = 1140000). 
    
  But, with smaller intervals you could know almost instantly when visitor is closed a browser. 
  If scalability is a problem, you can delete session variables almost immediately after user closed web browser. 
  There is no need to wait 20 minutes for session to expire. You can even decrease session timeout to low value, 
  like 2 minutes. JavaScript from previous example will make requests every minute, 
  and keep sessions alive for active users (users that have opened web browser), 
  but sessions where browser is closed will expire.

Since RefreshSessionState.aspx page is called every minute, 
you can use ASP.NET server side code for tasks like visitor tracking, 
how many visitors are currently online, which page each visitor is currently browsing etc.

This option will work fine, 
although it has its own small drawbacks. 
Some users could have JavaScript disabled or have a browser that doesn't support JavaScript 
(like some mobile web browsers). 
If JavaScript is not enabled, 
this code would not work and session will expire. 
Also, rarely but theoretically possible, 
especially on mobile browsers is, 
if user's Internet connection is temporally broken JavaScript will miss few requests while user is reconnecting.

This example manipulates image's src element to make request to web server. 
There is a second option  to make web requests in JavaScript using Http Request, 
but this option requires browser specific code because Internet Explorer and Firefox use different objects. 
IE uses ActiveX object Msxml2.XMLHTTP or Microsoft.XMLHTTP, while Firefox uses XMLHttpRequest. 
So, final browser compatible code becomes large. 
In the other hand, using image's src property to make request requires only one line of code.  
--&gt; </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_Temporal</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_Create_Temporal_History_table_on_a_History_Table_of_The_Parent</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_Temporal</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_Create_Temporal_History_table_on_a_History_Table_of_The_Parent</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01_Create_Temporal_History_table_on_a_History_Table_of_The_Parent

--The history table lets users make historical notes about records in the parent table
-- Then the temporal history table shows any changes that were made in the notes

--p_0003_CREATE_TABLE_T007_IP_Inventory_History_v1.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 05/09/2017
	By: glenn garson
	************************************************************************************
*/

use JUNK
--USE [d1_IT]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



IF OBJECT_ID('dbo.T007_IP_Inventory_History') IS NOT NULL
	ALTER TABLE T007_IP_Inventory_History SET (SYSTEM_VERSIONING = OFF)
    DROP TABLE dbo.T007_IP_Inventory_History

go

CREATE TABLE [dbo].[T007_IP_Inventory_History](
	[T007_PK] [int] IDENTITY(1,1) NOT NULL,
	[T004_IP_Inventory_FK] [int] NULL,
	[Note] [ntext] NULL,
	[DateCreated] [datetime] NULL,
	[T007_IP_Inventory_History_RowVersion] [timestamp] NULL,
	[TimeStart] [datetime2](2) GENERATED ALWAYS AS ROW START NOT NULL,
	[TimeEnd] [datetime2](2) GENERATED ALWAYS AS ROW END NOT NULL,
 CONSTRAINT [T007_IP_Inventory_History$T007_IP_Inventory_History_PK] PRIMARY KEY NONCLUSTERED 
(
	[T007_PK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
	PERIOD FOR SYSTEM_TIME ([TimeStart], [TimeEnd])
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
WITH
(
SYSTEM_VERSIONING = ON ( HISTORY_TABLE = [dbo].[DepartmentHistory] )
)

GO

ALTER TABLE [dbo].[T007_IP_Inventory_History] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO

ALTER TABLE [dbo].[T007_IP_Inventory_History]  WITH CHECK ADD  CONSTRAINT [T007_IP_Inventory_History_FK_00] FOREIGN KEY([T004_IP_Inventory_FK])
REFERENCES [dbo].[T004_IP_Inventory] ([T004_IP_Inventory_PK])
GO

ALTER TABLE [dbo].[T007_IP_Inventory_History] CHECK CONSTRAINT [T007_IP_Inventory_History_FK_00]
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_Temporal</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_TABLE_Temporal</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_Temporal</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_TABLE_Temporal</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_TABLE_Temporal

https://www.sqlshack.com/track-history-data-changes-using-sql-server-2016-system-versioned-temporal-tables/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_Temporal</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>AlterSchema_of_Temporal_Table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_Temporal</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>AlterSchema_of_Temporal_Table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Enabling System_Versioning on the table will not prevent you from modifying the table schema. 
--The system will hold a schema lock on both the temporal and history table, 
--where these changes will be replicated to the history table. 
--A specific schema change canâ€™t be performed directly using an ALTER DATABASE statement 
--on a table with System_Versioning enabled, 
--such as adding or removing an IDENTITY, 
--COMPUTED, SPARSE, COLUMN_SET or ROWGUIDCOL columns. 
--To apply such changes on a table with System_Versioning enabled, 
--you need first to disable System_Versioning, 
--perform the change you need then enable the System_Versioning again. 
--The below script is used to add a new IDENTITY column to the Temporal_Table_Demo temporal table 
--(we will not consider this added column in the coming demo):

ALTER TABLE dbo.[dbo].[Temporal_Table_Demo] SET ( SYSTEM_VERSIONING = OFF );
 
ALTER TABLE [dbo].[dbo].[Temporal_Table_Demo] ADD ID int IDENTITY (1,1);
 ALTER TABLE dbo.[dbo].[Temporal_Table_Demo]  SET ( SYSTEM_VERSIONING = ON   (HISTORY_TABLE = dbo.[dbo].[Temporal_Table_Demo_History]));</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_Temporal</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Create_Temporal_Table__basicVersion</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_Temporal</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Create_Temporal_Table__basicVersion</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.sqlshack.com/track-history-data-changes-using-sql-server-2016-system-versioned-temporal-tables/

--The below CREATE TABLE statement is used to create the Temporal_Table_Demo temporal table, 
--with DempID primary key, the two-period columns; 
--TimeStart GENERATED ALWAYS AS ROW START and TimeEnd GENERATED ALWAYS AS ROW END, 
--both designated as PERIOD FOR SYSTEM_TIME, 
--the temporal table is linked to the dbo.Temporal_Table_Demo_History history table, 
--taking into consideration that identifying the history table schema name is mandatory, 
--and finally enabling the SYSTEM_VERSIONING feature as follow

USE SQLShackDemo 
GO
CREATE TABLE dbo.Temporal_Table_Demo   
(    
  [DempID] int NOT NULL PRIMARY KEY CLUSTERED   
  , [DepName] nvarchar(100) NOT NULL  
  , [DepLocation] varchar(100) NOT NULL   
  , [NumOfEmp] int NOT NULL  
  , [TimeStart] datetime2 (2) GENERATED ALWAYS AS ROW START  
  , [TimeEnd] datetime2 (2) GENERATED ALWAYS AS ROW END  
  , PERIOD FOR SYSTEM_TIME (TimeStart, TimeEnd)  
 )    
 WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.Temporal_Table_Demo_History))</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_Temporal</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CREATE_Temporal_Table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_Temporal</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CREATE_Temporal_Table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.simple-talk.com/sql/sql-training/sql-server-temporal-tables-recipes/


--the columns SysStartTime and SysEndTime 
--	with data type datetime2 for both column is required for a temporal table. 
--The column SysStartTime has to be GENERATED ALWAYS AS ROW START NOT NULL specification, 
--	and SysEndTime has to be GENERATED ALWAYS AS ROW END NOT NULL. 
--Youâ€™re not obliged to provide a default for those columns, but I would recommend it. 
--Both SysStartTime and SysEndTime columns have to be specified in the PERIOD FOR SYSTEM_TIME column 
--(as MSDN defined PERIOD, in other publications PERIOD calls clause).

--Note: The system-versioned columns do not necessarily have to be named as SysStartTime and SysEndTime, 
--	but the column names should be selected to reflect the function of time-capturing. 
--The options GENERATED ALWAYS AS ROW START/END and PERIOD FOR SYSTEM_TIME (nameFrom, nameTo) enables the temporal table featur

Listing 1: Creating the temporal and history tables

CREATE TABLE Department
    (
    DeptID INT NOT NULL PRIMARY KEY CLUSTERED,
    DeptName VARCHAR(50) NOT NULL,
    ManagerID INT NULL,
    ParentDeptID INT NULL,
    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START
      CONSTRAINT DF_Department_SysStartTime DEFAULT SYSUTCDATETIME() NOT NULL,
    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END
      CONSTRAINT DF_Department_SysEndTime 
  	DEFAULT CONVERT( DATETIME2, '9999-12-31 23:59:59' ) NOT NULL,
    PERIOD FOR SYSTEM_TIME(SysStartTime, SysEndTime)
    )
  WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.DepartmentHistory));
  
  
 -- After the temporal table is created, the underlined history table is created automaticall
 -- as well as a CLUSTERED INDEX with both SysStartTime and SysEndTime 
 -- 	(or the name that has been chosen to define system-versioning) column will be created for history table, Listing 2.
 
 Listing 2: Creating the clustered index
 
 CREATE CLUSTERED INDEX ix_DepartmentHistory
  ON dbo.DepartmentHistory
    (SysStartTime ASC,
    SysEndTime ASC
    ) ON [PRIMARY];
    
--If a new column must be added to the temporal table, then 
--ALTER TABLE â€¦ ADD column DDL needs to be allowed, 
--and the new column will be mirrored automatically on the history table.


--However, itâ€™s not possible to use DROP TABLE DDL for a temporal table. First, SYSTEM_VERSIONING has to be turned OFF.

Listing 3: Disabling SYSTEM_VERSIONING on Department table.

ALTER TABLE Department SET (SYSTEM_VERSIONING = OFF); 

--When SYSTEM_VERSIONING is set to OFF, both temporal and history tables become regular tables. 
--The DROP TABLE command can then be used for those tables.    </Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>