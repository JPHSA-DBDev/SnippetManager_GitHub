<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters

--I used this function for a multivalue parameter report in  SSRS 

--SUMMARY: 
/*
a) Let a user pick one or more values for a particular Parm.
b) Use an Expression in the 'Value' of a Parameter that concatenates the multiple values into one string
c) Feed the multi-value string to the Stored Procedure
d) Then have a function that un-packs the substrings into seperate pieces, with commas between each piece
e) Then use that comma-seperated string of multiple values in an 'IN' statement of a WHERE clause in the 
	Stored Proc that gets the data for the DataSet of the SSRS Report



use a function that returns a table, of substrings, given a Large string made up of of Concatenated sub-strings



*/
--1] In the SSRS dataset properties, pass the multi-value param to the stored procedure as a comma-delimited string

-- for the Dataset, in the SSRS Report, right click =&gt; Properties =&gt; Parameters (e.g. for Parm '@BU'), for the Parm 'Value' 
--		use this expression:
								=JOIN(Parameters!BU.Value,",")

--2] Create this function in SQL Server to be used by the stored procedure that provides the data to the report

CREATE FUNCTION [dbo].[fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters]
   (@ConcatenatedSubStrings nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@ConcatenatedSubStrings)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@ConcatenatedSubStrings,@chrind - 1)
      ELSE
        SELECT @Piece = @ConcatenatedSubStrings
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @ConcatenatedSubStrings = RIGHT(@ConcatenatedSubStrings,LEN(@ConcatenatedSubStrings) - @chrind)
      IF LEN(@ConcatenatedSubStrings) = 0 BREAK
    END
  RETURN
  END 
  
 --3] Then in the Stored procedure, for the Dataset, you can call the function 
  
--======= How to Use the function in the Stored Proc for the report:=========================================================================================
SELECT *
FROM SomeTable
WHERE
	(BU_Name IN (select Item from dbofn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters(@BU,','))	)	
--===================================================================================================================  
 
  
  
  
  
  
  
  


--ORIGINAL Version:
--=======================

--prj_0013_FN_401_unSplit.sql
USE B2W_Reports
go
CREATE FUNCTION [dbo].[prj_0013_FN_401_unSplit]
   (@RepParam nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 
  
  
  --======= Use the function:
  (BU_Name IN (select Item from dbo.prj_0013_FN_401_unSplit(@BU,','))	)	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_checkBox_in_SSRS__SQL_FUNCTION</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_checkBox_in_SSRS__SQL_FUNCTION</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--ALL_select_checkBox_in_SSRS__SQL_FUNCTION

--prj_0013_FN_401_unSplit.sql
USE B2W_Reports
go
CREATE FUNCTION [dbo].[prj_0013_FN_401_unSplit]
   (@RepParam nvarchar(max), @Delim char(1)= ',')       --&lt;=========== Here is the delimiter
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_checkBox_in_SSRS__SQL_Script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_checkBox_in_SSRS__SQL_Script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0013_SP_205_sub_00C_Section_1a_NOTCAT_v2.sql
/*
	************************************************************************************
	NOTE: PM125, NON-CAT, And the WO due date is NOT before today, and [MR_Completed_Date] is in the Time Window
	Uses: 
	Created: 5/11/2016
	By: glenn garson
	************************************************************************************
*/
USE B2W_Reports
go


--DECLARE @BeginDate as date
--DECLARE @EndDate as date
--								-- 0: Exclude Mechanic with 'CAT', 1: Just inlude Mechanic with 'CAT'
--SELECT @BeginDate =  DATEADD(mm, -1, GETDATE())	-- MR_Completed Date On or after this date, or null	
--SELECT @EndDate = DATEADD(dd, 0, GETDATE())					-- MR_Completed Date On or before this date, or null	

--	PRINT 'Input @BeginDate: ' + LEFT(CONVERT(VARCHAR, @BeginDate, 120), 10) 
--	PRINT 'Input @EndDate: ' + LEFT(CONVERT(VARCHAR, @EndDate, 120), 10)

alter PROCEDURE prj_0013_SP_205_sub_00C_Section_1a_NOTCAT(
																@BeginDate as date,
																@EndDate as date,
																@BU as nvarchar(max)
																)
AS
;WITH CTE_prj_0013_SP_205_sub_00C_Section_1a_STEP_0(	
											   [Equipment_No]
											  ,[WO_ID]
											  ,[MR_ID]
											  ,[MR_Reason]
											  ,[MR_Created_Date]
											  ,[WO_Created_Date]
											  ,[WO_Due_Date]
											  ,[WO_Start_Date]
											  ,[WO_End_Date]
											  ,[MR_Completed_Date]
											  ,[Mechanic]
											  ,[WO_Priority]
											  ,[WO_Problem_Description]
											  ,[WO_Problem_Code]
											  ,estimated_WO_Completed_Date
											  ,COUNT_MR_ID
											  ,COUNT_MR_Completed_Date
											  ,WO_Completed_Date
											  ,BackLog
											  ,Schedule
											  ,BU_Name
											  ,Days_to_Create_WO		--NEW 5/31/2016	
											  ,Days_from_Request		--NEW 5/31/2016			
											  )
AS
		(
		SELECT 
			   [Equipment_No]
			  ,[WO_ID]
			  ,[MR_ID]
			  ,[MR_Reason]
			  ,[MR_Created_Date]
			  ,[WO_Created_Date]
			  ,[WO_Due_Date]
			  ,[WO_Start_Date]
			  ,[WO_End_Date]
			  ,[MR_Completed_Date]
			  ,[Mechanic]
			  ,[WO_Priority]
			  ,[WO_Problem_Description]
			  ,[WO_Problem_Code]
			  ,estimated_WO_Completed_Date
			  ,COUNT_MR_ID
			  ,COUNT_MR_Completed_Date
			  ,WO_Completed_Date
		      , (SELECT 'TheCalculation' = DATEDIFF ( dd , [WO_Due_Date] , WO_Completed_Date )   ) AS [BackLog]
			  , (SELECT 'TheCalculation' = DATEDIFF ( dd , [WO_Start_Date] , WO_Completed_Date )   ) AS [Schedule]
			  ,BU_Name
			  , (SELECT 'TheCalculation' = DATEDIFF ( dd , [MR_Created_Date], [WO_Created_Date] )   ) AS [Days_to_Create_WO]		--NEW 5/31/2016	
			  , (SELECT 'TheCalculation' = DATEDIFF ( dd  , [MR_Created_Date], [WO_Completed_Date] )   ) AS [Days_from_Request]		--NEW 5/31/2016																									
		     
		      
		  FROM [B2W_Reports].[dbo].[prj_0013_sp_00A_vw_501_WorkOrderTracking]
		  WHERE
				(--1a
					(WO_Completed_Date BETWEEN @BeginDate AND @EndDate)
					AND
					[MR_Reason]  like '%PM%'
					AND
					[MR_Reason]  like '%125%'
					AND							
					[WO_Completed_Date] &lt;= [WO_End_Date] 		--NEW 5/31/2016				
					
							
					AND NOT
					(		
						[MR_Reason]  like '%PM 250%'
						OR
						[MR_Reason]  like '%PM 500%'
						OR		
						[MR_Reason]  like '%PM 1000%'
						OR	
						[MR_Reason]  like '%PM 2000%'
					)
					and NOT		(
								[WO_Problem_Code]  like '%CP%'
								OR
								[WO_Problem_Code]  like '%CM%'
								OR
								[WO_Problem_Code]  like '%RC%'
							)	
					AND
					(
							([Mechanic] NOT  LIKE '%CAT%')
							OR
							([Mechanic] is NULL)		--NEW 5/31/2016
					)
					AND
					[WO_Priority] NOT LIKE '%Emergency%'			
					AND
					[WO_Problem_Code] NOT LIKE '%BD%'	
					----=======================================							
					AND											
					(
						(BU_Name IN (select Item from dbo.prj_0013_FN_401_unSplit(@BU,','))	)   --&lt;==================== Here is the use of the Function
						OR
						(@BU = '0_ALL')			
					)														
				)	
			
		)
SELECT * from CTE_prj_0013_SP_205_sub_00C_Section_1a_STEP_0			
ORDER BY Equipment_No, WO_ID, MR_ID</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_checkBox_in_SSRS__SSRS_Steps</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_checkBox_in_SSRS__SSRS_Steps</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

/*
Getting Multi-Value params to work with Stored Procedures
========================================================

1. The stored procedure for the report should declare any multi-value parameters as type nvarchar(max).

2. In the Report Designer, your parameter should have the 'Allow multiple values' option ticked (obviously). 
	Also, it helps to set the Data type to 'Text' even if its actually an integer or something, 
	because we're going to have to treat it as text later on in the Stored Procedure.
	
3. In the DataSet that calls the stored procedure, go to the Parameters tab:

4. For each parameter that needs to be a multi-value one, press the Fx button and change the default:	*/
		=Parameters!BU.Value
--to
		=JOIN(Parameters!BU.Value,",")
/*
	This will just string the multi-values together into a comma separated string.
	
5. In the database, you need a function that can split comma-separated values back out into a table format. 
	There are lots of variations of this sort of function around, see snippet for the SQL_FUNCTION
	
6. The query inside the stored procedure that uses the multi-value parameter should use it like this:	*/

		WHERE 
		(BU_Name IN (select Item from dbo.prj_0013_FN_401_unSplit(@BU,','))	) 
/*
	... that is, it uses prj_0013_FN_401_unSplit to split the passed values out into a table, 
		and then selects from that table and uses 'in' to check for membership.</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>