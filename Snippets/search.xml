<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Aggregate</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Aggregate_WHERE_IN</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Aggregate</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Aggregate_WHERE_IN</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/*	prj_8006_701_CostPer_KidsInCustody.sql
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 8/19/2013
	By: glenn garson
	************************************************************************************
*/

use AdHoc
go


select	
		SUM([Health Choice Cost]) as sum_HealthChoiceCost
		,SUM([Medicaid Cost]) as sum_MedicaidCost
		,SUM([Health Choice Cost] + [Medicaid Cost]) as sum_AllCost
		,AVG([Health Choice Cost]) as avg_HealthChoiceCost
		,AVG([Medicaid Cost]) as avg_MedicaidCost
		,AVG([Health Choice Cost] + [Medicaid Cost]) as avg_AllCost		
		,[MID]
		,[Child Welfare Number]
		,[Last Name]
		,[First Name]
		,[MI]
		,[DOB]		
FROM [AdHoc].[dbo].[prj_8006_From_IC_08_16_2013]	
Where [Year / Month] in (	 201306
							,201305
							,201304
							,201303
							,201302
							,201301
							,201212
							,201211
							,201210
							,201209
							,201208
							,201207
							,201206
							,201205
							,201204
							,201203
						)
Group by [MID]
		,[Child Welfare Number]
		,[Last Name]
		,[First Name]
		,[MI]
		,[DOB]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Collation</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DetermineColumnsOfTableCollationSetting</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Collation</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DetermineColumnsOfTableCollationSetting</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0000_005_DetermineColumnsOfTableCollationSettings.sql


/* Find Collation of SQL Server Database Table Column */
USE CCNCclaims
GO
SELECT name, collation_name
FROM sys.columns
WHERE OBJECT_ID IN (	
						SELECT OBJECT_ID
						FROM sys.objects
						WHERE type = 'U'
						AND name = 'T8_All_Hospitals_Daily_ARCHIVE_t'			-- &lt;== This is the Table Name
					
					)
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CTE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Set_PARAM,ETER_from_a_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CTE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Set_PARAM,ETER_from_a_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>;WITH Results AS
 (
  SELECT ItemListID, Title,
         CASE WHEN ROW_NUMBER() OVER(ORDER BY ItemListID DESC) 
                   BETWEEN @intStartRow AND @intEndRow THEN 1
                   END AS NumberOfResultsReturned,      
         COUNT(ItemListID) OVER() AS ActualNumberOfResults          
  FROM ItemData
  WHERE FREETEXT(Title, @FTSSearchTerm)
        AND WebsiteID = @WebsiteID
        AND ContentTypeID = @ContentTypeID
        AND GeoID2 = @GeoID                                 
 )
 SELECT @NumberOfResultsReturned = COUNT(NumberOfResultsReturned), 
        @ActualNumberOfResults = MAX(ActualNumberOfResults)
 FROM cte  
 
 
 
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 
DECLARE @Number_of_All_CM INT



WITH CTE_All_CM
AS
(
	select [Name], 
			[Position_Role],
			[Position_Credentials],
			'All' as Type	
	FROM [DB2_CRM].[dbo].[prj_8011_vw_008_EmployeePositions_v0]
	Where
		(
			(Position_Role='Team Lead')
			or
			(Position_Role='Care Manager')
		)
)
--select * from CTE_All_CM
--
Select @Number_of_All_CM = (
							Select COUNT(*)
							From CTE_All_CM
						
						)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CTE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SimpleSummaryCTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CTE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SimpleSummaryCTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
WITH ONE_CTE ([Practice_Group_Name], [DateDataWasCollected]) AS
	(
		SELECT	[Practice_Group_Name],[DateDataWasCollected]
		FROM 	[DB3_EHR_Chart].[dbo].[T0001_AllScript_Diabetes] 
	)
	
SELECT [Practice_Group_Name], [DateDataWasCollected], COUNT(*) AS RecordCount
FROM ONE_CTE
GROUP BY [Practice_Group_Name], [DateDataWasCollected]
ORDER BY [Practice_Group_Name], [DateDataWasCollected]

GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CTE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>UNION_of_two_CTE_Select_from</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CTE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>UNION_of_two_CTE_Select_from</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
----------------------- Local Variables
DECLARE @LineNumber int
DECLARE @Source nvarchar(100)
DECLARE @Title nvarchar(255)
----------------------------------------


SELECT @LineNumber = 23
SELECT @Source = '[Q-002]'
SELECT @Title = '[Adults]'
;
WITH cte_Line_23_Adult
AS
(


	SELECT distinct
		  [Patient_No]
	  FROM [Success].[dbo].[zzz_p0021_6_for_Analysis_of_Part_Q]
	  Where (
				[Type] = 'PC'
				AND
				[loc] = 'EJ'
				AND
				[Adult] = 1
			)
)
,cte_Line_23_NotAdult
AS
(


	SELECT distinct
		  [Patient_No]
	  FROM [Success].[dbo].[zzz_p0021_6_for_Analysis_of_Part_Q]
	  Where (
				[Type] = 'PC'
				AND
				[loc] = 'EJ'
				AND
				[Adult] &lt;&gt; 1
			)
)

--Select * 
--From cte_Line_23_Adult
--Order by Patient_No

SELECT *
FROM
	cte_Line_23_Adult a
	INNER JOIN
	cte_Line_23_NotAdult na
	On a.Patient_No = na.Patient_No

////////////////////////////////////////////////////////////////////////
WITH CTE_All_CM
AS
(
select [Name], 
		[Position_Role],
		[Position_Credentials],
		'All' as Type	
FROM [DB2_CRM].[dbo].[prj_8011_vw_008_EmployeePositions_v0]
Where
	(
		(Position_Role='Team Lead')
		or
		(Position_Role='Care Manager')
	)
),
CTE_RN_CM
AS
(
	select [Name], 
			[Position_Role],
			[Position_Credentials],
			'RN' as Type	
	FROM [DB2_CRM].[dbo].[prj_8011_vw_008_EmployeePositions_v0]
	Where Position_Credentials like '%RN%'
)
Select Type, COUNT(*) as TypeCount
From
	(
		(Select * From 	CTE_RN_CM)
		UNION 
		(Select * From 	CTE_All_CM)	
	) as TheUnion
Group by Type
Order by Type DESC

	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Databases</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LIST_of_all_FIELDS_in_all_TABLES_of_database</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Databases</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LIST_of_all_FIELDS_in_all_TABLES_of_database</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--P_0017_TASK_006_RES_04_STEP_3_LIST_of_all_FIELDS_in_all_TABLES_of_database_INSERT_INTO_T210_v3.sql



use edwCollections
go
DECLARE @sDatabase nvarchar(25)	
SELECT @sDatabase = 'edwCollections'

DECLARE @dataAcquiredDateTime as DateTime = getdate()	

--IF OBJECT_ID('riskmngt.reporting.gg_junk') IS NOT NULL
--    DROP TABLE riskmngt.reporting.gg_junk



--INSERT INTO [RiskMngt].[Reporting].[T210_Columns_for_Tables_in_Databases](	[DatabaseName]
--      ,[DataAcquiredDateTime]
--      ,[Table_Name]
--      ,[Column_Name]
--      ,[Data_Type]
--      ,[Size]
--      ,[Precision_Scale]
--      ,[flag_Current]
--      ,[schemaName])
	
 SELECT
	@sDatabase AS [DatabaseName]
	,@dataAcquiredDateTime AS [DataAcquiredDateTime]
	,T.name AS [Table_Name]
	,C.name AS [Column_Name]
	,P.name AS [Data_Type]
	,P.max_length AS [Size]
	,CAST(P.precision AS VARCHAR) + '/' + CAST(P.scale AS VARCHAR) AS [Precision_Scale]
	,1 AS [flag_Current]
	------------------------------
	,SCHEMA_NAME(T.schema_id) AS [schemaName]


--INTO riskmngt.reporting.gg_junk
FROM   
		sys.objects AS T
		JOIN 
		sys.columns AS C 
		ON T.object_id = C.object_id
		
		JOIN 
		sys.types AS P 
		ON 
			C.system_type_id = P.system_type_id
			and
			C.user_type_id = P.user_type_id		



WHERE  T.type_desc = 'USER_TABLE';
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Databases</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LIST_of_all_INDEXES_in_all_TABLES_of_database</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Databases</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LIST_of_all_INDEXES_in_all_TABLES_of_database</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--P_0017_TASK_006_RES_06_STEP_2_LIST_of_all_INDEXES_in_all_TABLES_of_database_INSERT_INTO_T211.sql



use DL4
go
DECLARE @sDatabase nvarchar(25)	
SELECT @sDatabase = 'DL4'

DECLARE @dataAcquiredDateTime as DateTime = getdate()	



--INSERT INTO [RiskMngt].[Reporting].[T211_INDEXES_in_all_TABLES_of_Database]
select 
		@sDatabase as DatabaseName,
		@dataAcquiredDateTime as DataAcquiredDateTime, 


	i.[name] as index_name,
    substring(column_names, 1, len(column_names)-1) as [columns],
    case when i.[type] = 1 then 'Clustered index'
        when i.[type] = 2 then 'Nonclustered unique index'
        when i.[type] = 3 then 'XML index'
        when i.[type] = 4 then 'Spatial index'
        when i.[type] = 5 then 'Clustered columnstore index'
        when i.[type] = 6 then 'Nonclustered columnstore index'
        when i.[type] = 7 then 'Nonclustered hash index'
        end as index_type,
    case when i.is_unique = 1 then 'Unique'
        else 'Not unique' end as [unique],
    schema_name(t.schema_id) as schemaName,
	 t.[name] as table_or_view_Name, 
    case when t.[type] = 'U' then 'Table'
        when t.[type] = 'V' then 'View'
        end as [object_type],


		1 as [flag_Current]
from sys.objects t
    inner join sys.indexes i
        on t.object_id = i.object_id
    cross apply (select col.[name] + ', '
                    from sys.index_columns ic
                        inner join sys.columns col
                            on ic.object_id = col.object_id
                            and ic.column_id = col.column_id
                    where ic.object_id = t.object_id
                        and ic.index_id = i.index_id
                            order by index_column_id
                            for xml path ('') ) D (column_names)
where t.is_ms_shipped &lt;&gt; 1
and index_id &gt; 0
order by schema_name(t.schema_id) + '.' + t.[name]
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Databases</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LIST_of_all_SCHEMA_and_TABLES_of_database</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Databases</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LIST_of_all_SCHEMA_and_TABLES_of_database</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--P_0017_TASK_006_RES_05_STEP_3_LIST_of_all_SCHEMA_and_TABLES_of_database_INSERT_INTO_T212.sql



use edwCollections
go
DECLARE @sDatabase nvarchar(25)	
SELECT @sDatabase = 'edwCollections'

DECLARE @dataAcquiredDateTime as DateTime = getdate()	

--IF OBJECT_ID('riskmngt.reporting.gg_junk') IS NOT NULL
--    DROP TABLE riskmngt.reporting.gg_junk



--INSERT INTO [RiskMngt].[Reporting].[T212_ListOfTablesAndTheirSCHEMAS_of_Database]
SELECT
	@sDatabase as DatabaseName
	,@dataAcquiredDateTime as DataAcquiredDateTime 
	,SCHEMA_NAME(schema_id) as schemaName
	, st.name as tableName
	, 1 as [flag_Current]
--INTO riskmngt.reporting.gg_junk
FROM sys.tables st
ORDER BY SCHEMA_NAME(schema_id), st.name
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DATES</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>WHERE_DateEqualSomeValue</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DATES</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>WHERE_DateEqualSomeValue</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>select PopulationSegment_Date, COUNT(*) as TheCount
FROM T0001ps_AllScript_Diabetes_PopulationSegments
where PopulationSegment_Date = '2012-03-19'</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Drop_all_tables_that_contain_a_certain_string_1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Drop_all_tables_that_contain_a_certain_string_1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Drop_all_tables_that_contain_a_certain_string_1

https://stackoverflow.com/questions/38720170/delete-all-tables-in-sql-server-database-except-few
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--p_0048_MAINT_016_Delete_MultipleTables_ThatStartWith_xxx_v1.sql
/*
	************************************************************************************
	CAREFULL: this script DELETES tables that begin with 'bbb_' and 'ccc_'

	Created: 1/31/2018
	By: glenn garson
	************************************************************************************
*/
USE [OBH_Data_Factory]
go

DECLARE @ExecSQL AS NVARCHAR (MAX) = '';

SELECT @ExecSQL = @ExecSQL + 
    'DROP TABLE ' + QUOTENAME(S.name) + '.' + QUOTENAME(T.name) + '; ' 
FROM sys.tables T
JOIN sys.schemas S ON S.schema_id = T.schema_id
WHERE (
		T.name LIKE 'bbb_%'
		OR
		T.name LIKE 'ccc_%'
	  )
--PRINT @ExecSQL
EXEC (@ExecSQL)

go
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

DECLARE @ExecSQL AS NVARCHAR (MAX) = '';

SELECT @ExecSQL = @ExecSQL + 
    'DROP TABLE ' + QUOTENAME(S.name) + '.' + QUOTENAME(T.name) + '; ' 
FROM sys.tables T
JOIN sys.schemas S ON S.schema_id = T.schema_id
WHERE T.name LIKE '%DynamicSurgery'

--PRINT @ExecSQL
EXEC (@ExecSQL)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedure_usingTEMP_table_atScopeOfTheSP_v2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedure_usingTEMP_table_atScopeOfTheSP_v2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--StoredProcedure_usingTEMP_table_atScopeOfTheSP_v2
------------------------------------------------------------------------------
use RiskMngt
go

--P_0017_TASK_006_SP_03_MAIN_INDEXES_in_all_TABLES_of_Database_v4.sql
/*
	************************************************************************************
	SSRS Report: 0025_REP_18_INDEXES_TABLES_Database
	NOTE: 
	Uses: 
	Created: 12/03/2019
	By: glenn garson
	************************************************************************************
*/


--================================================	
--DECLARE @DBtoFind AS NVARCHAR (100)
--SET @DBtoFind = 'RiskMngt'

--DECLARE @tableToFind AS NVARCHAR (100)
--SET @tableToFind = ''
--================================================  


alter Procedure [Reporting].[P_0017_TASK_006_SP_03_MAIN_INDEXES_in_all_TABLES_of_Database](@DBtoFind NVARCHAR (100), @tableToFind  NVARCHAR (100))
as

------------------------------------------------------------------------------------------------------------------------------

--This creates the temp table in the higher SCOPE, so that it is visible both in the SP, and in the Dynamic SQL
IF OBJECT_ID('tempdb..#P_0017_TASK_006_SP_03') IS NOT NULL DROP TABLE #P_0017_TASK_006_SP_03

CREATE TABLE #P_0017_TASK_006_SP_03(
	[DatabaseName] [varchar](8) NOT NULL,
	[schemaName] [nvarchar](128) NULL,
	[table_or_view_Name] [sysname] NOT NULL,
	[index_name] [sysname] NULL,
	[columns] [nvarchar](max) NULL,
	[index_type] [varchar](30) NULL,
	[unique] [varchar](10) NOT NULL,
	[object_type] [varchar](5) NULL
) 


------------------------------------------------------------------------------------------------------------------------------

DECLARE @query_string AS NVARCHAR (MAX)
SET @query_string = '


INSERT INTO #P_0017_TASK_006_SP_03
select 
	'''  + CAST(@DBtoFind AS NVARCHAR)  +'''as DatabaseName,
    schema_name(t.schema_id) as schemaName,
	 t.[name] as table_or_view_Name, 

	i.[name] as index_name,
    substring(column_names, 1, len(column_names)-1) as [columns],
    case when i.[type] = 1 then ''Clustered index''
        when i.[type] = 2 then ''Nonclustered unique index''
        when i.[type] = 3 then ''XML index''
        when i.[type] = 4 then ''Spatial index''
        when i.[type] = 5 then ''Clustered columnstore index''
        when i.[type] = 6 then ''Nonclustered columnstore index''
        when i.[type] = 7 then ''Nonclustered hash index''
        end as index_type,
    case when i.is_unique = 1 then ''Unique''
        else ''Not unique'' end as [unique],


    case when t.[type] = ''U'' then ''Table''
        when t.[type] = ''V'' then ''View''
        end as [object_type]

from 
	' + CAST(@DBtoFind AS NVARCHAR) +'.sys.objects t
    inner join 
	' + CAST(@DBtoFind AS NVARCHAR) +'.sys.indexes i

    on t.object_id = i.object_id
    cross apply 
	(
		select col.[name] + '', ''
        from 
			sys.index_columns ic
            inner join 
			sys.columns col
            on 
				ic.object_id = col.object_id
                and 
				ic.column_id = col.column_id
        where 
			ic.object_id = t.object_id
            and 
			ic.index_id = i.index_id
        order by index_column_id
        for xml path ('''') 
	) D (column_names)

where 
		t.is_ms_shipped &lt;&gt; 1
		and 
		index_id &gt; 0
		AND
		(
			LEN(rtrim(ltrim(''' + CAST(@tableToFind AS NVARCHAR(50)) +'''))) = 0
			OR
			t.[name] = ''' + CAST(@tableToFind AS NVARCHAR(50)) +'''
		)
order by DatabaseName, schema_name(t.schema_id),  t.[name]

'
PRINT(@query_string)

EXEC sys.sp_executesql @query_string

SELECT * from #P_0017_TASK_006_SP_03
order by DatabaseName, schemaName,  table_or_view_Name</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>eMail</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_eMail</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>eMail</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_eMail</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_email



use msdb
go


SELECT * FROM msdb..sysmail_event_log order by log_id DESC

SELECT * FROM msdb..sysmail_mailitems;

SELECT * FROM msdb..sysmail_sentitems;  --

--This one shows Sent, failed, etc=======================================
USE msdb
SELECT sent_status, *
FROM sysmail_allitems

 SELECT is_broker_enabled FROM sys.databases WHERE name = 'msdb';

 EXECUTE msdb.dbo.sysmail_help_status_sp
 
 
 =======================
 
 config file:
 C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Binn\DatabaseMail.exe.config</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>eMail</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>trouble-shooting_database_email</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>eMail</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>trouble-shooting_database_email</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--https://technet.microsoft.com/en-us/library/ms187540(v=sql.105).aspx
--To determine if Database Mail is enabled

sp_configure 'show advanced', 1; 
GO
RECONFIGURE;
GO
sp_configure;
GO

--In the results pane, confirm that the run_value for Database Mail XPs is set to 1.

--3.To restore the sp_configure procedure to its default state, which does not show advanced options, execute the following code:
sp_configure 'show advanced', 0; 
GO
RECONFIGURE;
GO


--To determine if users are properly configured to send Database Mail

--1.To send Database Mail, users must be a member of the DatabaseMailUserRole. 
--	Members of the sysadmin fixed server role and msdb db_owner role are automatically members of the DatabaseMailUserRole role. 
--	To list all other members of the DatabaseMailUserRole execute the following statement:

EXEC msdb.sys.sp_helprolemember 'DatabaseMailUserRole';

--2.To add users to the DatabaseMailUserRole role, use the following statement:

sp_addrolemember @rolename = 'DatabaseMailUserRole' ,@membername = 'JPHSA01\ggarson';
   
--3.To send Database Mail, users must have access to at least one Database Mail profile. 
	--To list the users (principals) and the profiles to which they have access, execute the following statement.   
	
EXEC msdb.dbo.sysmail_help_principalprofile_sp;


--1.The Database Mail External Program is activated when there are e-mail messages to be processed. 

EXEC msdb.dbo.sysmail_help_status_sp;

--2.If the Database Mail activation is not started, execute the following statement to start it:

EXEC msdb.dbo.sysmail_start_sp;

--3.If the Database Mail external program is started, 
	--check the status of the mail queue with the following statement:
	
EXEC msdb.dbo.sysmail_help_queue_sp @queue_type = 'mail';



--This shows you what was sent, failed, etc
--=======================================
USE msdb
SELECT sent_status, *
FROM sysmail_allitems
order by send_request_date desc
--=======================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Functions_WINDOW_FUNCTIONS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>useWindowFunction_in_Calculations</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Functions_WINDOW_FUNCTIONS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>useWindowFunction_in_Calculations</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
-- Total Apps 	 
, coalesce( SUM(TotalApps)  OVER(PARTITION BY Region, LenderName) ,0) sum_TotalApps_byLenderName
, coalesce( SUM(TotalApps)  OVER() ,0) sum_TotalApps_ALL

--StraightApproval
, coalesce( SUM(StraightApproval)  OVER(PARTITION BY Region, LenderName) ,0)  sum_StraightApproval_byLenderName
, coalesce( ROUND( CAST(   (SUM(StraightApproval)  OVER(PARTITION BY Region, LenderName) )  as float) / (SUM(TotalApps)  OVER(PARTITION BY Region, LenderName) ) ,2  ) ,0)   as pcntStraightApproval_byLenderName
, coalesce( ROUND( CAST(   (SUM(StraightApproval)  OVER(PARTITION BY Region) )  as float) / (SUM(TotalApps)  OVER(PARTITION BY Region) ) ,2  ) ,0)   as pcntStraightApproval_byRegion
, coalesce( ROUND( CAST(   (SUM(StraightApproval)  OVER() )  as float) / (SUM(TotalApps)  OVER() ) ,2  ) ,0)   as pcntStraightApproval_ALL  
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--Case When
CASE
		WHEN 
			(SUM([ActiveFundedLast6MonthsActiveBalance]) OVER(PARTITION BY [DecisionedLoanOfficer]) = 0 )
			THEN 0
		Else 1
		END AS [xxx]
		
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CASE	
WHEN 
	(SUM([ActiveFundedLast6MonthsActiveBalance]) OVER(PARTITION BY [DecisionedLoanOfficer]) = 0 )
	THEN 0
Else 
	(
		(
			SUM(	CASE 
							WHEN [EPDCount] = 1 Then [ActiveBalance]			
							Else 0
						End ) 
				OVER(PARTITION BY [DecisionedLoanOfficer])
				
			/
			SUM([ActiveFundedLast6MonthsActiveBalance]) OVER(PARTITION BY [DecisionedLoanOfficer] )   
		)
	)
END AS [EPDpcntByNCO],


--========================================
SELECT 
   *,
   CASE WHEN (SUM(b.myField) 
OVER (PARTITION BY ID))=1 THEN SUM(b.myField)
 ELSE AVG(b.myField) END 
FROM tbl a
LEFT JOIN tbl2 b ON a.ID = b.aID</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>INSERT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>rowversion_or_timestamp_in_DestinationTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>INSERT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>rowversion_or_timestamp_in_DestinationTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--For this table definition, which has a rowversion:
--You must list the columns in the INSERT statement , see below


CREATE TABLE [Reporting].[T210_Columns_for_Tables_in_Databases](

	[T210_PK] [int] IDENTITY(1,1) NOT NULL,
	[T210_RowVersion] [timestamp] NOT NULL,
	----------------------------------------
	[DatabaseName] [nvarchar](25) NULL,
	[DataAcquiredDateTime] [datetime] NULL,
	[Table_Name] [sysname] NOT NULL,
	[Column_Name] [sysname] NULL,
	[Data_Type] [sysname] NOT NULL,
	[Size] [smallint] NOT NULL,
	[Precision_Scale] [varchar](61) NULL,
	[flag_Current] [int] NOT NULL,
	[schemaName] [nvarchar](128) NULL,
	----------------------------------------


 CONSTRAINT [T210_PrimaryKey_$_T210_PK] PRIMARY KEY CLUSTERED 
(
	[T210_PK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


---==================================================================================

--P_0017_TASK_006_RES_04_STEP_3_LIST_of_all_FIELDS_in_all_TABLES_of_database_INSERT_INTO_T210_v2.sql



use RiskMngt
go
DECLARE @sDatabase nvarchar(25)	
SELECT @sDatabase = 'RiskMngt'

DECLARE @dataAcquiredDateTime as DateTime = getdate()	

--IF OBJECT_ID('riskmngt.reporting.gg_junk') IS NOT NULL
--    DROP TABLE riskmngt.reporting.gg_junk



INSERT INTO [RiskMngt].[Reporting].[T210_Columns_for_Tables_in_Databases](	[DatabaseName]           --&lt;============ LIST THE COLUMNS
      ,[DataAcquiredDateTime]
      ,[Table_Name]
      ,[Column_Name]
      ,[Data_Type]
      ,[Size]
      ,[Precision_Scale]
      ,[flag_Current]
      ,[schemaName])
	
 SELECT
		@sDatabase as [DatabaseName]
		,
		@dataAcquiredDateTime as [DataAcquiredDateTime]
		, 
		T.name AS [Table_Name] 
		,
		C.name AS [Column_Name] 
		,
		P.name AS [Data_Type]
		 ,
		P.max_length AS [Size]
		 ,
		CAST(P.precision AS VARCHAR) + '/' + CAST(P.scale AS VARCHAR) AS [Precision_Scale]
		,
		1 as [flag_Current]
		------------------------------
		,
		SCHEMA_NAME(T.schema_id) as [schemaName]


--INTO riskmngt.reporting.gg_junk
FROM   
		sys.objects AS T
		JOIN 
		sys.columns AS C 
		ON T.object_id = C.object_id
		
		JOIN 
		sys.types AS P 
		ON C.system_type_id = P.system_type_id



WHERE  T.type_desc = 'USER_TABLE';
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DECLARE_SELECT_LocalVariables</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DECLARE_SELECT_LocalVariables</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--Usage:
SELECT -- Designed to return data.
SET -- Designed to assign values to local variables.
--SET is the ANSI standard for variable assignment,
--SET can only assign one variable at a time, SELECT can make multiple assignments at once 
--Whenever you are assigning a query returned value to a variable, SET will accept and assign a scalar (single) value from a query. 
--	While SELECT could accept multiple returned values.

--Following are few scenarios for using SET

--	If you are required to assign a single value directly to variable and no query is involved to fetch value
--	NULL assignments are expected (NULL returned in result set)
--	Standards are meant to be follow for any planned migration
--	Non scalar results are expected and are required to be handled

--Using SELECT is efficient and flexible in the following few cases.

--	Multiple variables are being populated by assigning values directly
--	Multiple variables are being populated by single source (table , view)
--	Less coding for assigning multiple variables
--	Use this if you need to get @@ROWCOUNT and @ERROR for last statement execut


--add the date to the end of the variable
SET model_name = 'rxLinMod ' + format(getdate(), 'yyyy.MM.HH.mm', 'en-gb')


DECLARE @sString nvarchar(25)	
SELECT @sString = 'xxx'	
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Declare variables used internally in the Stored Procedure, and set intial values:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
   DECLARE @CONTINUE BIT	
   DECLARE @Claim_PK INT
   DECLARE @Claim_TEMP_PK INT
   DECLARE @MessageFromSQL nvarchar(25)
   
	SELECT @CONTINUE = 1	
	SELECT @Claim_PK = 0
	SELECT @MessageFromSQL = 'MessageFromSQL: '	
	SELECT @Claim_TEMP_PK =CAST(@sClaim_TEMP_PK as INT)
	
	
	
	   DECLARE @BeginDate as date
   DECLARE @EndDate as date
   DECLARE @Division as char(9)
   --DECLARE @Company as char(3)  

                	
	SELECT @BeginDate = '01-01-2015'
	SELECT @EndDate = '01-01-2016'	
	SELECT @Division ='2A'
	--SELECT @Company ='1'
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

SELECT @TotalUsed_ALL = (SELECT TOP(1) Total_Used FROM #prj_0031_SP_202 WHERE UnitType = 'ALL')
SELECT @TotalUsed_Quad = (SELECT TOP(1) Total_Used FROM #prj_0031_SP_202 WHERE UnitType = 'Quad')
SELECT @TotalUsed_Trailer = (SELECT TOP(1) Total_Used FROM #prj_0031_SP_202 WHERE UnitType = 'Trailer')
SELECT @TotalUsed_TriAxle = (SELECT TOP(1) Total_Used FROM #prj_0031_SP_202 WHERE UnitType = 'TriAxle')

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


--DEFINE WORK VARIABLES
DECLARE @BEGYEAR AS CHAR(8)
DECLARE @ENDYEAR AS CHAR(8)
DECLARE @LASTYEAR AS CHAR(4)
DECLARE @NEXTYEAR AS CHAR(4)
DECLARE @NWYEAR AS INTEGER


--INIT WORK VARIABLES
SET @BEGYEAR = '01/01/' + RIGHT(@YYYY,2)
IF @HOW = 'M'
	BEGIN
		SET @ENDYEAR = '08/31/' + RIGHT(@YYYY,2)
	END
ELSE
	BEGIN
		SET @ENDYEAR = '12/31/' + RIGHT(@YYYY,2)
	END
SET @NWYEAR = CAST(@YYYY AS INTEGER)
SET @LASTYEAR = CAST( (@NWYEAR - 1) AS CHAR)
SET @NEXTYEAR = CAST( (@NWYEAR + 1) AS CHAR)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Select_Insert_ToCopyFromTo</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Select_Insert_ToCopyFromTo</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- ================================================

USE [DB1_Main]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[prj_0002_sp_902_SelectInsert_From_T7_to_T8] 

AS
BEGIN

	INSERT [dbo].[T8_All_Hospitals_Daily_ARCHIVE_t] 
		(
			[Facility_Code] ,
			[Patient_Account_Number] ,
			[MEDICAID_ID] ,
			[SSN] ,		
			[Patient_Type] ,			
			[Admit_DATE] ,				
			[Discharge_DATE] ,				
			[LAST_NAME] ,
			[FIRST_NAME] ,
			[Middle_Init] ,
			[ADDR1] ,
			[ADDR2]
		)
	SELECT 
			[Facility_Code] ,
			[Patient_Account_Number] ,
			[MEDICAID_ID] ,
			[SSN] ,		
			[Patient_Type] ,			
			[Admit_DATE] ,				
			[Discharge_DATE] ,				
			[LAST_NAME] ,
			[FIRST_NAME] ,
			[Middle_Init] ,
			[ADDR1] ,
			[ADDR2]		
	FROM [dbo].[T7_All_Hospitals_Daily_t]

END
GO
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_COMPLEX</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Setting_a_variable_To_result_of_a_SELECT_Query</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_COMPLEX</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Setting_a_variable_To_result_of_a_SELECT_Query</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SET @cnt = SELECT COUNT(*) FROM User
--or
SELECT @cnt=COUNT(*) FROM User




//////////////////////////////////////////////////


/* prj_0028_SP_901_ReturnNumberOfRecordsUploadedToday_From_T07.sql


************************************************************************************
created:	7/22/2013
by:			glenn garson
************************************************************************************
*/

use DB1_Main
go

alter PROCEDURE prj_0028_SP_901_ReturnNumberOfRecordsUploadedToday_From_T07
AS

-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Declare variables used internally in the Stored Procedure, and set intial values:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
DECLARE @Date_Today date   
SELECT @Date_Today = GETDATE()

DECLARE @NumberOfRows INT 


Select @NumberOfRows= COUNT(*) 
From [DB1_Main].dbo.[T07_All_Hospitals_ARCHIVE]
Where [Date_Uploaded] = @Date_Today

print @NumberOfRows

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_COMPLEX</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SubQuerySelect_in_WHEN_of_a_CASE_Calculation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_COMPLEX</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SubQuerySelect_in_WHEN_of_a_CASE_Calculation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(
									( Select AppropriationFund
											FROM RSC_FUND_Code_All_L AS Code
											WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK)='528701'
								)
									AND
								(
									( Select RSC
										FROM RSC_FUND_Code_All_L AS Code
										WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) = '8BZZ'
								)
							)	
							  
							THEN Principal
							ELSE 0
					END) AS [Voucher_528701_8BZZ]	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_COMPLEX</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ThreeTypesOfSubQuery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_COMPLEX</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ThreeTypesOfSubQuery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- PV_5_FundsForBill_MMDDYYYY.sql

use Firstparty
GO

SELECT TOP(11) Public_Vouchers_PK, 
				Public_Voucher_ID, 
				RSC_FUND_Code_FK, 
				Doc_Total as Voucher_DocTotal, 
				Veteran_Name, 
				Export2Excel_DateTime, 
				Station_Number, 
				[1stPartyBillNo], 
				[3rdPartyBillNo], 
				Interest as Interest_1435, 
				[Admin] as Admin_3220,
				Principal as Bill_Principal, 
				AppropriationFund as Bill_AppropriationFund, 
				RSC as Bill_RSC, 
				TOPsFee as [Bill_TOPsFee_0160A1], 
				DateProcessed,	
				MONTH(DateProcessed) AS Month_Processed,
				DAY(DateProcessed) AS Day_Processed,
				YEAR(DateProcessed) AS Year_Processed,				
				( Select code.RSC
					FROM RSC_FUND_Code_All_L AS Code
					WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) as Voucher_RSC,
				( Select Code.AppropriationFund
					FROM RSC_FUND_Code_All_L AS Code
					WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) as Voucher_AppropriationFund,
				-- START Bill Funds
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(AppropriationFund='528703')
								AND
								(RSC = '88ZZ')
							  ) 
							THEN Principal
							ELSE 0
					END) AS [Bill_528703_88ZZ],
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(AppropriationFund='528703')
								AND
								(RSC = 'ARRV')
							  ) 
							THEN Principal
							ELSE 0
					END) AS [Bill_528703_ARRV],
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(AppropriationFund='528701')
								AND
								(RSC = '8CZZ')
							  ) 
							THEN Principal
							ELSE 0
					END) AS [Bill_528701_8CZZ],
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(AppropriationFund='528701')
								AND
								(RSC = '8BZZ')
							  ) 
							THEN Principal
							ELSE 0
					END) AS [Bill_528701_8BZZ],
				-- START Voucher Funds
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(
									( Select AppropriationFund
											FROM RSC_FUND_Code_All_L AS Code
											WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK)='528703'
								)
									AND
								(
									( Select RSC
										FROM RSC_FUND_Code_All_L AS Code
										WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) = '88ZZ'
								)
							)	
							  
							THEN Principal
							ELSE 0
					END) AS [Voucher_528703_88ZZ],
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(
									( Select AppropriationFund
											FROM RSC_FUND_Code_All_L AS Code
											WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK)='528703'
								)
									AND
								(
									( Select RSC
										FROM RSC_FUND_Code_All_L AS Code
										WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) = 'ARRV'
								)
							)	
							  
							THEN Principal
							ELSE 0
					END) AS [Voucher_528703_ARRV],
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(
									( Select AppropriationFund
											FROM RSC_FUND_Code_All_L AS Code
											WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK)='528701'
								)
									AND
								(
									( Select RSC
										FROM RSC_FUND_Code_All_L AS Code
										WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) = '8CZZ'
								)
							)	
							  
							THEN Principal
							ELSE 0
					END) AS [Voucher_528701_8CZZ],																					
				(SELECT 'TheCalculation' =
					CASE
						WHEN (
								(
									( Select AppropriationFund
											FROM RSC_FUND_Code_All_L AS Code
											WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK)='528701'
								)
									AND
								(
									( Select RSC
										FROM RSC_FUND_Code_All_L AS Code
										WHERE Code.RSC_FUND_Code_PK= RSC_FUND_Code_FK) = '8BZZ'
								)
							)	
							  
							THEN Principal
							ELSE 0
					END) AS [Voucher_528701_8BZZ]	
FROM 
	(
		(

			SELECT *
			FROM 
				(
					PV_5_Archive_t AS LEFT_1
					INNER JOIN
					Medical_Centers_STN_t AS RIGHT_1
					ON (LEFT_1.Medical_Center_FK = RIGHT_1.Medical_Center_STN_PK)
				)
			WHERE (
					LEFT_1.Public_Vouchers_PK IS NOT NULL
				  )
		) AS LEFT_2
		INNER JOIN
		PV_Bills_st AS RIGHT_2
		ON (LEFT_2.Public_Vouchers_PK = RIGHT_2.Public_Vouchers_FK)
	
	)
	  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>02___p_0003_SP_012_Search_All_IP_Devices_ForIT_w_Checkboxes_v2.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>02___p_0003_SP_012_Search_All_IP_Devices_ForIT_w_Checkboxes_v2.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--p_0003_SP_012_Search_All_IP_Devices_ForIT_w_Checkboxes_v2.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 10/16/2017
	By: glenn garson
	************************************************************************************
*/

use d1_IT
go
--=================================================
--DECLARE @SearchString nvarchar(100)
--SET @SearchString = ''

--DECLARE @AgencyDivision nvarchar(max)
--SET @AgencyDivision = 'JPHSA_Admin_IT,JPHSA_Admin'
----SET @AgencyDivision = '0_All'

--DECLARE @Building nvarchar(max)
--SET @Building = 'EB_1st_Floor,EB_2nd_Floor'
----SET @Building = '0_All'

--DECLARE @DeviceType nvarchar(max)
--SET @DeviceType = '0_All'

--DECLARE @DeviceStatus nvarchar(max)
--SET @DeviceStatus = '0_All'

--=================================================
alter Procedure p_0003_SP_012_Search_All_IP_Devices_ForIT_w_Checkboxes(
		 @SearchString as NVARCHAR(100)
		 ,@AgencyDivision as nvarchar(max)  
		 ,@Building as nvarchar(max)   		                       	
		 ,@DeviceType as nvarchar(max)   		                       	
		 ,@DeviceStatus as nvarchar(max)   		                       	
	)
	WITH EXECUTE AS 'dbo'
	as
--=================================================
	SELECT 
			[T004_IP_Inventory_PK]
			,[TheDevice_JPHSA_Tag]
			,[Monitor_1_JPHSA_Tag]
			,[Monitor_2_JPHSA_Tag]
			,[Monitor_3_JPHSA_Tag]
			,[Vendor_Service_Tag]
			,[Room_Number]
			,[User]
			,[Group]
			,[Location]
			,[DeviceType]
			,[Model_Brand]
			,[Comment]
			,[Building]
			,[Project]
			,[DeviceStatus]
			,[Agency_Division]
			,[CreateRecord_dateTime]
			,[CreateRecord_name]
			,[UpdateRecord_dateTime]
			,[UpdateRecord_name]
			,[Serial_Number]
			,[EndOfLife_Date]
			,[Acquired_Date]
			,[PowerShellRemoting_enabled]
			,[Static_IP_Address_1]
			,[Static_IP_Address_2]
			,[Static_IP_Address_3]
			,[AD_ComputerName]
			,[BIOS_Release_Date]
			,[OS]
			,[officeVersion]


	FROM p_0003_vw_501_All_IP_Devices
	WHERE
			(
				(
					(LEN(@SearchString) = 0) 
					OR 
					(@SearchString IS NULL)							
				)
				OR
				(
						(RTRIM(LTRIM(UPPER([TheDevice_JPHSA_Tag]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%')	
						OR (RTRIM(LTRIM(UPPER([Monitor_1_JPHSA_Tag]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%')
						OR (RTRIM(LTRIM(UPPER([Monitor_2_JPHSA_Tag]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%')	
						OR (RTRIM(LTRIM(UPPER([Monitor_3_JPHSA_Tag]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%')																					
						OR (RTRIM(LTRIM(UPPER([Vendor_Service_Tag]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([Room_Number]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([User]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([Group]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([Location]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )
						OR (RTRIM(LTRIM(UPPER([DeviceType]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )																			
						OR (RTRIM(LTRIM(UPPER([Model_Brand]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([Comment]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([Serial_Number]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )
						OR (RTRIM(LTRIM(UPPER([Static_IP_Address_1]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						OR (RTRIM(LTRIM(UPPER([Static_IP_Address_2]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )
						OR (RTRIM(LTRIM(UPPER([Static_IP_Address_3]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )
						OR (RTRIM(LTRIM(UPPER([AD_ComputerName]))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )
				)
			)
			--================================================
			AND									
			(
				([Agency_Division] IN (select Item from dbo.p_0000_FUNC_001_unSplit(@AgencyDivision,','))	) 
				OR
				(@AgencyDivision = '0_ALL')			
			)
			AND									
			(
				([Building] IN (select Item from dbo.p_0000_FUNC_001_unSplit(@Building,','))	) 
				OR
				(@Building = '0_ALL')			
			)
			AND									
			(
				([DeviceType] IN (select Item from dbo.p_0000_FUNC_001_unSplit(@DeviceType,','))	) 
				OR
				(@DeviceType = '0_ALL')			
			)
			AND									
			(
				([DeviceStatus] IN (select Item from dbo.p_0000_FUNC_001_unSplit(@DeviceStatus,','))	) 
				OR
				(@DeviceStatus = '0_ALL')			
			)
	ORDER BY [Acquired_Date] Desc, DeviceType, TheDevice_JPHSA_Tag</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>02_about__MultiChoiceDropDown_StringSearch_Sort_DropDownFromHardCode</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>02_about__MultiChoiceDropDown_StringSearch_Sort_DropDownFromHardCode</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>02_about__MultiChoiceDropDown_StringSearch_Sort_DropDownFromHardCode


--need function on SQL: 
p_0000_FUNC_001_unSplit

--SSRS Report:
030_IT_INVENTORY 
-- with 5 datasets:
	Main:				SP: p_0003_SP_012_Search_All_IP_Devices_ForIT_w_Checkboxes
	LIST_AgencyDivision	SP: p_0003_SP_008_LIST_AgencyDivision
	LIST_Building		SP: p_0003_SP_009_LIST_Building
	LIST_DeviceType		SP: p_0003_SP_010_LIST_DeviceType
	LIST_DeviceStatus	SP: p_0003_SP_013_LIST_DeviceStatus_for_IT
-- Parameters
	SearchString
	AgencyDivision	(
						General: Name: AgencyDivision, 
						Prompt: Agency Division, 
						DataType: Text [x]Allow Multiple values)
						(
							[Available Values]from a query: Dataset:LIST_AgencyDivision, 
							Value Field: AgencyDivision, 
							Label Field:AgencyDivision) 
							(
								[Default Values]: Dataset:LIST_AgencyDivision, 
								Value Field: AgencyDivision
							)   
	Building
	DeviceType
	DeviceStatus		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>03_DrillThrough_01_Details_example</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>03_DrillThrough_01_Details_example</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>NOTE: to create the temp table, for gettting the table specifications
1] Delete the persisted table if it already exists
2] SELECT ... INSERT INTO {a persisted table, on disk}
3] Then reverse-engineer the table





--03_DrillThrough_01_Details_example
--======================================================

USE RiskMngt
GO

--P_0020_TASK_011_SP_01_MAIN_MTD_chargeOff_details_v13.sql
/*	
	************************************************************************************
	SSRS Report: 
	NOTE: Replaced the following views with tables, which limits input data to: 10/7/2018 to present i.e. Shaw version 5.4
			1] VIEW: R_WAREHOUSE.CBT.RWH_ARCHIVE_EOD_EXRETAIL RET	
				TABLE: SHAWArchive.dbo.M01					
			2] FROM [R_WAREHOUSE].[cbt].[rwh_archive_eod_EXTRKC64] = SHAWArchive.dbo.M01 m01 INNER JOIN SHAWArchive.dbo.CR01 cr01 ON cr01.M01_ID = m01.M01_ID AND cr01.BUS_DATE = M01.BUS_DATE				
				TABLE: SHAWArchive.dbo.M01

			--If today is first of month, then start at beginning of last month, otherwise start at the beginning of this month

			--These are really the 60+ DPD queues. At this time they are under Roger Hale
	Uses: This SP should be the DrillThrough report, and input data for the Aggregated Reports that drill through to this report.
		  If a parm is not populated by one of the calling reports (i.e. it is NULL) then it should be ALL values. 

	Conditional WHERE Statement rules
		1] LIST
			Either @LIST_ALLOCATION_MIN, and @LIST_ALLOCATION_MAX should be populated
			OR
			@LIST should be populated.


	Created: 06/710/2019
	By: glenn garson
	************************************************************************************
*/
--=============================================DEBUG START
--DECLARE @LIST_ALLOCATION_MIN FLOAT  --(SELECT VALUE FROM RiskMngt.dbo.CRD_REPORT_VARIABLES WHERE REPORT = '60to89kpi' AND VARIABLE = 'LIST_ALLOCATION_MIN');
--DECLARE @LIST_ALLOCATION_MAX FLOAT  --(SELECT VALUE FROM RiskMngt.dbo.CRD_REPORT_VARIABLES WHERE REPORT = '60to89kpi' AND VARIABLE = 'LIST_ALLOCATION_MAX');
--DECLARE @ShowAllBetweenMinAndMaxLIST bit
--DECLARE @LIST as FLOAT
--DECLARE @Client_App_ID NVARCHAR(15) 
--DECLARE @SHAW_CUSTOMER_NUMBER NVARCHAR(7)		--i.e. F0019_CUSTOMER_NUMBER
--DECLARE @Product NVARCHAR(15)
--DECLARE @SHAW_Account_Number NVARCHAR(20)		--i.e. F0003_USER_KEY
--DECLARE @CO_Date Date
----===========================================================================default LIST parameters For MOST testing
--SELECT @LIST_ALLOCATION_MIN = 1270
--SELECT @LIST_ALLOCATION_MAX = 1289
----SELECT @LIST_ALLOCATION_MIN = NULL			
----SELECT @LIST_ALLOCATION_MAX = NULL		
--SELECT @ShowAllBetweenMinAndMaxLIST = 1	
----===========================================================================Test values for non-list Parameters
--SELECT @LIST = NULL							--1277
--SELECT @Client_App_ID = ''				--'6646923'
--SELECT @SHAW_CUSTOMER_NUMBER = ''			--'3572534'
--SELECT @Product = 'CBT'						--'Indirect'
--SELECT @SHAW_Account_Number = ''			--'00000100135725340001'  ''
--SELECT @CO_Date = ''						--'2019-06-05'
--=============================================DEBUG END
ALTER PROCEDURE [Reporting].[P_0020_TASK_011_SP_01_MAIN_MTD_chargeOff_details] (
	@LIST_ALLOCATION_MIN FLOAT,
	@LIST_ALLOCATION_MAX FLOAT,
	@ShowAllBetweenMinAndMaxLIST BIT,
	@LIST FLOAT = NULL,
	@Client_App_ID NVARCHAR(15) = '',
	@SHAW_CUSTOMER_NUMBER NVARCHAR(7) = '',
	@Product NVARCHAR(15) = '',
	@SHAW_Account_Number NVARCHAR(20) = '',
	@CO_Date DATE = ''
	)
AS
--==============CLEAN UP INPUT VARIABLES - START ==============================================
--Make sure that the text fields are all consistent no matter how they come in. Focus on Nulls, and extra  spaces.
DECLARE @parmClient_App_ID NVARCHAR(15)
DECLARE @parmSHAW_CUSTOMER_NUMBER NVARCHAR(7) --i.e. F0019_CUSTOMER_NUMBER
DECLARE @parmProduct NVARCHAR(15)
DECLARE @parmSHAW_Account_Number NVARCHAR(20) --i.e. F0003_USER_KEY

SET @parmClient_App_ID = LTRIM(RTRIM(COALESCE(@Client_App_ID, '')))
SET @parmSHAW_CUSTOMER_NUMBER = LTRIM(RTRIM(COALESCE(@SHAW_CUSTOMER_NUMBER, '')))
SET @parmProduct = LTRIM(RTRIM(COALESCE(@Product, '')))
SET @parmSHAW_Account_Number = LTRIM(RTRIM(COALESCE(@SHAW_Account_Number, '')))

--==============CLEAN UP INPUT VARIABLES - END ==============================================
--On the first day of the month use first day of last month, after the first day of the month use first day of this month
--DECLARE @StartDate AS DATE = '2019-06-01'
DECLARE @StartDate AS DATE = (
		SELECT CASE 
				WHEN DAY(GETDATE()) = 1
					THEN DATEADD(MM, DATEDIFF(MM, 0, GETDATE()) - 1, 0)
				ELSE DATEADD(MM, DATEDIFF(MM, 0, GETDATE()), 0)
				END
		);
-- 10 days prior to @StartDate
DECLARE @StartDate2 AS DATE = DATEADD(dd, DATEDIFF(dd, 0, @StartDate), - 10);

--==============================================================================================
WITH cte_AccountsWithChargeOff_MTD
AS (
	SELECT R_TR_KEY AS F0003_USER_KEY,
		R_TR_PRIN AS [CO_dollars],
		R_TR_LONG_DESC,
		R_TR_PROC_DTE AS [CO_date],
		R_TR_PROC_DTE - 1 AS R_TR_PROC_DTE1
		-------------------------------------
		,CASE													--&lt;====  Added 6/14/2019
			WHEN R_TR_LONG_DESC IN('CHARGE-OFF REVERSAL') THEN -1 
			ELSE 1
			END AS countThisOne
	FROM RETAIL.DBO.RETAIL_TRAN_HISTORY
	WHERE R_TR_LONG_DESC IN ('CHARGE OFF', 'CHARGE-OFF REVERSAL', 'PARTIAL CHARGE-OFF', 'PARTIAL CHARGE-OFF REVERSAL') AND RETAIL_TRAN_HISTORY.R_TR_PROC_DTE &gt;= @StartDate
	),
cte_preSUM
AS (
	SELECT
		--========================================================================================
		CASE --[Product]
			WHEN (
					(M01_a.ONL_USER_ALF_1 IS NOT NULL) --[F0582_BANKRUPTCY_STATUS]
					AND (M01_a.ONL_USER_ALF_1 NOT IN ('BK-RELEASE', 'BK-CANCEL')) --[F0582_BANKRUPTCY_STATUS]
					AND (M01_a.PRODUCT_TYPE = 'PP') --[F0002_PROD_TYPE]
					)
				THEN 'PP Bankruptcy'
			WHEN (
					(M01_a.ONL_USER_ALF_1 IS NOT NULL) --[F0582_BANKRUPTCY_STATUS]
					AND (M01_a.ONL_USER_ALF_1 NOT IN ('BK-RELEASE', 'BK-CANCEL')) --[F0582_BANKRUPTCY_STATUS]
					AND (M01_a.PRODUCT_TYPE &lt;&gt; 'PP') --[F0002_PROD_TYPE]
					)
				THEN 'CBT Bankruptcy'
			WHEN (M01_a.PRODUCT_TYPE = 'DL')
				THEN 'Direct'
			WHEN (M01_a.PRODUCT_TYPE = 'IL')
				THEN 'Indirect'
			WHEN (M01_a.PRODUCT_TYPE = 'PP')
				THEN 'Purchase Pool'
			ELSE 'Not sure'
			END AS [Product],
		--========================================================================================	 
		cte.[CO_dollars] AS [CO_Amount],
		M01_a.NUM_PAYTS_PAID AS [NumberOfPaymentsMade],
		M01_a.ACCT_OPEN_DATE AS [Contract_Date],
		a.[Booked_Date],
		cte.[CO_date],
		DATEDIFF(DAY, M01_a.PRINCIPAL_DUE_DATE, cte.[CO_date]) DPD_at_CO,
		DATEDIFF(DAY, M01_a.ACCT_OPEN_DATE, cte.[CO_date]) AS DaysFromContractToChargeOff,
		ffa.[Booked_LTV],
		CASE 
			WHEN cr01.SALE_AMT &gt; 0
				THEN 'DBCO - Remarketing'
			WHEN cr01.ACCEL_DLR_RSV &gt; 0
				THEN 'DBCO - Insurance'
			ELSE 'FBCO'
			END AS [CO_Type],
		CASE 
			WHEN ((M01_a.PRODUCT_TYPE = 'PP') AND (cr01.USER_ALPHA_50_19 LIKE '%SALE OF VEHICLE%'))
				THEN 'No'
			WHEN ((coalesce(cr01.ACCEL_DLR_RSV, 0) &lt;= 0) AND (COALESCE(cr01.SALE_AMT, 0) &lt;= 0) AND cte.R_TR_LONG_DESC = 'CHARGE OFF')
				THEN 'Yes'
			WHEN ((coalesce(cr01.ACCEL_DLR_RSV, 0) &lt;= 0) AND (COALESCE(cr01.ACCEL_DLR_RSV, 0) &lt;= 0) AND cte.R_TR_LONG_DESC = 'CHARGE-OFF REVERSAL')
				THEN 'Reverse'
			ELSE 'No'
			END AS FBCO,
		CASE 
			WHEN ((M01_a.PRODUCT_TYPE = 'PP') AND (cr01.ACCEL_DLR_RSV LIKE '%SALE OF VEHICLE%'))
				THEN 0
			WHEN ((coalesce(cr01.ACCEL_DLR_RSV, 0) &lt;= 0) AND (COALESCE(cr01.SALE_AMT, 0) &lt;= 0) AND cte.R_TR_LONG_DESC = 'CHARGE OFF')
				THEN cte.[CO_dollars]
			WHEN ((coalesce(cr01.ACCEL_DLR_RSV, 0) &lt;= 0) AND (COALESCE(cr01.SALE_AMT, 0) &lt;= 0) AND cte.R_TR_LONG_DESC = 'CHARGE-OFF REVERSAL')
				THEN cte.[CO_dollars]
			ELSE 0
			END AS FBCO_Dollars,
		CASE 
			WHEN ((M01_a.PRODUCT_TYPE = 'PP') AND (cr01.USER_ALPHA_50_19 LIKE '%SALE OF VEHICLE%'))
				THEN 'Yes'
			WHEN (((cr01.ACCEL_DLR_RSV &gt; 0) OR (COALESCE(cr01.SALE_AMT, 0) &gt; 0)) AND cte.R_TR_LONG_DESC = 'CHARGE OFF')
				THEN 'Yes'
			WHEN (((cr01.ACCEL_DLR_RSV &gt; 0) OR (COALESCE(cr01.SALE_AMT, 0) &gt; 0)) AND cte.R_TR_LONG_DESC = 'CHARGE-OFF REVERSAL')
				THEN 'Reverse'
			ELSE 'No'
			END AS nonFBCO,
		CASE 
			WHEN ((M01_a.PRODUCT_TYPE = 'PP') AND (cr01.USER_ALPHA_50_19 LIKE '%SALE OF VEHICLE%'))
				THEN cte.[CO_dollars]
			WHEN (((cr01.ACCEL_DLR_RSV &gt; 0) OR (COALESCE(cr01.SALE_AMT, 0) &gt; 0)) ) --AND cte.R_TR_LONG_DESC = 'CHARGE OFF')
				THEN cte.[CO_dollars]
			WHEN (((cr01.ACCEL_DLR_RSV &gt; 0) OR (COALESCE(cr01.SALE_AMT, 0) &gt; 0)) AND cte.R_TR_LONG_DESC = 'CHARGE-OFF REVERSAL')
				THEN cte.[CO_dollars]
			ELSE 0
			END AS nonFBCO_Dollar,
		cr01.ORIG_RBT_AMT AS [Sale_Proceeds],
		CASE 
			WHEN cr01.ACCEL_DLR_RSV IS NULL
				THEN 0
			ELSE cr01.ACCEL_DLR_RSV
			END AS [InsuranceCheckPosted_Dollars],
		a.[Credit_Tier],
		M01_a.COLLECTION_UNIT AS [LIST],
		d.FullName [Customer_Name],
		a.Dealer_Name,
		(a.veh_Model + ', ' + a.veh_Year) AS [Veh_Model_Year],
		CASE 
			WHEN dd.DealerActive = 1
				THEN 'YES'
			ELSE 'no'
			END AS ActiveDealer,
		SCFX.ASSIGNED_LIST_DESC AS [List_Description],
		SUBSTRING(M01_a.ACCOUNT, 10, 7) AS F0019_CUSTOMER_NUMBER,
		M01_a.CIF_REFERENCE AS [Client_App_ID],
		M01_a.ACCOUNT AS [F0003_USER_KEY],
		a.[Region],
		a.[LPO_Name] AS [Branch],
		(LO_XREF.FIRST_NAME + ' ' + LO_XREF.LAST_NAME) AS [Loan_Officer]
		,cte.countThisOne
	FROM cte_AccountsWithChargeOff_MTD cte
	INNER JOIN SHAWArchive.dbo.M01 M01_a
		ON cte.F0003_USER_KEY = M01_a.ACCOUNT AND cte.R_TR_PROC_DTE1 = M01_a.BUS_DATE
	LEFT JOIN CBCUSTOM.DBO.LOANOFFICERXREF LO_XREF
		ON M01_a.OFFICER = LO_XREF.OFFICER_NUM
	INNER JOIN SHAWArchive.dbo.CR01 cr01
		ON cr01.M01_ID = M01_a.M01_ID AND cr01.BUS_DATE = M01_a.BUS_DATE
	LEFT JOIN COLLECT_ETL.dbo.SCFXROSTER SCFX
		ON M01_a.COLLECTION_UNIT = SCFX.ASSIGNED_LIST
	LEFT JOIN [edwCrescent].[dbo].[DimAccount] a
		ON M01_a.ACCOUNT = a.Acct_Nbr
	LEFT JOIN [edwCrescent].[dbo].[DimApplicantDemographics] d
		ON M01_a.CIF_REFERENCE = d.ClientAppID
	LEFT JOIN [edwCrescent].[dbo].[DimDealer] dd
		ON a.Dealer_Num = dd.DealerNum
	LEFT JOIN [edwCrescent].[dbo].[factFundedAccounts] ffa
		ON a.AccountKey = ffa.AccountKey
	WHERE M01_a.BUS_DATE &gt; @StartDate2 AND M01_a.BUS_DATE &gt; @StartDate2
	)
SELECT --*
	[F0003_USER_KEY] AS [SHAW_Acct_Number],
	[F0019_CUSTOMER_NUMBER] AS [SHAW_Cust_Number],
	[Client_App_ID],
	[Region],
	[Branch],
	[Loan_Officer],
	[CO_Amount],
	[NumberOfPaymentsMade],
	[Contract_Date],
	[Booked_Date],
	[CO_date],
	[DPD_at_CO],
	[DaysFromContractToChargeOff],
	[LIST],
	[List_Description],
	[Customer_Name],
	[Dealer_Name],
	[ActiveDealer],
	[FBCO],
	[FBCO_Dollars],
	[nonFBCO],
	[nonFBCO_Dollar],
	[Sale_Proceeds],
	[InsuranceCheckPosted_Dollars],
	[Veh_Model_Year],
	[Booked_LTV],
	[Product],
	[CO_Type],
	[Credit_Tier],
	COUNT(*) OVER () AS theCount,
	countThisOne,								--&lt;====  Added 6/14/2019
	@LIST_ALLOCATION_MIN AS parm_LIST_ALLOCATION_MIN,
	@LIST_ALLOCATION_MAX AS parm_LIST_ALLOCATION_MAX,
	@ShowAllBetweenMinAndMaxLIST AS parm_ShowAllBetweenMinAndMaxLIST,
	@LIST AS parm_LIST,
	@parmClient_App_ID AS parm_Client_App_ID,
	@parmSHAW_CUSTOMER_NUMBER AS parm_SHAW_CUSTOMER_NUMBER,
	@parmProduct AS parm_Product,
	@parmSHAW_Account_Number AS parm_SHAW_Account_Number,
	@CO_Date AS parm_CO_Date
FROM cte_preSUM
WHERE (
		(
			--======================================================================================
			--Determine whether to use the MIN/MAX range of LISTs, or a specific LIST
			((@LIST_ALLOCATION_MIN IS NOT NULL) AND (@LIST_ALLOCATION_MAX IS NOT NULL) AND ((@LIST IS NULL) OR (@ShowAllBetweenMinAndMaxLIST = 1)) AND (LIST BETWEEN @LIST_ALLOCATION_MIN AND @LIST_ALLOCATION_MAX)) OR (((@LIST_ALLOCATION_MIN IS NULL) OR (@LIST_ALLOCATION_MAX IS NOT NULL)) AND (@LIST IS NOT NULL) AND (@ShowAllBetweenMinAndMaxLIST &lt;&gt; 1) AND (LIST = @LIST))
			--======================================================================================
			) AND ((@parmClient_App_ID &lt;&gt; '' AND Client_App_ID LIKE '%' + @parmClient_App_ID + '%') OR (@parmClient_App_ID = '')) AND ((@parmSHAW_CUSTOMER_NUMBER &lt;&gt; '' AND F0019_CUSTOMER_NUMBER LIKE '%' + @parmSHAW_CUSTOMER_NUMBER + '%') OR (@parmSHAW_CUSTOMER_NUMBER = '')) AND ((@parmProduct &lt;&gt; '' AND Product LIKE '%' + @parmProduct + '%') OR (@parmProduct = '')) AND ((@parmSHAW_Account_Number &lt;&gt; '' AND F0003_USER_KEY LIKE '%' + @parmSHAW_Account_Number + '%') OR (@parmSHAW_Account_Number = '')) AND (
			(
				(Coalesce(@CO_Date, '') &lt;&gt; '1900-01-01') --i.e. it is not null
				AND (CO_date = @CO_Date)
				) OR (
				(Coalesce(@CO_Date, '') = '1900-01-01') --i.e. it is not null
				)
			)
		)

ORDER BY PRODUCT --DATEDIFF(mm,[Contract_Date],[CO_date])	--LIST</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>03_DrillThrough_02_OneWayAggregateFromDetails</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>03_DrillThrough_02_OneWayAggregateFromDetails</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--03_DrillThrough_02_OneWayAggregateFromDetails
--========================================================

use RiskMngt
go

--P_0020_TASK_011_REP_02_SP_01_MAIN_MTDChargeOffs_byProduct_v3.sql
/*
	************************************************************************************
	SSRS Report: Aggregate By Production
	NOTE: 
	Uses: 
	Created: 06/11/2019
	By: glenn garson
	************************************************************************************
*/

alter Procedure [Reporting].[P_0020_TASK_011_REP_02_SP_01_MAIN_MTDChargeOffs_byProduct](
																					@LIST_ALLOCATION_MIN FLOAT
																					, @LIST_ALLOCATION_MAX FLOAT
																					, @ShowAllBetweenMinAndMaxLIST bit
																					)
	as

IF OBJECT_ID('tempdb..#Details01') IS NOT NULL
	DROP TABLE #Details01

CREATE TABLE #Details01
(
	[SHAW_Acct_Number] [varchar](20) NOT NULL,
	[SHAW_Cust_Number] [varchar](7) NULL,
	[Client_App_ID] [varchar](15) NULL,
	[Region] [varchar](20) NULL,
	[Branch] [varchar](50) NULL,
	[Loan_Officer] [varchar](101) NULL,
	[CO_Amount] [money] NULL,
	[NumberOfPaymentsMade] [int] NULL,
	[Contract_Date] [datetime] NULL,
	[Booked_Date] [datetime] NULL,
	[CO_date] [datetime] NOT NULL,
	[DPD_at_CO] [int] NULL,
	[DaysFromContractToChargeOff] [int] NULL,
	[LIST] [varchar](7) NULL,
	[List_Description] [varchar](30) NULL,
	[Customer_Name] [varchar](130) NULL,
	[Dealer_Name] [varchar](60) NULL,
	[ActiveDealer] [varchar](3) NOT NULL,
	[FBCO] [varchar](7) NOT NULL,
	[FBCO_Dollars] [money] NULL,
	[nonFBCO] [varchar](7) NOT NULL,
	[nonFBCO_Dollar] [money] NULL,
	[Sale_Proceeds] [decimal](15, 2) NULL,
	[InsuranceCheckPosted_Dollars] [decimal](15, 2) NULL,
	[Veh_Model_Year] [varchar](56) NULL,
	[Booked_LTV] [decimal](12, 4) NULL,
	[Product] [varchar](14) NOT NULL,
	[CO_Type] [varchar](18) NOT NULL,
	[Credit_Tier] [varchar](3) NULL,
	[theCount] [int] NULL,
	[countThisOne] [int] NOT NULL,  --&lt;========== changed 6/14/2019
	[parm_LIST_ALLOCATION_MIN] [float] NULL,
	[parm_LIST_ALLOCATION_MAX] [float] NULL,
	[parm_ShowAllBetweenMinAndMaxLIST] [bit] NULL,
	[parm_LIST] [float] NULL,
	[parm_Client_App_ID] [nvarchar](15) NULL,
	[parm_SHAW_CUSTOMER_NUMBER] [nvarchar](7) NULL,
	[parm_Product] [nvarchar](15) NULL,
	[parm_SHAW_Account_Number] [nvarchar](20) NULL,
	[parm_CO_Date] [date] NULL
)

--INSERT #Details01 EXEC	[RiskMngt].[Reporting].[P_0020_TASK_011_SP_01_MAIN_MTD_chargeOff_details]
--		@LIST_ALLOCATION_MIN = 1270,
--		@LIST_ALLOCATION_MAX = 1289,
--		@ShowAllBetweenMinAndMaxLIST = 1

INSERT #Details01 EXEC	[RiskMngt].[Reporting].[P_0020_TASK_011_SP_01_MAIN_MTD_chargeOff_details]
		@LIST_ALLOCATION_MIN = @LIST_ALLOCATION_MIN,
		@LIST_ALLOCATION_MAX = @LIST_ALLOCATION_MAX,
		@ShowAllBetweenMinAndMaxLIST = @ShowAllBetweenMinAndMaxLIST


--SELECT *
--FROM #Details01
--Order by CO_date

SELECT DISTINCT
	   Product
	   , SUM(CO_Amount) OVER(Partition by Product) as  CO_Amount__SUM_byProduct	
	   , AVG([DPD_at_CO]) OVER(Partition by Product) as  DPD_at_CO__AVG_byProduct	
	   --, COUNT(*) OVER(Partition by Product) as  COUNT_byProduct
	   ,SUM(countThisOne) OVER(Partition by Product) as  COUNT_byProduct   --&lt;========== changed 6/14/2019 per Dave
	   , SUM(CASE
				WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
				ELSE 0
				END
				) OVER(Partition by Product) as  FBCO__COUNT_byProduct
	   , SUM(CASE
				WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
				ELSE 0
				END
				) OVER(Partition by Product) as  nonFBCO__COUNT_byProduct

	   , SUM([FBCO_Dollars]) OVER(Partition by Product) as  FBCO_Dollars__SUM_byProduct
	   , SUM([nonFBCO_Dollar]) OVER(Partition by Product) as  nonFBCO_Dollars__SUM_byProduct

	   , (CASE
				WHEN	(	
							SUM(CASE
									WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
									ELSE 0
									END
									) OVER(Partition by Product) = 0 
						) 

					THEN 0
				ELSE	(
							SUM([FBCO_Dollars]) OVER(Partition by Product)
							/
							SUM(CASE
											WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
											ELSE 0
											END
											) OVER(Partition by Product)
						)
				END

		  ) as CO_Severity_FBCO__byProduct

	   , (CASE
				WHEN	(	
							SUM(CASE
									WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
									ELSE 0
									END
									) OVER(Partition by Product) = 0 
						)

					THEN 0
				ELSE	(
							SUM([nonFBCO_Dollar]) OVER(Partition by Product)
							/
							SUM(CASE
											WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
											ELSE 0
											END
											) OVER(Partition by Product)
						)
				END

		  ) as CO_Severity_nonFBCO__byProduct

	   , (CASE
				WHEN	(	
							SUM(CASE
									WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
									ELSE 0
									END
									)  OVER(Partition by Product)
							+
							SUM(CASE
									WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
									ELSE 0
									END
									) OVER(Partition by Product)
							= 0
						)

					THEN 0
				ELSE	(
							SUM([nonFBCO_Dollar] + [FBCO_Dollars]) OVER(Partition by Product)
							/
							(
								SUM(CASE
										WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
										ELSE 0
										END
										)  OVER(Partition by Product)
								+
								SUM(CASE
										WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
										ELSE 0
										END
										) OVER(Partition by Product)
							)
						)
				END

		  ) as CO_Severity_ALL__byProduct


FROM #Details01

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>03_DrillThrough_03_TwoWayAggregateFromDetails</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>03_DrillThrough_03_TwoWayAggregateFromDetails</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--03_DrillThrough_03_TwoWayAggregateFromDetails
--========================================================

use RiskMngt
go

--P_0020_TASK_011_REP_06_SP_01_MAIN_MTDChargeOffs_byProduct_CO_Date_v5.sql
/*
	************************************************************************************
	SSRS Report: Aggregate By Product &amp; Charge-Off Date
	NOTE: 
	Uses: 
	Created: 06/12/2019
	By: glenn garson
	************************************************************************************
*/


--=============================================DEBUG START
--DECLARE @LIST_ALLOCATION_MIN FLOAT  --(SELECT VALUE FROM RiskMngt.dbo.CRD_REPORT_VARIABLES WHERE REPORT = '60to89kpi' AND VARIABLE = 'LIST_ALLOCATION_MIN');
--DECLARE @LIST_ALLOCATION_MAX FLOAT  --(SELECT VALUE FROM RiskMngt.dbo.CRD_REPORT_VARIABLES WHERE REPORT = '60to89kpi' AND VARIABLE = 'LIST_ALLOCATION_MAX');

--DECLARE @ShowAllBetweenMinAndMaxLIST bit

--DECLARE @LIST as FLOAT
--DECLARE @Client_App_ID NVARCHAR(15) 
--DECLARE @SHAW_CUSTOMER_NUMBER NVARCHAR(7)		--i.e. F0019_CUSTOMER_NUMBER
--DECLARE @Product NVARCHAR(15)
--DECLARE @SHAW_Account_Number NVARCHAR(20)		--i.e. F0003_USER_KEY
--DECLARE @CO_Date Date
----===========================================================================default LIST parameters For MOST testing
--SELECT @LIST_ALLOCATION_MIN = 1
--SELECT @LIST_ALLOCATION_MAX = 5000
----SELECT @LIST_ALLOCATION_MIN = NULL			
----SELECT @LIST_ALLOCATION_MAX = NULL		

--SELECT @ShowAllBetweenMinAndMaxLIST = 1	
----===========================================================================Test values for non-list Parameters

--SELECT @LIST = NULL							--1277
--SELECT @Client_App_ID = ''				--'6646923'
--SELECT @SHAW_CUSTOMER_NUMBER = ''			--'3572534'
--SELECT @Product = 'CBT'						--'Indirect'
--SELECT @SHAW_Account_Number = ''			--'00000100135725340001'  ''
--SELECT @CO_Date = ''						--'2019-06-05'


--=============================================DEBUG END

alter Procedure [Reporting].[P_0020_TASK_011_REP_06_SP_01_MAIN_MTDChargeOffs_byProduct_CO_Date](
																					@LIST_ALLOCATION_MIN FLOAT
																					, @LIST_ALLOCATION_MAX FLOAT
																					, @ShowAllBetweenMinAndMaxLIST bit
																					)
	as

IF OBJECT_ID('tempdb..#Details01') IS NOT NULL
	DROP TABLE #Details01

CREATE TABLE #Details01
(
	[SHAW_Acct_Number] [varchar](20) NOT NULL,
	[SHAW_Cust_Number] [varchar](7) NULL,
	[Client_App_ID] [varchar](15) NULL,
	[Region] [varchar](20) NULL,
	[Branch] [varchar](50) NULL,
	[Loan_Officer] [varchar](101) NULL,
	[CO_Amount] [money] NULL,
	[NumberOfPaymentsMade] [int] NULL,
	[Contract_Date] [datetime] NULL,
	[Booked_Date] [datetime] NULL,
	[CO_date] [datetime] NOT NULL,
	[DPD_at_CO] [int] NULL,
	[DaysFromContractToChargeOff] [int] NULL,
	[LIST] [varchar](7) NULL,
	[List_Description] [varchar](30) NULL,
	[Customer_Name] [varchar](130) NULL,
	[Dealer_Name] [varchar](60) NULL,
	[ActiveDealer] [varchar](3) NOT NULL,
	[FBCO] [varchar](7) NOT NULL,
	[FBCO_Dollars] [money] NULL,
	[nonFBCO] [varchar](7) NOT NULL,
	[nonFBCO_Dollar] [money] NULL,
	[Sale_Proceeds] [decimal](15, 2) NULL,
	[InsuranceCheckPosted_Dollars] [decimal](15, 2) NULL,
	[Veh_Model_Year] [varchar](56) NULL,
	[Booked_LTV] [decimal](12, 4) NULL,
	[Product] [varchar](14) NOT NULL,
	[CO_Type] [varchar](18) NOT NULL,
	[Credit_Tier] [varchar](3) NULL,
	[theCount] [int] NULL,
	[countThisOne] [int] NOT NULL,  --&lt;========== changed 6/14/2019
	[parm_LIST_ALLOCATION_MIN] [float] NULL,
	[parm_LIST_ALLOCATION_MAX] [float] NULL,
	[parm_ShowAllBetweenMinAndMaxLIST] [bit] NULL,
	[parm_LIST] [float] NULL,
	[parm_Client_App_ID] [nvarchar](15) NULL,
	[parm_SHAW_CUSTOMER_NUMBER] [nvarchar](7) NULL,
	[parm_Product] [nvarchar](15) NULL,
	[parm_SHAW_Account_Number] [nvarchar](20) NULL,
	[parm_CO_Date] [date] NULL
)

INSERT #Details01 EXEC	[RiskMngt].[Reporting].[P_0020_TASK_011_SP_01_MAIN_MTD_chargeOff_details]
		@LIST_ALLOCATION_MIN = @LIST_ALLOCATION_MIN,
		@LIST_ALLOCATION_MAX = @LIST_ALLOCATION_MAX,
		@ShowAllBetweenMinAndMaxLIST = @ShowAllBetweenMinAndMaxLIST


--SELECT *
--FROM #Details01
--Order by CO_date

;WITH cte_Aggregates AS
(
			SELECT DISTINCT
				   Product, CO_date
				   , SUM(CO_Amount) OVER(Partition by Product, CO_date) as  CO_Amount__SUM_byProduct_CO_date	
				   , AVG([DPD_at_CO]) OVER(Partition by Product, CO_date) as  DPD_at_CO__AVG_byProduct_CO_date
				   , SUM(countThisOne ) OVER(Partition by Product, CO_date) as  COUNT_byProduct_CO_date	--&lt;========== changed 6/14/2019				   	
				   --, COUNT(*) OVER(Partition by Product, CO_date) as  COUNT_byProduct_CO_date
				   , SUM(CASE
							WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
							ELSE 0
							END
							) OVER(Partition by Product, CO_date) as  FBCO__COUNT_byProduct_CO_date
				   , SUM(CASE
							WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
							ELSE 0
							END
							) OVER(Partition by Product, CO_date) as  nonFBCO__COUNT_byProduct_CO_date

				   , SUM([FBCO_Dollars]) OVER(Partition by Product, CO_date) as  FBCO_Dollars__SUM_byProduct_CO_date
				   , SUM([nonFBCO_Dollar]) OVER(Partition by Product, CO_date) as  nonFBCO_Dollars__SUM_byProduct_CO_date

				   , (CASE
							WHEN	(	
										SUM(CASE
												WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
												ELSE 0
												END
												) OVER(Partition by Product, CO_date) = 0 
									) 

								THEN 0
							ELSE	(
										SUM([FBCO_Dollars]) OVER(Partition by Product, CO_date)
										/
										SUM(CASE
														WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
														ELSE 0
														END
														) OVER(Partition by Product, CO_date)
									)
							END

					  ) as CO_Severity_FBCO__byProduct_CO_date

				   , (CASE
							WHEN	(	
										SUM(CASE
												WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
												ELSE 0
												END
												) OVER(Partition by Product, CO_date) = 0 
									)

								THEN 0
							ELSE	(
										SUM([nonFBCO_Dollar]) OVER(Partition by Product, CO_date)
										/
										SUM(CASE
														WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
														ELSE 0
														END
														) OVER(Partition by Product, CO_date)
									)
							END

					  ) as CO_Severity_nonFBCO__byProduct_CO_date

				   , (CASE
							WHEN	(	
										SUM(CASE
												WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
												ELSE 0
												END
												)  OVER(Partition by Product, CO_date)
										+
										SUM(CASE
												WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
												ELSE 0
												END
												) OVER(Partition by Product, CO_date)
										= 0
									)

								THEN 0
							ELSE	(
										SUM([nonFBCO_Dollar] + [FBCO_Dollars]) OVER(Partition by Product, CO_date)
										/
										(
											SUM(CASE
													WHEN UPPER(LTRIM(RTRIM([FBCO]))) = 'YES' THEN 1
													ELSE 0
													END
													)  OVER(Partition by Product, CO_date)
											+
											SUM(CASE
													WHEN UPPER(LTRIM(RTRIM([nonFBCO]))) = 'YES' THEN 1
													ELSE 0
													END
													) OVER(Partition by Product, CO_date)
										)
									)
							END

					  ) as CO_Severity_ALL__byProduct_CO_date



			FROM #Details01
)

SELECT 
		 [Product]
		, [CO_date]
		, [CO_Amount__SUM_byProduct_CO_date]
		, [DPD_at_CO__AVG_byProduct_CO_date]
		, [COUNT_byProduct_CO_date]
		, [FBCO__COUNT_byProduct_CO_date]
		, [nonFBCO__COUNT_byProduct_CO_date]
		, [FBCO_Dollars__SUM_byProduct_CO_date]
		, [nonFBCO_Dollars__SUM_byProduct_CO_date]
		, [CO_Severity_FBCO__byProduct_CO_date]
		, [CO_Severity_nonFBCO__byProduct_CO_date]
		, [CO_Severity_ALL__byProduct_CO_date]
FROM cte_Aggregates</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SEARCH_LIST_commandText_fields_reportName_dataSetName_dataSourceName_dataProvider</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SEARCH_LIST_commandText_fields_reportName_dataSetName_dataSourceName_dataProvider</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--SEARCH_LIST_commandText_fields_reportName_dataSetName_dataSourceName_dataProvider.sql


--YOU NEED TO UNCOMMENT OUT JUST ONE OF THE WITH STATEMENTS 
--Which reports on the server that you see are dependent on which schema are used by the report:
--Find the Report Definition Schema Version (SSRS)
--https://docs.microsoft.com/en-us/sql/reporting-services/reports/find-the-report-definition-schema-version-ssrs?view=sql-server-ver15
-- from ARTICLE
-- https://social.msdn.microsoft.com/Forums/sqlserver/en-US/601a784f-e28f-49b2-a02d-aa0db24994ec/way-to-discover-all-fields-used-in-all-ssrs-reports?forum=sqlreportingservices

use ProductionReportServer
go

DECLARE @ReportName nvarchar(100)
SET @ReportName = ''

DECLARE @CommandText nvarchar(100)
SET @CommandText = ''

DECLARE @Fields nvarchar(100)
SET @Fields = ''
---------------------USE one of these WITH statements by un commenting it---------------------------------------------------------------
	--============= OLD schema =============
	--WITH XMLNAMESPACES ( DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition', 'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner' AS rd )
	--============= NEW Crescent Bank Schema =============
	;WITH XMLNAMESPACES ( DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition', 'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner' AS rd )
	------------------------------------------------------------------------------------------------------------------------------
	, cte_ALL as
(
	SELECT ReportName		= name
		,DataSetName		= x.value('(@Name)[1]', 'VARCHAR(250)') 
		  ,DataSourceName	= x.value('(Query/DataSourceName)[1]','VARCHAR(250)')
		  ,CommandText		= x.value('(Query/CommandText)[1]','VARCHAR(250)')
		  ,Fields			= df.value('(@Name)[1]','VARCHAR(250)')
		  ,DataField		= df.value('(DataField)[1]','VARCHAR(250)')
		  ,DataType		= df.value('(rd:TypeName)[1]','VARCHAR(250)')
		  --,ConnectionString = x.value('(ConnectionProperties/ConnectString)[1]','VARCHAR(250)')
	 FROM ( SELECT C.Name,CONVERT(XML,CONVERT(VARBINARY(MAX),C.Content)) AS reportXML
		  FROM ProductionReportServer.dbo.Catalog C
		 WHERE C.Content is not null
		  AND C.Type = 2
		  ) a
	 CROSS APPLY reportXML.nodes('/Report/DataSets/DataSet') r ( x )
	 CROSS APPLY x.nodes('Fields/Field') f(df) 
)	


SELECT * 
FROM cte_ALL
			WHERE

					(
						(
							(LEN(@ReportName) = 0) 
							OR 
							(@ReportName IS NULL)							
						)
						OR
						(
								(RTRIM(LTRIM(UPPER(ReportName))) like '%' +  RTRIM(LTRIM(UPPER(@ReportName))) + '%')		
						)
					)
					AND
					(
						(
							(LEN(@CommandText) = 0) 
							OR 
							(@CommandText IS NULL)							
						)
						OR
						(
								(RTRIM(LTRIM(UPPER(CommandText))) like '%' +  RTRIM(LTRIM(UPPER(@CommandText))) + '%')		
						)
					)
					AND
					(
						(
							(LEN(@Fields) = 0) 
							OR 
							(@Fields IS NULL)							
						)
						OR
						(
								(RTRIM(LTRIM(UPPER(Fields))) like '%' +  RTRIM(LTRIM(UPPER(@Fields))) + '%')		
						)
					)
ORDER BY ReportName, Fields</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_all_parm_values_and_option_for_All_in_LIST</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_all_parm_values_and_option_for_All_in_LIST</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--ALL_select_all_parm_values_and_option_for_All_in_LIST

--simple list
--Second List
--Then SP that uses them

/*
Be able to select all business Units
	prj_0021_SP_203_LIST_BusinessUnits
Be able to select all Foreman given a Business Unit
	prj_0021_SP_205_LIST_B2W_Foreman_for_given_BusinessUnit.sql
Filter on a Time Sheet ID
Filter on WorkClass
*/

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--1] First a simple one:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--prj_0021_SP_203_LIST_BusinessUnits_v2.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 5/4/2016
	By: glenn garson
	************************************************************************************
*/



USE [barriere]
GO


create Procedure prj_0021_SP_203_LIST_BusinessUnits

	as
		



		--=============WITH THE WHERE STATEMENT===================================
		;With CTE_ALL(BusinessUnit)
		as 
			(
				Select '0_ALL' as [Division]
			)

		Select * 
		From CTE_ALL
UNION
		(				
			select Name AS BusinessUnit
			from [B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].vw_0021_501_TABLE_BusinessUnit_without_XML_fields BU_1
			Where IsRootBusinessUnit = 0
		)

Order by BusinessUnit
		--========================================================================
go

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--2] Then one dependent on another:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--prj_0021_SP_205_LIST_B2W_Foreman_for_given_BusinessUnit_v2.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 5/4/2016
	By: glenn garson
	************************************************************************************
*/
USE [barriere]
GO

alter Procedure prj_0021_SP_205_LIST_B2W_Foreman_for_given_BusinessUnit(
	@BusinessUnit as nvarchar(10),
	@BeginDate as date,
	@EndDate as date
	)

	as
	
-- START DEBUGGING SECTION -------------------	
	

	
-- END DEBUGGING SECTION -------------------		

		--================================================
		
		;With CTE_one(Foreman_Name)
		as 
			(
				Select '0_ALL' as [Foreman_Name]
			),	
			
						
		CTE_TWO(Foreman_Name)
		AS
			(					

				SELECT  DISTINCT   
						--vw.Name as [BusinessUnit],
						R1.[FieldLog_Foreman_FullName] AS [Foreman_Name]
						 --(SELECT 'TheCalculation' =  E.FirstName + ' ' + E.LastName ) AS [Foreman_Name]
						--, E.FirstName
						--, E.LastName
						--, E.IsForeman
				FROM         
						[B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].vw_0021_501_TABLE_BusinessUnit_without_XML_fields L1
						INNER JOIN
						[B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].[FieldLogEmployeeHoursSummary] R1
							on	
								R1.[Employee_BusinessUnitREF] = L1.[ObjectID]
				Where 
					--vw.[IsRootBusinessUnit]=0
					--and
					--E.IsForeman = 1
					--AND
					(
						(
							(@BusinessUnit = '0_ALL')
							AND
							(R1.[FieldLog_Foreman_FullName] is not Null)
							--And
							--(E.LastName is not Null)
						)
						OR
						( 
							(upper(LTRIM(RTRIM(L1.Name))) = upper(LTRIM(RTRIM(@BusinessUnit))))
						)
					)
					and
					(
						(R1.[FieldLog_WorkStartDateTime] &gt;= @BeginDate)
						AND
						(R1.[FieldLog_WorkStartDateTime] &lt;= @EndDate)
					)				   
			)
			
			
			SELECT * from CTE_one
			UNION
			SELECT * from CTE_TWO				
		--================================================				

		
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\						
--3] Then a SP that uses them:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--prj_0021_REP_002_SpotHeavyLightOperators_v2.sql
/*
	************************************************************************************
	NOTE: uses the view from B2W instead of writing my own
	Uses: 
	Created: 5/4/2016
	By: glenn garson
	************************************************************************************
*/



USE [barriere]
GO

------------------------------------------------------------
--DECLARE @BusinessUnit char(9)
----SELECT @BusinessUnit = 'SSA'
--SELECT @BusinessUnit = '0_ALL'

--DECLARE @Forman_Name [nvarchar](100)
--SELECT @Forman_Name = 'JASON BERGERON'


--DECLARE @SearchString [nvarchar](100)
----SELECT @SearchString = 'Const Craftsman'
----SELECT @SearchString = 'Const Craftsman'
------------------------------------------------------------

alter Procedure prj_0021_REP_002_SpotHeavyLightOperators(
	@BeginDate as date,
	@EndDate as date,
	@BusinessUnit as char(9),
	@Forman_Name as [nvarchar](100),
	@SearchString as NVARCHAR(100)
	)

	as
	
---- START DEBUGGING SECTION -------------------	
	

--	PRINT 'Input @BeginDate: ' + LEFT(CONVERT(VARCHAR, @BeginDate, 120), 10) 
--	PRINT 'Input @EndDate: ' + LEFT(CONVERT(VARCHAR, @EndDate, 120), 10)

	
---- END DEBUGGING SECTION -------------------		


IF ((LEN(@SearchString) &gt; 0) and (@SearchString is not null))
		BEGIN

		--=============WITH THE WHERE STATEMENT===================================
				SELECT 
					  L1.[FieldLog_FieldLogID]      as [Time Sheet ID]
					  ,L1.[FieldLog_WorkStartDateTime]  as [Work Start]
					  ,L1.[FieldLog_Foreman_FullName]  as [Foreman Name]
					  ,L1.[Employee_EmployeeID] AS [EmployeeID]
					  ,L1.[Employee_FullName]  AS  [Employee Name]
					  ,L1.[Employee_LaborTypeName]  AS [Work Class]
					  ,L1.[Job_JobNumber]    AS [JobNumber]
					  ,L1.[TotalHours] AS [Work Hours]
					  ,R1.Name AS [BusinessUnit]
				  FROM 
						(
							[B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].[FieldLogEmployeeHoursSummary] L1
							inner Join
							[B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].vw_0021_501_TABLE_BusinessUnit_without_XML_fields R1
							on	
								L1.[Employee_BusinessUnitREF] = R1.[ObjectID]
						)
						
				  Where
						(
							(L1.[TotalHours] &lt;&gt;0)
							AND
							(
								(L1.[FieldLog_WorkStartDateTime] &gt;= @BeginDate)
								AND
								(L1.[FieldLog_WorkStartDateTime] &lt;= @EndDate)
							)							)
							AND 
							(        
									(
										(@BusinessUnit='0_ALL')
										AND
										@BusinessUnit is not null 
									)
									OR
									(	
										(	@BusinessUnit is not null 
											and 
											R1.Name = @BusinessUnit
										) 
			
									)			 
							) 
							AND
							(     
								(@Forman_Name='0_ALL')
								OR
								(L1.[FieldLog_Foreman_FullName] = @Forman_Name)
							)
							AND
							(
									(L1.[FieldLog_FieldLogID]  like '%' +  RTRIM(LTRIM(@SearchString)) + '%')		
									OR (L1.[Employee_LaborTypeName] like '%' +  RTRIM(LTRIM(@SearchString)) + '%')	

							)							
							
							 							
													
						
							
							
		--========================================================================
		END
ELSE
		BEGIN

		--===========WITHOUT THE WHERE============================================

				SELECT 
					  L1.[FieldLog_FieldLogID]      as [Time Sheet ID]
					  ,L1.[FieldLog_WorkStartDateTime]  as [Work Start]
					  ,L1.[FieldLog_Foreman_FullName]  as [Foreman Name]
					  ,L1.[Employee_EmployeeID] AS [EmployeeID]
					  ,L1.[Employee_FullName]  AS  [Employee Name]
					  ,L1.[Employee_LaborTypeName]  AS [Work Class]
					  ,L1.[Job_JobNumber]    AS [JobNumber]
					  ,L1.[TotalHours] AS [Work Hours]
					  ,R1.Name AS [BusinessUnit]
				  FROM 
						(
							[B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].[FieldLogEmployeeHoursSummary] L1
							inner Join
							[B2WTIMESHEET\B2WONE].[BUILD2WIN].[dbo].vw_0021_501_TABLE_BusinessUnit_without_XML_fields R1
							on	
								L1.[Employee_BusinessUnitREF] = R1.[ObjectID]
						)
 Where
						(
							(L1.[TotalHours] &lt;&gt;0)
							AND
							(
								(L1.[FieldLog_WorkStartDateTime] &gt;= @BeginDate)
								AND
								(L1.[FieldLog_WorkStartDateTime] &lt;= @EndDate)
							)							)
							AND 
							(        
									(
										(@BusinessUnit='0_ALL')
										AND
										@BusinessUnit is not null 
									)
									OR
									(	
										(	@BusinessUnit is not null 
											and 
											R1.Name = @BusinessUnit
										) 
			
									)			 
							) 
							AND
							(     
								(@Forman_Name='0_ALL')
								OR
								(L1.[FieldLog_Foreman_FullName] = @Forman_Name)
							)
							--AND
							--(
							--		(L1.[FieldLog_FieldLogID]  like '%' +  RTRIM(LTRIM(@SearchString)) + '%')		
							--		OR (L1.[Employee_LaborTypeName] like '%' +  RTRIM(LTRIM(@SearchString)) + '%')	

							--)								
							
							 							
													
						
							
					
			
			
		--========================================================================
		END		
GO
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_checkBox_in_SSRS__SQL_Script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_checkBox_in_SSRS__SQL_Script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0013_SP_205_sub_00C_Section_1a_NOTCAT_v2.sql
/*
	************************************************************************************
	NOTE: PM125, NON-CAT, And the WO due date is NOT before today, and [MR_Completed_Date] is in the Time Window
	Uses: 
	Created: 5/11/2016
	By: glenn garson
	************************************************************************************
*/
USE B2W_Reports
go


--DECLARE @BeginDate as date
--DECLARE @EndDate as date
--								-- 0: Exclude Mechanic with 'CAT', 1: Just inlude Mechanic with 'CAT'
--SELECT @BeginDate =  DATEADD(mm, -1, GETDATE())	-- MR_Completed Date On or after this date, or null	
--SELECT @EndDate = DATEADD(dd, 0, GETDATE())					-- MR_Completed Date On or before this date, or null	

--	PRINT 'Input @BeginDate: ' + LEFT(CONVERT(VARCHAR, @BeginDate, 120), 10) 
--	PRINT 'Input @EndDate: ' + LEFT(CONVERT(VARCHAR, @EndDate, 120), 10)

alter PROCEDURE prj_0013_SP_205_sub_00C_Section_1a_NOTCAT(
																@BeginDate as date,
																@EndDate as date,
																@BU as nvarchar(max)
																)
AS
;WITH CTE_prj_0013_SP_205_sub_00C_Section_1a_STEP_0(	
											   [Equipment_No]
											  ,[WO_ID]
											  ,[MR_ID]
											  ,[MR_Reason]
											  ,[MR_Created_Date]
											  ,[WO_Created_Date]
											  ,[WO_Due_Date]
											  ,[WO_Start_Date]
											  ,[WO_End_Date]
											  ,[MR_Completed_Date]
											  ,[Mechanic]
											  ,[WO_Priority]
											  ,[WO_Problem_Description]
											  ,[WO_Problem_Code]
											  ,estimated_WO_Completed_Date
											  ,COUNT_MR_ID
											  ,COUNT_MR_Completed_Date
											  ,WO_Completed_Date
											  ,BackLog
											  ,Schedule
											  ,BU_Name
											  ,Days_to_Create_WO		--NEW 5/31/2016	
											  ,Days_from_Request		--NEW 5/31/2016			
											  )
AS
		(
		SELECT 
			   [Equipment_No]
			  ,[WO_ID]
			  ,[MR_ID]
			  ,[MR_Reason]
			  ,[MR_Created_Date]
			  ,[WO_Created_Date]
			  ,[WO_Due_Date]
			  ,[WO_Start_Date]
			  ,[WO_End_Date]
			  ,[MR_Completed_Date]
			  ,[Mechanic]
			  ,[WO_Priority]
			  ,[WO_Problem_Description]
			  ,[WO_Problem_Code]
			  ,estimated_WO_Completed_Date
			  ,COUNT_MR_ID
			  ,COUNT_MR_Completed_Date
			  ,WO_Completed_Date
		      , (SELECT 'TheCalculation' = DATEDIFF ( dd , [WO_Due_Date] , WO_Completed_Date )   ) AS [BackLog]
			  , (SELECT 'TheCalculation' = DATEDIFF ( dd , [WO_Start_Date] , WO_Completed_Date )   ) AS [Schedule]
			  ,BU_Name
			  , (SELECT 'TheCalculation' = DATEDIFF ( dd , [MR_Created_Date], [WO_Created_Date] )   ) AS [Days_to_Create_WO]		--NEW 5/31/2016	
			  , (SELECT 'TheCalculation' = DATEDIFF ( dd  , [MR_Created_Date], [WO_Completed_Date] )   ) AS [Days_from_Request]		--NEW 5/31/2016																									
		     
		      
		  FROM [B2W_Reports].[dbo].[prj_0013_sp_00A_vw_501_WorkOrderTracking]
		  WHERE
				(--1a
					(WO_Completed_Date BETWEEN @BeginDate AND @EndDate)
					AND
					[MR_Reason]  like '%PM%'
					AND
					[MR_Reason]  like '%125%'
					AND							
					[WO_Completed_Date] &lt;= [WO_End_Date] 		--NEW 5/31/2016				
					
							
					AND NOT
					(		
						[MR_Reason]  like '%PM 250%'
						OR
						[MR_Reason]  like '%PM 500%'
						OR		
						[MR_Reason]  like '%PM 1000%'
						OR	
						[MR_Reason]  like '%PM 2000%'
					)
					and NOT		(
								[WO_Problem_Code]  like '%CP%'
								OR
								[WO_Problem_Code]  like '%CM%'
								OR
								[WO_Problem_Code]  like '%RC%'
							)	
					AND
					(
							([Mechanic] NOT  LIKE '%CAT%')
							OR
							([Mechanic] is NULL)		--NEW 5/31/2016
					)
					AND
					[WO_Priority] NOT LIKE '%Emergency%'			
					AND
					[WO_Problem_Code] NOT LIKE '%BD%'	
					----=======================================							
					AND											
					(
						(BU_Name IN (select Item from dbo.prj_0013_FN_401_unSplit(@BU,','))	)   --&lt;==================== Here is the use of the Function
						OR
						(@BU = '0_ALL')			
					)														
				)	
			
		)
SELECT * from CTE_prj_0013_SP_205_sub_00C_Section_1a_STEP_0			
ORDER BY Equipment_No, WO_ID, MR_ID</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_checkBox_in_SSRS__TEST_SQL_Script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_checkBox_in_SSRS__TEST_SQL_Script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0013_SP_205_sub_00C_Section_1a_NOTCAT_TEST.sql

USE B2W_Reports
go

--EXEC prj_0013_SP_205_sub_00C_Section_1a_NOTCAT @BeginDate='04-01-2016', @EndDate='05-01-2016', @BU = 'Barriere Construction Co., L.L.C.'
--EXEC prj_0013_SP_205_sub_00C_Section_1a_NOTCAT @BeginDate='04-01-2016', @EndDate='05-01-2016', @BU = '0_All'
EXEC prj_0013_SP_205_sub_00C_Section_1a_NOTCAT @BeginDate='04-01-2016', @EndDate='05-01-2016', @BU = 'IND,SSA,NSA,BCC_LLC'</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>call_a_StoredProcedure_on_rows_of_a_TABLE_00_MyVersion_as_TRANSACTION</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>call_a_StoredProcedure_on_rows_of_a_TABLE_00_MyVersion_as_TRANSACTION</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--a) the SP for individual Record
--b) Batch Script to run the first SP

--prj_0006_SP_0008_Create_TagSecurityRecord_v3.sql
/*	This version has the RETURN statements working
	************************************************************************************
	NOTE: with Transaction, 
		  if return 99 then it failed in first part, i.e. Insert into table [SW_TAG_SECURITY] failed
		  if return 98 then it failed in first part, i.e. Insert into table [SW_GF_ACL] failed.	
		  Return 0 if Transaction committed	  
	Uses: 
	Created: 9/8/2016
	By: glenn garson
	************************************************************************************
*/



USE barriere		--_sandbox
GO

----================================================	
--DECLARE @NAME nvarchar(50)
--DECLARE @TagName as nvarchar(50)
--DECLARE @ISGROUP as BIT
--DECLARE @USERGROUP as nvarchar(125)
--DECLARE @PROJECT_ROLE as nvarchar(50)


--SET @NAME = N'DOCUMENT_TYPE'		--generally either DOCUMENT_TYPE or {rarely} DOCTYPE
--SET @TagName = N'Cost_Adjustments'	--Cost_Adjustments	-- then name of the tag
--SET @ISGROUP = 1					-- 1 {if it is a group}
--SET @USERGROUP = N'_ALL'			-- a document security group name
--SET @PROJECT_ROLE = N''				-- empty, but I guess it could be the name of a project role

----================================================

alter Procedure prj_0006_SP_0008_Create_TagSecurityRecord(
								@NAME  as nvarchar(50)
								,@TagName  as nvarchar(500)
								,@ISGROUP  as bit
								,@USERGROUP  as nvarchar(125)
								,@PROJECT_ROLE  as nvarchar(50)									
	)

as

DECLARE @iSW_TAG_SECURITY_PK INT

-- ********************************************************************************
-- Start a transaction, if any code fails then we back out everything
-- ********************************************************************************
		BEGIN TRANSACTION TRANS_Create_TagSecurityRecord


				--===============================================================================================================

				INSERT into [SW_TAG_SECURITY] (
										  [NAME]			--generally either DOCUMENT_TYPE or {rarely} DOCTYPE
										  ,[VALUE]			-- then name of the tag
										  ,[ISGROUP]		-- 1 {if it is a group}
										  ,[USERGROUP]		-- a document security group name
										  ,[PROJECT_ROLE]	-- empty, but I guess it could be the name of a project role
										)
				values(
												@NAME
												,@TagName
												,@ISGROUP
												,@USERGROUP
												,@PROJECT_ROLE	
						)
				
				
				IF @@ERROR &lt;&gt; 0
					BEGIN
					--
					-- Rollback the transaction and return to the caller
					--
					ROLLBACK TRANSACTION TRANS_Create_TagSecurityRecord
					RAISERROR('Insert into table [SW_TAG_SECURITY] failed.',18,1)
					RETURN 99											
					END
						
				--===============================================================================================================	
	
					SELECT @iSW_TAG_SECURITY_PK = @@IDENTITY
					PRINT 'The PK for the new Record is: ' + CAST(@iSW_TAG_SECURITY_PK as varchar(5))
					--RETURN @iSW_TAG_SECURITY_PK   --&lt;== This can not work b/c the PK could be 98 or 99 and that would conflict with my notes
				--===============================================================================================================			

				DECLARE @ACLTYPE int
				DECLARE @ITEMID int
				DECLARE @HIDDEN bit
				DECLARE @LIST bit
				DECLARE @READACC bit
				DECLARE @DELETEACC bit
				DECLARE @PERMISSIONS bit
				DECLARE @AUTHOR bit
				DECLARE @EDITOR bit
				DECLARE @MOVE bit

				SET @ACLTYPE=2
				SET @ITEMID=@iSW_TAG_SECURITY_PK
				SET @ISGROUP=1
				SET @HIDDEN=0
				SET @LIST=1
				SET @READACC=1
				SET @DELETEACC=1
				SET @PERMISSIONS=0
				SET @AUTHOR=1		--CREATE
				SET @EDITOR=1		--REVISE
				SET @MOVE=1
							
				INSERT INTO SW_GF_ACL 
				(
					ACLTYPE,
					ITEMID,
					ISGROUP,
					USERGROUP,
					HIDDEN,
					READACC,
					DELETEACC,
					PERMISSIONS,
					AUTHOR,
					EDITOR,
					CANSUBSCRIBE,
					FORCESUBSCRIBE,
					LIST,
					VIEWPERMS,
					HIDECHILD,
					SPARE1,
					SPARE2,
					SPARE3,
					SPARE4,
					APPID,
					EDITMENU,
					[MOVE]
				)
				VALUES
				(
					@ACLTYPE,
					@ITEMID,
					@ISGROUP,
					@USERGROUP,
					@HIDDEN,
					@READACC,
					@DELETEACC,
					@PERMISSIONS,
					@AUTHOR,
					@EDITOR,
					0,
					0,
					@LIST,
					0,
					0,
					0,
					0,
					0,
					0,
					'''',
					0,
					@MOVE
				)			
							
				IF @@ERROR &lt;&gt; 0
					BEGIN
					--
					-- Rollback the transaction and return to the caller
					--
					ROLLBACK TRANSACTION TRANS_Create_TagSecurityRecord
					RAISERROR('Insert into table [SW_GF_ACL] failed.',18,1)
					RETURN 98											
					END							
				--===============================================================================================================	


		
	-- ********************************************************************************
	-- We made it to the end so commit the transaction
	-- ********************************************************************************
	COMMIT TRANSACTION TRANS_Create_TagSecurityRecord
	
	-- Return to the caller with a successful return code
	--
	RETURN 0		
	
	
	\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
	--prj_0006_315_BATCH_Create_Tag_Security_Records_v1.sql

use barriere
go


DECLARE @tmp table (
					 PK INT IDENTITY(1,1) PRIMARY KEY NOT NULL
					, [NAME] nvarchar(50)
					, [TagName]  nvarchar(50)
					, [ISGROUP]  BIT
					, [USERGROUP]  nvarchar(125)
					, [PROJECT_ROLE]  nvarchar(50)					 									 					 					 					 					 					 
					)
					
DECLARE @PK INT = 0					
					
DECLARE @NAME nvarchar(50) 
DECLARE @TagName nvarchar(50)
DECLARE @ISGROUP bit
DECLARE @USERGROUP nvarchar(125)
DECLARE @PROJECT_ROLE nvarchar(50)



;with CTE_WorkFlowParms as
(select 
		cast(N'DOCUMENT_TYPE' as [nvarchar](50)) as [NAME]
		, cast(N'MSA_COI' as [nvarchar](50)) as [TagName]
		, cast(1 as [bit]) as [ISGROUP]
		, cast(N'_ALL' as [nvarchar](125)) as [USERGROUP]
		, cast(N'' as [nvarchar](50)) as [PROJECT_ROLE]

union select N'DOCUMENT_TYPE',N'Certified Payroll Re',1,N'_ALL',N''
--union select N'DOCUMENT_TYPE',N'MSA_COI',1,N'_ALL',N''			--This is a duplicate
union select N'DOCUMENT_TYPE',N'Certified Payroll Re',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Certified Payroll Reports',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Change Orders',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Contract Documents',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Correspondence',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Cost_Adjustments',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Credit_Apps',1,N'_ALL',N''
union select N'DOCUMENT_TYPE',N'Equipment Sale Documents',1,N'_ALL',N''

)

--select TOP(2)
--		[NAME]
--		,[TagName]
--		,[ISGROUP]
--		,[USERGROUP]
--		,[PROJECT_ROLE]
--from CTE_WorkFlowParms;


INSERT INTO @tmp SELECT --TOP(3)
					  [NAME]
					, [TagName] 
					, [ISGROUP]  
					, [USERGROUP] 
					, [PROJECT_ROLE] 	
FROM CTE_WorkFlowParms

--SELECT * FROM @tmp

WHILE (1=1)
BEGIN
    SELECT 
			@PK = PK    
			,@NAME = NAME
			,@TagName = TagName
			,@ISGROUP = ISGROUP
			,@USERGROUP = USERGROUP
			,@PROJECT_ROLE = PROJECT_ROLE															
			
    FROM @tmp
    WHERE PK = @PK + 1
	--PRINT '============================================================PK = @PK + 1,   PK is: '  + CAST(@PK AS varchar(5))
	--PRINT '@APM_TYPE: ' + @APM_TYPE
	--PRINT '@APM_SUBTYPE: ' + @APM_SUBTYPE
	--PRINT '@RULE_DESC: ' + @RULE_DESC
	
	
		
    IF @@rowcount = 0 BREAK;
	PRINT '============================================================PK = @PK + 1,   PK is: '  + CAST(@PK AS varchar(5))
	PRINT '@NAME: ' + @NAME
	PRINT '@TagName: ' + @TagName
	PRINT '@USERGROUP: ' + @USERGROUP    
	PRINT '@@rowcount was not 0'
    -- call your sproc
    DECLARE @return_status int
    exec @return_status =  prj_0006_SP_0008_Create_TagSecurityRecord @NAME, @TagName, @ISGROUP, @USERGROUP, @PROJECT_ROLE
    IF @return_status = 99
		BEGIN
			PRINT 'SP Failed in the first part. Transaction did not commit'		
		END
     IF @return_status = 98
		BEGIN
			PRINT 'SP Failed in the second part. Transaction did not commit - DING, DING, DING'		
		END   
      IF @return_status = 0
		BEGIN
			PRINT 'SP succeeded. Transaction committed.'		
		END    
END</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DEV_search_v2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DEV_search_v2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0006_REP_0017_ECLIPSE_REPORT_HR_REFERRAL_BONUSES_RESOURCE_QUERY_v3.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 04/10/2019
	By: glenn garson
	************************************************************************************
*/

use barriere
go
--------------------------------DEBUG PARMS START
--DECLARE @BeginDate date
--SELECT @BeginDate = '03-01-2016'

--DECLARE @EndDate date
--SELECT @EndDate = '06-15-2016'

--DECLARE @BU as nvarchar(max)
----SELECT @BU ='HCC'
--SELECT @BU ='0_ALL'
--------------------------------DEBUG PARMS END
--================================================	
--DECLARE @SearchString nvarchar(100)		-- for first name, last name or resource
--DECLARE @EMPLOYMENT_TYPE nvarchar(100)	-- Hard code these: --Non-Exempt, Exempt, '0_ALL'
--DECLARE @DEPARTMENT nvarchar(100)       -- FROM: prj_0006_SP_0009_LIST_DEPARTMENT.sql                              
--DECLARE @HIRE_BeginDate_YYYYMMDD varchar(8)
--DECLARE @HIRE_EndDate_YYYYMMDD varchar(8)
--DECLARE @TERMINATE_BeginDate_YYYYMMDD varchar(8)
--DECLARE @TERMINATE_EndDate_YYYYMMDD varchar(8)


--SET @SearchString = ''			--'dai'
--SET @EMPLOYMENT_TYPE =  '0_ALL'			--Non-Exempt     Exempt	 '0_ALL'
--SET @DEPARTMENT = '0_ALL'
--SET @HIRE_BeginDate_YYYYMMDD =	''	--'20150401'		--'20150401'		-- can be YYYYMMDD or null/empty		
--SET @HIRE_EndDate_YYYYMMDD =	''	--'20150415'		--'20150430'
--SET @TERMINATE_BeginDate_YYYYMMDD =	''		--'20150401'			
--SET @TERMINATE_EndDate_YYYYMMDD =	''		--'20150430'
--================================================

--================================================	
--DECLARE @SearchString nvarchar(100)
--SET @SearchString = ''  
--=============================================================================================================================
alter Procedure prj_0006_REP_0017_ECLIPSE_REPORT_HR_REFERRAL_BONUSES_RESOURCE_QUERY(
		 @SearchString as NVARCHAR(100),	
         @EMPLOYMENT_TYPE as nvarchar(100),
         @DEPARTMENT as nvarchar(100),
         @HIRE_BeginDate_YYYYMMDD as varchar(8),
         @HIRE_EndDate_YYYYMMDD as varchar(8), 
         @TERMINATE_BeginDate_YYYYMMDD as varchar(8),
         @TERMINATE_EndDate_YYYYMMDD as varchar(8)                         	
	)

	as

--=============================================================================================================================

				SELECT TOP(1000) 
							h.APPLICATION_DATE, 
							v.RESOURCE_CODE_EMPLOYEE_PM_SM, 
							v.LAST_NAME, 
							v.FIRST_NAME, 
							v.STATUS_Active_Status, 
							h.RECRUITER, 
							h.RECRUITMENT_SOURCE, 
							v.START_DATE, 
							hUDF.UDF_USER01 AS [Referral_Paid_90-Day], 
							hUDF.UDF_USER05 AS [Requisition_No]
							,v.TERMINATED
							,v.EMPLOYMENT_TYPE
							,v.DEPARTMENT
				FROM         
							vw_0006_502_HR_ResourceMaster_PM_and_SM_EmpMaster v
							INNER JOIN
							HR_APPLICANTMASTER h
							ON 
									v.COMPANY = h.COMPANY 
									AND
									v.RESOURCE_CODE_EMPLOYEE_PM_SM = h.NEW_RESOURCE_CODE
							
							INNER JOIN
							HR_APPLICANTMASTER_UDF hUDF
							ON 
									h.COMPANY = hUDF.COMPANY
									AND
									h.RESOURCE_CODE = hUDF.RESOURCE_CODE
		  

			WHERE

					(
						(
							(LEN(@SearchString) = 0) 
							OR 
							(@SearchString IS NULL)							
						)
						OR
						(
								(RTRIM(LTRIM(UPPER(xxx))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%')		
								OR (RTRIM(LTRIM(UPPER(xxx))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%')			
								OR (RTRIM(LTRIM(UPPER(xxx))) like '%' +  RTRIM(LTRIM(UPPER(@SearchString))) + '%' )	
						)
					)			 
					AND
					(
						(
							(@EMPLOYMENT_TYPE = '0_ALL')
							AND
							(v.EMPLOYMENT_TYPE is not Null)
						)
						OR
						( 
							(upper(LTRIM(RTRIM(v.EMPLOYMENT_TYPE))) = upper(LTRIM(RTRIM(@EMPLOYMENT_TYPE))))
						)
					)
					AND
					(
						(
							(@DEPARTMENT = '0_ALL')
							AND
							(v.DEPARTMENT is not Null)
						)
						OR
						( 
							(upper(LTRIM(RTRIM(v.DEPARTMENT))) = upper(LTRIM(RTRIM(@DEPARTMENT))))
						)
					)	
					AND
					(
						(	
							(LEN(rtrim(ltrim(@HIRE_BeginDate_YYYYMMDD))) = 0) 
							OR 
							(@HIRE_BeginDate_YYYYMMDD IS NULL)							
						)
						OR
						(v.START_DATE &gt; LTRIM(RTRIM(@HIRE_BeginDate_YYYYMMDD)))

					)				
					AND
					(
						(
							(LEN(LTRIM(RTRIM(@HIRE_EndDate_YYYYMMDD))) = 0) 
							OR 
							(@HIRE_EndDate_YYYYMMDD IS NULL)							
						)
						OR
						(LTRIM(RTRIM(v.START_DATE)) &lt; @HIRE_EndDate_YYYYMMDD)
					)
					AND
					(
						(
							(LEN(LTRIM(RTRIM(@TERMINATE_BeginDate_YYYYMMDD))) = 0) 
							OR 
							(@TERMINATE_BeginDate_YYYYMMDD IS NULL)							
						)
						OR
						(v.TERMINATED &gt; LTRIM(RTRIM(@TERMINATE_BeginDate_YYYYMMDD)))
					)				
					AND
					(
						(
							(LEN(LTRIM(RTRIM(@TERMINATE_EndDate_YYYYMMDD))) = 0) 
							OR 
							(@TERMINATE_EndDate_YYYYMMDD IS NULL)							
						)
						OR
						(v.TERMINATED &lt; LTRIM(RTRIM(@TERMINATE_EndDate_YYYYMMDD)))
					)						
GO					</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DEV</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DEV</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
use barriere
go

--prj_0006_REP_0014_ECLIPSE_REPORT_HR_Standard_View.sql

/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 04/10/2019
	By: glenn garson
	************************************************************************************
*/


--------------------------------DEBUG PARMS START
--DECLARE @BeginDate date
--SELECT @BeginDate = '03-01-2016'

--DECLARE @EndDate date
--SELECT @EndDate = '06-15-2016'

--DECLARE @BU as nvarchar(max)
----SELECT @BU ='HCC'
--SELECT @BU ='0_ALL'
--------------------------------DEBUG PARMS END

----================================================	
--DECLARE @SearchString nvarchar(100)
--DECLARE @use_LAST_NAME as BIT
--DECLARE @use_FIRST_NAME as BIT
--DECLARE @use_Job_Title as BIT
--DECLARE @use_DEPARTMENT as BIT
--DECLARE @use_Supervisor as BIT
----DECLARE @Terminated as BIT
--DECLARE @Terminated as nvarchar(12)		-- 0_All, 1_Terminated, 2_Active

--SET @SearchString = ''		
--SET @use_LAST_NAME = 0	
--SET @use_FIRST_NAME = 1
--SET @use_Job_Title = 0	
--SET @use_DEPARTMENT = 0
--SET @use_Supervisor = 0
----SET @Terminated = 1
--SET @Terminated  = '2_Active'			-- 0_All, 1_Terminated, 2_Active
----================================================
  
  
alter Procedure prj_0006_REP_0014_ECLIPSE_REPORT_HR_Standard_View(
		 @SearchString as NVARCHAR(100),
         @use_LAST_NAME as BIT,	
         @use_FIRST_NAME as BIT,
         @use_Job_Title as BIT,
         @use_DEPARTMENT as BIT,
         @use_Supervisor as BIT,
         @Terminated as nvarchar(12)                 	
	)

	as
	
-- START DEBUGGING SECTION -------------------		
	-- Get rid of any spaces the user may have left in there:
	select @SearchString = LTRIM(RTRIM(@SearchString))
	PRINT '2] Input @SearchString: [' + @SearchString + ']'
-- END DEBUGGING SECTION -------------------		

IF (LEN(@SearchString) &gt; 0) OR (@SearchString IS NOT NULL)			--Must also set the PARM to allow Nulls in SSRS

		BEGIN
				--=============WITH THE WHERE STATEMENT===================================


			SELECT     
					RESOURCE_CODE_EMPLOYEE_PM_SM AS Resource
					, DEPARTMENT
					, LAST_NAME
					, FIRST_NAME
					, SIN_SSN AS SSN
					, STATUS_Active_Status AS Status
					, UDF_RES_USER02_Employment_Status AS Employment_Status
					, EMPLOYMENT_TYPE
					, UDF_USER01_Job_Title AS Job_Title
					, UDF_RES_USER01_Supervisor AS Supervisor
					, MIN_HR_RATE
					, ADDRESS1
					, ADDRESS2
					, ADDRESS3
					, POSTAL_CODE AS Zip
					, WORK_PHONE
					, CELL_PHONE
					, EMAIL_ADDRESS
					, START_DATE
					, SENIORITY
					, TERMINATED
					, UDF_RES_USER04_Benefit_Class AS Benefit_Class
					, From_SM_PM
			FROM         vw_0006_502_HR_ResourceMaster_PM_and_SM_EmpMaster
			WHERE 
			  (		
					(
							(
								(upper(rtrim(ltrim([LAST_NAME]))) like '%' +  UPPER(RTRIM(LTRIM(@SearchString))) + '%')
								AND
								(@use_LAST_NAME = 1)
							)		
							OR 
							(
								(
									(upper(rtrim(ltrim([FIRST_NAME]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%')				
								)
								AND
								(@use_FIRST_NAME = 1)
							)				  
							OR 
								(
									(upper(rtrim(ltrim([UDF_USER01_Job_Title]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%') 
									AND
									(@use_Job_Title = 1)								
								)
							OR  (
									(upper(rtrim(ltrim([DEPARTMENT]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%') 	
									AND
									(@use_DEPARTMENT = 1)									
								)
							OR  (
									(upper(rtrim(ltrim([UDF_RES_USER01_Supervisor]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%') 	
									AND
									(@use_Supervisor = 1)									
								)													

						)	
						AND
						( -- 0_All, 1_Terminated, 2_Active
							(
								(@Terminated = '0_All')
							)
							OR
							(
								(@Terminated = '1_Terminated')
								AND
								(TERMINATED is NOT NULL)
							)	
							OR
							(
								(@Terminated = '2_Active')
								AND
								(TERMINATED is NULL)
							)																			
						)
									
					
			  ) 
			ORDER BY FIRST_NAME, LAST_NAME
		--========================================================================
		END
ELSE
		BEGIN

		--===========WITHOUT THE WHERE============================================
			SELECT     
					RESOURCE_CODE_EMPLOYEE_PM_SM AS Resource
					, DEPARTMENT
					, LAST_NAME
					, FIRST_NAME
					, SIN_SSN AS SSN
					, STATUS_Active_Status AS Status
					, UDF_RES_USER02_Employment_Status AS Employment_Status
					, EMPLOYMENT_TYPE
					, UDF_USER01_Job_Title AS Job_Title
					, UDF_RES_USER01_Supervisor AS Supervisor
					, MIN_HR_RATE
					, ADDRESS1
					, ADDRESS2
					, ADDRESS3
					, POSTAL_CODE AS Zip
					, WORK_PHONE
					, CELL_PHONE
					, EMAIL_ADDRESS
					, START_DATE
					, SENIORITY
					, TERMINATED
					, UDF_RES_USER04_Benefit_Class AS Benefit_Class
					, From_SM_PM
			FROM         vw_0006_502_HR_ResourceMaster_PM_and_SM_EmpMaster
			WHERE 
			--  (		
			--		(
			--				(
			--					(upper(rtrim(ltrim([LAST_NAME]))) like '%' +  UPPER(RTRIM(LTRIM(@SearchString))) + '%')
			--					AND
			--					(@use_LAST_NAME = 1)
			--				)		
			--				OR 
			--				(
			--					(
			--						(upper(rtrim(ltrim([FIRST_NAME]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%')				
			--					)
			--					AND
			--					(@use_FIRST_NAME = 1)
			--				)				  
			--				OR 
			--					(
			--						(upper(rtrim(ltrim([UDF_USER01_Job_Title]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%') 
			--						AND
			--						(@use_Job_Title = 1)								
			--					)
			--				OR  (
			--						(upper(rtrim(ltrim([DEPARTMENT]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%') 	
			--						AND
			--						(@use_DEPARTMENT = 1)									
			--					)
			--				OR  (
			--						(upper(rtrim(ltrim([UDF_RES_USER01_Supervisor]))) like '%' +  (upper(rtrim(ltrim(@SearchString)))) + '%') 	
			--						AND
			--						(@use_Supervisor = 1)									
			--					)													

			--			)	
						--AND
						( -- 0_All, 1_Terminated, 2_Active
							(
								(@Terminated = '0_All')
							)
							OR
							(
								(@Terminated = '1_Terminated')
								AND
								(TERMINATED is NOT NULL)
							)	
							OR
							(
								(@Terminated = '2_Active')
								AND
								(TERMINATED is NULL)
							)																			
						)		
									
					
			--  ) 
			ORDER BY FIRST_NAME, LAST_NAME
		--========================================================================
		END		
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>If_String_is_Blank_Then_SELECT_ALL_Short_with_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>If_String_is_Blank_Then_SELECT_ALL_Short_with_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--If_String_is_Blank_Then_SELECT_ALL_Short_with_CTE


--prj_8015_SP_916_GetSelected_Practice_EMR_From_LNK03_v0.sql
-----------------------------------------
-- This SP will: Return the records that have the sSearchString in the following fields:
--
				--Practice_Official_CA_Name,
				--SoftwareTitle,
				--Practice_CA_Number,
				--Practice_Alternate_Name_1,				
				
-- In addition these fields are also returned:
				
				--VersionInfo_Details,
				--SoftwareType,
				--SoftwareType_e20,
				--LNK03_PK,
				--T1_FK,
				--L002_FK,
				--Notes

/*
	************************************************************************************
	NOTE: 
	Uses: 
	Modified: 
	Created: 10/16/2012
	By: glenn garson
	************************************************************************************
*/
SET NOCOUNT ON
Use DB2_CRM
go


alter PROCEDURE prj_8015_SP_916_GetSelected_Practice_EMR_From_LNK03(
	@sSearchString as NVARCHAR(25)
	)
	AS
	
-- START DEBUGGING SECTION -------------------	
	
			PRINT 'Input @sSearchString: ' + @sSearchString

-- END DEBUGGING SECTION -------------------

IF (LEN(@sSearchString) &gt; 0) OR (@sSearchString IS NOT NULL)			--Must also set the PARM to allow Nulls in SSRS

		BEGIN
-- ************* START BEGIN *****************************		
		
		
--\\\\\\\\\\\\\\ start CTE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\		


WITH CTE_ONE( 
				Practice_Official_CA_Name,
				SoftwareTitle,
				VersionInfo_Details,
				SoftwareType,
				Practice_CA_Number,
				Practice_Alternate_Name_1,
				SoftwareType_e20,
				LNK03_PK,
				T1_FK,
				L002_FK,
				Notes
			)
AS
(

	SELECT 

			T1_Practice.Practice_Official_CA_Name, 		
			L002_Software_LIST.SoftwareTitle, 
			L002_Software_LIST.VersionInfo_Details, 
			(
				Select [Enum].EnumDescription 
				From Enum
				where (
						([Enum].EnumNameSpace_FK=20) 
						and 
						([Enum].EnumValue=[SoftwareType_e20])
					   )
			 ) as SoftwareType,	
 			T1_Practice.Practice_CA_Number,
 			T1_Practice.Practice_Alternate_Name_1,
			L002_Software_LIST.SoftwareType_e20, 		
 			LNK03_T1_Practice_L002_EMR.LNK03_PK, 
			LNK03_T1_Practice_L002_EMR.T1_FK, 
			LNK03_T1_Practice_L002_EMR.L002_FK, 
			LNK03_T1_Practice_L002_EMR.Notes 		 
			 		
	FROM	(
				LNK03_T1_Practice_L002_EMR 
				INNER JOIN
				L002_Software_LIST 
				ON LNK03_T1_Practice_L002_EMR.L002_FK = L002_Software_LIST.L002_PK 
			)
			INNER JOIN
			T1_Practice
			ON LNK03_T1_Practice_L002_EMR.T1_FK = T1_Practice.T1_PK
        
)		
		
--\\\\\\\\\\\\\\ end CTE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\	

		
				SELECT *

				FROM CTE_ONE
				WHERE (		
							(Practice_Official_CA_Name like '%' +  @sSearchString + '%')
							OR (SoftwareTitle like '%' +  @sSearchString + '%')
							OR (Practice_CA_Number like '%' +  @sSearchString + '%')
							OR (Practice_Alternate_Name_1 like '%' +  @sSearchString + '%')
						)   
				Order by Practice_Official_CA_Name
							
				RETURN(@@ROWCOUNT)	
				
-- ************* END BEGIN *****************************				
		END
ELSE
		BEGIN
-- ************* START BEGIN *****************************		
		
		
--\\\\\\\\\\\\\\ start CTE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\		


WITH CTE_ONE( 
				Practice_Official_CA_Name,
				SoftwareTitle,
				VersionInfo_Details,
				SoftwareType,
				Practice_CA_Number,
				Practice_Alternate_Name_1,
				SoftwareType_e20,
				LNK03_PK,
				T1_FK,
				L002_FK,
				Notes
			)
AS
(

	SELECT 

			T1_Practice.Practice_Official_CA_Name, 		
			L002_Software_LIST.SoftwareTitle, 
			L002_Software_LIST.VersionInfo_Details, 
			(
				Select [Enum].EnumDescription 
				From Enum
				where (
						([Enum].EnumNameSpace_FK=20) 
						and 
						([Enum].EnumValue=[SoftwareType_e20])
					   )
			 ) as SoftwareType,	
 			T1_Practice.Practice_CA_Number,
 			T1_Practice.Practice_Alternate_Name_1,
			L002_Software_LIST.SoftwareType_e20, 		
 			LNK03_T1_Practice_L002_EMR.LNK03_PK, 
			LNK03_T1_Practice_L002_EMR.T1_FK, 
			LNK03_T1_Practice_L002_EMR.L002_FK, 
			LNK03_T1_Practice_L002_EMR.Notes 		 
			 		
	FROM	(
				LNK03_T1_Practice_L002_EMR 
				INNER JOIN
				L002_Software_LIST 
				ON LNK03_T1_Practice_L002_EMR.L002_FK = L002_Software_LIST.L002_PK 
			)
			INNER JOIN
			T1_Practice
			ON LNK03_T1_Practice_L002_EMR.T1_FK = T1_Practice.T1_PK
        
)		
		
--\\\\\\\\\\\\\\ end CTE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\	

		
				SELECT *

				FROM CTE_ONE
  
				Order by Practice_Official_CA_Name
							
				RETURN(@@ROWCOUNT)	
				
-- ************* END BEGIN *****************************
		END

	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedure_as_Input__using_OPENQUERY</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedure_as_Input__using_OPENQUERY</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--1] Need to enable DataAccess: http://sqlblogcasts.com/blogs/piotr_rodak/archive/2009/11/22/data-access-setting-on-local-server.aspx

--Test Beforehand
select server_id, name, is_data_access_enabled from sys.servers

use master

EXEC sp_serveroption 'BCC-EXPLORERDB', 'DATA ACCESS', TRUE

go

--Test afterwards
select server_id, name, is_data_access_enabled from sys.servers
--===============================================================================================================================
--2] Then you can use OpenQuery

use B2W_Reports
go
							
SELECT  * 
FROM    
OPENQUERY([BCC-EXPLORERDB], 'EXEC B2W_Reports.dbo.prj_0013_SP_226_sub_00C_Section_1ab ''04-01-2016'', ''04-30-2016'', ''0_ALL'', ''0_ALL''');  


--3] Use STORED PROC as input, AND create temp table from the input

use B2W_Reports
go
							
SELECT  * 
INTO tmpJUNK
FROM    
OPENQUERY([BCC-EXPLORERDB], 'EXEC B2W_Reports.dbo.prj_0013_SP_226_sub_00C_Section_1ab ''04-01-2016'', ''04-30-2016'', ''0_ALL'', ''0_ALL''');  




--=============================================================================================
--http://stackoverflow.com/questions/209383/select-columns-from-result-set-of-stored-procedure

--This works for me: (i.e. I only need 2 columns of the 30+ returned by sp_help_job)

SELECT name, current_execution_status 
FROM OPENQUERY (MYSERVER, 
  'EXEC msdb.dbo.sp_help_job @job_name = ''My Job'', @job_aspect = ''JOB''');  

--Before this would work, I needed to run this:

sp_serveroption 'MYSERVER', 'DATA ACCESS', TRUE;

--....to update the sys.servers table. (i.e. Using a self-reference within OPENQUERY seems to be disabled by default.)

--For my simple requirement, I ran into none of the problems described in the OPENQUERY section of Lance's excellent link.

--Rossini, if you need to dynamically set those input parameters, then use of OPENQUERY becomes a little more fiddly:

DECLARE @innerSql varchar(1000);
DECLARE @outerSql varchar(1000);

-- Set up the original stored proc definition.
SET @innerSql = 
'EXEC msdb.dbo.sp_help_job @job_name = '''+@param1+''', @job_aspect = N'''+@param2+'''' ;

-- Handle quotes.
SET @innerSql = REPLACE(@innerSql, '''', '''''');

-- Set up the OPENQUERY definition.
SET @outerSql = 
'SELECT name, current_execution_status 
FROM OPENQUERY (MYSERVER, ''' + @innerSql + ''');';

-- Execute.
EXEC (@outerSql);

/*
I'm not sure of the differences (if any) between using sp_serveroption 
	to update the existing sys.servers self-reference directly, vs. using sp_addlinkedserver (as described in Lance's link) 
	to create a duplicate/alias.

Note 1: I prefer OPENQUERY over OPENROWSET, given that OPENQUERY does not require the connection-string definition within the proc.

Note 2: Having said all this: normally I would just use INSERT ... EXEC :) Yes, it's 10 mins extra typing, but if I can help it, 
I prefer not to jigger around with:
(a) quotes within quotes within quotes, and
(b) sys tables, and/or sneaky self-referencing Linked Server setups (i.e. for these, I need to plead my case to our all-powerful DBAs :)

However in this instance, I couldn't use a INSERT ... EXEC construct, as sp_help_job is already using one. 
("An INSERT EXEC statement cannot be nested.")</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>TEMPLATE_SP_and_DEV_in_one_Script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>TEMPLATE_SP_and_DEV_in_one_Script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0021_SP_206_NumberOfHourlyEmployees_ThoseWithTimeCards.sql
/*	
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 5/5/2014
	By: glenn garson
	************************************************************************************
*/

USE [barriere]
GO

--------------------------------DEBUG PARMS START
--DECLARE @Company INT
--SELECT @Company = 1

--DECLARE @YYYYMM as char(6)
--SELECT @YYYYMM ='201619'

--DECLARE @UserID as char(6)

--SELECT @UserID ='0_ALL'
----SELECT @UserID ='0_ALL'

--DECLARE @Division as char(6)
----SELECT @Division ='7P'
--SELECT @Division ='0_ALL'
--------------------------------DEBUG PARMS END

Create PROCEDURE [dbo].[prj_0021_SP_206_NumberOfHourlyEmployees_ThoseWithTimeCards](
															@Company as char(3),
															@YYYYMM as varchar(6),
															@UserID as char(20),
															@Division as char(9)
														)
AS

;WITH

  CTE_START (
			
						EMPLOYEE, 
						TimeCard									
			)
  AS
  (
			--======================================================================================
				Select 
					coalesce(TC.EMPLOYEE, E.EMPLOYEE) as EMPLOYEE 
				  ,	(SELECT     'TheCalculation' = 
    						CASE 
        							WHEN ( (TC.TIME_HALF_HOURS IS NULL ) AND (TC.REG_HOURS IS NULL ) ) 
        							THEN 0
			        		 
							ELSE 1

    							END) as TimeCard					
						
			
				From 
					(
						SELECT *
						FROM PM_TIMECARDS
						WHERE
						--SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS				
								COMPANY = @Company 
									and 
									PAYROLL_TYPE='HP' 
									and 
									PAY_PERIOD=@YYYYMM 
									and (        --&lt;============================================S
											(
												(@UserID='0_ALL')
												AND
												@UserID is not null 
											)
											OR
											(	
												(	@UserID is not null 
													and 
													[USER_ID] = @UserID
												) 
												--or 
												--@UserID is null 			
											)			 
										)       --&lt;============================================E	
									
									and
									NON_WORK is NULL
									and
									(      --&lt;============================================S
										(@Division='0_ALL')
										OR
										(DIVISION = @Division)
									) 						
						--EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
					) AS TC
					RIGHT OUTER JOIN		
					(
						SELECT *
						FROM PM_EMPMASTER
						WHERE (TERMINATED is NULL)
					) as E
					on(
						TC.COMPANY=E.COMPANY 
						and 
						TC.EMPLOYEE=E.EMPLOYEE
					   )

  )
  
  --Select  * --TOP(100)
  --from CTE_START

 SELECT COUNT(*) as Number_Of_Hourly_Employees, SUM(TimeCard) as Number_Of_Time_Cards
 FROM CTE_START </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>STRINGS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Concatenate_ValuesFromRowsOfOneColumn_intoOneString_MultipleRowSetExample</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>STRINGS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Concatenate_ValuesFromRowsOfOneColumn_intoOneString_MultipleRowSetExample</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Concatenate_ValuesFromRowsOfOneColumn_intoOneString_MultipleRowSetExample


Use RiskMngt
go


--0013_TASK_044_SP_01_MAIN_ContractReturnsDetail_v1.sql
/*
	************************************************************************************
	SSRS Report: 0013_REP_xx
	NOTE: 
	Uses: 
	Created: 10/31/2019
	By: glenn garson
	************************************************************************************
*/
----------------------------------DEBUG PARMS START
--DECLARE @BeginDate date
--SELECT @BeginDate = '10-01-2019'

--DECLARE @EndDate date
--SELECT @EndDate = '10-30-2019' 
-- --------------------------------DEBUG PARMS END   
create Procedure [Reporting].[P_0013_TASK_044_SP_01_MAIN_ContractReturnsDetail](@BeginDate date,@EndDate date)
	as

--=====================================================================================================================
IF OBJECT_ID('tempdb..#temp_ALL') IS NOT NULL DROP TABLE #temp_ALL
IF OBJECT_ID('tempdb..#temp_FundingReason') IS NOT NULL DROP TABLE #temp_FundingReason

DECLARE @intDayLightSavingsTime int
SELECT @intDayLightSavingsTime = 0  --				NEED TO CONFIRM THIS: 0 in Fall, Winter, until March, i.e. when it is not Daylight Savings Time,  = 1 after March, until about November, i.e. when it is DayLight Savings Time
--=====================================================================================================================

SELECT DISTINCT

			COUNT(WS.applicationNumber) OVER(PARTITION BY WS.applicationNumber) as CountReturned

			,ws.applicationId
			,WS.applicationNumber AS CLIENT_APP_ID
			,ws.[dateCreated] as [Date_App_Created]
			,r.[name] as [Region]
			,c.clientName	as [Dealer]
			,c.clientId as [DealerID]
			,so_decision.label as descisionStatus
			,ws.fundingStatusModifiedOn 
	--==================================================================================================================================================================
		, MAX(DNL_dds.dateCreated) OVER(PARTITION BY ws.applicationNumber) as DDS_date

		,CASE

		--Eastern
		WHEN decision.userTimeZone ='America/New_York'   Then  DATEADD(hh,(-6 + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))
		--Central 
		WHEN decision.userTimeZone ='America/Chicago'    Then  DATEADD(hh,(-5 + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))		
		WHEN decision.userTimeZone ='America/Costa_Rica'     Then  DATEADD(hh,(-5 + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))
		--Mountain	
		WHEN decision.userTimeZone ='America/Denver'    Then  DATEADD(hh,(-4  + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))						
		WHEN decision.userTimeZone ='America/Phoenix'    Then  DATEADD(hh,(-4  + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))						
		--Pacifid
		WHEN decision.userTimeZone ='America/Los_Angeles'    Then  DATEADD(hh,(-3 + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))																	
		Else DATEADD(hh,(-5 + @intDayLightSavingsTime), MAX(DNL_dds.dateCreated) OVER(PARTITION BY app.applicationNumber))	--I just use the Central time adjustment when the [userTimeZone] is NULL
	End AS [DDS_Received_Date_local]			
	--==================================================================================================================================================================
	,app.xSalesRepName as [SalesRep]
	,app.xFundingOwner
	, MAX(DNL.dateCreated) OVER(PARTITION BY ws.applicationNumber) as LastReturned_date
	, (cu_CredOff.userFirstName + ' ' + cu_CredOff.userLastName) as AssignedCreditOfficer
	,so_funding.label as [FundingStatus]
  INTO #temp_ALL
  FROM 
			DL4.DBO.DealerNotificationLog DNL												--Transaction Log for DL4
			INNER JOIN 
			DL4.dbo.Worksheet WS
			ON 
				DNL.internalApplicationId = WS.applicationId
				AND
				DNL.[title] like '%Application Returned To Dealer%'

			LEFT OUTER JOIN
			[DL4].[dbo].[Region] r
			ON ws.regionId = r.regionId

			LEFT OUTER JOIN
			[DL4].[dbo].[Client] c
			ON ws.internalDealerId = c.internalClientId

			LEFT OUTER JOIN
			[DL4].[dbo].[ApplicationDetailView] app
			ON DNL.internalApplicationId = app.[internalApplicationId] 

			LEFT OUTER JOIN
			DL4.dbo.DealerNotificationLog DNL_dds 
			on 
				app.internalApplicationId = DNL_dds.internalApplicationId
				AND
				DNL_dds.title like 'Contract received with DCN%'

			LEFT JOIN DL4.dbo.ClientUser decision
			ON decision.internalUserId = app.decisionedBy

			LEFT OUTER join 
			DL4.dbo.[SelectOption] so_decision 
			on 
				ws.decisionStatus = so_decision.value
				and 
				so_decision.selection = 'decisionStatus'

			LEFT JOIN DL4.dbo.ClientUser cu_CredOff
			ON c.creditOfficerId= cu_CredOff.internalUserId 

			LEFT OUTER join 
			DL4.dbo.[SelectOption] so_funding 
			on 
				ws.fundingStatus = so_funding.value
				and 
				so_funding.selection = 'fundingstatus'

  Where 
		WS.dateCreated &gt;= @BeginDate
		AND 
		WS.dateCreated &lt;= @EndDate


--============================================================

select 
	w.applicationNumber
	,fr.name as funding_reason
INTO #temp_FundingReason
from 
	DL4.dbo.Worksheet w
	inner join 
	DL4.dbo.FundingReason fr 
	on w.applicationId = fr.applicationId
where 
		w.fundingStatus = 209 
		AND
		w.applicationNumber IN (SELECT CLIENT_APP_ID FROM #temp_ALL)

--============================================================

SELECT 


 [CLIENT_APP_ID]
, [Date_App_Created]
, [DDS_Received_Date_local]

, [Dealer]
, [DealerID]
, [Region]
, [SalesRep]
, AssignedCreditOfficer
, [descisionStatus]
, [fundingStatus]
, [xFundingOwner] as [FundingOwner]
, LastReturned_date
, [CountReturned] as [NumberOfReturns]

, (
		 --REFERENCE: --https://stackoverflow.com/questions/194852/how-to-concatenate-text-from-multiple-rows-into-a-single-text-string-in-sql-serv
		SELECT REPLACE(
					(	
						select REPLACE(funding_reason, ' ', '_') AS 'data()' FROM #temp_FundingReason WHERE applicationNumber = cte.[CLIENT_APP_ID] for xml path(''))
					 , ' ', ', ') as abc
 ) as Reasons
from #temp_ALL as cte</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_VARIABLE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Create_TVP_TableVariable_from_Stored_Procedure</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_VARIABLE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Create_TVP_TableVariable_from_Stored_Procedure</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Create_TVP_TableVariable_from_Stored_Procedure

--=====================================================================
NOTE: The TVP (TableVariable) and the INSERT statement 
		must include all the fields from the Stored Procedure.
	  It is only in the 3rd step that you can cull some of the variables 
--=====================================================================



--prj_0013_SP_237_SubProj_00E_Audit_Scheduled_Days_v2.sql


/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 10/13/2016
	By: glenn garson
	************************************************************************************
*/
use B2W_Reports
go

--------------------------------DEBUG PARMS START
DECLARE @BeginDate date
SELECT @BeginDate = '09-01-2016'

DECLARE @EndDate date
SELECT @EndDate = '09-30-2016'

DECLARE @BU as nvarchar(max)
SELECT @BU ='0_ALL'	--'HCC'	--'SSA'

DECLARE @Mechanic as nvarchar(max)
SELECT @Mechanic ='0_ALL'

--------------------------------DEBUG PARMS END

--create Procedure prj_0013_SP_237_SubProj_00E_Audit_Scheduled_Days(
--		 @BeginDate as date,
--         @EndDate as date,	
--         @BU as nvarchar(max),
--         @Mechanic as nvarchar(max)                	
--	)

--	as

Declare	@CompletedWorkOrders_1ab TABLE					--WAS: @NumeratorTable_1ab TABLE 
(
		   [Equipment_No] nvarchar(100) NULL
		  ,[WO_ID] int NOT NULL
		  ,[MR_ID] int	NULL
		  ,[MR_Reason] nvarchar(100)
		  ,[MR_Created_Date] datetime
		  ,[WO_Created_Date] datetime
		  ,[WO_Due_Date] datetime
		  ,[WO_Start_Date] datetime						--&lt;== Use this the "WO Start Date"
		  ,[WO_End_Date] datetime
		  ,[MR_Completed_Date] datetime
		  ,[Mechanic] nvarchar(201)
		  ,[WO_Priority] nvarchar(100)
		  ,[WO_Problem_Description] nvarchar(200)
		  ,[WO_Problem_Code] nvarchar(50)
		  ,estimated_WO_Completed_Date datetime
		  ,COUNT_MR_ID int
		  ,COUNT_MR_Completed_Date int
		  ,WO_Completed_Date datetime					 --&lt;===
		  ,BackLog int
		  ,Schedule int
		  ,BU_Name nvarchar(100)
		  ,Days_to_Create_WO int
		  ,Days_from_Request int		
)



insert into @CompletedWorkOrders_1ab(
							   [Equipment_No]
							  ,[WO_ID]
							  ,[MR_ID]
							  ,[MR_Reason]
							  ,[MR_Created_Date]
							  ,[WO_Created_Date]
							  ,[WO_Due_Date]
							  ,[WO_Start_Date]
							  ,[WO_End_Date]
							  ,[MR_Completed_Date]
							  ,[Mechanic]
							  ,[WO_Priority]
							  ,[WO_Problem_Description]
							  ,[WO_Problem_Code]
							  ,estimated_WO_Completed_Date
							  ,COUNT_MR_ID
							  ,COUNT_MR_Completed_Date
							  ,WO_Completed_Date
							  ,BackLog
							  ,Schedule
							  ,BU_Name
							  ,Days_to_Create_WO
							  ,Days_from_Request
							) exec prj_0013_SP_226_sub_00C_Section_1ab @BeginDate, @EndDate, @BU, @Mechanic
							


;							
With CTE_CompletedWorkOrders_1ab
AS
(							
	select    --DISTINCT 
				   [Equipment_No]
				  ,[WO_ID]
				  ,[MR_ID]
				  --,[MR_Reason]
				  ,[MR_Created_Date]
				  ,[WO_Created_Date]
				  --,[WO_Due_Date]
				  ,[WO_Start_Date]
				  ,[WO_End_Date]
				  ,[MR_Completed_Date]
				  ,[Mechanic]
				  --,[WO_Priority]
				  --,[WO_Problem_Description]
				  --,[WO_Problem_Code]
				  ,estimated_WO_Completed_Date
				  --,COUNT_MR_ID
				  --,COUNT_MR_Completed_Date
				  ,WO_Completed_Date
				  --,BackLog
				  ,Schedule
				  ,BU_Name
				  --,Days_to_Create_WO
				  --,Days_from_Request
				  ,'1ab' as [Sub_Sub_Population]
				  ,'PM125' as [Sub_Population]
	from @CompletedWorkOrders_1ab 
)



--========================================================================

SELECT	--u.*
				   DATEDIFF( dd , [WO_Start_Date] , [WO_Completed_Date] ) as DaysScheduled_WO ,
					DATEDIFF( dd , [MR_Created_Date] , [MR_Completed_Date] ) as DaysScheduled_MR,	 --&lt;====				   
				   u.[Equipment_No]
				  ,u.[WO_ID]
				  ,u.[MR_ID]
				  --,u.[MR_Reason]
				  ,u.[MR_Created_Date]
				  ,u.[WO_Created_Date]
				  --,u.[WO_Due_Date]
				  ,u.[WO_Start_Date]
				  ,u.[WO_End_Date]
				  ,u.[MR_Completed_Date]
				  ,u.[Mechanic]
				  --,u.[WO_Priority]
				  --,u.[WO_Problem_Description]
				  --,u.[WO_Problem_Code]
				  ,estimated_WO_Completed_Date
				  --,COUNT_MR_ID
				  --,COUNT_MR_Completed_Date
				  ,WO_Completed_Date
				  --,BackLog
				  ,Schedule
				  ,BU_Name
				  --,Days_to_Create_WO
				  --,Days_from_Request
				  ,u.[Sub_Sub_Population]
				  ,u.[Sub_Population],	

		avgDaysScheduled_WO = avg(DATEDIFF( dd , [WO_Start_Date] , [WO_Completed_Date] ) ) OVER (PARTITION BY [Sub_Population],[year], [month], [WeekOfMonth], [WO_ID]),		
		avgDaysScheduled_MR = avg(DATEDIFF( dd , [MR_Created_Date] , [MR_Completed_Date] ) ) OVER (PARTITION BY [Sub_Population],[year], [month], [WeekOfMonth], [WO_ID])		
FROM
		(
			SELECT * from CTE_CompletedWorkOrders_1ab

		)  as u
		LEFT OUTER JOIN	
		[LIST_DateDimension] d
		on	Convert(date,u.WO_Completed_Date) = d.Date	
WHERE 
	(DATEDIFF( dd , [WO_Start_Date] , [WO_Completed_Date] )&lt;0)
	OR
	(DATEDIFF( dd , [MR_Created_Date] , [MR_Completed_Date] )&lt;0)
		
ORDER BY WO_ID, MR_ID
								
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TABLE_VARIABLE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>POPULATE_TVP_from_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TABLE_VARIABLE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>POPULATE_TVP_from_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>use B2W_Reports
go

----------------------------------DEBUG PARMS START


DECLARE @BU as nvarchar(max)
SELECT @BU ='0_ALL'	--'HCC'	--'SSA'

DECLARE @Mechanic as nvarchar(max)
SELECT @Mechanic ='0_ALL'

DECLARE @Week_1_Start date
SELECT @Week_1_Start = ' '

DECLARE @Week_1_USE bit
SELECT @Week_1_USE = 0

DECLARE @Week_2_Start date
SELECT @Week_2_Start = '09-05-2016'

DECLARE @Week_2_USE bit
SELECT @Week_2_USE = 1

DECLARE @Week_3_Start date
SELECT @Week_3_Start = '09-12-2016'

DECLARE @Week_3_USE bit
SELECT @Week_3_USE = 1

DECLARE @Week_4_Start date
SELECT @Week_4_Start = '09-19-2016'

DECLARE @Week_4_USE bit
SELECT @Week_4_USE = 1

DECLARE @Week_5_Start date
SELECT @Week_5_Start = '09-26-2016'

DECLARE @Week_5_USE bit
SELECT @Week_5_USE = 1

DECLARE @Week_6_Start date
SELECT @Week_6_Start = ' '

DECLARE @Week_6_USE bit
SELECT @Week_6_USE = 1

--------------------------------DEBUG PARMS END

--=====================================Internal Variables - START
DECLARE @BeginDate date

DECLARE @EndDate date

DECLARE @NoOfWeeks INT

DECLARE @BeginEndDate_TVP TABLE(                                                 --&lt;=== DEFINE THE TVP
    beginDate  date,
    endDate  date,
    NoOfWeeks INT
    
);
--=====================================Internal Variables - END


							
;	With CTE_Begin_End_Dates_ALL                                                 --&lt;=== POPULATE the CTE with some synthetic data
AS 
(
	SELECT 1 as TheWeek, @Week_1_Start as START_DATE, @Week_1_USE as USE_Week, DATEADD(dd, 6, @Week_1_Start) as END_DATE
	UNION 
	SELECT 2, @Week_2_Start, @Week_2_USE, DATEADD(dd, 6, @Week_2_Start)
	UNION 
	SELECT 3, @Week_3_Start, @Week_3_USE, DATEADD(dd, 6, @Week_3_Start)	
	UNION 
	SELECT 4, @Week_4_Start, @Week_4_USE, DATEADD(dd, 6, @Week_4_Start)	
	UNION 
	SELECT 5, @Week_5_Start, @Week_5_USE, DATEADD(dd, 6, @Week_5_Start)	
	UNION 
	SELECT 6, @Week_6_Start, @Week_6_USE, DATEADD(dd, 6, @Week_6_Start)		
)

	INSERT INTO @BeginEndDate_TVP                                                    --&lt;=== POPULATE the TVP     
	SELECT 
			MIN(START_DATE) as BeginDate,
			MAX(END_DATE) as EndDate,
			SUM(CAST(USE_Week as INT)) as NoOfWeeks
	FROM CTE_Begin_End_Dates_ALL
	WHERE (
			(USE_Week =1)
			AND
			(START_DATE &lt;&gt; '1900-01-01')
		   )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ARCHIVE_Table____UpdateTrigger_CreateDateName_RowVersion</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ARCHIVE_Table____UpdateTrigger_CreateDateName_RowVersion</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--p_0048_CREATE__ARCHIVE_02_BHCS_EP.sql
/*
	************************************************************************************
	Use this Script to populate this Arcive: xxxx.sql
	use this table for Archiving 
				Input: 
					the aaa_yyyy_mm_dd_BHCS_AS tables
				INSERT_INTO:
					ARCHIVE_01_BHCS_AS
				
	Created: 1/30/2018
	By: glenn garson
	************************************************************************************
*/
USE [OBH_Data_Factory]
go

IF OBJECT_ID('dbo.ARCHIVE_01_BHCS_AS') IS NOT NULL
    DROP TABLE dbo.ARCHIVE_01_BHCS_AS

go

CREATE TABLE [dbo].[ARCHIVE_01_BHCS_AS](
	[ARCHIVE_01_PK] [int] IDENTITY(1,1) NOT NULL,
	---------------------------
	[ARRESTS] [float] NULL,
	[CP_ALCOHOL] [float] NULL,
	[CP_DRUGS] [float] NULL,
	...
	[DX_8] [nvarchar](255) NULL,
	----------------------------
	[fromTable] [nvarchar](255) NOT NULL,
	[CreateRecord_dateTime] [datetime] NULL,
	[CreateRecord_name] [sysname] NULL,
	[UpdateRecord_dateTime] [datetime] NULL,
	[UpdateRecord_name] [sysname] NULL,
	[ARCHIVE_01_RowVersion] [timestamp] NULL,
 CONSTRAINT [ARCHIVE_01_ALL_$_ARCHIVE_01_PK] PRIMARY KEY CLUSTERED 
(
	[ARCHIVE_01_PK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
ALTER TABLE [dbo].[ARCHIVE_01_BHCS_AS] ADD  CONSTRAINT [df_ins_date]  DEFAULT (getdate()) FOR [CreateRecord_dateTime]
GO

ALTER TABLE [dbo].[ARCHIVE_01_BHCS_AS] ADD  CONSTRAINT [df_ins_name]  DEFAULT (coalesce(suser_sname(),'?')) FOR [CreateRecord_name]
GO

ALTER TABLE [dbo].[ARCHIVE_01_BHCS_AS] ADD  CONSTRAINT [df_upd_date]  DEFAULT (getdate()) FOR [UpdateRecord_dateTime]
GO

ALTER TABLE [dbo].[ARCHIVE_01_BHCS_AS] ADD  CONSTRAINT [df_upd_name]  DEFAULT (coalesce(suser_sname(),'?')) FOR [UpdateRecord_name]
GO

create trigger [dbo].[TRG_001_recordChanged_ARCHIVE_01] on [OBH_Data_Factory].[dbo].[ARCHIVE_01_BHCS_AS]
for update
as
begin

    -- nothing to do?
    if (@@rowcount = 0)
      return;

    update d
    set 
       d.UpdateRecord_dateTime = getdate(),
       d.UpdateRecord_name = (coalesce(suser_sname(),'?'))
    from
       [OBH_Data_Factory].[dbo].ARCHIVE_01_BHCS_AS d join inserted i 
    on 
       d.ARCHIVE_01_PK = i.ARCHIVE_01_PK;

end

GO

ALTER TABLE [dbo].[ARCHIVE_01_BHCS_AS] ENABLE TRIGGER [TRG_001_recordChanged_ARCHIVE_01]
GO

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Create_DELETE_table_PK_Rowversion_Default_Constraints</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Create_DELETE_table_PK_Rowversion_Default_Constraints</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--p_0021_CREATE_TABLE_T004_All_Monthly_NonBillable_Services_IDR_ARCHIVE_v3.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 03/14/2017
	By: glenn garson
	************************************************************************************
*/
USE [Success]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF OBJECT_ID('dbo.T004_All_Monthly_NonBillable_Services_IDR_ARCHIVE') IS NOT NULL
    DROP TABLE dbo.T004_All_Monthly_NonBillable_Services_IDR_ARCHIVE

go

CREATE TABLE [dbo].[T004_All_Monthly_NonBillable_Services_IDR_ARCHIVE]
(
		[ARCHIVE_T004_PK] [int] IDENTITY(1,1) NOT NULL,

		[Location] [nvarchar](50) NULL,
		[Date_Encounter] [date] NULL,
		[Patient_No__Chart] [Int] NULL,
		[Patient_Birth_Date__Chart] [date] NULL,
		[Examining_Clinician] [nvarchar](100) NULL,
		[Chp_Encounter_Id] [bigint] NULL,
		[Billable_Encounter_ID] [nvarchar](25) NULL,
		[Reason_for_Encounter] [nvarchar](255) NULL,
		[Encounter_Type] [nvarchar](50) NULL,
		[Encounter_Count] [int] NULL,
		[NonBillable_Type] [nvarchar](2) NULL,

		[Age_as_of_End_Of_Month] [int],
		[Adult] [bit] NULL CONSTRAINT T004_ARCHIVE_Billable_Service$Default$Zero  DEFAULT ((0)),
		[DateTime_Archived] [datetime] NOT NULL CONSTRAINT T004_ARCHIVE_TheDateTime_Default_GETDATE DEFAULT GETDATE(),

		[ARCHIVE_T004_RowVersion] [timestamp] NULL
	,CONSTRAINT [T004_All_Monthly_NonBillable_Services_IDR_ARCHIVE$ARCHIVE_T004_PK] PRIMARY KEY NONCLUSTERED 
		(
			[ARCHIVE_T004_PK] ASC
		)
		WITH 
				(
					PAD_INDEX  = OFF, 
					STATISTICS_NORECOMPUTE  = OFF, 
					IGNORE_DUP_KEY = OFF, 
					ALLOW_ROW_LOCKS  = ON, 
					ALLOW_PAGE_LOCKS  = ON
				) ON [PRIMARY]

)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CREATE_TABLE_Computed_Column__persisted</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CREATE_TABLE_Computed_Column__persisted</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--CREATE_TABLE_Computed_Column__persisted


CREATE TABLE [dbo].[T003_All_Monthly_Billable_Services_IDR]
(
		[T003_PK] [int] IDENTITY(1,1) NOT NULL,

		[CHECKMONTH] [nvarchar](25) NULL,
		[LOCation] AS 
							CASE 
								WHEN [Office Location]  = 'WB JeffCare'
										THEN 'WJ' 
								WHEN [Office Location]  = 'EB JeffCare'
										THEN 'EJ' 
								ELSE ''
							END	PERSISTED,
		[T003_RowVersion] [timestamp] NULL
	,CONSTRAINT [T003_All_Monthly_Billable_Services_IDR$T003_PK] PRIMARY KEY NONCLUSTERED 
		(
			[T003_PK] ASC
		)
		WITH 
				(
					PAD_INDEX  = OFF, 
					STATISTICS_NORECOMPUTE  = OFF, 
					IGNORE_DUP_KEY = OFF, 
					ALLOW_ROW_LOCKS  = ON, 
					ALLOW_PAGE_LOCKS  = ON
				) ON [PRIMARY]
--===========================================================
--https://www.mssqltips.com/sqlservertip/2481/getting-creative-with-computed-columns-in-sql-server/
-- Script# 1: Computed column with conditional formula
-- Use sample database
USE [AdventureWorks]
GO 
 
-- Create Table with computed column
IF OBJECT_ID('CCtest', 'U') IS NOT NULL
  DROP TABLE [dbo].[CCtest]
GO
 
CREATE TABLE [dbo].[CCtest]
  (
  [EmpNumb] INT NOT NULL,
  [Designation] VARCHAR(50) NOT NULL,
  [DOBirth] DATETIME NOT NULL,
  [DORetirement] AS 
    CASE WHEN designation = 'Manager' 
      THEN (DATEADD(YEAR,(65),[DOBirth]))
      ELSE (DATEADD(YEAR,(60),[DOBirth]))
    END
)
GO
 
--Insert sample data 
INSERT INTO CCTest (empNumb, Designation, DOBirth) 
SELECT 84, 'DBA', '1985-12-13' UNION ALL
SELECT 85, 'DBA', '1980-11-18' UNION ALL
SELECT 86, 'Manager', '1978-01-19' UNION ALL
SELECT 88, 'Manager', '1985-12-13' UNION ALL
SELECT 90, 'Developer', '1975-07-23' 
GO
 
-- Check the required functionality in result
SELECT Designation, datediff(yy,dobirth,doretirement ) AgeLimit, DOBirth, DORetirement 
FROM CCTest
GO

--===========================================================
--Creating a computed column based on a user-defined type column  

  CREATE TABLE UDTypeTable   
    ( 
    	u utf8string, 
    	ustr AS u.ToString() PERSISTED 
    ) ; 
--===========================================================
--http://stackoverflow.com/questions/711159/how-to-set-a-default-value-for-one-column-in-sql-based-on-another-column	
--If what you are looking for is to define a column definition based on another column you can do something like this:

create table testable 
(
    c1 int, 
    c2 datetime default getdate(), 
    c3 as year(c2)
);

insert into testable (c1) select 1

select * from testable;
--===========================================================


--Using an expression for a computed column

CREATE TABLE dbo.mytable   
    ( 
    	low int, 
    	high int, 
    	myavg AS (low + high)/2 
    ) ;  
    
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CREATE_temp_Table_using_OPENQUERY_from_Stored_Procedure</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CREATE_temp_Table_using_OPENQUERY_from_Stored_Procedure</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--1] Need to enable DataAccess: http://sqlblogcasts.com/blogs/piotr_rodak/archive/2009/11/22/data-access-setting-on-local-server.aspx

--Test to make sure Data Access is enabled on the server, Beforehand
select server_id, name, is_data_access_enabled from sys.servers

use master

EXEC sp_serveroption 'BCC-EXPLORERDB', 'DATA ACCESS', TRUE

go

--Test afterwards
select server_id, name, is_data_access_enabled from sys.servers
--===============================================================================================================================
--2] Then you can use OpenQuery

use B2W_Reports
go
							
SELECT  * 
FROM    
OPENQUERY([BCC-EXPLORERDB], 'EXEC B2W_Reports.dbo.prj_0013_SP_226_sub_00C_Section_1ab ''04-01-2016'', ''04-30-2016'', ''0_ALL'', ''0_ALL''');  

--===============================================================================================================================
--3] Use STORED PROC as input, AND create temp table from the input

use B2W_Reports
go
							
SELECT  * 
INTO tmpJUNK			--&lt;=== This actually not a "temp" table
FROM    
OPENQUERY([BCC-EXPLORERDB], 'EXEC B2W_Reports.dbo.prj_0013_SP_226_sub_00C_Section_1ab ''04-01-2016'', ''04-30-2016'', ''0_ALL'', ''0_ALL''');  


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Drop_all_tables_that_contain_a_certain_string_2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Drop_all_tables_that_contain_a_certain_string_2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Drop_all_tables_that_contain_a_certain_string_2

https://stackoverflow.com/questions/38720170/delete-all-tables-in-sql-server-database-except-few
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--p_0048_MAINT_016_Delete_MultipleTables_ThatStartWith_xxx_v1.sql
/*
	************************************************************************************
	CAREFULL: this script DELETES tables that begin with 'bbb_' and 'ccc_'

	Created: 1/31/2018
	By: glenn garson
	************************************************************************************
*/
USE [OBH_Data_Factory]
go

DECLARE @ExecSQL AS NVARCHAR (MAX) = '';

SELECT @ExecSQL = @ExecSQL + 
    'DROP TABLE ' + QUOTENAME(S.name) + '.' + QUOTENAME(T.name) + '; ' 
FROM sys.tables T
JOIN sys.schemas S ON S.schema_id = T.schema_id
WHERE (
		T.name LIKE 'bbb_%'
		OR
		T.name LIKE 'ccc_%'
	  )
--PRINT @ExecSQL
EXEC (@ExecSQL)

go
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

DECLARE @ExecSQL AS NVARCHAR (MAX) = '';

SELECT @ExecSQL = @ExecSQL + 
    'DROP TABLE ' + QUOTENAME(S.name) + '.' + QUOTENAME(T.name) + '; ' 
FROM sys.tables T
JOIN sys.schemas S ON S.schema_id = T.schema_id
WHERE T.name LIKE '%DynamicSurgery'

--PRINT @ExecSQL
EXEC (@ExecSQL)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Simulate_CascadeUpdate_CascadeDelete</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Simulate_CascadeUpdate_CascadeDelete</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--This one adds the new record to the other table, but not the delete


--prj_8011_SP_011_Add_Employee_To_T9_v5.sql
-----------------------------------------
-- This SP will:
--		INSERT INTO T011 one record, and return the IDENT_CURRENT for the new record
--		INSERT INTO T15 the new T9_FK

/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 5/25/2012
	Modified: 1/31/2013: Now it will run prj_1021_SP_925_Add_T21PK_for_all_Trainings_and_T15FK_ForNewEmployee_Given_T9PK_To_T21
	Modified: 9/24/2012:  Now it will INSERT INTO T15 the T9_FK
	Modified: 8/29/2012: added 7 fields	
	Modified: 10/17/2012: removed three unused enum fields
	By: glenn garson
	************************************************************************************

*/

SET NOCOUNT ON
Use DB2_CRM
go



alter PROCEDURE SP_011_Add_Employee_To_T9(
	@Name AS  nvarchar(255),
	@Titles AS  nvarchar(255),
	@Position AS  int,
	@bCareManager AS  bit,
	@Notes AS  nvarchar(max),
	@bActiveEmployee as bit
	  , @EMPLOYEE_Language_e12 AS  smallint
      , @EMPLOYEE_OfficeLocation_e13 AS  smallint
      , @CCWNC_Department_e14 AS  smallint
      --, @CrossDepartment_Team_e15 AS  smallint
      --, @SameDepartment_Team_e16 AS  smallint
      --, @EmployeeSupport_Role_e17 AS  smallint
      , @Supervisor AS  int
	)
	
	
	AS
	
-- START DEBUGGING SECTION -------------------	
	
			PRINT '1) Input @Name: ' + 	 @Name
			PRINT '2)Input @Titles: ' +  @Titles
			PRINT '3)Input @Position: ' + 	 	CAST(@Position AS varchar(5))
			PRINT '4)Input @bCareManager: ' + CAST(@bCareManager AS varchar(2)) + ', ' + SUBSTRING('FalseTrue', @bCareManager * 5 + 1, 5)  --TRUE is converted to 1 and FALSE is converted to 0.
			PRINT '5)Input @Notes: ' + 	 @Notes	
			PRINT '6)Input @bCareManager: ' + CAST(@bActiveEmployee AS varchar(2)) + ', ' + SUBSTRING('FalseTrue', @bActiveEmployee * 5 + 1, 5)  --TRUE is converted to 1 and FALSE is converted to 0.

			PRINT '7)Input @EMPLOYEE_Language_e12: ' + CAST(@EMPLOYEE_Language_e12 AS varchar(10))
			PRINT '8)Input @EMPLOYEE_OfficeLocation_e13: ' + CAST(@EMPLOYEE_OfficeLocation_e13 AS varchar(10))
			PRINT '9)Input @CCWNC_Department_e14: ' + CAST(@CCWNC_Department_e14 AS varchar(10))
			--PRINT '10)Input @SameDepartment_Team_e16: ' + CAST(@SameDepartment_Team_e16 AS varchar(10))			
			--PRINT '11)Input @EmployeeSupport_Role_e17: ' + CAST(@EmployeeSupport_Role_e17 AS varchar(10))			
			PRINT '12)Input @Supervisor: ' + CAST(@Supervisor AS varchar(10))
												
-- END DEBUGGING SECTION -------------------	
	

-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Declare variables used internally in the Stored Procedure, and set intial values:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

   DECLARE @T9_FK INT
   SELECT @T9_FK = NULL

-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 1] INSERT INTO
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


INSERT INTO T9_CCWNC_Employees
						(
							[Name]
							,[Titles]
							,[Position]
							,[bCareManager]
							,[Notes]
							,[bActiveEmployee]
							--
							,[EMPLOYEE_Language_e12]
							,[EMPLOYEE_OfficeLocation_e13]
							,[CCWNC_Department_e14]
							--,[CrossDepartment_Team_e15]
							--,[SameDepartment_Team_e16]
							--,[EmployeeSupport_Role_e17]
							,[Supervisor]
							--
						)
VALUES
		(
			@Name,
			@Titles,
			@Position,
			@bCareManager,
			@Notes,
			@bActiveEmployee
			--			
			, @EMPLOYEE_Language_e12
			, @EMPLOYEE_OfficeLocation_e13
			, @CCWNC_Department_e14
			--, @CrossDepartment_Team_e15
			--, @SameDepartment_Team_e16
			--, @EmployeeSupport_Role_e17
			, @Supervisor
			--				
		);
	
   SELECT @T9_FK = @@IDENTITY
	
		
		
	IF @@ERROR = 0
		BEGIN
		-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
			INSERT INTO T15_CCWNC_Employee_SecurityPortal (T9_FK) VALUES (@T9_FK)
			EXEC prj_1021_SP_925_Add_T21PK_for_all_Trainings_and_T15FK_ForNewEmployee_Given_T9PK_To_T21 @T9_FK
			IF @@ERROR = 0
				BEGIN
					RETURN @T9_FK
					PRINT 'Returned the PK for the new T9 record, and T9_FK was successfully inserted into T15'
				END
			ELSE
				BEGIN
					PRINT 'Woops! There was an error when the FK was inserted into T15 if it returns a zero (0)'
					RETURN 0					
				END	
		-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\					
		END
	ELSE
		BEGIN

			PRINT 'Woops! There was an error if it returns a zero (0)'
			RETURN 0			
		END
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>TEMP_Table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>TEMP_Table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#theTempTable is 
/* it is pertinent to mention here that, a temporary table is only accessible to the connection that created that temporary table. 
It is not accessible to other connections. 
However, we can create temporary tables that are accessible to all the open connections. 
Such temporary tables are called global temporary tables. 
The name of the global temporary table starts with a double hash symbol (##). 

*/


-- 1] DELETE TEMP TABLE
IF OBJECT_ID('tempdb..#T1') IS NOT NULL

	DROP TABLE #T1
    
GO

-- 2] POPULATE TEMP TABLE
SELECT 
	(SELECT 'TheCalculation' =  CCNCclaims.dbo.fn_TRIM([LAST_NAME]) +'_'+ CCNCclaims.dbo.fn_TRIM([FIRST_NAME]) +'_'+ CCNCclaims.dbo.fn_TRIM([SSN]))  AS [KEY_1],
	[Facility_Code],
	[Patient_Account_Number],
	[MEDICAID_ID],
INTO #T1
FROM [CCNCclaims].[dbo].[T8_All_Hospitals_Daily_ARCHIVE_t]
WHERE (
		MONTH([Care_Manager_Report_Date])=11
		AND
		YEAR([Care_Manager_Report_Date])=2011
	  )



-- 3] USE THE TEMP TABLE

-- Find the duplicates

SELECT [#T1].[KEY_1], Count([#T1].[KEY_1]) AS NumberOfDups
FROM [#T1]
GROUP BY [#T1].[KEY_1]
HAVING (((Count([#T1].[KEY_1]))&gt;1));


-- 4] Then put results from #T1 into #T2


SELECT *
INTO #T2
FROM (
	SELECT [#T1].[KEY_1], Count([#T1].[KEY_1]) AS NumberOfDups
	FROM [#T1]
	GROUP BY [#T1].[KEY_1]
	HAVING (((Count([#T1].[KEY_1]))&gt;1))
	) AS WHATEVER
	
	
	
--------------------------------------------------

	-- prj_0006_001_v1_UninsuredForPreviousMonthFromAllHospitalsExceptMission_ptq.sql



-- 1] Create the Key: Key_1, and store the data in a temp table: #T1

IF OBJECT_ID('tempdb..#T1') IS NOT NULL

	DROP TABLE #T1
    
--GO

IF OBJECT_ID('tempdb..#T2') IS NOT NULL

	DROP TABLE #T2
    
--GO



SELECT 
	(SELECT 'TheCalculation' =  CCNCclaims.dbo.fn_TRIM([LAST_NAME]) +'_'+ CCNCclaims.dbo.fn_TRIM([FIRST_NAME]) +'_'+ CCNCclaims.dbo.fn_TRIM(ISNULL([SSN],'***')))  AS [KEY_1],
	[Facility_Code],
	[Patient_Account_Number],
	[MEDICAID_ID]


INTO #T1
FROM [CCNCclaims].[dbo].[T8_All_Hospitals_Daily_ARCHIVE_t]
WHERE (
		MONTH([Care_Manager_Report_Date])=11
		AND
		YEAR([Care_Manager_Report_Date])=2011
		AND
		CCNCclaims.dbo.fn_TRIM([Facility_Code]) &lt;&gt; 'MIS'
		AND
		CCNCclaims.dbo.fn_TRIM([Patient_Type]) = 'ER'
		AND
		[MEDICAID_ID] IS NULL
	  )


-- 2]  Find the duplicates

SELECT *
INTO #T2
FROM (
	SELECT [#T1].[KEY_1], Count([#T1].[KEY_1]) AS NumberOfDups
	FROM [#T1]
	GROUP BY [#T1].[KEY_1]
	HAVING (((Count([#T1].[KEY_1]))&gt;1))
	) AS WHATEVER
	




/****** START Delete/Create table to store results ******/

IF OBJECT_ID('CCNCclaims.dbo.JUNK_prj_0006_TEMP_1_t') IS NOT NULL
    DROP TABLE CCNCclaims.dbo.JUNK_prj_0006_TEMP_1_t


SET ANSI_NULLS ON
GO


/****** END Delete/Create table to store results ******/


-- 3] Combine the duplicates back with the original data
--	  And then persist them into the Table that was just deleted

SELECT 
	[#T1].[KEY_1], 
	[#T1].[Facility_Code], 
	[#T1].[Patient_Account_Number], 
	[#T1].[MEDICAID_ID], 

INTO [CCNCclaims].[dbo].[JUNK_prj_0006_TEMP_1_t]
FROM 
	(
		[#T2]
		INNER JOIN [#T1] 
		ON [#T2].[KEY_1] = [#T1].[KEY_1]
	)
WHERE (
		([#T2].NumberOfDups)&gt;=2
	   )
ORDER BY [#T1].[KEY_1];</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Transaction</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>A_Child_SP_with_Transaction</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Transaction</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>A_Child_SP_with_Transaction</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>////// I have not actually tested the failure of this transaction
////// This is the child SP with a transaction
////// 	If it succeeds it returns a 0, otherwise a 1

-- prj_1027_SP_025_Add_T22FK_for_all_Employees_and_T26FK_ForNewPayCheck_GivenT26PK_To_LNK04.sql

-----------------------------------------
/*
-- This SP:
	1] Should be executed in SP: prj_1027_SP_024_Add_PayCheck_To_T26_andCombinedWithEmployee_into_LNK04_v0.sql
	2] Will Get a list of all the T22_PK, corresponding to Employees (bActive=True) at the moment the PayCheck is added to the Database
		use prj_1027_vw_502 to get bActive
	4] Insert the T22_FK, and T26_FK, from the new PayCheck, into LNK04 
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 8/20/2013
	By: glenn garson
	************************************************************************************

*/
SET NOCOUNT ON
use DB2_CRM
go

alter PROCEDURE prj_1027_SP_025_Add_T22FK_for_all_Employees_and_T26FK_ForNewPayCheck_GivenT26PK_To_LNK04(
	@T26_PK_ForNewPayCheck INT
	)
	AS
	
	-- START DEBUGGING SECTION -------------------	
	
	PRINT 'Input @T26_PK_ForNewPayCheck: [' + 	 CAST(@T26_PK_ForNewPayCheck AS varchar(5)) + ']'	

-- END DEBUGGING SECTION -------------------	
	
		
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
--1] Get the T22_PK for all the employees in T22_CCWNC_Employee_AccountingPortal	
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	-- ********************************************************************************
	-- Start a transaction, if any code fails then we back out everything
	-- ********************************************************************************
	BEGIN TRANSACTION LoadEmployeesForNewPayrollDate	
	
;	
		WITH CTE_ONE_ActiveEmployees (T22_FK)
		AS
			(
				select DISTINCT
					T22_PK
				From prj_1027_vw_502_CCWNC_FundingAllocation
				Where bActiveEmployee=1
			),	
		CTE_TWO (T22_FK, T26_FK)
		AS
			(
				select 
					T22_FK,
					@T26_PK_ForNewPayCheck as T26_FK		
				From CTE_ONE_ActiveEmployees
			)	


		Insert [dbo].[LNK04_T22_T26_Employee_Payrolls]
			(
				T22_FK,
				T26_FK
			)
		SELECT
			T22_FK,
			T26_FK
		FROM CTE_TWO
		
	IF @@ERROR &lt;&gt; 0
		BEGIN
			--
			-- Rollback the transaction and return to the caller
			--
			ROLLBACK TRANSACTION LoadEmployeesForNewPayrollDate
			--RAISERROR('Loading employees for the new payroll date to LNK04 failed (prj_1027_SP_025)',18,1)
			RETURN 1 		-- let 0 = Continue, and 1 = Do Not Continue
		END
	ELSE
		BEGIN
			-- ********************************************************************************
			-- Finnish a transaction
			-- ********************************************************************************		
			COMMIT TRANSACTION LoadEmployeesForNewPayrollDate
			RETURN 0	-- let 0 = Continue, and 1 = Do Not Continue
		END
		
			</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Transaction</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>A_Parent_SP_with_Transaction</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Transaction</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>A_Parent_SP_with_Transaction</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>//////The parent has a transaction it in, if it fails it returns '0', otherwise it proceeds
//////Then it calls the child in an EXEC statement



--prj_1027_SP_024_Add_PayCheck_To_T26_andCombinedWithEmployee_into_LNK04_v0.sql
-----------------------------------------
-- This SP will:
--		INSERT INTO T26 one PayCheck record, and return the IDENT_CURRENT for the new record
--		It will also insert a record for every employee combined with this new PayCheck into LNK04
--		runs a SP to Populate LNK04: prj_1027_SP_025_Add_T22FK_for_all_Employees_and_T26FK_ForNewPayCheck_GivenT26PK_To_LNK04
/*
	************************************************************************************
	Created: 8/20/2013
	By: glenn garson
	************************************************************************************

*/

SET NOCOUNT ON
Use DB2_CRM
go

alter PROCEDURE prj_1027_SP_024_Add_PayCheck_To_T26_andCombinedWithEmployee_into_LNK04(
	@Date_Paycheck AS date,
	@Date_PayPeriod_START AS date,
	@Date_PayPeriod_END AS date,
	@Date_UserAccessToTimeCard_START AS date,
	@Date_UserAccessToTimeCard_END AS date,
	@T26_NOTE AS nvarchar(max)
	)
	
	
	AS
	
-- START DEBUGGING SECTION -------------------	
	
			--PRINT '1) Input @NameOfPayCheck: ' + 	 @NameOfPayCheck
			--PRINT '2)Input @T26_PayChecks_Notes: ' +  @T26_PayChecks_Notes
			--PRINT '3)Input @DefaultCompanyPolicy_e27: ' + 	 	CAST(@DefaultCompanyPolicy_e27 AS varchar(5))
															
-- END DEBUGGING SECTION -------------------	
	

-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Declare variables used internally in the Stored Procedure, and set intial values:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	DECLARE @Continue INT
	DECLARE @T26_FK INT
	SELECT @T26_FK = NULL
	SELECT @Continue = 1	-- let 0 = Continue, and 1 = Do Not Continue

-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 1] INSERT INTO
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	-- ********************************************************************************
	-- Start a transaction, if any code fails then we back out everything
	-- ********************************************************************************
	BEGIN TRANSACTION NewPayrollDate

			INSERT INTO T26_Payroll_Dates
									(
										[Date_Paycheck],
										[Date_PayPeriod_START],
										[Date_PayPeriod_END],
										[Date_UserAccessToTimeCard_START],
										[Date_UserAccessToTimeCard_END],
										[T26_NOTE]											

									)
			VALUES
					(
						@Date_Paycheck,
						@Date_PayPeriod_START,
						@Date_PayPeriod_END,
						@Date_UserAccessToTimeCard_START,
						@Date_UserAccessToTimeCard_END,
						@T26_NOTE
					
					);

	-- ********************************************************************************
	-- Check for Errors
	-- ********************************************************************************
	IF @@ERROR &lt;&gt; 0
		BEGIN
		--
		-- Rollback the transaction and return to the caller
		--
		ROLLBACK TRANSACTION NewPayrollDate
		--RAISERROR('Insert for for Payroll dates to T26 failed (prj_1027_SP_024)',18,1)
		RETURN 0
		END
	ELSE
		BEGIN
			-- ********************************************************************************
			-- Finnish a transaction
			-- ********************************************************************************		
			COMMIT TRANSACTION NewPayrollDate
			SELECT @T26_FK = @@IDENTITY
		END
				
   
	
		

-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	-- let 0 = Continue, and 1 = Do Not Continue
	EXEC @Continue =  prj_1027_SP_025_Add_T22FK_for_all_Employees_and_T26FK_ForNewPayCheck_GivenT26PK_To_LNK04 @T26_FK
	
	IF (@@ERROR = 0) AND (@Continue=0)
		BEGIN
			RETURN @T26_FK
			PRINT 'Returned the PK for the new T26 record, and the new Traing/employees records were successfully inserted into LNK04'
		END
	ELSE
		BEGIN
			PRINT 'Woops! There was an error when the FK was inserted into T26 if it returns a zero (0)'
			RETURN 0					
		END	
-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\					

	
	

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TRIGGER</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Insert_Update_Example</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TRIGGER</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Insert_Update_Example</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--P:\p_0020_PasswordsDB\SQL\0_CreateTable\Create_Table_T002_Passwords_ALL_v2.sql

USE [d1_IT]
GO

/****** Object:  Table [dbo].[T002_Passwords_ALL]    Script Date: 2/21/2017 1:42:22 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[T002_Passwords_ALL](
	[Audience_Me_IT] [nvarchar](255) NULL,
	[Audience_e01] [int] NULL,
	[UserType_OS_SQL_Application] [nvarchar](255) NULL,
	[UserType_e02] [int] NULL,
	[UserName] [nvarchar](255) NULL,
	[password] [nvarchar](255) NULL,
	[Application] [nvarchar](255) NULL,
	[OS_user_type] [nvarchar](255) NULL,
	[OS_User_Type_e03] [int] NULL,
	[Computer_for_UserName] [nvarchar](255) NULL,
	[Notes] [nvarchar](255) NULL,
	[T002_PK] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [T002_Passwords_ALL_$_T002_PK] PRIMARY KEY CLUSTERED 
(
	[T002_PK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[T002_Passwords_ALL]  WITH CHECK ADD  CONSTRAINT [T002_Passwords_ALL_$_Audience_e01_$enum$_T002_enum_01_Value] FOREIGN KEY([Audience_e01])
REFERENCES [dbo].[T002_enum_01] ([T002_enum_01_Value])
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] CHECK CONSTRAINT [T002_Passwords_ALL_$_Audience_e01_$enum$_T002_enum_01_Value]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL]  WITH CHECK ADD  CONSTRAINT [T002_Passwords_ALL_$_OS_User_Type_e03_$enum$_T002_enum_03_Value] FOREIGN KEY([OS_User_Type_e03])
REFERENCES [dbo].[T002_enum_03] ([T002_enum_03_Value])
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] CHECK CONSTRAINT [T002_Passwords_ALL_$_OS_User_Type_e03_$enum$_T002_enum_03_Value]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL]  WITH CHECK ADD  CONSTRAINT [T002_Passwords_ALL_$_UserType_e02_$enum$_T002_enum_02_Value] FOREIGN KEY([UserType_e02])
REFERENCES [dbo].[T002_enum_02] ([T002_enum_02_Value])
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] CHECK CONSTRAINT [T002_Passwords_ALL_$_UserType_e02_$enum$_T002_enum_02_Value]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] ADD  DEFAULT ((2)) FOR [Audience_e01]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] ADD  DEFAULT ((0)) FOR [UserType_e02]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] ADD  DEFAULT ((4)) FOR [OS_User_Type_e03]
GO


ALTER TABLE [d1_IT].[dbo].[T002_Passwords_ALL]
ADD  
			CreateRecord_dateTime datetime,
			CreateRecord_name sysname,
			UpdateRecord_dateTime datetime,
			UpdateRecord_name sysname;

create trigger TRG_001_recordChanged_T002 on [d1_IT].[dbo].T002_Passwords_ALL
for update
as
begin

    -- nothing to do?
    if (@@rowcount = 0)
      return;

    update d
    set 
       d.UpdateRecord_dateTime = getdate(),
       d.UpdateRecord_name = (coalesce(suser_sname(),'?'))
    from
       [d1_IT].[dbo].T002_Passwords_ALL d join inserted i 
    on 
       d.T002_PK = i.T002_PK;

end
go

-- insert/update dates
alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_ins_date] default (getdate()) for CreateRecord_dateTime;
alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_upd_date] default (getdate()) for UpdateRecord_dateTime;

 insert/update names
alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_ins_name] default (coalesce(suser_sname(),'?')) for CreateRecord_name;

alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_upd_name] default (coalesce(suser_sname(),'?')) for UpdateRecord_name;
go</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Issues with TempDB mdf file ever increasing</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Issues with TempDB mdf file ever increasing</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--How to shrink the tempdb database in SQL Server

--VERY GOOD ARTICLE: https://support.microsoft.com/en-us/kb/307487

--The tempdb size is reset to the last configured size 
--(that is, to the default size, or the last size that was set by using alter database) after each restart. 
--Therefore, unless you have to use different values or obtain immediate respite, 
--you do not have to use any of the procedures that are documented in this article. 
--You can wait for the next restart of the SQL Server service for the size to decrease. 
--Larger tempdb database sizes will not adversely affect the performance of SQL Server.

use tempdb
go
select (size*8) as FileSizeKB from sys.database_files


http://dba.stackexchange.com/questions/56703/issues-with-tempdb-mdf-file-ever-increasing


--Even with no queries running on the database/server tempdb keeps on increasing in size, 
--at first rapidly and then slowly without stopping. I've run many queries to figure out what is running, 
--below is the result of the query below which actually gave me the results I could use.


--Query that returned the result set
SELECT session_id,
       SUM(internal_objects_alloc_page_count)   AS task_internal_objects_alloc_page_count,
       SUM(internal_objects_dealloc_page_count) AS task_internal_objects_dealloc_page_count
FROM   sys.dm_db_task_space_usage
GROUP  BY session_id
HAVING SUM(internal_objects_alloc_page_count) &gt; 0</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Quick_look_for_issues_____WaitTimes_HighPageCounts_Sp_Who2____etc</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Quick_look_for_issues_____WaitTimes_HighPageCounts_Sp_Who2____etc</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Quick_look_for_issues_____WaitTimes_HighPageCounts_Sp_Who2____etc


Sp_who2

/////////////////////////

SELECT
owt.session_id,
owt.exec_context_id,
owt.wait_duration_ms,
er.command,
owt.wait_type,
owt.blocking_session_id
FROM
sys.dm_os_waiting_tasks owt
INNER JOIN sys.dm_exec_sessions es ON 
owt.session_id = es.session_id
INNER JOIN sys.dm_exec_requests er
ON es.session_id = er.session_id
--WHERE es.is_user_process = 1 --and es.session_id = 400
ORDER BY wait_duration_ms desc,	owt.session_id, owt.exec_context_id

/////////////////////////

SELECT session_id,
       SUM(internal_objects_alloc_page_count)   AS task_internal_objects_alloc_page_count,
       SUM(internal_objects_dealloc_page_count) AS task_internal_objects_dealloc_page_count
FROM   sys.dm_db_task_space_usage
GROUP  BY session_id
HAVING SUM(internal_objects_alloc_page_count) &gt; 0 

//////////////////////////

SELECT * FROM sys.dm_os_waiting_tasks
--WHERE wait_type like '%CXPACKET%'
ORDER BY wait_duration_ms desc
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_Blitz____script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_Blitz____script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>IF OBJECT_ID('dbo.sp_Blitz') IS NULL
  EXEC ('CREATE PROCEDURE dbo.sp_Blitz AS RETURN 0;')
GO

ALTER PROCEDURE [dbo].[sp_Blitz]
    @Help TINYINT = 0 ,
    @CheckUserDatabaseObjects TINYINT = 1 ,
    @CheckProcedureCache TINYINT = 0 ,
    @OutputType VARCHAR(20) = 'TABLE' ,
    @OutputProcedureCache TINYINT = 0 ,
    @CheckProcedureCacheFilter VARCHAR(10) = NULL ,
    @CheckServerInfo TINYINT = 0 ,
    @SkipChecksServer NVARCHAR(256) = NULL ,
    @SkipChecksDatabase NVARCHAR(256) = NULL ,
    @SkipChecksSchema NVARCHAR(256) = NULL ,
    @SkipChecksTable NVARCHAR(256) = NULL ,
    @IgnorePrioritiesBelow INT = NULL ,
    @IgnorePrioritiesAbove INT = NULL ,
    @OutputServerName NVARCHAR(256) = NULL ,
    @OutputDatabaseName NVARCHAR(256) = NULL ,
    @OutputSchemaName NVARCHAR(256) = NULL ,
    @OutputTableName NVARCHAR(256) = NULL ,
    @OutputXMLasNVARCHAR TINYINT = 0 ,
    @EmailRecipients VARCHAR(MAX) = NULL ,
    @EmailProfile sysname = NULL ,
    @SummaryMode TINYINT = 0 ,
    @BringThePain TINYINT = 0 ,
    @VersionDate DATETIME = NULL OUTPUT
AS
    SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET @VersionDate = '20161210';
	SET @OutputType = UPPER(@OutputType);

	IF @Help = 1 PRINT '
	/*
	sp_Blitz from http://FirstResponderKit.org
	
	This script checks the health of your SQL Server and gives you a prioritized
	to-do list of the most urgent things you should consider fixing.

	To learn more, visit http://FirstResponderKit.org where you can download new
	versions for free, watch training videos on how it works, get more info on
	the findings, contribute your own code, and more.

	Known limitations of this version:
	 - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.
	 - If a database name has a question mark in it, some tests will fail. Gotta
	   love that unsupported sp_MSforeachdb.
	 - If you have offline databases, sp_Blitz fails the first time you run it,
	   but does work the second time. (Hoo, boy, this will be fun to debug.)
      - @OutputServerName will output QueryPlans as NVARCHAR(MAX) since Microsoft
	    has refused to support XML columns in Linked Server queries. The bug is now
		16 years old! *~ \o/ ~*

	Unknown limitations of this version:
	 - None.  (If we knew them, they would be known. Duh.)

     Changes - for the full list of improvements and fixes in this version, see:
     https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/


	Parameter explanations:

	@CheckUserDatabaseObjects	1=review user databases for triggers, heaps, etc. Takes more time for more databases and objects.
	@CheckServerInfo			1=show server info like CPUs, memory, virtualization
	@CheckProcedureCache		1=top 20-50 resource-intensive cache plans and analyze them for common performance issues.
	@OutputProcedureCache		1=output the top 20-50 resource-intensive plans even if they did not trigger an alarm
	@CheckProcedureCacheFilter	''CPU'' | ''Reads'' | ''Duration'' | ''ExecCount''
	@OutputType					''TABLE''=table | ''COUNT''=row with number found | ''MARKDOWN''=bulleted list | ''SCHEMA''=version and field list | ''NONE'' = none
	@IgnorePrioritiesBelow		50=ignore priorities below 50
	@IgnorePrioritiesAbove		50=ignore priorities above 50
	For the rest of the parameters, see http://www.brentozar.com/blitz/documentation for details.

    MIT License

	Copyright (c) 2016 Brent Ozar Unlimited

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.


	*/'
	ELSE IF @OutputType = 'SCHEMA'
	BEGIN
		SELECT FieldList = '[Priority] TINYINT, [FindingsGroup] VARCHAR(50), [Finding] VARCHAR(200), [DatabaseName] NVARCHAR(128), [URL] VARCHAR(200), [Details] NVARCHAR(4000), [QueryPlan] NVARCHAR(MAX), [QueryPlanFiltered] NVARCHAR(MAX), [CheckID] INT'

	END
	ELSE /* IF @OutputType = 'SCHEMA' */
	BEGIN

		/*
		We start by creating #BlitzResults. It's a temp table that will store all of
		the results from our checks. Throughout the rest of this stored procedure,
		we're running a series of checks looking for dangerous things inside the SQL
		Server. When we find a problem, we insert rows into #BlitzResults. At the
		end, we return these results to the end user.

		#BlitzResults has a CheckID field, but there's no Check table. As we do
		checks, we insert data into this table, and we manually put in the CheckID.
		For a list of checks, visit http://FirstResponderKit.org.
		*/
		DECLARE @StringToExecute NVARCHAR(4000)
			,@curr_tracefilename NVARCHAR(500)
			,@base_tracefilename NVARCHAR(500)
			,@indx int
			,@query_result_separator CHAR(1)
			,@EmailSubject NVARCHAR(255)
			,@EmailBody NVARCHAR(MAX)
			,@EmailAttachmentFilename NVARCHAR(255)
			,@ProductVersion NVARCHAR(128)
			,@ProductVersionMajor DECIMAL(10,2)
			,@ProductVersionMinor DECIMAL(10,2)
			,@CurrentName NVARCHAR(128)
			,@CurrentDefaultValue NVARCHAR(200)
			,@CurrentCheckID INT
			,@CurrentPriority INT
			,@CurrentFinding VARCHAR(200)
			,@CurrentURL VARCHAR(200)
			,@CurrentDetails NVARCHAR(4000)
			,@MsSinceWaitsCleared DECIMAL(38,0)
			,@CpuMsSinceWaitsCleared DECIMAL(38,0)
			,@ResultText NVARCHAR(MAX)
			,@crlf NVARCHAR(2)
			,@Processors int
			,@NUMANodes int
			,@MinServerMemory bigint
			,@MaxServerMemory bigint
			,@ColumnStoreIndexesInUse bit;


		SET @crlf = NCHAR(13) + NCHAR(10);
		SET @ResultText = 'sp_Blitz Results: ' + @crlf;
		
		IF OBJECT_ID('tempdb..#BlitzResults') IS NOT NULL
			DROP TABLE #BlitzResults;
		CREATE TABLE #BlitzResults
			(
			  ID INT IDENTITY(1, 1) ,
			  CheckID INT ,
			  DatabaseName NVARCHAR(128) ,
			  Priority TINYINT ,
			  FindingsGroup VARCHAR(50) ,
			  Finding VARCHAR(200) ,
			  URL VARCHAR(200) ,
			  Details NVARCHAR(4000) ,
			  QueryPlan [XML] NULL ,
			  QueryPlanFiltered [NVARCHAR](MAX) NULL
			);

		IF OBJECT_ID('tempdb..#TemporaryDatabaseResults') IS NOT NULL
			DROP TABLE #TemporaryDatabaseResults;
		CREATE TABLE #TemporaryDatabaseResults
			(
			  DatabaseName NVARCHAR(128) ,
			  Finding NVARCHAR(128)
			);

		/*
		You can build your own table with a list of checks to skip. For example, you
		might have some databases that you don't care about, or some checks you don't
		want to run. Then, when you run sp_Blitz, you can specify these parameters:
		@SkipChecksDatabase = 'DBAtools',
		@SkipChecksSchema = 'dbo',
		@SkipChecksTable = 'BlitzChecksToSkip'
		Pass in the database, schema, and table that contains the list of checks you
		want to skip. This part of the code checks those parameters, gets the list,
		and then saves those in a temp table. As we run each check, we'll see if we
		need to skip it.

		Really anal-retentive users will note that the @SkipChecksServer parameter is
		not used. YET. We added that parameter in so that we could avoid changing the
		stored proc's surface area (interface) later.
		*/
		IF OBJECT_ID('tempdb..#SkipChecks') IS NOT NULL
			DROP TABLE #SkipChecks;
		CREATE TABLE #SkipChecks
			(
			  DatabaseName NVARCHAR(128) ,
			  CheckID INT ,
			  ServerName NVARCHAR(128)
			);
		CREATE CLUSTERED INDEX IX_CheckID_DatabaseName ON #SkipChecks(CheckID, DatabaseName);

		IF @SkipChecksTable IS NOT NULL
			AND @SkipChecksSchema IS NOT NULL
			AND @SkipChecksDatabase IS NOT NULL
			BEGIN
				SET @StringToExecute = 'INSERT INTO #SkipChecks(DatabaseName, CheckID, ServerName )
				SELECT DISTINCT DatabaseName, CheckID, ServerName
				FROM ' + QUOTENAME(@SkipChecksDatabase) + '.' + QUOTENAME(@SkipChecksSchema) + '.' + QUOTENAME(@SkipChecksTable)
					+ ' WHERE ServerName IS NULL OR ServerName = SERVERPROPERTY(''ServerName'');'
				EXEC(@StringToExecute)
			END

		IF NOT EXISTS ( SELECT  1
							FROM    #SkipChecks
							WHERE   DatabaseName IS NULL AND CheckID = 106 )
							AND (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1
			BEGIN
					select @curr_tracefilename = [path] from sys.traces where is_default = 1 ;
					set @curr_tracefilename = reverse(@curr_tracefilename);
					select @indx = patindex('%\%', @curr_tracefilename) ;
					set @curr_tracefilename = reverse(@curr_tracefilename) ;
					set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + '\log.trc' ;
			END

		/* If the server has any databases on Antiques Roadshow, skip the checks that would break due to CTEs. */
		IF @CheckUserDatabaseObjects = 1 AND EXISTS(SELECT * FROM sys.databases WHERE compatibility_level &lt; 90)
		BEGIN
			SET @CheckUserDatabaseObjects = 0;
			PRINT 'Databases with compatibility level &lt; 90 found, so setting @CheckUserDatabaseObjects = 0.';
			PRINT 'The database-level checks rely on CTEs, which are not supported in SQL 2000 compat level databases.';
			PRINT 'Get with the cool kids and switch to a current compatibility level, Grandpa. To find the problems, run:';
			PRINT 'SELECT * FROM sys.databases WHERE compatibility_level &lt; 90;';
		END


			/* If the server is Amazon RDS, skip checks that it doesn't allow */
		IF LEFT(CAST(SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'
		   AND LEFT(CAST(SERVERPROPERTY('MachineName') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'
		   AND LEFT(CAST(SERVERPROPERTY('ServerName') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'
			BEGIN
						INSERT INTO #SkipChecks (CheckID) VALUES (6);
						INSERT INTO #SkipChecks (CheckID) VALUES (29);
						INSERT INTO #SkipChecks (CheckID) VALUES (30);
						INSERT INTO #SkipChecks (CheckID) VALUES (31);
						INSERT INTO #SkipChecks (CheckID) VALUES (40); /* TempDB only has one data file */
						INSERT INTO #SkipChecks (CheckID) VALUES (57);
						INSERT INTO #SkipChecks (CheckID) VALUES (59);
						INSERT INTO #SkipChecks (CheckID) VALUES (61);
						INSERT INTO #SkipChecks (CheckID) VALUES (62);
						INSERT INTO #SkipChecks (CheckID) VALUES (68);
						INSERT INTO #SkipChecks (CheckID) VALUES (69);
						INSERT INTO #SkipChecks (CheckID) VALUES (73);
						INSERT INTO #SkipChecks (CheckID) VALUES (79);
						INSERT INTO #SkipChecks (CheckID) VALUES (92);
						INSERT INTO #SkipChecks (CheckID) VALUES (94);
						INSERT INTO #SkipChecks (CheckID) VALUES (96);
						INSERT INTO #SkipChecks (CheckID) VALUES (98);
						INSERT INTO #SkipChecks (CheckID) VALUES (100); /* Remote DAC disabled */
						INSERT INTO #SkipChecks (CheckID) VALUES (123);
						INSERT INTO #SkipChecks (CheckID) VALUES (177);
						INSERT INTO #SkipChecks (CheckID) VALUES (180); /* 180/181 are maintenance plans */
						INSERT INTO #SkipChecks (CheckID) VALUES (181);
			END /* Amazon RDS skipped checks */



		/*
		That's the end of the SkipChecks stuff.
		The next several tables are used by various checks later.
		*/
		IF OBJECT_ID('tempdb..#ConfigurationDefaults') IS NOT NULL
			DROP TABLE #ConfigurationDefaults;
		CREATE TABLE #ConfigurationDefaults
			(
			  name NVARCHAR(128) ,
			  DefaultValue BIGINT,
			  CheckID INT
			);

        IF OBJECT_ID ('tempdb..#Recompile') IS NOT NULL 
            DROP TABLE #Recompile; 
        CREATE TABLE #Recompile( 
            DBName varchar(200), 
            ProcName varchar(300), 
            RecompileFlag varchar(1),
            SPSchema varchar(50)
        );

		IF OBJECT_ID('tempdb..#DatabaseDefaults') IS NOT NULL
			DROP TABLE #DatabaseDefaults;
		CREATE TABLE #DatabaseDefaults
			(
				name NVARCHAR(128) ,
				DefaultValue NVARCHAR(200),
				CheckID INT,
		        Priority INT,
		        Finding VARCHAR(200),
		        URL VARCHAR(200),
		        Details NVARCHAR(4000)
			);

		IF OBJECT_ID('tempdb..#DatabaseScopedConfigurationDefaults') IS NOT NULL
			DROP TABLE #DatabaseScopedConfigurationDefaults;
		CREATE TABLE #DatabaseScopedConfigurationDefaults
			(ID INT IDENTITY(1,1), configuration_id INT, [name] NVARCHAR(60), default_value sql_variant, default_value_for_secondary sql_variant, CheckID INT, );



		IF OBJECT_ID('tempdb..#DBCCs') IS NOT NULL
			DROP TABLE #DBCCs;
		CREATE TABLE #DBCCs
			(
			  ID INT IDENTITY(1, 1)
					 PRIMARY KEY ,
			  ParentObject VARCHAR(255) ,
			  Object VARCHAR(255) ,
			  Field VARCHAR(255) ,
			  Value VARCHAR(255) ,
			  DbName NVARCHAR(128) NULL
			)


		IF OBJECT_ID('tempdb..#LogInfo2012') IS NOT NULL
			DROP TABLE #LogInfo2012;
		CREATE TABLE #LogInfo2012
			(
			  recoveryunitid INT ,
			  FileID SMALLINT ,
			  FileSize BIGINT ,
			  StartOffset BIGINT ,
			  FSeqNo BIGINT ,
			  [Status] TINYINT ,
			  Parity TINYINT ,
			  CreateLSN NUMERIC(38)
			);

		IF OBJECT_ID('tempdb..#LogInfo') IS NOT NULL
			DROP TABLE #LogInfo;
		CREATE TABLE #LogInfo
			(
			  FileID SMALLINT ,
			  FileSize BIGINT ,
			  StartOffset BIGINT ,
			  FSeqNo BIGINT ,
			  [Status] TINYINT ,
			  Parity TINYINT ,
			  CreateLSN NUMERIC(38)
			);

		IF OBJECT_ID('tempdb..#partdb') IS NOT NULL
			DROP TABLE #partdb;
		CREATE TABLE #partdb
			(
			  dbname NVARCHAR(128) ,
			  objectname NVARCHAR(200) ,
			  type_desc NVARCHAR(128)
			)

		IF OBJECT_ID('tempdb..#TraceStatus') IS NOT NULL
			DROP TABLE #TraceStatus;
		CREATE TABLE #TraceStatus
			(
			  TraceFlag VARCHAR(10) ,
			  status BIT ,
			  Global BIT ,
			  Session BIT
			);

		IF OBJECT_ID('tempdb..#driveInfo') IS NOT NULL
			DROP TABLE #driveInfo;
		CREATE TABLE #driveInfo
			(
			  drive NVARCHAR ,
			  SIZE DECIMAL(18, 2)
			)


		IF OBJECT_ID('tempdb..#dm_exec_query_stats') IS NOT NULL
			DROP TABLE #dm_exec_query_stats;
		CREATE TABLE #dm_exec_query_stats
			(
			  [id] [int] NOT NULL
						 IDENTITY(1, 1) ,
			  [sql_handle] [varbinary](64) NOT NULL ,
			  [statement_start_offset] [int] NOT NULL ,
			  [statement_end_offset] [int] NOT NULL ,
			  [plan_generation_num] [bigint] NOT NULL ,
			  [plan_handle] [varbinary](64) NOT NULL ,
			  [creation_time] [datetime] NOT NULL ,
			  [last_execution_time] [datetime] NOT NULL ,
			  [execution_count] [bigint] NOT NULL ,
			  [total_worker_time] [bigint] NOT NULL ,
			  [last_worker_time] [bigint] NOT NULL ,
			  [min_worker_time] [bigint] NOT NULL ,
			  [max_worker_time] [bigint] NOT NULL ,
			  [total_physical_reads] [bigint] NOT NULL ,
			  [last_physical_reads] [bigint] NOT NULL ,
			  [min_physical_reads] [bigint] NOT NULL ,
			  [max_physical_reads] [bigint] NOT NULL ,
			  [total_logical_writes] [bigint] NOT NULL ,
			  [last_logical_writes] [bigint] NOT NULL ,
			  [min_logical_writes] [bigint] NOT NULL ,
			  [max_logical_writes] [bigint] NOT NULL ,
			  [total_logical_reads] [bigint] NOT NULL ,
			  [last_logical_reads] [bigint] NOT NULL ,
			  [min_logical_reads] [bigint] NOT NULL ,
			  [max_logical_reads] [bigint] NOT NULL ,
			  [total_clr_time] [bigint] NOT NULL ,
			  [last_clr_time] [bigint] NOT NULL ,
			  [min_clr_time] [bigint] NOT NULL ,
			  [max_clr_time] [bigint] NOT NULL ,
			  [total_elapsed_time] [bigint] NOT NULL ,
			  [last_elapsed_time] [bigint] NOT NULL ,
			  [min_elapsed_time] [bigint] NOT NULL ,
			  [max_elapsed_time] [bigint] NOT NULL ,
			  [query_hash] [binary](8) NULL ,
			  [query_plan_hash] [binary](8) NULL ,
			  [query_plan] [xml] NULL ,
			  [query_plan_filtered] [nvarchar](MAX) NULL ,
			  [text] [nvarchar](MAX) COLLATE SQL_Latin1_General_CP1_CI_AS
									 NULL ,
			  [text_filtered] [nvarchar](MAX) COLLATE SQL_Latin1_General_CP1_CI_AS
											  NULL
			)

		IF OBJECT_ID('tempdb..#ErrorLog') IS NOT NULL
			DROP TABLE #ErrorLog;
		CREATE TABLE #ErrorLog
			(
			  LogDate DATETIME ,
			  ProcessInfo NVARCHAR(20) ,
			  [Text] NVARCHAR(1000) 
			);

		IF OBJECT_ID('tempdb..#IgnorableWaits') IS NOT NULL
			DROP TABLE #IgnorableWaits;
		CREATE TABLE #IgnorableWaits (wait_type NVARCHAR(60));
		INSERT INTO #IgnorableWaits VALUES ('BROKER_EVENTHANDLER');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_RECEIVE_WAITFOR');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_TASK_STOP');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_TO_FLUSH');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_TRANSMITTER');
		INSERT INTO #IgnorableWaits VALUES ('CHECKPOINT_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('CLR_AUTO_EVENT');
		INSERT INTO #IgnorableWaits VALUES ('CLR_MANUAL_EVENT');
		INSERT INTO #IgnorableWaits VALUES ('CLR_SEMAPHORE');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_DBM_EVENT');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_DBM_MUTEX');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_EVENTS_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_WORKER_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRRORING_CMD');
		INSERT INTO #IgnorableWaits VALUES ('DIRTY_PAGE_POLL');
		INSERT INTO #IgnorableWaits VALUES ('DISPATCHER_QUEUE_SEMAPHORE');
		INSERT INTO #IgnorableWaits VALUES ('FT_IFTS_SCHEDULER_IDLE_WAIT');
		INSERT INTO #IgnorableWaits VALUES ('FT_IFTSHC_MUTEX');
		INSERT INTO #IgnorableWaits VALUES ('HADR_CLUSAPI_CALL');
		INSERT INTO #IgnorableWaits VALUES ('HADR_FILESTREAM_IOMGR_IOCOMPLETION');
		INSERT INTO #IgnorableWaits VALUES ('HADR_LOGCAPTURE_WAIT');
		INSERT INTO #IgnorableWaits VALUES ('HADR_NOTIFICATION_DEQUEUE');
		INSERT INTO #IgnorableWaits VALUES ('HADR_TIMER_TASK');
		INSERT INTO #IgnorableWaits VALUES ('HADR_WORK_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('LAZYWRITER_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('LOGMGR_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('ONDEMAND_TASK_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('PREEMPTIVE_HADR_LEASE_MECHANISM');
		INSERT INTO #IgnorableWaits VALUES ('PREEMPTIVE_SP_SERVER_DIAGNOSTICS');
		INSERT INTO #IgnorableWaits VALUES ('QDS_ASYNC_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('QDS_PERSIST_TASK_MAIN_LOOP_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('QDS_SHUTDOWN_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('REDO_THREAD_PENDING_WORK');
		INSERT INTO #IgnorableWaits VALUES ('REQUEST_FOR_DEADLOCK_SEARCH');
		INSERT INTO #IgnorableWaits VALUES ('SLEEP_SYSTEMTASK');
		INSERT INTO #IgnorableWaits VALUES ('SLEEP_TASK');
		INSERT INTO #IgnorableWaits VALUES ('SP_SERVER_DIAGNOSTICS_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('SQLTRACE_BUFFER_FLUSH');
		INSERT INTO #IgnorableWaits VALUES ('SQLTRACE_INCREMENTAL_FLUSH_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('UCS_SESSION_REGISTRATION');
		INSERT INTO #IgnorableWaits VALUES ('WAIT_XTP_OFFLINE_CKPT_NEW_LOG');
		INSERT INTO #IgnorableWaits VALUES ('WAITFOR');
		INSERT INTO #IgnorableWaits VALUES ('XE_DISPATCHER_WAIT');
		INSERT INTO #IgnorableWaits VALUES ('XE_LIVE_TARGET_TVF');
		INSERT INTO #IgnorableWaits VALUES ('XE_TIMER_EVENT');


        /* Used for the default trace checks. */
        DECLARE @TracePath NVARCHAR(256);
        SELECT @TracePath=CAST(value as NVARCHAR(256))
            FROM sys.fn_trace_getinfo(1)
            WHERE traceid=1 AND property=2;
        
        SELECT @MsSinceWaitsCleared = DATEDIFF(MINUTE, create_date, CURRENT_TIMESTAMP) * 60000.0
            FROM    sys.databases
            WHERE   name='tempdb';

		/* Have they cleared wait stats? Using a 10% fudge factor */
		IF @MsSinceWaitsCleared * .9 &gt; (SELECT wait_time_ms FROM sys.dm_os_wait_stats WHERE wait_type = 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP')
			BEGIN
				SET @MsSinceWaitsCleared = (SELECT wait_time_ms FROM sys.dm_os_wait_stats WHERE wait_type = 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP')
				INSERT  INTO #BlitzResults
						( CheckID ,
							Priority ,
							FindingsGroup ,
							Finding ,
							URL ,
							Details
						)
					VALUES( 185,
								240,
								'Wait Stats',
								'Wait Stats Have Been Cleared',
								'http://BrentOzar.com/go/waits',
								'Someone ran DBCC SQLPERF to clear sys.dm_os_wait_stats at approximately: ' + CONVERT(NVARCHAR(100), DATEADD(ms, (-1 * @MsSinceWaitsCleared), GETDATE()), 120))
			END

		/* @CpuMsSinceWaitsCleared is used for waits stats calculations */
		SELECT @CpuMsSinceWaitsCleared = @MsSinceWaitsCleared * scheduler_count
			FROM sys.dm_os_sys_info;


		/* If we're outputting CSV or Markdown, don't bother checking the plan cache because we cannot export plans. */
		IF @OutputType = 'CSV' OR @OutputType = 'MARKDOWN'
			SET @CheckProcedureCache = 0;

		/* If we're posting a question on Stack, include background info on the server */
		IF @OutputType = 'MARKDOWN'
			SET @CheckServerInfo = 1;


		/* Only run CheckUserDatabaseObjects if there are less than 50 databases. */
		IF @BringThePain = 0 AND 50 &lt;= (SELECT COUNT(*) FROM sys.databases) AND @CheckUserDatabaseObjects = 1
			BEGIN
			SET @CheckUserDatabaseObjects = 0;
			PRINT 'Running sp_Blitz @CheckUserDatabaseObjects = 1 on a server with 50+ databases may cause temporary insanity for the server and/or user.';
			PRINT 'If you''re sure you want to do this, run again with the parameter @BringThePain = 1.';
			END

		/* Sanitize our inputs */
		SELECT
			@OutputServerName = QUOTENAME(@OutputServerName),
			@OutputDatabaseName = QUOTENAME(@OutputDatabaseName),
			@OutputSchemaName = QUOTENAME(@OutputSchemaName),
			@OutputTableName = QUOTENAME(@OutputTableName)

		/* Get the major and minor build numbers */
		SET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));
		SELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1,CHARINDEX('.', @ProductVersion) + 1 ),
			@ProductVersionMinor = PARSENAME(CONVERT(varchar(32), @ProductVersion), 2)
		
		/*
		Whew! we're finally done with the setup, and we can start doing checks.
		First, let's make sure we're actually supposed to do checks on this server.
		The user could have passed in a SkipChecks table that specified to skip ALL
		checks on this server, so let's check for that:
		*/
		IF ( ( SERVERPROPERTY('ServerName') NOT IN ( SELECT ServerName
													 FROM   #SkipChecks
													 WHERE  DatabaseName IS NULL
															AND CheckID IS NULL ) )
			 OR ( @SkipChecksTable IS NULL )
		   )
			BEGIN

				/*
				Our very first check! We'll put more comments in this one just to
				explain exactly how it works. First, we check to see if we're
				supposed to skip CheckID 1 (that's the check we're working on.)
				*/
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 1 )
					BEGIN

						/*
						Below, we check master.sys.databases looking for databases
						that haven't had a backup in the last week. If we find any,
						we insert them into #BlitzResults, the temp table that
						tracks our server's problems. Note that if the check does
						NOT find any problems, we don't save that. We're only
						saving the problems, not the successful checks.
						*/
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  1 AS CheckID ,
										d.[name] AS DatabaseName ,
										1 AS Priority ,
										'Backup' AS FindingsGroup ,
										'Backups Not Performed Recently' AS Finding ,
										'http://BrentOzar.com/go/nobak' AS URL ,
										'Last backed up: '
										+ COALESCE(CAST(MAX(b.backup_finish_date) AS VARCHAR(25)),'never') AS Details
								FROM    master.sys.databases d
										LEFT OUTER JOIN msdb.dbo.backupset b ON d.name COLLATE SQL_Latin1_General_CP1_CI_AS = b.database_name COLLATE SQL_Latin1_General_CP1_CI_AS
																  AND b.type = 'D'
																  AND b.server_name = SERVERPROPERTY('ServerName') /*Backupset ran on current server */
								WHERE   d.database_id &lt;&gt; 2  /* Bonus points if you know what that means */
										AND d.state NOT IN(1, 6, 10) /* Not currently offline or restoring, like log shipping databases */
										AND d.is_in_standby = 0 /* Not a log shipping target database */
										AND d.source_database_id IS NULL /* Excludes database snapshots */
										AND d.name NOT IN ( SELECT DISTINCT
																  DatabaseName
															FROM  #SkipChecks
															WHERE CheckID IS NULL )
										/*
										The above NOT IN filters out the databases we're not supposed to check.
										*/
								GROUP BY d.name
								HAVING  MAX(b.backup_finish_date) &lt;= DATEADD(dd,
																  -7, GETDATE())
                                        OR MAX(b.backup_finish_date) IS NULL;
						/*
						And there you have it. The rest of this stored procedure works the same
						way: it asks:
						- Should I skip this check?
						- If not, do I find problems?
						- Insert the results into #BlitzResults
						*/

					END

				/*
				And that's the end of CheckID #1.

				CheckID #2 is a little simpler because it only involves one query, and it's
				more typical for queries that people contribute. But keep reading, because
				the next check gets more complex again.
				*/

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 2 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
										SELECT DISTINCT
										2 AS CheckID ,
										d.name AS DatabaseName ,
										1 AS Priority ,
										'Backup' AS FindingsGroup ,
										'Full Recovery Mode w/o Log Backups' AS Finding ,
										'http://BrentOzar.com/go/biglogs' AS URL ,
										( 'The ' + CAST(CAST((SELECT ((SUM([mf].[size]) * 8.) / 1024.) FROM sys.[master_files] AS [mf] WHERE [mf].[database_id] = d.[database_id] AND [mf].[type_desc] = 'LOG') AS DECIMAL(18,2)) AS VARCHAR) + 'MB log file has not been backed up in the last week.' ) AS Details
								FROM    master.sys.databases d
								WHERE   d.recovery_model IN ( 1, 2 )
										AND d.database_id NOT IN ( 2, 3 )
										AND d.source_database_id IS NULL
										AND d.state NOT IN(1, 6, 10) /* Not currently offline or restoring, like log shipping databases */
										AND d.is_in_standby = 0 /* Not a log shipping target database */
										AND d.source_database_id IS NULL /* Excludes database snapshots */
										AND d.name NOT IN ( SELECT DISTINCT
																  DatabaseName
															FROM  #SkipChecks
															WHERE CheckID IS NULL )
										AND NOT EXISTS ( SELECT *
														 FROM   msdb.dbo.backupset b
														 WHERE  d.name COLLATE SQL_Latin1_General_CP1_CI_AS = b.database_name COLLATE SQL_Latin1_General_CP1_CI_AS
																AND b.type = 'L'
																AND b.backup_finish_date &gt;= DATEADD(dd,
																  -7, GETDATE()) ); 
					END


				/*
				Next up, we've got CheckID 8. (These don't have to go in order.) This one
				won't work on SQL Server 2005 because it relies on a new DMV that didn't
				exist prior to SQL Server 2008. This means we have to check the SQL Server
				version first, then build a dynamic string with the query we want to run:
				*/

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 8 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID, Priority,
							FindingsGroup,
							Finding, URL,
							Details)
					  SELECT 8 AS CheckID,
					  230 AS Priority,
					  ''Security'' AS FindingsGroup,
					  ''Server Audits Running'' AS Finding,
					  ''http://BrentOzar.com/go/audits'' AS URL,
					  (''SQL Server built-in audit functionality is being used by server audit: '' + [name]) AS Details FROM sys.dm_server_audit_status'
								EXECUTE(@StringToExecute)
							END;
					END

				/*
				But what if you need to run a query in every individual database?
				Hop down to the @CheckUserDatabaseObjects section.
                
				And that's the basic idea! You can read through the rest of the
				checks if you like - some more exciting stuff happens closer to the
				end of the stored proc, where we start doing things like checking
				the plan cache, but those aren't as cleanly commented.

				If you'd like to contribute your own check, use one of the check
				formats shown above and email it to Help@BrentOzar.com. You don't
				have to pick a CheckID or a link - we'll take care of that when we
				test and publish the code. Thanks!
				*/


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 93 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT
										93 AS CheckID ,
										1 AS Priority ,
										'Backup' AS FindingsGroup ,
										'Backing Up to Same Drive Where Databases Reside' AS Finding ,
										'http://BrentOzar.com/go/backup' AS URL ,
										CAST(COUNT(1) AS VARCHAR(50)) + ' backups done on drive '
										+ UPPER(LEFT(bmf.physical_device_name, 3))
										+ ' in the last two weeks, where database files also live. This represents a serious risk if that array fails.' Details
								FROM    msdb.dbo.backupmediafamily AS bmf
										INNER JOIN msdb.dbo.backupset AS bs ON bmf.media_set_id = bs.media_set_id
																  AND bs.backup_start_date &gt;= ( DATEADD(dd,
																  -14, GETDATE()) )
										/* Filter out databases that were recently restored: */
										LEFT OUTER JOIN msdb.dbo.restorehistory rh ON bs.database_name = rh.destination_database_name AND rh.restore_date &gt; DATEADD(dd, -14, GETDATE())
								WHERE   UPPER(LEFT(bmf.physical_device_name COLLATE SQL_Latin1_General_CP1_CI_AS, 3)) IN (
										SELECT DISTINCT
												UPPER(LEFT(mf.physical_name COLLATE SQL_Latin1_General_CP1_CI_AS, 3))
										FROM    sys.master_files AS mf )
										AND rh.destination_database_name IS NULL
								GROUP BY UPPER(LEFT(bmf.physical_device_name, 3))
					END


					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 119 )
						AND EXISTS ( SELECT *
									 FROM   sys.all_objects o
									 WHERE  o.name = 'dm_database_encryption_keys' )
						BEGIN
							SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, DatabaseName, URL, Details)
								SELECT 119 AS CheckID,
								1 AS Priority,
								''Backup'' AS FindingsGroup,
								''TDE Certificate Not Backed Up Recently'' AS Finding,
								db_name(dek.database_id) AS DatabaseName,
								''http://BrentOzar.com/go/tde'' AS URL,
								''The certificate '' + c.name + '' is used to encrypt database '' + db_name(dek.database_id) + ''. Last backup date: '' + COALESCE(CAST(c.pvt_key_last_backup_date AS VARCHAR(100)), ''Never'') AS Details
								FROM sys.certificates c INNER JOIN sys.dm_database_encryption_keys dek ON c.thumbprint = dek.encryptor_thumbprint
								WHERE pvt_key_last_backup_date IS NULL OR pvt_key_last_backup_date &lt;= DATEADD(dd, -30, GETDATE())';
							EXECUTE(@StringToExecute);
						END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 3 )
					BEGIN
						IF DATEADD(dd, -60, GETDATE()) &gt; (SELECT TOP 1 backup_start_date FROM msdb.dbo.backupset ORDER BY 1)
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1
										3 AS CheckID ,
										'msdb' ,
										200 AS Priority ,
										'Backup' AS FindingsGroup ,
										'MSDB Backup History Not Purged' AS Finding ,
										'http://BrentOzar.com/go/history' AS URL ,
										( 'Database backup history retained back to '
										  + CAST(bs.backup_start_date AS VARCHAR(20)) ) AS Details
								FROM    msdb.dbo.backupset bs
								ORDER BY backup_set_id ASC;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 186 )
					BEGIN
						IF DATEADD(dd, -2, GETDATE()) &lt; (SELECT TOP 1 backup_start_date FROM msdb.dbo.backupset ORDER BY 1)
							INSERT  INTO #BlitzResults
									( CheckID ,
									  DatabaseName ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT TOP 1
											186 AS CheckID ,
											'msdb' ,
											200 AS Priority ,
											'Backup' AS FindingsGroup ,
											'MSDB Backup History Purged Too Frequently' AS Finding ,
											'http://BrentOzar.com/go/history' AS URL ,
											( 'Database backup history only retained back to '
											  + CAST(bs.backup_start_date AS VARCHAR(20)) ) AS Details
									FROM    msdb.dbo.backupset bs
									ORDER BY backup_set_id ASC;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 178 )
					AND EXISTS (SELECT *
									FROM msdb.dbo.backupset bs
									WHERE bs.type = 'D'
									AND bs.backup_size &gt;= 50000000000 /* At least 50GB */
									AND DATEDIFF(SECOND, bs.backup_start_date, bs.backup_finish_date) &lt;= 60 /* Backup took less than 60 seconds */
									AND bs.backup_finish_date &gt;= DATEADD(DAY, -14, GETDATE()) /* In the last 2 weeks */)
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT 178 AS CheckID ,
										200 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Snapshot Backups Occurring' AS Finding ,
										'http://BrentOzar.com/go/snaps' AS URL ,
										( CAST(COUNT(*) AS VARCHAR(20)) + ' snapshot-looking backups have occurred in the last two weeks, indicating that IO may be freezing up.') AS Details
								FROM msdb.dbo.backupset bs
								WHERE bs.type = 'D'
								AND bs.backup_size &gt;= 50000000000 /* At least 50GB */
								AND DATEDIFF(SECOND, bs.backup_start_date, bs.backup_finish_date) &lt;= 60 /* Backup took less than 60 seconds */
								AND bs.backup_finish_date &gt;= DATEADD(DAY, -14, GETDATE()) /* In the last 2 weeks */
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 4 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  4 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Sysadmins' AS Finding ,
										'http://BrentOzar.com/go/sa' AS URL ,
										( 'Login [' + l.name
										  + '] is a sysadmin - meaning they can do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' ) AS Details
								FROM    master.sys.syslogins l
								WHERE   l.sysadmin = 1
										AND l.name &lt;&gt; SUSER_SNAME(0x01)
										AND l.denylogin = 0
										AND l.name NOT LIKE 'NT SERVICE\%'
										AND l.name &lt;&gt; 'l_certSignSmDetach'; /* Added in SQL 2016 */
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 5 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  5 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Security Admins' AS Finding ,
										'http://BrentOzar.com/go/sa' AS URL ,
										( 'Login [' + l.name
										  + '] is a security admin - meaning they can give themselves permission to do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' ) AS Details
								FROM    master.sys.syslogins l
								WHERE   l.securityadmin = 1
										AND l.name &lt;&gt; SUSER_SNAME(0x01)
										AND l.denylogin = 0;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 104 )
					BEGIN
						INSERT  INTO #BlitzResults
								( [CheckID] ,
								  [Priority] ,
								  [FindingsGroup] ,
								  [Finding] ,
								  [URL] ,
								  [Details]
								)
								SELECT  104 AS [CheckID] ,
										230 AS [Priority] ,
										'Security' AS [FindingsGroup] ,
										'Login Can Control Server' AS [Finding] ,
										'http://BrentOzar.com/go/sa' AS [URL] ,
										'Login [' + pri.[name]
										+ '] has the CONTROL SERVER permission - meaning they can do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' AS [Details]
								FROM    sys.server_principals AS pri
								WHERE   pri.[principal_id] IN (
										SELECT  p.[grantee_principal_id]
										FROM    sys.server_permissions AS p
										WHERE   p.[state] IN ( 'G', 'W' )
												AND p.[class] = 100
												AND p.[type] = 'CL' )
										AND pri.[name] NOT LIKE '##%##'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 6 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  6 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Jobs Owned By Users' AS Finding ,
										'http://BrentOzar.com/go/owners' AS URL ,
										( 'Job [' + j.name + '] is owned by ['
										  + SUSER_SNAME(j.owner_sid)
										  + '] - meaning if their login is disabled or not available due to Active Directory problems, the job will stop working.' ) AS Details
								FROM    msdb.dbo.sysjobs j
								WHERE   j.enabled = 1
										AND SUSER_SNAME(j.owner_sid) &lt;&gt; SUSER_SNAME(0x01);
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 7 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  7 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Stored Procedure Runs at Startup' AS Finding ,
										'http://BrentOzar.com/go/startup' AS URL ,
										( 'Stored procedure [master].['
										  + r.SPECIFIC_SCHEMA + '].['
										  + r.SPECIFIC_NAME
										  + '] runs automatically when SQL Server starts up.  Make sure you know exactly what this stored procedure is doing, because it could pose a security risk.' ) AS Details
								FROM    master.INFORMATION_SCHEMA.ROUTINES r
								WHERE   OBJECTPROPERTY(OBJECT_ID(ROUTINE_NAME),
													   'ExecIsStartup') = 1;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 10 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 10 AS CheckID,
					  100 AS Priority,
					  ''Performance'' AS FindingsGroup,
					  ''Resource Governor Enabled'' AS Finding,
					  ''http://BrentOzar.com/go/rg'' AS URL,
					  (''Resource Governor is enabled.  Queries may be throttled.  Make sure you understand how the Classifier Function is configured.'') AS Details FROM sys.resource_governor_configuration WHERE is_enabled = 1'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 11 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 11 AS CheckID,
					  100 AS Priority,
					  ''Performance'' AS FindingsGroup,
					  ''Server Triggers Enabled'' AS Finding,
					  ''http://BrentOzar.com/go/logontriggers/'' AS URL,
					  (''Server Trigger ['' + [name] ++ ''] is enabled.  Make sure you understand what that trigger is doing - the less work it does, the better.'') AS Details FROM sys.server_triggers WHERE is_disabled = 0 AND is_ms_shipped = 0'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 12 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  12 AS CheckID ,
										[name] AS DatabaseName ,
										10 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Close Enabled' AS Finding ,
										'http://BrentOzar.com/go/autoclose' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-close enabled.  This setting can dramatically decrease performance.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_close_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 13 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  13 AS CheckID ,
										[name] AS DatabaseName ,
										10 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Shrink Enabled' AS Finding ,
										'http://BrentOzar.com/go/autoshrink' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-shrink enabled.  This setting can dramatically decrease performance.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_shrink_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL);
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 14 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							DatabaseName,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 14 AS CheckID,
					  [name] as DatabaseName,
					  50 AS Priority,
					  ''Reliability'' AS FindingsGroup,
					  ''Page Verification Not Optimal'' AS Finding,
					  ''http://BrentOzar.com/go/torn'' AS URL,
					  (''Database ['' + [name] + ''] has '' + [page_verify_option_desc] + '' for page verification.  SQL Server may have a harder time recognizing and recovering from storage corruption.  Consider using CHECKSUM instead.'') COLLATE database_default AS Details
					  FROM sys.databases
					  WHERE page_verify_option &lt; 2
					  AND name &lt;&gt; ''tempdb''
					  and name not in (select distinct DatabaseName from #SkipChecks)'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 15 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  15 AS CheckID ,
										[name] AS DatabaseName ,
										110 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Create Stats Disabled' AS Finding ,
										'http://BrentOzar.com/go/acs' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-create-stats disabled.  SQL Server uses statistics to build better execution plans, and without the ability to automatically create more, performance may suffer.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_create_stats_on = 0
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 16 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  16 AS CheckID ,
										[name] AS DatabaseName ,
										110 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Update Stats Disabled' AS Finding ,
										'http://BrentOzar.com/go/aus' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-update-stats disabled.  SQL Server uses statistics to build better execution plans, and without the ability to automatically update them, performance may suffer.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_update_stats_on = 0
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 17 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  17 AS CheckID ,
										[name] AS DatabaseName ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Stats Updated Asynchronously' AS Finding ,
										'http://BrentOzar.com/go/asyncstats' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-update-stats-async enabled.  When SQL Server gets a query for a table with out-of-date statistics, it will run the query with the stats it has - while updating stats to make later queries better. The initial run of the query may suffer, though.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_update_stats_async_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 18 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  18 AS CheckID ,
										[name] AS DatabaseName ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Forced Parameterization On' AS Finding ,
										'http://BrentOzar.com/go/forced' AS URL ,
										( 'Database [' + [name]
										  + '] has forced parameterization enabled.  SQL Server will aggressively reuse query execution plans even if the applications do not parameterize their queries.  This can be a performance booster with some programming languages, or it may use universally bad execution plans when better alternatives are available for certain parameters.' ) AS Details
								FROM    sys.databases
								WHERE   is_parameterization_forced = 1
										AND name NOT IN ( SELECT  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 20 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  20 AS CheckID ,
										[name] AS DatabaseName ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Date Correlation On' AS Finding ,
										'http://BrentOzar.com/go/corr' AS URL ,
										( 'Database [' + [name]
										  + '] has date correlation enabled.  This is not a default setting, and it has some performance overhead.  It tells SQL Server that date fields in two tables are related, and SQL Server maintains statistics showing that relation.' ) AS Details
								FROM    sys.databases
								WHERE   is_date_correlation_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 21 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							DatabaseName,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 21 AS CheckID,
					  [name] as DatabaseName,
					  200 AS Priority,
					  ''Informational'' AS FindingsGroup,
					  ''Database Encrypted'' AS Finding,
					  ''http://BrentOzar.com/go/tde'' AS URL,
					  (''Database ['' + [name] + ''] has Transparent Data Encryption enabled.  Make absolutely sure you have backed up the certificate and private key, or else you will not be able to restore this database.'') AS Details
					  FROM sys.databases
					  WHERE is_encrypted = 1
					  and name not in (select distinct DatabaseName from #SkipChecks)'
								EXECUTE(@StringToExecute)
							END;
					END

				/*
				Believe it or not, SQL Server doesn't track the default values
				for sp_configure options! We'll make our own list here.
				*/
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'access check cache bucket count', 0, 1001 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'access check cache quota', 0, 1002 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Ad Hoc Distributed Queries', 0, 1003 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity I/O mask', 0, 1004 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity mask', 0, 1005 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity64 mask', 0, 1066 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity64 I/O mask', 0, 1067 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Agent XPs', 0, 1071 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'allow updates', 0, 1007 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'awe enabled', 0, 1008 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'backup checksum default', 0, 1070 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'backup compression default', 0, 1073 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'blocked process threshold', 0, 1009 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'blocked process threshold (s)', 0, 1009 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'c2 audit mode', 0, 1010 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'clr enabled', 0, 1011 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'common criteria compliance enabled', 0, 1074 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'contained database authentication', 0, 1068 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'cost threshold for parallelism', 5, 1012 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'cross db ownership chaining', 0, 1013 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'cursor threshold', -1, 1014 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Database Mail XPs', 0, 1072 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'default full-text language', 1033, 1016 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'default language', 0, 1017 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'default trace enabled', 1, 1018 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'disallow results from triggers', 0, 1019 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'EKM provider enabled', 0, 1075 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'filestream access level', 0, 1076 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'fill factor (%)', 0, 1020 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft crawl bandwidth (max)', 100, 1021 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft crawl bandwidth (min)', 0, 1022 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft notify bandwidth (max)', 100, 1023 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft notify bandwidth (min)', 0, 1024 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'index create memory (KB)', 0, 1025 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'in-doubt xact resolution', 0, 1026 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'lightweight pooling', 0, 1027 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'locks', 0, 1028 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max degree of parallelism', 0, 1029 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max full-text crawl range', 4, 1030 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max server memory (MB)', 2147483647, 1031 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max text repl size (B)', 65536, 1032 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max worker threads', 0, 1033 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'media retention', 0, 1034 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'min memory per query (KB)', 1024, 1035 );
				/* Accepting both 0 and 16 below because both have been seen in the wild as defaults. */
				IF EXISTS ( SELECT  *
							FROM    sys.configurations
							WHERE   name = 'min server memory (MB)'
									AND value_in_use IN ( 0, 16 ) )
					INSERT  INTO #ConfigurationDefaults
							SELECT  'min server memory (MB)' ,
									CAST(value_in_use AS BIGINT), 1036
							FROM    sys.configurations
							WHERE   name = 'min server memory (MB)'
				ELSE
					INSERT  INTO #ConfigurationDefaults
					VALUES  ( 'min server memory (MB)', 0, 1036 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'nested triggers', 1, 1037 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'network packet size (B)', 4096, 1038 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Ole Automation Procedures', 0, 1039 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'open objects', 0, 1040 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'optimize for ad hoc workloads', 0, 1041 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'PH timeout (s)', 60, 1042 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'precompute rank', 0, 1043 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'priority boost', 0, 1044 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'query governor cost limit', 0, 1045 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'query wait (s)', -1, 1046 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'recovery interval (min)', 0, 1047 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote access', 1, 1048 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote admin connections', 0, 1049 );
				/* SQL Server 2012 changes a configuration default */
				IF @@VERSION LIKE '%Microsoft SQL Server 2005%'
					OR @@VERSION LIKE '%Microsoft SQL Server 2008%'
					BEGIN
						INSERT  INTO #ConfigurationDefaults
						VALUES  ( 'remote login timeout (s)', 20, 1069 );
					END
				ELSE
					BEGIN
						INSERT  INTO #ConfigurationDefaults
						VALUES  ( 'remote login timeout (s)', 10, 1069 );
					END
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote proc trans', 0, 1050 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote query timeout (s)', 600, 1051 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Replication XPs', 0, 1052 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'RPC parameter data validation', 0, 1053 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'scan for startup procs', 0, 1054 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'server trigger recursion', 1, 1055 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'set working set size', 0, 1056 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'show advanced options', 0, 1057 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'SMO and DMO XPs', 1, 1058 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'SQL Mail XPs', 0, 1059 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'transform noise words', 0, 1060 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'two digit year cutoff', 2049, 1061 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'user connections', 0, 1062 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'user options', 0, 1063 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Web Assistant Procedures', 0, 1064 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'xp_cmdshell', 0, 1065 );


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 22 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  cd.CheckID ,
										200 AS Priority ,
										'Non-Default Server Config' AS FindingsGroup ,
										cr.name AS Finding ,
										'http://BrentOzar.com/go/conf' AS URL ,
										( 'This sp_configure option has been changed.  Its default value is '
										  + COALESCE(CAST(cd.[DefaultValue] AS VARCHAR(100)),
													 '(unknown)')
										  + ' and it has been set to '
										  + CAST(cr.value_in_use AS VARCHAR(100))
										  + '.' ) AS Details
								FROM    sys.configurations cr
										INNER JOIN #ConfigurationDefaults cd ON cd.name = cr.name
										LEFT OUTER JOIN #ConfigurationDefaults cdUsed ON cdUsed.name = cr.name
																  AND cdUsed.DefaultValue = cr.value_in_use
								WHERE   cdUsed.name IS NULL;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 190 )
					BEGIN
						SELECT @MinServerMemory = CAST(value_in_use as BIGINT) FROM sys.configurations WHERE name = 'min server memory (MB)'
						SELECT @MaxServerMemory = CAST(value_in_use as BIGINT) FROM sys.configurations WHERE name = 'max server memory (MB)'
						
						IF (@MinServerMemory = @MaxServerMemory)
						BEGIN
						INSERT INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								VALUES  
									(	190,
										200,
										'Performance',
										'Non-Dynamic Memory',
										'http://BrentOzar.com/go/memory',
										'Minimum Server Memory setting is the same as the Maximum (both set to ' + CAST(@MinServerMemory AS NVARCHAR(50)) + '). This will not allow dynamic memory. Please revise memory settings'
									)
						END
					END
					
					IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 188 )
					BEGIN

						/* Let's set variables so that our query is still SARGable */
						SET @Processors = (SELECT cpu_count FROM sys.dm_os_sys_info)
						SET @NUMANodes = (SELECT COUNT(1)
											FROM sys.dm_os_performance_counters pc
											WHERE pc.object_name LIKE '%Buffer Node%'
												AND counter_name = 'Page life expectancy')
						/* If Cost Threshold for Parallelism is default then flag as a potential issue */
						/* If MAXDOP is default and processors &gt; 8 or NUMA nodes &gt; 1 then flag as potential issue */
						INSERT INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  188 AS CheckID ,
										200 AS Priority ,
										'Performance' AS FindingsGroup ,
										cr.name AS Finding ,
										'http://BrentOzar.com/go/cxpacket' AS URL ,
										( 'Set to ' + CAST(cr.value_in_use AS NVARCHAR(50)) + ', its default value. Changing this sp_configure setting may reduce CXPACKET waits.')
								FROM    sys.configurations cr
										INNER JOIN #ConfigurationDefaults cd ON cd.name = cr.name
											AND cr.value_in_use = cd.DefaultValue
								WHERE   cr.name = 'cost threshold for parallelism'
									OR (cr.name = 'max degree of parallelism' AND (@NUMANodes &gt; 1 OR @Processors &gt; 8));
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 24 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										24 AS CheckID ,
										DB_NAME(database_id) AS DatabaseName ,
										170 AS Priority ,
										'File Configuration' AS FindingsGroup ,
										'System Database on C Drive' AS Finding ,
										'http://BrentOzar.com/go/cdrive' AS URL ,
										( 'The ' + DB_NAME(database_id)
										  + ' database has a file on the C drive.  Putting system databases on the C drive runs the risk of crashing the server when it runs out of space.' ) AS Details
								FROM    sys.master_files
								WHERE   UPPER(LEFT(physical_name, 1)) = 'C'
										AND DB_NAME(database_id) IN ( 'master',
																  'model', 'msdb' );
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 25 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1
										25 AS CheckID ,
										'tempdb' ,
										20 AS Priority ,
										'File Configuration' AS FindingsGroup ,
										'TempDB on C Drive' AS Finding ,
										'http://BrentOzar.com/go/cdrive' AS URL ,
										CASE WHEN growth &gt; 0
											 THEN ( 'The tempdb database has files on the C drive.  TempDB frequently grows unpredictably, putting your server at risk of running out of C drive space and crashing hard.  C is also often much slower than other drives, so performance may be suffering.' )
											 ELSE ( 'The tempdb database has files on the C drive.  TempDB is not set to Autogrow, hopefully it is big enough.  C is also often much slower than other drives, so performance may be suffering.' )
										END AS Details
								FROM    sys.master_files
								WHERE   UPPER(LEFT(physical_name, 1)) = 'C'
										AND DB_NAME(database_id) = 'tempdb';
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 26 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										26 AS CheckID ,
										DB_NAME(database_id) AS DatabaseName ,
										20 AS Priority ,
										'Reliability' AS FindingsGroup ,
										'User Databases on C Drive' AS Finding ,
										'http://BrentOzar.com/go/cdrive' AS URL ,
										( 'The ' + DB_NAME(database_id)
										  + ' database has a file on the C drive.  Putting databases on the C drive runs the risk of crashing the server when it runs out of space.' ) AS Details
								FROM    sys.master_files
								WHERE   UPPER(LEFT(physical_name, 1)) = 'C'
										AND DB_NAME(database_id) NOT IN ( 'master',
																  'model', 'msdb',
																  'tempdb' )
										AND DB_NAME(database_id) NOT IN (
										SELECT DISTINCT
												DatabaseName
										FROM    #SkipChecks )
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 27 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  27 AS CheckID ,
										'master' AS DatabaseName ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Tables in the Master Database' AS Finding ,
										'http://BrentOzar.com/go/mastuser' AS URL ,
										( 'The ' + name
										  + ' table in the master database was created by end users on '
										  + CAST(create_date AS VARCHAR(20))
										  + '. Tables in the master database may not be restored in the event of a disaster.' ) AS Details
								FROM    master.sys.tables
								WHERE   is_ms_shipped = 0;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 28 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  28 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Tables in the MSDB Database' AS Finding ,
										'http://BrentOzar.com/go/msdbuser' AS URL ,
										( 'The ' + name
										  + ' table in the msdb database was created by end users on '
										  + CAST(create_date AS VARCHAR(20))
										  + '. Tables in the msdb database may not be restored in the event of a disaster.' ) AS Details
								FROM    msdb.sys.tables
								WHERE   is_ms_shipped = 0 AND name NOT LIKE '%DTA_%';
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 29 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  29 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Tables in the Model Database' AS Finding ,
										'http://BrentOzar.com/go/model' AS URL ,
										( 'The ' + name
										  + ' table in the model database was created by end users on '
										  + CAST(create_date AS VARCHAR(20))
										  + '. Tables in the model database are automatically copied into all new databases.' ) AS Details
								FROM    model.sys.tables
								WHERE   is_ms_shipped = 0;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 30 )
					BEGIN
						IF ( SELECT COUNT(*)
							 FROM   msdb.dbo.sysalerts
							 WHERE  severity BETWEEN 19 AND 25
						   ) &lt; 7
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  30 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'Not All Alerts Configured' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'Not all SQL Server Agent alerts have been configured.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;
					END



				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 59 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    msdb.dbo.sysalerts
									WHERE   enabled = 1
											AND COALESCE(has_notification, 0) = 0
											AND (job_id IS NULL OR job_id = 0x))
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  59 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'Alerts Configured without Follow Up' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'SQL Server Agent alerts have been configured but they either do not notify anyone or else they do not take any action.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 96 )
					BEGIN
						IF NOT EXISTS ( SELECT  *
										FROM    msdb.dbo.sysalerts
										WHERE   message_id IN ( 823, 824, 825 ) )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  96 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'No Alerts for Corruption' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'SQL Server Agent alerts do not exist for errors 823, 824, and 825.  These three errors can give you notification about early hardware failure. Enabling them can prevent you a lot of heartbreak.' ) AS Details;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 61 )
					BEGIN
						IF NOT EXISTS ( SELECT  *
										FROM    msdb.dbo.sysalerts
										WHERE   severity BETWEEN 19 AND 25 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  61 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'No Alerts for Sev 19-25' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'SQL Server Agent alerts do not exist for severity levels 19 through 25.  These are some very severe SQL Server errors. Knowing that these are happening may let you recover from errors faster.' ) AS Details;
					END

		--check for disabled alerts
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 98 )
					BEGIN
						IF EXISTS ( SELECT  name
									FROM    msdb.dbo.sysalerts
									WHERE   enabled = 0 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  98 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'Alerts Disabled' AS Finding ,
											'http://www.BrentOzar.com/go/alerts/' AS URL ,
											( 'The following Alert is disabled, please review and enable if desired: '
											  + name ) AS Details
									FROM    msdb.dbo.sysalerts
									WHERE   enabled = 0
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 31 )
					BEGIN
						IF NOT EXISTS ( SELECT  *
										FROM    msdb.dbo.sysoperators
										WHERE   enabled = 1 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  31 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'No Operators Configured/Enabled' AS Finding ,
											'http://BrentOzar.com/go/op' AS URL ,
											( 'No SQL Server Agent operators (emails) have been configured.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;
					END



				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 34 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    sys.all_objects
									WHERE   name = 'dm_db_mirroring_auto_page_repair' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT
		  34 AS CheckID ,
		  db.name ,
		  1 AS Priority ,
		  ''Corruption'' AS FindingsGroup ,
		  ''Database Corruption Detected'' AS Finding ,
		  ''http://BrentOzar.com/go/repair'' AS URL ,
		  ( ''Database mirroring has automatically repaired at least one corrupt page in the last 30 days. For more information, query the DMV sys.dm_db_mirroring_auto_page_repair.'' ) AS Details
		  FROM (SELECT rp2.database_id, rp2.modification_time 
			FROM sys.dm_db_mirroring_auto_page_repair rp2 
			WHERE rp2.[database_id] not in (
			SELECT db2.[database_id] 
			FROM sys.databases as db2 
			WHERE db2.[state] = 1
			) ) as rp 
		  INNER JOIN master.sys.databases db ON rp.database_id = db.database_id
		  WHERE   rp.modification_time &gt;= DATEADD(dd, -30, GETDATE()) ;'
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 89 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    sys.all_objects
									WHERE   name = 'dm_hadr_auto_page_repair' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT
		  89 AS CheckID ,
		  db.name ,
		  1 AS Priority ,
		  ''Corruption'' AS FindingsGroup ,
		  ''Database Corruption Detected'' AS Finding ,
		  ''http://BrentOzar.com/go/repair'' AS URL ,
		  ( ''AlwaysOn has automatically repaired at least one corrupt page in the last 30 days. For more information, query the DMV sys.dm_hadr_auto_page_repair.'' ) AS Details
		  FROM    sys.dm_hadr_auto_page_repair rp
		  INNER JOIN master.sys.databases db ON rp.database_id = db.database_id
		  WHERE   rp.modification_time &gt;= DATEADD(dd, -30, GETDATE()) ;'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 90 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    msdb.sys.all_objects
									WHERE   name = 'suspect_pages' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT
		  90 AS CheckID ,
		  db.name ,
		  1 AS Priority ,
		  ''Corruption'' AS FindingsGroup ,
		  ''Database Corruption Detected'' AS Finding ,
		  ''http://BrentOzar.com/go/repair'' AS URL ,
		  ( ''SQL Server has detected at least one corrupt page in the last 30 days. For more information, query the system table msdb.dbo.suspect_pages.'' ) AS Details
		  FROM    msdb.dbo.suspect_pages sp
		  INNER JOIN master.sys.databases db ON sp.database_id = db.database_id
		  WHERE   sp.last_update_date &gt;= DATEADD(dd, -30, GETDATE()) ;'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 36 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										36 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Slow Storage Reads on Drive '
										+ UPPER(LEFT(mf.physical_name, 1)) AS Finding ,
										'http://BrentOzar.com/go/slow' AS URL ,
										'Reads are averaging longer than 200ms for at least one database on this drive.  For specific database file speeds, run the query from the information link.' AS Details
								FROM    sys.dm_io_virtual_file_stats(NULL, NULL)
										AS fs
										INNER JOIN sys.master_files AS mf ON fs.database_id = mf.database_id
																  AND fs.[file_id] = mf.[file_id]
								WHERE   ( io_stall_read_ms / ( 1.0 + num_of_reads ) ) &gt; 200
								AND num_of_reads &gt; 100000;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 37 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										37 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Slow Storage Writes on Drive '
										+ UPPER(LEFT(mf.physical_name, 1)) AS Finding ,
										'http://BrentOzar.com/go/slow' AS URL ,
										'Writes are averaging longer than 100ms for at least one database on this drive.  For specific database file speeds, run the query from the information link.' AS Details
								FROM    sys.dm_io_virtual_file_stats(NULL, NULL)
										AS fs
										INNER JOIN sys.master_files AS mf ON fs.database_id = mf.database_id
																  AND fs.[file_id] = mf.[file_id]
								WHERE   ( io_stall_write_ms / ( 1.0
																+ num_of_writes ) ) &gt; 100
																AND num_of_writes &gt; 100000;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 40 )
					BEGIN
						IF ( SELECT COUNT(*)
							 FROM   tempdb.sys.database_files
							 WHERE  type_desc = 'ROWS'
						   ) = 1
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  DatabaseName ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
								VALUES  ( 40 ,
										  'tempdb' ,
										  170 ,
										  'File Configuration' ,
										  'TempDB Only Has 1 Data File' ,
										  'http://BrentOzar.com/go/tempdb' ,
										  'TempDB is only configured with one data file.  More data files are usually required to alleviate SGAM contention.'
										);
							END;
					END

						IF ( SELECT COUNT (distinct [size])
							FROM   tempdb.sys.database_files
							WHERE  type_desc = 'ROWS'
							) &lt;&gt; 1
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  DatabaseName ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
								VALUES  ( 183 ,
										  'tempdb' ,
										  170 ,
										  'File Configuration' ,
										  'TempDB Unevenly Sized Data Files' ,
										  'http://BrentOzar.com/go/tempdb' ,
										  'TempDB data files are not configured with the same size.  Unevenly sized tempdb data files will result in unevenly sized workloads.'
										);
							END;

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 44 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  44 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Queries Forcing Order Hints' AS Finding ,
										'http://BrentOzar.com/go/hints' AS URL ,
										CAST(occurrence AS VARCHAR(10))
										+ ' instances of order hinting have been recorded since restart.  This means queries are bossing the SQL Server optimizer around, and if they don''t know what they''re doing, this can cause more harm than good.  This can also explain why DBA tuning efforts aren''t working.' AS Details
								FROM    sys.dm_exec_query_optimizer_info
								WHERE   counter = 'order hint'
										AND occurrence &gt; 1000
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 45 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  45 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Queries Forcing Join Hints' AS Finding ,
										'http://BrentOzar.com/go/hints' AS URL ,
										CAST(occurrence AS VARCHAR(10))
										+ ' instances of join hinting have been recorded since restart.  This means queries are bossing the SQL Server optimizer around, and if they don''t know what they''re doing, this can cause more harm than good.  This can also explain why DBA tuning efforts aren''t working.' AS Details
								FROM    sys.dm_exec_query_optimizer_info
								WHERE   counter = 'join hint'
										AND occurrence &gt; 1000
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 49 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										49 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Linked Server Configured' AS Finding ,
										'http://BrentOzar.com/go/link' AS URL ,
										+CASE WHEN l.remote_name = 'sa'
											  THEN s.data_source
												   + ' is configured as a linked server. Check its security configuration as it is connecting with sa, because any user who queries it will get admin-level permissions.'
											  ELSE s.data_source
												   + ' is configured as a linked server. Check its security configuration to make sure it isn''t connecting with SA or some other bone-headed administrative login, because any user who queries it might get admin-level permissions.'
										 END AS Details
								FROM    sys.servers s
										INNER JOIN sys.linked_logins l ON s.server_id = l.server_id
								WHERE   s.is_linked = 1
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 50 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
		  SELECT  50 AS CheckID ,
		  100 AS Priority ,
		  ''Performance'' AS FindingsGroup ,
		  ''Max Memory Set Too High'' AS Finding ,
		  ''http://BrentOzar.com/go/max'' AS URL ,
		  ''SQL Server max memory is set to ''
			+ CAST(c.value_in_use AS VARCHAR(20))
			+ '' megabytes, but the server only has ''
			+ CAST(( CAST(m.total_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20))
			+ '' megabytes.  SQL Server may drain the system dry of memory, and under certain conditions, this can cause Windows to swap to disk.'' AS Details
		  FROM    sys.dm_os_sys_memory m
		  INNER JOIN sys.configurations c ON c.name = ''max server memory (MB)''
		  WHERE   CAST(m.total_physical_memory_kb AS BIGINT) &lt; ( CAST(c.value_in_use AS BIGINT) * 1024 )'
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 51 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
		  SELECT  51 AS CheckID ,
		  1 AS Priority ,
		  ''Performance'' AS FindingsGroup ,
		  ''Memory Dangerously Low'' AS Finding ,
		  ''http://BrentOzar.com/go/max'' AS URL ,
		  ''The server has '' + CAST(( CAST(m.total_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20)) + '' megabytes of physical memory, but only '' + CAST(( CAST(m.available_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20))
			+ '' megabytes are available.  As the server runs out of memory, there is danger of swapping to disk, which will kill performance.'' AS Details
		  FROM    sys.dm_os_sys_memory m
		  WHERE   CAST(m.available_physical_memory_kb AS BIGINT) &lt; 262144'
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 159 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
		  SELECT DISTINCT 159 AS CheckID ,
		  1 AS Priority ,
		  ''Performance'' AS FindingsGroup ,
		  ''Memory Dangerously Low in NUMA Nodes'' AS Finding ,
		  ''http://BrentOzar.com/go/max'' AS URL ,
		  ''At least one NUMA node is reporting THREAD_RESOURCES_LOW in sys.dm_os_nodes and can no longer create threads.'' AS Details
		  FROM    sys.dm_os_nodes m
		  WHERE   node_state_desc LIKE ''%THREAD_RESOURCES_LOW%'''
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 53 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1
										53 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Cluster Node' AS Finding ,
										'http://BrentOzar.com/go/node' AS URL ,
										'This is a node in a cluster.' AS Details
								FROM    sys.dm_os_cluster_nodes
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 55 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  55 AS CheckID ,
										[name] AS DatabaseName ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Database Owner &lt;&gt; SA' AS Finding ,
										'http://BrentOzar.com/go/owndb' AS URL ,
										( 'Database name: ' + [name] + '   '
										  + 'Owner name: ' + SUSER_SNAME(owner_sid) ) AS Details
								FROM    sys.databases
								WHERE   SUSER_SNAME(owner_sid) &lt;&gt; SUSER_SNAME(0x01)
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL);
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 57 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  57 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'SQL Agent Job Runs at Startup' AS Finding ,
										'http://BrentOzar.com/go/startup' AS URL ,
										( 'Job [' + j.name
										  + '] runs automatically when SQL Server Agent starts up.  Make sure you know exactly what this job is doing, because it could pose a security risk.' ) AS Details
								FROM    msdb.dbo.sysschedules sched
										JOIN msdb.dbo.sysjobschedules jsched ON sched.schedule_id = jsched.schedule_id
										JOIN msdb.dbo.sysjobs j ON jsched.job_id = j.job_id
								WHERE   sched.freq_type = 64
								        AND sched.enabled = 1;
					END



				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 97 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  97 AS CheckID ,
										100 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Unusual SQL Server Edition' AS Finding ,
										'http://BrentOzar.com/go/workgroup' AS URL ,
										( 'This server is using '
										  + CAST(SERVERPROPERTY('edition') AS VARCHAR(100))
										  + ', which is capped at low amounts of CPU and memory.' ) AS Details
								WHERE   CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Enterprise%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Data Center%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Developer%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Business Intelligence%'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 154 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  154 AS CheckID ,
										10 AS Priority ,
										'Performance' AS FindingsGroup ,
										'32-bit SQL Server Installed' AS Finding ,
										'http://BrentOzar.com/go/32bit' AS URL ,
										( 'This server uses the 32-bit x86 binaries for SQL Server instead of the 64-bit x64 binaries. The amount of memory available for query workspace and execution plans is heavily limited.' ) AS Details
								WHERE   CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%64%'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 62 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  62 AS CheckID ,
										[name] AS DatabaseName ,
										200 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Old Compatibility Level' AS Finding ,
										'http://BrentOzar.com/go/compatlevel' AS URL ,
										( 'Database ' + [name]
										  + ' is compatibility level '
										  + CAST(compatibility_level AS VARCHAR(20))
										  + ', which may cause unwanted results when trying to run queries that have newer T-SQL features.' ) AS Details
								FROM    sys.databases
								WHERE   name NOT IN ( SELECT DISTINCT
																DatabaseName
													  FROM      #SkipChecks 
													  WHERE CheckID IS NULL)
										AND compatibility_level &lt;= 90
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 94 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  94 AS CheckID ,
										200 AS [Priority] ,
										'Monitoring' AS FindingsGroup ,
										'Agent Jobs Without Failure Emails' AS Finding ,
										'http://BrentOzar.com/go/alerts' AS URL ,
										'The job ' + [name]
										+ ' has not been set up to notify an operator if it fails.' AS Details
								FROM    msdb.[dbo].[sysjobs] j
										INNER JOIN ( SELECT DISTINCT
															[job_id]
													 FROM   [msdb].[dbo].[sysjobschedules]
													 WHERE  next_run_date &gt; 0
												   ) s ON j.job_id = s.job_id
								WHERE   j.enabled = 1
										AND j.notify_email_operator_id = 0
										AND j.notify_netsend_operator_id = 0
										AND j.notify_page_operator_id = 0
										AND j.category_id &lt;&gt; 100 /* Exclude SSRS category */
					END


				IF EXISTS ( SELECT  1
							FROM    sys.configurations
							WHERE   name = 'remote admin connections'
									AND value_in_use = 0 )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 100 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  100 AS CheckID ,
										50 AS Priority ,
										'Reliability' AS FindingGroup ,
										'Remote DAC Disabled' AS Finding ,
										'http://BrentOzar.com/go/dac' AS URL ,
										'Remote access to the Dedicated Admin Connection (DAC) is not enabled. The DAC can make remote troubleshooting much easier when SQL Server is unresponsive.'
					END


				IF EXISTS ( SELECT  *
							FROM    sys.dm_os_schedulers
							WHERE   is_online = 0 )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 101 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  101 AS CheckID ,
										50 AS Priority ,
										'Performance' AS FindingGroup ,
										'CPU Schedulers Offline' AS Finding ,
										'http://BrentOzar.com/go/schedulers' AS URL ,
										'Some CPU cores are not accessible to SQL Server due to affinity masking or licensing problems.'
					END


					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 110 )
								AND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'dm_os_memory_nodes')
						BEGIN
							SET @StringToExecute = 'IF EXISTS (SELECT  *
												FROM sys.dm_os_nodes n
												INNER JOIN sys.dm_os_memory_nodes m ON n.memory_node_id = m.memory_node_id
												WHERE n.node_state_desc = ''OFFLINE'')
												INSERT  INTO #BlitzResults
														( CheckID ,
														  Priority ,
														  FindingsGroup ,
														  Finding ,
														  URL ,
														  Details
														)
														SELECT  110 AS CheckID ,
																50 AS Priority ,
																''Performance'' AS FindingGroup ,
																''Memory Nodes Offline'' AS Finding ,
																''http://BrentOzar.com/go/schedulers'' AS URL ,
																''Due to affinity masking or licensing problems, some of the memory may not be available.''';
									EXECUTE(@StringToExecute);
						END


				IF EXISTS ( SELECT  *
							FROM    sys.databases
							WHERE   state &gt; 1 )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 102 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  102 AS CheckID ,
										[name] ,
										20 AS Priority ,
										'Reliability' AS FindingGroup ,
										'Unusual Database State: ' + [state_desc] AS Finding ,
										'http://BrentOzar.com/go/repair' AS URL ,
										'This database may not be online.'
								FROM    sys.databases
								WHERE   state &gt; 1
					END

				IF EXISTS ( SELECT  *
							FROM    master.sys.extended_procedures )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 105 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  105 AS CheckID ,
										'master' ,
										200 AS Priority ,
										'Reliability' AS FindingGroup ,
										'Extended Stored Procedures in Master' AS Finding ,
										'http://BrentOzar.com/go/clr' AS URL ,
										'The [' + name
										+ '] extended stored procedure is in the master database. CLR may be in use, and the master database now needs to be part of your backup/recovery planning.'
								FROM    master.sys.extended_procedures
					END



					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 107 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  107 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: THREADPOOL'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type = 'THREADPOOL'
									GROUP BY wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END

					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 108 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  108 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: RESOURCE_SEMAPHORE'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type = 'RESOURCE_SEMAPHORE'
									GROUP BY wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END


					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 109 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  109 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: RESOURCE_SEMAPHORE_QUERY_COMPILE'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type = 'RESOURCE_SEMAPHORE_QUERY_COMPILE'
									GROUP BY wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END


					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 121 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  121 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: Serializable Locking'  AS Finding ,
											'http://BrentOzar.com/go/serializable' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of LCK_M_R% waits have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type IN ('LCK_M_RS_S', 'LCK_M_RS_U', 'LCK_M_RIn_NL','LCK_M_RIn_S', 'LCK_M_RIn_U','LCK_M_RIn_X', 'LCK_M_RX_S', 'LCK_M_RX_U','LCK_M_RX_X')
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END




					IF @ProductVersionMajor &gt;= 11 AND NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 162 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  162 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: CMEMTHREAD &amp; NUMA'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. In servers with over 8 cores per NUMA node, when CMEMTHREAD waits are a bottleneck, trace flag 8048 may be needed.'
									FROM sys.dm_os_nodes n 
									INNER JOIN sys.[dm_os_wait_stats] w ON w.wait_type = 'CMEMTHREAD'
									WHERE n.node_id = 0 AND n.online_scheduler_count &gt;= 8
									GROUP BY w.wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000;
						END




						IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 111 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  DatabaseName ,
									  URL ,
									  Details
									)
									SELECT  111 AS CheckID ,
											50 AS Priority ,
											'Reliability' AS FindingGroup ,
											'Possibly Broken Log Shipping'  AS Finding ,
											d.[name] ,
											'http://BrentOzar.com/go/shipping' AS URL ,
											d.[name] + ' is in a restoring state, but has not had a backup applied in the last two days. This is a possible indication of a broken transaction log shipping setup.'
											FROM [master].sys.databases d
											INNER JOIN [master].sys.database_mirroring dm ON d.database_id = dm.database_id
												AND dm.mirroring_role IS NULL
											WHERE ( d.[state] = 1
											OR (d.[state] = 0 AND d.[is_in_standby] = 1) )
											AND NOT EXISTS(SELECT * FROM msdb.dbo.restorehistory rh
											INNER JOIN msdb.dbo.backupset bs ON rh.backup_set_id = bs.backup_set_id
											WHERE d.[name] COLLATE SQL_Latin1_General_CP1_CI_AS = rh.destination_database_name COLLATE SQL_Latin1_General_CP1_CI_AS
											AND rh.restore_date &gt;= DATEADD(dd, -2, GETDATE()))

						END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 112 )
									AND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'change_tracking_databases')
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
							  SELECT 112 AS CheckID,
							  100 AS Priority,
							  ''Performance'' AS FindingsGroup,
							  ''Change Tracking Enabled'' AS Finding,
							  ''http://BrentOzar.com/go/tracking'' AS URL,
							  ( d.[name] + '' has change tracking enabled. This is not a default setting, and it has some performance overhead. It keeps track of changes to rows in tables that have change tracking turned on.'' ) AS Details FROM sys.change_tracking_databases AS ctd INNER JOIN sys.databases AS d ON ctd.database_id = d.database_id';
										EXECUTE(@StringToExecute);
							END


						IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 116 )
									AND EXISTS (SELECT * FROM msdb.sys.all_columns WHERE name = 'compressed_backup_size')
						BEGIN
							SET @StringToExecute = 'INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  116 AS CheckID ,
											200 AS Priority ,
											''Informational'' AS FindingGroup ,
											''Backup Compression Default Off''  AS Finding ,
											''http://BrentOzar.com/go/backup'' AS URL ,
											''Uncompressed full backups have happened recently, and backup compression is not turned on at the server level. Backup compression is included with SQL Server 2008R2 &amp; newer, even in Standard Edition. We recommend turning backup compression on by default so that ad-hoc backups will get compressed.''
											FROM sys.configurations
											WHERE configuration_id = 1579 AND CAST(value_in_use AS INT) = 0
                                            AND EXISTS (SELECT * FROM msdb.dbo.backupset WHERE backup_size = compressed_backup_size AND type = ''D'' AND backup_finish_date &gt;= DATEADD(DD, -14, GETDATE()));'
										EXECUTE(@StringToExecute);
						END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 117 )
									AND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'dm_exec_query_resource_semaphores')
							BEGIN
								SET @StringToExecute = 'IF 0 &lt; (SELECT SUM([forced_grant_count]) FROM sys.dm_exec_query_resource_semaphores WHERE [forced_grant_count] IS NOT NULL)
								INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
							  SELECT 117 AS CheckID,
							  100 AS Priority,
							  ''Performance'' AS FindingsGroup,
							  ''Memory Pressure Affecting Queries'' AS Finding,
							  ''http://BrentOzar.com/go/grants'' AS URL,
							  CAST(SUM(forced_grant_count) AS NVARCHAR(100)) + '' forced grants reported in the DMV sys.dm_exec_query_resource_semaphores, indicating memory pressure has affected query runtimes.''
							  FROM sys.dm_exec_query_resource_semaphores WHERE [forced_grant_count] IS NOT NULL;'
										EXECUTE(@StringToExecute);
							END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 124 )
							BEGIN
								INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
								SELECT 124, 150, 'Performance', 'Deadlocks Happening Daily', 'http://BrentOzar.com/go/deadlocks',
									CAST(p.cntr_value AS NVARCHAR(100)) + ' deadlocks have been recorded since startup.' AS Details
								FROM sys.dm_os_performance_counters p
									INNER JOIN sys.databases d ON d.name = 'tempdb'
								WHERE RTRIM(p.counter_name) = 'Number of Deadlocks/sec'
									AND RTRIM(p.instance_name) = '_Total'
									AND p.cntr_value &gt; 0
									AND (1.0 * p.cntr_value / NULLIF(datediff(DD,create_date,CURRENT_TIMESTAMP),0)) &gt; 10;
							END


						IF DATEADD(mi, -15, GETDATE()) &lt; (SELECT TOP 1 creation_time FROM sys.dm_exec_query_stats ORDER BY creation_time)
						BEGIN
							INSERT INTO #BlitzResults
								(CheckID,
								Priority,
								FindingsGroup,
								Finding,
								URL,
								Details)
							SELECT TOP 1 125, 10, 'Performance', 'Plan Cache Erased Recently', 'http://BrentOzar.com/askbrent/plan-cache-erased-recently/',
								'The oldest query in the plan cache was created at ' + CAST(creation_time AS NVARCHAR(50)) + '. Someone ran DBCC FREEPROCCACHE, restarted SQL Server, or it is under horrific memory pressure.'
							FROM sys.dm_exec_query_stats WITH (NOLOCK)
							ORDER BY creation_time	
						END;

						IF EXISTS (SELECT * FROM sys.configurations WHERE name = 'priority boost' AND (value = 1 OR value_in_use = 1))
						BEGIN
							INSERT INTO #BlitzResults
								(CheckID,
								Priority,
								FindingsGroup,
								Finding,
								URL,
								Details)
							VALUES(126, 5, 'Reliability', 'Priority Boost Enabled', 'http://BrentOzar.com/go/priorityboost/',
								'Priority Boost sounds awesome, but it can actually cause your SQL Server to crash.')
						END;

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 128 )
							BEGIN

							IF (@ProductVersionMajor = 12 AND @ProductVersionMinor &lt; 2000) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor &lt; 3000) OR
							   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor &lt; 6000) OR
							   (@ProductVersionMajor = 10 AND @ProductVersionMinor &lt; 6000) OR
							   (@ProductVersionMajor = 9 /*AND @ProductVersionMinor &lt;= 5000*/)
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(128, 20, 'Reliability', 'Unsupported Build of SQL Server', 'http://BrentOzar.com/go/unsupported',
										'Version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + 
										CASE WHEN @ProductVersionMajor &gt; 9 THEN
										CAST(@ProductVersionMinor AS VARCHAR(100)) + ' is no longer supported by Microsoft. You need to apply a service pack.'
										ELSE ' is no longer support by Microsoft. You should be making plans to upgrade to a modern version of SQL Server.' END);
								END;

							END;
							
						/* Reliability - Dangerous Build of SQL Server (Corruption) */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 129 )
							BEGIN
							IF (@ProductVersionMajor = 11 AND @ProductVersionMinor &gt;= 3000 AND @ProductVersionMinor &lt;= 3436) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor = 5058) OR
							   (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 2000 AND @ProductVersionMinor &lt;= 2342)
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(129, 20, 'Reliability', 'Dangerous Build of SQL Server (Corruption)', 'http://sqlperformance.com/2014/06/sql-indexes/hotfix-sql-2012-rebuilds',
										'There are dangerous known bugs with version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + CAST(@ProductVersionMinor AS VARCHAR(100)) + '. Check the URL for details and apply the right service pack or hotfix.');
								END;

							END;

						/* Reliability - Dangerous Build of SQL Server (Security) */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 157 )
							BEGIN
							IF (@ProductVersionMajor = 10 AND @ProductVersionMinor &gt;= 5500 AND @ProductVersionMinor &lt;= 5512) OR
							   (@ProductVersionMajor = 10 AND @ProductVersionMinor &gt;= 5750 AND @ProductVersionMinor &lt;= 5867) OR
							   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor &gt;= 4000 AND @ProductVersionMinor &lt;= 4017) OR
							   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor &gt;= 4251 AND @ProductVersionMinor &lt;= 4319) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor &gt;= 3000 AND @ProductVersionMinor &lt;= 3129) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor &gt;= 3300 AND @ProductVersionMinor &lt;= 3447) OR
							   (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 2000 AND @ProductVersionMinor &lt;= 2253) OR
							   (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 2300 AND @ProductVersionMinor &lt;= 2370)
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(157, 20, 'Reliability', 'Dangerous Build of SQL Server (Security)', 'https://technet.microsoft.com/en-us/library/security/MS14-044',
										'There are dangerous known bugs with version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + CAST(@ProductVersionMinor AS VARCHAR(100)) + '. Check the URL for details and apply the right service pack or hotfix.');
								END;

							END;
						
						/* Check if SQL 2016 Standard Edition but not SP1 */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 189 )
							BEGIN
							IF (@ProductVersionMajor = 13 AND @ProductVersionMinor &lt; 4001 AND @@VERSION LIKE '%Standard Edition%') 
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(189, 100, 'Features', 'Missing Features', 'https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/',
										'SQL 2016 Standard Edition is being used but not Service Pack 1. Check the URL for a list of Enterprise Features that are included in Standard Edition as of SP1.');
								END;

							END;						

                        /* Performance - High Memory Use for In-Memory OLTP (Hekaton) */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 145 )
	                        AND EXISTS ( SELECT *
					                        FROM   sys.all_objects o
					                        WHERE  o.name = 'dm_db_xtp_table_memory_stats' )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT 145 AS CheckID,
			                        10 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''High Memory Use for In-Memory OLTP (Hekaton)'' AS Finding,
			                        ''http://BrentOzar.com/go/hekaton'' AS URL,
			                        CAST(CAST((SUM(mem.pages_kb / 1024.0) / CAST(value_in_use AS INT) * 100) AS INT) AS NVARCHAR(100)) + ''% of your '' + CAST(CAST((CAST(value_in_use AS DECIMAL(38,1)) / 1024) AS MONEY) AS NVARCHAR(100)) + ''GB of your max server memory is being used for in-memory OLTP tables (Hekaton). Microsoft recommends having 2X your Hekaton table space available in memory just for Hekaton, with a max of 250GB of in-memory data regardless of your server memory capacity.'' AS Details
			                        FROM sys.configurations c INNER JOIN sys.dm_os_memory_clerks mem ON mem.type = ''MEMORYCLERK_XTP''
                                    WHERE c.name = ''max server memory (MB)''
                                    GROUP BY c.value_in_use
                                    HAVING CAST(value_in_use AS DECIMAL(38,2)) * .25 &lt; SUM(mem.pages_kb / 1024.0)
                                      OR SUM(mem.pages_kb / 1024.0) &gt; 250000';
		                        EXECUTE(@StringToExecute);
	                        END


                        /* Performance - In-Memory OLTP (Hekaton) In Use */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 146 )
	                        AND EXISTS ( SELECT *
					                        FROM   sys.all_objects o
					                        WHERE  o.name = 'dm_db_xtp_table_memory_stats' )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT 146 AS CheckID,
			                        200 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''In-Memory OLTP (Hekaton) In Use'' AS Finding,
			                        ''http://BrentOzar.com/go/hekaton'' AS URL,
			                        CAST(CAST((SUM(mem.pages_kb / 1024.0) / CAST(value_in_use AS INT) * 100) AS INT) AS NVARCHAR(100)) + ''% of your '' + CAST(CAST((CAST(value_in_use AS DECIMAL(38,1)) / 1024) AS MONEY) AS NVARCHAR(100)) + ''GB of your max server memory is being used for in-memory OLTP tables (Hekaton).'' AS Details
			                        FROM sys.configurations c INNER JOIN sys.dm_os_memory_clerks mem ON mem.type = ''MEMORYCLERK_XTP''
                                    WHERE c.name = ''max server memory (MB)''
                                    GROUP BY c.value_in_use
                                    HAVING SUM(mem.pages_kb / 1024.0) &gt; 10';
		                        EXECUTE(@StringToExecute);
	                        END

                        /* In-Memory OLTP (Hekaton) - Transaction Errors */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 147 )
	                        AND EXISTS ( SELECT *
					                        FROM   sys.all_objects o
					                        WHERE  o.name = 'dm_xtp_transaction_stats' )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT 147 AS CheckID,
			                        100 AS Priority,
			                        ''In-Memory OLTP (Hekaton)'' AS FindingsGroup,
			                        ''Transaction Errors'' AS Finding,
			                        ''http://BrentOzar.com/go/hekaton'' AS URL,
			                        ''Since restart: '' + CAST(validation_failures AS NVARCHAR(100)) + '' validation failures, '' + CAST(dependencies_failed AS NVARCHAR(100)) + '' dependency failures, '' + CAST(write_conflicts AS NVARCHAR(100)) + '' write conflicts, '' + CAST(unique_constraint_violations AS NVARCHAR(100)) + '' unique constraint violations.'' AS Details
			                        FROM sys.dm_xtp_transaction_stats
                                    WHERE validation_failures &lt;&gt; 0
                                            OR dependencies_failed &lt;&gt; 0
                                            OR write_conflicts &lt;&gt; 0
                                            OR unique_constraint_violations &lt;&gt; 0;'
		                        EXECUTE(@StringToExecute);
	                        END



                        /* Reliability - Database Files on Network File Shares */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 148 )
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 148 AS CheckID ,
						                        d.[name] AS DatabaseName ,
						                        170 AS Priority ,
						                        'Reliability' AS FindingsGroup ,
						                        'Database Files on Network File Shares' AS Finding ,
						                        'http://BrentOzar.com/go/nas' AS URL ,
						                        ( 'Files for this database are on: ' + LEFT(mf.physical_name, 30)) AS Details
				                        FROM    sys.databases d
                                          INNER JOIN sys.master_files mf ON d.database_id = mf.database_id
				                        WHERE mf.physical_name LIKE '\\%'
						                        AND d.name NOT IN ( SELECT DISTINCT
													                        DatabaseName
											                        FROM    #SkipChecks 
																	WHERE CheckID IS NULL)
	                        END

                        /* Reliability - Database Files Stored in Azure */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 149 )
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 149 AS CheckID ,
						                        d.[name] AS DatabaseName ,
						                        170 AS Priority ,
						                        'Reliability' AS FindingsGroup ,
						                        'Database Files Stored in Azure' AS Finding ,
						                        'http://BrentOzar.com/go/azurefiles' AS URL ,
						                        ( 'Files for this database are on: ' + LEFT(mf.physical_name, 30)) AS Details
				                        FROM    sys.databases d
                                          INNER JOIN sys.master_files mf ON d.database_id = mf.database_id
				                        WHERE mf.physical_name LIKE 'http://%'
						                        AND d.name NOT IN ( SELECT DISTINCT
													                        DatabaseName
											                        FROM    #SkipChecks 
																	WHERE CheckID IS NULL)
	                        END


                        /* Reliability - Errors Logged Recently in the Default Trace */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 150 )
                            AND @TracePath IS NOT NULL
	                        BEGIN

		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 150 AS CheckID ,
					                            t.DatabaseName,
						                        50 AS Priority ,
						                        'Reliability' AS FindingsGroup ,
						                        'Errors Logged Recently in the Default Trace' AS Finding ,
						                        'http://BrentOzar.com/go/defaulttrace' AS URL ,
						                         CAST(t.TextData AS NVARCHAR(4000)) AS Details
                                        FROM    sys.fn_trace_gettable(@TracePath, DEFAULT) t
                                        WHERE t.EventClass = 22
                                          AND t.Severity &gt;= 17
                                          AND t.StartTime &gt; DATEADD(dd, -30, GETDATE())
	                        END


                        /* Performance - Log File Growths Slow */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 151 )
                            AND @TracePath IS NOT NULL
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 151 AS CheckID ,
					                            t.DatabaseName,
						                        50 AS Priority ,
						                        'Performance' AS FindingsGroup ,
						                        'Log File Growths Slow' AS Finding ,
						                        'http://BrentOzar.com/go/filegrowth' AS URL ,
						                        CAST(COUNT(*) AS NVARCHAR(100)) + ' growths took more than 15 seconds each. Consider setting log file autogrowth to a smaller increment.' AS Details
                                        FROM    sys.fn_trace_gettable(@TracePath, DEFAULT) t
                                        WHERE t.EventClass = 93
                                          AND t.StartTime &gt; DATEADD(dd, -30, GETDATE())
                                          AND t.Duration &gt; 15000000
                                        GROUP BY t.DatabaseName
                                        HAVING COUNT(*) &gt; 1
	                        END


                        /* Performance - Many Plans for One Query */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 160 )
                            AND EXISTS (SELECT * FROM sys.all_columns WHERE name = 'query_hash')
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT TOP 1 160 AS CheckID,
			                        100 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''Many Plans for One Query'' AS Finding,
			                        ''http://BrentOzar.com/go/parameterization'' AS URL,
			                        CAST(COUNT(DISTINCT plan_handle) AS NVARCHAR(50)) + '' plans are present for a single query in the plan cache - meaning we probably have parameterization issues.'' AS Details
			                        FROM sys.dm_exec_query_stats qs
                                    CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) pa
                                    WHERE pa.attribute = ''dbid''
                                    GROUP BY qs.query_hash, pa.value
                                    HAVING COUNT(DISTINCT plan_handle) &gt; 50
									ORDER BY COUNT(DISTINCT plan_handle) DESC;';
		                        EXECUTE(@StringToExecute);
	                        END


                        /* Performance - High Number of Cached Plans */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 161 )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT TOP 1 161 AS CheckID,
			                        100 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''High Number of Cached Plans'' AS Finding,
			                        ''http://BrentOzar.com/go/planlimits'' AS URL,
			                        ''Your server configuration is limited to '' + CAST(ht.buckets_count * 4 AS VARCHAR(20)) + '' '' + ht.name + '', and you are currently caching '' + CAST(cc.entries_count AS VARCHAR(20)) + ''.'' AS Details
			                        FROM sys.dm_os_memory_cache_hash_tables ht
			                        INNER JOIN sys.dm_os_memory_cache_counters cc ON ht.name = cc.name AND ht.type = cc.type
			                        where ht.name IN ( ''SQL Plans'' , ''Object Plans'' , ''Bound Trees'' )
			                        AND cc.entries_count &gt;= (3 * ht.buckets_count)';
		                        EXECUTE(@StringToExecute);
	                        END


						/* Performance - Too Much Free Memory */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 165 )
							BEGIN
								INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
								SELECT 165, 50, 'Performance', 'Too Much Free Memory', 'http://BrentOzar.com/go/freememory',
									CAST((CAST(cFree.cntr_value AS BIGINT) / 1024 / 1024 ) AS NVARCHAR(100)) + N'GB of free memory inside SQL Server''s buffer pool, which is ' + CAST((CAST(cTotal.cntr_value AS BIGINT) / 1024 / 1024) AS NVARCHAR(100)) + N'GB. You would think lots of free memory would be good, but check out the URL for more information.' AS Details
								FROM sys.dm_os_performance_counters cFree
								INNER JOIN sys.dm_os_performance_counters cTotal ON cTotal.object_name LIKE N'%Memory Manager%'
									AND cTotal.counter_name = N'Total Server Memory (KB)                                                                                                        '
								WHERE cFree.object_name LIKE N'%Memory Manager%'
									AND cFree.counter_name = N'Free Memory (KB)                                                                                                                '
									AND CAST(cTotal.cntr_value AS BIGINT) &gt; 4000
									AND CAST(cTotal.cntr_value AS BIGINT) * .3 &lt;= CAST(cFree.cntr_value AS BIGINT)
                                    AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%'

							END


                        /* Outdated sp_Blitz - sp_Blitz is Over 6 Months Old */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 155 )
				           AND DATEDIFF(MM, @VersionDate, GETDATE()) &gt; 6
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT 155 AS CheckID ,
						                        0 AS Priority ,
						                        'Outdated sp_Blitz' AS FindingsGroup ,
						                        'sp_Blitz is Over 6 Months Old' AS Finding ,
						                        'http://FirstResponderKit.org/' AS URL ,
						                        'Some things get better with age, like fine wine and your T-SQL. However, sp_Blitz is not one of those things - time to go download the current one.' AS Details
	                        END


						/* Populate a list of database defaults. I'm doing this kind of oddly -
						    it reads like a lot of work, but this way it compiles &amp; runs on all
						    versions of SQL Server.
						*/
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_supplemental_logging_enabled', 0, 131, 210, 'Supplemental Logging Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_supplemental_logging_enabled' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'snapshot_isolation_state', 0, 132, 210, 'Snapshot Isolation Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'snapshot_isolation_state' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_read_committed_snapshot_on', 0, 133, 210, 'Read Committed Snapshot Isolation Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_read_committed_snapshot_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_auto_create_stats_incremental_on', 0, 134, 210, 'Auto Create Stats Incremental Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_auto_create_stats_incremental_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_ansi_null_default_on', 0, 135, 210, 'ANSI NULL Default Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_ansi_null_default_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_recursive_triggers_on', 0, 136, 210, 'Recursive Triggers Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_recursive_triggers_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_trustworthy_on', 0, 137, 210, 'Trustworthy Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_trustworthy_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_parameterization_forced', 0, 138, 210, 'Forced Parameterization Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_parameterization_forced' AND object_id = OBJECT_ID('sys.databases');
						/* Not alerting for this since we actually want it and we have a separate check for it:
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_query_store_on', 0, 139, 210, 'Query Store Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_query_store_on' AND object_id = OBJECT_ID('sys.databases');
						*/
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_cdc_enabled', 0, 140, 210, 'Change Data Capture Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_cdc_enabled' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'containment', 0, 141, 210, 'Containment Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'containment' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'target_recovery_time_in_seconds', 0, 142, 210, 'Target Recovery Time Changed', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'target_recovery_time_in_seconds' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'delayed_durability', 0, 143, 210, 'Delayed Durability Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'delayed_durability' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_memory_optimized_elevate_to_snapshot_on', 0, 144, 210, 'Memory Optimized Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_memory_optimized_elevate_to_snapshot_on' AND object_id = OBJECT_ID('sys.databases');

						DECLARE DatabaseDefaultsLoop CURSOR FOR
						  SELECT name, DefaultValue, CheckID, Priority, Finding, URL, Details
						  FROM #DatabaseDefaults

						OPEN DatabaseDefaultsLoop
						FETCH NEXT FROM DatabaseDefaultsLoop into @CurrentName, @CurrentDefaultValue, @CurrentCheckID, @CurrentPriority, @CurrentFinding, @CurrentURL, @CurrentDetails
						WHILE @@FETCH_STATUS = 0
						BEGIN 

							/* Target Recovery Time (142) can be either 0 or 60 due to a number of bugs */
						    IF @CurrentCheckID = 142
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details)
								   SELECT ' + CAST(@CurrentCheckID AS NVARCHAR(200)) + ', d.[name], ' + CAST(@CurrentPriority AS NVARCHAR(200)) + ', ''Non-Default Database Config'', ''' + @CurrentFinding + ''',''' + @CurrentURL + ''',''' + COALESCE(@CurrentDetails, 'This database setting is not the default.') + '''
									FROM sys.databases d
									WHERE d.database_id &gt; 4 AND (d.[' + @CurrentName + '] NOT IN (0, 60) OR d.[' + @CurrentName + '] IS NULL);';
							ELSE
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details)
								   SELECT ' + CAST(@CurrentCheckID AS NVARCHAR(200)) + ', d.[name], ' + CAST(@CurrentPriority AS NVARCHAR(200)) + ', ''Non-Default Database Config'', ''' + @CurrentFinding + ''',''' + @CurrentURL + ''',''' + COALESCE(@CurrentDetails, 'This database setting is not the default.') + '''
									FROM sys.databases d
									WHERE d.database_id &gt; 4 AND (d.[' + @CurrentName + '] &lt;&gt; ' + @CurrentDefaultValue + ' OR d.[' + @CurrentName + '] IS NULL);';
						    EXEC (@StringToExecute);

						FETCH NEXT FROM DatabaseDefaultsLoop into @CurrentName, @CurrentDefaultValue, @CurrentCheckID, @CurrentPriority, @CurrentFinding, @CurrentURL, @CurrentDetails 
						END

						CLOSE DatabaseDefaultsLoop
						DEALLOCATE DatabaseDefaultsLoop;
							

/*This checks to see if Agent is Offline*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 167 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
									BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							167 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Agent is Currently Offline' AS [Finding] ,
							'' AS [URL] ,
							( 'Oops! It looks like the ' + [servicename] + ' service is ' + [status_desc] + '. The startup type is ' + [startup_type_desc] + '.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [status_desc] &lt;&gt; 'Running'
						  AND [servicename] LIKE 'SQL Server Agent%'
						  AND CAST(SERVERPROPERTY('Edition') AS VARCHAR(1000)) NOT LIKE '%xpress%'

					END; 
				END;

/*This checks to see if the Full Text thingy is offline*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 168 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							168 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Full-text Filter Daemon Launcher is Currently Offline' AS [Finding] ,
							'' AS [URL] ,
							( 'Oops! It looks like the ' + [servicename] + ' service is ' + [status_desc] + '. The startup type is ' + [startup_type_desc] + '.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [status_desc] &lt;&gt; 'Running'
						  AND [servicename] LIKE 'SQL Full-text Filter Daemon Launcher%'

					END;
					END; 

/*This checks which service account SQL Server is running as.*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 169 )

					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							169 AS [CheckID] ,
							250 AS [Priority] ,
							'Informational' AS [FindingsGroup] ,
							'SQL Server is running under an NT Service account' AS [Finding] ,
							'http://BrentOzar.com/go/setup' AS [URL] ,
							( 'I''m running as ' + [service_account] + '. I wish I had an Active Directory service account instead.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [service_account] LIKE 'NT Service%'
						  AND [servicename] LIKE 'SQL Server%'
						  AND [servicename] NOT LIKE 'SQL Server Agent%'

					END;
					END;

/*This checks which service account SQL Agent is running as.*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 170 )

					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							170 AS [CheckID] ,
							250 AS [Priority] ,
							'Informational' AS [FindingsGroup] ,
							'SQL Server Agent is running under an NT Service account' AS [Finding] ,
							'http://BrentOzar.com/go/setup' AS [URL] ,
							( 'I''m running as ' + [service_account] + '. I wish I had an Active Directory service account instead.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [service_account] LIKE 'NT Service%'
						  AND [servicename] LIKE 'SQL Server Agent%'

					END; 
					END;

/*This counts memory dumps and gives min and max date of in view*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 171 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_memory_dumps' )
					BEGIN
						IF 5 &lt;= (SELECT COUNT(*) FROM [sys].[dm_server_memory_dumps] WHERE [creation_time] &gt;= DATEADD(year, -1, GETDATE()))
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							171 AS [CheckID] ,
							20 AS [Priority] ,
							'Reliability' AS [FindingsGroup] ,
							'Memory Dumps Have Occurred' AS [Finding] ,
							'http://BrentOzar.com/go/dump' AS [URL] ,
							( 'That ain''t good. I''ve had ' + 
								CAST(COUNT(*) AS VARCHAR(100)) + ' memory dumps between ' + 
								CAST(CAST(MIN([creation_time]) AS DATETIME) AS VARCHAR(100)) +
								' and ' +
								CAST(CAST(MAX([creation_time]) AS DATETIME) AS VARCHAR(100)) +
								'!'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_memory_dumps]
						  WHERE [creation_time] &gt;= DATEADD(year, -1, GETDATE());

					END; 
					END;

/*Checks to see if you're on Developer or Evaluation*/
					IF	NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 173 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							173 AS [CheckID] ,
							200 AS [Priority] ,
							'Licensing' AS [FindingsGroup] ,
							'Non-Production License' AS [Finding] ,
							'http://BrentOzar.com/go/licensing' AS [URL] ,
							( 'We''re not the licensing police, but if this is supposed to be a production server, and you''re running ' + 
							CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) +
							' the good folks at Microsoft might get upset with you. Better start counting those cores.'
							   ) AS [Details]
							WHERE CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) LIKE '%Developer%'
							OR CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) LIKE '%Evaluation%'

					END

/*Checks to see if Buffer Pool Extensions are in use*/
			IF @ProductVersionMajor &gt;= 12  
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 174 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							174 AS [CheckID] ,
							200 AS [Priority] ,
							'Performance' AS [FindingsGroup] ,
							'Buffer Pool Extensions Enabled' AS [Finding] ,
							'http://BrentOzar.com/go/bpe' AS [URL] ,
							( 'You have Buffer Pool Extensions enabled, and one lives here: ' + 
								[path] +
								'. It''s currently ' +
								CASE WHEN [current_size_in_kb] / 1024. / 1024. &gt; 0
																	 THEN CAST([current_size_in_kb] / 1024. / 1024. AS VARCHAR(100))
																		  + ' GB'
																	 ELSE CAST([current_size_in_kb] / 1024. AS VARCHAR(100))
																		  + ' MB'
								END +
								'. Did you know that BPEs only provide single threaded access 8 bytes at a time?'	
							   ) AS [Details]
							 FROM sys.dm_os_buffer_pool_extension_configuration
							 WHERE [state_description] &lt;&gt; 'BUFFER POOL EXTENSION DISABLED'

					END

/*Check for too many tempdb files*/
			IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 175 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
										SELECT DISTINCT
										175 AS CheckID ,
										'TempDB' AS DatabaseName ,
										170 AS Priority ,
										'File Configuration' AS FindingsGroup ,
										'TempDB Has &gt;16 Data Files' AS Finding ,
										'http://BrentOzar.com/go/tempdb' AS URL ,
										'Woah, Nelly! TempDB has ' + CAST(COUNT_BIG(*) AS VARCHAR) + '. Did you forget to terminate a loop somewhere?' AS Details
								  FROM sys.[master_files] AS [mf] 
								  WHERE [mf].[database_id] = 2 AND [mf].[type] = 0
								  HAVING COUNT_BIG(*) &gt; 16; 
					END	

			IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 176 )
			IF EXISTS ( SELECT  1
														FROM    sys.all_objects
														WHERE   name = 'dm_xe_sessions' )
								BEGIN
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  DatabaseName ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
													SELECT DISTINCT
													176 AS CheckID ,
													'' AS DatabaseName ,
													200 AS Priority ,
													'Monitoring' AS FindingsGroup ,
													'Extended Events Hyperextension' AS Finding ,
													'http://BrentOzar.com/go/xe' AS URL ,
													'Hey big spender, you have ' + CAST(COUNT_BIG(*) AS VARCHAR) + ' Extended Events sessions running. You sure you meant to do that?' AS Details
											    FROM sys.dm_xe_sessions
												WHERE [name] NOT IN
												('system_health', 'sp_server_diagnostics session', 'hkenginexesession', 'telemetry_xevents')
												AND name NOT LIKE '%$A%'
											  HAVING COUNT_BIG(*) &gt;= 2; 
								END	
								END
			
			/*Harmful startup parameter*/
			IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 177 )
								BEGIN
								IF EXISTS ( SELECT  1
														FROM    sys.all_objects
														WHERE   name = 'dm_server_registry' )
			
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  DatabaseName ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
													SELECT DISTINCT
													177 AS CheckID ,
													'' AS DatabaseName ,
													5 AS Priority ,
													'Monitoring' AS FindingsGroup ,
													'Disabled Internal Monitoring Features' AS Finding ,
													'https://msdn.microsoft.com/en-us/library/ms190737.aspx' AS URL ,
													'You have -x as a startup parameter. You should head to the URL and read more about what it does to your system.' AS Details
													FROM
													[sys].[dm_server_registry] AS [dsr]
													WHERE
													[dsr].[registry_key] LIKE N'%MSSQLServer\Parameters'
													AND [dsr].[value_data] = '-x';; 
								END		
								END
			
			
			/* Reliability - Dangerous Third Party Modules - 179 */
			IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 179 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							179 AS [CheckID] ,
							5 AS [Priority] ,
							'Reliability' AS [FindingsGroup] ,
							'Dangerous Third Party Modules' AS [Finding] ,
							'https://support.microsoft.com/en-us/kb/2033238' AS [URL] ,
							( COALESCE(company, '') + ' - ' + COALESCE(description, '') + ' - ' + COALESCE(name, '') + ' - suspected dangerous third party module is installed.') AS [Details]
							FROM sys.dm_os_loaded_modules 
							WHERE UPPER(name) LIKE UPPER('%\ENTAPI.DLL') /* McAfee VirusScan Enterprise */
							OR UPPER(name) LIKE UPPER('%\HIPI.DLL') OR UPPER(name) LIKE UPPER('%\HcSQL.dll') OR UPPER(name) LIKE UPPER('%\HcApi.dll') OR UPPER(name) LIKE UPPER('%\HcThe.dll') /* McAfee Host Intrusion */
							OR UPPER(name) LIKE UPPER('%\SOPHOS_DETOURED.DLL') OR UPPER(name) LIKE UPPER('%\SOPHOS_DETOURED_x64.DLL') OR UPPER(name) LIKE UPPER('%\SWI_IFSLSP_64.dll') /* Sophos AV */
							OR UPPER(name) LIKE UPPER('%\PIOLEDB.DLL') OR UPPER(name) LIKE UPPER('%\PISDK.DLL') /* OSISoft PI data access */

					END

			/*Find shrink database tasks*/

			IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 180 )
							AND CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) LIKE '1%' /* Only run on 2008+ */
					BEGIN
						;
						WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS [dts])
						,[maintenance_plan_steps] AS (
							SELECT [name]
								, CAST(CAST([packagedata] AS VARBINARY(MAX)) AS XML) AS [maintenance_plan_xml]
							FROM [msdb].[dbo].[sysssispackages]
							WHERE [packagetype] = 6
						   )
							INSERT    INTO [#BlitzResults]
									( [CheckID] ,
										[Priority] ,
										[FindingsGroup] ,
										[Finding] ,
										[URL] ,
										[Details] )									  
						SELECT
						180 AS [CheckID] ,
						100 AS [Priority] ,
						'Performance' AS [FindingsGroup] ,
						'Shrink Database Step In Maintenance Plan' AS [Finding] ,
						'http://BrentOzar.com/go/autoshrink' AS [URL] ,									  
						'The maintenance plan ' + [mps].[name] + ' has a step to shrink databases in it. Shrinking databases is as outdated as maintenance plans.' AS [Details] 
						FROM [maintenance_plan_steps] [mps]
							CROSS APPLY [maintenance_plan_xml].[nodes]('//dts:Executables/dts:Executable') [t]([c])
						WHERE [c].[value]('(@dts:ObjectName)', 'VARCHAR(128)') = 'Shrink Database Task'

						END


		/*Find repetitive maintenance tasks*/
		IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 181 )
						AND CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) LIKE '1%' /* Only run on 2008+ */
				BEGIN
						;
						WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS [dts])
						,[maintenance_plan_steps] AS (
							SELECT [name]
								, CAST(CAST([packagedata] AS VARBINARY(MAX)) AS XML) AS [maintenance_plan_xml]
							FROM [msdb].[dbo].[sysssispackages]
							WHERE [packagetype] = 6
							), [maintenance_plan_table] AS (
						SELECT [mps].[name]
							,[c].[value]('(@dts:ObjectName)', 'NVARCHAR(128)') AS [step_name]
						FROM [maintenance_plan_steps] [mps]
							CROSS APPLY [maintenance_plan_xml].[nodes]('//dts:Executables/dts:Executable') [t]([c])
						), [mp_steps_pretty] AS (SELECT DISTINCT [m1].[name] ,
								STUFF((SELECT N', ' + [m2].[step_name]  FROM [maintenance_plan_table] AS [m2] WHERE [m1].[name] = [m2].[name] 
								FOR XML PATH(N'')), 1, 2, N'') AS [maintenance_plan_steps]
						FROM [maintenance_plan_table] AS [m1])
						
							INSERT    INTO [#BlitzResults]
									( [CheckID] ,
										[Priority] ,
										[FindingsGroup] ,
										[Finding] ,
										[URL] ,
										[Details] )						
						
						SELECT
						181 AS [CheckID] ,
						100 AS [Priority] ,
						'Performance' AS [FindingsGroup] ,
						'Repetitive Steps In Maintenance Plans' AS [Finding] ,
						'https://ola.hallengren.com/' AS [URL] , 
						'The maintenance plan ' + [m].[name] + ' is doing repetitive work on indexes and statistics. Perhaps it''s time to try something more modern?' AS [Details]
						FROM [mp_steps_pretty] m
						WHERE m.[maintenance_plan_steps] LIKE '%Rebuild%Reorganize%'
						OR m.[maintenance_plan_steps] LIKE '%Rebuild%Update%'

						END
			

			/* Reliability - No Failover Cluster Nodes Available - 184 */
			IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 184 )
				AND CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)) NOT LIKE '10%'
				AND CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)) NOT LIKE '9%'
					BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        							SELECT TOP 1
							  184 AS CheckID ,
							  20 AS Priority ,
							  ''Reliability'' AS FindingsGroup ,
							  ''No Failover Cluster Nodes Available'' AS Finding ,
							  ''http://BrentOzar.com/go/node'' AS URL ,
							  ''There are no failover cluster nodes available if the active node fails'' AS Details
							FROM (
							  SELECT SUM(CASE WHEN [status] = 0 AND [is_current_owner] = 0 THEN 1 ELSE 0 END) AS [available_nodes]
							  FROM sys.dm_os_cluster_nodes
							) a
							WHERE [available_nodes] &lt; 1';
		                        EXECUTE(@StringToExecute);
					END

		/* Reliability - TempDB File Error */
		IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 191 )
			AND (SELECT COUNT(*) FROM sys.master_files WHERE database_id = 2) &lt;&gt; (SELECT COUNT(*) FROM tempdb.sys.database_files)
				BEGIN
					INSERT    INTO [#BlitzResults]
							( [CheckID] ,
								[Priority] ,
								[FindingsGroup] ,
								[Finding] ,
								[URL] ,
								[Details] )						
						
						SELECT
						191 AS [CheckID] ,
						50 AS [Priority] ,
						'Reliability' AS [FindingsGroup] ,
						'TempDB File Error' AS [Finding] ,
						'http://BrentOzar.com/go/tempdboops' AS [URL] , 
						'Mismatch between the number of TempDB files in sys.master_files versus tempdb.sys.database_files' AS [Details]
				END


				IF @CheckUserDatabaseObjects = 1
					BEGIN

                        /*
                        But what if you need to run a query in every individual database?
				        Check out CheckID 99 below. Yes, it uses sp_MSforeachdb, and no,
				        we're not happy about that. sp_MSforeachdb is known to have a lot
				        of issues, like skipping databases sometimes. However, this is the
				        only built-in option that we have. If you're writing your own code
				        for database maintenance, consider Aaron Bertrand's alternative:
				        http://www.mssqltips.com/sqlservertip/2201/making-a-more-reliable-and-flexible-spmsforeachdb/
				        We don't include that as part of sp_Blitz, of course, because
				        copying and distributing copyrighted code from others without their
				        written permission isn't a good idea.
				        */
				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 99 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'USE [?];  IF EXISTS (SELECT * FROM  sys.tables WITH (NOLOCK) WHERE name = ''sysmergepublications'' ) IF EXISTS ( SELECT * FROM sysmergepublications WITH (NOLOCK) WHERE retention = 0)   INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 99, DB_NAME(), 110, ''Performance'', ''Infinite merge replication metadata retention period'', ''http://BrentOzar.com/go/merge'', (''The ['' + DB_NAME() + ''] database has merge replication metadata retention period set to infinite - this can be the case of significant performance issues.'')';
					        END
				        /*
				        Note that by using sp_MSforeachdb, we're running the query in all
				        databases. We're not checking #SkipChecks here for each database to
				        see if we should run the check in this database. That means we may
				        still run a skipped check if it involves sp_MSforeachdb. We just
				        don't output those results in the last step.
                        */


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 163 )
                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'database_query_store_options')
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			                            INSERT INTO #BlitzResults
			                            (CheckID,
			                            DatabaseName,
			                            Priority,
			                            FindingsGroup,
			                            Finding,
			                            URL,
			                            Details)
		                              SELECT TOP 1 163,
		                              ''?'',
		                              10,
		                              ''Performance'',
		                              ''Query Store Disabled'',
		                              ''http://BrentOzar.com/go/querystore'',
		                              (''The new SQL Server 2016 Query Store feature has not been enabled on this database.'')
		                              FROM [?].sys.database_query_store_options WHERE desired_state = 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''DWConfiguration'', ''DWDiagnostics'', ''DWQueue'', ''ReportServer'', ''ReportServerTempDB'')';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 182 )
                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'database_query_store_options')
							AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Enterprise%'
							AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Developer%'
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			                            INSERT INTO #BlitzResults
			                            (CheckID,
			                            DatabaseName,
			                            Priority,
			                            FindingsGroup,
			                            Finding,
			                            URL,
			                            Details)
		                              SELECT TOP 1 182,
		                              ''?'',
		                              20,
		                              ''Reliability'',
		                              ''Query Store Cleanup Disabled'',
		                              ''http://BrentOzar.com/go/cleanup'',
		                              (''SQL 2016 RTM has a bug involving dumps that happen every time Query Store cleanup jobs run.'')
		                              FROM [?].sys.database_query_store_options WHERE desired_state &lt;&gt; 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''DWConfiguration'', ''DWDiagnostics'', ''DWQueue'', ''ReportServer'', ''ReportServerTempDB'')';
							END


				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 41 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'use [?];
		                              INSERT INTO #BlitzResults
		                              (CheckID,
		                              DatabaseName,
		                              Priority,
		                              FindingsGroup,
		                              Finding,
		                              URL,
		                              Details)
		                              SELECT 41,
		                              ''?'',
		                              170,
		                              ''File Configuration'',
		                              ''Multiple Log Files on One Drive'',
		                              ''http://BrentOzar.com/go/manylogs'',
		                              (''The ['' + DB_NAME() + ''] database has multiple log files on the '' + LEFT(physical_name, 1) + '' drive. This is not a performance booster because log file access is sequential, not parallel.'')
		                              FROM [?].sys.database_files WHERE type_desc = ''LOG''
			                            AND ''?'' &lt;&gt; ''[tempdb]''
		                              GROUP BY LEFT(physical_name, 1)
		                              HAVING COUNT(*) &gt; 1';
					        END

				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 42 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'use [?];
			                            INSERT INTO #BlitzResults
			                            (CheckID,
			                            DatabaseName,
			                            Priority,
			                            FindingsGroup,
			                            Finding,
			                            URL,
			                            Details)
			                            SELECT DISTINCT 42,
			                            ''?'',
			                            170,
			                            ''File Configuration'',
			                            ''Uneven File Growth Settings in One Filegroup'',
			                            ''http://BrentOzar.com/go/grow'',
			                            (''The ['' + DB_NAME() + ''] database has multiple data files in one filegroup, but they are not all set up to grow in identical amounts.  This can lead to uneven file activity inside the filegroup.'')
			                            FROM [?].sys.database_files
			                            WHERE type_desc = ''ROWS''
			                            GROUP BY data_space_id
			                            HAVING COUNT(DISTINCT growth) &gt; 1 OR COUNT(DISTINCT is_percent_growth) &gt; 1';
					        END


				            IF NOT EXISTS ( SELECT  1
								            FROM    #SkipChecks
								            WHERE   DatabaseName IS NULL AND CheckID = 82 )
					            BEGIN
						            EXEC sp_MSforeachdb 'use [?];
		                                INSERT INTO #BlitzResults
		                                (CheckID,
		                                DatabaseName,
		                                Priority,
		                                FindingsGroup,
		                                Finding,
		                                URL, Details)
		                                SELECT  DISTINCT 82 AS CheckID,
		                                ''?'' as DatabaseName,
		                                170 AS Priority,
		                                ''File Configuration'' AS FindingsGroup,
		                                ''File growth set to percent'',
		                                ''http://brentozar.com/go/percentgrowth'' AS URL,
		                                ''The ['' + DB_NAME() + ''] database file '' + f.physical_name + '' has grown to '' + CAST((f.size * 8 / 1000000) AS NVARCHAR(10)) + '' GB, and is using percent filegrowth settings. This can lead to slow performance during growths if Instant File Initialization is not enabled.''
		                                FROM    [?].sys.database_files f
		                                WHERE   is_percent_growth = 1 and size &gt; 128000 ';
					            END



                            /* addition by Henrik Staun Poulsen, Stovi Software */
				            IF NOT EXISTS ( SELECT  1
								            FROM    #SkipChecks
								            WHERE   DatabaseName IS NULL AND CheckID = 158 )
					            BEGIN
						            EXEC sp_MSforeachdb 'use [?];
		                                INSERT INTO #BlitzResults
		                                (CheckID,
		                                DatabaseName,
		                                Priority,
		                                FindingsGroup,
		                                Finding,
		                                URL, Details)
		                                SELECT  DISTINCT 158 AS CheckID,
		                                ''?'' as DatabaseName,
		                                170 AS Priority,
		                                ''File Configuration'' AS FindingsGroup,
		                                ''File growth set to 1MB'',
		                                ''http://brentozar.com/go/percentgrowth'' AS URL,
		                                ''The ['' + DB_NAME() + ''] database file '' + f.physical_name + '' is using 1MB filegrowth settings, but it has grown to '' + CAST((f.size * 8 / 1000000) AS NVARCHAR(10)) + '' GB. Time to up the growth amount.''
		                                FROM    [?].sys.database_files f
                                        WHERE is_percent_growth = 0 and growth=128 and size &gt; 128000 ';
					            END



				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 33 )
					        BEGIN
						        IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							        AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							        BEGIN
								        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults
					                                (CheckID,
					                                DatabaseName,
					                                Priority,
					                                FindingsGroup,
					                                Finding,
					                                URL,
					                                Details)
		                                  SELECT DISTINCT 33,
		                                  db_name(),
		                                  200,
		                                  ''Licensing'',
		                                  ''Enterprise Edition Features In Use'',
		                                  ''http://BrentOzar.com/go/ee'',
		                                  (''The ['' + DB_NAME() + ''] database is using '' + feature_name + ''.  If this database is restored onto a Standard Edition server, the restore will fail.'')
		                                  FROM [?].sys.dm_db_persisted_sku_features';
							        END;
					        END


				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 19 )
					        BEGIN
						        /* Method 1: Check sys.databases parameters */
						        INSERT  INTO #BlitzResults
								        ( CheckID ,
								          DatabaseName ,
								          Priority ,
								          FindingsGroup ,
								          Finding ,
								          URL ,
								          Details
								        )

								        SELECT  19 AS CheckID ,
										        [name] AS DatabaseName ,
										        200 AS Priority ,
										        'Informational' AS FindingsGroup ,
										        'Replication In Use' AS Finding ,
										        'http://BrentOzar.com/go/repl' AS URL ,
										        ( 'Database [' + [name]
										          + '] is a replication publisher, subscriber, or distributor.' ) AS Details
								        FROM    sys.databases
								        WHERE   name NOT IN ( SELECT DISTINCT
																        DatabaseName
													          FROM      #SkipChecks 
													          WHERE CheckID IS NULL)
										        AND is_published = 1
										        OR is_subscribed = 1
										        OR is_merge_published = 1
										        OR is_distributor = 1;

						        /* Method B: check subscribers for MSreplication_objects tables */
						        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults
										        (CheckID,
										        DatabaseName,
										        Priority,
										        FindingsGroup,
										        Finding,
										        URL,
										        Details)
							          SELECT DISTINCT 19,
							          db_name(),
							          200,
							          ''Informational'',
							          ''Replication In Use'',
							          ''http://BrentOzar.com/go/repl'',
							          (''['' + DB_NAME() + ''] has MSreplication_objects tables in it, indicating it is a replication subscriber.'')
							          FROM [?].sys.tables
							          WHERE name = ''dbo.MSreplication_objects'' AND ''?'' &lt;&gt; ''master''';

					        END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 32 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
			SELECT 32,
			''?'',
			150,
			''Performance'',
			''Triggers on Tables'',
			''http://BrentOzar.com/go/trig'',
			(''The ['' + DB_NAME() + ''] database has '' + CAST(SUM(1) AS NVARCHAR(50)) + '' triggers.'')
			FROM [?].sys.triggers t INNER JOIN [?].sys.objects o ON t.parent_id = o.object_id
			INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id WHERE t.is_ms_shipped = 0 AND DB_NAME() != ''ReportServer''
			HAVING SUM(1) &gt; 0';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 38 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
		  SELECT DISTINCT 38,
		  ''?'',
		  110,
		  ''Performance'',
		  ''Active Tables Without Clustered Indexes'',
		  ''http://BrentOzar.com/go/heaps'',
		  (''The ['' + DB_NAME() + ''] database has heaps - tables without a clustered index - that are being actively queried.'')
		  FROM [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id
		  INNER JOIN [?].sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
		  INNER JOIN sys.databases sd ON sd.name = ''?''
		  LEFT OUTER JOIN [?].sys.dm_db_index_usage_stats ius ON i.object_id = ius.object_id AND i.index_id = ius.index_id AND ius.database_id = sd.database_id
		  WHERE i.type_desc = ''HEAP'' AND COALESCE(ius.user_seeks, ius.user_scans, ius.user_lookups, ius.user_updates) IS NOT NULL
		  AND sd.name &lt;&gt; ''tempdb'' AND sd.name &lt;&gt; ''DWDiagnostics'' AND o.is_ms_shipped = 0 AND o.type &lt;&gt; ''S''';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 164 )
                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'fn_validate_plan_guide')
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
		  SELECT DISTINCT 164,
		  ''?'',
		  20,
		  ''Reliability'',
		  ''Plan Guides Failing'',
		  ''http://BrentOzar.com/go/misguided'',
		  (''The ['' + DB_NAME() + ''] database has plan guides that are no longer valid, so the queries involved may be failing silently.'')
		  FROM [?].sys.plan_guides g CROSS APPLY fn_validate_plan_guide(g.plan_guide_id)';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 39 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
		  SELECT DISTINCT 39,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Inactive Tables Without Clustered Indexes'',
		  ''http://BrentOzar.com/go/heaps'',
		  (''The ['' + DB_NAME() + ''] database has heaps - tables without a clustered index - that have not been queried since the last restart.  These may be backup tables carelessly left behind.'')
		  FROM [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id
		  INNER JOIN [?].sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
		  INNER JOIN sys.databases sd ON sd.name = ''?''
		  LEFT OUTER JOIN [?].sys.dm_db_index_usage_stats ius ON i.object_id = ius.object_id AND i.index_id = ius.index_id AND ius.database_id = sd.database_id
		  WHERE i.type_desc = ''HEAP'' AND COALESCE(ius.user_seeks, ius.user_scans, ius.user_lookups, ius.user_updates) IS NULL
		  AND sd.name &lt;&gt; ''tempdb'' AND sd.name &lt;&gt; ''DWDiagnostics'' AND o.is_ms_shipped = 0 AND o.type &lt;&gt; ''S''';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 46 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 46,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Leftover Fake Indexes From Wizards'',
		  ''http://BrentOzar.com/go/hypo'',
		  (''The index ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is a leftover hypothetical index from the Index Tuning Wizard or Database Tuning Advisor.  This index is not actually helping performance and should be removed.'')
		  from [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_hypothetical = 1';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 47 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 47,
		  ''?'',
		  100,
		  ''Performance'',
		  ''Indexes Disabled'',
		  ''http://BrentOzar.com/go/ixoff'',
		  (''The index ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is disabled.  This index is not actually helping performance and should either be enabled or removed.'')
		  from [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_disabled = 1';
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 48 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT 48,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Foreign Keys Not Trusted'',
		  ''http://BrentOzar.com/go/trust'',
		  (''The ['' + DB_NAME() + ''] database has foreign keys that were probably disabled, data was changed, and then the key was enabled again.  Simply enabling the key is not enough for the optimizer to use this key - we have to alter the table using the WITH CHECK CHECK CONSTRAINT parameter.'')
		  from [?].sys.foreign_keys i INNER JOIN [?].sys.objects o ON i.parent_object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_not_trusted = 1 AND i.is_not_for_replication = 0 AND i.is_disabled = 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''ReportServer'', ''ReportServerTempDB'')';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 56 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 56,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Check Constraint Not Trusted'',
		  ''http://BrentOzar.com/go/trust'',
		  (''The check constraint ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is not trusted - meaning, it was disabled, data was changed, and then the constraint was enabled again.  Simply enabling the constraint is not enough for the optimizer to use this constraint - we have to alter the table using the WITH CHECK CHECK CONSTRAINT parameter.'')
		  from [?].sys.check_constraints i INNER JOIN [?].sys.objects o ON i.parent_object_id = o.object_id
		  INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_not_trusted = 1 AND i.is_not_for_replication = 0 AND i.is_disabled = 0';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 95 )
							BEGIN
								IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
									AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
									BEGIN
										EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
				  (CheckID,
				  DatabaseName,
				  Priority,
				  FindingsGroup,
				  Finding,
				  URL,
				  Details)
			SELECT TOP 1 95 AS CheckID,
			''?'' as DatabaseName,
			110 AS Priority,
			''Performance'' AS FindingsGroup,
			''Plan Guides Enabled'' AS Finding,
			''http://BrentOzar.com/go/guides'' AS URL,
			(''Database ['' + DB_NAME() + ''] has query plan guides so a query will always get a specific execution plan. If you are having trouble getting query performance to improve, it might be due to a frozen plan. Review the DMV sys.plan_guides to learn more about the plan guides in place on this server.'') AS Details
			FROM [?].sys.plan_guides WHERE is_disabled = 0'
									END;
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 60 )
							BEGIN
								EXEC sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT  DISTINCT 60 AS CheckID,
		  ''?'' as DatabaseName,
		  100 AS Priority,
		  ''Performance'' AS FindingsGroup,
		  ''Fill Factor Changed'',
		  ''http://brentozar.com/go/fillfactor'' AS URL,
		  ''The ['' + DB_NAME() + ''] database has objects with fill factor &lt; 80%. This can cause memory and storage performance problems, but may also prevent page splits.''
		  FROM    [?].sys.indexes
		  WHERE   fill_factor &lt;&gt; 0 AND fill_factor &lt; 80 AND is_disabled = 0 AND is_hypothetical = 0';
							END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 78 )
							BEGIN
                                EXECUTE master.sys.sp_MSforeachdb 'USE [?]; 
                                    INSERT INTO #Recompile 
                                    SELECT DBName = DB_Name(), SPName = SO.name, SM.is_recompiled, ISR.SPECIFIC_SCHEMA 
                                    FROM sys.sql_modules AS SM 
                                    LEFT OUTER JOIN master.sys.databases AS sDB ON SM.object_id = DB_id() 
                                    LEFT OUTER JOIN dbo.sysobjects AS SO ON SM.object_id = SO.id and type = ''P'' 
                                    LEFT OUTER JOIN INFORMATION_SCHEMA.ROUTINES AS ISR on ISR.Routine_Name = SO.name AND ISR.SPECIFIC_CATALOG = DB_Name()
                                    WHERE SM.is_recompiled=1 
                                    ' 
                                INSERT INTO #BlitzResults
													(Priority,
													FindingsGroup,
                                                    Finding,
                                                    DatabaseName,
                                                    URL,
                                                    Details,
                                                    CheckID)
                                SELECT [Priority] = '100', 
                                    FindingsGroup = 'Performance', 
                                    Finding = 'Stored Procedure WITH RECOMPILE',
                                    DatabaseName = DBName,
                                    URL = 'http://BrentOzar.com/go/recompile',
                                    Details = '[' + DBName + '].[' + SPSchema + '].[' + ProcName + '] has WITH RECOMPILE in the stored procedure code, which may cause increased CPU usage due to constant recompiles of the code.',
                                    CheckID = '78'
                                FROM #Recompile AS TR WHERE ProcName NOT LIKE 'sp_AskBrent%' AND ProcName NOT LIKE 'sp_Blitz%' 
                                DROP TABLE #Recompile;
                            END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 86 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 86, DB_NAME(), 230, ''Security'', ''Elevated Permissions on a Database'', ''http://BrentOzar.com/go/elevated'', (''In ['' + DB_NAME() + ''], user ['' + u.name + '']  has the role ['' + g.name + ''].  This user can perform tasks beyond just reading and writing data.'') FROM [?].dbo.sysmembers m inner join [?].dbo.sysusers u on m.memberuid = u.uid inner join sysusers g on m.groupuid = g.uid where u.name &lt;&gt; ''dbo'' and g.name in (''db_owner'' , ''db_accessadmin'' , ''db_securityadmin'' , ''db_ddladmin'')';
							END


							/*Check for non-aligned indexes in partioned databases*/

										IF NOT EXISTS ( SELECT  1
														FROM    #SkipChecks
														WHERE   DatabaseName IS NULL AND CheckID = 72 )
											BEGIN
												EXEC dbo.sp_MSforeachdb 'USE [?];
								insert into #partdb(dbname, objectname, type_desc)
								SELECT distinct db_name(DB_ID()) as DBName,o.name Object_Name,ds.type_desc
								FROM sys.objects AS o JOIN sys.indexes AS i ON o.object_id = i.object_id
								JOIN sys.data_spaces ds on ds.data_space_id = i.data_space_id
								LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s ON i.object_id = s.object_id AND i.index_id = s.index_id AND s.database_id = DB_ID()
								WHERE  o.type = ''u''
								 -- Clustered and Non-Clustered indexes
								AND i.type IN (1, 2)
								AND o.object_id in
								  (
									SELECT a.object_id from
									  (SELECT ob.object_id, ds.type_desc from sys.objects ob JOIN sys.indexes ind on ind.object_id = ob.object_id join sys.data_spaces ds on ds.data_space_id = ind.data_space_id
									  GROUP BY ob.object_id, ds.type_desc ) a group by a.object_id having COUNT (*) &gt; 1
								  )'
												INSERT  INTO #BlitzResults
														( CheckID ,
														  DatabaseName ,
														  Priority ,
														  FindingsGroup ,
														  Finding ,
														  URL ,
														  Details
														)
														SELECT DISTINCT
																72 AS CheckID ,
																dbname AS DatabaseName ,
																100 AS Priority ,
																'Performance' AS FindingsGroup ,
																'The partitioned database ' + dbname
																+ ' may have non-aligned indexes' AS Finding ,
																'http://BrentOzar.com/go/aligned' AS URL ,
																'Having non-aligned indexes on partitioned tables may cause inefficient query plans and CPU pressure' AS Details
														FROM    #partdb
														WHERE   dbname IS NOT NULL
																AND dbname NOT IN ( SELECT DISTINCT
																						  DatabaseName
																					FROM  #SkipChecks 
																					WHERE CheckID IS NULL)
												DROP TABLE #partdb
											END


					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 113 )
									BEGIN
							  EXEC dbo.sp_MSforeachdb 'USE [?];
							  INSERT INTO #BlitzResults
									(CheckID,
									DatabaseName,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
							  SELECT DISTINCT 113,
							  ''?'',
							  50,
							  ''Reliability'',
							  ''Full Text Indexes Not Updating'',
							  ''http://BrentOzar.com/go/fulltext'',
							  (''At least one full text index in this database has not been crawled in the last week.'')
							  from [?].sys.fulltext_indexes i WHERE change_tracking_state_desc &lt;&gt; ''AUTO'' AND i.is_enabled = 1 AND i.crawl_end_date &lt; DATEADD(dd, -7, GETDATE())';
												END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 115 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 115,
		  ''?'',
		  110,
		  ''Performance'',
		  ''Parallelism Rocket Surgery'',
		  ''http://BrentOzar.com/go/makeparallel'',
		  (''['' + DB_NAME() + ''] has a make_parallel function, indicating that an advanced developer may be manhandling SQL Server into forcing queries to go parallel.'')
		  from [?].INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = ''make_parallel'' AND ROUTINE_TYPE = ''FUNCTION''';
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 122 )
							BEGIN
								/* SQL Server 2012 and newer uses temporary stats for AlwaysOn Availability Groups, and those show up as user-created */
								IF EXISTS (SELECT *
									  FROM sys.all_columns c
									  INNER JOIN sys.all_objects o ON c.object_id = o.object_id
									  WHERE c.name = 'is_temporary' AND o.name = 'stats')

										EXEC dbo.sp_MSforeachdb 'USE [?];
												INSERT INTO #BlitzResults
													(CheckID,
													DatabaseName,
													Priority,
													FindingsGroup,
													Finding,
													URL,
													Details)
												SELECT TOP 1 122,
												''?'',
												200,
												''Performance'',
												''User-Created Statistics In Place'',
												''http://BrentOzar.com/go/userstats'',
												(''['' + DB_NAME() + ''] has '' + CAST(SUM(1) AS NVARCHAR(10)) + '' user-created statistics. This indicates that someone is being a rocket scientist with the stats, and might actually be slowing things down, especially during stats updates.'')
												from [?].sys.stats WHERE user_created = 1 AND is_temporary = 0
                                                HAVING SUM(1) &gt; 0;';

									ELSE
										EXEC dbo.sp_MSforeachdb 'USE [?];
												INSERT INTO #BlitzResults
													(CheckID,
													DatabaseName,
													Priority,
													FindingsGroup,
													Finding,
													URL,
													Details)
												SELECT 122,
												''?'',
												200,
												''Performance'',
												''User-Created Statistics In Place'',
												''http://BrentOzar.com/go/userstats'',
												(''['' + DB_NAME() + ''] has '' + CAST(SUM(1) AS NVARCHAR(10)) + '' user-created statistics. This indicates that someone is being a rocket scientist with the stats, and might actually be slowing things down, especially during stats updates.'')
												from [?].sys.stats WHERE user_created = 1
                                                HAVING SUM(1) &gt; 0;';


							END /* IF NOT EXISTS ( SELECT  1 */


		        /*Check for high VLF count: this will omit any database snapshots*/

				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 69 )
					        BEGIN
						        IF @ProductVersionMajor &gt;= 11

							        BEGIN
								        EXEC sp_MSforeachdb N'USE [?];
		                                      INSERT INTO #LogInfo2012
		                                      EXEC sp_executesql N''DBCC LogInfo() WITH NO_INFOMSGS'';
		                                      IF    @@ROWCOUNT &gt; 999
		                                      BEGIN
			                                    INSERT  INTO #BlitzResults
			                                    ( CheckID
			                                    ,DatabaseName
			                                    ,Priority
			                                    ,FindingsGroup
			                                    ,Finding
			                                    ,URL
			                                    ,Details)
			                                    SELECT      69
			                                    ,DB_NAME()
			                                    ,170
			                                    ,''File Configuration''
			                                    ,''High VLF Count''
			                                    ,''http://BrentOzar.com/go/vlf''
			                                    ,''The ['' + DB_NAME() + ''] database has '' +  CAST(COUNT(*) as VARCHAR(20)) + '' virtual log files (VLFs). This may be slowing down startup, restores, and even inserts/updates/deletes.''
			                                    FROM #LogInfo2012
			                                    WHERE EXISTS (SELECT name FROM master.sys.databases
					                                    WHERE source_database_id is null) ;
		                                      END
		                                    TRUNCATE TABLE #LogInfo2012;'
								        DROP TABLE #LogInfo2012;
							        END
						        ELSE
							        BEGIN
								        EXEC sp_MSforeachdb N'USE [?];
		                                      INSERT INTO #LogInfo
		                                      EXEC sp_executesql N''DBCC LogInfo() WITH NO_INFOMSGS'';
		                                      IF    @@ROWCOUNT &gt; 999
		                                      BEGIN
			                                    INSERT  INTO #BlitzResults
			                                    ( CheckID
			                                    ,DatabaseName
			                                    ,Priority
			                                    ,FindingsGroup
			                                    ,Finding
			                                    ,URL
			                                    ,Details)
			                                    SELECT      69
			                                    ,DB_NAME()
			                                    ,170
			                                    ,''File Configuration''
			                                    ,''High VLF Count''
			                                    ,''http://BrentOzar.com/go/vlf''
			                                    ,''The ['' + DB_NAME() + ''] database has '' +  CAST(COUNT(*) as VARCHAR(20)) + '' virtual log files (VLFs). This may be slowing down startup, restores, and even inserts/updates/deletes.''
			                                    FROM #LogInfo
			                                    WHERE EXISTS (SELECT name FROM master.sys.databases
			                                    WHERE source_database_id is null);
		                                      END
		                                      TRUNCATE TABLE #LogInfo;'
								        DROP TABLE #LogInfo;
							        END
					        END


				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 80 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 80, DB_NAME(), 170, ''Reliability'', ''Max File Size Set'', ''http://BrentOzar.com/go/maxsize'', (''The ['' + DB_NAME() + ''] database file '' + name + '' has a max file size set to '' + CAST(CAST(max_size AS BIGINT) * 8 / 1024 AS VARCHAR(100)) + ''MB. If it runs out of space, the database will stop working even though there may be drive space available.'') FROM sys.database_files WHERE max_size &lt;&gt; 268435456 AND max_size &lt;&gt; -1 AND type &lt;&gt; 2 AND name &lt;&gt; ''DWDiagnostics'' ';
					        END

	
						/* Check if columnstore indexes are in use - for Github issue #615 */
				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 74 ) /* Trace flags */
					        BEGIN
								TRUNCATE TABLE #TemporaryDatabaseResults;
						        EXEC dbo.sp_MSforeachdb 'USE [?]; IF EXISTS(SELECT * FROM sys.indexes WHERE type IN (5,6)) INSERT INTO #TemporaryDatabaseResults (DatabaseName, Finding) VALUES (DB_NAME(), ''Yup'')';
								IF EXISTS (SELECT * FROM #TemporaryDatabaseResults) SET @ColumnStoreIndexesInUse = 1;
					        END


						/* Non-Default Database Scoped Config - Github issue #598 */
				        IF EXISTS ( SELECT * FROM sys.all_objects WHERE [name] = 'database_scoped_configurations' )
					        BEGIN
								INSERT INTO #DatabaseScopedConfigurationDefaults (configuration_id, [name], default_value, default_value_for_secondary, CheckID)
									SELECT 1, 'MAXDOP', 0, NULL, 194
									UNION ALL
									SELECT 2, 'LEGACY_CARDINALITY_ESTIMATION', 0, NULL, 195
									UNION ALL
									SELECT 3, 'PARAMETER_SNIFFING', 1, NULL, 196
									UNION ALL
									SELECT 4, 'QUERY_OPTIMIZER_HOTFIXES', 0, NULL, 197;
						        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) 
									SELECT def1.CheckID, DB_NAME(), 210, ''Non-Default Database Scoped Config'', dsc.[name], ''http://BrentOzar.com/go/dbscope'', (''Set value: '' + COALESCE(CAST(dsc.value AS NVARCHAR(100)),''Empty'') + '' Default: '' + COALESCE(CAST(def1.default_value AS NVARCHAR(100)),''Empty'') + '' Set value for secondary: '' + COALESCE(CAST(dsc.value_for_secondary AS NVARCHAR(100)),''Empty'') + '' Default value for secondary: '' + COALESCE(CAST(def1.default_value_for_secondary AS NVARCHAR(100)),''Empty''))
									FROM [?].sys.database_scoped_configurations dsc 
									INNER JOIN #DatabaseScopedConfigurationDefaults def1 ON dsc.configuration_id = def1.configuration_id
									LEFT OUTER JOIN #DatabaseScopedConfigurationDefaults def ON dsc.configuration_id = def.configuration_id AND (dsc.value = def.default_value OR dsc.value IS NULL) AND (dsc.value_for_secondary = def.default_value_for_secondary OR dsc.value_for_secondary IS NULL)
									LEFT OUTER JOIN #SkipChecks sk ON def.CheckID = sk.CheckID AND (sk.DatabaseName IS NULL OR sk.DatabaseName = DB_NAME())
									WHERE def.configuration_id IS NULL AND sk.CheckID IS NULL ORDER BY 1';
					        END



	
					END /* IF @CheckUserDatabaseObjects = 1 */

				IF @CheckProcedureCache = 1
					BEGIN

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 35 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  35 AS CheckID ,
												100 AS Priority ,
												'Performance' AS FindingsGroup ,
												'Single-Use Plans in Procedure Cache' AS Finding ,
												'http://BrentOzar.com/go/single' AS URL ,
												( CAST(COUNT(*) AS VARCHAR(10))
												  + ' query plans are taking up memory in the procedure cache. This may be wasted memory if we cache plans for queries that never get called again. This may be a good use case for SQL Server 2008''s Optimize for Ad Hoc or for Forced Parameterization.' ) AS Details
										FROM    sys.dm_exec_cached_plans AS cp
										WHERE   cp.usecounts = 1
												AND cp.objtype = 'Adhoc'
												AND EXISTS ( SELECT
																  1
															 FROM sys.configurations
															 WHERE
																  name = 'optimize for ad hoc workloads'
																  AND value_in_use = 0 )
										HAVING  COUNT(*) &gt; 1;
							END


		  /* Set up the cache tables. Different on 2005 since it doesn't support query_hash, query_plan_hash. */
						IF @@VERSION LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								IF @CheckProcedureCacheFilter = 'CPU'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			  FROM sys.dm_exec_query_stats qs
			  ORDER BY qs.total_worker_time DESC)
			  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			  FROM queries qs
			  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
			  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Reads'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_logical_reads DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'ExecCount'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.execution_count DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Duration'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			FROM sys.dm_exec_query_stats qs
			ORDER BY qs.total_elapsed_time DESC)
			INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			FROM queries qs
			LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
			WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

							END;
						IF @ProductVersionMajor &gt;= 10
							BEGIN
								IF @CheckProcedureCacheFilter = 'CPU'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_worker_time DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Reads'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_logical_reads DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'ExecCount'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.execution_count DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Duration'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_elapsed_time DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

		/* Populate the query_plan_filtered field. Only works in 2005SP2+, but we're just doing it in 2008 to be safe. */
								UPDATE  #dm_exec_query_stats
								SET     query_plan_filtered = qp.query_plan
								FROM    #dm_exec_query_stats qs
										CROSS APPLY sys.dm_exec_text_query_plan(qs.plan_handle,
																  qs.statement_start_offset,
																  qs.statement_end_offset)
										AS qp

							END;

		/* Populate the additional query_plan, text, and text_filtered fields */
						UPDATE  #dm_exec_query_stats
						SET     query_plan = qp.query_plan ,
								[text] = st.[text] ,
								text_filtered = SUBSTRING(st.text,
														  ( qs.statement_start_offset
															/ 2 ) + 1,
														  ( ( CASE qs.statement_end_offset
																WHEN -1
																THEN DATALENGTH(st.text)
																ELSE qs.statement_end_offset
															  END
															  - qs.statement_start_offset )
															/ 2 ) + 1)
						FROM    #dm_exec_query_stats qs
								CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st
								CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle)
								AS qp

		/* Dump instances of our own script. We're not trying to tune ourselves. */
						DELETE  #dm_exec_query_stats
						WHERE   text LIKE '%sp_Blitz%'
								OR text LIKE '%#BlitzResults%'

		/* Look for implicit conversions */

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 63 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  63 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Implicit Conversion' AS Finding ,
												'http://BrentOzar.com/go/implicit' AS URL ,
												( 'One of the top resource-intensive queries is comparing two fields that are not the same datatype.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%CONVERT_IMPLICIT%'
												AND COALESCE(qs.query_plan_filtered,
															 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%PhysicalOp="Index Scan"%'
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 64 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  64 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Implicit Conversion Affecting Cardinality' AS Finding ,
												'http://BrentOzar.com/go/implicit' AS URL ,
												( 'One of the top resource-intensive queries has an implicit conversion that is affecting cardinality estimation.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%&lt;PlanAffectingConvert ConvertIssue="Cardinality Estimate" Expression="CONVERT_IMPLICIT%'
							END

							/* @cms4j, 29.11.2013: Look for RID or Key Lookups */
							IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 118 )
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details ,
											  QueryPlan ,
											  QueryPlanFiltered
											)
											SELECT  118 AS CheckID ,
													120 AS Priority ,
													'Query Plans' AS FindingsGroup ,
													'RID or Key Lookups' AS Finding ,
													'http://BrentOzar.com/go/lookup' AS URL ,
													'One of the top resource-intensive queries contains RID or Key Lookups. Try to avoid them by creating covering indexes.' AS Details ,
													qs.query_plan ,
													qs.query_plan_filtered
											FROM    #dm_exec_query_stats qs
											WHERE   COALESCE(qs.query_plan_filtered,
															 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%Lookup="1"%'
								END /* @cms4j, 29.11.2013: Look for RID or Key Lookups */


						/* Look for missing indexes */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 65 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  65 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Missing Index' AS Finding ,
												'http://BrentOzar.com/go/missingindex' AS URL ,
												( 'One of the top resource-intensive queries may be dramatically improved by adding an index.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%MissingIndexGroup%'
							END

						/* Look for cursors */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 66 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  66 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Cursor' AS Finding ,
												'http://BrentOzar.com/go/cursor' AS URL ,
												( 'One of the top resource-intensive queries is using a cursor.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%&lt;StmtCursor%'
							END

		/* Look for scalar user-defined functions */

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 67 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  67 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Scalar UDFs' AS Finding ,
												'http://BrentOzar.com/go/functions' AS URL ,
												( 'One of the top resource-intensive queries is using a user-defined scalar function that may inhibit parallelism.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%&lt;UserDefinedFunction%'
							END

					END /* IF @CheckProcedureCache = 1 */
									  
		/*Check to see if the HA endpoint account is set at the same as the SQL Server Service Account*/
		IF @ProductVersionMajor &gt;= 10
								AND NOT EXISTS ( SELECT 1
								FROM #SkipChecks
								WHERE DatabaseName IS NULL AND CheckID = 187 )

		IF SERVERPROPERTY('IsHadrEnabled') = 1
    		BEGIN
                INSERT    INTO [#BlitzResults]
                               	( [CheckID] ,
                                [Priority] ,
                                [FindingsGroup] ,
                                [Finding] ,
                                [URL] ,
                                [Details] )
               	SELECT
                        187 AS [CheckID] ,
                        230 AS [Priority] ,
                        'Security' AS [FindingsGroup] ,
                        'Endpoints Owned by Users' AS [Finding] ,
                       	'http://BrentOzar.com/go/owners' AS [URL] ,
                        ( 'Endpoint ' + ep.[name] + ' is owned by ' + SUSER_NAME(ep.principal_id) + '. If the endpoint owner login is disabled or not available due to Active Directory problems, the high availability will stop working.'
                        ) AS [Details]
					FROM sys.database_mirroring_endpoints ep
					LEFT OUTER JOIN sys.dm_server_services s ON SUSER_NAME(ep.principal_id) = s.service_account
					WHERE s.service_account IS NULL;
    		END

		/*Check for the last good DBCC CHECKDB date */
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 68 )
					BEGIN
						EXEC sp_MSforeachdb N'USE [?];
						INSERT #DBCCs
							(ParentObject,
							Object,
							Field,
							Value)
						EXEC (''DBCC DBInfo() With TableResults, NO_INFOMSGS'');
						UPDATE #DBCCs SET DbName = N''?'' WHERE DbName IS NULL;';

						WITH    DB2
								  AS ( SELECT DISTINCT
												Field ,
												Value ,
												DbName
									   FROM     #DBCCs
									   WHERE    Field = 'dbi_dbccLastKnownGood'
									 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  DatabaseName ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  68 AS CheckID ,
											DB2.DbName AS DatabaseName ,
											1 AS PRIORITY ,
											'Reliability' AS FindingsGroup ,
											'Last good DBCC CHECKDB over 2 weeks old' AS Finding ,
											'http://BrentOzar.com/go/checkdb' AS URL ,
											'Last successful CHECKDB: '
											+ CASE DB2.Value
												WHEN '1900-01-01 00:00:00.000'
												THEN ' never.'
												ELSE DB2.Value
											  END AS Details
									FROM    DB2
									WHERE   DB2.DbName &lt;&gt; 'tempdb'
											AND DB2.DbName NOT IN ( SELECT DISTINCT
																  DatabaseName
																FROM
																  #SkipChecks 
																WHERE CheckID IS NULL)
											AND CONVERT(DATETIME, DB2.Value, 121) &lt; DATEADD(DD,
																  -14,
																  CURRENT_TIMESTAMP)
					END




	/*Verify that the servername is set */
			IF NOT EXISTS ( SELECT  1
							FROM    #SkipChecks
							WHERE   DatabaseName IS NULL AND CheckID = 70 )
				BEGIN
					IF @@SERVERNAME IS NULL
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  70 AS CheckID ,
											200 AS Priority ,
											'Informational' AS FindingsGroup ,
											'@@Servername Not Set' AS Finding ,
											'http://BrentOzar.com/go/servername' AS URL ,
											'@@Servername variable is null. You can fix it by executing: "sp_addserver ''&lt;LocalServerName&gt;'', local"' AS Details
						END;

					IF  /* @@SERVERNAME IS set */
						(@@SERVERNAME IS NOT NULL
						AND
						/* not a named instance */
						CHARINDEX('\',CAST(SERVERPROPERTY('ServerName') AS NVARCHAR)) = 0
						AND
						/* not clustered, when computername may be different than the servername */
						SERVERPROPERTY('IsClustered') = 0
						AND
						/* @@SERVERNAME is different than the computer name */
						@@SERVERNAME &lt;&gt; CAST(ISNULL(SERVERPROPERTY('ComputerNamePhysicalNetBIOS'),@@SERVERNAME) AS NVARCHAR) )
						 BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  70 AS CheckID ,
											200 AS Priority ,
											'Configuration' AS FindingsGroup ,
											'@@Servername Not Correct' AS Finding ,
											'http://BrentOzar.com/go/servername' AS URL ,
											'The @@Servername is different than the computer name, which may trigger certificate errors.' AS Details
						END;

				END
		/*Check to see if a failsafe operator has been configured*/
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 73 )
					BEGIN

						DECLARE @AlertInfo TABLE
							(
							  FailSafeOperator NVARCHAR(255) ,
							  NotificationMethod INT ,
							  ForwardingServer NVARCHAR(255) ,
							  ForwardingSeverity INT ,
							  PagerToTemplate NVARCHAR(255) ,
							  PagerCCTemplate NVARCHAR(255) ,
							  PagerSubjectTemplate NVARCHAR(255) ,
							  PagerSendSubjectOnly NVARCHAR(255) ,
							  ForwardAlways INT
							)
						INSERT  INTO @AlertInfo
								EXEC [master].[dbo].[sp_MSgetalertinfo] @includeaddresses = 0
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  73 AS CheckID ,
										200 AS Priority ,
										'Monitoring' AS FindingsGroup ,
										'No failsafe operator configured' AS Finding ,
										'http://BrentOzar.com/go/failsafe' AS URL ,
										( 'No failsafe operator is configured on this server.  This is a good idea just in-case there are issues with the [msdb] database that prevents alerting.' ) AS Details
								FROM    @AlertInfo
								WHERE   FailSafeOperator IS NULL;
					END

/*Identify globally enabled trace flags*/
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 74 )
					BEGIN
						INSERT  INTO #TraceStatus
								EXEC ( ' DBCC TRACESTATUS(-1) WITH NO_INFOMSGS'
									)
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  74 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'TraceFlag On' AS Finding ,
										CASE WHEN [T].[TraceFlag] = '834'  AND @ColumnStoreIndexesInUse = 1 THEN 'https://support.microsoft.com/en-us/kb/3210239'
											 ELSE'http://www.BrentOzar.com/go/traceflags/' END AS URL ,
										'Trace flag ' + 
										CASE WHEN [T].[TraceFlag] = '2330' THEN ' 2330 enabled globally. Using this trace Flag disables missing index requests'
											 WHEN [T].[TraceFlag] = '1211' THEN ' 1211 enabled globally. Using this Trace Flag disables lock escalation when you least expect it. No Bueno!'
											 WHEN [T].[TraceFlag] = '1224' THEN ' 1224 enabled globally. Using this Trace Flag disables lock escalation based on the number of locks being taken. You shouldn''t have done that, Dave.'
											 WHEN [T].[TraceFlag] = '652'  THEN ' 652 enabled globally. Using this Trace Flag disables pre-fetching during index scans. If you hate slow queries, you should turn that off.'
											 WHEN [T].[TraceFlag] = '661'  THEN ' 661 enabled globally. Using this Trace Flag disables ghost record removal. Who you gonna call? No one, turn that thing off.'
											 WHEN [T].[TraceFlag] = '1806'  THEN ' 1806 enabled globally. Using this Trace Flag disables instant file initialization. I question your sanity.'
											 WHEN [T].[TraceFlag] = '3505'  THEN ' 3505 enabled globally. Using this Trace Flag disables Checkpoints. Probably not the wisest idea.'
											 WHEN [T].[TraceFlag] = '8649'  THEN ' 8649 enabled globally. Using this Trace Flag drops cost thresholf for parallelism down to 0. I hope this is a dev server.'
										     WHEN [T].[TraceFlag] = '834' AND @ColumnStoreIndexesInUse = 1 THEN ' 834 is enabled globally. Using this Trace Flag with Columnstore Indexes is not a great idea.'
											 ELSE [T].[TraceFlag] + ' is enabled globally.' END 
										AS Details
								FROM    #TraceStatus T
					END

		/*Check for transaction log file larger than data file */
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 75 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  75 AS CheckID ,
										DB_NAME(a.database_id) ,
										50 AS Priority ,
										'Reliability' AS FindingsGroup ,
										'Transaction Log Larger than Data File' AS Finding ,
										'http://BrentOzar.com/go/biglog' AS URL ,
										'The database [' + DB_NAME(a.database_id)
										+ '] has a ' + CAST((CAST(a.size AS BIGINT) * 8 / 1000000) AS NVARCHAR(20)) + ' GB transaction log file, larger than the total data file sizes. This may indicate that transaction log backups are not being performed or not performed often enough.' AS Details
								FROM    sys.master_files a
								WHERE   a.type = 1
										AND DB_NAME(a.database_id) NOT IN (
										SELECT DISTINCT
												DatabaseName
										FROM    #SkipChecks )
										AND a.size &gt; 125000 /* Size is measured in pages here, so this gets us log files over 1GB. */
										AND a.size &gt; ( SELECT   SUM(CAST(b.size AS BIGINT))
													   FROM     sys.master_files b
													   WHERE    a.database_id = b.database_id
																AND b.type = 0
													 )
										AND a.database_id IN (
										SELECT  database_id
										FROM    sys.databases
										WHERE   source_database_id IS NULL )
					END

		/*Check for collation conflicts between user databases and tempdb */
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 76 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  76 AS CheckID ,
										name AS DatabaseName ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Collation is ' + collation_name AS Finding ,
										'http://BrentOzar.com/go/collate' AS URL ,
										'Collation differences between user databases and tempdb can cause conflicts especially when comparing string values' AS Details
								FROM    sys.databases
							WHERE   name NOT IN ( 'master', 'model', 'msdb')
										AND name NOT LIKE 'ReportServer%'
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
										AND collation_name &lt;&gt; ( SELECT
																  collation_name
																FROM
																  sys.databases
																WHERE
																  name = 'tempdb'
															  )
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 77 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  77 AS CheckID ,
										dSnap.[name] AS DatabaseName ,
										50 AS Priority ,
										'Reliability' AS FindingsGroup ,
										'Database Snapshot Online' AS Finding ,
										'http://BrentOzar.com/go/snapshot' AS URL ,
										'Database [' + dSnap.[name]
										+ '] is a snapshot of ['
										+ dOriginal.[name]
										+ ']. Make sure you have enough drive space to maintain the snapshot as the original database grows.' AS Details
								FROM    sys.databases dSnap
										INNER JOIN sys.databases dOriginal ON dSnap.source_database_id = dOriginal.database_id
																  AND dSnap.name NOT IN (
																  SELECT DISTINCT
																  DatabaseName
																  FROM
																  #SkipChecks )
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 79 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  79 AS CheckID ,
										100 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Shrink Database Job' AS Finding ,
										'http://BrentOzar.com/go/autoshrink' AS URL ,
										'In the [' + j.[name] + '] job, step ['
										+ step.[step_name]
										+ '] has SHRINKDATABASE or SHRINKFILE, which may be causing database fragmentation.' AS Details
								FROM    msdb.dbo.sysjobs j
										INNER JOIN msdb.dbo.sysjobsteps step ON j.job_id = step.job_id
								WHERE   step.command LIKE N'%SHRINKDATABASE%'
										OR step.command LIKE N'%SHRINKFILE%'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 81 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  81 AS CheckID ,
										200 AS Priority ,
										'Non-Active Server Config' AS FindingsGroup ,
										cr.name AS Finding ,
										'http://www.BrentOzar.com/blitz/sp_configure/' AS URL ,
										( 'This sp_configure option isn''t running under its set value.  Its set value is '
										  + CAST(cr.[value] AS VARCHAR(100))
										  + ' and its running value is '
										  + CAST(cr.value_in_use AS VARCHAR(100))
										  + '. When someone does a RECONFIGURE or restarts the instance, this setting will start taking effect.' ) AS Details
								FROM    sys.configurations cr
								WHERE   cr.value &lt;&gt; cr.value_in_use
                                 AND NOT (cr.name = 'min server memory (MB)' AND cr.value IN (0,16) AND cr.value_in_use IN (0,16));
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 123 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1 123 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Agent Jobs Starting Simultaneously' AS Finding ,
										'http://BrentOzar.com/go/busyagent/' AS URL ,
										( 'Multiple SQL Server Agent jobs are configured to start simultaneously. For detailed schedule listings, see the query in the URL.' ) AS Details
								FROM    msdb.dbo.sysjobactivity
								WHERE start_execution_date &gt; DATEADD(dd, -14, GETDATE())
								GROUP BY start_execution_date HAVING COUNT(*) &gt; 1;
					END


				IF @CheckServerInfo = 1
					BEGIN

/*This checks Windows version. It would be better if Microsoft gave everything a separate build number, but whatever.*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 172 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_os_windows_info' )

					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							172 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Windows Version' AS [Finding] ,
							'https://en.wikipedia.org/wiki/List_of_Microsoft_Windows_versions' AS [URL] ,
							( CASE 
								WHEN [owi].[windows_release] = '5' THEN 'You''re running a really old version: Windows 2000, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] &gt; '5' AND [owi].[windows_release] &lt; '6' THEN 'You''re running a really old version: Windows Server 2003/2003R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] &gt;= '6' AND [owi].[windows_release] &lt;= '6.1' THEN 'You''re running a pretty old version: Windows: Server 2008/2008R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] = '6.2' THEN 'You''re running a rather modern version of Windows: Server 2012 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] = '6.3' THEN 'You''re running a pretty modern version of Windows: Server 2012R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] &gt; '6.3' THEN 'Hot dog! You''re living in the future! You''re running version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								ELSE 'I have no idea which version of Windows you''re on. Sorry.'
								END
							   ) AS [Details]
							 FROM [sys].[dm_os_windows_info] [owi]

					END;
					END;

/*
This check hits the dm_os_process_memory system view
to see if locked_page_allocations_kb is &gt; 0,
which could indicate that locked pages in memory is enabled.
*/
IF @ProductVersionMajor &gt;= 10 AND  NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 166 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )
							SELECT
							166 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Locked Pages In Memory Enabled' AS [Finding] ,
							'http://BrentOzar.com/go/lpim' AS [URL] ,
							( 'You currently have '
							  + CASE WHEN [dopm].[locked_page_allocations_kb] / 1024. / 1024. &gt; 0
									 THEN CAST([dopm].[locked_page_allocations_kb] / 1024. / 1024. AS VARCHAR(100))
										  + ' GB'
									 ELSE CAST([dopm].[locked_page_allocations_kb] / 1024. AS VARCHAR(100))
										  + ' MB'
								END + ' of pages locked in memory.' ) AS [Details]
						  FROM
							[sys].[dm_os_process_memory] AS [dopm]
						  WHERE
							[dopm].[locked_page_allocations_kb] &gt; 0;
					END; 

			/* Server Info - Locked Pages In Memory Enabled - Check 166 - SQL Server 2016 SP1 and newer */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 166 )
							AND EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_os_sys_info'
													AND c.name = 'sql_memory_model' )
							BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  166 AS CheckID ,
			250 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Memory Model Unconventional'' AS Finding ,
			''http://BrentOzar.com/go/lpim'' AS URL ,
			''Memory Model: '' + CAST(sql_memory_model_desc AS NVARCHAR(100))
			FROM sys.dm_os_sys_info WHERE sql_memory_model &lt;&gt; 1';
										EXECUTE(@StringToExecute);
									END



			/*
			Starting with SQL Server 2014 SP2, Instant File Initialization 
			is logged in the SQL Server Error Log.
			*/
					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 184 )
							AND (@ProductVersionMajor &gt;= 13) OR (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 5000)
						BEGIN
							INSERT INTO #ErrorLog
							EXEC sys.xp_readerrorlog 0, 1, N'Database Instant File Initialization: enabled';

							IF @@ROWCOUNT &gt; 0
								INSERT  INTO #BlitzResults
										( CheckID ,
										  [Priority] ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT
												193 AS [CheckID] ,
												250 AS [Priority] ,
												'Server Info' AS [FindingsGroup] ,
												'Instant File Initialization Enabled' AS [Finding] ,
												'http://BrentOzar.com/go/instant' AS [URL] ,
												'The service account has the Perform Volume Maintenance Tasks permission.'
						END; 

			/* Server Info - Instant File Initialization Not Enabled - Check 192 - SQL Server 2016 SP1 and newer */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 192 )
							AND EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_server_services'
													AND c.name = 'instant_file_initialization_enabled' )
							BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  192 AS CheckID ,
			50 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Instant File Initialization Not Enabled'' AS Finding ,
			''http://BrentOzar.com/go/instant'' AS URL ,
			''Consider enabling IFI for faster restores and data file growths.''
			FROM sys.dm_server_services WHERE instant_file_initialization_enabled &lt;&gt; ''Y'' AND filename LIKE ''%sqlservr.exe%''';
										EXECUTE(@StringToExecute);
									END





					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 130 )
						BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
											SELECT  130 AS CheckID ,
													250 AS Priority ,
													'Server Info' AS FindingsGroup ,
													'Server Name' AS Finding ,
													'http://BrentOzar.com/go/servername' AS URL ,
													@@SERVERNAME AS Details
												WHERE @@SERVERNAME IS NOT NULL;
								END;



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 83 )
							BEGIN
								IF EXISTS ( SELECT  *
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
									BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
				SELECT  83 AS CheckID ,
				250 AS Priority ,
				''Server Info'' AS FindingsGroup ,
				''Services'' AS Finding ,
				'''' AS URL ,
				N''Service: '' + servicename + N'' runs under service account '' + service_account + N''. Last startup time: '' + COALESCE(CAST(CAST(last_startup_time AS DATETIME) AS VARCHAR(50)), ''not shown.'') + ''. Startup type: '' + startup_type_desc + N'', currently '' + status_desc + ''.''
				FROM sys.dm_server_services;'
										EXECUTE(@StringToExecute);
									END
							END

			/* Check 84 - SQL Server 2012 */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 84 )
							BEGIN
								IF EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_os_sys_info'
													AND c.name = 'physical_memory_kb' )
									BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  84 AS CheckID ,
			250 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Hardware'' AS Finding ,
			'''' AS URL ,
			''Logical processors: '' + CAST(cpu_count AS VARCHAR(50)) + ''. Physical memory: '' + CAST( CAST(ROUND((physical_memory_kb / 1024.0 / 1024), 1) AS INT) AS VARCHAR(50)) + ''GB.''
			FROM sys.dm_os_sys_info';
										EXECUTE(@StringToExecute);
									END

			/* Check 84 - SQL Server 2008 */
								IF EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_os_sys_info'
													AND c.name = 'physical_memory_in_bytes' )
									BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  84 AS CheckID ,
			250 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Hardware'' AS Finding ,
			'''' AS URL ,
			''Logical processors: '' + CAST(cpu_count AS VARCHAR(50)) + ''. Physical memory: '' + CAST( CAST(ROUND((physical_memory_in_bytes / 1024.0 / 1024 / 1024), 1) AS INT) AS VARCHAR(50)) + ''GB.''
			FROM sys.dm_os_sys_info';
										EXECUTE(@StringToExecute);
									END
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 85 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  85 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'SQL Server Service' AS Finding ,
												'' AS URL ,
												N'Version: '
												+ CAST(SERVERPROPERTY('productversion') AS NVARCHAR(100))
												+ N'. Patch Level: '
												+ CAST(SERVERPROPERTY('productlevel') AS NVARCHAR(100))
												+ N'. Edition: '
												+ CAST(SERVERPROPERTY('edition') AS VARCHAR(100))
												+ N'. AlwaysOn Enabled: '
												+ CAST(COALESCE(SERVERPROPERTY('IsHadrEnabled'),
																0) AS VARCHAR(100))
												+ N'. AlwaysOn Mgr Status: '
												+ CAST(COALESCE(SERVERPROPERTY('HadrManagerStatus'),
																0) AS VARCHAR(100))
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 88 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  88 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'SQL Server Last Restart' AS Finding ,
												'' AS URL ,
												CAST(create_date AS VARCHAR(100))
										FROM    sys.databases
										WHERE   database_id = 2
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 91 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  91 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'Server Last Restart' AS Finding ,
												'' AS URL ,
												CAST(DATEADD(SECOND, (ms_ticks/1000)*(-1), GETDATE()) AS nvarchar(25))
										FROM sys.dm_os_sys_info
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 92 )
							BEGIN
								INSERT  INTO #driveInfo
										( drive, SIZE )
										EXEC master..xp_fixeddrives

								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  92 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'Drive ' + i.drive + ' Space' AS Finding ,
												'' AS URL ,
												CAST(i.SIZE AS VARCHAR)
												+ 'MB free on ' + i.drive
												+ ' drive' AS Details
										FROM    #driveInfo AS i
								DROP TABLE #driveInfo
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 103 )
							AND EXISTS ( SELECT *
										 FROM   sys.all_objects o
												INNER JOIN sys.all_columns c ON o.object_id = c.object_id
										 WHERE  o.name = 'dm_os_sys_info'
												AND c.name = 'virtual_machine_type_desc' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
									SELECT 103 AS CheckID,
									250 AS Priority,
									''Server Info'' AS FindingsGroup,
									''Virtual Server'' AS Finding,
									''http://BrentOzar.com/go/virtual'' AS URL,
									''Type: ('' + virtual_machine_type_desc + '')'' AS Details
									FROM sys.dm_os_sys_info
									WHERE virtual_machine_type &lt;&gt; 0';
								EXECUTE(@StringToExecute);
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 114 )
							AND EXISTS ( SELECT *
										 FROM   sys.all_objects o
										 WHERE  o.name = 'dm_os_memory_nodes' )
							AND EXISTS ( SELECT *
										 FROM   sys.all_objects o
										 INNER JOIN sys.all_columns c ON o.object_id = c.object_id
										 WHERE  o.name = 'dm_os_nodes'
                                	 		AND c.name = 'processor_group' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
										SELECT  114 AS CheckID ,
												250 AS Priority ,
												''Server Info'' AS FindingsGroup ,
												''Hardware - NUMA Config'' AS Finding ,
												'''' AS URL ,
												''Node: '' + CAST(n.node_id AS NVARCHAR(10)) + '' State: '' + node_state_desc
												+ '' Online schedulers: '' + CAST(n.online_scheduler_count AS NVARCHAR(10)) + '' Offline schedulers: '' + CAST(oac.offline_schedulers AS VARCHAR(100)) + '' Processor Group: '' + CAST(n.processor_group AS NVARCHAR(10))
												+ '' Memory node: '' + CAST(n.memory_node_id AS NVARCHAR(10)) + '' Memory VAS Reserved GB: '' + CAST(CAST((m.virtual_address_space_reserved_kb / 1024.0 / 1024) AS INT) AS NVARCHAR(100))
										FROM sys.dm_os_nodes n
										INNER JOIN sys.dm_os_memory_nodes m ON n.memory_node_id = m.memory_node_id
										OUTER APPLY (SELECT 
										COUNT(*) AS [offline_schedulers]
										FROM sys.dm_os_schedulers dos
										WHERE n.node_id = dos.parent_node_id 
										AND dos.status = ''VISIBLE OFFLINE''
										) oac
										WHERE n.node_state_desc NOT LIKE ''%DAC%''
										ORDER BY n.node_id'
								EXECUTE(@StringToExecute);
							END


							IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 106 )
											AND (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1
                                AND DATALENGTH( COALESCE( @base_tracefilename, '' ) ) &gt; DATALENGTH('.TRC')
							BEGIN

								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT
												 106 AS CheckID
												,250 AS Priority
												,'Server Info' AS FindingsGroup
												,'Default Trace Contents' AS Finding
												,'http://BrentOzar.com/go/trace' AS URL
												,'The default trace holds '+cast(DATEDIFF(hour,MIN(StartTime),GETDATE())as varchar)+' hours of data'
												+' between '+cast(Min(StartTime) as varchar)+' and '+cast(GETDATE()as varchar)
												+('. The default trace files are located in: '+left( @curr_tracefilename,len(@curr_tracefilename) - @indx)
												) as Details
										FROM    ::fn_trace_gettable( @base_tracefilename, default )
										WHERE EventClass BETWEEN 65500 and 65600
							END /* CheckID 106 */


							IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 152 )
							BEGIN
								IF EXISTS (SELECT * FROM sys.dm_os_wait_stats ws
											LEFT OUTER JOIN #IgnorableWaits i ON ws.wait_type = i.wait_type
											WHERE wait_time_ms &gt; .1 * @CpuMsSinceWaitsCleared AND waiting_tasks_count &gt; 0 
											AND i.wait_type IS NULL)
									BEGIN
									/* Check for waits that have had more than 10% of the server's wait time */
									WITH os(wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms)
									AS
									(SELECT ws.wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms
										FROM sys.dm_os_wait_stats ws
										LEFT OUTER JOIN #IgnorableWaits i ON ws.wait_type = i.wait_type
											WHERE i.wait_type IS NULL 
												AND wait_time_ms &gt; .1 * @CpuMsSinceWaitsCleared
												AND waiting_tasks_count &gt; 0)
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
											SELECT TOP 9
													 152 AS CheckID
													,240 AS Priority
													,'Wait Stats' AS FindingsGroup
													, CAST(ROW_NUMBER() OVER(ORDER BY os.wait_time_ms DESC) AS NVARCHAR(10)) + N' - ' + os.wait_type AS Finding
													,'http://BrentOzar.com/go/waits' AS URL
													, Details = CAST(CAST(SUM(os.wait_time_ms / 1000.0 / 60 / 60) OVER (PARTITION BY os.wait_type) AS NUMERIC(18,1)) AS NVARCHAR(20)) + N' hours of waits, ' +
													CAST(CAST((SUM(60.0 * os.wait_time_ms) OVER (PARTITION BY os.wait_type) ) / @MsSinceWaitsCleared  AS NUMERIC(18,1)) AS NVARCHAR(20)) + N' minutes average wait time per hour, ' + 
													/* CAST(CAST(
														100.* SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) 
														/ (1. * SUM(os.wait_time_ms) OVER () )
														AS NUMERIC(18,1)) AS NVARCHAR(40)) + N'% of waits, ' + */
													CAST(CAST(
														100. * SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type) 
														/ (1. * SUM(os.wait_time_ms) OVER ())
														AS NUMERIC(18,1)) AS NVARCHAR(40)) + N'% signal wait, ' + 
													CAST(SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) AS NVARCHAR(40)) + N' waiting tasks, ' +
													CAST(CASE WHEN  SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) &gt; 0
													THEN
														CAST(
															SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type)
																/ (1. * SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type)) 
															AS NUMERIC(18,1))
													ELSE 0 END AS NVARCHAR(40)) + N' ms average wait time.'
											FROM    os
											ORDER BY SUM(os.wait_time_ms / 1000.0 / 60 / 60) OVER (PARTITION BY os.wait_type) DESC;
									END /* IF EXISTS (SELECT * FROM sys.dm_os_wait_stats WHERE wait_time_ms &gt; 0 AND waiting_tasks_count &gt; 0) */

								/* If no waits were found, add a note about that */
								IF NOT EXISTS (SELECT * FROM #BlitzResults WHERE CheckID IN (107, 108, 109, 121, 152, 162))
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
										VALUES (153, 240, 'Wait Stats', 'No Significant Waits Detected', 'http://BrentOzar.com/go/waits', 'This server might be just sitting around idle, or someone may have cleared wait stats recently.');
								END
							END /* CheckID 152 */    

					END /* IF @CheckServerInfo = 1 */
			END /* IF ( ( SERVERPROPERTY('ServerName') NOT IN ( SELECT ServerName */


				/* Delete priorites they wanted to skip. */
				IF @IgnorePrioritiesAbove IS NOT NULL
					DELETE  #BlitzResults
					WHERE   [Priority] &gt; @IgnorePrioritiesAbove AND CheckID &lt;&gt; -1;

				IF @IgnorePrioritiesBelow IS NOT NULL
					DELETE  #BlitzResults
					WHERE   [Priority] &lt; @IgnorePrioritiesBelow AND CheckID &lt;&gt; -1;

				/* Delete checks they wanted to skip. */
				IF @SkipChecksTable IS NOT NULL
					BEGIN
						DELETE  FROM #BlitzResults
						WHERE   DatabaseName IN ( SELECT    DatabaseName
												  FROM      #SkipChecks
												  WHERE CheckID IS NULL
												  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName')));
						DELETE  FROM #BlitzResults
						WHERE   CheckID IN ( SELECT    CheckID
												  FROM      #SkipChecks
												  WHERE DatabaseName IS NULL
												  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName')));
						DELETE r FROM #BlitzResults r
							INNER JOIN #SkipChecks c ON r.DatabaseName = c.DatabaseName and r.CheckID = c.CheckID
												  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName'));
					END

				/* Add summary mode */
				IF @SummaryMode &gt; 0
					BEGIN
					UPDATE #BlitzResults
					  SET Finding = br.Finding + ' (' + CAST(brTotals.recs AS NVARCHAR(20)) + ')'
					  FROM #BlitzResults br
						INNER JOIN (SELECT FindingsGroup, Finding, Priority, COUNT(*) AS recs FROM #BlitzResults GROUP BY FindingsGroup, Finding, Priority) brTotals ON br.FindingsGroup = brTotals.FindingsGroup AND br.Finding = brTotals.Finding AND br.Priority = brTotals.Priority
						WHERE brTotals.recs &gt; 1;

					DELETE br
					  FROM #BlitzResults br
					  WHERE EXISTS (SELECT * FROM #BlitzResults brLower WHERE br.FindingsGroup = brLower.FindingsGroup AND br.Finding = brLower.Finding AND br.Priority = brLower.Priority AND br.ID &gt; brLower.ID);

					END

				/* Add credits for the nice folks who put so much time into building and maintaining this for free: */
				INSERT  INTO #BlitzResults
						( CheckID ,
						  Priority ,
						  FindingsGroup ,
						  Finding ,
						  URL ,
						  Details
						)
				VALUES  ( -1 ,
						  255 ,
						  'Thanks!' ,
						  'From Your Community Volunteers' ,
						  'http://FirstResponderKit.org' ,
						  'We hope you found this tool useful.'
						);

				INSERT  INTO #BlitzResults
						( CheckID ,
						  Priority ,
						  FindingsGroup ,
						  Finding ,
						  URL ,
						  Details

						)
				VALUES  ( -1 ,
						  0 ,
						  'sp_Blitz ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)),
						  'SQL Server First Responder Kit' ,
						  'http://FirstResponderKit.org/' ,
						  'To get help or add your own contributions, join us at http://FirstResponderKit.org.'

						);

				INSERT  INTO #BlitzResults
						( CheckID ,
						  Priority ,
						  FindingsGroup ,
						  Finding ,
						  URL ,
						  Details

						)
				SELECT 156 ,
						  254 ,
						  'Rundate' ,
						  GETDATE() ,
						  'http://FirstResponderKit.org/' ,
						  'Captain''s log: stardate something and something...';
						  
				IF @EmailRecipients IS NOT NULL
					BEGIN
					/* Database mail won't work off a local temp table. I'm not happy about this hacky workaround either. */
					IF (OBJECT_ID('tempdb..##BlitzResults', 'U') IS NOT NULL) DROP TABLE ##BlitzResults;
					SELECT * INTO ##BlitzResults FROM #BlitzResults;
					SET @query_result_separator = char(9);
					SET @StringToExecute = 'SET NOCOUNT ON;SELECT [Priority] , [FindingsGroup] , [Finding] , [DatabaseName] , [URL] ,  [Details] , CheckID FROM ##BlitzResults ORDER BY Priority , FindingsGroup, Finding, Details; SET NOCOUNT OFF;';
					SET @EmailSubject = 'sp_Blitz Results for ' + @@SERVERNAME;
					SET @EmailBody = 'sp_Blitz ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)) + '. http://FirstResponderKit.org';
					IF @EmailProfile IS NULL
						EXEC msdb.dbo.sp_send_dbmail
							@recipients = @EmailRecipients,
							@subject = @EmailSubject,
							@body = @EmailBody,
							@query_attachment_filename = 'sp_Blitz-Results.csv',
							@attach_query_result_as_file = 1,
							@query_result_header = 1,
							@query_result_width = 32767,
							@append_query_error = 1,
							@query_result_no_padding = 1,
							@query_result_separator = @query_result_separator,
							@query = @StringToExecute;
					ELSE
						EXEC msdb.dbo.sp_send_dbmail
							@profile_name = @EmailProfile,
							@recipients = @EmailRecipients,
							@subject = @EmailSubject,
							@body = @EmailBody,
							@query_attachment_filename = 'sp_Blitz-Results.csv',
							@attach_query_result_as_file = 1,
							@query_result_header = 1,
							@query_result_width = 32767,
							@append_query_error = 1,
							@query_result_no_padding = 1,
							@query_result_separator = @query_result_separator,
							@query = @StringToExecute;
					IF (OBJECT_ID('tempdb..##BlitzResults', 'U') IS NOT NULL) DROP TABLE ##BlitzResults;
				END

				/* Checks if @OutputServerName is populated with a valid linked server, and that the database name specified is valid */
				DECLARE @ValidOutputServer BIT
				DECLARE @ValidOutputLocation BIT
				DECLARE @LinkedServerDBCheck NVARCHAR(2000)
				DECLARE @ValidLinkedServerDB INT
				DECLARE @tmpdbchk table (cnt int)
				IF @OutputServerName IS NOT NULL
					BEGIN
						IF EXISTS (SELECT server_id FROM sys.servers WHERE QUOTENAME([name]) = @OutputServerName)
							BEGIN
								SET @LinkedServerDBCheck = 'SELECT 1 WHERE EXISTS (SELECT * FROM '+@OutputServerName+'.master.sys.databases WHERE QUOTENAME([name]) = '''+@OutputDatabaseName+''')'
								INSERT INTO @tmpdbchk EXEC sys.sp_executesql @LinkedServerDBCheck
								SET @ValidLinkedServerDB = (SELECT COUNT(*) FROM @tmpdbchk)
								IF (@ValidLinkedServerDB &gt; 0)
									BEGIN
										SET @ValidOutputServer = 1
										SET @ValidOutputLocation = 1
									END
								ELSE
									RAISERROR('The specified database was not found on the output server', 16, 0)
							END
						ELSE
							BEGIN
								RAISERROR('The specified output server was not found', 16, 0)
							END
					END
				ELSE
					BEGIN
						IF @OutputDatabaseName IS NOT NULL
							AND @OutputSchemaName IS NOT NULL
							AND @OutputTableName IS NOT NULL
							AND EXISTS ( SELECT *
								 FROM   sys.databases
								 WHERE  QUOTENAME([name]) = @OutputDatabaseName)
							BEGIN
								SET @ValidOutputLocation = 1
							END
						ELSE IF @OutputDatabaseName IS NOT NULL
							AND @OutputSchemaName IS NOT NULL
							AND @OutputTableName IS NOT NULL
							AND NOT EXISTS ( SELECT *
								 FROM   sys.databases
								 WHERE  QUOTENAME([name]) = @OutputDatabaseName)
							BEGIN
								RAISERROR('The specified output database was not found on this server', 16, 0)
							END
						ELSE
							BEGIN
								SET @ValidOutputLocation = 0 
							END
					END

				/* @OutputTableName lets us export the results to a permanent table */
				IF @ValidOutputLocation = 1
					BEGIN
						SET @StringToExecute = 'USE '
							+ @OutputDatabaseName
							+ '; IF EXISTS(SELECT * FROM '
							+ @OutputDatabaseName
							+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
							+ @OutputSchemaName
							+ ''') AND NOT EXISTS (SELECT * FROM '
							+ @OutputDatabaseName
							+ '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''
							+ @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''
							+ @OutputTableName + ''') CREATE TABLE '
							+ @OutputSchemaName + '.'
							+ @OutputTableName
							+ ' (ID INT IDENTITY(1,1) NOT NULL,
								ServerName NVARCHAR(128),
								CheckDate DATETIMEOFFSET,
								Priority TINYINT ,
								FindingsGroup VARCHAR(50) ,
								Finding VARCHAR(200) ,
								DatabaseName NVARCHAR(128),
								URL VARCHAR(200) ,
								Details NVARCHAR(4000) ,
								QueryPlan [XML] NULL ,
								QueryPlanFiltered [NVARCHAR](MAX) NULL,
								CheckID INT ,
								CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
						IF @ValidOutputServer = 1
							BEGIN
								SET @StringToExecute = REPLACE(@StringToExecute,''''+@OutputSchemaName+'''',''''''+@OutputSchemaName+'''''')
								SET @StringToExecute = REPLACE(@StringToExecute,''''+@OutputTableName+'''',''''''+@OutputTableName+'''''')
								SET @StringToExecute = REPLACE(@StringToExecute,'[XML]','[NVARCHAR](MAX)')
								EXEC('EXEC('''+@StringToExecute+''') AT ' + @OutputServerName);
							END   
						ELSE
							BEGIN
								EXEC(@StringToExecute);
							END
						IF @ValidOutputServer = 1
							BEGIN
								SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
								+ @OutputServerName + '.'
								+ @OutputDatabaseName
								+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
								+ @OutputSchemaName + ''') INSERT '
								+ @OutputServerName + '.'
								+ @OutputDatabaseName + '.'
								+ @OutputSchemaName + '.'
								+ @OutputTableName
								+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''
								+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
								+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, CAST(QueryPlan AS NVARCHAR(MAX)), QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';

								EXEC(@StringToExecute);
							END   
						ELSE
							BEGIN
								SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
								+ @OutputDatabaseName
								+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
								+ @OutputSchemaName + ''') INSERT '
								+ @OutputDatabaseName + '.'
								+ @OutputSchemaName + '.'
								+ @OutputTableName
								+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''
								+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
								+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';
								
								EXEC(@StringToExecute);
							END
					END
				ELSE IF (SUBSTRING(@OutputTableName, 2, 2) = '##')
					BEGIN
						IF @ValidOutputServer = 1
							BEGIN
								RAISERROR('Due to the nature of temporary tables, outputting to a linked server requires a permanent table.', 16, 0)
							END
						ELSE
							BEGIN
								SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'
									+ @OutputTableName
									+ ''') IS NOT NULL) DROP TABLE ' + @OutputTableName + ';'
									+ 'CREATE TABLE '
									+ @OutputTableName
									+ ' (ID INT IDENTITY(1,1) NOT NULL,
										ServerName NVARCHAR(128),
										CheckDate DATETIMEOFFSET,
										Priority TINYINT ,
										FindingsGroup VARCHAR(50) ,
										Finding VARCHAR(200) ,
										DatabaseName NVARCHAR(128),
										URL VARCHAR(200) ,
										Details NVARCHAR(4000) ,
										QueryPlan [XML] NULL ,
										QueryPlanFiltered [NVARCHAR](MAX) NULL,
										CheckID INT ,
										CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
									+ ' INSERT '
									+ @OutputTableName
									+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''
									+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
									+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';
							
									EXEC(@StringToExecute);
							END
					END
				ELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')
					BEGIN
						RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)
					END


				DECLARE @separator AS VARCHAR(1);
				IF @OutputType = 'RSV'
					SET @separator = CHAR(31);
				ELSE
					SET @separator = ',';

				IF @OutputType = 'COUNT'
					BEGIN
						SELECT  COUNT(*) AS Warnings
						FROM    #BlitzResults
					END
				ELSE
					IF @OutputType IN ( 'CSV', 'RSV' )
						BEGIN

							SELECT  Result = CAST([Priority] AS NVARCHAR(100))
									+ @separator + CAST(CheckID AS NVARCHAR(100))
									+ @separator + COALESCE([FindingsGroup],
															'(N/A)') + @separator
									+ COALESCE([Finding], '(N/A)') + @separator
									+ COALESCE(DatabaseName, '(N/A)') + @separator
									+ COALESCE([URL], '(N/A)') + @separator
									+ COALESCE([Details], '(N/A)')
							FROM    #BlitzResults
							ORDER BY Priority ,
									FindingsGroup ,
									Finding ,
									DatabaseName ,
									Details;
						END
					ELSE IF @OutputXMLasNVARCHAR = 1 AND @OutputType &lt;&gt; 'NONE'
						BEGIN
							SELECT  [Priority] ,
									[FindingsGroup] ,
									[Finding] ,
									[DatabaseName] ,
									[URL] ,
									[Details] ,
									CAST([QueryPlan] AS NVARCHAR(MAX)) AS QueryPlan,
									[QueryPlanFiltered] ,
									CheckID
							FROM    #BlitzResults
							ORDER BY Priority ,
									FindingsGroup ,
									Finding ,
									DatabaseName ,
									Details;
						END
					ELSE IF @OutputType = 'MARKDOWN'
						BEGIN
							WITH Results AS (SELECT row_number() OVER (ORDER BY Priority, FindingsGroup, Finding, DatabaseName, Details) AS rownum, * 
												FROM #BlitzResults
												WHERE Priority &gt; 0 AND Priority &lt; 255 AND FindingsGroup IS NOT NULL AND Finding IS NOT NULL
												AND FindingsGroup &lt;&gt; 'Security' /* Specifically excluding security checks for public exports */)
							SELECT 
								CASE 
									WHEN r.Priority &lt;&gt; COALESCE(rPrior.Priority, 0) OR r.FindingsGroup &lt;&gt; rPrior.FindingsGroup  THEN @crlf + N'**Priority ' + CAST(COALESCE(r.Priority,N'') AS NVARCHAR(5)) + N': ' + COALESCE(r.FindingsGroup,N'') + N'**:' + @crlf + @crlf 
									ELSE N'' 
								END
								+ CASE WHEN r.Finding &lt;&gt; COALESCE(rPrior.Finding,N'') AND r.Finding &lt;&gt; rNext.Finding THEN N'- ' + COALESCE(r.Finding,N'') + N' ' + COALESCE(r.DatabaseName, N'') + N' - ' + COALESCE(r.Details,N'') + @crlf
									   WHEN r.Finding &lt;&gt; COALESCE(rPrior.Finding,N'') AND r.Finding = rNext.Finding AND r.Details = rNext.Details THEN N'- ' + COALESCE(r.Finding,N'') + N' - ' + COALESCE(r.Details,N'') + @crlf + @crlf + N'    * ' + COALESCE(r.DatabaseName, N'') + @crlf
									   WHEN r.Finding &lt;&gt; COALESCE(rPrior.Finding,N'') AND r.Finding = rNext.Finding THEN N'- ' + COALESCE(r.Finding,N'') + @crlf + CASE WHEN r.DatabaseName IS NULL THEN N'' ELSE  N'    * ' + COALESCE(r.DatabaseName,N'') END + CASE WHEN r.Details &lt;&gt; rPrior.Details THEN N' - ' + COALESCE(r.Details,N'') + @crlf ELSE '' END
									   ELSE CASE WHEN r.DatabaseName IS NULL THEN N'' ELSE  N'    * ' + COALESCE(r.DatabaseName,N'') END + CASE WHEN r.Details &lt;&gt; rPrior.Details THEN N' - ' + COALESCE(r.Details,N'') + @crlf ELSE N'' + @crlf END 
								END + @crlf 
							  FROM Results r
							  LEFT OUTER JOIN Results rPrior ON r.rownum = rPrior.rownum + 1
							  LEFT OUTER JOIN Results rNext ON r.rownum = rNext.rownum - 1
							ORDER BY r.rownum FOR XML PATH(N'');
						END
					ELSE IF @OutputType &lt;&gt; 'NONE'
						BEGIN
							SELECT  [Priority] ,
									[FindingsGroup] ,
									[Finding] ,
									[DatabaseName] ,
									[URL] ,
									[Details] ,
									[QueryPlan] ,
									[QueryPlanFiltered] ,
									CheckID
							FROM    #BlitzResults
							ORDER BY Priority ,
									FindingsGroup ,
									Finding ,
									DatabaseName ,
									Details;
						END

				DROP TABLE #BlitzResults;

				IF @OutputProcedureCache = 1
				AND @CheckProcedureCache = 1
					SELECT TOP 20
							total_worker_time / execution_count AS AvgCPU ,
							total_worker_time AS TotalCPU ,
							CAST(ROUND(100.00 * total_worker_time
									   / ( SELECT   SUM(total_worker_time)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentCPU ,
							total_elapsed_time / execution_count AS AvgDuration ,
							total_elapsed_time AS TotalDuration ,
							CAST(ROUND(100.00 * total_elapsed_time
									   / ( SELECT   SUM(total_elapsed_time)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentDuration ,
							total_logical_reads / execution_count AS AvgReads ,
							total_logical_reads AS TotalReads ,
							CAST(ROUND(100.00 * total_logical_reads
									   / ( SELECT   SUM(total_logical_reads)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentReads ,
							execution_count ,
							CAST(ROUND(100.00 * execution_count
									   / ( SELECT   SUM(execution_count)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentExecutions ,
							CASE WHEN DATEDIFF(mi, creation_time,
											   qs.last_execution_time) = 0 THEN 0
								 ELSE CAST(( 1.00 * execution_count / DATEDIFF(mi,
																  creation_time,
																  qs.last_execution_time) ) AS MONEY)
							END AS executions_per_minute ,
							qs.creation_time AS plan_creation_time ,
							qs.last_execution_time ,
							text ,
							text_filtered ,
							query_plan ,
							query_plan_filtered ,
							sql_handle ,
							query_hash ,
							plan_handle ,
							query_plan_hash
					FROM    #dm_exec_query_stats qs
					ORDER BY CASE UPPER(@CheckProcedureCacheFilter)
							   WHEN 'CPU' THEN total_worker_time
							   WHEN 'READS' THEN total_logical_reads
							   WHEN 'EXECCOUNT' THEN execution_count
							   WHEN 'DURATION' THEN total_elapsed_time
							   ELSE total_worker_time
							 END DESC

	END /* ELSE -- IF @OutputType = 'SCHEMA' */

    SET NOCOUNT OFF;
GO

/*
--Sample execution call with the most common parameters:
EXEC [dbo].[sp_Blitz]
    @CheckUserDatabaseObjects = 1 ,
    @CheckProcedureCache = 0 ,
    @OutputType = 'TABLE' ,
    @OutputProcedureCache = 0 ,
    @CheckProcedureCacheFilter = NULL,
    @CheckServerInfo = 1
*/
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>UTILITIES</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LIST_of_all_FIELDS_in_all_TABLES_of_database</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>UTILITIES</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LIST_of_all_FIELDS_in_all_TABLES_of_database</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--LIST_of_all_FIELDS_in_all_TABLES_of_database

use edwCrescent
go

 SELECT T.name AS Table_Name ,
       C.name AS Column_Name ,
       P.name AS Data_Type ,
       P.max_length AS Size ,
       CAST(P.precision AS VARCHAR) + '/' + CAST(P.scale AS VARCHAR) AS Precision_Scale
FROM   sys.objects AS T
       JOIN sys.columns AS C ON T.object_id = C.object_id
       JOIN sys.types AS P ON C.system_type_id = P.system_type_id
WHERE  T.type_desc = 'USER_TABLE';


--sample OUTPUT
-------------------------
Table_Name			Column_Name			Data_Type	Size	Precision_Scale
----------			-----------			---------	----	---------------
DimApplicantVehicle	ApplicantVehicleKey	int			4		10/0
DimApplicantVehicle	ApplicantKey		int			4		10/0
DimApplicantVehicle	RequestID			varchar		8000	0/0
DimApplicantVehicle	ClientAppID			varchar		8000	0/0
DimApplicantVehicle	New_Used_Ind_Title	varchar		8000	0/0
DimApplicantVehicle	New_Used_Ind_Age	varchar		8000	0/0
DimApplicantVehicle	VehicleYear			varchar		8000	0/0
DimApplicantVehicle	VehicleModel		varchar		8000	0/0
DimApplicantVehicle	VehicleMake			varchar		8000	0/0
DimApplicantVehicle	VehicleMilage		int			4		10/0</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>UTILITIES</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SP_IndexAnalysisForAll_Indexes_OnAllTables</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>UTILITIES</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SP_IndexAnalysisForAll_Indexes_OnAllTables</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--FROM: http://www.mssqltips.com/sqlservertip/1003/sql-server-index-analysis-script-for-all-indexes-on-all-tables/

--    Download this stored procedure and put it in your master database so you can use it across all databases
--    Refer to this stored procedure whenever you need to do index analysis across your database


Use DB2_CRM
go

-- Modified sp_helpindex SP to show all indexes for all tables
-- this was modified to handle object owned by dbo and other users

CREATE proc prj_0000_210_UTILITY_IndexAnalysis_AllIndexs_AllTables
	--@objname nvarchar(776)		-- the table to check for indexes
as
	-- PRELIM
	set nocount on

	declare @objname nvarchar(776), 
			@objid int,			-- the object id of the table
			@indid smallint,	-- the index id of an index
			@groupid smallint,  -- the filegroup id of an index
			@indname sysname,
			@groupname sysname,
			@status int,
			@keys nvarchar(2126),	--Length (16*max_identifierLength)+(15*2)+(16*3)
			@dbname	sysname,
			@usrname sysname

	-- Check to see that the object names are local to the current database.
	select @dbname = parsename(@objname,3)

	if @dbname is not null and @dbname &lt;&gt; db_name()
	begin
			raiserror(15250,-1,-1)
			return (1)
	end


	-- create temp table
	create table #spindtab
	(
		
		usr_name			sysname,
		table_name			sysname,		
		index_name			sysname	collate database_default,
		stats				int,
		groupname			sysname collate database_default,
		index_keys			nvarchar(2126)	collate database_default  -- see @keys above for length descr
	)


	-- OPEN CURSOR OVER TABLES (skip stats: bug shiloh_51196)
	declare ms_crs_tab cursor local static for
	select sysobjects.id, sysobjects.name, sysusers.name from sysobjects inner join sysusers on sysobjects.uid = sysusers.uid where type = 'U'

	open ms_crs_tab
	fetch ms_crs_tab into @objid, @objname, @usrname

	while @@fetch_status &gt;= 0
	begin


	-- Check to see the the table exists and initialize @objid.
	/*
	select @objid = object_id(@objname)
	if @objid is NULL
	begin
		select @dbname=db_name()
		raiserror(15009,-1,-1,@objname,@dbname)
		return (1)
	end
	*/
	-- OPEN CURSOR OVER INDEXES (skip stats: bug shiloh_51196)
	declare ms_crs_ind cursor local static for
		select indid, groupid, name, status from sysindexes
			where id = @objid and indid &gt; 0 and indid &lt; 255 and (status &amp; 64)=0 order by indid
	open ms_crs_ind
	fetch ms_crs_ind into @indid, @groupid, @indname, @status

	-- IF NO INDEX, QUIT
	--if @@fetch_status &lt; 0
	--begin
		--deallocate ms_crs_ind
		--raiserror(15472,-1,-1) --'Object does not have any indexes.'
		--return (0)
	--end

	-- Now check out each index, figure out its type and keys and
	--	save the info in a temporary table that we'll print out at the end.
	while @@fetch_status &gt;= 0
	begin
		-- First we'll figure out what the keys are.
		declare @i int, @thiskey nvarchar(131) -- 128+3

		select @keys = index_col(@usrname + '.' + @objname, @indid, 1), @i = 2
		if (indexkey_property(@objid, @indid, 1, 'isdescending') = 1)
			select @keys = @keys  + '(-)'

		select @thiskey = index_col(@usrname + '.' + @objname, @indid, @i)
		if ((@thiskey is not null) and (indexkey_property(@objid, @indid, @i, 'isdescending') = 1))
			select @thiskey = @thiskey + '(-)'

		while (@thiskey is not null )
		begin
			select @keys = @keys + ', ' + @thiskey, @i = @i + 1
			select @thiskey = index_col(@usrname + '.' + @objname, @indid, @i)
			if ((@thiskey is not null) and (indexkey_property(@objid, @indid, @i, 'isdescending') = 1))
				select @thiskey = @thiskey + '(-)'
		end

		select @groupname = groupname from sysfilegroups where groupid = @groupid

		-- INSERT ROW FOR INDEX
		insert into #spindtab values (@usrname, @objname, @indname, @status, @groupname, @keys)

		-- Next index
		fetch ms_crs_ind into @indid, @groupid, @indname, @status
	end
	deallocate ms_crs_ind

	fetch ms_crs_tab into @objid, @objname, @usrname
	end
	deallocate ms_crs_tab

	-- SET UP SOME CONSTANT VALUES FOR OUTPUT QUERY
	declare @empty varchar(1) select @empty = ''
	declare @des1			varchar(35),	-- 35 matches spt_values
			@des2			varchar(35),
			@des4			varchar(35),
			@des32			varchar(35),
			@des64			varchar(35),
			@des2048		varchar(35),
			@des4096		varchar(35),
			@des8388608		varchar(35),
			@des16777216	varchar(35)
	select @des1 = name from master.dbo.spt_values where type = 'I' and number = 1
	select @des2 = name from master.dbo.spt_values where type = 'I' and number = 2
	select @des4 = name from master.dbo.spt_values where type = 'I' and number = 4
	select @des32 = name from master.dbo.spt_values where type = 'I' and number = 32
	select @des64 = name from master.dbo.spt_values where type = 'I' and number = 64
	select @des2048 = name from master.dbo.spt_values where type = 'I' and number = 2048
	select @des4096 = name from master.dbo.spt_values where type = 'I' and number = 4096
	select @des8388608 = name from master.dbo.spt_values where type = 'I' and number = 8388608
	select @des16777216 = name from master.dbo.spt_values where type = 'I' and number = 16777216

	-- DISPLAY THE RESULTS
	select
		'usr_name'=usr_name,
		'table_name'=table_name,		
		'index_name' = index_name,
		'index_description' = convert(varchar(210), --bits 16 off, 1, 2, 16777216 on, located on group
				case when (stats &amp; 16)&lt;&gt;0 then 'clustered' else 'nonclustered' end
				+ case when (stats &amp; 1)&lt;&gt;0 then ', '+@des1 else @empty end
				+ case when (stats &amp; 2)&lt;&gt;0 then ', '+@des2 else @empty end
				+ case when (stats &amp; 4)&lt;&gt;0 then ', '+@des4 else @empty end
				+ case when (stats &amp; 64)&lt;&gt;0 then ', '+@des64 else case when (stats &amp; 32)&lt;&gt;0 then ', '+@des32 else @empty end end
				+ case when (stats &amp; 2048)&lt;&gt;0 then ', '+@des2048 else @empty end
				+ case when (stats &amp; 4096)&lt;&gt;0 then ', '+@des4096 else @empty end
				+ case when (stats &amp; 8388608)&lt;&gt;0 then ', '+@des8388608 else @empty end
				+ case when (stats &amp; 16777216)&lt;&gt;0 then ', '+@des16777216 else @empty end
				+ ' located on ' + groupname),
		'index_keys' = index_keys
	from #spindtab
	order by table_name, index_name


	return (0) -- sp_helpindex

GO
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DATES</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DECLARE_pick_a_date__FromCourtney</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DATES</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DECLARE_pick_a_date__FromCourtney</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--this uses TRY_CONVERT to get YYYYMM from: @theDatePickedByUserFromCalendar

use RiskMngt
go

--P_0051_TASK_045_SP_01_DealerMonthlyAppsAndLoansList_v5.sql
/*
	************************************************************************************
	SSRS Report: REP_xx_P_0045_0xx_
	NOTE: 
	Uses: 
	Created: 12/7/2021
	By:		Dave Hoadley 
	SSRS: 	glenn garson
	************************************************************************************
*/

----======================================================================DEBUG
--DECLARE @theDatePickedByUserFromCalendar as DATE = '03-28-2020'
--DECLARE @MDM nvarchar(100) = '0_ALL'	
--DECLARE @MDR nvarchar(100) = '0_ALL'	
--DECLARE @RSE nvarchar(100) = '0_ALL'	
--DECLARE @MSE nvarchar(100) = '0_ALL'	
--DECLARE @Territory nvarchar(100) = '0_ALL'	
----======================================================================DEBUG

   
alter Procedure [Reporting].[P_0051_TASK_045_SP_01_DealerMonthlyAppsAndLoansList](@theDatePickedByUserFromCalendar AS DATE
																					, @MDM nvarchar(100)
																					, @MDR nvarchar(100)
																					, @RSE nvarchar(100)
																					, @MSE nvarchar(100)
																					, @Territory nvarchar(100)
																					)
	as


DECLARE @YYYYMM AS VARCHAR(06)

SET @YYYYMM = TRY_CONVERT(VARCHAR(06), @theDatePickedByUserFromCalendar, 112);



DROP TABLE IF EXISTS #RSE_assignments;	
DROP TABLE IF EXISTS #MDM_assignments;	
DROP TABLE IF EXISTS #DealerLoansAndApplications;	

SELECT
    CAST(ol.key1 AS BIGINT) internalClientId
    , CONCAT(cu.userFirstName, ' ', cu.userLastName) RegionalSalesExecutive
INTO #RSE_assignments
FROM
    DL4.dbo.ObjectLookup AS ol WITH (READUNCOMMITTED)
    INNER JOIN
    DL4.dbo.CustomAttributeValues AS cav WITH (READUNCOMMITTED)
    ON
        cav.objectId = ol.objectId

    LEFT JOIN
    DL4.dbo.ClientUser cu WITH (READUNCOMMITTED)
    ON
        cav.value = cu.internalUserId
WHERE
    ol.type = 'Client'
    AND cav.name = 'xRegionalManager'
--------------------------------------------------------

SELECT
    CAST(ol.key1 AS BIGINT) internalClientId
    , CONCAT(cu.userFirstName, ' ', cu.userLastName) MarketDevelopmentManager
INTO #MDM_assignments
FROM
    DL4.dbo.ObjectLookup AS ol WITH (READUNCOMMITTED)
    JOIN
    DL4.dbo.CustomAttributeValues AS cav WITH (READUNCOMMITTED)
    ON
        cav.objectId = ol.objectId

    LEFT JOIN
    DL4.dbo.ClientUser AS cu WITH (READUNCOMMITTED)
    ON
        cav.value = cu.internalUserId
WHERE
    ol.type = 'Client'
    AND cav.name = 'XMarketDevelopmentManager'
--------------------------------------------------------


SELECT
    dd.DealerCode
    , COUNT(fa.Client_App_ID) AS "Applications"
    , SUM(   CASE
                    WHEN fa.FundedDateKey &lt;&gt; -1
                        THEN 1
                    ELSE 0
                END
            ) AS "Loans"
INTO #DealerLoansAndApplications
FROM
    edwCrescent.dbo.DimDealer AS dd WITH (READUNCOMMITTED)
    INNER JOIN
    edwCrescent.dbo.FactApplication AS fa WITH (READUNCOMMITTED)
    ON
        fa.DealerKey = dd.DealerKey
WHERE @YYYYMM = TRY_CONVERT(VARCHAR(06), fa.ApplicationDate, 112)
GROUP BY dd.DealerCode


SELECT
    c.clientId AS DealerCode
    , COALESCE(cteMV.Applications, 0) AS "Apps"
    , COALESCE(cteMV.Loans, 0) AS "Loans"
    , c.dealerType AS "DealerType"
    , c.dbaName AS DealerDBA
    , c.clientName AS DealerLegalName
    , c.clientStreet AS "Address"
    , c.clientCity AS "City"
    , c.clientState AS "State"
    , c.clientZipCode AS "Zip"
    --, c.clientStatus AS Active
    , CONCAT('(', LEFT(c.primaryPhone, 3), ') ', SUBSTRING(c.primaryPhone, 4, 3), '-', RIGHT(c.primaryPhone, 4)) AS "Phone"
    , MDM.MarketDevelopmentManager AS "MDM"
    , cu1.userFirstName + ' ' + cu1.userLastName AS "MDR"
    , RSE.RegionalSalesExecutive AS "RSE"
    , cu.userFirstName + ' ' + cu.userLastName AS "MSE"
    , CASE
          WHEN COALESCE(ccp.megaDealer, 0) = 0
              THEN ''
          ELSE so.label
      END AS "Group"
    , ccp.xTerritory AS "Territory"
FROM
    DL4.dbo.Client AS c ---- table with branches and dealers
    INNER JOIN
    DL4.dbo.ClientUser AS cu WITH (READUNCOMMITTED)
    ON
        cu.internalUserId = c.salesRepId

    INNER JOIN
    DL4.dbo.ClientUser AS cu1 WITH (READUNCOMMITTED)
    ON
        cu1.internalUserId = c.creditOfficerId

    LEFT JOIN
    #RSE_assignments RSE
    ON
        c.internalClientId = RSE.internalClientId

    LEFT JOIN
    #MDM_assignments MDM
    ON
        c.internalClientId = MDM.internalClientId

    LEFT JOIN
    DL4.dbo.ClientCustomProperty AS ccp WITH (READUNCOMMITTED)
    ON
        ccp.internalClientId = c.internalClientId

    LEFT JOIN
    DL4.dbo.SelectOption AS so WITH (READUNCOMMITTED)
    ON
        so.value = ccp.megaDealer
        AND so.selection = 'megaDealer'

    LEFT JOIN
    #DealerLoansAndApplications AS cteMV
    ON
        cteMV.DealerCode = c.clientId
WHERE
    1 = 1
    AND c.clientType = 3
    AND c.clientId NOT IN
        (
            '12345', '1234', '1212', 'zzOK-00063'
        )
    AND c.clientStatus = 1
	--==================================================
	AND
	(
		(
			(@MDM = '0_ALL')
			AND
			(MDM.MarketDevelopmentManager is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(MDM.MarketDevelopmentManager))) = upper(LTRIM(RTRIM(@MDM))))
		)
	)
	AND
	(
		(
			(@MDR = '0_ALL')
			AND
			( (cu1.userFirstName + ' ' + cu1.userLastName) is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(cu1.userFirstName + ' ' + cu1.userLastName))) = upper(LTRIM(RTRIM(@MDR))))
		)
	)	
	AND
	(
		(
			(@RSE = '0_ALL')
			AND
			( RSE.RegionalSalesExecutive is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(RSE.RegionalSalesExecutive))) = upper(LTRIM(RTRIM(@RSE))))
		)
	)				
	AND
	(
		(
			(@MSE = '0_ALL')
			AND
			( cu.userFirstName + ' ' + cu.userLastName is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(cu.userFirstName + ' ' + cu.userLastName))) = upper(LTRIM(RTRIM(@MSE))))
		)
	)
	AND
	(
		(
			(@Territory = '0_ALL')
			AND
			( ccp.xTerritory is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(ccp.xTerritory))) = upper(LTRIM(RTRIM(@Territory))))
		)
	)			



ORDER BY c.clientId




</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>