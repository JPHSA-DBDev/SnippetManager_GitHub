<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DATES</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DECLARE_pick_a_date__FromCourtney</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DATES</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DECLARE_pick_a_date__FromCourtney</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--this uses TRY_CONVERT to get YYYYMM from: @theDatePickedByUserFromCalendar

use RiskMngt
go

--P_0051_TASK_045_SP_01_DealerMonthlyAppsAndLoansList_v5.sql
/*
	************************************************************************************
	SSRS Report: REP_xx_P_0045_0xx_
	NOTE: 
	Uses: 
	Created: 12/7/2021
	By:		Dave Hoadley 
	SSRS: 	glenn garson
	************************************************************************************
*/

----======================================================================DEBUG
--DECLARE @theDatePickedByUserFromCalendar as DATE = '03-28-2020'
--DECLARE @MDM nvarchar(100) = '0_ALL'	
--DECLARE @MDR nvarchar(100) = '0_ALL'	
--DECLARE @RSE nvarchar(100) = '0_ALL'	
--DECLARE @MSE nvarchar(100) = '0_ALL'	
--DECLARE @Territory nvarchar(100) = '0_ALL'	
----======================================================================DEBUG

   
alter Procedure [Reporting].[P_0051_TASK_045_SP_01_DealerMonthlyAppsAndLoansList](@theDatePickedByUserFromCalendar AS DATE
																					, @MDM nvarchar(100)
																					, @MDR nvarchar(100)
																					, @RSE nvarchar(100)
																					, @MSE nvarchar(100)
																					, @Territory nvarchar(100)
																					)
	as


DECLARE @YYYYMM AS VARCHAR(06)

SET @YYYYMM = TRY_CONVERT(VARCHAR(06), @theDatePickedByUserFromCalendar, 112);



DROP TABLE IF EXISTS #RSE_assignments;	
DROP TABLE IF EXISTS #MDM_assignments;	
DROP TABLE IF EXISTS #DealerLoansAndApplications;	

SELECT
    CAST(ol.key1 AS BIGINT) internalClientId
    , CONCAT(cu.userFirstName, ' ', cu.userLastName) RegionalSalesExecutive
INTO #RSE_assignments
FROM
    DL4.dbo.ObjectLookup AS ol WITH (READUNCOMMITTED)
    INNER JOIN
    DL4.dbo.CustomAttributeValues AS cav WITH (READUNCOMMITTED)
    ON
        cav.objectId = ol.objectId

    LEFT JOIN
    DL4.dbo.ClientUser cu WITH (READUNCOMMITTED)
    ON
        cav.value = cu.internalUserId
WHERE
    ol.type = 'Client'
    AND cav.name = 'xRegionalManager'
--------------------------------------------------------

SELECT
    CAST(ol.key1 AS BIGINT) internalClientId
    , CONCAT(cu.userFirstName, ' ', cu.userLastName) MarketDevelopmentManager
INTO #MDM_assignments
FROM
    DL4.dbo.ObjectLookup AS ol WITH (READUNCOMMITTED)
    JOIN
    DL4.dbo.CustomAttributeValues AS cav WITH (READUNCOMMITTED)
    ON
        cav.objectId = ol.objectId

    LEFT JOIN
    DL4.dbo.ClientUser AS cu WITH (READUNCOMMITTED)
    ON
        cav.value = cu.internalUserId
WHERE
    ol.type = 'Client'
    AND cav.name = 'XMarketDevelopmentManager'
--------------------------------------------------------


SELECT
    dd.DealerCode
    , COUNT(fa.Client_App_ID) AS "Applications"
    , SUM(   CASE
                    WHEN fa.FundedDateKey &lt;&gt; -1
                        THEN 1
                    ELSE 0
                END
            ) AS "Loans"
INTO #DealerLoansAndApplications
FROM
    edwCrescent.dbo.DimDealer AS dd WITH (READUNCOMMITTED)
    INNER JOIN
    edwCrescent.dbo.FactApplication AS fa WITH (READUNCOMMITTED)
    ON
        fa.DealerKey = dd.DealerKey
WHERE @YYYYMM = TRY_CONVERT(VARCHAR(06), fa.ApplicationDate, 112)
GROUP BY dd.DealerCode


SELECT
    c.clientId AS DealerCode
    , COALESCE(cteMV.Applications, 0) AS "Apps"
    , COALESCE(cteMV.Loans, 0) AS "Loans"
    , c.dealerType AS "DealerType"
    , c.dbaName AS DealerDBA
    , c.clientName AS DealerLegalName
    , c.clientStreet AS "Address"
    , c.clientCity AS "City"
    , c.clientState AS "State"
    , c.clientZipCode AS "Zip"
    --, c.clientStatus AS Active
    , CONCAT('(', LEFT(c.primaryPhone, 3), ') ', SUBSTRING(c.primaryPhone, 4, 3), '-', RIGHT(c.primaryPhone, 4)) AS "Phone"
    , MDM.MarketDevelopmentManager AS "MDM"
    , cu1.userFirstName + ' ' + cu1.userLastName AS "MDR"
    , RSE.RegionalSalesExecutive AS "RSE"
    , cu.userFirstName + ' ' + cu.userLastName AS "MSE"
    , CASE
          WHEN COALESCE(ccp.megaDealer, 0) = 0
              THEN ''
          ELSE so.label
      END AS "Group"
    , ccp.xTerritory AS "Territory"
FROM
    DL4.dbo.Client AS c ---- table with branches and dealers
    INNER JOIN
    DL4.dbo.ClientUser AS cu WITH (READUNCOMMITTED)
    ON
        cu.internalUserId = c.salesRepId

    INNER JOIN
    DL4.dbo.ClientUser AS cu1 WITH (READUNCOMMITTED)
    ON
        cu1.internalUserId = c.creditOfficerId

    LEFT JOIN
    #RSE_assignments RSE
    ON
        c.internalClientId = RSE.internalClientId

    LEFT JOIN
    #MDM_assignments MDM
    ON
        c.internalClientId = MDM.internalClientId

    LEFT JOIN
    DL4.dbo.ClientCustomProperty AS ccp WITH (READUNCOMMITTED)
    ON
        ccp.internalClientId = c.internalClientId

    LEFT JOIN
    DL4.dbo.SelectOption AS so WITH (READUNCOMMITTED)
    ON
        so.value = ccp.megaDealer
        AND so.selection = 'megaDealer'

    LEFT JOIN
    #DealerLoansAndApplications AS cteMV
    ON
        cteMV.DealerCode = c.clientId
WHERE
    1 = 1
    AND c.clientType = 3
    AND c.clientId NOT IN
        (
            '12345', '1234', '1212', 'zzOK-00063'
        )
    AND c.clientStatus = 1
	--==================================================
	AND
	(
		(
			(@MDM = '0_ALL')
			AND
			(MDM.MarketDevelopmentManager is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(MDM.MarketDevelopmentManager))) = upper(LTRIM(RTRIM(@MDM))))
		)
	)
	AND
	(
		(
			(@MDR = '0_ALL')
			AND
			( (cu1.userFirstName + ' ' + cu1.userLastName) is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(cu1.userFirstName + ' ' + cu1.userLastName))) = upper(LTRIM(RTRIM(@MDR))))
		)
	)	
	AND
	(
		(
			(@RSE = '0_ALL')
			AND
			( RSE.RegionalSalesExecutive is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(RSE.RegionalSalesExecutive))) = upper(LTRIM(RTRIM(@RSE))))
		)
	)				
	AND
	(
		(
			(@MSE = '0_ALL')
			AND
			( cu.userFirstName + ' ' + cu.userLastName is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(cu.userFirstName + ' ' + cu.userLastName))) = upper(LTRIM(RTRIM(@MSE))))
		)
	)
	AND
	(
		(
			(@Territory = '0_ALL')
			AND
			( ccp.xTerritory is not Null)
		)
		OR
		( 
			(upper(LTRIM(RTRIM(ccp.xTerritory))) = upper(LTRIM(RTRIM(@Territory))))
		)
	)			



ORDER BY c.clientId




</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>HISTOGRAM</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>my_Histogram_Example</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>HISTOGRAM</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>my_Histogram_Example</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>use RiskMngt
go

--0000_General_SNIPPET_0784__HISTOGRAM__APP_MAST_example.sql


DECLARE @NoOfMonthsAgoToStart as INT = 24				--First day of month, 24 months ago
DECLARE @START_DATE date = DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) -  @NoOfMonthsAgoToStart, 0)
--DECLARE @START_DATE date = '8-01-2018'
DECLARE @END_DATE as DATE = CONVERT(DATE, DATEADD(WEEK, DATEDIFF(WEEK, 7, GETDATE()), 6))	--the last sunday prior to today.
--DECLARE @END_DATE date = '12-31-2018'


PRINT '1) Input @START_DATE: [' + + LEFT(CONVERT(VARCHAR, @START_DATE, 121), 10) + ']'
PRINT '2) Input @END_DATE: [' + + LEFT(CONVERT(VARCHAR, @END_DATE, 121), 10) + ']'

--===============================================================================================================================
IF OBJECT_ID('tempdb..#tempListOfDates') IS NOT NULL DROP TABLE #tempListOfDates
IF OBJECT_ID('tempdb..#values') IS NOT NULL DROP TABLE #values


;WITH cte AS
(
  SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) - 1 AS [Incrementor]
  FROM   [master].[sys].[columns] sc1
  CROSS JOIN [master].[sys].[columns] sc2
)

--select * from cte
,
cte_theDates as
(
SELECT TOP(11111)
	DATEADD(DAY, cte.[Incrementor], @START_DATE) as theDate
	,CONVERT(DATE, DATEADD(WEEK, DATEDIFF(WEEK, 0, DATEADD(DAY, (cte.[Incrementor] - 1 ), @START_DATE)), 0)) as FirstDayOfTheWeek  --Monday
FROM   cte
WHERE  DATEADD(DAY, cte.[Incrementor], @START_DATE) &lt;= @END_DATE			--GETDATE();

)

--select top(1111) * from cte_theDates

SELECT  DISTINCT
	theDate
	,FirstDayOfTheWeek
INTO #tempListOfDates
FROM cte_theDates

ORDER BY theDate

--SELECT TOP(11) * FROM #tempListOfDates ORDER BY theDate
--===============================================================================================================================
--===============================================================================================================================
--===============================================================================================================================


SELECT
	am.[APPROVED_AMT] as value

INTO #values
FROM 
	#tempListOfDates tmp
	INNER JOIN
	[edwCrescent].[dbo].[APP_MAST] am with (READUNCOMMITTED)
	ON tmp.theDate = CONVERT(DATE,am.[APPLICATION_DATE])
WHERE 
		CONVERT(DATE,am.[APPLICATION_DATE]) &gt;= @START_DATE
		AND
		CONVERT(DATE,am.[APPLICATION_DATE]) &lt;= @END_DATE
ORDER BY FirstDayOfTheWeek

SELECT top(11) *
FROM #values
--===============================================================================================================================
--===============================================================================================================================
--===============================================================================================================================

DECLARE @interval numeric(38, 18), --- How "wide" each range is
        @min      numeric(38, 18), --- The lowest value in the table
        @max      numeric(38, 18), --- The highest value in the table
        --- Presentation:
        @levels   smallint=50;      --- How many levels/ranges to display

--- Check the source data for MIN(), MAX() and COUNT(). This
--- is a highly efficient stream aggregate.
SELECT @max=MAX(value),
       @min=MIN(value)
FROM #values;


SET @interval=(@max-@min)/@levels;


WITH ranges ([range], fromValue, toValue)
AS ( --- Start with @min, increment by @interval until
     --- [range] equals @levels:
     SELECT 1 AS [range], @min AS fromValue, @min+@interval AS toValue
     UNION ALL
     SELECT [range]+1, toValue, toValue+@interval
     FROM ranges
     WHERE [range]&lt;@levels)

--SELECT * FROM ranges;     --&lt;============  Here are the Ranges


, ranges2 ([range], fromValue, toValue)
AS ( SELECT 1 AS [range], @min AS fromValue, @min+@interval AS toValue
     UNION ALL
     SELECT [range]+1, toValue, toValue+@interval
     FROM ranges2
     WHERE [range]&lt;@levels)

SELECT r.fromValue,
       r.toValue,
       COUNT(v.value) AS [count]
FROM ranges2 AS r
LEFT JOIN #values AS v ON
    r.fromValue&lt;=v.value AND    --- v.value falls within the range r.fromValue..
   (r.toValue&gt;v.value OR        --- ... and r.toValue, or r.toValue and v.value
    r.toValue&gt;@max-0.5*@interval AND -- are both @max.
    v.value=@max)
GROUP BY r.[range], r.fromValue, r.toValue
ORDER BY r.[range];

--==========================================================================================================

IF OBJECT_ID('tempdb..#tempListOfDates') IS NOT NULL DROP TABLE #tempListOfDates
IF OBJECT_ID('tempdb..#values') IS NOT NULL DROP TABLE #values</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>JSON</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>example_UnPeelingTheOnion_fromGraham</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>JSON</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>example_UnPeelingTheOnion_fromGraham</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--example_UnPeelingTheOnion_fromGraham

Select 
distinct(ws.applicationNumber)
,NAS


From dl4.dbo.ApplicantDetail as app								-- For each row in ApplicantDetail:
		OUTER APPLY
	OPENJSON (app.instantIDResponse)							--Open the JSON for the field 'isntantIDResponse'
		WITH ( 
			NAS INT '$.nameAddressSSNSummary',					--assigned [NAS] from the keyword 'nameAddressSSNSummary'
			risks NVARCHAR(MAX) '$.riskIndicators' AS JSON)		--Convert the nested structure 'riskIndicators' into a JSON called 'risks'
			OUTER APPLY OPENJSON( risks)						--Open 'risks', and create multiple records for the same app, each with an associated reason code.
			WITH (riskIndicator NVARCHAR(128) '$.reasonCode')



Left Join dl4.dbo.worksheet ws with (READUNCOMMITTED) on ws.applicationId = app.internalApplicationId
Where app.instantIdResponse &lt;&gt; ''  and (app.dateCreated between '01-01-2018' and '04-30-2019') and riskIndicator = 'MI'and NAS &lt; 9 


----============================================================================Here is one of the strings for [instantIDResponse] from: dl4.dbo.ApplicantDetail
-- nameAddressSSNSummary is at line 27
-- riskIndicators is at line 154
-- reasonCode   at Line 159, 165 and 171


{
	"searchDateTime":1526397633144
	,"nameAddressSSNSummary":9
	,"potentialFollowUpActions":[
									{
										"sequence":0
										,"description":"Verify name with Address (via DL, utility bill, Directory Assistance, paycheck stub, or other Government Issued ID)"
										,"jsonType":"LexisNexisElement"
										,"reasonCode":"C"
									}
									,
									{
										"sequence":0
										,"description":"Verify phone (Directory Assistance, utility bill)"
										,"jsonType":"LexisNexisElement"
										,"reasonCode":"D"
									}
								]
	,"nameAddressPhoneSummary":0
	,"chronologyHistory":{
							"ChronologyHistories":{
													"ChronologyHistory":[
																			{
																				"Address":{
																								"StreetName":"COUNTY ROAD 107"
																								,"State":"AL"
																								,"Zip4":3966
																								,"StreetNumber":2594
																								,"City":"RANDOLPH"
																								,"Zip5":36792
																								,"StreetAddress1":"2594 COUNTY ROAD 107"
																							}
																							,"DateLastSeen":{
																												"Month":"04"
																												,"Year":2018
																											}
																							,"Phone":3348500522
																							,"IsBestAddress":1
																							,"DateFirstSeen":{
																												"Month":11
																												,"Year":2009
																												}
																			}
																			,{
																				"Address":{
																								"StreetName":"BANKS RIDGE"
																								,"State":"GA"
																								,"Zip4":2817
																								,"StreetNumber":183
																								,"City":"BALDWIN"
																								,"Zip5":30511
																								,"StreetSuffix":"DR"
																								,"StreetAddress1":"183 BANKS RIDGE DR"
																							}
																							,"DateLastSeen":{
																												"Month":"05"
																												,"Year":2018
																											}
																							,"DateFirstSeen":{
																												"Month":"01"
																												,"Year":2007
																											  }
																			}
																			,{
																				"Address":{
																								"StreetName":"COUNTY ROAD 107"
																								,"State":"AL"
																								,"Zip4":3968
																								,"StreetNumber":2672
																								,"City":"RANDOLPH"
																								,"Zip5":36792
																								,"StreetAddress1":"2672 COUNTY ROAD 107"
																						   }
																						   ,"DateLastSeen":{
																											"Month":12
																											,"Year":2009
																										   }
																							,"DateFirstSeen":{
																												"Month":"04"
																												,"Year":2009
																											  }
																				}
																			]
													,"xmlns":"http:\/\/webservices.seisint.com\/WsIdentity"
												}
						}
						,"verifiedInput":{
											"VerifiedInput":{
																"xmlns":"http:\/\/webservices.seisint.com\/WsIdentity"
																,"Address":{
																				"StreetName":"TRILLIAM"
																				,"State":"AL"
																				,"Zip4":8739
																				,"StreetNumber":1002
																				,"City":"CLANTON"
																				,"County":"CHILTON"
																				,"Zip5":35045
																				,"StreetSuffix":"LN"
																				,"StreetAddress1":"1002 TRILLIAM LN"
																			}
																			,"SSN":"41167xxxx"
																			,"Name":{
																						"Last":"PATE"
																						,"First":"COY"
																					}
															}
										}
										,"SSNInfo":{
													"SSNInfo":{
																"xmlns":"http:\/\/webservices.seisint.com\/WsIdentity"
																,"Valid":"G"
																,"IssuedLocation":"Tennessee"
																,"IssuedStartDate":{
																						"Month":"01"
																						,"Year":1991
																						,"Day":"01"
																					}
																					,"IssuedEndDate":{
																										"Month":12
																										,"Year":1991
																										,"Day":31
																										}
																}
													}
										,"jsonType":"LexisNexisInstantIdResponse"
										,"riskIndicators":[
															{
																"sequence":1
																,"description":"Unable to verify phone number"
																,"jsonType":"LexisNexisElement"
																,"reasonCode":"27"
															}
															,{
																"sequence":2
																,"description":"Unable to verify date-of-birth"
																,"jsonType":"LexisNexisElement"
																,"reasonCode":"28"
																}
															,{
																"sequence":3
																,"description":"The input phone number is a mobile number"
																,"jsonType":"LexisNexisElement"
																,"reasonCode":"10"
																}
														]
										,"comprehensiveVerificationIndex":50
										,"transactionId":"129247882R40949"
}
		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>NOLOCK</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>NOLOCK</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

--USAGE:
SELECT * FROM Person.Contact WITH (NOLOCK) WHERE ContactID &lt; 20
---------------------------------
from 
		CBCustom.dbo.PaymentusCustomerDailyActivity CUS with (READUNCOMMITTED)
		left join 
		collect.dbo.M01 M01 with (READUNCOMMITTED)
		ON'000'+ CUS.ACCOUNT_NUMBER = M01.ACCOUNT
------------------------------

Lock Types
	MD - metadata lock
	DB - database lock
	TAB - table lock
	PAG - page lock
Mode
	S - Shared access
	Sch-S - Schema stability makes sure the schema is not changed while object is in use
	IS - Intent shared indicates intention to use S locks
	
===============================================================================================================================================		
https://www.sqlshack.com/understanding-the-impact-of-nolock-and-with-nolock-table-hints-in-sql-server/

The default behaviour in SQL Server is for every query to acquire its own shared lock prior to reading data from a given table. 
This behaviour ensures that you are only reading committed data. 
However, the NOLOCK table hint allows you to instruct the query optimiser to read a given table without obtaining an exclusive or shared lock.

 SELECT [Jersey Number]      
  FROM [SQLShack].[dbo].[2016_FIFABallonDOr] (NOLOCK)   --&lt;================ NOLOCK HINT {deprecated by Microsoft as of 2017}
  WHERE [Nominee] = 'Lionel Messi'

The benefits of querying data using the NOLOCK table hint is that it requires less memory and prevents deadlocks from occurring 
with any other queries that may be reading similar data. 
===============================================================================================================================================	
https://stackoverflow.com/questions/12608780/understanding-sql-server-locks-on-select-queries  ================================================================
	
A SELECT in SQL Server will place a shared lock on a table row - and a second SELECT would also require a shared lock, and those are compatible with one another.

So no - one SELECT cannot block another SELECT.

What the WITH (NOLOCK) query hint is used for is to be able to read data that's in the process of being inserted 
	(by another connection) and that hasn't been committed yet.

Without that query hint, 
	a SELECT might be blocked reading a table by an ongoing INSERT (or UPDATE) statement that places an exclusive lock on rows 
	(or possibly a whole table), until that operation's transaction has been committed (or rolled back).

Problem of the WITH (NOLOCK) hint is: you might be reading data rows that aren't going to be inserted at all, 
	in the end (if the INSERT transaction is rolled back) - 
	so your e.g. report might show data that's never really been committed to the database.

There's another query hint that might be useful - WITH (READPAST). 
	This instructs the SELECT command to just skip any rows that it attempts to read and that are locked exclusively. 
	The SELECT will not block, and it will not read any "dirty" un-committed data - 
	but it might skip some rows, e.g. not show all your rows in the table.
	
------------------------------------------------------------------------------------------------------
On performance you keep focusing on select.
Shared does not block reads.
Shared lock blocks update.
If you have hundreds of shared locks it is going to take an update a while to get an exclusive lock as it must wait for shared locks to clear.

By default a select (read) takes a shared lock.
Shared (S) locks allow concurrent transactions to read (SELECT) a resource.
A shared lock as no effect on other selects (1 or a 1000).	

The difference is how the nolock versus shared lock effects update or insert operation.

No other transactions can modify the data while shared (S) locks exist on the resource.

A shared lock blocks an update!
But nolock does not block an update.
==========================================	==========================================	==========================================	==========================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table_Hints_LocksScanSeek_etc</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>readMe_Table_Hints_LocksScanSeek_etc</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table_Hints_LocksScanSeek_etc</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>readMe_Table_Hints_LocksScanSeek_etc</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>readMe_Table_Hints_LocksScanSeek_etc

Because the SQL Server query optimizer typically selects the best execution plan for a query, 
we recommend that hints be used only as a last resort by experienced developers and database administrators.


WITH  ( &lt;table_hint&gt; [ [, ]...n ] )

&lt;table_hint&gt; ::= 
[ NOEXPAND ] { 
    INDEX ( index_value [ ,...n ] ) | INDEX =  ( index_value )
  | FASTFIRSTROW 
  | FORCESEEK [( index_value ( index_column_name  [ ,... ] ) ) ]
  | FORCESCAN
  | HOLDLOCK 
  | NOLOCK 
  | NOWAIT
  | PAGLOCK 
  | READCOMMITTED 
  | READCOMMITTEDLOCK 
  | READPAST 
  | READUNCOMMITTED 
  | REPEATABLEREAD 
  | ROWLOCK 
  | SERIALIZABLE 
  | TABLOCK 
  | TABLOCKX 
  | UPDLOCK 
  | XLOCK 
} 

&lt;table_hint_limited&gt; ::=
{
    KEEPIDENTITY 
  | KEEPDEFAULTS 
  | FASTFIRSTROW 
  | HOLDLOCK 
  | IGNORE_CONSTRAINTS 
  | IGNORE_TRIGGERS 
  | NOLOCK 
  | NOWAIT
  | PAGLOCK 
  | READCOMMITTED 
  | READCOMMITTEDLOCK 
  | READPAST 
  | REPEATABLEREAD 
  | ROWLOCK 
  | SERIALIZABLE 
  | TABLOCK 
  | TABLOCKX 
  | UPDLOCK 
  | XLOCK 
} </Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>