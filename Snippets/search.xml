<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Map_GeoSpatial</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>about_DAX_Map_GeoSpatial</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Map_GeoSpatial</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>about_DAX_Map_GeoSpatial</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_DAX_Map_GeoSpatial

'a list of cities from - The free file contained approximately 7000 cities with lat/long info.  
http://simplemaps.com/data/world-cities. 

'Author used colors from: ColorBrewer, and  marked the selected point in red (#ff0000) where distance = 0.
https://colorbrewer2.org/#type=sequential&amp;scheme=GnBu&amp;n=5

Display Points within a Distance Radius on a Power BI Map
https://dataveld.com/2019/03/20/display-points-within-a-distance-radius-on-a-power-bi-map/

Calculate distance between two latitude-longitude points? (Haversine formula)
https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula

COMPUTING DISTANCES
https://cs.nyu.edu/visual/home/proj/tiger/gisfaq.html

Dynamic distances in Power BI
https://radacad.com/dynamic-distances-in-power-bi


Earth Radius:
radius(KM) = 6371
radius(Miles) = 3,958.8</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework_PowerTools</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>1_ReverseEngineerCodeFirst__Mapping.tt</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework_PowerTools</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>1_ReverseEngineerCodeFirst__Mapping.tt</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;#
// Simplifying assumptions based on reverse engineer rules
//  - No complex types
//  - One entity container
//  - No inheritance
//  - Always have two navigation properties
//  - All associations expose FKs (except many:many)
#&gt;
&lt;#@ template hostspecific="true" language="C#" #&gt;
&lt;#@ include file="EF.Utility.CS.ttinclude" #&gt;&lt;#@
 output extension=".cs" #&gt;&lt;#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);

	if (efHost.EntityFrameworkVersion &gt;= new Version(4, 4))
	{
#&gt;
using System.ComponentModel.DataAnnotations.Schema;
&lt;#
	}
	else
	{
#&gt;
using System.ComponentModel.DataAnnotations;
&lt;#
	}
#&gt;
using System.Data.Entity.ModelConfiguration;

namespace &lt;#= code.EscapeNamespace(efHost.Namespace) #&gt;
{
    public class &lt;#= efHost.EntityType.Name #&gt;Map : EntityTypeConfiguration&lt;&lt;#= efHost.EntityType.Name #&gt;&gt;
    {
        public &lt;#= efHost.EntityType.Name #&gt;Map()
        {
            // Primary Key
&lt;#
    if (efHost.EntityType.KeyMembers.Count() == 1)
    {
#&gt;
            this.HasKey(t =&gt; t.&lt;#= efHost.EntityType.KeyMembers.Single().Name #&gt;);
&lt;#
    }
    else
    {
#&gt;
            this.HasKey(t =&gt; new { &lt;#= string.Join(", ", efHost.EntityType.KeyMembers.Select(m =&gt; "t." + m.Name)) #&gt; });
&lt;#
    }
#&gt;

            // Properties
&lt;#
    foreach (var prop in efHost.EntityType.Properties)
    {
        var type = (PrimitiveType)prop.TypeUsage.EdmType;
        var isKey = efHost.EntityType.KeyMembers.Contains(prop);
        var storeProp = efHost.PropertyToColumnMappings[prop];
        var sgpFacet = storeProp.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "StoreGeneratedPattern");
        var storeGeneratedPattern = sgpFacet == null
            ? StoreGeneratedPattern.None
            : (StoreGeneratedPattern)sgpFacet.Value;
            
        var configLines = new List&lt;string&gt;();
             
        if (type.ClrEquivalentType == typeof(int)
            || type.ClrEquivalentType == typeof(decimal)
            || type.ClrEquivalentType == typeof(short)
            || type.ClrEquivalentType == typeof(long))
        {
            if (isKey &amp;&amp; storeGeneratedPattern != StoreGeneratedPattern.Identity)
            {
                configLines.Add(".HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)");
            }
            else if ((!isKey || efHost.EntityType.KeyMembers.Count &gt; 1) &amp;&amp; storeGeneratedPattern == StoreGeneratedPattern.Identity)
            {
                configLines.Add(".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)");
            }
        }
                    
        if (type.ClrEquivalentType == typeof(string)
            || type.ClrEquivalentType == typeof(byte[]))
        {
            if (!prop.Nullable)
            {
                configLines.Add(".IsRequired()");
            }
                
            var unicodeFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "IsUnicode");
            if(unicodeFacet != null &amp;&amp; !(bool)unicodeFacet.Value)
            {
                configLines.Add(".IsUnicode(false)");
            }
                
            var fixedLengthFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "FixedLength");
            if (fixedLengthFacet != null &amp;&amp; (bool)fixedLengthFacet.Value)
            {
                configLines.Add(".IsFixedLength()");
            }
                
            var maxLengthFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "MaxLength");
            if (maxLengthFacet != null &amp;&amp; !maxLengthFacet.IsUnbounded)
            {
                configLines.Add(string.Format(".HasMaxLength({0})", maxLengthFacet.Value));

                if (storeGeneratedPattern == StoreGeneratedPattern.Computed
                    &amp;&amp; type.ClrEquivalentType == typeof(byte[])
                    &amp;&amp; (int)maxLengthFacet.Value == 8)
                {
                    configLines.Add(".IsRowVersion()");
                }
            }
        }
            
        if(configLines.Any())
        {
#&gt;
            this.Property(t =&gt; t.&lt;#= prop.Name #&gt;)
                &lt;#= string.Join("\r\n                ", configLines) #&gt;;

&lt;#
        }
    }


        
    // Find m:m relationshipsto configure 
    var manyManyRelationships = efHost.EntityType.NavigationProperties
        .Where(np =&gt; np.DeclaringType == efHost.EntityType
            &amp;&amp; np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            &amp;&amp; np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            &amp;&amp; np.RelationshipType.RelationshipEndMembers.First() == np.FromEndMember); // &lt;- ensures we only configure from one end
        
    // Find FK relationships that this entity is the dependent of
    var fkRelationships = efHost.EntityType.NavigationProperties
        .Where(np =&gt; np.DeclaringType == efHost.EntityType
            &amp;&amp; ((AssociationType)np.RelationshipType).IsForeignKey
            &amp;&amp; ((AssociationType)np.RelationshipType).ReferentialConstraints.Single().ToRole == np.FromEndMember);
        
    if(manyManyRelationships.Any() || fkRelationships.Any())
    {
#&gt;

            // Relationships
&lt;#
        foreach (var navProperty in manyManyRelationships)
        {
            var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n =&gt; n.RelationshipType == navProperty.RelationshipType &amp;&amp; n != navProperty).Single();
            var association = (AssociationType)navProperty.RelationshipType;
            var mapping = efHost.ManyToManyMappings[association];
            var item1 = mapping.Item1;
            var mappingTableName = (string)mapping.Item1.MetadataProperties["Table"].Value
                ?? item1.Name;
            var mappingSchemaName = (string)item1.MetadataProperties["Schema"].Value;

            // Need to ensure that FKs are decalred in the same order as the PK properties on each principal type
            var leftType = (EntityType)navProperty.DeclaringType;
            var leftKeyMappings = mapping.Item2[navProperty.FromEndMember];
            var leftColumns = string.Join(", ", leftType.KeyMembers.Select(m =&gt; "\"" + leftKeyMappings[m] + "\""));
            var rightType = (EntityType)otherNavProperty.DeclaringType;
            var rightKeyMappings = mapping.Item2[otherNavProperty.FromEndMember];
            var rightColumns = string.Join(", ", rightType.KeyMembers.Select(m =&gt; "\"" + rightKeyMappings[m] + "\""));
#&gt;
            this.HasMany(t =&gt; t.&lt;#= code.Escape(navProperty) #&gt;)
                .WithMany(t =&gt; t.&lt;#= code.Escape(otherNavProperty) #&gt;)
                .Map(m =&gt;
                    {
&lt;#
            if (mappingSchemaName == "dbo" || string.IsNullOrWhiteSpace(mappingSchemaName))
            {
#&gt;
                        m.ToTable("&lt;#= mappingTableName #&gt;");
&lt;#
            }
            else
            {
#&gt;
                        m.ToTable("&lt;#= mappingTableName #&gt;", "&lt;#= mappingSchemaName #&gt;");
&lt;#
            }
#&gt;
                        m.MapLeftKey(&lt;#= leftColumns #&gt;);
                        m.MapRightKey(&lt;#= rightColumns #&gt;);
                    });

&lt;#
        }
            
        foreach (var navProperty in fkRelationships)
        {
            var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n =&gt; n.RelationshipType == navProperty.RelationshipType &amp;&amp; n != navProperty).Single();
            var association = (AssociationType)navProperty.RelationshipType;
                
            if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One)
            {
#&gt;
            this.HasRequired(t =&gt; t.&lt;#= code.Escape(navProperty) #&gt;)
&lt;#
            }
            else
            {
#&gt;
            this.HasOptional(t =&gt; t.&lt;#= code.Escape(navProperty) #&gt;)
&lt;#
            }
                
            if(navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#&gt;
                .WithMany(t =&gt; t.&lt;#= code.Escape(otherNavProperty) #&gt;)
&lt;#
                if(association.ReferentialConstraints.Single().ToProperties.Count == 1)
                {
#&gt;
                .HasForeignKey(d =&gt; d.&lt;#= association.ReferentialConstraints.Single().ToProperties.Single().Name #&gt;);
&lt;#
                }
                else
                {
#&gt;
                .HasForeignKey(d =&gt; new { &lt;#= string.Join(", ", association.ReferentialConstraints.Single().ToProperties.Select(p =&gt; "d." + p.Name)) #&gt; });
&lt;#
                }
            }
            else
            {
                // NOTE: We can assume that this is a required:optional relationship 
                //       as EDMGen will never create an optional:optional relationship
                // 		 because everything is one:many except PK-PK relationships which must be required
#&gt;
                .WithOptional(t =&gt; t.&lt;#= code.Escape(otherNavProperty) #&gt;);
&lt;#	
                }
            }
#&gt;

&lt;#
        }
#&gt;
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking

/*

In database management systems following the relational model, 
a junction table is a database table 
that contains common fields from two or more other database tables within the same database. 
It is on the many side of a one-to-many relationship with each of the other tables. 
Junction tables are known under many names, among them 
cross-reference table, 
bridge table, 
join table, 
map table, 
intersection table, 
linking table, 
many-to-many resolver, 
link table, 
pairing table, 
pivot table, 
transition table, 
crosswalk, 
associative entity 
or association table.
*/


see the 'TEST_DATA_simulation' section for a test data table simulation of this type of data</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Logins_Users</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Usernames_Logins_MapThemFromDatabaseToServer_mark_ORPHANED</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Logins_Users</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Usernames_Logins_MapThemFromDatabaseToServer_mark_ORPHANED</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Usernames_Logins_MapThemFromDatabaseToServer_mark_ORPHANED


use barriere
go

select
    dp.name [user_name]
    ,dp.type_desc [user_type]
    ,isnull(sp.name,'Orhphaned!') [login_name]
    ,sp.type_desc [login_type]
from   
    sys.database_principals dp
    left join sys.server_principals sp on (dp.sid = sp.sid)
where
    dp.type in ('S','U','G')
    and dp.principal_id &gt;4
order by sp.name


--user_name				user_type			login_name			login_type
------------			---------			----------			----------
--Administrator			WINDOWS_USER		Orhphaned!			NULL
--Safety				SQL_USER			Orhphaned!			NULL
--IUSR_CONTROL			WINDOWS_USER		Orhphaned!			NULL
--distributor_admin		SQL_USER			Orhphaned!			NULL
--sa_reportsx			SQL_USER			Orhphaned!			NULL
--BCC\blakec			WINDOWS_USER		BCC\blakec			WINDOWS_LOGIN
--BCC\deweyh			WINDOWS_USER		BCC\deweyh			WINDOWS_LOGIN
--BCC\deweytest			WINDOWS_USER		BCC\deweytest		WINDOWS_LOGIN
--BCC\Domain Users		WINDOWS_GROUP		BCC\Domain Users	WINDOWS_GROUP
--BCC\g_SQL_Level1		WINDOWS_GROUP		BCC\g_SQL_Level1	WINDOWS_GROUP
--BCC\g_SQL_Level2		WINDOWS_GROUP		BCC\g_SQL_Level2	WINDOWS_GROUP
--BCC\g_SQL_User1		WINDOWS_GROUP		BCC\g_SQL_User1		WINDOWS_GROUP
--BCC\glenng			WINDOWS_USER		BCC\glenng			WINDOWS_LOGIN
--DotNet_RO				SQL_USER			DotNet_RO			SQL_LOGIN
--DotNet_RW				SQL_USER			DotNet_RW			SQL_LOGIN
--sa_reports			SQL_USER			sa_reports			SQL_LOGIN


/* http://dba.stackexchange.com/questions/40844/after-moving-database-backup-restore-i-have-to-re-add-user

What commonly happens with SQL authenticated logins and database users on a restore 
is that the SIDS will be out of sync, thus breaking the relationship. 
This relationship must be repaired before you can connect to the database using that login, 
because in the eyes of SQL Server those principals are no longer connected. 
You can fix this with the following SQL:
*/

ALTER USER [foo] WITH LOGIN=[foo]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Map_Drives</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_Map_Drives</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Map_Drives</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_Map_Drives</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Map_Drives

'  http://www.computerperformance.co.uk/Logon/Logon_HomeDir.htm#Example_1_-_MapNetworkDrive_-_basic_
' MapNetworkDrive.vbs
' VBScript to map a network drive to a UNC Path.
' Author Guy Thomas http://computerperformance.co.uk/
' Version 2.3 - September 2005
' -----------------------------------------------------------------' 
Option Explicit
Dim objNetwork 
Dim strDriveLetter, strRemotePath
strDriveLetter = "Y:" 
strRemotePath = "\\vhacpafpc3.vha.med.va.gov\Consolidated Revenue Unit\Audit_Aug_2008" 

'consolidated revenue unit on 'vhacpafpc3.vha.med.va.gov'

' Purpose of script to create a network object. (objNetwork)
' Then to apply the MapNetworkDrive method.  Result Y: drive
Set objNetwork = CreateObject("WScript.Network") 

objNetwork.MapNetworkDrive strDriveLetter, strRemotePath 
WScript.Quit

' End of Example VBScript.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Map_Drives</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Map_Multiple_Drives</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Map_Drives</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Map_Multiple_Drives</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Dim WSHNetwork
Dim FSO


Set WSHNetwork = WScript.CreateObject("WScript.Network")
Set FSO = CreateObject("Scripting.FileSystemObject")


WshNetwork.RemoveNetworkDrive "H:", True, false
WshNetwork.RemoveNetworkDrive "i:", True, false
WshNetwork.RemoveNetworkDrive "j:", True, false
WshNetwork.RemoveNetworkDrive "k:", True, false

WSHNetwork.MapNetworkDrive "H:", "\\b2wtimesheet\C$"
WSHNetwork.MapNetworkDrive "i:", "\\bcc-explorerdb\C$"
WSHNetwork.MapNetworkDrive "j:", "\\bcc-explorer3db\C$"
WSHNetwork.MapNetworkDrive "k:", "\\bcc-explorer3\C$"

'*****************************************************
result=Msgbox("Good To Go!",vbYesNo+vbInformation, "")
'*****************************************************


Set wshNetwork = Nothing
Set wshShell = Nothing
WScript.Quit</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWER_BI</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MAP_visual_Properties</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWER_BI</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MAP_visual_Properties</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Auto zoom off: 
	Map Visual Properties =&gt; Map Controls  =&gt; Auto</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DISM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>DISM.exe__mapTo__DISM_cmdlet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DISM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>DISM.exe__mapTo__DISM_cmdlet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/use-dism-in-windows-powershell-s14

Dism.exe command				DISM cmdlet
Dism.exe /Add-Capability		Add-WindowsCapability
Dism.exe /Append-Image			Add-WindowsImage
Dism.exe /Apply-Image			Expand-WindowsImage
Dism.exe /Capture-Image			New-WindowsImage
Dism.exe /Cleanup-MountPoints	Clear-WindowsCorruptMountPoint
Dism.exe /Commit-Image			Save-WindowsImage
Dism.exe /Export-Image			Export-WindowsImage
Dism.exe /Get-Capabilities		Get-WindowsCapability
Dism.exe /Get-ImageInfo			Get-WindowsImage
Dism.exe /Get-MountedImageInfo	Get-WindowsImage -Mounted
Dism.exe /Get-WimBootEntry		Get-WIMBootEntry
Dism.exe /List-Image			Get-WindowsImageContent
Dism.exe /Mount-Image			Mount-WindowsImage
Dism.exe /Split-Image			Split-WindowsImage
Dism.exe /Remove-Capability		Remove-WindowsCapability
Dism.exe /Remove-Image			Remove-WindowsImage
Dism.exe /Remount-Image			Mount-WindowsImage -Remount
Dism.exe /Unmount-Image			Dismount-WindowsImage
Dism.exe /Update-WimBootEntry	Update-WIMBootEntry
Dism.exe /Image:&lt;...&gt; /Add-Driver						Add-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Add-Package						Add-WindowsPackage
Dism.exe /Image:&lt;...&gt; /Add-ProvisionedAppxPackage		Add-AppxProvisionedPackage
Dism.exe /Image:&lt;...&gt; /Cleanup-Image /CheckHealth		Repair-WindowsImage -CheckHealth
Dism.exe /Image:&lt;...&gt; /Cleanup-Image /ScanHealth		Repair-WindowsImage -ScanHealth
Dism.exe /Image:&lt;...&gt; /Cleanup-Image /RestoreHealth		Repair-WindowsImage -RestoreHealth
Dism.exe /Image:&lt;...&gt; /Disable-Feature					Disable-WindowsOptionalFeature
Dism.exe /Image:&lt;...&gt; /Enable-Feature					Enable-WindowsOptionalFeature
Dism.exe /Image:&lt;...&gt; /Export-Driver					Export-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Get-CurrentEdition				Get-WindowsEdition -Current
Dism.exe /Image:&lt;...&gt; /Get-Driverinfo					Get-WindowsDriver -Driver
Dism.exe /Image:&lt;...&gt; /Get-Drivers						Get-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Get-Featureinfo					Get-WindowsOptionalFeature -FeatureName
Dism.exe /Image:&lt;...&gt; /Get-Features						Get-WindowsOptionalFeature
Dism.exe /Image:&lt;...&gt; /Get-Packageinfo					Get-WindowsPackage -PackagePath
Dism.exe /Image:&lt;...&gt; /Get-Packages						Get-WindowsPackage
Dism.exe /Image:&lt;...&gt; /Get-ProvisionedAppxPackages		Get-AppxProvisionedPackage
Dism.exe /Image:&lt;...&gt; /Get-TargetEditions				Get-WindowsEdition -Target
Dism.exe /Image:&lt;...&gt; /Optimize-Image					Optimize-WindowsImage
Dism.exe /Image:&lt;...&gt; /Remove-Driver					Remove-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Remove-Package					Remove-WindowsPackage
Dism.exe /Image:&lt;...&gt; /Remove-ProvisionedAppxPackage	Remove-AppxProvisionedPackage
Dism.exe /Image:&lt;...&gt; /Set-Edition						Set-WindowsEdition
Dism.exe /Image:&lt;...&gt; /Set-ProductKey					Set-WindowsProductKey
Dism.exe /Image:&lt;...&gt; /Set-ProvisionedAppxDataFile		Set-AppXProvisionedDataFile
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_seaborn</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>HeatMap_example</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_seaborn</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>HeatMap_example</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.DataFrame(np.random.rand(10,10),columns=list('ABCDEFGHIJ'))

print(df.head)
#OUTPUT
# #=================================================================
#     A         B         C  ...         H         I         J
# 0  0.101439  0.390455  0.885338  ...  0.476660  0.721221  0.481876
# 1  0.072802  0.147099  0.614458  ...  0.336990  0.823996  0.944901
# 2  0.524037  0.166100  0.871299  ...  0.004706  0.156408  0.600077
# 3  0.496044  0.827754  0.210141  ...  0.644090  0.098120  0.444414
# #=================================================================

#create HeadMap:  10 rows deep, and a column for each letter in list('ABCDEFGHIJ')
#annot=True adds a label
sns.heatmap(df,annot=True,annot_kws={'size':7})

plt.show()
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSIS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MappedColumnID </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSIS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MappedColumnID </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>MappedColumnID is just an alternative way of identifying the columns instead of
 using there names. From MSDN

The use of these properties is not required. 
These properties provide an easier way for developers 
to associate related columns, such as input and output columns,
 in custom data flow components.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSMS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MapMode_VerticalScrollBar</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSMS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MapMode_VerticalScrollBar</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Tools {menu} =&gt; Options =&gt; Text Editor {Left pane} 
	=&gt; Transact-SQL {Left pane} =&gt; Scroll Bars { Left pane} 
	=&gt; Behavior {section}
		( ) Use bar mode for vertical scroll bar
		(x) Use Map mode for vertical scroll bar
			[x] Show Preview Tooltip
			Source overview: medium</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Version_Build_mapping</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Version_Build_mapping</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>for use interpreting Powershell results from:

&gt;$OperatingSystem = Get-WmiObject -ComputerName IT-1241 -Class Win32_OperatingSystem
&gt;$OperatingSystem.BuildNumber


Version	Code name	Marketing name			Release date	Latest build
1507	Threshold 1	N/A						7/29/2015		10240
1511	Threshold 2	November Update			11/10/2015		10586
1607	Redstone 1	Anniversary Update		8/2/2016		14393
1703	Redstone 2	Creators Update			4/5/2017		15063
1709	Redstone 3	Fall Creators Update	10/17/2017		16299
1803	Redstone 4	TBA						Early 2018		17134
1809	Redstone 5	TBA						Late 2018		17650
</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>