<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_DATEs</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_Drop-Down_ForDateTimePeriods_TABLE_DateTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_DATEs</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_Drop-Down_ForDateTimePeriods_TABLE_DateTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_Drop-Down_ForDateTimePeriods_TABLE_DateTable

'From: TerritorrialGoals_NEW_v11.pbix
'M language for the DateTable: [RowHeader_ID] field based on various Time Periods
'Note

let
    Source = fn_createDateTable(StartDATE, Date.From(DateTime.LocalNow())),
    #"Changed Type" = Table.TransformColumntypes(Source,{{"Date", type date}, {"Year", Int64.Type}, {"Month Number", Int64.Type}}),
    #"Added YYYYMMDD" = Table.AddColumn(#"Changed Type", "YYYYMMDD", each ([Year] * 10000) + ([Month Number] * 100) + Date.Day([Date])),
    #"Added DateOfMonth" = Table.AddColumn(#"Added YYYYMMDD", "DateOfMonth", each Date.Day([Date])),
    #"Reordered Columns" = Table.ReorderColumns(#"Added DateOfMonth",{"Date", "Year", "Quarter", "Month Number", "Week of Year Number", "DateOfMonth", "YYYYMMDD", "Month", "Day of Week"}),
    #"Added isPreviousWeek" = Table.AddColumn(#"Reordered Columns", "IsPreviousWeek", each Number.From(Date.IsInPreviousNWeeks([Date], 1)) ),
    #"Added isMTD" = Table.AddColumn(#"Added isPreviousWeek", "isMTD", each (  Date.IsInCurrentMonth([Date])   and Date.From([Date]) &lt;  Date.From(DateTime.LocalNow())  )   ),
    #"Added WeekOfMonthNumber" = Table.AddColumn(#"Added isMTD", "WeekOfMonthNumber", each Date.WeekOfMonth([Date])),
    #"Renamed Columns" = Table.RenameColumns(#"Added WeekOfMonthNumber",{{"Month", "MonthName"}, {"Day of Week", "DayOfWeekName"}}),
    SameWeekOfMonth_as_LastWeek = Table.AddColumn(#"Renamed Columns", "SameWeekOfMonth_as_LastWeek", each Number.From(
								Value.Equals(
                                                                    		[WeekOfMonthNumber]
                                                                    		,
                                                                   		 Date.WeekOfMonth(Date.From(DateTime.LocalNow())) - 1
								  	   ) 
												         )
                                                                  
		  ),
    #"Added isLastMonth" = Table.AddColumn(SameWeekOfMonth_as_LastWeek, "isLastMonth", each Number.From(Date.IsInPreviousMonth ([Date]) )),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added isLastMonth",{{"SameWeekOfMonth_as_LastWeek", Int64.Type}, {"isLastMonth", Int64.Type}}),
    #"Added isPreviousWeekOfLastMonth" = Table.AddColumn(#"Changed Type1", "isPreviousWeekOfLastMonth", each ([isLastMonth] = 1) and ([SameWeekOfMonth_as_LastWeek]=1)),
    #"Changed Type2" = Table.TransformColumnTypes(#"Added isPreviousWeekOfLastMonth",{{"DateOfMonth", Int64.Type}, {"YYYYMMDD", Int64.Type}, {"IsPreviousWeek", Int64.Type}, {"WeekOfMonthNumber", Int64.Type}}),
    #"Added MTD_aMonthAgo" = Table.AddColumn(#"Changed Type2", "Custom", each [Month Number] = Number.From(Date.Month(Date.From(DateTime.LocalNow())))-1
 and
 [DateOfMonth] &lt; Date.Day(DateTime.LocalNow())),
    #"Changed Type3" = Table.TransformColumnTypes(#"Added MTD_aMonthAgo",{{"isMTD", Int64.Type}, {"isPreviousWeekOfLastMonth", Int64.Type}}),
    #"Renamed Columns1" = Table.RenameColumns(#"Changed Type3",{{"Custom", "MTD_aMonthAgo"}}),
    #"Changed Type4" = Table.TransformColumnTypes(#"Renamed Columns1",{{"MTD_aMonthAgo", Int64.Type}}),
    #"Renamed Columns2" = Table.RenameColumns(#"Changed Type4",{{"MTD_aMonthAgo", "isMTD_aMonthAgo"}}),
    #"Added Custom" = Table.AddColumn(#"Renamed Columns2", "RowHeader_ID", each (1 * [IsPreviousWeek]) +
(10 * [isMTD]) +
(100 * [isPreviousWeekOfLastMonth]) +
(1000 * [isMTD_aMonthAgo])),
    #"Filtered Rows" = Table.SelectRows(#"Added Custom", each true)
in
    #"Filtered Rows"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_DATEs</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>2_Drop-Down_ForDateTimePeriods_TABLE_RowHeaders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_DATEs</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>2_Drop-Down_ForDateTimePeriods_TABLE_RowHeaders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>(1 * [IsPreviousWeek]) +
(10 * [isMTD]) +
(100 * [isPreviousWeekOfLastMonth]) +
(1000 * [isMTD_aMonthAgo]))






'Created this Table Manually


Time Period					RowHeader_ID
1. Last Week				11
2. MTD						10
2. MTD						11
3. Last Week (a Month Ago)	1100
4. MTD (a Month Ago)		1000
4. MTD (a Month Ago)		1100</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions_ITERATORS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>LASTNONBLANK</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions_ITERATORS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>LASTNONBLANK</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>LASTNONBLANK 
'(just like FirstNonBlank function)


//'------------------------------------------------------------------------------------
//'-- LASTNONBLANK: Returns the last value in the target column, filtered by the 
//'--			  	 current context, where the expression is not blank. Basically it 
//'--				 loops through all the values of the target column, evaluates the
//'--				 expression each time and returns the last value for which the
//'--			     expression returns something other than blank. 

//'--
//'--			     NOTE: This is an iterator function
'------------------------------------------------------------------------------------

EVALUATE
{
	-- Find the last sale date of the product returned by the previous example.
	CALCULATE(
		CALCULATE(
			LASTNONBLANK('Calendar'[Date],[Sales Amount])
			),
		'Online Sales'[Product Key] = 153
		)
			
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATE_examples</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATE_examples</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'SYNTAX
CALCULATE ( 
			&lt;Expression&gt; 			'&lt;=== Scaler Value, often this is a previously created MEASURE, or calculation
			[, &lt;Filter&gt; 			'Filters are OPTIONAL, Filters are tables, NOT scaler values
			[, &lt;Filter&gt; 			'	and if they clash with a visual filter, the Calculate Filter wins
			[, … ] 					'	Calculate filters should not clash with one another
			] 
			] 
		  )
------------------------------------------------CALCULATE without the FILTER syntax
1] 'cannot use a MEASURE in the FILTER, (i.e. second argument) in the simple syntax rather, it must be a Column.
' e.g. of something that does not work:
                         =============
 SalesOver 10k = CALCULATE(
 							[No Employees]
 							, [Tot Salaries] &gt; 100						&lt;&lt; ERROR: cannot use MEASURE in the filter Expression
 						  )
 
 ERROR: 'CALCULATE has been used in a TRUE/FALSE expression that is used as a table filter expression  
 BUT, this is OK:                                        

SalesOver 10k = CALCULATE(
							[No Employees]
							, FILTER(									&lt;&lt; OK: b/c use MEASURE in the FILTER statement, as the filter expression
										Emeployee
										, [Tot Salaries] &gt; 100			&lt;&lt; the MEASURE
									)
						 )

' The results of the filter cannot be a table, it must be a scaler: number, text, date


------------------------------------------------FILTER is what is used by DAX engine whenm you write a simple filter
Suppose there are three rows in visual, each 

'This is the way you can write it
Measure1 = 
	CALCULATE ( 
				[Sales Amount], 			'--&lt;== this is a MEASURE
				Product[Color] = "Green" 	'This filter is applied like a FILTER statement that uses ALL()
			   )							'   i.e. it ignores the external filters

'But the DAX engine translates it to this:	{so the one ABOVE,a nd BELOW are identical}		 
Measure1 = 
	CALCULATE ( 
				[Sales Amount], 			'--&lt;== this is a MEASURE
				FILTER(
					ALL(Product[Color] ),			'&lt;= This means: FILTER will ignore the  'outer filters' on the color
					Product[Color] = "Green" 		' without using ALL, This filter would be applied in addition to the external filters
			   )
' IF you write the FILTER statement , and leave out ALL() then it takes into account the external filters			   
Measure1 = 
	CALCULATE ( 
				[Sales Amount], 			'--&lt;== this is a MEASURE
				FILTER(
					(Product[Color] ),			'&lt;= This means: FILTER take into account the  'outer filters' on the color
					Product[Color] = "Green" 		' without using ALL, This filter is applied IN ADDITION to the external filters
			   )			   			 
			   			 
------------------------------------------------ Context Transition Example	

'CALCULATE performs Context Transition
'So the SUMX sums the sales over just the Currently interated year, as the AVERAGEX iterates over the years
MEASURE Sales[Yearly Avg] =
	AVERAGEX (
		VALUES( theDateTable[Calendar Year] ),
			CALCULATE(						'&lt;== This occurs in the row context created as The AVERAGEX iterates over the table: theDateTable
						SUMX( Sales, Sales[Quantity] * Sales[Net Price] )
					  )
			  )
 'and this is equivalent to this
 MEASURE Sales[Yearly Avg] =
	AVERAGEX (
		VALUES( theDateTable[Calendar Year] ),
			[Sales Amount]							'this is true if [Sales Amount] is a Measure that expands to tp tje SUMX clause (above)
			  )
   
------------------------------------------------ example of the 4 evaluation steps
'Calculate evaluation steps

' 1] Evaluation of filter arguments
' 2] Content transition			&lt;==	"ALL" can get rid of context transition
' 3] Evaluation of CALCULATE Modifiers
' 4] Application of filter arguments and KEEPFILTERS

 Sales[Test] =
 	AVERAGEX (
 		VALUES ( theDateTable[Calendar Year] ),			'--&lt;== AverageX is iterating over the VALUES
 		CALCULATE (
 			[Sales Amount],								'--&lt;== [Sales Amount] is the expression to compute for CALCULATE
 			Product[Category] = "Audio"							' one FILTER argument
 		  KEEPFILTERS( Product[Color] IN {"Red", "Blue"}),		' another Filter argument, that modifies the external filters
 		  USERELATIONSHIP(Sales[Delivery Date], theDateTable[Date])	' a global modifer that changes the relatiohship
 		 )

		   
------------------------------------------------		   
		   
https://www.youtube.com/watch?v=Vz-38fJ4asc

'Example:
'1] There are three channels: Affiliate, Organic, Promotional
'2] There is a measure:
	Total Sales = SUM(Sales[Sales])			--&lt;=== MEASURE
	
'This Measure can be used in a table with a row for each channel, but the value will be the same on each row, 
	'as for the 'affiliate' row channel, so it doesn't work well im the table

Affiliate Sales = 
		CALCULATE(
					[Total Sales],
					Sales[Channel] = "Affiliate"
				  )

'But if you want the Total on each row, in order to get percent of each Total for each channel, then 
'	calculating the Total does make sense:
Total Sales = 
		CALCULATE(
					[Total Sales],
					ALL(Sales[Channel])
				  )
				  
'To get the percent of total sales using a measure:

Prcnt Total Sales =
	DIVIDE(
		[Total Sales],							--&lt;=== MEASURE					
		CALCULATE(
					[Total Sales],				--&lt;=== MEASURE
					ALL(Sales[Channel])
				  )					
				  
'To get the Sales, Same Time Last Year, create a new Measure
SalesLastYear = 
		CALCULATE(
					[Total Sales],
					SAMEPERIODLASTYEAR('Calendar'[Date])
				 )
				 
'To get the Sales Growth Percentage over last year:
SalesGrowthOverLastYear = 
	    [Total Sales] /
		CALCULATE(
					[Total Sales],
					SAMEPERIODLASTYEAR('Calendar'[Date])
				 )
				 
'But when the denominator or numerator are missing you will get ugly results.
'So to fix that:

SalesGrowthOverLastYear = 
	VAR LastYearSales = 
						CALCULATE(
									[Total Sales],
									SAMEPERIODLASTYEAR('Calendar'[Date])
								 )				 
	RETURN
		IF(
			[Total Sales] &lt;&gt; BLANK() &amp;&amp;
			LastYearSales &lt;&gt; BLANK(),
			[Total Sales]/LastYearSales
	)
=================================================================================================
'Example: 4 tables:
' Country ==&gt; City ==&gt; Sales &lt;== Product	
--------------------------------------------------------------------------ALL				  
				  

'Measure that shows the pcnt a given product is of all the products				  
Pcnt of all products = DIVIDE(
								 
								    //' the numerator: number of sales for the current filter context
								    COUNT(Sales[SalesId]),
								    //' the denominator: number of sales for the current filter
								    //' context, but for ALL products
								    CALCULATE(
								        COUNT(Sales[SalesId]),
								        ALL('Product'[ProductName])
								    )
								)				  
				  
'Measure that shows the number of sales as a percentage of the total for all cities and for all products				  
Pcnt of all products and cities = DIVIDE( 
											    //' divide the number of sales ...
											    COUNT(Sales[SalesId]),
											    //' ... by the number of sales for all products and
											    //' cities
											    CALCULATE(
											        COUNT(Sales[SalesId]),
											        ALL('Product'[ProductName]),
											        ALL(City[CityName])
											    )
											)				  
--------------------------------------------------------------------------ALLEXCEPT
'a measure which would show each product/city’s contribution to the grand total for each country:
Pcnt relaxing everything but country = DIVIDE(
											    //' divide the number of sales ...
											    COUNT(Sales[SalesId]),
											    //' ... by the number of sales, keeping only the 
											    //' country constraint
											    CALCULATE(
											        COUNT(Sales[SalesId]),
											        ALLEXCEPT(
											            Sales,
											            Country[CountryName]
											        )
											    )
											)											
------------------------------------------------------------------MODIFIERS
'REMOVEFILTERS from a table, note it would be equivalent to an ALL()
CALCULATE(
			[Customer Sales],
			REMOVEFILTERS( ‘Store Lookup')
		)
'REMOVEFILTERS from a column											
CALCULATE(
			[Customer Sales],
			REMOVEFILTERS(‘Store Lookup’[store_id])
		 )										
----------------------------
'KEEPFILTERS: So when the external context is Store ID = 5, then this will show results, otherwise blank														
measureX = 
			CALCULATE(
			    [Profit],
			    KEEPFILTERS(
						        'Store Lookup'[store_id] = 5
						    )	
						    
'vs. this one: this will show "Store ID = 5" results for every row, and situation

measureX = 
			CALCULATE(
				    [Profit],
				    'Store Lookup'[store_id] = 5
					 )
----------------------------

																	
																	
																	
																	
																	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATE_UseRelationShip</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATE_UseRelationShip</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USERELATIONSHIP 
'	allows you to activate an inactive relationship while InActivating the current relationship
'	HOWEVER in cannot Inactivate a relationship without Activating another relationship
-------------------------------------------------------------- this uses the default relationship (i.e. the active one)
EVALUATE
{
    CALCULATE(
        [Total Sales],
        'Date'[Calendar Year] = 2011
        )
}

-------------------------------------------------------------- this is the active relationship

EVALUATE
{
    CALCULATE(
        [Total Sales],
        'Date'[Calendar Year] = 2011,
        USERELATIONSHIP(
            'Internet Sales'[Order Date Key],			//'Order of these 2 Parms does not matter
            'Date'[Date Key] 							//'Order of these 2 Parms does not matter
        )
    )
}



------------------------------------------------------------- this is the InActive relationship
EVALUATE
{
    CALCULATE(
        [Total Sales],
        'Date'[Calendar Year] = 2011,
        USERELATIONSHIP(
            'Internet Sales'[Ship Date Key],			//'Order of these 2 Parms does not matter
            'Date'[Date Key] 							//'Order of these 2 Parms does not matter
        )
    )
}

-------------------------------------------------------------RELATED
//' RELATED won't work inside a CALCULATE b/c CALCULATE removes the row context


//'NOTE: this statement is re-written, internally to look like the next statement
//' This threw an error: The column 'Date[Calendar Year]' either doesn't exist or doesn't have a relationship to any table available in the current context.

EVALUATE
{
    CALCULATE(
        [Total Sales],
        RELATED('Date'[Calendar Year]) = 2011
    )
}


//' i.e. the previous statement is re-written, internally, to look like this:
//' this threw an error:  The column 'Date[Calendar Year]' either doesn't exist or doesn't have a relationship to any table available in the current context.

EVALUATE
{
    CALCULATE(								//'CALCULATE eliminates the external Row context which makes the 'relationship' a mute point
        [Total Sales],
        FILTER(
            ALL('Date'[Calendar Year]),
            RELATED('Date'[Calendar Year]) = 2011
            )
    )
}

//To get around the problem of CALCULATE nullifying the RELATED statement b/c it removes the row context
//'	you can do this: 
//'		use USERELATIONSHIP as the 'filter expression' for CALCULATETABLE, and CALCULATETABLE is the 'filter expression table' for CALCULATE

EVALUATE
{
    CALCULATE(
        [Total Sales],
        CALCULATETABLE(													// this feeds a Table, as the filter expression for the CALCULATE function
				            FILTER(										// This is the 'Table expression' for CALCULATETABLE 
						                'Internet Sales',
						                RELATED('Date'[Calendar Year]) = 2011
						          )
				            ,USERELATIONSHIP(							// This is the 'filter expression' for CALCULATETABLE 
								                'Internet Sales'[Order Date Key],
								                'Date'[Date Key] 
					  						)
				        )                
    )
}


//' HOWEVER this simple statement works just fine
EVALUATE
{
    CALCULATE(
        [Total Sales],
        'Date'[Calendar Year] = 2011
        )
}

-------------------------------------------------------------
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATETABLE_examples_with_SUMMARIZE_as_inner_function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATETABLE_examples_with_SUMMARIZE_as_inner_function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'This returns a table with a list of Dates, where they meet the criteria in the last 3 rows      
CALCULATETABLE(
		SUMMARIZE(
					Sales, 
					Date[date]
				 ),
		Date[Year] = 2018,
		Date[Month Number] = 6,
		Store[StoreKey] = 430
		)

'This version has the StoreKey, and the date list where the criteria are met:
'This returns a table with a list of Dates, where they meet the criteria in the last 3 rows      
CALCULATETABLE(
		SUMMARIZE(Sales, Store[StoreKey], Date[date]),
		Date[Year] = 2018,
		Date[Month Number] = 6,
		Store[StoreKey] = 430
		)		
		       		       
'This version has the StoreKey, and the date list AND the same date (in the Previous Year) where the criteria are met:
'This returns a table with a list of Dates, where they meet the criteria in the last 3 rows      
CALCULATETABLE(
		ADDCOLUMNS(
					SUMMARIZE(Sales, Store[StoreKey], Date[date]),
				 	"@PreviousYearDate",
				 			DATE(
				 					YEAR(Date[Date]) - 1,
				 					MONTH(Date[Date]),
				 					DAY(Date[Date])
				 			
				 				)
				 	),
		Date[Year] = 2018,
		Date[Month Number] = 6,
		Store[StoreKey] = 430
		)		       
		
'This version has JUST the StoreKey,  AND the same date (in the Previous Year) where the criteria are met:
'This returns a table with a list of Dates, where they meet the criteria in the last 3 rows 
'The SELECTCOLUMNS part could be used in a Measure as a VAR, and the last three lines would be the Row context     
CALCULATETABLE(
		SELECTCOLUMNS(
						ADDCOLUMNS(
									SUMMARIZE(Sales, Store[StoreKey], Date[date]),
								 	"@PreviousYearDate",
								 			DATE(
								 					YEAR(Date[Date]) - 1,
								 					MONTH(Date[Date]),
								 					DAY(Date[Date])
								 			
								 				)
								 	),
					 "StoreKey", Store[StoreKey],
					 "DateKey", [@PreviousYearDate]
					 ),
		Date[Year] = 2018,
		Date[Month Number] = 6,
		Store[StoreKey] = 430
		)		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Logical_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Logical_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://docs.microsoft.com/en-us/dax/logical-functions-dax

'IF/SWITCH can’t return tables: 
'Another subtlety that I noted in my research is that IF and SWITCH can only return scalar values and NOT tables.


AND
FALSE
		
==================================================================================================================
IF:			IF(logical_test&gt;,&lt;value_if_true&gt;, value_if_false)  
=======================================================================================================
'Checks if a condition provided as the first argument is met. Returns one value if the condition is TRUE, 
		'	and returns another value if the condition is FALSE: 
		  
		'IF(logical_test&gt;,&lt;value_if_true&gt;, value_if_false)
		'value_if_true:		If omitted, TRUE is returned.
		'value_if_false :	If omitted, FALSE is returned.  
		---------------------------------------------------
	Age Breakdown = 
	//
	IF('Customer'[Age] &gt;= 55, "D] 55+",
	IF('Customer'[Age] &gt;= 45, "C] 45-54",
	IF('Customer'[Age] &gt;= 35, "B] 35-44",
	"A] 18-34")))
			
		
		
		=
			IF (
			    [StateProvinceCode] = "CA"
			        &amp;&amp; ( [MaritalStatus] = "M"
			        || [NumberChildrenAtHome] &gt; 1 ),
			    [City]
			)
		---------------------------------------------------
            IF (
                AND (
	                    CurrentSales &lt;&gt; 0,
	                    PreviousSales &lt;&gt; 0
		             ),
	                CurrentSales - PreviousSales
            	)
        ---------------------------------------------------    			
		Homeowner = if([HomeOwnerFlag] = 0, "Not Homeowner", "Homeowner")
		
		=IF([Calls]&lt;200,"low",IF([Calls]&lt;300,"medium","high"))  
		
		'the condition in the IF function checks for the value of the columns [MaritalStatus] AND [NumberChildrenAtHome], 
		'	and outputs the city if either condition is met AND if the customer is in California. 
		'	Otherwise, it outputs the empty string.

	=IF([StateProvinceCode]= "CA" &amp;&amp; ([MaritalStatus] = "M" || [NumberChildrenAtHome] &gt;1),[City])  	


	----------------------------------------------------------------------------------------------	
	DING, DING, DING or ...
	
	Mouse = IF(FIND("Mouse",'Product'[ProductName],1,0) &gt; 0, "DING, DING, DING", "....")    
=======================================================================================================				
IFERROR	'Evaluates an expression and returns a specified value if the expression returns an error; otherwise returns the value of the expression itself.

		=IFERROR(
					25/0
					,BLANK()			//'can put any meaningful result here
				 )

=======================================================================================================		
NOT
OR
=======================================================================================================
SWITCH				SWITCH(&lt;expression&gt;, &lt;value&gt;, &lt;result&gt;[, &lt;value&gt;, &lt;result&gt;]…[, &lt;else&gt;])  
=======================================================================================================
	'Evaluates an expression against a list of values and returns one of multiple possible result expressions.
		'SWITCH checks for exact matches i.e. equals, but not less than or greater than
		---------------------------------------------for "="
			=
			SWITCH (
			    [Month],
			    1, "January",
			    2, "February",
			    3, "March",
			    4, "April",
			    5, "May",
			    6, "June",
			    7, "July",
			    8, "August",
			    9, "September",
			    10, "October",
			    11, "November",
			    12, "December",
			    "Unknown month number"
			)
		-----------------------------------------------	for &lt; or &gt;
		'https://powerpivotpro.com/2015/03/the-diabolical-genius-of-switch-true/
		'SWITCH() is still testing for equivalence!  
		'	By providing the first argument as TRUE(), now each subsequent “test” is going to be checking for TRUE().
		'And since each of our inequality tests results in either TRUE() or FALSE() as a value, 
		'	the test case that evaluate to TRUE() is the one that gets matched, 
		'	and therefore the one that gets used.  For instance, if [Measure]&lt;1 evaluates to TRUE(), then expr1 gets returned.
		'you STILL have to sequence your “overlapping” test cases carefully
		
		SWITCH(
          TRUE(),
          [MyMeasure]&lt;1,expr1,
          [MyMeasure]&lt;2,expr2,
          [MyMeasure]&lt;3,expr3,
         …)
         
		Region Volume = 
		    SWITCH(TRUE(),
		            'Sales Territory'[Total Transactions] &gt;= 7000, "A] High Volume",
		            'Sales Territory'[Total Transactions] &gt;= 4000, "B] Medium Volume",
		            'Sales Territory'[Total Transactions] &gt;= 1, "c] Low Volume",
		            "NA")         
         
=======================================================================================================
TRUE
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>SUMMARIZE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>SUMMARIZE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Microsoft says you may get wrong results if you use Aggregation functions in the  &lt;expression&gt;, inside a SUMMARIZE function

'Best Practice is to use it like SELECT DISTINCT * in SQL
' and if you use a FILTER to construct the &lt;table&gt; then that acts like the WHERE statement.

'SUMMARIZE creates a summary of the input table grouped by the specified columns
'	it is NOT an AGGREGATION function, instead it returns all unique combinations
'	of values based on the columns selected

SUMMARIZE (
			&lt;table&gt;, 
			&lt;groupBy_columnName&gt;		
			[, &lt;groupBy_columnName&gt;]…
			[, &lt;name&gt;, &lt;expression&gt;]…		//' This is DEPRECATED
		   )
		   
table	
'Any DAX expression that returns a table of data.
groupBy_ColumnName	
'(Optional) The qualified name of an existing column used to create summary groups based on the values found in it. 
'	This parameter cannot be an expression.
' the column can be in other tables besides the Source table, as long as there is a many to one relationship
'		from the source to the group by column 
' With multiple &lt;groupBy_columnName&gt;, you will get all the combinations of those categories
name	
'The name given to a total or summarize column, enclosed in double quotes.
expression	
'Any DAX expression that returns a single scalar value, where the expression is to be evaluated multiple times (for each row/context).		   


========================================================================'to create from a filtered subset of the rows
example 1] aCalculatedTable = 
					SUMMARIZE(
					    FILTER(
					        'Sales by Store',
					        'Sales by Store'[quantity_sold] &gt;=3
					    ),
					    'Sales by Store'[customer_id],
					    'Sales by Store'[quantity_sold]
					)
--------------------------------------------------------------------------
example 2 Unsold Pastries = 
						SUMMARIZE(
									    FILTER(
											        'Food Inventory',
											        'Food Inventory'[quantity_sold] &lt;&gt; 'Food Inventory'[quantity_start_of_day]
											    ),
									    'Food Inventory'[transaction_date],
									    'Food Inventory'[store_id],
									    'Food Inventory'[quantity_sold],
									    'Food Inventory'[quantity_start_of_day],
									    'Product Lookup'[current_retail_price],
									    'Product Lookup'[product]
									)
================ DEPRECATED PATTERN vs. BEST PRACTICES PATTERN for Aggregation

DEPRECATED PATTERN
------------------
//'NOTE: this is not a best practive, b/c MS recognizes that there are performance issues with this pattern (i.e. aggregations within Summarize)
//' and MS says you could get unexpected (i.e. wrong results) with complex expressions
//' NO problem with generating the set of unique category combinations, the problem is with aggregating data using the SUMMARIZE function

EVALUATE
    SUMMARIZE(
        'Online Sales',
        'Products'[Category],
        'Customers'[Country],
        'Calendar'[Calendar Month Label],
        "Sales Amount", [Sales Amount]		//'This aggregates, for the groupBy columns as row-contexts for the MEASURE
        )
 
 BEST PRACTICES PATTERN
 ---------------------       
 //' A much better pattern for getting the aggregate is this:
 //' 1] Use SUMMARIZE to get the combinations of the categories
 //' 2] Then use ADDCOLUMNS to get the aggregate columns
         
  EVALUATE
    ADDCOLUMNS(
        SUMMARIZE(
            'Online Sales',
            'Products'[Category],
            'Customers'[Country],
            'Calendar'[Calendar Month Label]
            ),
        "Sales Amount", [Sales Amount],
        "Total Cost", [Total Cost]
        )
      


      
================  'SUMMARIZE function, with a CALCULATETABLE  as the 'table' parameter  
'introduce the filter (i.e. "January) inside the CALCULATETABLE, then group by the subsequent columns

'1] This gives you the group-by columns:

EVALUATE
    SUMMARIZE(
        'Online Sales',
        'Products'[Category],
        'Customers'[Country],
        'Calendar'[Calendar Month Label]
        )

'2] HOWEVER, if you want to just get the categories for "January": replace the simple table (i.e. 'Online Sales') with a filtered version
EVALUATE
    SUMMARIZE(
        CALCULATETABLE(
            'Online Sales',
            'Calendar'[Calendar Month Label] = "January"
            ),
        'Products'[Category],
        'Customers'[Country],
        'Calendar'[Calendar Month Label]
        )
      
================  'SUMMARIZE function, inside a CALCULATETABLE    
'This returns a table with a list of Dates, where they meet the criteria in the last 3 rows      
CALCULATETABLE(
		SUMMARIZE(
					Sales, 
					Date[date]
				 ),
		Date[Year] = 2018,
		Date[Month Number] = 6,
		Store[StoreKey] = 430
		)


================'Here is the measure that could be created from the SELECTCOLUMNS part	

Sales Past Year SameDayLastYear =
VAR DatesToConsider = 
		SELECTCOLUMNS(
						ADDCOLUMNS(
									SUMMARIZE(
												Sales, 
												Store[StoreKey], 
												Date[date]
											  ),
								 	"@PreviousYearDate", DATE(
											 					YEAR(Date[Date]) - 1,
											 					MONTH(Date[Date]),
											 					DAY(Date[Date])
											 				)
								 	),
					 "StoreKey", Store[StoreKey],
					 "DateKey", [@PreviousYearDate]
					 )
VAR result = 
	CALCULATE(
		[Sales Amount],
		DatesToConsider		
		)
RETURN
	Result	
	
					 
================ AGGREGATION is DEPRECATED!
 example 
 'returns a summary of the reseller sales grouped around the calendar year 
 '	and the product category name, 
 'this result table allows you to do analysis over the reseller sales by year and product category.

SUMMARIZE(ResellerSales_USD  
      , DateTime[CalendarYear]  
      , ProductCategory[ProductCategoryName]  
      , "Sales Amount (USD)", SUM(ResellerSales_USD[SalesAmount_USD])  		'simple aggregates may be ok, but should be avoided
      , "Discount Amount (USD)", SUM(ResellerSales_USD[DiscountAmount])   	'simple aggregates may be ok, but should be avoided
      )  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Table_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Table_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Table_Functions

'One key limitation of a table function is that its output can’t be used in a visual in your report. 
'	If you think about it, 
'	each cell on a pivot table can only fit one number, not an entire table of numbers.

 'returns a table of data
------------------------------------------------ 
 'In DAX, a table function is used in a few ways:

'1]	As input to another DAX function where the function argument requires a table. 
'		For example, the FILTER function iterates over a table of data 
'		and tests each value for a condition 
'		(actually any X function like SUMX or AVERAGEX is an iterator and would require a table as the first argument.)
'2] As a calculated table definition in Power BI Desktop
'3] As a query written against your data model using DAX Studio or SQL Server Management Studio.
------------------------------------------------

'Tables can become scalars: 
'	A neat feature of DAX is that any table function that resolves to a single row and column (i.e., one value) is automatically converted to a scalar value if possible. 
'	That means that you can use a table function as an input to another function, 
'	but do so cautiously to avoid the dreaded “Table of Multiple Values…” error.

----------------------------------------------------------------------------------
'SO if you created two columns in a Visual (e.g. Table) and one was based on a Calculated Column using data from a Related table, 
'	and the other was based on a Measure using data from a Related table, then the Calculated-based Rank would remain unchanged as you
'	apply filters to the related Table, but the Measure-based Rank would change as you applied filters to the related Table.

'e.g. for a Calculated Column
Ranking =        RANKX(ALL(Products), SUMX(RELATEDTABLE(SalesOrderDetail), SalesOrderDetail[GrossSales]))

'e.g. for a MEASURE Column
RankingMeasure = RANKX(ALL(Products), SUMX(RELATEDTABLE(SalesOrderDetail), SalesOrderDetail[GrossSales]))		
---------------------------------------------------------------------------------



FILTER
	Returns a TABLE
	'get just the rows from DateTable that match criteria 
	FilterExampleTable = FILTER(DateTable, (DateTable[IsPreviousWeek]= 1) )
	
VALUES	
	VALUESexampleTable = VALUES(RowHeaders[RowHeader])
	
	'VALUES Returns a single column table of unique values when a column name is given. If a table
	'	name is supplied, VALUES returns the entire table (including duplicates) plus a blank row
	
ALL

	'Using a table argument, ALL returns all the rows of the table including any duplicated rows.
	'Using a single column argument, ALL returns all the unique values of the column.
	'Using two or more columns arguments, ALL returns all the unique combinations of values in multiple columns.
	'In every case, ALL includes in the result the additional blank row generated for invalid relationships.

	ALLexampleTable = ALL(RowHeaders)				'&lt;== Returns all rows, of all columns
	ALLexampleTable = ALL(RowHeaders[RowHeader])	'&lt;== returns unique rows, of one column
		
DISTINCT
	'returns a single column table of unique Values when a column name is given.
	'	if a table is supplied, DISTINCT returns all unique combinations</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Time_Intelligence_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Time_Intelligence_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://docs.microsoft.com/en-us/dax/time-intelligence-functions-dax

CLOSINGBALANCEMONTH
CLOSINGBALANCEQUARTER
CLOSINGBALANCEYEAR
DATEADD
DATESBETWEEN
DATESINPERIOD
DATESMTD
DATESQTD
DATESYTD
ENDOFMONTH
ENDOFQUARTER
ENDOFYEAR
FIRSTDATE
FIRSTNONBLANK
LASTDATE
LASTNONBLANK
NEXTDAY
NEXTMONTH
NEXTQUARTER
NEXTYEAR
OPENINGBALANCEMONTH
OPENINGBALANCEQUARTER
OPENINGBALANCEYEAR
PARALLELPERIOD
PREVIOUSDAY
PREVIOUSMONTH
PREVIOUSQUARTER
PREVIOUSYEAR
SAMEPERIODLASTYEAR
STARTOFMONTH
STARTOFQUARTER
STARTOFYEAR
TOTALMTD
TOTALQTD
TOTALYTD
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Logic_statements</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>IF_function_in_DAX</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Logic_statements</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>IF_function_in_DAX</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
IF(&lt;logical_test&gt;, &lt;value_if_true&gt;[, &lt;value_if_false&gt;])

'Checks a condition, and returns one value when it's TRUE, otherwise it returns a second value.

logical_test	
	'Any value or expression that can be evaluated to TRUE or FALSE.
value_if_true	
'	The value that's returned if the logical test is TRUE.
value_if_false	
'	(Optional) The value that's returned if the logical test is FALSE. If omitted, BLANK is returned.


https://www.youtube.com/watch?v=EmCJTGA3NRA

IF 	'Row Context needs to be created while referring column value in a Measure

AND	'allows only 2 conditions (Mandatory) instead use &amp;&amp;

	AND(Logical1,Logical2)
	
OR	'allows only 2 conditions (Mandatory) instead use ||

	OR(Logical1,Logical2)
	
	
-----------------------------------------------------
'A calculated column has row context, so you can use Columns in the formula for the IF
IF_calculatedColumn = 
	IF(
		Sales[Sales Channel] = "Affiliate",		'--&lt;== This is the test
		Sales[Value] * 0.1						'--&lt;== in this example, the False part has been left off, which results in a Blan
	  )
---------------------
ERROR:!!!
'You can not use a column in the MEASURE formula for the IF, b/c Measure does not have row context
'	if you try to do so the formula will have an error.
'So you have to artificially create it with an iterator function that goes row by row
'I gues by using the SUMX you now have a row by row calculation, then the Row Context kicks in 
'	and if that row corresponds to "Affilliate" then the calculation occurs, BUT just for that row !!
IF_Measure =
	SUMX(
		Sales,
		IF(
			Sales[Sales Channel] = "Affiliate"				--&lt;== This is referring to a Column
			Sales[Value] * 0.1
		   )
		)
----------------------
'Here is a MEASURE, that seems to work in the visual, but it is using a MEASURE in the Comparison
'	whereas the previous example uses a 'column' in the comparison

SalesGT100_Measure =
	IF(
		[Total Sales] &gt;= 100,
		"Yes"
	  )
-----------------------

'Using AND in the IF clause

AndInIFmeasure = 
	SUMX(
		Sales
		IF(
			Sales[Sales Channel] = "Organnic" &amp;&amp;
			FORMAT(Sales[Date], "ddd") = "Sun",
			Sales[Value] * 0.20
		  )
		 )
		 
		 
=======================================Example 

TotalDiscountMeasure =
	SUMX(
			Sales,
			IF(Sales[Discount Applied] = True(),
			[Total Sales] * 0.1						--&lt;== 'uses a Measure, that does not need Row Context
			   )
		)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Measures</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>examples_fromGoodly</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Measures</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>examples_fromGoodly</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

MeasureClassical =
	CALCULATE(
		[Total Sales],					--&lt;== previously defined measure
		Products[Color] = "Red"
		)
		
'Alternate version 1

MeasureAlt =
	[Total Sales] (Products[Color] = "Red")			--&lt;== The parenthesis around the filter is essential
	
'Alternate w/ Filter as a variable

MeasureAltVAR =
	VAR RedFilter =
		FILTER(
			ALL(Products[Color]),
			Prducts[Color] = "Red"
			)
	RETURN
		[Total Sales] (RedFilter)
		
'Alternate w/ 2 Filters, one as a variable, the other explicit

MeasureAltVAR2 =
	VAR RedFilter =
		FILTER(
			ALL(Products[Color]),
			Prducts[Color] = "Red"
			)
	RETURN
		[Total Sales] (RedFilter, SAMEPERIODLASTYEAR('Calendar'[Date])</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Measures</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>VARiable_in_Measure</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Measures</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>VARiable_in_Measure</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

' We cannot use nested variables 
'rather than using the first variable inside second one, please input the actual calculation.
Measure = 
VAR ThisMonth =
    CALCULATE (
        ABS ( SUM ( 'Table'[Saldo] ) );
        FILTER ( Table; Table[Conta] = 71 )
    )
VAR PreviouzMonth =
    CALCULATE (
        CALCULATE (
        ABS ( SUM ( 'Table'[Saldo] ) );
        FILTER ( Table; Table[Conta] = 71 )
    );
        PREVIOUSMONTH ( 'Calendário'[Date] );
        FILTER ( ALL ( 'Calendário'[Mês] ); MAX ( 'Calendário'[Mês] ) &gt; 1 )
    )
RETURN
    ThisMonth-PreviouzMonth</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Studio</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Measure_Examples</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Studio</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Measure_Examples</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

SIMPLE MEASURE expressions
===============================================================
'Computing a measure in DAX Studio
https://www.youtube.com/watch?v=kAniA_N7sB8

EVALUATE
	'the DAX epression must return a table,
	' since a measure is a scalar expression, you can not simply "Evaluate" a measure
	' So use the Table constructor syntax (i.e. {}) the curly braces
	
' to create a table from a Measure and EVALUATE it into a single row, single column table:
'NOTE: the columns that show up are just called "Value"
EVALUATE
{
	[theMeasure]
}	

' to create a table with multiple Measures, each as a rows, in a 1 column table, 
'	since the curly brackets are actually creating a 1 column list
EVALUATE
{
	[theMeasure1], [theMeasure2], [theMeasure3]
}

' to create a table with multiple Measures, each as a column, in a 1 row table, 
'	since the curly brackets are actually creating a 1 column list,
'	and then the inner parenthesis
EVALUATE
{
	( [theMeasure1], [theMeasure2], [theMeasure3] )
}


'This will create 2 rows:
EVALUATE
{
	( [theMeasure1], [theMeasure2], [theMeasure3] )
	( [theMeasure1]*2, [theMeasure2]/2, [theMeasure3]+2 )	
}

'use ROW to allow you to name the columns
' output is 2 columns, with 1 row, and the columns have Names
EVALUATE
ROW {
	 
	 "Measure1Name", [theMeasure1],
	 "Measure2Name", [theMeasure2]
	}
	
Filter a Measure
=====================================
EVALUATE									'--&lt;== Need this b/c DaxStudio wants a table
	CALCULATETABLE(							'--&lt;===  need this to allow us to use a filter
		{ [Apps] },							'--&lt;== This is the [MEASURE]
		DateTable[IsPreviousWeek] = 1 		'--&lt;== This is the FILTER
)

'Multiple Filters
EVALUATE
	CALCULATETABLE(
		{ [Apps] },
		DateTable[isMTD] = 1
		,DimDealer[xTerritory] = "Atlanta"
)





</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Studio</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>MEASURE_TEST</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Studio</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>MEASURE_TEST</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
======================================================================== Simple, using ADDCOLUMNS
DEFINE

	MEASURE '1Measures'[isPreviousWeek] = 1


EVALUATE

var TopRowsOfCalendar = TOPN(11,DimDate, DimDate[DateKey],ASC)


RETURN
ADDCOLUMNS( TopRowsOfCalendar, "xxx", '1Measures'[isPreviousWeek])


======================================================================== VAR in Measure, using ADDCOLUMNS

DEFINE
	VAR two = 2
	MEASURE '1Measures'[isPreviousWeek] = two


EVALUATE

var TopRowsOfCalendar = TOPN(11,DimDate, DimDate[DateKey],ASC)


RETURN
ADDCOLUMNS( 
			TopRowsOfCalendar
			, "xxx", '1Measures'[isPreviousWeek])
			
======================================================================== VAR in Measure, using ADDCOLUMNS\SELECTCOLUMNS				
DEFINE
	VAR two = 2
	MEASURE '1Measures'[isPreviousWeek] = two


EVALUATE


var theColumns = SELECTCOLUMNS( 
									DimDate
									,DimDate[Datekey]
								  )

var output = ADDCOLUMNS(
						SELECTCOLUMNS( 
									DimDate
									,DimDate[Datekey]
								  )
						,
						  "xxx", '1Measures'[isPreviousWeek]
						)

RETURN
output				

========================================================================DimDate
//isPreviousWeek_v2.dax

DEFINE
	VAR two = 2
	MEASURE '1Measures'[isPreviousWeek] = two


EVALUATE


var theColumns = SELECTCOLUMNS( 
									DimDate
									,DimDate[Datekey]
								  )

var output = ADDCOLUMNS(
						SELECTCOLUMNS( 
									DimDate
									,DimDate[Datekey]
									,DimDate[CalendarYear]
									,DimDate[DayNumberOfYear]
									,DimDate[DayNumberOfMonth]	
									,DimDate[WeekNumberOfYear]									
									
								  )
						,
						  "xxx", '1Measures'[isPreviousWeek]
						)

RETURN
output



//EVALUATE
//TOPN(11,DimDate, DimDate[DateKey],ASC)
========================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_isMTD_ofPreviousMonth</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_isMTD_ofPreviousMonth</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_isMTD_ofPreviousMonth



isMTD_ofPreviousMonth = 

VAR DayOfMonth_for_the_reportDay =  DAY(TODAY())-1
VAR isMTD_ofPreviousMonth = IF(
                                AND(
                                    (   DateTable[rankYYYYMM] =  DateTable[rankYYYYMM_reportDay] - 1)
                                    ,(DateTable[DayOfMonth] &lt;= DayOfMonth_for_the_reportDay)
                                ),
                                1,0
)

RETURN
isMTD_ofPreviousMonth</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_isMTD_ofPreviousYEAR</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_isMTD_ofPreviousYEAR</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_isMTD_ofPreviousYEAR




isMTD_ofPreviousYEAR = 

VAR DayOfMonth_for_the_reportDay =  DAY(TODAY())-1
VAR isMTD_ofPreviousYear = IF(
                                AND(
                                    (   DateTable[rankYYYYMM] =  DateTable[rankYYYYMM_reportDay] - 12)
                                    ,(DateTable[DayOfMonth] &lt;= DayOfMonth_for_the_reportDay)
                                ),
                                1,0
)

RETURN
isMTD_ofPreviousYear</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_isPreviousMonth</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_isPreviousMonth</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_isPreviousMonth




isPreviousMonth = 
    VAR _reportDay = TODAY()-1    
    //-----------------
    VAR _report_FilteredDimDate = FILTER(DateTable, DateTable[Date] = _reportDay)
    //-----------------
    VAR _report_RankYYYYMM = CALCULATE(MAXX(DateTable,DateTable[rankYYYYMM]) ,_report_FilteredDimDate)
    VAR _isLastMonth = IF( DateTable[rankYYYYMM] = (_report_RankYYYYMM -1) ,1,0)
    VAR output = _isLastMonth
return output</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_isPreviousWeek</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_isPreviousWeek</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_isPreviousWeek




isPreviousWeek = 
				VAR _reportDay = TODAY()-1                  
				VAR rankYYYYWW_reportDay = CALCULATE(
				                            MAXX(DateTable,[rankYYYYWW])
				                            ,FILTER(
				                                    DateTable,
				                                    DateTable[Date]= _reportDay
				                            )
				)
				VAR rankYYYYWW_weekPriorToReportDay = rankYYYYWW_reportDay - 1
				var _isPreviousWeek = IF([rankYYYYWW] = rankYYYYWW_weekPriorToReportDay,1,0)
				
				VAR output = _isPreviousWeek
				RETURN 
				    output</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_isPreviousYEAR</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_isPreviousYEAR</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_isPreviousYEAR


isPreviousYEAR = 

VAR reportDay =  TODAY()-1
VAR isPreviousYear = IF(
                                (DateTable[Year] = YEAR(reportDay) - 1)
                                ,1,0
)

var output = isPreviousYear


RETURN
output
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_isYTD_ofPreviousYEAR</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_isYTD_ofPreviousYEAR</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_isYTD_ofPreviousYEAR





isYTD_ofPreviousYEAR = 

VAR DayOfYear_ofReportDay =  (   
                                           DATEDIFF (
                                                                                    DATE(
                                                                                            YEAR(DateTable[Report_DATE])
                                                                                            ,1
                                                                                            ,1
                                                                                        )
                                                                                    , DateTable[Report_DATE]
                                                                                    , DAY
                                            )
                            )
VAR YEAR_ofPreviousYear = YEAR(TODAY()  )  - 1       
VAR isYTD_ofPreviousYEAR = IF(  
                              (DateTable[Year] = YEAR_ofPreviousYear )
                                , IF( 
                                    
                                        DayOfYear_ofReportDay &gt;= DateTable[DayOfYear]
                                        , 1,0
                               )
                               
                               ,0
)

RETURN
isYTD_ofPreviousYEAR</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_COLUMN_TimePeriod_ID</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_COLUMN_TimePeriod_ID</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_COLUMN_TimePeriod_ID


TimePeriod_ID = 
(DateTable[isPreviousWeek] * 1) +
(DateTable[isMTD] * 10) +
(DateTable[isYTD] * 100) +
(DateTable[isMTD_ofPreviousMONTH] * 1000) + 
(DateTable[isMTD_ofPreviousYEAR] * 10000) + 
(DateTable[isYTD_ofPreviousYEAR] * 100000) +
(DateTable[isPreviousYEAR] * 1000000
)

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_MainPart__commentedOutToSpeedItUp</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_MainPart__commentedOutToSpeedItUp</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>DateTable = 

-- Configuration items
//VAR FirstYear = YEAR(NOW()) - 1
VAR StartYear = YEAR(now())-2
VAR StartDate = DATE(StartYear,01,01)
VAR FirstYear = YEAR(StartDate) 
VAR LastYear = YEAR(NOW()) 
VAR FirstDayOfWeek = 0      -- Use 0 for Sunday or 1 for Monday. For an ISO calendar use 1.
VAR FiscalMonthEnd = 12     -- For an ISO calendar use 12. ISO always starts in January

VAR theStartDate= Date(Firstyear,1,1)
VAR EndDate = Date(LastYear,12,31)

-- Generate a base table of dates
VAR BaseTable = CALENDAR(theStartDate, EndDate)			// &lt;==== 'BASE

-- Add the Year for each individual date
VAR Years = ADDCOLUMNS(
    BaseTable,
    "Year", YEAR([Date])                                          //Use this one when you want to sort by Years asccending
    ,"Year_SORT_Descending", (YEAR(now()) - YEAR([Date])) + 1     //this year is 1, previous years are increasing from 1
    ,"Year_descending" , YEAR([Date])                             // use this one when you want to sort by Years descending, use the Model =&gt; sort by column: Year_SORT_Descending
    )


-- Add the calendar month and other month related data for each date
VAR Months = ADDCOLUMNS(
    Years,
    "Month", MONTH([Date])
    ,"MonthName", FORMAT([Date],"mmmm")  
    /*
    ,"YYYYMMDD", FORMAT([Date],"YYYYMMDD")					// &lt;=== 'YYYYMMDD
    ,"YYYYMM",  ( YEAR([Date]) * 100) + MONTH([Date] )
    ,"Year and Month Name",FORMAT([Date],"YYYY-MMM")
    ,"Fiscal Year", 
        IF( FiscalMonthEnd = 12, 
            YEAR([Date]), 
            IF( MONTH([DATE]) &lt;= FiscalMonthEnd, 
                YEAR([DATE])-1, 
                YEAR([Date])
                )
            )
    ,"Fiscal Month", 
        IF( 
            FiscalMonthEnd = 12, 
                MONTH([Date]), 
                IF(MONTH([Date]) &lt;= FiscalMonthEnd, 
                    FiscalMonthEnd + MONTH([Date]), 
                    MONTH([Date]) - FiscalMonthEnd)
            )
    */
)

-- Add the Quarter and other quarter related data for each date    
VAR Quarters = ADDCOLUMNS(
    Months,
    "Quarter",ROUNDUP(MONTH([Date])/3,0)
    //,"YYYYQ",[Year] &amp; ROUNDUP(MONTH([Date])/3,0)
    )

-- Add the Day and other day related data for each date    
VAR Days = ADDCOLUMNS(
    Quarters,
    "isBeforeToday", IF([Date] &lt; TODAY(), TRUE, FALSE()),    
    "DayOfMonth", DAY([Date]),
    "DayOfWeekName", FORMAT([Date],"DDDD")          //,
   // "DayOfWeekNumber", WEEKDAY([Date]),
    //"DayOfYear", DATEDIFF (DATE(YEAR([Date]),1,1), [Date], DAY) + 1
    //"Today_DATE", DATE( YEAR(TODAY()), MONTH(TODAY()), Day(TODAY()) )
   // ,"Report_DATE", DATE( YEAR(TODAY()-1), MONTH(TODAY()-1), Day(TODAY()-1) )     
    )
/*
-- Add a few week columns. This is all dependent upon the variable FirstDayOfWeek which controls what day of the week a week starts (usually Sunday or Monday)
VAR Weeks = ADDCOLUMNS(
    Days,
    "WeekOfMonth", 1 + WEEKNUM([Date], FirstDayOfWeek+1) - WEEKNUM( DATE(YEAR([Date]), MONTH([Date]), 1), FirstDayOfWeek+1),
    "WeekofYear", WEEKNUM([Date], FirstDayOfWeek+1),                  -- The second parameter is 1 for Sunday and 2 for Monday
    "YYYYWW", ( YEAR([Date]) * 100) + WEEKNUM([Date], FirstDayOfWeek+1)
    //"YYYYWW", [Year] &amp; WEEKNUM([Date],FirstDayOfWeek+1)  
    )

-- Add all US holidays
var Holidays = ADDCOLUMNS(
    Weeks,
    "Holiday", 
        IF ( MONTH([Date]) = 12 &amp;&amp; DAY([DATE] = 25),                                        -- Christmas Day: December 25
            "Christmas",
        If ( MONTH([Date]) = 1 &amp;&amp; DAY([Date]) = 1,                                          -- New Years' Day: January 1
            "New Year's Day",
        If ( MONTH([Date]) = 7 &amp;&amp; DAY([Date]) = 4,                                          -- Independence Day: July 4
            "Independence Day",
        If ( MONTH([Date]) = 11 &amp;&amp; DAY([Date]) = 11,                                        -- Veteran's Day: November 11
            "Veterans Day",
        If ( MONTH([Date]) = 11 &amp;&amp; [DayOfWeekName] = "Thursday" &amp;&amp; ([DayOfMonth] &gt;= 22 &amp;&amp; [DayOfMonth] &lt;= 28), -- Thanksgiving: 4th Thursday of November
            "Thanksgiving Day",
        If ( MONTH([Date]) = 10 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 8 &amp;&amp; [DayOfMonth] &lt;= 14),    -- Columbus Day: 2nd Monday in October
            "Columbus Day",
        If ( MONTH([Date]) = 9 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 1 &amp;&amp; [DayOfMonth] &lt;= 7),      -- Labor Day: 1st Monday in September
            "Labor Day",
        If ( MONTH([Date]) = 2 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 15 &amp;&amp; [DayOfMonth] &lt;= 21),    -- Presidents' Day: 3rd Monday in February
            "Presidents' Day",
        If ( MONTH([Date]) = 1 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 15 &amp;&amp; [DayOfMonth] &lt;= 21),    -- Martin Luther King Jr.' Day: 3rd Monday in January
            "Martin Luther King Jr. Day"))))))))
        )
    )

-- Add if each date is a working day. It won't be if the day is Saturday or Sunday or if it's a holiday
VAR IsWorkingDay = ADDCOLUMNS(
    Holidays,
    "IsBusinesDay", IF ([DayOfWeekName] IN { "Saturday", "Sunday" } || NOT ISBLANK([Holiday]), FALSE(), TRUE())
    )

--VAR Today_DATE = {DATE(YEAR(NOW()), MONTH(NOW()), Day(NOW()) ) }





VAR isDates = ADDCOLUMNS(
    IsWorkingDay
    ,"isYTD", IF( YEAR([Date]) = YEAR(NOW()) &amp;&amp; [Date] &lt;= NOW(), 1, 0 )   
                       

)


*/

                                    

  
RETURN Days
//RETURN isDates</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>1_DAX_DateTable_MainPart</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>1_DAX_DateTable_MainPart</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_DAX_DateTable_MainPart

'Modeling {Menu} =&gt; New Table {icon on ribbon}


DateTable = 

-- Configuration items
//VAR FirstYear = YEAR(NOW()) - 1
VAR StartYear = YEAR(now())-2
VAR StartDate = DATE(StartYear,01,01)
VAR FirstYear = YEAR(StartDate) 
VAR LastYear = YEAR(NOW()) 
VAR FirstDayOfWeek = 0      -- Use 0 for Sunday or 1 for Monday. For an ISO calendar use 1.
VAR FiscalMonthEnd = 12     -- For an ISO calendar use 12. ISO always starts in January

VAR theStartDate= Date(Firstyear,1,1)
VAR EndDate = Date(LastYear,12,31)

-- Generate a base table of dates
VAR BaseTable = CALENDAR(theStartDate, EndDate)			// &lt;==== 'BASE

-- Add the Year for each individual date
VAR Years = ADDCOLUMNS(
    BaseTable,
    "Year", YEAR([Date])                                          //Use this one when you want to sort by Years asccending
    ,"Year_SORT_Descending", (YEAR(now()) - YEAR([Date])) + 1     //this year is 1, previous years are increasing from 1
    ,"Year_descending" , YEAR([Date])                             // use this one when you want to sort by Years descending, use the Model =&gt; sort by column: Year_SORT_Descending
    )


-- Add the calendar month and other month related data for each date
VAR Months = ADDCOLUMNS(
    Years,
    "Month", MONTH([Date]),
    "MonthName", FORMAT([Date],"mmmm"),	  
    "YYYYMMDD", FORMAT([Date],"YYYYMMDD"),					// &lt;=== 'YYYYMMDD
    "YYYYMM",  ( YEAR([Date]) * 100) + MONTH([Date] ),
    "Year and Month Name",FORMAT([Date],"YYYY-MMM"),
    "Fiscal Year", 
        IF( FiscalMonthEnd = 12, 
            YEAR([Date]), 
            IF( MONTH([DATE]) &lt;= FiscalMonthEnd, 
                YEAR([DATE])-1, 
                YEAR([Date])
                )
            ),
    "Fiscal Month", 
        IF( 
            FiscalMonthEnd = 12, 
                MONTH([Date]), 
                IF(MONTH([Date]) &lt;= FiscalMonthEnd, 
                    FiscalMonthEnd + MONTH([Date]), 
                    MONTH([Date]) - FiscalMonthEnd)
            )
)

-- Add the Quarter and other quarter related data for each date    
VAR Quarters = ADDCOLUMNS(
    Months,
    "Quarter",ROUNDUP(MONTH([Date])/3,0),
    "YYYYQ",[Year] &amp; ROUNDUP(MONTH([Date])/3,0)
    )

-- Add the Day and other day related data for each date    
VAR Days = ADDCOLUMNS(
    Quarters,
    "DayOfMonth", DAY([Date]),
    "DayOfWeekName", FORMAT([Date],"DDDD"),
    "DayOfWeekNumber", WEEKDAY([Date]),
    "DayOfYear", DATEDIFF (DATE(YEAR([Date]),1,1), [Date], DAY) + 1
    ,"Today_DATE", DATE( YEAR(TODAY()), MONTH(TODAY()), Day(TODAY()) )
    ,"Report_DATE", DATE( YEAR(TODAY()-1), MONTH(TODAY()-1), Day(TODAY()-1) )     
    )

-- Add a few week columns. This is all dependent upon the variable FirstDayOfWeek which controls what day of the week a week starts (usually Sunday or Monday)
VAR Weeks = ADDCOLUMNS(
    Days,
    "WeekOfMonth", 1 + WEEKNUM([Date], FirstDayOfWeek+1) - WEEKNUM( DATE(YEAR([Date]), MONTH([Date]), 1), FirstDayOfWeek+1),
    "WeekofYear", WEEKNUM([Date], FirstDayOfWeek+1),                  -- The second parameter is 1 for Sunday and 2 for Monday
    "YYYYWW", ( YEAR([Date]) * 100) + WEEKNUM([Date], FirstDayOfWeek+1)
    //"YYYYWW", [Year] &amp; WEEKNUM([Date],FirstDayOfWeek+1)  
    )

-- Add all US holidays
var Holidays = ADDCOLUMNS(
    Weeks,
    "Holiday", 
        IF ( MONTH([Date]) = 12 &amp;&amp; DAY([DATE] = 25),                                        -- Christmas Day: December 25
            "Christmas",
        If ( MONTH([Date]) = 1 &amp;&amp; DAY([Date]) = 1,                                          -- New Years' Day: January 1
            "New Year's Day",
        If ( MONTH([Date]) = 7 &amp;&amp; DAY([Date]) = 4,                                          -- Independence Day: July 4
            "Independence Day",
        If ( MONTH([Date]) = 11 &amp;&amp; DAY([Date]) = 11,                                        -- Veteran's Day: November 11
            "Veterans Day",
        If ( MONTH([Date]) = 11 &amp;&amp; [DayOfWeekName] = "Thursday" &amp;&amp; ([DayOfMonth] &gt;= 22 &amp;&amp; [DayOfMonth] &lt;= 28), -- Thanksgiving: 4th Thursday of November
            "Thanksgiving Day",
        If ( MONTH([Date]) = 10 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 8 &amp;&amp; [DayOfMonth] &lt;= 14),    -- Columbus Day: 2nd Monday in October
            "Columbus Day",
        If ( MONTH([Date]) = 9 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 1 &amp;&amp; [DayOfMonth] &lt;= 7),      -- Labor Day: 1st Monday in September
            "Labor Day",
        If ( MONTH([Date]) = 2 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 15 &amp;&amp; [DayOfMonth] &lt;= 21),    -- Presidents' Day: 3rd Monday in February
            "Presidents' Day",
        If ( MONTH([Date]) = 1 &amp;&amp; [DayOfWeekName] = "Monday" &amp;&amp; ([DayOfMonth] &gt;= 15 &amp;&amp; [DayOfMonth] &lt;= 21),    -- Martin Luther King Jr.' Day: 3rd Monday in January
            "Martin Luther King Jr. Day"))))))))
        )
    )

-- Add if each date is a working day. It won't be if the day is Saturday or Sunday or if it's a holiday
VAR IsWorkingDay = ADDCOLUMNS(
    Holidays,
    "IsBusinesDay", IF ([DayOfWeekName] IN { "Saturday", "Sunday" } || NOT ISBLANK([Holiday]), FALSE(), TRUE())
    )

--VAR Today_DATE = {DATE(YEAR(NOW()), MONTH(NOW()), Day(NOW()) ) }





VAR isDates = ADDCOLUMNS(
    IsWorkingDay
    ,"isYTD", IF( YEAR([Date]) = YEAR(NOW()) &amp;&amp; [Date] &lt;= NOW(), 1, 0 )   
                       

)


RETURN isDates</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Custom_Time_periods</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Custom_Time_periods</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

=========================================================================================YYYYWW
YYYYWW = (DimDate[CalendarYear] * 100) + DimDate[WeekNumberOfYear]
=========================================================================================rankYYYYWW
rankYYYYWW = RANKx(DimDate,DimDate[YYYYWW],,ASC,Dense)
=========================================================================================rankYYYYMM
rankYYYYMM = RANKx(DimDate,DimDate[YearMonth],,ASC,Dense)

=========================================================================================isMTD
isMTD = 
VAR _reportDay = TODAY()-1  
VAR _reportYYYYMM = (YEAR(_reportDay) * 100) + MONTH(_reportDay)
VAR isMTD = IF(
                AND(
                    (DimDate[YearMonth] = _reportYYYYMM)
                    ,(DimDate[FullDateTime] &lt;= _reportDay)
                ),
                1,0
)
VAR output = isMTD
RETURN
output
=========================================================================================isPreviousWeek based on RANK

rankYYYYWW = RANKx(DimDate,DimDate[YYYYWW],,ASC,Dense)
---------------------------------------------------------------
isPreviousWeek = 
				VAR _reportDay = TODAY()-1                  
				VAR rankYYYYWW_reportDay = CALCULATE(
				                            MAXX(DimDate,DimDate[rankYYYYWW])
				                            ,FILTER(
				                                    DimDate,
				                                    DimDate[FullDateTime]= _reportDay
				                            )
				)
				VAR rankYYYYWW_weekPriorToReportDay = rankYYYYWW_reportDay - 1
				var _isPreviousWeek = IF(DimDate[rankYYYYWW] = rankYYYYWW_weekPriorToReportDay,1,0)
				
				VAR output = _isPreviousWeek
				RETURN 
				    output



=========================================================================================isPreviousWeek - CALCULATED COLUMN - less efficient
isPreviousWeek = 
VAR _today = TODAY()
VAR _thisYear = YEAR(TODAY())
VAR _thisWeekNum = WEEKNUM(TODAY())

VAR thePreviousYear = _thisYear - 1

VAR isFirstWeekOfYear = IF(_thisWeekNum = 1, 1, 0)
VAR lastWeekOfLastYear = Maxx(FILTER(DimDate, DimDate[CalendarYear]=thePreviousYear),DimDate[WeekNumberOfYear])     //will use this if this is the first week of the year
var priofWeekNumberOfYear = _thisWeekNum - 1                                                                        //will use this if this is NOT the first week of the near
VAR PreviousWeekNumber_DependingOnTheWeek = IF(isFirstWeekOfYear = 1, lastWeekOfLastYear,priofWeekNumberOfYear)
VAR PreviousWeeksYearNumber_DependingOnTheWeek = IF(isFirstWeekOfYear = 1, thePreviousYear,_thisYear)
VAR output =IF( 
                AND(
                    IF(DimDate[WeekNumberOfYear] = PreviousWeekNumber_DependingOnTheWeek, TRUE(), FALSE())
                    ,IF(DimDate[CalendarYear] = PreviousWeeksYearNumber_DependingOnTheWeek, TRUE(), FALSE())
                    ),
                 1,
                 0
)   
RETURN output



=========================================================================================isThisWeek based on RANK

rankYYYYWW = RANKx(DimDate,DimDate[YYYYWW],,ASC,Dense)
---------------------------------------------------------------
isThisWeek = 
VAR _reportDay = TODAY()-1                  
VAR rankYYYYWW_reportDay = CALCULATE(
                            MAXX(DimDate,DimDate[rankYYYYWW])
                            ,FILTER(
                                    DimDate,
                                    DimDate[FullDateTime]= _reportDay
                            )
)
VAR rankYYYYWW_sameWeekAsReportDay = rankYYYYWW_reportDay
var _isThisWeek = IF(DimDate[rankYYYYWW] = rankYYYYWW_sameWeekAsReportDay,1,0)

VAR output = _isThisWeek
RETURN 
    output

=========================================================================================isLastMonth    
rankYYYYMM = RANKx(DimDate,DimDate[YearMonth],,ASC,Dense)
-------------------------------------------------------------
isLastMonth = 
    VAR _reportDay = TODAY()-1    
    //-----------------
    VAR _report_FilteredDimDate = FILTER(DimDate, DimDate[FullDateTime] = _reportDay)
    //-----------------
    VAR _report_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_report_FilteredDimDate)
    VAR _isLastMonth = IF( DimDate[rankYYYYMM] = (_report_RankYYYYMM -1) ,1,0)
    VAR output = _isLastMonth
return output

    
    
    
    
    
    
    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Date_Table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Date_Table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>a 'date table' is all the dates between a specific range
'often have additional columns such as: MonthName, YearName, Quarter, Holiday

'Time Intelligence requires continous series of dates w/ no gaps

'To Create Date Table in DAX
-----------------------------
' "Modeling" {Main Menu} =&gt; 'New Table' {icon in ribbon}
' In the formula bar: "Table =" =&gt; rename 'Table' to 'DatesDAX' and change it to:
DatesDAX = CALENDAR("01/01/2011","01/01/2021") 
'This would give you one column, so add the "ADDCOLUMNS" iterator
DatesDAX = ADDCOLUMNS( CALENDAR("01/01/2011","01/01/2021"), "Year", YEAR([Date]))
'Where [Date] is the existing column to use  

'Create Relationship with Date Table to use for subsequent filtering
--------------------------------------------------------------------
'To automatically calculate the calendar, w/o specifying start and end date
'	where fiscal year end and start is December (i.e. 12)
DatesDAX = ADDCOLUMNS(CALENDARAUTO(12),"Year",YEAR([Date]))

'Then build relationship between [Date] column of the newly created Date Table, 
'	AND the [OrderDate] field of the [SalesOrderHeader] table  {FOR EXAMPLE}

'Go to the relationships pane {on left} and drag the  [Date] column of the newly created Date Table
'	and drop it on the [OrderDate] field of the [SalesOrderHeader] table 


'could also calculate a PreviousYear column:
Date = ADDCOLUMNS(CALENDARAUTO(12),"Year", YEAR([Date]),"Month", Month([Date]), "PreviousYear",(YEAR([Date]-1) )) 

====Date Table=======================================================================================================
https://powerbi.tips/2017/12/start-of-month-dax-calendar/
'Open Power BI Desktop, on the Modeling ribbon click New Table.
'Enter the following code:

Dates = 
  GENERATE ( 
    CALENDAR ( DATE ( 2017, 1, 1 ), DATE ( 2017, 12, 31 ) ), 
    VAR currentDay = [Date]
    VAR day = DAY( currentDay )
    VAR month = MONTH ( currentDay ) 
    VAR year = YEAR ( currentDay )
  RETURN ROW ( 
    "day", day, 
    "month", month, 
    "year", year )
  )
  
  'Note: When you drag over the field labeled Date the field will be naturally added as a Date Hierarchy.  
  'To remove the Date Hierarchy, you have to click the little drop down arrow next to the word DATE 
  '	and select the word Date in the drop down menu.  
  '	This will remove the Year, Quarter, Month and Day date context from the visual.
====Data Table - Just 1st of month ===============================================================
https://powerbi.tips/2017/12/start-of-month-dax-calendar/
'Open Power BI Desktop, on the Modeling ribbon click New Table.
'Enter the following code:

Start of Month Dates = 
  GENERATE (
    GENERATESERIES(1,(12*118)),
    VAR inc = [Value]
  RETURN ROW (
    "date", DATE(1900,inc,1)
    )
  )  
====Data Table - Beginning and End of month ===============================================================
https://powerbi.tips/2017/12/start-of-month-dax-calendar/
'Open Power BI Desktop, on the Modeling ribbon click New Table.
'Enter the following code:
  
End of Month Dates = 
  GENERATE (
    GENERATESERIES(1,12*119),
    VAR yearToStart = 1900
    VAR inc = [Value]
  RETURN ROW (
    "Date", DATE(yearToStart,inc,1) ,
    "Month End", EOMONTH( DATE(yearToStart,inc,1), 0)
    )
  )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>FUNCTIONS_for_TimeIntelligence</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>FUNCTIONS_for_TimeIntelligence</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Performance-to-Date
====================
DATESYTD
DATESQTD
DATESMTD

Time Period Shift  aka Previous Period Pattern
==================     =======================
SAMEPERIODLASTYEAR
DATEADD
PARALLELPERIOD
PREVIOUSYEAR
	'Quarter/Month/Day
NEXTYEAR
	'Quarter/Month/Day

Running Total '(moving average os is the running total divided by the number of periods)
===================
DATESINPERIOD

#######################################################################################################################

DATEADD 'for previous periods
========
---------------------------------------------------------------------------------------------------------------------------
'EXAMPLE
	
	'example to calculate the MEASURE for a previous month
	CALCULATE(
				MEASURE, 
				DATEADD(
							CALENDAR[DATE]
							,-1,			' # of intervals
							MONTH			'Interval tpe: DAY, MONTH, QUARTER, YEAR
						)
			 )
			 
---------------------------------------------------------------------------------------------------------------------------		 
	Prev Month Revenue = CALCULATE(
									[Total Revenue]
									,DATEADD(
												AW_Calendar_Lookup[Date]
												,-1
												,MONTH
											)
								  )	
								  
---------------------------------------------------------------------------------------------------------------------------								  	 
DATESBETWEEN
=============	
		'equivalent in this example to MTD							  	 
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFMONTH(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}								  	 
---------------------------------------------------------------------------------------------------------------------------
DATESINPERIOD	'Running Total
=============

---------------------------------------------------------------------------------------------------------------------------
'EXAMPLE
	CALCULATE(
				MEASURE
				, DATESINPERIOD(
									CALENDAR[DATE]
									, MAX[Calendar[DATE])								//'START parm for the DATESINPERIOD function
									,-10												//'NumberOfIntervals parm, use negative (-) for previous periods
									,DAY												//'Interval parm: DAY, MONTH, QUARTER, YEAR
							   )
			 )
---------------------------------------------------------------------------------------------------------------------------			 
10-day Rolling Revenue = CALCULATE(
									[Total Revenue]
									, DATESINPERIOD(
													AW_Calendar_Lookup[Date]
													, MAX(AW_Calendar_Lookup[Date])
													,-10
													,DAY)
									)			 
			 
---------------------------------------------------------------------------------------------------------------------------
'NOTE: Moving Averages
	'To calculate Moving Average, use the running total calculation above and divide by the number of intervals

DATESMTD 'Month to date
=======
		'-------------------------------------------------------------------------
		'-- DATESMTD: Returns a table that contains a column of the dates for the 
		'--			 month to date, in the current context.
		'--
		'--			 Note: Internally this function is re-written to use the
		'--			 	   DATESBETWEEN function.
		-------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					--COUNTROWS('Calendar'),
					DATESMTD('Calendar'[Date])
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}		
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFMONTH(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
		
		
DATESQTD 'quarter to date
========
		'-------------------------------------------------------------------------
		'-- DATESQTD: Returns a table that contains a column of the dates for the 
		'--			 quarter to date, in the current context.
		'--
		'--			 Note: Internally this function is re-written to use the
		'--			 	   DATESBETWEEN function.
		'-------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					//'--COUNTROWS('Calendar'),
					DATESQTD('Calendar'[Date])
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}		
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFQUARTER(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}
		
DATESYTD 'year to date
========
'Returns a table that contains a column of the dates for the year to date, in the current context.

'SYNTAX
	DATESYTD(
				&lt;dates&gt; 
				[,&lt;year_end_date&gt;]
			)  
			
	dates	
	'	A column that contains dates.
	year_end_date	
	'	(optional) A literal string with a date that defines the year-end date. The default is December 31.			
	
Return value
'A table containing a single column of date values.	
---------------------------------------------------------------------------------------------------------------------------
'EXAMPLE
	
	CALCULATE(
				SUM(
						InternetSales_USD[SalesAmount_USD])			//&lt;&lt;== e.g. using SUM on a field
						, DATESYTD(DateTime[DateKey]
			  		)
			  ) 
---------------------------------------------------------------------------------------------------------------------------
	
	'for reference in the second statement, here is the MEASURE
	Total Revenue = SUMX(
							AW_Sales, AW_Sales[OrderQuantity] * RELATED(AW_Product_Lookup[ProductPrice])
						)			  
				  
	YTD Revenue = CALCULATE(
								[Total Revenue]							//&lt;== example without the SUM, b/c the SUM is in the MEASURE
								, DATESYTD(AW_Calendar_Lookup[Date])	//&lt;== this acts like the filter for the MEASURE
							)		
							
		'-------------------------------------------------------------------------
		'-- DATESYTD: Returns a table that contains a column of the dates for the 
		'--			 year to date, in the current context.
		'--
		'--			 Note: Internally this function is re-written to use the
		'--			 	   DATESBETWEEN function.
		'-------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					--COUNTROWS('Calendar'),
					DATESYTD('Calendar'[Date])
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}		
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFYEAR(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}
											   
									   
---------------------------------------------------------------------------------------------------------------------------							
ENDOFMONTH
==========
		'------------------------------------------------------------------------------------
		'-- ENDOFMONTH: Finds the date in the current context of the dates table and
		'--			   returns the date of the first of the month of that date.
		'------------------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				ENDOFMONTH('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
---------------------------------------------------------------------------------------------------------------------------
ENDOFQUARTER
============

	'------------------------------------------------------------------------------------
	'-- ENDOFQUARTER: Finds the date in the current context of the dates table and
	'--			     returns the date of the last day of the quarter.
	'------------------------------------------------------------------------------------
	
	EVALUATE
	{
		CALCULATE(
			ENDOFQUARTER('Calendar'[Date]),
			'Calendar'[Date] = DATE(2008,4,12)
			)
	}
---------------------------------------------------------------------------------------------------------------------------
ENDOFYEAR
==============
'------------------------------------------------------------------------------------
'-- ENDOFYEAR: Finds the date in the current context of the dates table and
'--			  returns the date of the last day of the year.
'------------------------------------------------------------------------------------

EVALUATE
{
	CALCULATE(
		ENDOFYEAR('Calendar'[Date]),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}
---------------------------------------------------------------------------------------------------------------------------
NEXTDAY
==============

'-- NEXTDAY: Returns a table that contains a column of all dates representing the 
'--          day that occurs after the current date in the dates column, given the 
'--          current context.
'--
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	'-- Return the day previous to the date contained in the filter
	CALCULATE(
		NEXTDAY('Calendar'[Date]),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

EVALUATE
{
	'-- Calculate total sales in the Contols database occuring the day after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTDAY('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

---------------------------------------------------------------------------------------------------------------------------
NEXTMONTH
==============
'-- NEXTMONTH: Returns a table that contains a column of all dates representing the 
'--            month that occurs after the current date in the dates column, given the 
'--            current context.
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	-- Calculate total sales in the Contols database occuring in the month after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTMONTH('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

---------------------------------------------------------------------------------------------------------------------------
NEXTQUARTER
==============
'------------------------------------------------------------------------------------------------------
'-- NEXTQUARTER: Returns a table that contains a column of all dates representing the 
'--            	quarter that occurs after the current date in the dates column, given the 
'--            	current context.
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	-- Calculate total sales in the Contols database occuring in the month after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTQUARTER('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}
---------------------------------------------------------------------------------------------------------------------------
NEXTYEAR
==============
'------------------------------------------------------------------------------------------------------
'-- NEXTYEAR: Returns a table that contains a column of all dates representing the 
'--           year that occurs after the current date in the dates column, given the 
'--           current context.
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	-- Calculate total sales in the Contols database occuring in the month after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTYEAR('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

---------------------------------------------------------------------------------------------------------------------------
PARALLELPERIOD
==============
'Returns a table that contains a column of dates that represents a period parallel to the dates in the specified dates column, 
' in the current context, with the dates shifted a number of intervals either forward in time or back in time.

'PARALLELPERIOD computes the entire period in the interval (i.e. entire year, quarter, etc.)
'	Values in total rows may not reflect the expected total if partial periods are present =&gt; FUNKY totals

'The PARALLELPERIOD function is similar to the DATEADD function 
'	except that PARALLELPERIOD always returns full periods at the given granularity level instead of the partial periods that DATEADD returns. 
'For example, 
'	if you have a selection of dates that starts at June 10 and finishes at June 21 of the same year, 
'	and you want to shift that selection forward by one month then the PARALLELPERIOD function will return all dates from the next month 
'		(July 1 to July 31); 
'	however, 
'	if DATEADD is used instead, then the result will include only dates from 
'		July 10 to July 21.


'SYNTAX
PARALLELPERIOD(
				&lt;dates&gt;
				,&lt;number_of_intervals&gt;
				,&lt;interval&gt;
			  )  
			  

dates	
'A column that contains dates.
number_of_intervals	
'An integer that specifies the number of intervals to add to or subtract from the dates.
interval	
'The interval by which to shift the dates. The value for interval can be one of the following: year, quarter, month.			  
			  
'Example
--------
'The following sample formula creates a measure that calculates the previous year sales for Internet sales.
= CALCULATE(
			SUM(InternetSales_USD[SalesAmount_USD])
			, PARALLELPERIOD(
								DateTime[DateKey]
								,-1
								,year)
							)		
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSDAY								  
============

'------------------------------------------------------------------------------------------------------
'-- PREVIOUSDAY: Returns a table that contains a column of all dates representing the 
'--              day that is previous to the current date in the dates column, given the 
'--              current context.
'--
------------------------------------------------------------------------------------------------------

EVALUATE
{
	//' Return the day previous to the date contained in the filter
	CALCULATE(
		PREVIOUSDAY('Calendar'[Date]),				//'&lt;=== Returns a table with a single row and a single column, so OK to use as 1st parm of CALCULATE
		'Calendar'[Date] = DATE(2008,4,12)
		)
}								  
								  
EVALUATE		//' The outer CALCULATE sets the Date context, for the inner CALCULATE
{
	//' Calculate total sales in the Contols database occuring the day before the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			PREVIOUSDAY('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSDMONTH								  
============								  
		'------------------------------------------------------------------------------------------------------
		'-- PREVIOUSMONTH: Returns a table that contains a column of all dates representing the 
		'--                month that is previous to the current date in the dates column, given the 
		'--                current context.
		'--
		'------------------------------------------------------------------------------------------------------
		
		EVALUATE 
		{
			== ERROR
			//' It won't work b/c PREVIOUSMONTH returns a column with multiple values0
			CALCULATE(
				PREVIOUSMONTH('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
		
		EVALUATE
		{
		//' Calculate total sales in the Contols database occuring in the month prior to the current context date
			CALCULATE(
				CALCULATE(
					''COUNTROWS('Calendar'),  //'&lt;== if you use this you would see it is return 30 days of the month
					[Sales Amount],			  //' the measure would aggregate all the rows 
					PREVIOUSMONTH('Calendar'[Date])			
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}	
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSQUARTER								  
============			
		'------------------------------------------------------------------------------------------------------
		'-- PREVIOUSQUARTER: Returns a table that contains a column of all dates representing the 
		'--                  quarter that is previous to the current date in the dates column, given the 
		'--                  current context.
		'--
		'------------------------------------------------------------------------------------------------------
		
		EVALUATE
		{
			-- Calculate total sales in the Contols database occuring in the month prior to the current context date
			CALCULATE(
				CALCULATE(
					--COUNTROWS('Calendar'),
					[Sales Amount],
					PREVIOUSQUARTER('Calendar'[Date])			
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}									  
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSYEAR								  
============									  
		'------------------------------------------------------------------------------------------------------
		'-- PREVIOUSYEAR: Returns a table that contains a column of all dates representing the 
		'--               year that is previous to the current date in the dates column, given the 
		'--               current context.
		'--
		'------------------------------------------------------------------------------------------------------
		
		EVALUATE
		{
			-- Calculate total sales in the Contols database occuring in the month prior to the current context date
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					PREVIOUSYEAR('Calendar'[Date])			
					),
				'Calendar'[Date] = DATE(2007,4,12)
				)
		}
									  



---------------------------------------------------------------------------------------------------------------------------				  
STARTOFMONTH
============			  
		'------------------------------------------------------------------------------------
		'-- STARTOFMONTH: Finds the date in the current context of the dates table and
		'--				 returns the date of the first of the month of that date.
		'------------------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				STARTOFMONTH('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}		  
							)			  
---------------------------------------------------------------------------------------------------------------------------				  
STARTOFQUARTER	
==============		  
		'------------------------------------------------------------------------------------
		'-- STARTOFQUARTER: Finds the date in the current context of the dates table and
		'--				   returns the date of the first day of the quarter.
		'------------------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				STARTOFQUARTER('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
---------------------------------------------------------------------------------------------------------------------------
STARTOFYEAR
==============					  
'------------------------------------------------------------------------------------
'-- STARTOFYEAR: Finds the date in the current context of the dates table and
'--				returns the date of the first day of the year.
'------------------------------------------------------------------------------------

EVALUATE
{
	CALCULATE(
		STARTOFYEAR('Calendar'[Date]),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}			  
			  
---------------------------------------------------------------------------------------------------------------------------			  
TOTALMTD			  
==============			  
			  -------------------------------------------------------------------------
				-- TOTALMTD: Evaluates the value of the expression for the month to date, 
				--   		 in the current context.
				--
				-- 			 Note: Internally TOTALMTD is re-written to use DATESMTD.
				-------------------------------------------------------------------------
				
				EVALUATE
				{
					CALCULATE(
						TOTALMTD(
							[Sales Amount],
							'Calendar'[Date]
							),
					'Calendar'[Date] = DATE(2008,4,12)
					)
				}
				
				EVALUATE
				{
					CALCULATE(
						CALCULATE(
							[Sales Amount],
							DATESMTD('Calendar'[Date])
							),
					'Calendar'[Date] = DATE(2008,4,12)
					)
				}
---------------------------------------------------------------------------------------------------------------------------			  
TOTALQTD			  
==============					
			'----------------------------------------------------------------------------
			'-- TOTALQTD: Evaluates the value of the expression for the quarter to date, 
			'--   		 in the current context.
			'--
			'-- 			 Note: Internally TOTALQTD is re-written to use DATESQTD.
			'----------------------------------------------------------------------------
			
			EVALUATE
			{
				CALCULATE(
					TOTALQTD(
						[Sales Amount],
						'Calendar'[Date]
						),
				'Calendar'[Date] = DATE(2008,6,12)
				)
			}
			
			EVALUATE
			{
				CALCULATE(
					CALCULATE(
						[Sales Amount],
						DATESQTD('Calendar'[Date])
						),
				'Calendar'[Date] = DATE(2008,6,12)
				)
			}
---------------------------------------------------------------------------------------------------------------------------			  
TOTALYTD			  
==============
			'Syntax
			TOTALYTD(
					&lt;expression&gt;
					,&lt;dates&gt;
					[,&lt;filter&gt;]
					[,&lt;year_end_date&gt;]
					) 
			expression	
			'An expression that returns a scalar value.
			dates	
			'A column that contains dates.
			filter	
			'(optional) An expression that specifies a filter to apply to the current context.
			year_end_date	
			'(optional) A literal string with a date that defines the year-end date. The default is December 31.
			
		'----------------------------------------------------------------------------
		'-- TOTALYTD: Evaluates the value of the expression for the quarter to date, 
		'--   		 in the current context.
		'--
		'-- 			 Note: Internally TOTALYTD is re-written to use DATESYTD.
		'----------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				TOTALYTD(
					[Sales Amount],
					'Calendar'[Date]
					),
			'Calendar'[Date] = DATE(2008,6,12)
			)
		}
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESYTD('Calendar'[Date])
					),
			'Calendar'[Date] = DATE(2008,6,12)
			)
		}
	

















			  
			  
			  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>YearOverYear_Growth</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>YearOverYear_Growth</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>YearOverYear_Growth

'Relationship:
[OrderDate] of table [SalesHeader]  &lt;=&gt; [Date] of table [Date]
'Cardinality: Many-to-one

'TABLE: [Date] w/ 3 column &amp; 1 Measure
--------------
'C1: Date
'C2: "Year"
'C3: "Month"

Date =
ADDCOLUMNS (
    CALENDARAUTO ( 12 ),
    "Year", YEAR ( [Date] ),
    "Month", MONTH ( [Date] )
)
'Measure: YTD which pulls from the [SalesHeader] Table
YTD = TOTALYTD(SUM(SalesHeader[TotalDue]),'Date'[Date])


'TABLE: [SalesHeader]
---------------------
'C1: OrderDate
'C2: OrderDateNum  {YYYYMMDD : INTEGER}
'Measure1: 
	Prev Year = CALCULATE(SUM(SalesHeader[TotalDue]),PREVIOUSYEAR('Date'[Date]))
'C3: SalesOrderID
'C4: TotalDue
'Measure2: 
YoY Growth =
	 ( SUM ( SalesHeader[TotalDue] ) - [Prev Year] )
	    / SUM ( SalesHeader[TotalDue] )
	
'Design Surface
---------------------
Table Visual
'Values:
	[DATE].[Year]				'{Don't summarize}
	[SalesHeader].[TotalDue]	'{Sum}
	[SalesHeader].[Prev Year]	'
	[SalesHeader].[YoY Growth]	'
	
	

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>YearToDate_total</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>YearToDate_total</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Start w/ 2 tables:

'Relationship:
[OrderDate] of table [SalesHeader]  &lt;=&gt; [Date] of table [Date]
'Cardinality: Many-to-one

'TABLE: [Date] w/ 3 column &amp; 1 Measure
--------------
'C1: Date
'C2: "Year"
'C3: "Month"
Date = ADDCOLUMNS(CALENDARAUTO(12),"Year", YEAR([Date]),"Month", Month([Date]))
'Measure: YTD which pulls from the [SalesHeader] Table
YTD = TOTALYTD(SUM(SalesHeader[TotalDue]),'Date'[Date])


'TABLE: [SalesHeader]
---------------------
'C1: OrderDate
'C2: OrderDateNum  {YYYYMMDD : INTEGER}
'Measure1: 
	Prev Year = CALCULATE(SUM(SalesHeader[TotalDue]),PREVIOUSYEAR('Date'[Date]))
'C3: SalesOrderID
'C4: TotalDue
'Measure2: 
	YoY Growth = (SUM(SalesHeader[TotalDue]) - [Prev Year]) / Sum(SalesHeader[TotalDue])

'Design Surface
---------------------
Table Visual
'Values:
	[DATE].[Year]				'{Don't summarize}
	[DATE].[Month]				'{Don't summarize}	
	[SalesHeader].[TotalDue]	'{Sum}
	[DATE].[YTD]				'
	
	

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_CalendarTables</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>from_EnterpriseDNA</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_CalendarTables</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>from_EnterpriseDNA</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://forum.enterprisedna.co/t/extended-date-table-power-query-m-function/6390

=============================================================================


let fnDateTable = ( StartDate as date, EndDate as date, optional FYStartMonthNum as number, optional Holidays as list, optional WDStartNum as number, optional AddRelativeNetWorkdays as logical ) as table =&gt;
  let
      FYStartMonth = List.Select( {1..12}, each _ = FYStartMonthNum ){0}? ?? 1,
      WDStart = List.Select( {0..1}, each _ = WDStartNum ){0}? ?? 0,
      CurrentDate = Date.From( DateTime.FixedLocalNow()),
      DayCount = Duration.Days( Duration.From( EndDate - StartDate)) +1,
      Source = List.Dates( StartDate, DayCount, #duration(1,0,0,0)),
      AddToday = if EndDate &lt; CurrentDate then List.Combine( {Source, {CurrentDate}}) else Source,
      ToTable = Table.FromList(AddToday, Splitter.SplitByNothing(), type table [Date = Date.Type] ),
      InsertYear = Table.AddColumn(ToTable, "Year", each Date.Year([Date]), type number),
      InsertYearOffset = Table.AddColumn(InsertYear, "CurrYearOffset", each Date.Year([Date]) - Date.Year( Date.From(CurrentDate)), type number),
      InsertCompletedYear = Table.AddColumn(InsertYearOffset, "YearCompleted", each Date.EndOfYear([Date]) &lt; Date.From( Date.EndOfYear(CurrentDate)), type logical),

      InsertQuarterNum = Table.AddColumn(InsertCompletedYear, "Quarter Number", each Date.QuarterOfYear([Date]), type number),
      InsertQuarter = Table.AddColumn(InsertQuarterNum, "Quarter", each "Q" &amp; Number.ToText([Quarter Number]), type text),
      InsertStartOfQuarter = Table.AddColumn(InsertQuarter, "Start of Quarter", each Date.StartOfQuarter([Date]), type date),
      InsertEndOfQuarter = Table.AddColumn(InsertStartOfQuarter, "End of Quarter", each Date.EndOfQuarter([Date]), type date),
      InsertCalendarQtr = Table.AddColumn(InsertEndOfQuarter, "Quarter &amp; Year", each "Q" &amp; Number.ToText( Date.QuarterOfYear([Date])) &amp; Date.ToText([Date], [Format = " yyyy"]), type text),
      InsertQuarternYear = Table.AddColumn(InsertCalendarQtr, "QuarternYear", each [Year] * 10 + [Quarter Number], type number),
      InsertQuarterOffset = Table.AddColumn(InsertQuarternYear, "CurrQuarterOffset", each ((4 * Date.Year([Date])) +  Date.QuarterOfYear([Date])) - ((4 * Date.Year(Date.From(CurrentDate))) +  Date.QuarterOfYear(Date.From(CurrentDate))), type number),
      InsertCompletedQuarter = Table.AddColumn(InsertQuarterOffset, "QuarterCompleted", each Date.EndOfQuarter([Date]) &lt; Date.From(Date.EndOfQuarter(CurrentDate)), type logical),

      InsertMonth = Table.AddColumn(InsertCompletedQuarter, "Month", each Date.Month([Date]), type number),
      InsertStartOfMonth = Table.AddColumn(InsertMonth, "Start of Month", each Date.StartOfMonth([Date]), type date),
      InsertEndOfMonth = Table.AddColumn(InsertStartOfMonth, "End of Month", each Date.EndOfMonth([Date]), type date),
      InsertCalendarMonth = Table.AddColumn(InsertEndOfMonth, "Month &amp; Year", each Text.Proper( Date.ToText([Date], [Format = "MMM yyyy"])), type text),
      InsertMonthnYear = Table.AddColumn(InsertCalendarMonth , "MonthnYear", each [Year] * 100 + [Month], type number),
      InsertMonthOffset = Table.AddColumn(InsertMonthnYear, "CurrMonthOffset", each ((12 * Date.Year([Date])) +  Date.Month([Date])) - ((12 * Date.Year(Date.From(CurrentDate))) +  Date.Month(Date.From(CurrentDate))), type number),
      InsertCompletedMonth = Table.AddColumn(InsertMonthOffset, "MonthCompleted", each Date.EndOfMonth([Date]) &lt; Date.From(Date.EndOfMonth(CurrentDate)), type logical),
      InsertMonthName = Table.AddColumn(InsertCompletedMonth, "Month Name", each Text.Proper( Date.ToText([Date], "MMMM")), type text),
      InsertMonthShort = Table.AddColumn( InsertMonthName, "Month Short", each Text.Proper( Date.ToText([Date], "MMM")), type text),
      InsertMonthInitial = Table.AddColumn(InsertMonthShort, "Month Initial", each Text.Start([Month Name], 1) &amp; Text.Repeat( Character.FromNumber(8203), Date.Month([Date]) ), type text),
      InsertDayOfMonth = Table.AddColumn(InsertMonthInitial, "Day of Month", each Date.Day([Date]), type number),
  
      InsertWeekNumber = Table.AddColumn(InsertDayOfMonth, "Week Number", each
        if Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=0
        then Number.RoundDown((Date.DayOfYear(#date(Date.Year([Date])-1,12,31))-(Date.DayOfWeek(#date(Date.Year([Date])-1,12,31), Day.Monday)+1)+10)/7)
        else if (Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7)=53 and (Date.DayOfWeek(#date(Date.Year([Date]),12,31), Day.Monday)+1&lt;4))
        then 1 else Number.RoundDown((Date.DayOfYear([Date])-(Date.DayOfWeek([Date], Day.Monday)+1)+10)/7), type number),
      InsertStartOfWeek = Table.AddColumn(InsertWeekNumber, "Start of Week", each Date.StartOfWeek([Date], Day.Monday), type date),
      InsertWeekEnding = Table.AddColumn(InsertStartOfWeek, "End of Week", each Date.EndOfWeek( [Date], Day.Monday), type date),
      InsertCalendarWk = Table.AddColumn(InsertWeekEnding, "Week &amp; Year", each "W" &amp; Text.PadStart( Text.From( [Week Number] ), 2, "0") &amp; " " &amp; Text.From(Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 ))), type text ),
      InsertWeeknYear = Table.AddColumn(InsertCalendarWk, "WeeknYear", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )) * 100 + [Week Number],  Int64.Type),
      InsertWeekOffset = Table.AddColumn(InsertWeeknYear, "CurrWeekOffset", each (Number.From(Date.StartOfWeek([Date], Day.Monday))-Number.From(Date.StartOfWeek(CurrentDate, Day.Monday)))/7, type number),
      InsertCompletedWeek = Table.AddColumn(InsertWeekOffset, "WeekCompleted", each Date.EndOfWeek( [Date], Day.Monday) &lt; Date.From(Date.EndOfWeek(CurrentDate, Day.Monday)), type logical),
  
      InsertDayWeek = Table.AddColumn(InsertCompletedWeek, "Day of Week Number", each Date.DayOfWeek([Date], Day.Monday) + WDStart, Int64.Type),
      InsertDayName = Table.AddColumn(InsertDayWeek, "Day of Week Name", each Text.Proper( Date.ToText([Date], "dddd" )), type text),
      InsertDayInitial = Table.AddColumn(InsertDayName, "Day of Week Initial", each Text.Proper(Text.Start([Day of Week Name], 1)) &amp; Text.Repeat( Character.FromNumber(8203), Date.DayOfWeek([Date], Day.Monday) + WDStart ), type text),
      InsertDayOfYear = Table.AddColumn(InsertDayInitial, "Day of Year", each Date.DayOfYear([Date]), Int64.Type),
      InsertDayInt = Table.AddColumn(InsertDayOfYear, "DateInt", each [Year] * 10000 + [Month] * 100 + [Day of Month], type number),
      InsertDayOffset = Table.AddColumn(InsertDayInt, "CurrDayOffset", each Number.From([Date]) - Number.From(CurrentDate), type number),
      InsertIsAfterToday = Table.AddColumn(InsertDayOffset, "IsAfterToday", each not ([Date] &lt;= Date.From(CurrentDate)), type logical),
      InsertIsWorkingDay = Table.AddColumn(InsertIsAfterToday, "IsWeekDay", each if Date.DayOfWeek([Date], Day.Monday) &gt; 4 then false else true, type logical),
      InsertIsHoliday = Table.AddColumn(InsertIsWorkingDay, "IsHoliday", each if Holidays = null then "Unknown" else List.Contains( Holidays, [Date] ), if Holidays = null then type text else type logical),
      InsertIsBusinessDay = Table.AddColumn(InsertIsHoliday, "IsBusinessDay", each if [IsWeekDay] = true and [IsHoliday] &lt;&gt; true then true else false, type logical),
      InsertDayType = Table.AddColumn(InsertIsBusinessDay, "Day Type", each if [IsHoliday] = true then "Holiday" else if [IsWeekDay] = false then "Weekend" else if [IsWeekDay] = true then "Weekday" else null, type text),

      InsertISOYear = Table.AddColumn( InsertDayType, "ISO Year", each Date.Year( Date.AddDays( Date.StartOfWeek([Date], Day.Monday), 3 )), type number),
      InsertISOqNum = Table.AddColumn(InsertISOYear, "ISO Quarter Number", each if [Week Number] &gt;39 then 4 else if [Week Number] &gt;26 then 3 else if [Week Number] &gt;13 then 2 else 1, Int64.Type),
      InsertISOqtr = Table.AddColumn(InsertISOqNum, "ISO Quarter", each "Q" &amp; Number.ToText([ISO Quarter Number]), type text),
      InsertISOQuarter = Table.AddColumn(InsertISOqtr, "ISO Quarter &amp; Year", each "Q" &amp; Number.ToText([ISO Quarter Number]) &amp; " " &amp; Number.ToText([ISO Year]), type text),
      InsertISOqNy = Table.AddColumn(InsertISOQuarter, "ISO QuarternYear", each [ISO Year] * 10 + [ISO Quarter Number], type number),

      // BufferTable = Table.Buffer(Table.Distinct( InsertISOqNy[[ISO Year], [DateInt]])),
      // InsertISOday = Table.AddColumn(InsertISOqNy, "ISO Day of Year", (OT) =&gt; Table.RowCount( Table.SelectRows( BufferTable, (IT) =&gt; IT[DateInt] &lt;= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),
      AddFY = Table.AddColumn(InsertISOqNy, "Fiscal Year", each "FY" &amp; (if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then Text.From([Year] +1) else Text.From([Year])), type text),
      //AddFYs = Table.AddColumn(AddFY, "Fiscal Year short", each "FY" &amp; (if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then Text.PadEnd( Text.End( Text.From([Year] +1), 2), 2, "0") else Text.End( Text.From([Year]), 2)), type text),
      AddFQ = Table.AddColumn(AddFY, "Fiscal Quarter", each "FQ" &amp; Text.From( Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 )) &amp; " " &amp; (if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then Text.From([Year] +1) else Text.From([Year])), type text),
      AddFQnYr = Table.AddColumn(AddFQ, "FQuarternYear", each (if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then [Year] +1 else [Year]) * 10 + Number.RoundUp( Date.Month( Date.AddMonths( [Date], - (FYStartMonth -1) )) / 3 ), type number),
      AddFM = Table.AddColumn(AddFQnYr, "Fiscal Period Number", each if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then [Month] - (FYStartMonth-1) else if [Month] &gt;= FYStartMonth and FYStartMonth =1 then [Month] else [Month] + (12-FYStartMonth+1), type number),
      AddFP = Table.AddColumn(AddFM, "Fiscal Period", each "FP" &amp; Text.PadStart( Text.From([Fiscal Period Number]), 2, "0") &amp; " " &amp; (if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then Text.From([Year] +1) else Text.From([Year])), type text),
      AddFMnYr = Table.AddColumn(AddFP , "FPeriodnYear", each (if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then [Year] +1 else [Year]) * 100 + [Fiscal Period Number], type number),
      FYCalendarStart = #date( Date.Year(StartDate)-1, FYStartMonth, 1 ),
      InsertFFD = Table.AddColumn( AddFMnYr, "FiscalFirstDay", each if [Month] &gt;= FYStartMonth and FYStartMonth &gt;1 then #date( Date.Year([Date])+1, FYStartMonth, 1) else #date( Date.Year([Date]), FYStartMonth, 1), type date ),

      InitTable = Table.FromList( List.Transform( {Number.From(FYCalendarStart) .. Number.From(EndDate)}, Date.From), Splitter.SplitByNothing(), type table [DateFW = Date.Type]),
      AddFFD = Table.AddColumn( InitTable, "FiscalFirstDay", each if Date.Month([DateFW]) &lt; FYStartMonth then #date(Date.Year([DateFW]), FYStartMonth, 1) else #date(Date.Year([DateFW]) + 1, FYStartMonth, 1)),
      AddFWSD = Table.AddColumn( AddFFD, "FWStartDate", each Date.AddYears(Date.StartOfWeek([DateFW], Day.Monday), 1)),
      Group1 = Table.Group( AddFWSD, {"FiscalFirstDay", "FWStartDate"}, {{"AllRows", each _, type table [DateFW = nullable date, FiscalFirstDay = date, FWStartDate = date]}}),
      Group2 = Table.Group( Group1, {"FiscalFirstDay"}, {{"AllRows2", each _, type table [FiscalFirstDay = date, FWStartDate = date, AllRows = table]}}),
      AddIndex = Table.AddColumn( Group2, "Custom", each Table.AddIndexColumn([AllRows2], "Fiscal Week Number", 1, 1) )[[Custom]],
      ExpandG2 = Table.ExpandTableColumn( AddIndex, "Custom", {"FiscalFirstDay", "FWStartDate", "AllRows", "Fiscal Week Number"}, {"FiscalFirstDay", "FWStartDate", "AllRows", "Fiscal Week Number"}), 
      ExpandG1 = Table.ExpandTableColumn( ExpandG2, "AllRows", {"DateFW"}, {"DateFW"} )[[DateFW], [Fiscal Week Number]],
      MergeFYW = Table.Join( InsertFFD, {"Date"}, ExpandG1, {"DateFW"}, JoinKind.LeftOuter, JoinAlgorithm.SortMerge ),
      FWlogic = List.Contains( {null}, FYStartMonthNum),
      UpdateFYWeek = if FWlogic then Table.ReplaceValue(MergeFYW, each [Fiscal Week Number], each if FYStartMonth =1 then [Week Number] else [Fiscal Week Number], Replacer.ReplaceValue, {"Fiscal Week Number"}) else MergeFYW,
      AddFYW = Table.AddColumn( UpdateFYWeek, "Fiscal Week", each if FWlogic then "F" &amp; [#"Week &amp; Year"] else if FYStartMonth =1 then "FW" &amp; Text.PadStart( Text.From([Fiscal Week Number]), 2, "0") &amp; Date.ToText([Date], " yyyy") else if Date.Month([Date]) &lt; FYStartMonth then "FW" &amp; Text.PadStart( Text.From([Fiscal Week Number]), 2, "0") &amp; Date.ToText([Date], " yyyy") else "FW" &amp; Text.PadStart(Text.From([Fiscal Week Number]), 2, "0") &amp; " " &amp; Text.From( Date.Year([Date])+1), type text),
      InsertFWeeknYear = Table.AddColumn(AddFYW, "FWeeknYear", each if FWlogic then [WeeknYear] else (if FYStartMonth =1 then Date.Year([Date]) else if Date.Month([Date]) &lt; FYStartMonth then Date.Year([Date]) else Date.Year([Date])+1) * 100 + [Fiscal Week Number],  Int64.Type),
      
      CurrentDateRecord = Table.SelectRows(InsertFWeeknYear, each ([Date] = CurrentDate)),
      CurrentISOyear = CurrentDateRecord{0}[ISO Year],
      CurrentISOqtr = CurrentDateRecord{0}[ISO Quarter Number],
      CurrentYear = CurrentDateRecord{0}[Year],
      CurrentMonth = CurrentDateRecord{0}[Month],
      CurrentFiscalFirstDay = CurrentDateRecord{0}[FiscalFirstDay],
      PrevFiscalFirstDay = Date.AddYears(CurrentFiscalFirstDay, -1),
      CurrentFY = CurrentDateRecord{0}[Fiscal Year],
      CurrentFQ = CurrentDateRecord{0}[FQuarternYear],
      CurrentFP = CurrentDateRecord{0}[FPeriodnYear],
      CurrentFW = CurrentDateRecord{0}[FWeeknYear],

      InsertISOYrOffset = Table.AddColumn(InsertFWeeknYear, "ISO CurrYearOffset", each [ISO Year] - CurrentISOyear, type number),
      InsertISOQtrOffset = Table.AddColumn(InsertISOYrOffset, "ISO CurrQuarterOffset", each ((4 * [ISO Year]) +  [ISO Quarter Number]) - ((4 * CurrentISOyear) + CurrentISOqtr), type number),
      InsertFYoffset = Table.AddColumn(InsertISOQtrOffset, "Fiscal CurrYearOffset", each try (if [Month] &gt;= FYStartMonth then [Year]+1 else [Year]) - (if CurrentMonth &gt;= FYStartMonth then CurrentYear+1 else CurrentYear) otherwise null, type number),
      InsertCurrentFY = Table.AddColumn(InsertFYoffset, "IsCurrentFY", each if [Fiscal Year] = CurrentFY then true else false, type logical),
      InsertCurrentFQ = Table.AddColumn(InsertCurrentFY, "IsCurrentFQ", each if [FQuarternYear] = CurrentFQ then true else false, type logical),
      InsertCurrentFP = Table.AddColumn(InsertCurrentFQ, "IsCurrentFP", each if [FPeriodnYear] = CurrentFP then true else false, type logical),
      InsertCurrentFW = Table.AddColumn(InsertCurrentFP, "IsCurrentFW", each if [FWeeknYear] = InsertISOYrOffset then true else false, type logical),
      InsertPYTD = Table.AddColumn(InsertCurrentFW, "IsPYTD", each if CurrentYear-1 = [Year] and [Day of Year] &lt;= CurrentDateRecord{0}[Day of Year] then true else false, type logical),
        ListPrevFYDates = List.Buffer( Table.SelectRows( Table.ExpandTableColumn( Table.NestedJoin(
            Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( PrevFiscalFirstDay, Number.From(CurrentFiscalFirstDay-PrevFiscalFirstDay),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{"Column1", type date}}), {{"Column1", "DateFY"}}), "Index", 1, 1), {"Index"}, 
            Table.AddIndexColumn( Table.RenameColumns( Table.TransformColumnTypes( Table.FromList( List.Dates( Date.AddYears( PrevFiscalFirstDay, -1), Number.From( PrevFiscalFirstDay - Date.AddYears( PrevFiscalFirstDay, -1)),#duration(1,0,0,0)), Splitter.SplitByNothing()),{{"Column1", type date}}), {{"Column1", "DateFY"}}), "Index", 1, 1)
            , {"Index"}, "Table", JoinKind.LeftOuter), "Table", {"DateFY"}, {"PrevDateFY"}), each [DateFY] &lt;= CurrentDate)[PrevDateFY] ),
      InsertPFYTD = Table.AddColumn(InsertPYTD, "IsPFYTD", each if [Fiscal CurrYearOffset] = -1 and List.Contains(ListPrevFYDates, [Date] ) then true else false, type logical),
      InsertNetWorkdays = if AddRelativeNetWorkdays = true then Table.AddColumn(InsertPFYTD, "Relative Networkdays", each fxNETWORKDAYS( StartDate, [Date], Holidays ), type number ) else InsertPFYTD,
      fxNETWORKDAYS = (StartDate, EndDate, optional Holidays as list) =&gt;
        let
          ListOfDates = List.Dates( StartDate, Number.From(EndDate-StartDate)+1, Duration.From(1) ),
          DeleteHolidays = if Holidays = null then ListOfDates else List.Difference( ListOfDates, List.Transform(Holidays, Date.From )),
          DeleteWeekends = List.Select( DeleteHolidays, each Date.DayOfWeek( _, Day.Monday) &lt; 5 ),
          CountDays = List.Count( DeleteWeekends)
        in
          CountDays,
      RemoveToday = Table.RemoveColumns( if EndDate &lt; CurrentDate then Table.SelectRows(InsertNetWorkdays, each ([Date] &lt;&gt; CurrentDate)) else InsertNetWorkdays, {"Day of Year", "FiscalFirstDay"}), 
      ChType = Table.TransformColumnTypes(RemoveToday,{{"Year", Int64.Type}, {"Quarter Number", Int64.Type}, {"Month", Int64.Type}, {"Day of Month", Int64.Type}, {"DateInt", Int64.Type}, {"Day of Week Number", Int64.Type}, {"ISO CurrYearOffset", Int64.Type}, {"ISO QuarternYear", Int64.Type}, {"ISO CurrQuarterOffset", Int64.Type}, {"Week Number", Int64.Type}, {"WeeknYear", Int64.Type}, {"MonthnYear", Int64.Type}, {"QuarternYear", Int64.Type}, {"FQuarternYear", Int64.Type}, {"Fiscal Period Number", Int64.Type}, {"FPeriodnYear", Int64.Type}, {"CurrWeekOffset", Int64.Type}, {"CurrMonthOffset", Int64.Type}, {"CurrQuarterOffset", Int64.Type}, {"CurrYearOffset", Int64.Type}, {"Fiscal CurrYearOffset", Int64.Type}, {"Fiscal Week Number", Int64.Type}}),
      ReorderCols = Table.ReorderColumns(ChType,{"Date", "Year", "CurrYearOffset", "YearCompleted", "Quarter Number", "Quarter", "Start of Quarter", "End of Quarter", "Quarter &amp; Year", "QuarternYear", "CurrQuarterOffset", "QuarterCompleted", "Month", "Start of Month", "End of Month", "Month &amp; Year", "MonthnYear", "CurrMonthOffset", "MonthCompleted", "Month Name", "Month Short", "Month Initial", "Day of Month", "Week Number", "Start of Week", "End of Week", "Week &amp; Year", "WeeknYear", "CurrWeekOffset", "WeekCompleted", "Day of Week Number", "Day of Week Name", "Day of Week Initial", "DateInt", "CurrDayOffset", "IsAfterToday", "IsWeekDay", "IsHoliday", "IsBusinessDay", "Day Type", "ISO Year", "ISO CurrYearOffset", "ISO Quarter Number", "ISO Quarter", "ISO Quarter &amp; Year", "ISO QuarternYear", "ISO CurrQuarterOffset", "Fiscal Year", "Fiscal CurrYearOffset", "Fiscal Quarter", "FQuarternYear", "Fiscal Period Number", "Fiscal Period", "FPeriodnYear", "DateFW", "Fiscal Week Number", "Fiscal Week", "FWeeknYear", "IsCurrentFY", "IsCurrentFQ", "IsCurrentFP", "IsCurrentFW", "IsPYTD", "IsPFYTD"}),
      ListCols = if FWlogic then Table.RemoveColumns(ReorderCols,{"ISO Quarter Number", "Fiscal Year", "Fiscal Quarter", "FQuarternYear", "Fiscal Period Number", "Fiscal Period", "FPeriodnYear", "DateFW", "Fiscal Week Number", "Fiscal Week", "FWeeknYear", "Fiscal CurrYearOffset", "IsCurrentFQ", "IsCurrentFP", "IsCurrentFW"}) else Table.RemoveColumns(ReorderCols,{"Fiscal Period Number", "DateFW", "Fiscal Week Number", "ISO Quarter Number"})
  in
      ListCols,
      Documentation = [
      Documentation.Name =  " fxCalendar", 
      Documentation.Description = " Date table function to create an ISO-8601 calendar", 
      Documentation.LongDescription = " Date table function to create an ISO-8601 calendar", 
      Documentation.Category = " Table", 
      Documentation.Version = " 2.01: full code review",
      Documentation.Source = " local", 
      Documentation.Author = " Melissa de Korte", 
      Documentation.Examples = { [Description =  " See: https://forum.enterprisedna.co/t/extended-date-table-power-query-m-function/6390", 
        Code = " Optional paramters: #(lf)
        (FYStartMonthNum) Month number the fiscal year starts, Januari if omitted #(lf) 
        (Holidays) Select a query (and column) that contains a list of holiday dates #(lf) 
        (WDStartNum) Switch default weekday numbering from 0-6 to 1-7 by entering a 1 #(lf)
        (AddRelativeNetWorkdays) if true adds a Relative Networkdays column to the date table #(lf)
        #(lf)
        Important to note: #(lf)
        [Fiscal Week] starts on a Monday and can contain less than 7 days in a First- and/or Last Week of a FY #(lf)
        [IsWeekDay] does not take holiday dates into account  #(lf)
        [IsBusinessDay] does take optional holiday dates into account  #(lf)
        [IsPYTD] and [IsPFYTD] compare Previous [Day of Year] with the Current [Day of Year] number, so dates don't align in leap years #(lf)
        IMPORTANT! No Fiscal columns will be added if the (FYStartMonthNum) is omitted", 
        Result = " " ] }
      ]
  in 
  Value.ReplaceType( fnDateTable, Value.ReplaceMetadata( Value.Type( fnDateTable ), Documentation ))</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_Dates</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>01__02_DateTable_AdvancedEditor_code</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_Dates</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>01__02_DateTable_AdvancedEditor_code</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01__02_DateTable_AdvancedEditory_code


'Create a new blank query and copy/paste this into the Advanced Editor
'Rename the query: DateTable

============================================================================================
let
    Source = fn_createDateTable(StartDATE, Date.From(DateTime.LocalNow())),
    #"Changed Type" = Table.TransformColumntypes(Source,{{"Date", type date}, {"Year", Int64.Type}, {"Month Number", Int64.Type}}),
    #"Added YYYYMMDD" = Table.AddColumn(#"Changed Type", "YYYYMMDD", each ([Year] * 10000) + ([Month Number] * 100) + Date.Day([Date])),
    #"Added DateOfMonth" = Table.AddColumn(#"Added YYYYMMDD", "DateOfMonth", each Date.Day([Date])),
    #"Reordered Columns" = Table.ReorderColumns(#"Added DateOfMonth",{"Date", "Year", "Quarter", "Month Number", "Week of Year Number", "DateOfMonth", "YYYYMMDD", "Month", "Day of Week"}),
    #"Added isPreviousWeek" = Table.AddColumn(#"Reordered Columns", "IsPreviousWeek", each Number.From(Date.IsInPreviousNWeeks([Date], 1)) ),
    #"Added isMTD" = Table.AddColumn(#"Added isPreviousWeek", "isMTD", each (  Date.IsInCurrentMonth([Date])   and Date.From([Date]) &lt;  Date.From(DateTime.LocalNow())  )   ),
    #"Added WeekOfMonthNumber" = Table.AddColumn(#"Added isMTD", "WeekOfMonthNumber", each Date.WeekOfMonth([Date])),
    #"Renamed Columns" = Table.RenameColumns(#"Added WeekOfMonthNumber",{{"Month", "MonthName"}, {"Day of Week", "DayOfWeekName"}}),
    SameWeekOfMonth_as_LastWeek = Table.AddColumn(#"Renamed Columns", "SameWeekOfMonth_as_LastWeek", each Number.From(
								Value.Equals(
                                                                    		[WeekOfMonthNumber]
                                                                    		,
                                                                   		 Date.WeekOfMonth(Date.From(DateTime.LocalNow())) - 1
								  	   ) 
												         )
                                                                  
		  ),
    #"Added isLastMonth" = Table.AddColumn(SameWeekOfMonth_as_LastWeek, "isLastMonth", each Number.From(Date.IsInPreviousMonth ([Date]) )),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added isLastMonth",{{"SameWeekOfMonth_as_LastWeek", Int64.Type}, {"isLastMonth", Int64.Type}}),
    #"Added isPreviousWeekOfLastMonth" = Table.AddColumn(#"Changed Type1", "isPreviousWeekOfLastMonth", each ([isLastMonth] = 1) and ([SameWeekOfMonth_as_LastWeek]=1)),
    #"Changed Type2" = Table.TransformColumnTypes(#"Added isPreviousWeekOfLastMonth",{{"DateOfMonth", Int64.Type}, {"YYYYMMDD", Int64.Type}, {"IsPreviousWeek", Int64.Type}, {"WeekOfMonthNumber", Int64.Type}}),
    #"Added MTD_aMonthAgo" = Table.AddColumn(#"Changed Type2", "Custom", each [Month Number] = Number.From(Date.Month(Date.From(DateTime.LocalNow())))-1
 and
 [DateOfMonth] &lt; Date.Day(DateTime.LocalNow()))
in
    #"Added MTD_aMonthAgo"
=============================================================================================
'You get this error
Expression.Error: The name 'Table.TransformColumntypes' wasn't recognized.  Make sure it's spelled correctly.

'Remove everything from that line down, save the query,

'ie. from this line down:
    #"Changed Type" = Table.TransformColumntypes(Source,{{"Date", type date}, {"Year", Int64.Type}, {"Month Number", Int64.Type}}),


'Leave it like this in Advanced editory

= let
    Source = fn_createDateTable(StartDATE, Date.From(DateTime.LocalNow()))
 
in
    Source
    
 ' save the query,
 
 'then go back and change the data types for those 3 columns
 
 
'Close and Apply, then back to Query Editor

'add a comma im, and copy/paste the code from right after that line</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_Dates</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>DataTable_DevinKnight_Modifications</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_Dates</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>DataTable_DevinKnight_Modifications</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>To get YYYYMMDD from Kevin Knight

Once the table is created by Kevin Knight's function
Then add custom columns to create new fields in the Power Query Editor:

Here is the Advanced Editor script:
====================================
let
    Source = orig_Fn_createDateTable(StartDate, Date.From(DateTime.LocalNow())),
    #"Changed Type" = Table.TransformColumntypes(Source,{{"Date", type date}, {"Year", Int64.Type}, {"Week of Year Number", Int64.Type}, {"Month Number", Int64.Type}}),
    #"Added YYYYMMDD" = Table.AddColumn(#"Changed Type", "YYYYMMDD", each ([Year] * 10000) + ([Month Number] * 100) + Date.Day([Date])),
    #"Added DateOfMonth" = Table.AddColumn(#"Added YYYYMMDD", "DateOfMonth", each Date.Day([Date])),
    #"Reordered Columns" = Table.ReorderColumns(#"Added DateOfMonth",{"Date", "Year", "Quarter", "Month Number", "Week of Year Number", "DateOfMonth", "YYYYMMDD", "Month", "Day of Week"}),
    #"Added isPreviousWeek" = Table.AddColumn(#"Reordered Columns", "IsPreviousWeek", each Number.From(Date.IsInPreviousNWeeks([Date], 1)) ),
    #"Added isMTD" = Table.AddColumn(#"Added isPreviousWeek", "isMTD", each (  Date.IsInCurrentMonth([Date])   and Date.From([Date]) &lt;  Date.From(DateTime.LocalNow())  )   ),
    #"Added WeekOfMonthNumber" = Table.AddColumn(#"Added isMTD", "WeekOfMonthNumber", each Date.WeekOfMonth([Date])),
    #"Renamed Columns" = Table.RenameColumns(#"Added WeekOfMonthNumber",{{"Month", "MonthName"}, {"Day of Week", "DayOfWeekName"}}),
    SameWeekOfMonth_as_LastWeek = Table.AddColumn(#"Renamed Columns", "SameWeekOfMonth_as_LastWeek", each Number.From(
								Value.Equals(
                                                                    		[WeekOfMonthNumber]
                                                                    		,
                                                                   		 Date.WeekOfMonth(Date.From(DateTime.LocalNow())) - 1
								  	   ) 
												         )
                                                                  
		  ),
    #"Added isLastMonth" = Table.AddColumn(SameWeekOfMonth_as_LastWeek, "isLastMonth", each Number.From(Date.IsInPreviousMonth ([Date]) )),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added isLastMonth",{{"SameWeekOfMonth_as_LastWeek", Int64.Type}, {"isLastMonth", Int64.Type}}),
    #"Added isPreviousWeekOfLastMonth" = Table.AddColumn(#"Changed Type1", "isPreviousWeekOfLastMonth", each ([isLastMonth] = 1) and ([SameWeekOfMonth_as_LastWeek]=1)),
    #"Changed Type2" = Table.TransformColumnTypes(#"Added isPreviousWeekOfLastMonth",{{"DateOfMonth", Int64.Type}, {"YYYYMMDD", Int64.Type}, {"IsPreviousWeek", Int64.Type}, {"WeekOfMonthNumber", Int64.Type}}),
    #"Added MTD_aMonthAgo" = Table.AddColumn(#"Changed Type2", "Custom", each [Month Number] = Number.From(Date.Month(Date.From(DateTime.LocalNow())))-1
 and
 [DateOfMonth] &lt; Date.Day(DateTime.LocalNow()))
in
    #"Added MTD_aMonthAgo"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_Dates</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>DateTable_DevinKnight_PARAMETER_for_StartDate</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_Dates</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>DateTable_DevinKnight_PARAMETER_for_StartDate</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Quick Alternative from Courtney:
= Table.SelectRows(FactApplication1, each Date.IsInPreviousNMonths([ApplicationDate], 12))
===============================================================================================




This example uses the dynamic Scaler Query value in the SOURCE step, so only the last 10 days of data is uploaded 


example get data from DimContract where [DateCreated] is greater than 10 days prior to Power BI report refresh date

A] Create a Query in the Query Editor, using [Tranform Data] to get the date 10 days prior to today

	A1) In Query Editor =&gt; right-click in Queries {Pane on left} =&gt; New Query =&gt; Blank Query
	
	A2] In the Query definition field at the top of the screen, under the ribbon =&gt; paste the following formula
	
		= Date.AddDays(Date.From(DateTime.LocalNow()),-10)
	
	A3] rename the Query "StartDate"
	
	close and apply, inorder to return to the Power BI home 

B]  Modify the First Parameter of Devin Knight's scrip

		
	B2] Get the M-code from the Advanced Editor, in the 'Query' secton, of the Home Tab of the ribbon of the Query Editor:
	
	
		let
		    Source = orig_Fn_createDateTable(#date(2021, 1, 1), #date(2021, 10, 19)),
		    #"Changed Type" = Table.TransformColumntypes(Source,{{"Date", type date}, {"Year", Int64.Type}, {"Week Number", Int64.Type}, {"Month Number", Int64.Type}}),
		    #"Added Custom" = Table.AddColumn(#"Changed Type", "YYYYMMDD", each ([Year] * 10000) + ([Month Number] * 100) + Date.Day([Date])),
		    #"Added Custom1" = Table.AddColumn(#"Added Custom", "DateOfMonth", each Date.Day([Date])),
		    #"Reordered Columns" = Table.ReorderColumns(#"Added Custom1",{"Date", "Year", "Quarter", "Month Number", "Week Number", "DateOfMonth", "YYYYMMDD", "Month", "Day of Week"})
		in
		    #"Reordered Columns"
		
	B3] Modify the M-code to use the Scaler Query value rather than the Hard-Coded date value as Start Date, and today as End date
	
		let
		    Source = orig_Fn_createDateTable(StartDate, Date.From(DateTime.LocalNow())),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Date", type date}, {"Year", Int64.Type}, {"Week Number", Int64.Type}, {"Month Number", Int64.Type}}),
		    #"Added Custom" = Table.AddColumn(#"Changed Type", "YYYYMMDD", each ([Year] * 10000) + ([Month Number] * 100) + Date.Day([Date])),
		    #"Added Custom1" = Table.AddColumn(#"Added Custom", "DateOfMonth", each Date.Day([Date])),
		    #"Reordered Columns" = Table.ReorderColumns(#"Added Custom1",{"Date", "Year", "Quarter", "Month Number", "Week Number", "DateOfMonth", "YYYYMMDD", "Month", "Day of Week"})
		in
		    #"Reordered Columns"
			    
Now when you refresh the data it will just get the data for the last 10 days	  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_PowerQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>about_M_PowerQuery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_PowerQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>about_M_PowerQuery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_M_PowerQuery

'Open a blank query in Query Editor, use this to see list functions available, and their definitions
= #shared


DAX formualas &lt;&gt; Power Query Formulas &lt;&gt; M Formula Language
'These are three seperate languages, but M Formula Language is specific to the Power Query Editor.
'M can contain: Variables, Expressions and Values

PowerQuery is a tool in Microsoft Applications, that uses M

Use M to clean your data
Use DAX to ask questions

DAX does not let you go back to previous steps, but M/Power Query does

M language classifies lists, records and tables as structured values

Powerquery is used when creating Custom Columns, in the Edit Query Window
That is: Power BI Data View =&gt; Edit Queries =&gt; {Select a query} =&gt; Add Column {top menu} =&gt; Custom Column {icon on ribbon}

You can also see the M Language for the 'Applied Steps' 
when you go to the Advanced Editor:
 Power BI Data View =&gt; Edit Queries =&gt; {Select a query} =&gt; Home {top menu} 
 	=&gt; Query {section of ribbon} =&gt; Advanced Editor

References
-------------
List of M functions

https://docs.microsoft.com/en-us/powerquery-m/power-query-m-function-reference

https://docs.microsoft.com/en-us/powerquery-m/power-query-m-reference

Good Tutorial
==================
https://www.youtube.com/playlist?list=PL2Wq16IU3XbmLZrb68YTFTamQnaFzZu-d



External Tools
-----------------
https://www.oliviertravers.com/power-bi-third-party-tools-development-addons/



 M Queries In Visual Studio
 --------------------------
 https://blog.crossjoin.co.uk/2018/02/12/running-m-queries-in-visual-studio-with-the-power-query-sdk/
 
 can get the Power Query SDK for VS:
 https://marketplace.visualstudio.com/items?itemName=Dakahn.PowerQuerySDK</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_PowerQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>about_M_vs_DAX</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_PowerQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>about_M_vs_DAX</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


Query Editor  =&gt; M
	a) Report View =&gt; Home {Ribbon Tab} =&gt; Transform Data =&gt; Select the query on left side =&gt; Transform {tab} OR Add Column {tab}
	b) Data Review =&gt; Home {Ribbon Tab} =&gt; Transform Data =&gt; Select the query on left side =&gt; Transform {tab} OR Add Column {tab}
	c) Model View =&gt; Home {Ribbon Tab} =&gt; Transform Data  =&gt; Select the query on left side =&gt; Transform {tab} OR Add Column {tab}
	
: DAX
	a) Report View =&gt; Right Click on a Table in the Fields {Pane, on Right side} =&gt; Either: New Measure OR New Column
	b) Data Review =&gt; Right Click on a Table in the Fields {Pane, on Right side} =&gt; Either: New Measure OR New Column
	c) Model View =&gt; 

NOTE: 
======
Report Parameters use DAX
Measures use DAX

DAX formualas &lt;&gt; Power Query Formulas &lt;&gt; M Formula Language
'These are three seperate languages, but M Formula Language is specific to the Power Query Editor.
'M can contain: Variables, Expressions and Values


For small models use which ever you prefer: DAX or Power Query (i.e. Query Editor)

PowerQuery is a tool in Microsoft Applications, that uses M

Use M to clean your data
Use DAX to ask questions

DAX does not let you go back to previous steps, but M/Power Query does


Powerquery (M) is used when creating Custom Columns, in the Edit Query Window
That is: Power BI Data View =&gt; Edit Queries =&gt; {Select a query} =&gt; Add Column {top menu} =&gt; Custom Column {icon on ribbon}
In new version: Relationship View =&gt; Home Ribbon =&gt; Transform Data =&gt; Power Query Editor


DAX is used in the DATA view, select a table in the Fields pane (on the right)
	Add a column (I think by rigt clicking on the table =&gt; New Column
	
Advantage of DAX
==================
- Fast to create a column, vs Power Query has to 'Apply Query Changes'
	Power query has to pull the data from the Data Source and re-apply all the steps	
	
Calculated Columns
===================
Power Query is preferred over DAX (uses veripack and can be anywhere):
https://www.youtube.com/watch?v=oqcWZXx70qs
	- columns created in M are more efficiently stored and smaller than those created in DAX
	- Refresh time is longer in DAX, b/c it is 2 steps, vs 1 step for M
	- MOST efficient is calculated columns in the Source
	- The user interface will write most of your M, so it is not hard to learn.
		
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_PowerQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>LIST_object</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_PowerQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>LIST_object</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>List Object = ordered sequence of values 
M language classifies lists, records and tables as structured values
List objects use Curly braces


To create a simple List
=================================================================================
Home =&gt; Get Data =&gt; Blank Query

		= {2,5,"a","c"}
		
		
To create a list from 1 to 365
-------------------------
Home =&gt; Get Data =&gt; Blank Query
		
		= {1..365}
		= {1,3,5..365}	&lt;== This creates a list from 1 to 365, but with just odd numbers 		
		
To create a list of single characters
-------------------------
Home =&gt; Get Data =&gt; Blank Query		
				
		= Text.ToList("hello world")
		
To create a list of dates from today to 10 days from now
-------------------------
Home =&gt; Get Data =&gt; Blank Query			
		'List.Dates(start,count,steps)
		= List.Dates(DateTime.Date(DateTime.FixedLocalNow()),10,#duration(1,0,0,0))
		
'DateTime.Date = gets the DATE for Now()
'Duration Function, for 1 day: #duration(1,0,0,0)
'		#duration(days as number, hours as number, minutes as number, seconds as number) as duration


To create a LIST object by referencing a column in a table
============================================================
1] via a Table name
   ---------------------------------------------------------------
   to get a list from query:
   create a blank query and reference the
   	a) query name:
   		"Population by Zip Code"
   	b) the column name in the query:
   		[Zip Code]
   		
   	Like this:
   = #"Population by Zip Code"[Zip Code]

2] via a query step name {using a Short cut to get the M-code}
   ---------------------------------------------------------------
	- Starting from an existing query 
	=&gt; select a column (e.g. ZipCode column where the last step of query is named "Changed Type") 
	=&gt; {right-click} =&gt; {select from right click menu:} Drill Down 
	=&gt; {it opens a new step in the query, and in the address bar we see: "= #"Changed type"[Zip Code]"}
		{note this is the previous step of the query, and the name of the column}
	{NOTE: that code is a quick short cut to the 'list' by referencing the 'step' and the 'column'}
	
	
	SO, if you create a blank query, and then put in this M-code, you get a LIST object 
		= #"Changed Type"[Zip Code]
		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_PowerQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>M_Syntax</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_PowerQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>M_Syntax</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>let 
	variablename = expression
	value1 = 3
	#"Variable name" = expression2
in 
	Variablename

'e.g. of M function syntax:

'Because the step order matters, many of the expressions that transform the query reference a previous query step 
'but cannot reference a future step. 
' M separates applied steps by mandatory commas but also optional line breaks that make it easier to read. 
		
' The last line of code, or the step, will not have a comma after it as we see in line four. 
' By referencing the last step after the in statement, this last step is the output the query returns in line six. 
 'M is case-sensitive. We can write out variables as strings without quotations in lines two and three, 
' 	but if we want to name variables with spaces, 
' 	we need to start off with the pound sign
' 	and then put the variable in quotations as we see in line four. 
' Columnar field names do not need punctuation around them regardless of whether or not they have spaces.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_PowerQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>RECORD_examples</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_PowerQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>RECORD_examples</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Create a single column record in a Blank Query
= [employeeID = 1]

'Create multiple column record in a blank query
= [employeeID = 1, Name = "Test", Grade="Consultant"]

'Create a List consisting of a single row, where the row contains a 'record', from a multicolumn record
= {[employeeID = 1, Name = "Test", Grade="Consultant"]}

'Create a List consisting of a 2 row,s where the row contains a 'record', from a multicolumn record
={[employeeID = 1, Name = "Test", Grade="Consultant"],[employeeID = 2, Name = "Test2", Grade="Manager"]}

'To convert the List of records, previous step, into a table of records, with 1 column. 
'	and each row  of the table contains a 'Record' object, and the record object holds multiple 'fields'
1] Select the last step (i.e. the Source step) =&gt; Transform {tab} =&gt; To Table {icon on ribbon}

===============================================
'To access a specific record (i.e. row of a table)
1] Add a new step: click the Fx button =&gt; this puts the variable name of the last step in the equation bar (e.g. #"What Ever"
2] add a curly brackets with the zero based id of the row, e.g. row 11 =&gt; 10
	= #"What Ever"{10}
	
3] To get a value from a specific field (e.g. [Quarter], of that row, put the field name in square Brackets
	= #"What Ever"{10}[Quarter]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_Query_and_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Simple_example_of_a_Query</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_Query_and_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Simple_example_of_a_Query</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Each subsequent line of the code uses the variable from the previous line
'A variable with spaces in it's name must be enclosed in double qoutes, preceded by Hash (#)
'Use a let=&gt;in to bracket the code
'Then call the last variable created in the code after the 'in' 



'In Power Query Editor =&gt; create a blank Query =&gt; get the default code from the Advanced Editor:

let
    Source = ""
in
    Source
    
'================edit it:

let
    //create a variable, end the statement with a comma
    X = 1,
    Y=X+12
in
    Y
    
'================OUTPUT
 13</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>add_alias_and_scriptBloc_to_an_Object</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>add_alias_and_scriptBloc_to_an_Object</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#' see Demo 2 (i.e. Create_Object_adding_one_Member_at_time  )

#'This adds a script, as a property, to the object

#' Demo 3 -- Add alias for one of the properties
#'-----------------------------------------------------------------------------#'
Clear-Host
Add-Member -InputObject $myObject `
           -MemberType AliasProperty `                #' &lt;=== This is an alias for a previously created property
           -Name 'Description' `					  #' So the value in the 'Name' property (i.e. "Description") 
           -Value 'Comment' `						  #'	will reference the property named in the 'Value' property (i.e. "Comment)
           -PassThru                                  #' This will let you use it in later piped step
"Comment......: $($myObject.Comment)"				  #' &lt;==== So you can use either 'Comment' or 'Description' and it will return the same value
"Description..: $($myObject.Description)"



#' Demo 3 -- Add script block to object
#'  where '$this' refers to the current instance of your object
Clear-Host
$block = { 
           $fqn = $this.Schema + '.' + $this.Table 				#'&lt;=== fqn stands for Fully Qualified Name
           return $fqn
         }

Add-Member -InputObject $myObject `
           -MemberType ScriptMethod `					#' b/c we are adding a 'script'
           -Name 'FullyQualifiedName' `
           -Value $block `								#' Here we are adding the block that was populated above
           -PassThru

#' Parenthesis are very important, without it will just display the function properties and some info, but WITH the parenthesis it EXECUTES the function
$myObject.FullyQualifiedName()  
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Crreate_Object_adding_one_Member_at_time</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Crreate_Object_adding_one_Member_at_time</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'-----------------------------------------------------------------------------#'
#' Demo 2 -- Create a new object by adding properties one at a time (to SINGLE or MULTIPLE objects)
#' In the previous demo a property hash table was used to generate the object
#' Behind the scenes it does the equivalent of what this function does
#'-----------------------------------------------------------------------------#'
function Create-Object ($Schema, $Table, $Comment)
{
  #' Start by creating an EMPTY generic object of type PSObject
  $object = New-Object –TypeName psobject     

  #' SIMPLE syntac
  #' {as an Argument to a method (i.e. Add-Member) , this works for creation of ONE object}
  #' after creating it, then add the FIRST Member
  #' Add-Member by passing in input object 
  Add-Member -InputObject $object `
             –MemberType NoteProperty `			#'&lt;=== This is generic property
             –Name Schema `						#'&lt;=== this is the name of the property
             –Value $Schema						#'&lt;=== This is the value of the property


  #' ALTERNATE syntax, pipe the object as an input to Add-Member 
  #' {Pipe the object as input into the Method, could work for a COLLECTION of objects}
  #' Thus you could add a property to ALL the members of a collection  
  #' NOTE that with this syntax, 'object' could itself be a collection of objects
  #
  $object | Add-Member –MemberType NoteProperty `
                       –Name Table `
                       –Value $Table

  #' SECOND Member
  $object | Add-Member -MemberType NoteProperty `
                       -Name Comment `
                       -Value $Comment

  return $object
}

#'USAGE:

#'Create a new object
$myObject = Create-Object -Schema "MySchema" -Table "MyTable" -Comment "MyComment"
$myObject							 #' &lt;=== This will echo back the three properties, and their values

#' Display in text. Note because it is an object need to wrap in $() to access a property
"My Schema = $($myObject.Schema)"

$myObject.Schema = "New Schema"      #'&lt;=== update the property w/ a new value
$myObject.Comment = "New Comment"    #'&lt;=== update the property w/ a new value
$myObject							 #' &lt;=== This will echo back the three properties, and their values</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Default_Properties</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Default_Properties</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>I am not sure exactly what the "Default" properties does, except make it harder to see all the properties
See the last two lines, for what you now have to do to see ALL properties


#'-----------------------------------------------------------------------------#'
#' Demo 6 -- Set default properties
#' Thus display just the most important properties, when you type just the object.
#'-----------------------------------------------------------------------------#'
Clear-Host

#' When just running the object, it displays all properties
$myObject

#' If you have a lot, this can get overwhelming. Instead you can define a
#' default set to display.

#' Define the property names in an ARRAY.
$defaultProperties = 'Schema', 'Table', 'Comment', 'Author'

#' Create a PROPERTY SET object, 
#'   using 'New-Object'and 'PSPropertySet', 
#'   and pass in the array 
$defaultPropertiesSet `
  = New-Object System.Management.Automation.PSPropertySet(`
      ‘DefaultDisplayPropertySet’ `                            #' &lt;===  This is the type we want to create, so it is the 1st Parm.
      ,[string[]]$defaultProperties `                          #' &lt;===  Here you give it the object holding the array
      )

#' Create a PS Member Info object from the previous property set object
$members `
  = [System.Management.Automation.PSMemberInfo[]]@($defaultPropertiesSet)    #' &lt;===  Here you give it the set that was just created

#' Now add to the object
$myObject | Add-Member MemberSet PSStandardMembers $members            #' Now add a MemberSet of the type: PSStandardMembers

#' Now the object will just display the default list in standard output
$myObject

#' Little easier to read in a list
$myObject | Format-List

#' To display ALL PROPERTIES, pipe through format-list with wild card for property
$myObject | Format-List -Property *
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_info</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Login__get_LoginInstancesFunction</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_info</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Login__get_LoginInstancesFunction</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USAGE:

&gt;Get-LoginInstance -ComputerName "LT-103111" -StartDate (Get-Date).AddDays(-1) -Verbose  | SELECT UserName, LoginTime, SessionType, LoginIpAddress



'Get-LoginInstance - Retrieve Local and Remote Computer Login/Logout Instances
https://gallery.technet.microsoft.com/scriptcenter/Get-LoginInstance-Retrieve-6437b1af

#'This script contains a function (Get-LoginInstance), 
#'    as well as two sub-functions (Get-LoginData and Get-LogoutData), 
#'    which are used to retrieve login and logout events from the Security event log on a local or remote computer, 
#'    and join them together to display login instance data.  
#'    Please use the native help bundled with the cmdlet for more information on ways to utilize/run this function.
#'
#'Additionally, please note that this cmdlet is reliant upon Remote Event Log Management, 
#'    which may need to be enabled on the target machine(s), 
#'    and due to its use of Get-WinEvent, can only work on Vista, 
#'    Server 2008 R2 and later Windows releases for consumer and enterprise markets, respectively.
#'
#'UPDATE - 10/23/14: I've revised the cmdlet to fix a few different areas - 
#'                    please download the latest version of this if you have a previous version of the script.  
#'                    Changes made to the latest version include:
#'
#'New sorting algorithm to ensure all login instances 
#'        (logins and logouts) and logins without corresponding logouts 
#'        appear in final collection, regardless of OS, account domain, etc.
#'Official support of PowerShell versions 2, 3 and 4 - Get-LoginInstance has now been tested and confirmed to work in all of those versions
#'Remove Desktop Window Manager (DWM) logins from final collection if present
#'Minor help file tweaks
=================================================================================
    -------------------------- EXAMPLE 1 --------------------------
    
    PS C:\&gt;Get-LoginInstance
    
    Retrieve all available login instances from the local computer within 
    the past week.
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS C:\&gt;Get-LoginInstance -ComputerName "GSR-242" -StartDate (Get-Date).AddMonths(-1) -Verbose
    
    Retrieve all available login instances from remote computer "GSR-242" 
    within the past month, displaying verbose output as well.

=================================================================================

#PowerShell Script Containing Function(s) Used to Retrieve Login &amp; Logout Instances from a Local or Remote Computer
#Developer: Andrew Saraceni (saraceni@wharton.upenn.edu)
#Date: 10/23/14

function Get-LoginInstance
{
    &lt;#
    .SYNOPSIS
    Retrieves login and logout instances from a local or remote computer.
    .DESCRIPTION
    Retrieves all interactive and remote-based logins from a specific 
    computer, then obtains all logouts and joins the instances together 
    via processing.  This information is retrieved from the Security 
    event logs on the computer, and thus can only pull data from logs 
    that have yet to turn over.

    Without parameters, a Get-LoginInstance command retrieves all logins 
    and logouts from the local computer within the past week.
    .PARAMETER ComputerName
    Specifies the computer from which to pull the login/logout 
    information.  The default value for this is the local computer.
    .PARAMETER StartDate
    Specifies the earliest (i.e. oldest) date from which to retrieve 
    logins/logouts.  The default value for this is one week before the 
    current date: (Get-Date).AddDays(-7)
    .PARAMETER EndDate
    Specifies the most recent date from which to retrieve logins/logouts.  
    The default value for this is the current date.
    .EXAMPLE
    Get-LoginInstance
    Retrieve all available login instances from the local computer within 
    the past week.
    .EXAMPLE
    Get-LoginInstance -ComputerName "GSR-242" -StartDate (Get-Date).AddMonths(-1) -Verbose
    Retrieve all available login instances from remote computer "GSR-242" 
    within the past month, displaying verbose output as well.
    .NOTES
    This cmdlet makes use of the Get-WinEvent cmdlet, which is only 
    available on Windows Vista, Windows Server 2008 R2 and later consumer 
    and enterprise verisons of Windows, respectively.

    Additionally, Remote Event Log Management will need to be enabled 
    via your firewall.  The following CMD prompt command can enable this 
    on a local computer:

    netsh advfirewall firewall set rule group=”remote event log management” new enable=yes
    #&gt;
    
    [CmdletBinding()]
    param(
        [Parameter(Position=0,Mandatory=$false)]
        [String]$ComputerName = $env:COMPUTERNAME,
        [Parameter(Position=1,Mandatory=$false)]
        [DateTime]$StartDate = (Get-Date).AddDays(-7),
        [Parameter(Position=2,Mandatory=$false)]
        [DateTime]$EndDate = (Get-Date)
    )

    function Get-LoginData
    {
        param($ComputerName,$StartDate,$EndDate)
        
        Write-Verbose "Getting Login Data from $ComputerName..."
        [Int32[]]$loginID = @(4624)

        try
        {
            $loginEvents = Get-WinEvent -ComputerName $ComputerName -FilterHashtable @{ LogName="Security"; ID=$loginID; StartTime=$StartDate; EndTime=$EndDate } -ErrorAction Stop
        }
        catch
        {
            Set-Variable -Name catchError -Value $_
            if ($catchError -match "No events were found that match the specified selection criteria.")
            {
                Write-Warning "No Login Events Found - Ending Login Collection"
            }
        }

        Write-Verbose "Converting Logins to XML &amp; Parsing Data for Better Readability..."
        foreach ($loginEvent in $loginEvents)
        {
            $xmlLoginEvent = [Xml]$loginEvent.ToXml()

            for ($i=0; $i -lt $xmlLoginEvent.Event.EventData.Data.Count; $i++)
            {            
                Add-Member -InputObject $loginEvent -MemberType NoteProperty -Name $xmlLoginEvent.Event.EventData.Data[$i].Name -Value $xmlLoginEvent.Event.EventData.Data[$i]."#Text" -Force
            }
        }

        $revisedLoginEvents = @()
        $xmlLoginEvents = $loginEvents | Where-Object { (($_.LogonType -eq "2") -or ($_.LogonType -eq "10")) -and ($_.TargetDomainName -ne "Window Manager") } | Select-Object -Property *
        foreach ($xmlLoginEvent in $xmlLoginEvents)
        {
            switch ($xmlLoginEvent.LogonType)
            {
                "2" {
                    $xmlLoginEvent.LogonType = "Login-Interactive"
                }
                "10" {
                    $xmlLoginEvent.LogonType = "Login-Remote"
                }
            }
            
            if (($xmlLoginEvent.IpAddress -eq "127.0.0.1") -or ($xmlLoginEvent.IpAddress -eq "::1"))
            {
                $xmlLoginEvent.IpAddress = $null
            }

            if ($xmlLoginEvent.IpPort -eq "0")
            {
                $xmlLoginEvent.IpPort = $null
            }
            
            $revisedLoginEvents += $xmlLoginEvent
        }
        
        return $revisedLoginEvents
    }

    function Get-LogoutData
    {
        param($ComputerName,$StartDate,$EndDate)

        Write-Verbose "Getting Logout Data from $ComputerName..."
        [Int32[]]$logoutID = @(4647)

        try
        {
            $logoutEvents = Get-WinEvent -ComputerName $ComputerName -FilterHashtable @{ LogName="Security"; ID=$logoutID; StartTime=$startDate; EndTime=$endDate } -ErrorAction Stop
        }
        catch
        {
            Set-Variable -Name catchError -Value $_
            if ($catchError -match "No events were found that match the specified selection criteria.")
            {
                Write-Warning "No Logout Events Found - Ending Logout Collection"
            }
        }

        Write-Verbose "Converting Logouts to XML &amp; Parsing Data for Better Readability..."
        foreach ($logoutEvent in $logoutEvents)
        {
            $xmlLogoutEvent = [Xml]$logoutEvent.ToXml()

            for ($i=0; $i -lt $xmlLogoutEvent.Event.EventData.Data.Count; $i++)
            {            
                Add-Member -InputObject $logoutEvent -MemberType NoteProperty -Name $xmlLogoutEvent.Event.EventData.Data[$i].name -Value $xmlLogoutEvent.Event.EventData.Data[$i]."#Text" -Force
            }
        }
        
        $revisedLogoutEvents = @()
        $xmlLogoutEvents = $logoutEvents | Select-Object -Property *
        foreach ($xmlLogoutEvent in $xmlLogoutEvents)
        {
            Add-Member -InputObject $xmlLogoutEvent -MemberType NoteProperty -Name "WorkstationName" -Value $ComputerName -Force

            $revisedLogoutEvents += $xmlLogoutEvent
        }
        
        return $revisedLogoutEvents
    }

    $finalLoginEvents = Get-LoginData -ComputerName $ComputerName -StartDate $StartDate -EndDate $EndDate
    $finalLogoutEvents = Get-LogoutData -ComputerName $ComputerName -StartDate $StartDate -EndDate $EndDate

    Write-Verbose "Creating Final Collection of Revised Login and Logout Instance Data..."
    $loginInstances = @()

    foreach ($finalLoginEvent in $finalLoginEvents)
    {
        $instanceProperties = @{
            ComputerName = $finalLoginEvent.WorkstationName
            UserName = $finalLoginEvent.TargetUserName
            AccountDomain = $finalLoginEvent.TargetDomainName
            LoginTime = $finalLoginEvent.TimeCreated
            LogoutTime = $null
            TargetLogonID = $finalLoginEvent.TargetLogonID
            Days = $null
            Hours = $null
            Minutes = $null
            Seconds = $null
            SessionType = $finalLoginEvent.LogonType
            LoginIpAddress = $finalLoginEvent.IpAddress
            LoginIpPort = $finalLoginEvent.IpPort
            LogonGuid = $finalLoginEvent.LogonGuid
        }

        $loginInstance = New-Object -TypeName PSObject -Property $instanceProperties

        foreach ($finalLogoutEvent in $finalLogoutEvents)
        {
            if (($finalLogoutEvent.WorkstationName -eq $finalLoginEvent.WorkstationName) -and ($finalLogoutEvent.TargetUserName -eq $finalLoginEvent.TargetUserName) -and ($finalLogoutEvent.TargetLogonID -eq $finalLoginEvent.TargetLogonID))
            {
                $loginInstance.LogoutTime = $finalLogoutEvent.TimeCreated
                $loginInstance.Days = (New-TimeSpan -Start $finalLoginEvent.TimeCreated -End $finalLogoutEvent.TimeCreated).Days
                $loginInstance.Hours = (New-TimeSpan -Start $finalLoginEvent.TimeCreated -End $finalLogoutEvent.TimeCreated).Hours
                $loginInstance.Minutes = (New-TimeSpan -Start $finalLoginEvent.TimeCreated -End $finalLogoutEvent.TimeCreated).Minutes
                $loginInstance.Seconds = (New-TimeSpan -Start $finalLoginEvent.TimeCreated -End $finalLogoutEvent.TimeCreated).Seconds
            }
        }

        $loginInstances += $loginInstance
    }

    $fullLoginInstances = $loginInstances | Where-Object { $_.LogoutTime -ne $null }
    $partialLoginInstances = $loginInstances | Where-Object { $_.LogoutTime -eq $null } | Sort-Object -Property LoginTime -Descending -Unique

    $fullLoginInstanceLoginTimes = $fullLoginInstances | Select-Object -ExpandProperty LoginTime
    $filteredPartialLoginInstances = @()
    
    foreach ($partialLoginInstance in $partialLoginInstances)
    {
        if ($fullLoginInstanceLoginTimes -notcontains $partialLoginInstance.LoginTime)
        {
            $filteredPartialLoginInstances += $partialLoginInstance
        }
    }

    $finalLoginInstances = @($fullLoginInstances) + @($filteredPartialLoginInstances) | Sort-Object -Property LoginTime -Descending -Unique

    return $finalLoginInstances | Select-Object -Property ComputerName, UserName, AccountDomain, LoginTime, LogoutTime, TargetLogonID, Days, Hours, Minutes, Seconds, SessionType, LoginIpAddress, LoginIpPort, LogonGuid
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>gig_WorkingExamples_on_JPHSA-EBWEB2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>gig_WorkingExamples_on_JPHSA-EBWEB2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#' This works b/c logparser.exe is in the environmental path.
&gt; logparser.exe “SELECT Top 10 cs-uri-stem, Count(*) FROM C:\inetpub\logs\LogFiles\W3SVC1\u_ex170308.log Group By cs-uri-stem Order by cs-uri-stem desc” –i:w3c

#'This does all the log files in the folder:
logparser.exe “SELECT Top 10 cs-uri-stem, Count(*) FROM C:\inetpub\logs\LogFiles\W3SVC1\* Group By cs-uri-stem Order by cs-uri-stem desc” –i:w3c

&gt; logparser.exe “SELECT *  FROM C:\inetpub\logs\LogFiles\W3SVC1\u_ex170308.log” –i:w3c

#'These are the output fields from previous statement:
#'LogFilename
#'RowNumber
#'date
#'time
#'s-ip
#'cs-method
#'cs-uri-stem
#'cs-uri-query                          
#'s-port
#'cs-username
#'c-ip
#'cs(User-Agent)  

#'Get help on the web log format:
&gt;logparser -h -i:IISW3C

#'SELECT and create Table:
logparser.exe –i:w3c  -o:sql -server:WBSQL1\DEV  -database:JUNK -driver:"sql server" -clearTable:on -createTable:on  “SELECT * INTO LogsTable FROM C:\inetpub\logs\LogFiles\W3SVC1\u_ex170308.log”

#'SELECT  create Table with Identity field, and checkpoint named: MyCheckpoint (NOTE the inoput format is not the same)
#' but this clears the table
logparser.exe  –i:IISW3C   -iCheckpoint:Checkpoint_W3SVC1.lpc   -ignoreIdCols:on  -o:sql -server:WBSQL1\PROD  -database:d4_IIS_Logs -driver:"sql server" -clearTable:on -createTable:on “SELECT * INTO jnk3_T001_W3SVC1_JPHSA411 FROM C:\inetpub\logs\LogFiles\W3SVC1\*” 

======================
#' First to create the SQL table
logparser.exe  –i:IISW3C   -iCheckpoint:Checkpoint_W3SVC1_b.lpc   -ignoreIdCols:on  -o:sql -server:WBSQL1\PROD  -database:d4_IIS_Logs -driver:"sql server"  -createTable:on “SELECT * INTO jnk3_T001_W3SVC1_JPHSA411 FROM C:\inetpub\logs\LogFiles\W3SVC1\*” 
#' This should just add to the table, but was unable to test
logparser.exe  –i:IISW3C   -iCheckpoint:Checkpoint_W3SVC1_b.lpc   -ignoreIdCols:on  -o:sql -server:WBSQL1\PROD  -database:d4_IIS_Logs -driver:"sql server"   “SELECT * INTO jnk3_T001_W3SVC1_JPHSA411 FROM C:\inetpub\logs\LogFiles\W3SVC1\*” 
==========================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>LogParser =&gt; SQL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>LogParser =&gt; SQL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'This command asks Log Parser to filter out entries for pages 
#'	ending up in ".gif", ".jpg", and ".png", 
#'	regardless of the capitalization of the URL. 
#'	It also leaves out requests that generated the HTTP error code "404", 
#'	that is, "page not found".

#'Everything else is handed to the SQL output format, 
#'	which will save the records to the table specified in the INTO clause. 
#'	Also, this output format accepts a "database" parameter 
#'	that we can use to specify the name of the target database, 
#'	together with many other parameters that let us specify other properties of the connection 
#'	to the SQL database.

#'To do this, you could put the command above in a batch file, use the SCHTASKS.EXE utility to schedule the batch 
#'	file to run, say, every hour, and ' poof! ' you'd have an automated mechanism that periodically 
#'	uploads entries from your log files to your SQL database.
#'Note that every time you execute the command above, 
#'	Log Parser goes through all the log entries over and over, 
#'	uploading all of them multiple times to the database. 
#'	What we really need is a mechanism to say "only parse the log entries not parsed yet."
#'Here's where a new Log Parser 2.2 feature comes handy: the "incremental parsing" feature, 
#'	also know as "checkpointing."

Checkpoints
===========
#'Most Log Parser input formats support a parameter, called "iCheckpoint", 
#'	that tells the input format to save to a private data file (a "checkpoint" file) 
#'	the current state of all the files being parsed. 
#'	When you execute a query using a checkpoint file generated during a previous run, 
#'	the input format will only parse those portions of the input files that were not parsed before, that is, new entries only.


logparser "SELECT * INTO LogsTable FROM ex*.log WHERE TO_LOWERCASE (EXTRACT_EXTENSION(cs-uri-stem)) NOT IN ('gif';'jpg';'png') AND sc-status &lt;&gt; 404" -i:IISW3C -o:SQL -database:LogsDatabase

#'So, all you need to do is specify the name of a checkpoint file with the "iCheckpoint" parameter, as follows:

&gt;logparser "SELECT * INTO LogsTable FROM ex*.log WHERE TO_LOWERCASE (EXTRACT_EXTENSION(cs-uri-stem)) NOT IN ('gif';'jpg';'png') AND sc-status &lt;&gt; 404" -i:IISW3C -o:SQL -database:LogsDatabase -iCheckpoint:MyCheckpoint.lpc

#'The very first time you execute this command, 
#'	the "MyCheckpoint.lpc" file does not exist, 
#'	and the IISW3C input format parses all the entries in all the log files, 
#'	filtering and uploading the resulting data to the database. 
#'After parsing all the logs, the IISW3C input format saves the current size of each log file to the "MyCheckpoint.lpc" file.
#'When you execute the same command at a later time, 
#'	the IISW3C input format will load the checkpoint file 
#'	and will parse the logs starting at the position where they were left in the previous run, 
#'	thus processing, filtering, and uploading new log entries only. 
#'When completed, it will update the checkpoint file with the new size of the log files, 
#'	and the cycle repeats itself continually.


#'	-o:sql
#'	-database:AdventureWorks2012
#'	-server:localhost\sqlsrv2012
#'	-driver:"sql server"
#'	SELECT...into ScmEvents  {the SQL table}
&gt; logparser -i:evt -resolveSIDs:on -o:sql -server:localhost\sqlsrv2012  -database:AdventureWorks2012 -driver:"sql server" "select extract_token(EventTypeName, 0, ' ') as TypeEvent,  to_date(TimeGenerated) as DateGenerated, SID as SecurityID into ScmEvents from system where SourceName = 'Service  Control Manager' and SID is not null"

'Delete
===========
#'there might also be times when you want to delete the data in the target table before inserting the new information. 
#'	To do so, you can use the -clearTable parameter with the sql output format, as shown in the following example:
#' IT IS MUCH MORE EFFICIENT TO USE SQL and run a truncate statement
&gt; logparser -i:evt -resolveSIDs:on -o:sql -server:localhost\sqlsrv2012  -database:AdventureWorks2012 -driver:"sql server" -clearTable:on "select extract_token(EventTypeName, 0, ' ') as  TypeEvent, to_date(TimeGenerated) as DateGenerated, SID as SecurityID into ScmEvents from system where SourceName =  'Service Control Manager' and SID is not null"

Insert data into table with IDENTITY Fields in table
====================================================
#'when you insert Log Parser data into a SQL Server table, 
#'    the number and position of fields must match the target table, 
#'    as was the case in the preceding two examples. 
#'However, there is one exception to the rule. 
#'    If the target table includes a column configured with the IDENTITY property, 
#'    you can specify that no data be inserted into that column. 
#'    Let’s re-create our target table to demonstrate how this works. 
#'The following T-SQL again creates the ScmEvents table, but this time includes the EventID column, 
#'    which is configured with the IDENTITY property:

USE AdventureWorks2012;
GO
IF OBJECT_ID('ScmEvents','U')IS NOT NULL
DROP TABLEScmEvents;
GO
CREATETABLE dbo.ScmEvents
(
  EventIDint primarykey identity,
  TypeEventvarchar(25) NOT NULL,
  DateGenerateddatetime NOT NULL,
  SecurityIDvarchar(50) NULL
);
GO

#'When using Log Parser to insert data into a table with an IDENTITY column, 
#'    we can use the -ignoreIdCols parameter with the sql output format to prevent the utility from trying to insert data into that column. 
#'    The following example includes the -ignoreIdCols parameter with it set to on:

logparser -i:evt -resolveSIDs:on -o:sql -server:localhost\sqlsrv2012  -database:AdventureWorks2012 -driver:"sql server" -clearTable:on -ignoreIdCols:on "select extract_token(EventTypeName,  0, ' ') as TypeEvent, to_date(TimeGenerated) as DateGenerated, SID as SecurityID into ScmEvents from system where  SourceName = 'Service Control Manager' and SID is not null"

CreateTable
============
#'When you run the command, Log Parser will create the table in the target database if the table does not already exist. 
#'However, if you were to run this command without including the -createTable parameter and the table did not exist, 
#'Log Parser would return an error.

&gt;logparser -i:evt -resolveSIDs:on -o:sql -server:localhost\sqlsrv2012  -database:AdventureWorks2012 -driver:"sql server" -clearTable:on -createTable:on "select extract_token(EventTypeName, 0,  ' ') as TypeEvent, to_date(TimeGenerated) as DateGenerated, SID as SecurityID into ScmEvents from system where  SourceName = 'Service Control Manager' and SID is not null"


Query in External File
========================
#'When your SQL query becomes too unwieldy, 
#'    you can put the SQL in a separate file and call that file from your Log Parser command. 
#'For example, suppose we save the query in the previous example to the file C:\DataFiles\EvtQuery.sql

#'Once we’ve created the file for our query, we can modify our command as follows:

logparser -i:evt -resolveSIDs:on -o:sql -server:localhost\sqlsrv2012  -database:AdventureWorks2012 -driver:"sql server" -clearTable:on -createTable:on file:c:\datafiles\evtquery.sql
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Loops</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Switch</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Loops</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Switch</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


'EXAMPLE

function New-VirtualMachine
{
	[CmdletBinding()]
	param
	(
		[string]$VMName
	)
	
    switch ($VMName) {  										 
        'SQLInjectAttackName' {													&lt;===== So if VMName = 'SQLInjectAttackName'
            Write-Error -Message "OMG! Someone's trying to H@x0r our base!"		'Then do this
        }

        'AlreadyExists' {
            Write-Warning -Message "You got a problem. This VM already exists so you can't add it, dummy"
        }

        'DoesNotExistAlready' {
            Write-Verbose -Message 'The VM does not already exist. You may proceed to add a new one with that name'
        }

        'FlakyIssue' {
            $ThatVariable = 'notright'
            Write-Debug -Message 'I will add this VM on host 123, blade 4564 on the molecule H2S squared'
        }
    }
}

/////////////////////////////////////////////////////////////


# Switch statement for multiple conditions
Clear-Host
$var = 42                   # Also test with 43 and 49
switch  ($var)
{
  41 {"Forty One"}
  42 {"Forty Two"}
  43 {"Forty Three"}
  default {"default"}
}



# Will match all lines that match
Clear-Host
$var = 42
switch  ($var)
{
  42 {"Forty Two"}
  "42" {"Forty Two String"}
  default {"default"}
}
# Note type coercion will cause both 42 lines to have a match


# To stop processing once a block is found use break
# The semicolon (;) let's you put more than one command on the line
# the "break" ends processing within the brackets, or script block, and jumps to the code right after the brackets
Clear-Host
$var = 42
switch  ($var)
{
  42 {"Forty Two - 1"; break}
  42 {"Forty Two - 2"             #You can break the previous line into multiple lines w/out semicolons as well
       break
       }
  "42" {"Forty Two String"; break}
  default {"default"}
}
# Note, if you want to put multiple commands on a single line, use a ; to separate them


# Switch works with collections, looping and executing for each match
Clear-Host
switch (3,1,2,42)       # So it will go through the options for each item in this collection, and produce results for each.
{
  1 {"One"}
  2 {"Two"}
  3 {"Three"}
  default {"The default answer"}
}


# String compares are case insensitive by default
Clear-Host
switch ("PowerShell")
{
  "powershell" {"lowercase"}
  "POWERSHELL" {"uppercase"}
  "PowerShell" {"mixedcase"}
}



# Use the -casesenstive switch to make it so
Clear-Host
switch -casesensitive ("PowerShell")
{
  "powershell" {"lowercase"}
  "POWERSHELL" {"uppercase"}
  "PowerShell" {"mixedcase"}
}


# Supports wildcards
Clear-Host
switch -Wildcard ("Pluralsight")
{
  "plural*" {"*"}
  "?luralsight" {"?"}
  "Pluralsi???" {"???"}
}

# Note it will also support regex matches

#endregion Logic Branching

##
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>multiple Lines</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>multiple Lines</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


'http://stackoverflow.com/questions/3235850/how-to-enter-a-multi-line-command
'You can use the grave accent (or backtick):

Get-ChildItem -Recurse `
  -Filter *.jpg `
  | Select LastWriteTime
  
'However, this is only ever necessary in such cases as shown above. 
'Usually you get automatic line continuation when a command cannot syntactically be complete at that point. 
'This includes starting a new pipeline element:

Get-ChildItem |
  Select Name,Length
  
'will work without problems since after the | the command cannot be complete since it's missing another pipeline element. 
'Also opening curly braces or any other kind of parentheses will allow line continuation directly:

$x=1..5
$x[
  0,3
] | % {
  "Number: $_"
}

'Similar to the | a comma will also work in some contexts:

1,
2

'Finally, strings (in all varieties) may also extend beyond a single line:

'Foo
bar'

'They include the line breaks within the string, then.

'And don't forget to mention that some other tokens also act as line continuators e.g. | and {.

'You can have a line break directly after the opening parenthesis, but not within the expression before the operator, apparently.

'You need to end command input with an empty line.

'Line continuation doesn't work in the ISE command pane, apparently


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


'if the script block is very long, you might want to write:

    Get-Foo
    {
        ...............
        ...............
        ...............
    }
'But this won't work: the parser will see two statements. The first is Get-Foo and the second is a script block. Instead, I write:

    Get-Foo {
        ...............
        ...............
        ...............
    }
    
    
 '  Because this case requires the open brace to be on the previous line, I follow that pattern everywhere:

    if (condition) {
        .....
    } 
    
  'Simlarly, in the case of long pipelines, I break after the pipe character (|):

    $project.Items | 
        ? { $_.Key -eq "ProjectFile" } | 
        % { $_.Value } | 
        % { $_.EvaluatedInclude } |
        % {
            .........
        }  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Compare-Object___Diff</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Compare-Object___Diff</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

------------------------------------
#'Suppose you previously stored the running processes into a file
#'Store a snapshot of the running processess
Get-Process | Export-Clixml c:\junk\process_1.xml

#' Then start Notepad and Calculator

#'Then get another snapshot of the processes, and store them in a variable

$nowProcess = Get-Process

#'Retrieve the first snapshot and store in a variable

$procSnapShot = Import-Clixml c:\junk\process_1.xml

#' compare them, can use the alias "diff" as well
Compare-Object $nowProcess $procSnapShot -Property name

'OUTPUT
----------------------
name     SideIndicator
----     -------------
chrome   =&gt;           
taskmgr  =&gt;           
WmiPrvSE =&gt;           
calc     &lt;=           
notepad  &lt;=  
----------------------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Sample_Profile_0____PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Sample_Profile_0____PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

Function gig-commentIt
{
 &lt;#
   .Synopsis
    This function will add a remark #' character to beginning of line
   .Description
    This function will add a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to comment out
    a section of PowerShell code. 
   .Example
    Add-RemarkedText
    adds the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ("#'" + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-commentIt

Function gig-unCommentIt
{
 &lt;#
   .Synopsis
    This function will remove a remark #' character to beginning of line
   .Description
    This function will remove a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to clean up a 
    previously commentted out section of PowerShell code. 
   .Example
    gig-unCommentIt
    Removes the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($l -replace "#'",''),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-unCommentIt


Function gig-editProfile
{

 psedit $profile

 #'ISE $profile

} #'end function gig-editProfile

Function gig-addHelp
{
  &lt;#
   .Synopsis
    This function adds help at current insertion point 
   .Example
    add-help
    adds comment based help at current insertion point 
   .Notes
    NAME:  Add-Help
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016
    HSG: WES-09-11-10
    KEYWORDS: Scripting Techniques, Windows PowerShell ISE
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $helpText = @"
 &lt;#
   .Synopsis
    This does that 
   .Description
    This function does
   .Example
    Example-
    Example- accomplishes 
   .Parameter 
    The parameter
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS:
    HSG: 
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
"@
 $psise.CurrentFile.Editor.InsertText($helpText)
} #'end function gig-addHelp

Function gig-addHeaderToScript
{
  &lt;#
   .Synopsis
    This function adds header information to a script 
   .Example
    Add-HeaderToScript
    Adds header comments to script 
   .Example 
    AH
    Uses alias to add header comments to script
   .Notes
    NAME:  Add-HeaderToScript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS: $keyword
    HSG: $hsg
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($keyword, $comment, $hsg)
 $header = @"
#' -----------------------------------------------------------------------------
#' Script: $(split-path -Path $psISE.CurrentFile.FullPath -Leaf)
#' Author: glenn garson, JPHSA
#' Date: $(Get-Date)
#' Keywords: $keyword
#' comments: $comment
#'
#' -----------------------------------------------------------------------------
"@
 $psise.CurrentFile.Editor.InsertText($header)
} #'end function gig-addHeaderToScript

Function gig-getLogNameFromDate
{
  &lt;#
   .Synopsis
    Creates a log name from date
   .Description
    This script creates a log from a date. 
   .Example
    gig-getLogNameFromDate -path "c:\jumk" -name "log"
    Creates a file name like c:\JUNK\log20100914-122019.Txt but does not
    create the file. It returns the file name to calling code.
   .Example
    gig-getLogNameFromDate -path "c:\JUNK" -name "log" -Create
    Creates a file name like c:\JUNK\log20100914-122019.Txt and
    create the file. It returns the file name to calling code.
   .Parameter path
    path to log file
   .Parameter name
    base name of log file
   .Parameter create
    switch that determines whether log file or only name is created
   .inputs
    [string]
   .outputs
    [string]
   .Notes
    NAME:  gig-getLogNameFromDate
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 16:58:06
    KEYWORDS: parameter substitution, format specifier, string substitution
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param(
  [string]$path = "c:\JUNKC:\DATA\junkPowerShellTranscripts",
  [string]$name = "log",
  [switch]$Create
 )
 $logname = "{0}\{1}{2}.{3}" -f $path,$name, `
    (Get-Date -Format yyyyMMdd-HHmmss),"Txt"
 if($create) 
  { 
   New-Item -Path $logname -ItemType file -force | out-null
   $logname
  }
 else {$logname}
} #' end function gig-getLogNameFromDate

Function gig-start_ISE_Transcript
{
  &lt;#
   .Synopsis
    This captures output from a script to a created text file
    To use the gig-start_ISE_Transcript function, add the call to the function at the bottom of your script.
   .Example

    xxxxx...{your script}
    gig-start_ISE_Transcript -logname "c:\junk\log.txt"

    Copies output from script to file named xxxxlog.txt in c:\junk folder
   .Parameter logname
    the name and path of the log file.
   .inputs
    [string]
   .outputs
    [io.file]
   .Notes
    NAME:  gig-start_ISE_Transcript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 17:27:22
    KEYWORDS:
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
  Param(
   [string]$logname = (gig-getLogNameFromDate -path $transcriptHome -name "log" -Create)
  )
  $transcriptHeader = @"
**************************************
Windows PowerShell ISE Transcript Start
Start Time: $(get-date)
UserName: $env:username
UserDomain: $env:USERDNSDOMAIN
ComputerName: $env:COMPUTERNAME
Windows version: $((Get-WmiObject win32_operatingsystem).version)
**************************************
Transcript started. Output file is $logname
"@
 $transcriptHeader &gt;&gt; $logname
 $psISE.CurrentPowerShellTab.ConsolePane.Text &gt;&gt; $logname
 “Log saved to $logname”
} #'end function gig-start_ISE_Transcript

function gig-indentText_x_spaces
{
  &lt;#
   .Synopsis
    This function will indent text in the ISE a specific number
   .Description
    This function will indent selected text in the PowerShell ISE. These are
    real spaces, not tabs. Therefore this is appropriate for situations where
    an actual tab "`t" will not work. 
   .Example
    gig-indentText_x_spaces -space 5
    moves selected text five spaces 
   .Parameter spaces
    The number of spaces to indent the selected text. Note this number cannot
    be a negative number, and this function does not "unindent" the selected text.
   .Notes
    NAME:  gig-indentText_x_spaces
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 06/11/2012 17:16:29
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-6-17-12
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param([int]$space = 1)
 $tab = " " * $space
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($tab + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'end function gig-indentText_x_spaces

Function gig-editModule
{
  &lt;#
   .Synopsis
    This opens a module stored in the $env:PSModulePath location on a new tab in ISE 
   .Description
    This function uses Get-Module to retrieve a module from $env:PSModulePath and then
    it opens the module from that location into a new tab in ISE for editing. Wildcard
    characters that resolve to a single module are supported.
   .Example
    gig-editModule PowerShellISEModule
    gig-editModule PowerShellISEModule opens the PowerShellISEModule into a new tab in the
    ISE for editing 
  .Example
    gig-editModule PowerShellISE*
    gig-editModule PowerShellISE* opens the PowerShellISEModule into a new tab in the
    ISE for editing by using a wild card character for the module name
   .Parameter Name
    The name of the module. Wild cards that resolve to a single module are supported
   .Notes
    NAME:  gig-editModule
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 18:14:19
    KEYWORDS: Scripting Techniques, Modules
    HSG: WES-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($name)
 ISE (Get-Module -ListAvailable $name).path
} #'end function gig-editModule

Function gig-toggleOutlineView
{
  &lt;#
   .Synopsis
    This function toggles the outline view in the ISE 
   .Description
    This function toggles the outline view in the ISE. It will expand 
    or collapse all functions in the current script pane.
   .Example
    gig-toggleOutlineView
    gig-toggleOutlineView will either expand or collapse all functions 
   .Notes
    NAME:  gig-toggleOutlineView
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 19:28:37
    KEYWORDS: Scripting Techniques, Modules
    HSG: wes-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 3.0
 #&gt;
 $psise.CurrentFile.Editor.ToggleOutliningExpansion()
} #'end function gig-toggleOutlineView


#'added Functions from New-ModulesDrive.ps1
#' HSG-1-20-10
Function gig-newModuleDrives
{
&lt;#
    .SYNOPSIS
    Creates two PSDrives: myMods and sysMods
    .EXAMPLE
    gig-newModuleDrives
    Creates two PSDrives: myMods and sysMods. These correspond 
    to the users' modules folder and the system modules folder respectively. 
#&gt;
 $driveNames = "myMods","sysMods"

 For($i = 0 ; $i -le 1 ; $i++)
 {
  New-PsDrive -name $driveNames[$i] -PSProvider filesystem `
  -Root ($env:PSModulePath.split(";")[$i]) -scope Global |
  Out-Null
 } #'end For
} #'end gig-newModuleDrives

Function gig-getFileSystemDrives
{
&lt;#
    .SYNOPSIS
    Displays global PS Drives that use the Filesystem provider
    .EXAMPLE
    gig-getFileSystemDrives
    Displays global PS Drives that use the Filesystem provider
#&gt;
 Get-PSDrive -PSProvider FileSystem -scope Global
} #'end gig-getFileSystemDrives

Function gig-OpenPath
{
 &lt;#
   .Synopsis
    Opens a path in Explorer 
   .Description
    Opens a path in Explorer, default path is C:\, or the first parameter is the path
   .Example
    gig-OpenPath C:\Junk
    gig-OpenPath $moduleHome 
   .Parameter Path
    The path to open in Explorer
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/26/2016 17:31:28
    KEYWORDS:
    HSG: 
   .Link
     
 #'Requires -Version 2.0
 #&gt;
  Param(
  [string]$path = "C:\"
 )
 Invoke-Item -Path $path
 }
 
#' *** Alias ***
#'if(!(Test-Path alias:ah))
#' {
#'  New-Alias -Name ah -Value add-headertoscript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:abh))
#' {
#'  New-Alias -Name abh -Value Add-SBSBookHeaderToScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ahlp))
#' {
#'  New-Alias -Name ahlp -Value add-help -Description "MrEd alias" |
#'  Out-Null
#'  }
#'  if(!(Test-Path alias:ras))
#' {
#'  New-Alias -Name ras -Value Remove-AliasFromScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:gfsd))
#' {
#'  New-Alias -Name gfsd -Value gig-getFileSystemDrives -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:cs))
#' {
#'  New-Alias -Name cs -value Copy-ScriptToNewTab -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ar))
#' {
#'  New-Alias -Name ar -value Add-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:rr))
#' {
#'  New-Alias -Name rr -value Remove-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:em))
#' {
#'  New-Alias -Name em -value Edit-Module -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:iem))
#' {
#'  New-Alias -Name iem -value Import-EveryModule -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:sov))
#' {
#'  New-Alias -Name sov -value gig-toggleOutlineView -Description "MrEd alias" |
#'  Out-Null
#'  }



#' *** Variables ***
if(!(Test-Path variable:moduleHome))
{
 new-variable -name moduleHome -value "$env:userProfile\documents\WindowsPowerShell\Modules"
}
#'if(!(Test-Path variable:backupHome))
#'{
#' new-variable -name backupHome -value "$env:userProfile\documents\WindowsPowerShell\profileBackup"
#'}

if(!(Test-Path variable:TranscriptHome))
{
 new-variable -name TranscriptHome -value "C:\DATA\junkPowerShellTranscripts"
 #' new-variable -name TranscriptHome -value "$env:userProfile\documents\WindowsPowerShell\transcript"
}

if(!(Test-Path variable:myScripts))
{
 new-variable -name myScripts -value "C:\DATA\PowerShellScripts"
}

Set-Location $myScripts

Clear-Host

Export-ModuleMember -alias * -function * -variable *</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Sample_Profile_3__PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Sample_Profile_3__PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

Function gig-commentIt
{
 &lt;#
   .Synopsis
    This function will add a remark #' character to beginning of line
   .Description
    This function will add a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to comment out
    a section of PowerShell code. 
   .Example
    Add-RemarkedText
    adds the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ("#'" + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-commentIt

Function gig-unCommentIt
{
 &lt;#
   .Synopsis
    This function will remove a remark #' character to beginning of line
   .Description
    This function will remove a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to clean up a 
    previously commentted out section of PowerShell code. 
   .Example
    gig-unCommentIt
    Removes the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($l -replace "#'",''),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-unCommentIt


Function gig-editProfile
{

 psedit $profile

 #'ISE $profile

} #'end function gig-editProfile

Function gig-addHelp
{
  &lt;#
   .Synopsis
    This function adds help at current insertion point 
   .Example
    add-help
    adds comment based help at current insertion point 
   .Notes
    NAME:  Add-Help
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016
    HSG: WES-09-11-10
    KEYWORDS: Scripting Techniques, Windows PowerShell ISE
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $helpText = @"
 &lt;#
   .Synopsis
    This does that 
   .Description
    This function does
   .Example
    Example-
    Example- accomplishes 
   .Parameter 
    The parameter
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS:
    HSG: 
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
"@
 $psise.CurrentFile.Editor.InsertText($helpText)
} #'end function gig-addHelp

Function gig-addHeaderToScript
{
  &lt;#
   .Synopsis
    This function adds header information to a script 
   .Example
    Add-HeaderToScript
    Adds header comments to script 
   .Example 
    AH
    Uses alias to add header comments to script
   .Notes
    NAME:  Add-HeaderToScript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS: $keyword
    HSG: $hsg
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($keyword, $comment, $hsg)
 $header = @"
#' -----------------------------------------------------------------------------
#' Script: $(split-path -Path $psISE.CurrentFile.FullPath -Leaf)
#' Author: glenn garson, JPHSA
#' Date: $(Get-Date)
#' Keywords: $keyword
#' comments: $comment
#'
#' -----------------------------------------------------------------------------
"@
 $psise.CurrentFile.Editor.InsertText($header)
} #'end function gig-addHeaderToScript

Function gig-getLogNameFromDate
{
  &lt;#
   .Synopsis
    Creates a log name from date
   .Description
    This script creates a log from a date. 
   .Example
    gig-getLogNameFromDate -path "c:\jumk" -name "log"
    Creates a file name like c:\JUNK\log20100914-122019.Txt but does not
    create the file. It returns the file name to calling code.
   .Example
    gig-getLogNameFromDate -path "c:\JUNK" -name "log" -Create
    Creates a file name like c:\JUNK\log20100914-122019.Txt and
    create the file. It returns the file name to calling code.
   .Parameter path
    path to log file
   .Parameter name
    base name of log file
   .Parameter create
    switch that determines whether log file or only name is created
   .inputs
    [string]
   .outputs
    [string]
   .Notes
    NAME:  gig-getLogNameFromDate
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 16:58:06
    KEYWORDS: parameter substitution, format specifier, string substitution
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param(
  [string]$path = "c:\JUNKC:\DATA\junkPowerShellTranscripts",
  [string]$name = "log",
  [switch]$Create
 )
 $logname = "{0}\{1}{2}.{3}" -f $path,$name, `
    (Get-Date -Format yyyyMMdd-HHmmss),"Txt"
 if($create) 
  { 
   New-Item -Path $logname -ItemType file -force | out-null
   $logname
  }
 else {$logname}
} #' end function gig-getLogNameFromDate

Function gig-start_ISE_Transcript
{
  &lt;#
   .Synopsis
    This captures output from a script to a created text file
    To use the gig-start_ISE_Transcript function, add the call to the function at the bottom of your script.
   .Example

    xxxxx...{your script}
    gig-start_ISE_Transcript -logname "c:\junk\log.txt"

    Copies output from script to file named xxxxlog.txt in c:\junk folder
   .Parameter logname
    the name and path of the log file.
   .inputs
    [string]
   .outputs
    [io.file]
   .Notes
    NAME:  gig-start_ISE_Transcript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 17:27:22
    KEYWORDS:
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
  Param(
   [string]$logname = (gig-getLogNameFromDate -path $transcriptHome -name "log" -Create)
  )
  $transcriptHeader = @"
**************************************
Windows PowerShell ISE Transcript Start
Start Time: $(get-date)
UserName: $env:username
UserDomain: $env:USERDNSDOMAIN
ComputerName: $env:COMPUTERNAME
Windows version: $((Get-WmiObject win32_operatingsystem).version)
**************************************
Transcript started. Output file is $logname
"@
 $transcriptHeader &gt;&gt; $logname
 $psISE.CurrentPowerShellTab.ConsolePane.Text &gt;&gt; $logname
 “Log saved to $logname”
} #'end function gig-start_ISE_Transcript

function gig-indentText_x_spaces
{
  &lt;#
   .Synopsis
    This function will indent text in the ISE a specific number
   .Description
    This function will indent selected text in the PowerShell ISE. These are
    real spaces, not tabs. Therefore this is appropriate for situations where
    an actual tab "`t" will not work. 
   .Example
    gig-indentText_x_spaces -space 5
    moves selected text five spaces 
   .Parameter spaces
    The number of spaces to indent the selected text. Note this number cannot
    be a negative number, and this function does not "unindent" the selected text.
   .Notes
    NAME:  gig-indentText_x_spaces
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 06/11/2012 17:16:29
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-6-17-12
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param([int]$space = 1)
 $tab = " " * $space
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($tab + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'end function gig-indentText_x_spaces

Function gig-editModule
{
  &lt;#
   .Synopsis
    This opens a module stored in the $env:PSModulePath location on a new tab in ISE 
   .Description
    This function uses Get-Module to retrieve a module from $env:PSModulePath and then
    it opens the module from that location into a new tab in ISE for editing. Wildcard
    characters that resolve to a single module are supported.
   .Example
    gig-editModule PowerShellISEModule
    gig-editModule PowerShellISEModule opens the PowerShellISEModule into a new tab in the
    ISE for editing 
  .Example
    gig-editModule PowerShellISE*
    gig-editModule PowerShellISE* opens the PowerShellISEModule into a new tab in the
    ISE for editing by using a wild card character for the module name
   .Parameter Name
    The name of the module. Wild cards that resolve to a single module are supported
   .Notes
    NAME:  gig-editModule
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 18:14:19
    KEYWORDS: Scripting Techniques, Modules
    HSG: WES-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($name)
 ISE (Get-Module -ListAvailable $name).path
} #'end function gig-editModule

Function gig-toggleOutlineView
{
  &lt;#
   .Synopsis
    This function toggles the outline view in the ISE 
   .Description
    This function toggles the outline view in the ISE. It will expand 
    or collapse all functions in the current script pane.
   .Example
    gig-toggleOutlineView
    gig-toggleOutlineView will either expand or collapse all functions 
   .Notes
    NAME:  gig-toggleOutlineView
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 19:28:37
    KEYWORDS: Scripting Techniques, Modules
    HSG: wes-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 3.0
 #&gt;
 $psise.CurrentFile.Editor.ToggleOutliningExpansion()
} #'end function gig-toggleOutlineView


#'added Functions from New-ModulesDrive.ps1
#' HSG-1-20-10
Function gig-newModuleDrives
{
&lt;#
    .SYNOPSIS
    Creates two PSDrives: myMods and sysMods
    .EXAMPLE
    gig-newModuleDrives
    Creates two PSDrives: myMods and sysMods. These correspond 
    to the users' modules folder and the system modules folder respectively. 
#&gt;
 $driveNames = "myMods","sysMods"

 For($i = 0 ; $i -le 1 ; $i++)
 {
  New-PsDrive -name $driveNames[$i] -PSProvider filesystem `
  -Root ($env:PSModulePath.split(";")[$i]) -scope Global |
  Out-Null
 } #'end For
} #'end gig-newModuleDrives

Function gig-getFileSystemDrives
{
&lt;#
    .SYNOPSIS
    Displays global PS Drives that use the Filesystem provider
    .EXAMPLE
    gig-getFileSystemDrives
    Displays global PS Drives that use the Filesystem provider
#&gt;
 Get-PSDrive -PSProvider FileSystem -scope Global
} #'end gig-getFileSystemDrives

Function gig-OpenPath
{
 &lt;#
   .Synopsis
    Opens a path in Explorer 
   .Description
    Opens a path in Explorer, default path is C:\, or the first parameter is the path
   .Example
    gig-OpenPath C:\Junk
    gig-OpenPath $moduleHome 
   .Parameter Path
    The path to open in Explorer
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/26/2016 17:31:28
    KEYWORDS:
    HSG: 
   .Link
     
 #'Requires -Version 2.0
 #&gt;
  Param(
  [string]$path = "C:\"
 )
 Invoke-Item -Path $path
 }


 function gig-LoadNetworkPSDrives
{
#'    net use G: "\\Jphsa.org\shared\Data" 
#'    net use H: "\\Jphsa.org\shared\Users\ggarson\" 
#'    net use I: "\\Jphsa-ebhost2\AnasaziFiles\" 
#'    net use M: "\\Jphsa.org\shared\Data\MIS\" 
#'    net use N: "\\Jphsa-ebfile01\e$\" 
#'    net use P: "\\Jphsa.org\shared\Users\ggarson\PROJECTS"


    New-PSDrive -Name "G" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Data" -scope Global
    New-PSDrive -Name "H" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Users\ggarson\" -scope Global
    New-PSDrive -Name "I" -PSProvider "FileSystem" -Root "\\Jphsa-ebhost2\AnasaziFiles\" -scope Global
    New-PSDrive -Name "M" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Data\MIS\" -scope Global
    New-PSDrive -Name "N" -PSProvider "FileSystem" -Root "\\Jphsa-ebfile01\e$\" -scope Global
    New-PSDrive -Name "P" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Users\ggarson\PROJECTS"-scope Global


} 
 
#' *** Alias ***
#'if(!(Test-Path alias:ah))
#' {
#'  New-Alias -Name ah -Value add-headertoscript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:abh))
#' {
#'  New-Alias -Name abh -Value Add-SBSBookHeaderToScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ahlp))
#' {
#'  New-Alias -Name ahlp -Value add-help -Description "MrEd alias" |
#'  Out-Null
#'  }
#'  if(!(Test-Path alias:ras))
#' {
#'  New-Alias -Name ras -Value Remove-AliasFromScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:gfsd))
#' {
#'  New-Alias -Name gfsd -Value gig-getFileSystemDrives -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:cs))
#' {
#'  New-Alias -Name cs -value Copy-ScriptToNewTab -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ar))
#' {
#'  New-Alias -Name ar -value Add-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:rr))
#' {
#'  New-Alias -Name rr -value Remove-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:em))
#' {
#'  New-Alias -Name em -value Edit-Module -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:iem))
#' {
#'  New-Alias -Name iem -value Import-EveryModule -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:sov))
#' {
#'  New-Alias -Name sov -value gig-toggleOutlineView -Description "MrEd alias" |
#'  Out-Null
#'  }



#' *** Variables ***
if(!(Test-Path variable:moduleHome))
{
 new-variable -name moduleHome -value "$env:userProfile\documents\WindowsPowerShell\Modules"
}
#'if(!(Test-Path variable:backupHome))
#'{
#' new-variable -name backupHome -value "$env:userProfile\documents\WindowsPowerShell\profileBackup"
#'}

if(!(Test-Path variable:TranscriptHome))
{
 new-variable -name TranscriptHome -value "C:\DATA\junkPowerShellTranscripts"
 #' new-variable -name TranscriptHome -value "$env:userProfile\documents\WindowsPowerShell\transcript"
}

if(!(Test-Path variable:myScripts))
{
 new-variable -name myScripts -value "C:\DATA\PowerShellScripts"
}

Set-Location $myScripts

Clear-Host

gig-LoadNetworkPSDrives

Export-ModuleMember -alias * -function * -variable *

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting__Invoke-Command</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Remoting_Overview</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting__Invoke-Command</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Remoting_Overview</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Remoting_Overview

1-to-1 Remoting
===============

#'returns TRUE if enabled, FALSE if not enabled
[bool](Test-WSMan -ComputerName 'IT-0744' -ErrorAction SilentlyContinue) 

Enter-PSSession
-------------- 
'connects to a remote computer and gives you a commandline
'	prompt on that computer.
'While connected to a remote machine via Enter-PSSession, your prompt changes and
'	displays the name of the remote system in square brackets.
'All of your interactive keyboard input is sent to the
'	remote machine, and all results are marshaled back to you.

&gt;Enter-PSSession -ComputerName SERVER2

'Enter-PSSession is really meant for interactive use by a
'	human being, not for batch use by a script. If you wanted to send a command to a remote
'	computer, from within a script, Invoke-Command is the right way to do it.

1-to-Many Remoting
====================

Invoke-Command temporary session
--------------------------------
'With this technique, you specify one or more computer names and a command (or a
'	semicolon-separated list of commands); PowerShell sends the commands, via Remoting, to
'	the specified computers.
&gt;Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service }
'OR
&gt;Invoke-Command -computername DC01,CLIENT1 -filePath c:\Scripts\Task.ps1


Invoke-Command persistent session
--------------------------------
PS&gt; $Session = New-PSSession -ComputerName CLIENT1
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 }
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test }
'OUTPUT
-------
'1
PS&gt; Remove-PSSession -Session $Session

Sessions
========
'By default, only 10 simultaneous connections to a remote
'	machine are permitted.
#'When you run Enter-PSSession or Invoke-Command and use their -ComputerName
#'parameter, Remoting creates a connection (or session), does whatever you've asked it to,
#'and then closes the connection (in the case of an interactive session created with Enter-
#'PSSession, PowerShell knows you're done when you run Exit-PSSession).
#'There's some
#'overhead involved in that set-up and tear-down, and so PowerShell also offers the option of
#'creating a persistent connection - called a PSSession. 
#'You run New-PSSession to create a
#'new, persistent session. Then, rather than using -ComputerName with Enter-PSSession or
#'Invoke-Command, you use their -Session parameter and pass an existing, open PSSession
#'object. That lets the commands re-use the persistent connection you'd previously created.
#'When you use persistent sessions, on the other hand, re-connections are much faster, and
#'since you are keeping and reusing sessions, they will preserve state.



#'Powershell remoting sends a command, usually using WSMan, from Client to Server
#'	by default uses Port (the port can be modified):
#'							http:  5985
#'							https: 5986
#'							
#'	Server listens on those Ports, then passes the command to an EndPoint
#'		The EndPoint is a plugin, like a connection, in this case it is a Powershell instance
#'		The results are serialized and sent back to the Client
#'		


-------------------------------------------------------------------------------------------------------	
#'		There are several default session configurations	
		&gt;Get-PSSessionConfiguration
		
		'Pop-up response: WinRM service is not started currently. Running this command will start WinRM service.
-------------------------------------------------------------------------------------------------------
'To enable on a local machine, so that it can be the Server (i.e. so that it can recieve commands)
'	Must run elevated
'	Run once per machine

&gt;Enable-PSRemoting
	-'	Runs Set-WSManQuickConfig
	-'	Configures WinRM to AutoStart
	-'	Configures Firewall settings
	-'	Registers session configurations and listeners
	
'OR can use Group Policy	
	
'To disable remoting
&gt;Disable-PSRemoting</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting_CIM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Function_with_fallBackTo_DCOM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting_CIM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Function_with_fallBackTo_DCOM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>from:https://gallery.technet.microsoft.com/scriptcenter/PowerShell-Function-to-a7fb6800

Create Sessions

=================USAGE:
&gt;New-MrCimSession -ComputerName SQL01, SQL03

'The previously created CimSessions can be used to query information from WMI 
'	on the remote computers regardless of which underlying protocol is used for communication:

&gt; Get-CimInstance -CimSession (Get-CimSession) -ClassName Win32_OperatingSystem |
Select-Object -Property PSComputerName, Caption

'The 'Get-CimSession' gets the sessions created in the first command,
'	and the result is a list of the computernames, and the OS (i.e. the Caption)
=======================================================================
#Requires -Version 3.0 
function New-MrCimSession { 
&lt;# 
.SYNOPSIS 
    Creates CimSessions to remote computer(s), automatically determining if the WSMAN 
    or Dcom protocol should be used. 
.DESCRIPTION 
    New-MrCimSession is a function that is designed to create CimSessions to one or more 
    computers, automatically determining if the default WSMAN protocol or the backwards 
    compatible Dcom protocol should be used. PowerShell version 3 is required on the 
    computer that this function is being run on, but PowerShell does not need to be 
    installed at all on the remote computer. 
.PARAMETER ComputerName 
    The name of the remote computer(s). This parameter accepts pipeline input. The local 
    computer is the default. 
.PARAMETER Credential 
    Specifies a user account that has permission to perform this action. The default is 
    the current user. 
.EXAMPLE 
     New-MrCimSession -ComputerName Server01, Server02 
.EXAMPLE 
     New-MrCimSession -ComputerName Server01, Server02 -Credential (Get-Credential) 
.EXAMPLE 
     Get-Content -Path C:\Servers.txt | New-MrCimSession 
.INPUTS 
    String 
.OUTPUTS 
    Microsoft.Management.Infrastructure.CimSession 
.NOTES 
    Author:  Mike F Robbins 
    Website: http://mikefrobbins.com 
    Twitter: @mikefrobbins 
#&gt; 
    [CmdletBinding()] 
    param( 
        [Parameter(ValueFromPipeline)] 
        [ValidateNotNullorEmpty()] 
        [string[]]$ComputerName = $env:COMPUTERNAME, 
  
        [System.Management.Automation.Credential()]$Credential = [System.Management.Automation.PSCredential]::Empty 
    ) 
 
    BEGIN { 
        $Opt = New-CimSessionOption -Protocol Dcom 
 
        $SessionParams = @{ 
            ErrorAction = 'Stop' 
        } 
 
        If ($PSBoundParameters['Credential']) { 
            $SessionParams.Credential = $Credential 
        } 
    } 
 
    PROCESS { 
        foreach ($Computer in $ComputerName) { 
            $SessionParams.ComputerName  = $Computer 
 
            if ((Test-WSMan -ComputerName $Computer -ErrorAction SilentlyContinue).productversion -match 'Stack: ([3-9]|[1-9][0-9]+)\.[0-9]+') { 
                try { 
                    Write-Verbose -Message "Attempting to connect to $Computer using the WSMAN protocol." 
                    New-CimSession @SessionParams 
                } 
                catch { 
                    Write-Warning -Message "Unable to connect to $Computer using the WSMAN protocol. Verify your credentials and try again." 
                } 
            } 
  
            else { 
                $SessionParams.SessionOption = $Opt 
 
                try { 
                    Write-Verbose -Message "Attempting to connect to $Computer using the DCOM protocol." 
                    New-CimSession @SessionParams 
                } 
                catch { 
                    Write-Warning -Message "Unable to connect to $Computer using the WSMAN or DCOM protocol. Verify $Computer is online and try again." 
                } 
 
                $SessionParams.Remove('SessionOption') 
            }             
        } 
    } 
}

=======================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Remoting_Overview</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Remoting_Overview</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1-to-1 Remoting
===============

#'returns TRUE if enabled, FALSE if not enabled
[bool](Test-WSMan -ComputerName 'IT-0744' -ErrorAction SilentlyContinue) 

Enter-PSSession
-------------- 
'connects to a remote computer and gives you a commandline
'	prompt on that computer.
'While connected to a remote machine via Enter-PSSession, your prompt changes and
'	displays the name of the remote system in square brackets.
'All of your interactive keyboard input is sent to the
'	remote machine, and all results are marshaled back to you.

&gt;Enter-PSSession -ComputerName SERVER2

'Enter-PSSession is really meant for interactive use by a
'	human being, not for batch use by a script. If you wanted to send a command to a remote
'	computer, from within a script, Invoke-Command is the right way to do it.

1-to-Many Remoting
====================

Invoke-Command temporary session
--------------------------------
'With this technique, you specify one or more computer names and a command (or a
'	semicolon-separated list of commands); PowerShell sends the commands, via Remoting, to
'	the specified computers.
&gt;Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service }
'OR
&gt;Invoke-Command -computername DC01,CLIENT1 -filePath c:\Scripts\Task.ps1


Invoke-Command persistent session
--------------------------------
PS&gt; $Session = New-PSSession -ComputerName CLIENT1
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 }
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test }
'OUTPUT
-------
'1
PS&gt; Remove-PSSession -Session $Session

Sessions
========
'By default, only 10 simultaneous connections to a remote
'	machine are permitted.
#'When you run Enter-PSSession or Invoke-Command and use their -ComputerName
#'parameter, Remoting creates a connection (or session), does whatever you've asked it to,
#'and then closes the connection (in the case of an interactive session created with Enter-
#'PSSession, PowerShell knows you're done when you run Exit-PSSession).
#'There's some
#'overhead involved in that set-up and tear-down, and so PowerShell also offers the option of
#'creating a persistent connection - called a PSSession. 
#'You run New-PSSession to create a
#'new, persistent session. Then, rather than using -ComputerName with Enter-PSSession or
#'Invoke-Command, you use their -Session parameter and pass an existing, open PSSession
#'object. That lets the commands re-use the persistent connection you'd previously created.
#'When you use persistent sessions, on the other hand, re-connections are much faster, and
#'since you are keeping and reusing sessions, they will preserve state.



#'Powershell remoting sends a command, usually using WSMan, from Client to Server
#'	by default uses Port (the port can be modified):
#'							http:  5985
#'							https: 5986
#'							
#'	Server listens on those Ports, then passes the command to an EndPoint
#'		The EndPoint is a plugin, like a connection, in this case it is a Powershell instance
#'		The results are serialized and sent back to the Client
#'		


-------------------------------------------------------------------------------------------------------	
#'		There are several default session configurations	
		&gt;Get-PSSessionConfiguration
		
		'Pop-up response: WinRM service is not started currently. Running this command will start WinRM service.
-------------------------------------------------------------------------------------------------------
'To enable on a local machine, so that it can be the Server (i.e. so that it can recieve commands)
'	Must run elevated
'	Run once per machine

&gt;Enable-PSRemoting
	-'	Runs Set-WSManQuickConfig
	-'	Configures WinRM to AutoStart
	-'	Configures Firewall settings
	-'	Registers session configurations and listeners
	
'OR can use Group Policy	
	
'To disable remoting
&gt;Disable-PSRemoting</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WORKGROUP_machines</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WORKGROUP_machines</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://blogs.msdn.microsoft.com/wmi/2009/07/24/powershell-remoting-between-two-workgroup-machines/

The computer you’re sitting in front of is called the client machine, 
	while the computer you’re trying to remotely access is called the server machine.
	
First, configure the SERVER machine to allow access. 
---------------------------------------------------	
&gt;Enable-PSRemoting –force

If one of the network cards on your computer has the network connection type set to “Public” 
	then the required port won’t be opened in your firewall settings.
	
If you’d rather not change your network connection type, 
	you’ll have to manually configure your firewall to allow traffic through.	
	
Make sure that the password for your Administrator account is not empty!  
	If it is, you won’t be able to log in remotely.
	
Now you’ll need to configure your CLIENT machine. 
------------------------------------------------

 enable WinRM local access so that you can modify the proper settings. 
 To do this, start the WinRM service and enable the local account token filter policy 
 
 Both of the next 2 steps are unnecessary if 
 	you’ve already run the Enable-PSRemoting cmdlet on your client machine.
 
 &gt;Start-Service WinRM
 &gt;Set-ItemProperty –Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System –Name  LocalAccountTokenFilterPolicy –Value 1 –Type DWord
 
 next (on the SERVER)
 --------
 Now that WinRM local access is enabled, 
 	you’ll need to add the name of your server machine to the TrustedHosts setting in the WinRM configuration, 
 	which enables your client machine to connect to your server machine 
 	using an authentication mechanism that does not authenticate the server (like Kerberos does):

&gt;Set-Item WSMan:\localhost\Client\TrustedHosts –Value &lt;ServerMachineName&gt; -Force

This command replaces any previous value that was stored in TrustedHosts!  
	If there is an existing list of servers and you don’t want to remove then, 
	use the –Concatenate parameter:
	
&gt;Set-Item WSMan:\localhost\Client\TrustedHosts –Value &lt;ServerMachineName&gt; -Force -Concatenate

If you want to use your server machine’s IP address instead of its name, 
	you must specify explicit credentials when you connect.
	
------------------------------------------------
'From client (HOMETOWER) to server (HOME-LAPTOP)	
&gt;Test-WSMan home-laptop	
'OUTPUT
--------
#'wsmid           : http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd
#'ProtocolVersion : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd
#'ProductVendor   : Microsoft Corporation
#'ProductVersion  : OS: 0.0.0 SP: 0.0 Stack: 3.0#'
#'	

'INVOKE-COMMAND works	
&gt;Invoke-Command -ComputerName home-laptop -ScriptBlock { Get-ChildItem C:\ } -credential glenn
'OUTPUT
--------
#'
#'    Directory: C:\
#'
#'
#'Mode                LastWriteTime         Length Name                                                         PSComputerName                                             
#'----                -------------         ------ ----                                                         --------------                                             
#'d-----       12/18/2016   3:20 PM                DATA                                                         home-laptop                                                
#'d-----       12/18/2016   7:58 AM                Downloads                                                    home-laptop                                                
#'d-----        4/12/2016   1:36 AM                eSupport                                                     home-laptop                                                
#'d-----        7/16/2016   6:47 AM                PerfLogs                                                     home-laptop                                                
#'d-r---        8/29/2017   9:21 AM                Program Files                                                home-laptop                                                
#'d-r---        5/13/2017   4:48 PM                Program Files (x86)                                          home-laptop                                                
#'d-r---       12/18/2016   1:13 PM                Users                                                        home-laptop                                                
#'d-----        8/29/2017   5:50 PM                Windows                                                      home-laptop                                                
#'d-----        3/31/2017   5:49 AM                Windows.old                                                  home-laptop   
	
'BUT 'Get-CimInstance' fails from the client
&gt;Get-CimInstance –ClassName Win32_ComputerSystem –Computer HOME-LAPTOP -Verbose	
' Access is denied.	

'I can enter a session on the client (i.e. HOMETOWER) to the server:
&gt;Enter-PSSession -ComputerName home-laptop -Credential glenn
'Now we are actually on the server
'Then create an option variable
[home-laptop]: &gt; $CimOption = New-CimSessionOption -Protocol Dcom
'Then enter a CIM Session locally on the Server:
[home-laptop]: PS C:\Users\glenn\Documents&gt; $CimSession = New-CimSession  -SessionOption $CimOption
'and we can confirm we are on the Server:
&gt;Get-ChildItem C:\
'it returns the contents of the Server's C Drive
	
------------------------------------------------	
To check if the WinRM service is running:
               &gt;Get-Service WinRM

To check the version of WinRM that’s installed:
               &gt;Test-WSMan –Auth default

To check the remoting configuration for PowerShell:
               &gt;Get-PSSessionConfiguration

To verify that local WinRM access is working:
               &gt;New-PSSession

To check if the local account token filter policy is enabled (on Windows Vista and Windows Server 2008):
                &gt;Get-ItemProperty –Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System –Name LocalAccountTokenFilterPolicy*

To check if the network access policy “Sharing and security model for local accounts” is set to Classic (on Windows XP):
                Get-ItemProperty –Path HKLM:\System\CurrentControlSet\Control\Lsa –Name ForceGuest*

To check the WinRM listener settings:
               &gt;winrm enumerate winrm/config/listener

For additional help and troubleshooting steps:
                Get-Help about_remote_troubleshooting</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Security</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get_and_Set__Execution_Policy</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Security</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get_and_Set__Execution_Policy</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Get-ExecutionPolicy

#-----------------------------------------------------------------------------#
# Note: In order to alter Execution Policy, you must be running as Admin
#-----------------------------------------------------------------------------#

&lt;# 
  Four possible values:
  Restricted   - No scripts can be run. User can only use PS interactively.
  AllSigned    - All scripts must be code signed
  RemoteSigned - All scripts marked as unsafe (i.e. downloaded from the
                 internet or network share) must be signed. Local scripts
                 can be run without signing.
  Unrestricted - All scripts can be run, regardless of where it came from
                 and whether or not they are signed. 

  In addition these can have scope.
  MachinePolicy - Applies to all users on the machine. Must be set via 
                  Group Policy.
  UserPolicy    - Applies to the current user. Again, must be done via
                  Group Policy.
  Process       - Applies only to the current process. Once the process 
                  completes (i.e. the PS window is closed) the previous
                  setting is restored.
  CurrentUser   - Setting is only valid for this user. 
  LocalMachine  - Setting is valid for all users of this computer. 

  Best practice suggests only enabling script execution if you need it. 
  Then, set to RemoteSigned so you can run the scripts you develop but
  will have some protection from malicious scripts from the web.
#&gt;

# With Restricted Policy, can't run script
Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope CurrentUser 
. 'C:\PS\Beginning PowerShell Scripting for Developers\demo\bpsd-m06-do-something.ps1'

# With RemoteSigned we can run our script
Set-Location 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser 
. '.\bpsd-m06-do-something.ps1'

# With Unrestricted we can run anything
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser 

Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine
$doSomething = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\bpsd-m06-do-something.ps1'
. $doSomething
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>02_CreateFoldersForLog_and_Modules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>02_CreateFoldersForLog_and_Modules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'So to create it, first create the folders: 
'NOTE: For Windows 7 use the "My Documents" folder rather than the "Documents" folder 
-------------------------------------------
C:\Users\ggarson\Documents\WindowsPowerShell   '{already created in previous step}
C:\Users\ggarson\Documents\WindowsPowerShell\log
C:\Users\ggarson\Documents\WindowsPowerShell\Modules

\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell
\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell\log
\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell\Modules

#'	DECIDED NOT TO USE THIS ONE:				C:\Users\ggarson\Documents\WindowsPowerShell\transcript
C:\DATA\junkPowerShellTranscripts
C:\DATA\PowerShellScripts
C:\JUNK						'&lt;===== This is for the transcript files

'For each of the Modules included by the Profile, you need to create a folder:
C:\Users\ggarson\Documents\WindowsPowerShell\Modules\PowerShellISEModule



'Then create the empty text file:
C:\Users\ggarson\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1  '{already created in previous step}
C:\Users\ggarson\Documents\WindowsPowerShell\Modules\PowerShellISEModule\PowerShellISEModule.psm1

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>05_PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>05_PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

#'-------------------------------------------------------Drives for Powershell
New-PSDrive –Name “W” –PSProvider FileSystem –Root "\\win10vm\ALL_Share" –Persist
New-PSDrive –Name “J” –PSProvider FileSystem –Root "\\jphsa.org\shared\Users\ggarson" –Persist
#'-------------------------------------------------------

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

Function gig-commentIt
{
 &lt;#
   .Synopsis
    This function will add a remark #' character to beginning of line
   .Description
    This function will add a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to comment out
    a section of PowerShell code. 
   .Example
    Add-RemarkedText
    adds the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ("#'" + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-commentIt

Function gig-unCommentIt
{
 &lt;#
   .Synopsis
    This function will remove a remark #' character to beginning of line
   .Description
    This function will remove a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to clean up a 
    previously commentted out section of PowerShell code. 
   .Example
    gig-unCommentIt
    Removes the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($l -replace "#'",''),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-unCommentIt


Function gig-editProfile
{

 psedit $profile

 #'ISE $profile

} #'end function gig-editProfile

Function gig-addHelp
{
  &lt;#
   .Synopsis
    This function adds help at current insertion point 
   .Example
    add-help
    adds comment based help at current insertion point 
   .Notes
    NAME:  Add-Help
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016
    HSG: WES-09-11-10
    KEYWORDS: Scripting Techniques, Windows PowerShell ISE
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $helpText = @"
 &lt;#
   .Synopsis
    This does that 
   .Description
    This function does
   .Example
    Example-
    Example- accomplishes 
   .Parameter 
    The parameter
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS:
    HSG: 
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
"@
 $psise.CurrentFile.Editor.InsertText($helpText)
} #'end function gig-addHelp

Function gig-addHeaderToScript
{
  &lt;#
   .Synopsis
    This function adds header information to a script 
   .Example
    Add-HeaderToScript
    Adds header comments to script 
   .Example 
    AH
    Uses alias to add header comments to script
   .Notes
    NAME:  Add-HeaderToScript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS: $keyword
    HSG: $hsg
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($keyword, $comment, $hsg)
 $header = @"
#' -----------------------------------------------------------------------------
#' Script: $(split-path -Path $psISE.CurrentFile.FullPath -Leaf)
#' Author: glenn garson, JPHSA
#' Date: $(Get-Date)
#' Keywords: $keyword
#' comments: $comment
#'
#' -----------------------------------------------------------------------------
"@
 $psise.CurrentFile.Editor.InsertText($header)
} #'end function gig-addHeaderToScript

Function gig-getLogNameFromDate
{
  &lt;#
   .Synopsis
    Creates a log name from date
   .Description
    This script creates a log from a date. 
   .Example
    gig-getLogNameFromDate -path "c:\jumk" -name "log"
    Creates a file name like c:\JUNK\log20100914-122019.Txt but does not
    create the file. It returns the file name to calling code.
   .Example
    gig-getLogNameFromDate -path "c:\JUNK" -name "log" -Create
    Creates a file name like c:\JUNK\log20100914-122019.Txt and
    create the file. It returns the file name to calling code.
   .Parameter path
    path to log file
   .Parameter name
    base name of log file
   .Parameter create
    switch that determines whether log file or only name is created
   .inputs
    [string]
   .outputs
    [string]
   .Notes
    NAME:  gig-getLogNameFromDate
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 16:58:06
    KEYWORDS: parameter substitution, format specifier, string substitution
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param(
  [string]$path = "c:\JUNKC:\DATA\junkPowerShellTranscripts",
  [string]$name = "log",
  [switch]$Create
 )
 $logname = "{0}\{1}{2}.{3}" -f $path,$name, `
    (Get-Date -Format yyyyMMdd-HHmmss),"Txt"
 if($create) 
  { 
   New-Item -Path $logname -ItemType file -force | out-null
   $logname
  }
 else {$logname}
} #' end function gig-getLogNameFromDate

Function gig-start_ISE_Transcript
{
  &lt;#
   .Synopsis
    This captures output from a script to a created text file
    To use the gig-start_ISE_Transcript function, add the call to the function at the bottom of your script.
   .Example

    xxxxx...{your script}
    gig-start_ISE_Transcript -logname "c:\junk\log.txt"

    Copies output from script to file named xxxxlog.txt in c:\junk folder
   .Parameter logname
    the name and path of the log file.
   .inputs
    [string]
   .outputs
    [io.file]
   .Notes
    NAME:  gig-start_ISE_Transcript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 17:27:22
    KEYWORDS:
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
  Param(
   [string]$logname = (gig-getLogNameFromDate -path $transcriptHome -name "log" -Create)
  )
  $transcriptHeader = @"
**************************************
Windows PowerShell ISE Transcript Start
Start Time: $(get-date)
UserName: $env:username
UserDomain: $env:USERDNSDOMAIN
ComputerName: $env:COMPUTERNAME
Windows version: $((Get-WmiObject win32_operatingsystem).version)
**************************************
Transcript started. Output file is $logname
"@
 $transcriptHeader &gt;&gt; $logname
 $psISE.CurrentPowerShellTab.ConsolePane.Text &gt;&gt; $logname
 “Log saved to $logname”
} #'end function gig-start_ISE_Transcript

function gig-indentText_x_spaces
{
  &lt;#
   .Synopsis
    This function will indent text in the ISE a specific number
   .Description
    This function will indent selected text in the PowerShell ISE. These are
    real spaces, not tabs. Therefore this is appropriate for situations where
    an actual tab "`t" will not work. 
   .Example
    gig-indentText_x_spaces -space 5
    moves selected text five spaces 
   .Parameter spaces
    The number of spaces to indent the selected text. Note this number cannot
    be a negative number, and this function does not "unindent" the selected text.
   .Notes
    NAME:  gig-indentText_x_spaces
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 06/11/2012 17:16:29
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-6-17-12
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param([int]$space = 1)
 $tab = " " * $space
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($tab + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'end function gig-indentText_x_spaces

Function gig-editModule
{
  &lt;#
   .Synopsis
    This opens a module stored in the $env:PSModulePath location on a new tab in ISE 
   .Description
    This function uses Get-Module to retrieve a module from $env:PSModulePath and then
    it opens the module from that location into a new tab in ISE for editing. Wildcard
    characters that resolve to a single module are supported.
   .Example
    gig-editModule PowerShellISEModule
    gig-editModule PowerShellISEModule opens the PowerShellISEModule into a new tab in the
    ISE for editing 
  .Example
    gig-editModule PowerShellISE*
    gig-editModule PowerShellISE* opens the PowerShellISEModule into a new tab in the
    ISE for editing by using a wild card character for the module name
   .Parameter Name
    The name of the module. Wild cards that resolve to a single module are supported
   .Notes
    NAME:  gig-editModule
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 18:14:19
    KEYWORDS: Scripting Techniques, Modules
    HSG: WES-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($name)
 ISE (Get-Module -ListAvailable $name).path
} #'end function gig-editModule

Function gig-toggleOutlineView
{
  &lt;#
   .Synopsis
    This function toggles the outline view in the ISE 
   .Description
    This function toggles the outline view in the ISE. It will expand 
    or collapse all functions in the current script pane.
   .Example
    gig-toggleOutlineView
    gig-toggleOutlineView will either expand or collapse all functions 
   .Notes
    NAME:  gig-toggleOutlineView
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 19:28:37
    KEYWORDS: Scripting Techniques, Modules
    HSG: wes-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 3.0
 #&gt;
 $psise.CurrentFile.Editor.ToggleOutliningExpansion()
} #'end function gig-toggleOutlineView


#'added Functions from New-ModulesDrive.ps1
#' HSG-1-20-10
Function gig-newModuleDrives
{
&lt;#
    .SYNOPSIS
    Creates two PSDrives: myMods and sysMods
    .EXAMPLE
    gig-newModuleDrives
    Creates two PSDrives: myMods and sysMods. These correspond 
    to the users' modules folder and the system modules folder respectively. 
#&gt;
 $driveNames = "myMods","sysMods"

 For($i = 0 ; $i -le 1 ; $i++)
 {
  New-PsDrive -name $driveNames[$i] -PSProvider filesystem `
  -Root ($env:PSModulePath.split(";")[$i]) -scope Global |
  Out-Null
 } #'end For
} #'end gig-newModuleDrives

Function gig-getFileSystemDrives
{
&lt;#
    .SYNOPSIS
    Displays global PS Drives that use the Filesystem provider
    .EXAMPLE
    gig-getFileSystemDrives
    Displays global PS Drives that use the Filesystem provider
#&gt;
 Get-PSDrive -PSProvider FileSystem -scope Global
} #'end gig-getFileSystemDrives

Function gig-OpenPath
{
 &lt;#
   .Synopsis
    Opens a path in Explorer 
   .Description
    Opens a path in Explorer, default path is C:\, or the first parameter is the path
   .Example
    gig-OpenPath C:\Junk
    gig-OpenPath $moduleHome 
   .Parameter Path
    The path to open in Explorer
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/26/2016 17:31:28
    KEYWORDS:
    HSG: 
   .Link
     
 #'Requires -Version 2.0
 #&gt;
  Param(
  [string]$path = "C:\"
 )
 Invoke-Item -Path $path
 }


 function gig-LoadNetworkPSDrives
{
#'    net use G: "\\Jphsa.org\shared\Data" 
#'    net use H: "\\Jphsa.org\shared\Users\ggarson\" 
#'    net use I: "\\Jphsa-ebhost2\AnasaziFiles\" 
#'    net use M: "\\Jphsa.org\shared\Data\MIS\" 
#'    net use N: "\\Jphsa-ebfile01\e$\" 
#'    net use P: "\\Jphsa.org\shared\Users\ggarson\PROJECTS"


    New-PSDrive -Name "D" -PSProvider "FileSystem" -Root "\\CBTBRFS02\Credit\Credit Risk\Month-End Reports V2\SQL Queries\" -scope Global
    New-PSDrive -Name "M" -PSProvider "FileSystem" -Root "\\CBTBRFS02\Accounting\Managerial Accounting\" -scope Global
    New-PSDrive -Name "N" -PSProvider "FileSystem" -Root "\\CBTBRFS02\Credit\Credit Risk\" -scope Global
    New-PSDrive -Name "P" -PSProvider "FileSystem" -Root "\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\Data\Projects\" -scope Global
    New-PSDrive -Name "N" -PSProvider "FileSystem" -Root "\\cbt.corp.com\cbt-dfs\Accounting\Managerial Accounting\CRD Reports\" -scope Global
    New-PSDrive -Name "P" -PSProvider "FileSystem" -Root "\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\"-scope Global


} 
 
#' *** Alias ***
#'if(!(Test-Path alias:ah))
#' {
#'  New-Alias -Name ah -Value add-headertoscript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:abh))
#' {
#'  New-Alias -Name abh -Value Add-SBSBookHeaderToScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ahlp))
#' {
#'  New-Alias -Name ahlp -Value add-help -Description "MrEd alias" |
#'  Out-Null
#'  }
#'  if(!(Test-Path alias:ras))
#' {
#'  New-Alias -Name ras -Value Remove-AliasFromScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:gfsd))
#' {
#'  New-Alias -Name gfsd -Value gig-getFileSystemDrives -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:cs))
#' {
#'  New-Alias -Name cs -value Copy-ScriptToNewTab -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ar))
#' {
#'  New-Alias -Name ar -value Add-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:rr))
#' {
#'  New-Alias -Name rr -value Remove-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:em))
#' {
#'  New-Alias -Name em -value Edit-Module -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:iem))
#' {
#'  New-Alias -Name iem -value Import-EveryModule -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:sov))
#' {
#'  New-Alias -Name sov -value gig-toggleOutlineView -Description "MrEd alias" |
#'  Out-Null
#'  }



#' *** Variables ***
if(!(Test-Path variable:moduleHome))
{
 new-variable -name moduleHome -value "$env:userProfile\documents\WindowsPowerShell\Modules"
}
#'if(!(Test-Path variable:backupHome))
#'{
#' new-variable -name backupHome -value "$env:userProfile\documents\WindowsPowerShell\profileBackup"
#'}

if(!(Test-Path variable:TranscriptHome))
{
 new-variable -name TranscriptHome -value "C:\DATA\junkPowerShellTranscripts"
 #' new-variable -name TranscriptHome -value "$env:userProfile\documents\WindowsPowerShell\transcript"
}

if(!(Test-Path variable:myScripts))
{
 new-variable -name myScripts -value "C:\DATA\PowerShellScripts"
}

Set-Location $myScripts

Clear-Host

gig-LoadNetworkPSDrives

Export-ModuleMember -alias * -function * -variable *

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_on_Client</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WUAUCLT</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_on_Client</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WUAUCLT</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/DetectNow				Detect and download updates that are available (will vary by system settings)
/ReportNow				Tell the client to report its status back to the WSUS server
/RunHandlerComServer	
/RunStoreAsComServer	
/ShowSettingsDialog		Show Windows Update settings dialog
/ShowWindowsUpdate		Shows the windows update dialog box or web page (depending on windows version)
/ResetAuthorization		when an update check occurs a cookie is stored that prevents a new update or check for 1 hour. So, you should use this to delete this cookie
/ResetEulas				Resets the accepted EULA's
/ShowWU					Shows the windows update dialog on windows vista and above. Opens Windows update on XP
/SelfUpdateManaged		Scan for windows updates using WSUS
/SelfUpdateUnmanaged	Triggers a windows update scan using the windows update website
/ShowOptions			Open the windows update settings window
/ShowFeaturedOptInDialog	Show Opt-In dialog for featured updates
/DemoUI					Show the icons for windows update
/ShowFeaturedUpdates	Open windows update dialog and shows the featured updates
/ShowWUAutoScan	
/UpdateNow				Install updates now


'If all you want to do is detect and install updates right now, you would run:
Wuauclt /dectectnow /updatenow

'If it is refusing to install, you can run:
Wuauclt /resetauthorization

'If you want to have the client report its status back to the WSUS server, you would run:	
Wuauclt /reportnow

-------------------------------------------------------------------------
The wuauclt /detectnow option initiates a detection on all systems, 
	the behavioral differences are a function of the setting of the Configure Automatic Updates policy.

If AUOption='4' (as you have for your workstations), 
	the command will detect available updates, automatically queue updates for download via BITS,
	and automatically schedule those updates for installation at the configured time 
	when the download has been successfully completed.

If AUOption='3' (Notify for Install), the command will detect available updates, 
	automatically queue updates for download via BITS, and then (on WinXP/2003) 
	present a notification to any logged on Administrator inviting them to install the updates 
	or (on Vista and later) present and enable the Install Updates button in the Control Panel WUApp 
	for any user who is not restricted from installing updates.

If AUOption='2' (Notify for Download), the command will detect available updates and (on WinXP/2003) 
	present a notification to any logged on Administrator inviting them to download the updates or 
	(on Vista and later) --- Hmm... actually,
	I've never personally see the WUApp on a machine configured with AUOption-'2'! --- 
		but my expectation would be that the WUApp presents a "Download Now" button, 
		rather than an "Install Now" button.

By default, the WUAgent executes a detection 17.6-22.0 hours after the completion of the previous regular detection event. 
	Using wuauclt /detectnow causes the previously scheduled detection to be 'rescheduled' 
	17.6-22.0 hours after the completion of the on-demand event. 
	The detection interval can be configured in policy to a shorter interval, 
	but should be matched (logically) with your server synchronization event, 
	and your approval processes. 
If your server is set to synchronize once-per-day, and your approval process is not a daily occurrence, 
	there is NO value in setting the interval to a shorter value. 
If your server is set to synchronize more than once per day and you approve updates on a daily basis, 
	there may be value in setting the detection interval to a shorter period, 
	consistent with the server synchronization interval.

=============================================================
Force Detection of Updates and Report to the WSUS Server: 
wuauclt.exe /detectnow /reportnow

Windows Update Log (Checking Errors/Process Status): 
%WINDIR%\WindowsUpdate.log

Cleanup all cached files and force detection: 
net stop wuauserv 
rmdir /S /Q C:\winnt\softwaredistribution 
net start wuauserv 
wuauclt.exe /resetauthorization /detectnow

Delete winhttpproxy settings: 
proxycfg -d

wuauclt /detectnow /register /reportnow</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>approval_automation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>approval_automation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://4sysops.com/archives/automating-wsus-with-powershell/

#'First I load the Windows Update Assembly, so I can use the WSUS .NET object. 
#'Then I'm preparing the variables that I need to work with the WSUS object:
#'
#'$wsus: is the WSUS object.
#'$UpdateScope: Defines the time interval for the $wsus.GetUpdates() method.
#'$groups: Defines all WSUS groups I'd like to approve updates for.
#'$Classification: Defines updates classifications for the $wsus.GetUpdates() method. 
#'                    I'm filtering out service packs, drivers, and upgrades.
#'$Categories: Defines updates categories or products for the $wsus.GetUpdates() method. 
#'                I'm filtering out SQL and Skype updates. SQL gets updated manually, and I don't have Skype installations in my environment.
#'
#'Then I'm setting up the Update Scope interval to get only updates created within the last month. 
#'I know I'm approving my updates every month, so I only need to get recently released updates.
#'
#'After that, I'm assigning the $Classification and $Categories variables to the corresponding objects. 
#'And with the help of the $wsus.GetUpdates($UpdateScope) method, 
#'    I am saving all updates that match my scope to the $updates variable. 
#'Then I'm adding some filtering to remove updates such as LanguagePack, FeatureOnDemand, 
#'    and Itanium from the results because I don't have these kinds of updates in my environment.
#'
#'Now I have all updates I want to approve. 
#'    Next, I'm looping through the WSUS groups to which I want to assign the updates. 
#'Then I loop through the updates, approving every update for every group. 
#'    In this particular case, there is only one group. However, 
#'    I use a loop here, just to be able to add more groups later.
#'
#'After approving all updates, I only need to update the log file and send this file by email to myself. 
#'    This way, I am sure I've approved the updates, and I receive brief information about them.
#'
#'Like before, I'm using Task Scheduler to run the script:

==============================================================
[string[]]$recipients = admins@contoso.com #'Email address where you want to send the notification after the script completes
 
$wsusserver = "wsus" #'  &lt;=============  WSUS server name
 
$log = "C:\Temp\Approved_Updates_{0:MMddyyyy_HHmm}.log" -f (Get-Date) #'Log file name
 
new-item -path $log -type file -force #'Creating log file
 
[void][reflection.assembly]::LoadWithPartialName ("Microsoft.UpdateServices.Administration")				 #'Loading the WSUS .NET classes
 
$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer($wsusserver, $False,8530)				 #'Storing the object into the variable
 
$UpdateScope = New-Object Microsoft.UpdateServices.Administration.UpdateScope 				#'Loading WSUS Update scope object into variable
 
$groups = "All Computers" 				#'Setting up groups for updates approval
 
$Classification = $wsus.GetUpdateClassifications() | ?{$_.Title -ne 'Service Packs' ‑and $_.Title -ne 'Drivers' -and $_.Title -ne 'Upgrades'} 			#'Setting up update classifications for approval
 
$Categories = $wsus.GetUpdateCategories() | ? {$_.Title -notmatch "SQL" -and $_.Title -notmatch "Skype"} #'Setting up update categories for approval
 
$UpdateScope.FromCreationDate = (get-date).AddMonths(-1) #'Configuring starting date for UpdateScope interval
 
$UpdateScope.ToCreationDate = (get-date) #'Configuring ending date for UpdateScope interval
 
$UpdateScope.Classifications.Clear() #'Clearing classification object before assigning new value to it
 
$UpdateScope.Classifications.AddRange($Classification) #'Assigning previously prepared classifications to the classification object
 
$UpdateScope.Categories.Clear() #'Clearing the categories object before assigning a new value to it
 
$UpdateScope.Categories.AddRange($Categories) #'Assigning previously prepared categories to the classification object
 
$updates = $wsus.GetUpdates($UpdateScope) | ? {($_.Title -notmatch "LanguageInterfacePack" -and $_.Title -notmatch "LanguagePack" -and $_.Title -notmatch "FeatureOnDemand" -and $_.Title -notmatch "Skype" -and $_.Title -notmatch "SQL" -and $_.Title -notmatch "Itanium" -and $_.PublicationState -ne "Expired" -and $_.IsDeclined -eq $False )}		 #'Storing all updates in the previously defined UpdateScope interval to the $updates variable and filtering out those not required
 
foreach ($group in $groups) #'Looping through groups
  {
   $wgroup = $wsus.GetComputerTargetGroups() | where {$_.Name -eq $group} #'Storing the current group into the $wgroup variable
   foreach ($update in $updates) #'Looping through updates
     {
      $update.Approve(“Install”,$wgroup) #'Approving each update for the current group
     }
  }
 
$date = Get-Date #'Storing the current date into the $date variable
 
"Aproved updates (on " + $date + "): " | Out-File $log -append #'Updating the log file
 
"Updates have been approved for following groups: (" + $groups + ")" | Out-File $log ‑append #'Updating log file
 
"Folowing updates have been approved:" | Out-File $log -append #'Updating the log file
 
$updates | Select Title,ProductTitles,KnowledgebaseArticles,CreationDate | ft -Wrap | Out-File $log -append #'Updating log file
 
#'Send-MailMessage -From "WSUS@contoso.com" -To $recipients -Subject "New updates have been approved" -Body "Please find the list of approved updates enclosed" -Attachments $log -SmtpServer "smtp-server" -DeliveryNotificationOption OnFailure #'Sending the log file by email.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>HashTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>HashTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#-----------------------------------------------------------------------------#
# Hash tables - use a text based key (rather than an integer in arrays) as the key
#               use squiggly brace {} ( rather than () as in Array)
#               prefix the brace with "@"
#               Use semicolon between the records  
#-----------------------------------------------------------------------------#

$hash = @{"Key"         = "Value"; 
          "PowerShell"  = "PowerShell.com"; 
          "Arcane Code" = "arcanecode.com"}
          
$hash                  # Display all values
$hash["PowerShell"]    # Get a single value from the key

$hash."Arcane Code"    # Get single value using object syntax, short-cut: period (.) followed by Key in quotes

# You can use variables as keys
$mykey = "PowerShell"
$hash.$mykey         # Using variable as a property
$hash.$($mykey)      # Evaluating as an expression, in this example this is the same as the previous line
$hash.$("Power" + "Shell")

# Adding and removing values
$hash                                     # Here's what's there to start
$hash["Pluralsight"] = "pluralsight.com"  # Add value using new key
$hash                                     # Show the additional row

$hash.Remove("Arcane Code")        # Remove by passing in key
$hash

# See if key exists
$hash.Contains("Pluralsight")      # Should be there =&gt; True
$hash.Contains("Arcane Code")      # Gone since we just removed it =&gt; False

# See if value exists
$hash.ContainsValue("PowerShell.com")  # Will be there  =&gt; True
$hash.ContainsValue("arcanecode.com")  # Not there since it was removed  =&gt; False

# List keys and values
$hash.Keys
$hash.Values

# Find if a key or value is present
$hash.Keys -contains "PowerShell"

$hash.Values -contains "PowerShell.com"


##
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_WorkFlows</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_WorkFlows</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_WorkFlows</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_WorkFlows</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_WorkFlows

'By design, workflows can be long-running, repeatable, frequent, parallelizable, 
'	interruptible, stoppable, and restartable. 
'	They can be suspended and resumed; they can also continue after an unexpected interruption, 
'	such as a network outage or computer restart.

#' Simplest Workflow: 
'	Running this code creates the workflow but it doesn’t run it—much the same as a Windows PowerShell function.
#' execute a workflow, 
'	simply type its name at the prompt and press Enter. The first time you run an individual workflow, be prepared for a slight delay before it actually executes.

A script workflow 
'	is a workflow written in the Windows PowerShell scripting language.





workflow helloworld {
"Hello World"
}

============================================================================================
Getting Started with Windows PowerShell Workflow
https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj134242(v=ws.11)

Writing a Script Workflow
https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj574157%28v%3dws.11%29

Syntactic Differences Between Script Workflows and Scripts
https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj574140%28v%3dws.11%29
============================================================================================
1] PowerShell Workflows: The Basics
https://blogs.technet.microsoft.com/heyscriptingguy/2012/12/26/powershell-workflows-the-basics/

2] PowerShell Workflows: Restrictions
https://blogs.technet.microsoft.com/heyscriptingguy/2013/01/02/powershell-workflows-restrictions/

3] PowerShell Workflows: Nesting
https://blogs.technet.microsoft.com/heyscriptingguy/2013/01/09/powershell-workflows-nesting/

4] PowerShell Workflows: Job Engine
https://blogs.technet.microsoft.com/heyscriptingguy/2013/01/16/powershell-workflows-job-engine/

5] PowerShell Workflows: Restarting the Computer
https://blogs.technet.microsoft.com/heyscriptingguy/2013/01/23/powershell-workflows-restarting-the-computer/

6]PowerShell Workflows: Using Parameters
https://blogs.technet.microsoft.com/heyscriptingguy/2013/01/30/powershell-workflows-using-parameters/

7] PowerShell Workflows: Design Considerations
https://blogs.technet.microsoft.com/heyscriptingguy/2013/02/06/powershell-workflows-design-considerations/

8] PowerShell Workflows: A Practical Example
https://blogs.technet.microsoft.com/heyscriptingguy/2013/02/13/powershell-workflows-a-practical-example/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_Button</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>confirm_Delete</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_Button</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>confirm_Delete</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Dim vChoice as Integer
vChoice = MsgBox("Are you sure you want to delete?", vbYesNo, "Confirm")
If vChoice = vbYes Then
   'Proceed further
Else
    Exit Sub
End If

' vbYes is a Constant for 6 and vbNo is a Constant for 7. 
'	Fortunately, Access is very forgiving in this, and reads the String 6 or 7 as a number.


'There is only 1 major problem with the previous approach. 
'What if a User Deletes a Record via the Menu Bar or Toolbar? 
'The following code, placed in the BeforeDelConfirm() Event, will cover all contingencies:


Private Sub Form_BeforeDelConfirm(Cancel As Integer, Response As Integer)
	Dim intResponse As Integer
	 
	'Suppress the Access Delete Confirmation Dialog Box, do not
	'prompt the User
	Response = acDataErrContinue
	 
	'Display your own Custom Delete Dialog Box
	intResponse = MsgBox("Delete Record(s)?", vbQuestion + vbYesNo + vbDefaultButton1, _
	                     "Record(s) Deletion")
	 
	If intResponse = vbYes Then
	  'do nothing and just fall through
	Else
	  Cancel = True     'Cancel the Deletion (don't Delete Record(s))
	End If
End Sub

' There are only 3 reasons that I can think of as to why it isn't working for you:
The code is not in the BeforeDelConfirm() Event Procedure of the Form.
The code is in the correct Procedure, but it is not the exact code that I had previously posted.
The words [Event Procedure] do not exist in the Before Del Confirm Property of the Form.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_QUERY</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>RunSQL_and_OpenQuery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_QUERY</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>RunSQL_and_OpenQuery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'http://www.fmsinc.com/microsoftaccess/query/action-queries/SuppressWarningMessages.htm
'===============================================================================
'RunSQL and OpenQuery are the simplest to invoke, 
'but they display the previously mentioned warnings, which require user interaction.

DoCmd.SetWarnings False

' OpenQuery executes a saved query 
' cstrQueryName is a constant with the name of an action query
DoCmd.OpenQuery cstrQueryName

' RunSQL executes a SQL string
DoCmd.RunSQL "DELETE FROM tblMyTable WHERE Bad = True;"

DoCmd.SetWarnings True


'One option for suppressing the messages is to SetWarnings False before running the queries, 
'then SetWarnings True after:

On Error GoTo PROC_ERR

  DoCmd.SetWarnings False
  DoCmd.OpenQuery cstrQueryName
  DoCmd.RunSQL "DELETE FROM tblMyTable WHERE Bad = True;"

  ' If it crashes before it gets here, warnings are not turned back on!
  DoCmd.SetWarnings True 

PROC_ERR:
  ' This is better, but not perfect. What if Access terminates unexpectedly?
  DoCmd.SetWarnings True


'This is not advisable for the following reasons:

Problem 1: Crash Could Leave Warnings Off
Problem 2: Number of Affected Row
Problem 3: Impacts Warning Setting
'===============================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_Classes_Records_Collections</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Use_UDT_To_ProcessColumnsOfData</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_Classes_Records_Collections</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Use_UDT_To_ProcessColumnsOfData</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'1] Button to call the UDTMain sub
'2] Module with the sub that does the work



///////// DATA Sample //////////////////
Store #	Style Number	Retail Price	Unit Sold	Unit On Hand
Store 340001	00012	8	0	1
Store 340001	00013	38	0	1
Store 340001	00016	38	0	1
Store 340001	0001M	1	0	1
Store 340001	00023	36	7	11
Store 340001	00025	36	0	1
Store 340001	00026	36	0	0
Store 340001	00027	36	6	11
Store 340001	00052	12.25	0	1
Store 340001	00053	27	9	5
Store 340001	00070	31	2	2
Store 340001	0008M	50	0	1
Store 340001	06089	18.25	0	1
Store 340002	00012	8	0	1
Store 340002	00013	38	0	1
Store 340002	00016	38	0	0
Store 340002	0001M	1	0	0
Store 340002	00023	36	2	3
Store 340002	00025	36	0	1
Store 340002	00026	36	0	1
Store 340002	00027	36	6	11
Store 340002	00052	12.25	0	0
Store 340002	00053	27	5	5
Store 340002	00070	31	4	5
Store 340002	0008M	50	0	1
Store 340002	00090	43	3	4
Store 340002	00113	40	0	0

////////////////////////////////////////////
'NOTE: the Main routine stores the data in an Outer Array {Stores}, and an inner Array {Styles}
Stores[ 
		(34001, Styles(
						00012,
						00013,
						00016,
						...
					   )
	    ), 
		(34002, Styles(
						00012,
						00013,
						00016,
						...
					   )
	    ),  
		....
	   ]


'1] Button to call the UDTMain sub
/////////////////////////////////////
Private Sub CommandButton1_Click()
    UDTMain
End Sub
/////////////////////////////////////




'2] Module with the sub that does the work
//////////////////////////////////////////////////////////////////////////


' Page 507
Public type Style
    StyleName As String
    Price As Single
    UnitsSold As Long
    UnitsOnHand As Long
End Type

'...
Public type Store
    Name As String
    Styles() As Style
End Type

' Page 507
Sub UDTMain()
    Dim FinalRow As Long
    Dim ThisRow As Long
    Dim ThisStore As Long
    Dim CurrRow As Long
    Dim TotalDollarsSold As Long
    Dim TotalUnitsSold As Long
    Dim TotalDollarsOnHand As Long
    Dim TotalUnitsOnHand As Long
    Dim ThisStyle As Long
    Dim StoreName As String
    
    ReDim Stores(0 To 0) As Store ' The UDT is declared

    FinalRow = Cells(Rows.Count, 1).End(xlUp).Row
    ' The following For loop fills both arrays. The outer array is filled with the
    ' store name and an array consisting of product details.
    ' To accomplish this, the store name is tracked and when it changes,
    ' the outer array is expanded.
    ' The inner array for each outer array expands with each new product
    For ThisRow = 2 To FinalRow
        StoreName = Range("A" &amp; ThisRow).Value
        ' Checks whether this is the first entry in the outer array
        If LBound(Stores) = 0 Then
            ThisStore = 1                                                       '&lt;==  Assign This store if first 
            ReDim Stores(1 To 1) As Store										'&lt;== Expands outer array
            Stores(1).Name = StoreName
            ReDim Stores(1).Styles(0 To 0) As Style								'&lt;== Creates inner Array for first element of outer array
        Else
            For ThisStore = LBound(Stores) To UBound(Stores)					'&lt;== This For loop either keeps ThisStore equal to what it was,  
                If Stores(ThisStore).Name = StoreName Then Exit For				'		of if the name has changed, bumps it up by 1 as it leaves the loop
            Next ThisStore
            If ThisStore &gt; UBound(Stores) Then											'&lt;== Now either ThisStore is unchanged b/c the name has not changed, or
                ReDim Preserve Stores(LBound(Stores) To UBound(Stores) + 1) As Store	'	 it is greater than the previous UBound, in that case
                Stores(ThisStore).Name = StoreName										' 	 the array is bumped up in size, and a new name is stored in: .Name
                ReDim Stores(ThisStore).Styles(0 To 0) As Style                         '    and then it Creates inner Array for new element of outer array
            End If
        End If
        With Stores(ThisStore)
            If LBound(.Styles) = 0 Then												    '&lt;== if Brand new, it makes it Base 1, but does NOT resize it
                ReDim .Styles(1 To 1) As Style
            Else
                ReDim Preserve .Styles(LBound(.Styles) To _								 '&lt;== if NOT Brand new, it does resize it							'
                    UBound(.Styles) + 1) As Style
            End If
            With .Styles(UBound(.Styles))												'&lt;== now it Populates it from the columns: B:E
                .StyleName = Range("B" &amp; ThisRow).Value
                .Price = Range("C" &amp; ThisRow).Value
                .UnitsSold = Range("D" &amp; ThisRow).Value
                .UnitsOnHand = Range("E" &amp; ThisRow).Value
            End With
        End With
    Next ThisRow

    ' Create a report on a new sheet
    Sheets.Add
    Range("A1:E1").Value = Array("Store Name", "Units Sold", _
        "Dollars Sold", "Units On Hand", "Dollars On Hand")
    CurrRow = 2
    For ThisStore = LBound(Stores) To UBound(Stores)
        With Stores(ThisStore)
            TotalDollarsSold = 0
            TotalUnitsSold = 0
            TotalDollarsOnHand = 0
            TotalUnitsOnHand = 0
            ' Go through the array of product styles within the array
            ' of stores to summarize information
            For ThisStyle = LBound(.Styles) To UBound(.Styles)
                With .Styles(ThisStyle)
                    TotalDollarsSold = TotalDollarsSold + .UnitsSold * .Price
                    TotalUnitsSold = TotalUnitsSold + .UnitsSold
                    TotalDollarsOnHand = TotalDollarsOnHand + .UnitsOnHand * .Price
                    TotalUnitsOnHand = TotalUnitsOnHand + .UnitsOnHand
                End With
            Next ThisStyle
            'AFTER all the styles for the Store, print the sums
            Range("A" &amp; CurrRow &amp; ":E" &amp; CurrRow).Value = _
                Array(.Name, TotalUnitsSold, TotalDollarsSold, _
                TotalUnitsOnHand, TotalDollarsOnHand)
        End With
        'INCREMENT the counter
        CurrRow = CurrRow + 1
    Next ThisStore
End Sub



//////////////////////////////////////////////////////////////////////////</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_GeneralWorkSheet</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>FinalRow</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_GeneralWorkSheet</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>FinalRow</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>' Gets the final row of a worksheet.

'1] Go to the very last row of the worksheet, in the first column
'2] Then go back up to the first occupied cell

'For an empty sheet the FinalRow is = 1


Sub TEST()
    Dim FinalRow As Integer
    Sheet1.Select
    FinalRow = Cells(Rows.Count, 1).End(xlUp).Row
    MsgBox ("FinalRow: " &amp; CStr(FinalRow))
    
End Sub

///////////////////////////////////////////////////////

Function fn_lLastRow(sWorkSheetName As String) As Long
    Dim lX As Long
    

    Dim wsX As Worksheet
    
    Set wsX = Sheets(sWorkSheetName)
    lX = wsX.Cells(Rows.Count, 1).End(xlUp).Row
    
    fn_lLastRow = lX
    
'    MsgBox (CStr(lX))
    
End Function

Function fn_lLastColumn(sWorkSheetName As String) As Long

    Dim lX As Long

    Worksheets(sWorkSheetName).Cells(1, Columns.Count).End(xlToLeft).Select


    lX = Worksheets(sWorkSheetName).Cells(1, Columns.Count).End(xlToLeft).Column
    
    fn_lLastColumn = lX
    
'    MsgBox (CStr(lX))
     
End Function


//////////////////////////////////
' FROM: http://stackoverflow.com/questions/4872512/last-not-empty-cell-in-row-excel-vba
'    do not use Select
'    cater for the last cell in row 1 being used
'    cater for the entire row being empty
'    cater for the entire row being full

'The Find method in the second code is a far more direct method of establishing the first non-blank cell
'----------------------------------------------------
'This Line:

Set rng1 = ws.Rows(1).Find("*", ws.[a1], xlValues, , xlByColumns, xlPrevious)

'says, start in cell A1 of Sheet "DTCa" then look backwards
'(ie from the last cell in row 1) in row1 by column looking for anything (the *).
'This method either find the last non blank or returns Nothing , ie an empty row
'------------------------------------------------------


Sub Method1()
    Dim ws As Worksheet
    Dim rng1 As Range
    Set ws = Sheets("DTCs")
    If ws.Cells(1, Columns.Count) = vbNullString Then
        Set rng1 = ws.Cells(1, Columns.Count).End(xlToLeft)
        If rng1.Column &lt;&gt; 1 Then
            'return last used cell
            MsgBox "rng1 contains " &amp; rng1.Address(0, 0)
        Else
            If Application.WorksheetFunction.CountA(ws.Rows(1)) = Columns.Count Then
                'row is completely full
                MsgBox ws.Name &amp; " row1 is completely full", vbCritical
                'row is completely empty
            ElseIf ws.[a1] = vbNullString Then MsgBox ws.Name &amp; " row1 is completely empty", vbCritical
            Else
                'true last used cell is A1
                MsgBox "rng1 contains " &amp; rng1.Address(0, 0)
            End If
        End If
    Else
        'last cell is non-blank
        MsgBox ws.Cells(1, Columns.Count) &amp; " contains a value@,vbcritical"
    End If
End Sub

Sub Method2()
    Dim ws As Worksheet
    Dim rng1 As Range
    Set ws = Sheets("DTCs")
    Set rng1 = ws.Rows(1).Find("*", ws.[a1], xlValues, , xlByColumns, xlPrevious)
    If Not rng1 Is Nothing Then
        MsgBox "rng1 contains " &amp; rng1.Address(0, 0)
    Else
        MsgBox ws.Name &amp; " row1 is completely empty", vbCritical
    End If
End Sub


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_MISC</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Compile_Error_PtrSafe_update_for_use_on_64bit</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_MISC</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Compile_Error_PtrSafe_update_for_use_on_64bit</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Compile Error:
The code in this project must be updated for use on 64-bit sytems. 
Please review and upldate Declare statements and then mark them with the PtrSafe Attribute

'Example of code that caused the problem:
Private Declare Function SHGetPathFromIDList Lib "shell32.dll" _
    Alias "SHGetPathFromIDListA" (ByVal pidl As Long, ByVal pszPath As String) As Long
Private Declare Function SHBrowseForFolder Lib "shell32.dll" _
    Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
    
///////////////////////////////////////////////////////////////////////////////////////////////////////////
'FROM: https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2010/ee691831(v=office.14)
'examples: https://www.jkp-ads.com/articles/apideclarations.asp
    
Declare Function RegOpenKeyA Lib "advapi32.dll" (ByVal Key As Long, ByVal SubKey As String, NewKey As Long) As Long   
'change to:
Declare PtrSafe Function RegOpenKeyA Lib "advapire32.dll" (ByVal hKey as LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long 

'EXAMPLE: LEGACY CODE =================================================================================

    Declare Function SHBrowseForFolder Lib "shell32.dll" _
      Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
      
    Public Type BROWSEINFO
      hOwner As Long
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As Long
      lParam As Long
      iImage As Long
    End Type
  
 'NEW VBA CODE: =================================================================================
     #if VBA7 then    ' VBA7 
    Declare PtrSafe Function SHBrowseForFolder Lib "shell32.dll" _
      Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
    
    Public Type BROWSEINFO
      hOwner As LongPtr
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As LongPtr
      lParam As LongPtr
      iImage As Long
    End Type
     
    #else    ' Downlevel when using previous version of VBA7
    
    Declare Function SHBrowseForFolder Lib "shell32.dll" _
      Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
    
    Public Type BROWSEINFO
      hOwner As Long
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As Long
      lParam As Long
      iImage As Long
    End Type
     
    #end if
    Sub TestSHBrowseForFolder ()
        Dim bInfo As BROWSEINFO
        Dim pidList As Long
    
        bInfo.pidlRoot = 0&amp;
        bInfo.ulFlags = &amp;H1
        pidList = SHBrowseForFolder(bInfo)
    End Sub
    
 /////////////////////////////////////////////////////////////////////////////////////   </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_MISC</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Password_removeFromVBA</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_MISC</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Password_removeFromVBA</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://confluence.jaytaala.com/display/TKB/Remove+Excel+VBA+password

Remove Excel VBA password
Skip to end of metadata
Created by Jay Ta'ala on Nov 14, 2017 Go to start of metadata
Problem
I usually don't deal with VBA (thank goodness) - but I have been asked on several occasions to remove a VBA password from an excel workbook.  In the instances that I did (remove the password) it was not for nefarious purposes, but because someone had either forgotten the password or had a file they were now responsible for and the previous user had (who set the password) had left the company.

Plus, I quite enjoyed removing passwords with this approach since it reminded me of my youth and hex-editing files (anyone remember hex-editing SimCity 2000 saves to give you lots of money??).

Solution
You'll need a hex-editor for this.  Something like trusty ol' XVI32.

Make sure you have a backup of the file in case something goes wrong.

.xls (or .xla)
These are older files but they are still around.  Open the file in your hex-editor and find for text string "DPB":



Now basically just click on the B in DPB and replace it with an "x", like this:



Save and exit your hex-editor.

Your not done yet...
Open the file in excel - you may receive a couple of error notifications, just click through them.

Open the Visual Basic window (usually ALT+F11 if I remember correctly) and open the VBAProject properties (Tools menu).

Click on the Protection tab and change (do not remove at this stage) the password to something short and easy to remember (we'll be removing in next step).



Save the workbook and then close and reopen.

Open again the Visual Basic window and enter the password you just put in.  Redo the previous step but this time you can remove (delete) the password.

Save the workbook and you have now removed the password.

.xlsm
For xlsm files you need to do an extra step at the start.  Basically xlsm is a zipped format, so rename the extension to .zip and do the following:

open and open "xl" folder
extract "vbaProject.bin"
do hexedit method (see left)
save and reinsert into zip
rename back to xlsm.
repeat steps previously outlined by changing and then removing the password.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_WriteToSheet</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Write_OutlookMSG_Record_ToSheet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_WriteToSheet</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Write_OutlookMSG_Record_ToSheet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Sub WriteRecordToSheet(o_MSG As c_MSG, sSheetNameToWriteTo As String, lRowToWriteTo As Long)
                


   Dim rngRef As Range
   Dim rRangeToDelete As Range
   
   Dim iCol As Integer


   ''Get the controlling variables


   
    Set rngRef = Worksheets(sSheetNameToWriteTo).Cells(lRowToWriteTo, 1)
        

   
   ''Erase any previous entries
    'rngRef.EntireRow.ClearContents


'    rngRef.Cells(lRowToWriteTo, 1) = sLineOfText

    'Write the  data
    rngRef.Cells(1, 1) = o_MSG.prp_sFPBillNumber
    rngRef.Cells(1, 2) = o_MSG.prp_sVetLastIntial
    rngRef.Cells(1, 3) = o_MSG.prp_sSSN
    rngRef.Cells(1, 4) = o_MSG.prp_sAmount
    rngRef.Cells(1, 5) = o_MSG.prp_sDate
    rngRef.Cells(1, 6) = o_MSG.prp_sReason
    rngRef.Cells(1, 7) = o_MSG.prp_sAdjustmentBy
    rngRef.Cells(1, 8) = o_MSG.prp_sBillStatus
    rngRef.Cells(1, 9) = o_MSG.prp_sWarning









    Set rngRef = Nothing
    
    
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>IsExcelRunning</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>IsExcelRunning</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords>VBA  "Is Excel Running"</Keywords>
        <Imports />
        <Code>'This example uses the GetObject function to get a reference to a specific Microsoft Excel worksheet (MyXL).
'It uses the worksheet's Application property to make Microsoft Excel visible, to close it, and so on.
'Using two API calls, the DetectExcel Sub procedure looks for Microsoft Excel, and if it is running,
'enters it in the Running Object Table. The first call to GetObject causes an error if Microsoft Excel isn't
'already running. In the example, the error causes the ExcelWasNotRunning flag to be set to True.
'The second call to GetObject specifies a file to open. If Microsoft Excel isn't already running,
'the second call starts it and returns a reference to the worksheet represented by the specified file, mytest.xls.
'The file must exist in the specified location; otherwise, the Visual Basic error Automation error is generated.
'Next the example code makes both Microsoft Excel and the window containing the specified worksheet visible.
'Finally, if there was no previous version of Microsoft Excel running, the cod
'e uses the Application object's Quit method to close Microsoft Excel.
'If the application was already running, no attempt is made to close it.
'The reference itself is released by setting it to Nothing.



' Declare necessary API routines:
Declare Function FindWindow Lib "user32" Alias _
"FindWindowA" (ByVal lpClassName as String, _
                    ByVal lpWindowName As Long) As Long

Declare Function SendMessage Lib "user32" Alias _
"SendMessageA" (ByVal hWnd as Long,ByVal wMsg as Long, _
                    ByVal wParam as Long, _
                    ByVal lParam As Long) As Long


Sub GetExcel()
    'Reference: Microsoft Excel 12.0 Object Library
    On Error GoTo ErrorHandler

'===============================================================
    Dim MyXL As Object    ' Variable to hold reference                                ' to Microsoft Excel.
    Dim ExcelWasNotRunning As Boolean    ' Flag for final release.

' Test to see if there is a copy of Microsoft Excel already running.
    ' Getobject function called without the first argument returns a
    ' reference to an instance of the application. If the application isn't
    ' running, an error occurs:
    
    Set MyXL = GetObject(, "Excel.Application")

' Check for Microsoft Excel. If Microsoft Excel is running,
' enter it into the Running Object table.
    DetectExcel

' Set the object variable to reference the file you want to see.
'    Set MyXL = GetObject("c:\vb4\MYTEST.XLS")

    Set MyXL = GetObject("C:\Documents and Settings\vhaashgarsog\Desktop\JUNK\Junk_1Column_List.xlsx")


' Show Microsoft Excel through its Application property. Then
' show the actual window containing the file using the Windows
' collection of the MyXL object reference.
    MyXL.Application.Visible = True
    MyXL.Parent.Windows(1).Visible = True
    
'||||||||||||||||||||||||||||||||||||||||||||||||| START working with Excel Session ||||||||||
    
     'Do manipulations of your  file here.
    
    
    
'||||||||||||||||||||||||||||||||||||||||||||||||| STOP working with Excel Session ||||||||||
    
' If this copy of Microsoft Excel was not running when you
    ' started, close it using the Application property's Quit method.
    ' Note that when you try to quit Microsoft Excel, the
    ' title bar blinks and a message is displayed asking if you
    ' want to save any loaded files:
    
    If ExcelWasNotRunning = True Then
        MyXL.Application.Quit
    End If

    Set MyXL = Nothing    ' Release reference to the
                                ' application and spreadsheet.
'===============================================================
    Exit Sub

ErrorHandler:
    Select Case Err.Number
        Case 0
            MsgBox "Error: 0"
            
'        case ??
'            If Err.Number &lt;&gt; 0 Then ExcelWasNotRunning = True
'            Err.Clear    ' Clear Err object in case error occurred.
'
        Case Else
            Session.MsgBox Err.Number &amp; ", " &amp; Err.Description, vbExclamation + vbOKOnly
    End Select
    
End Sub

'================


Sub DetectExcel()
' Procedure dectects a running Excel and registers it.
    Const WM_USER = 1024
    Dim hWnd As Long
' If Excel is running this API call returns its handle.
    hWnd = FindWindow("XLMAIN", 0)
    If hWnd = 0 Then    ' 0 means Excel not running.
        Exit Sub
    Else
    ' Excel is running so use the SendMessage API
    ' function to enter it in the Running Object Table.
        SendMessage hWnd, WM_USER + 18, 0, 0
    End If
End Sub

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>M_Dates</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>02__02_DAX_calendar_fields</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>M_Dates</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>02__02_DAX_calendar_fields</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>LIST OF CUSTOM FIELDS:
'----------------------
DropDown_01_ToddTrawick_ID 
isLastMonth
isMTD
isMTD_aMonthAgo
isPreviousWeek
isSameWeekOfPreviousMonth_as_PreviousWeekOfThisMonth
isThisWeek
rankYYYYMM
rankYYYYWW
WeekNumberOfMonth
YYYYWW

'----------------------------------------------------------
'----------------------------------------------------------
DropDown_01_ToddTrawick_ID = 
//This is just an adhoc variable to accomodate Todd Trawick's non-standard custom Time periods
    (1* DimDate[isPreviousWeek]) +
    (10 * DimDate[isMTD]) +
    (100 * DimDate[isSameWeekOfPreviousMonth_as_PreviousWeekOfThisMonth]) +
    (1000 * DimDate[isMTD_aMonthAgo])
'----------------------------------------------------------
'----------------------------------------------------------
isLastMonth = 
    VAR _reportDay = TODAY()-1    
    //-----------------
    VAR _report_FilteredDimDate = FILTER(DimDate, DimDate[FullDateTime] = _reportDay)
    //-----------------
    VAR _report_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_report_FilteredDimDate)
    VAR _isLastMonth = IF( DimDate[rankYYYYMM] = (_report_RankYYYYMM -1) ,1,0)
    VAR output = _isLastMonth
return output
'----------------------------------------------------------
'---------------------------------------------------------- 
isMTD = 
VAR _reportDay = TODAY()-1  
VAR _reportYYYYMM = (YEAR(_reportDay) * 100) + MONTH(_reportDay)
VAR isMTD = IF(
                AND(
                    (DimDate[YearMonth] = _reportYYYYMM)
                    ,(DimDate[FullDateTime] &lt;= _reportDay)
                ),
                1,0
)
VAR output = isMTD
RETURN
output
'----------------------------------------------------------
'----------------------------------------------------------
isMTD_aMonthAgo = 

VAR _reportDay = TODAY()-1      //date(2021,11,18)       //

//-----------------
VAR _report_FilteredDimDate = FILTER(DimDate, DimDate[FullDateTime] = _reportDay)
//-----------------
VAR _report_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_report_FilteredDimDate)
VAR _report_DayNumberOfMonth = CALCULATE(MAXX(DimDate,DimDate[DayNumberOfMonth]) ,_report_FilteredDimDate)
//-----------------
VAR _previousMonth_FilteredDimDate = FILTER(DimDate, DimDate[rankYYYYMM] = (_report_RankYYYYMM-1) )
//-----------------
VAR _previousMonth_MAX_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_previousMonth_FilteredDimDate)

VAR _isMTD_aMonthAgo = IF(
                            AND(
                                (DimDate[rankYYYYMM] = _previousMonth_MAX_RankYYYYMM)
                                ,(DimDate[DayNumberOfMonth] &lt;= _report_DayNumberOfMonth)
                            )
                            ,1,0
)

VAR output = _isMTD_aMonthAgo
return output

'----------------------------------------------------------
'---------------------------------------------------------- 
isPreviousWeek = 
VAR _reportDay = TODAY()-1                  
VAR rankYYYYWW_reportDay = CALCULATE(
                            MAXX(DimDate,DimDate[rankYYYYWW])
                            ,FILTER(
                                    DimDate,
                                    DimDate[FullDateTime]= _reportDay
                            )
)
VAR rankYYYYWW_weekPriorToReportDay = rankYYYYWW_reportDay - 1
var _isPreviousWeek = IF(DimDate[rankYYYYWW] = rankYYYYWW_weekPriorToReportDay,1,0)

VAR output = _isPreviousWeek
RETURN 
    output

'----------------------------------------------------------
'----------------------------------------------------------
isSameWeekOfPreviousMonth_as_PreviousWeekOfThisMonth = 
//====================================================================================================================================================
//I am leaving extra/unused variables in this Calculated Column b/c I have no idea what the customers want, and they are always to busy to talk to me.
// Once I get feedback from the customers I can clean this code up. 12/3/2021 glenn garson
//====================================================================================================================================================
VAR _reportDay = TODAY()-1      //date(2021,11,18)                   
//-----------------
VAR _report_FilteredDimDate = FILTER(DimDate, DimDate[FullDateTime] = _reportDay)
//-----------------
VAR _report_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_report_FilteredDimDate)
VAR _report_RankYYYYWW = CALCULATE(MAXX(DimDate,DimDate[rankYYYYWW]) ,_report_FilteredDimDate)                                  
VAR _report_WeekNumberOfMonth = CALCULATE( MAXX(DimDate,DimDate[WeekNumberOfMonth]) ,_report_FilteredDimDate)        
VAR _report_WeekNumberOfYear = CALCULATE( MAXX(DimDate,DimDate[WeekNumberOfYear]) ,_report_FilteredDimDate) 
//-----------------
VAR _previousMonth_FilteredDimDate = FILTER(DimDate, DimDate[rankYYYYMM] = (_report_RankYYYYMM-1) )
//-----------------
VAR _previousMonth_MAX_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_previousMonth_FilteredDimDate)
VAR _previousMonth_MAX_WeekNumberOfMonth = CALCULATE(MAXX(DimDate,DimDate[WeekNumberOfMonth]) ,_previousMonth_FilteredDimDate)
VAR _previousMonth_MAX_WeekNumberOfYear = CALCULATE(MAXX(DimDate,DimDate[WeekNumberOfYear]) ,_previousMonth_FilteredDimDate)
VAR _previousMonth_MAX_MonthNumberOfYear = CALCULATE(MAXX(DimDate,DimDate[MonthNumberOfYear]) ,_previousMonth_FilteredDimDate)


VAR isReport_In_week_1_of_Month = IF(_report_WeekNumberOfMonth=1, 1, 0)
VAR isReport_In_week_2_of_Month = IF(_report_WeekNumberOfMonth=2, 1, 0)
VAR isReport_In_week_3_of_Month = IF(_report_WeekNumberOfMonth=3, 1, 0)
VAR isReport_In_week_4_of_Month = IF(_report_WeekNumberOfMonth=4, 1, 0)
VAR isReport_In_week_5_of_Month = IF(_report_WeekNumberOfMonth=5, 1, 0)
VAR isReport_In_week_6_of_Month = IF(_report_WeekNumberOfMonth=6, 1, 0)


//-----------------
VAR _penultimateMonth_FilteredDimDate = FILTER(DimDate, DimDate[rankYYYYMM] = (_report_RankYYYYMM-2) )
//-----------------
VAR _penultimateMonth_MAX_RankYYYYMM = CALCULATE(MAXX(DimDate,DimDate[rankYYYYMM]) ,_penultimateMonth_FilteredDimDate)
VAR _penultimateMonth_MAX_WeekNumberOfMonth = CALCULATE(MAXX(DimDate,DimDate[WeekNumberOfMonth]) ,_penultimateMonth_FilteredDimDate)
//====================================================================================================================================================
//VAR _penultimateMonth_MAX_WeekNumberOfYear = CALCULATE(MAXX(DimDate,DimDate[WeekNumberOfYear]) ,_penultimateMonth_FilteredDimDate)

//I am leaving this last step open to modification based on clarification from customers
// for now it just goes back 5 weeks prior, which on the average is the prior week in the prior month
// if this is acceptibale to the customers, then this could all collapse down into just 1 line: ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5)
//====================================================================================================================================================
VAR weekOfYear_toUseForOutput= SWITCH(
                            TRUE()
                            ,AND(
                                    isReport_In_week_1_of_Month = 1
                                    , ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5) )    
                                )
                                , 1
                            ,AND(
                                    isReport_In_week_2_of_Month = 1
                                    , ( 
                                         ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5) )                                    
                                      )   
                                ), 1
                             ,AND(
                                    isReport_In_week_3_of_Month = 1
                                    , ( 
                                         ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5) )                                    
                                      )   
                                ), 1                         
                             ,AND(
                                    isReport_In_week_4_of_Month = 1
                                    , ( 
                                         ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5) )                                    
                                      )   
                                ), 1
                             ,AND(
                                    isReport_In_week_5_of_Month = 1
                                    , ( 
                                         ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5) )                                    
                                      )   
                                ), 1 
                             ,AND(
                                    isReport_In_week_6_of_Month = 1
                                    , ( 
                                         ( DimDate[rankYYYYWW] = (_report_RankYYYYWW-5) )                                    
                                      )   
                                ), 1                                                                
                            ,0
)



VAR output = weekOfYear_toUseForOutput
return output
'----------------------------------------------------------
'---------------------------------------------------------- 
isThisWeek = 
VAR _reportDay = TODAY()-1                  
VAR rankYYYYWW_reportDay = CALCULATE(
                            MAXX(DimDate,DimDate[rankYYYYWW])
                            ,FILTER(
                                    DimDate,
                                    DimDate[FullDateTime]= _reportDay
                            )
)
VAR rankYYYYWW_sameWeekAsReportDay = rankYYYYWW_reportDay
var _isThisWeek = IF(DimDate[rankYYYYWW] = rankYYYYWW_sameWeekAsReportDay,1,0)

VAR output = _isThisWeek
RETURN 
    output
'----------------------------------------------------------
'----------------------------------------------------------
rankYYYYMM = RANKx(DimDate,DimDate[YearMonth],,ASC,Dense)
'----------------------------------------------------------
'---------------------------------------------------------- 
rankYYYYWW = RANKx(DimDate,DimDate[YYYYWW],,ASC,Dense)
'----------------------------------------------------------
'----------------------------------------------------------
WeekNumberOfMonth = 1 + WEEKNUM(DimDate[FullDateTime]) - WEEKNUM(STARTOFMONTH(DimDate[FullDateTime]))
'----------------------------------------------------------
'---------------------------------------------------------- 
YYYYWW = (DimDate[CalendarYear] * 100) + DimDate[WeekNumberOfYear]
'----------------------------------------------------------
'----------------------------------------------------------
isCurentMonth_aYearAgo = 


VAR _isCurentMonth_aYearAgo = IF(
                            AND(
                                YEAR(DimDate[FullDateAlternateKey]) = YEAR(TODAY()-1) - 1
                                ,MONTH(DimDate[FullDateAlternateKey]) = MONTH(TODAY()-1)
                            )
                            ,1,0
)

VAR output = _isCurentMonth_aYearAgo
return output
'----------------------------------------------------------
'---------------------------------------------------------- 
isCurrentMonth = 
VAR _reportDay = TODAY()-1  
VAR _reportYYYYMM = (YEAR(_reportDay) * 100) + MONTH(_reportDay)
VAR isCurrentMonth = IF(

                (DimDate[YearMonth] = _reportYYYYMM)
 /*   
                AND(
                    (DimDate[YearMonth] = _reportYYYYMM)
                   ,(DimDate[FullDateTime] &lt;= _reportDay)
                   )
 */                  
                ,
                1,0
)
VAR output = isCurrentMonth
RETURN
output
'----------------------------------------------------------
'----------------------------------------------------------

'----------------------------------------------------------
'---------------------------------------------------------- 

'----------------------------------------------------------
'----------------------------------------------------------

'----------------------------------------------------------
'---------------------------------------------------------- </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Filtering</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>FILTER_Measure_onGivenDay_and_SameMonthLastYear</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Filtering</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>FILTER_Measure_onGivenDay_and_SameMonthLastYear</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'In the situation where each row is a day of the month
'One column has the Value of the Measure on that Day 
'Want the value of the Measure the previous year on the same date:



'This is the measure
ROLL_Delinquent_Accounts = 
CALCULATE(
			sum(theVIEW[DelinquentAccountsMonthStarting])
			,FILTER(
                    theVIEW,theVIEW[InventoryAccountStatus] = "Roll"				
					)
			,FILTER(
						theVIEW,theVIEW[MonthStartingDPDStatus] = "D"						
					)					
 )
 
 'This is the Measure one year prior
 ROLL_Delinquent_Accounts_OneYearPrior = 
CALCULATE(
			sum(theVIEW[DelinquentAccountsMonthStarting])
            ,SAMEPERIODLASTYEAR(DimDate_Current[FullDateAlternateKey])
			,FILTER(
                    ALL(theVIEW),theVIEW[InventoryAccountStatus] = "Roll"				
					)
			,FILTER(
						ALL(theVIEW),theVIEW[MonthStartingDPDStatus] = "D"						
					)					
 )</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>