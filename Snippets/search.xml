<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATE_CrossFilter</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATE_CrossFilter</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CROSSFILTERR
'	cannot deactivate an activer relationship, it just changes direction in which the filter flows

'SYNTAX
CROSSFILTER(
				&lt;columnName1&gt;
				, &lt;columnName2&gt;
				, &lt;direction&gt;
			)  
			
columnName1	
'usually represents the many side of the relationship to be used; 
'	if the arguments are given in reverse order the function will swap them before using them. This argument cannot be an expression.		

columnName2
'usually represents the one side or lookup side of the relationship to be used; 
'	if the arguments are given in reverse order the function will swap them before using them. This argument cannot be an expression.

Direction
	None 
	' No cross-filtering occurs along this relationship.
	Both 
	' OK for 1=&gt;Many
	' Filters on either side filters the other side.
	OneWay 
	' NOT for one-to-one relationship, NOR  many-to-many relationship
	' 	Filters on the one side or the lookup side of a relationship filter the other side. 
	'	This option cannot be used with a one-to-one relationship . 
	'	Don’t use this option on a many-to-many relationship because it is unclear which side is the lookup side; 
	'	use OneWay_LeftFiltersRight or OneWay_RightFiltersLeft instead.
	OneWay_LeftFiltersRight 
	' NOT for one-to-one relationship, NOR  many-to-one relationship
	'	Filters on the side of &lt;columnName1&gt; filter the side of &lt;columnName2&gt;. 
	'	This option cannot be used with a one-to-one or many-to-one relationship.
	OneWay_RightFiltersLeft 
	' NOT for one-to-one relationship, NOR  many-to-one relationship
	'	Filters on the side of &lt;columnName2&gt; filter the side of &lt;columnName1&gt;. 
	'	This option cannot be used with a one-to-one or many-to-one relationship.

NOTES

'In the case of a 1:1 relationship, there is no difference between the one and both direction.

'CROSSFILTER can only be used in functions that take a filter as an argument, 
'	for example: 
		CALCULATE
		CALCULATETABL
		CLOSINGBALANCEMONTH
		CLOSINGBALANCEQUARTER
		CLOSINGBALANCEYEAR
		OPENINGBALANCEMONTH
		OPENINGBALANCEQUARTER
		OPENINGBALANCEYEAR
		TOTALMTD
		TOTALQTD
		TOTALYTD 

'CROSSFILTER uses existing relationships in the model, identifying relationships by their ending point columns.

'In CROSSFILTER, the cross-filtering setting of a relationship is not important; 
'	that is, whether the relationship is set to filter one, or both directions in the model does not affect the usage of the function. 
'	CROSSFILTER will override any existing cross-filtering setting.

'An error is returned if any of the columns named as an argument is not part of a relationship 
'	or the arguments belong to different relationships.

'If CALCULATE expressions are nested, and more than one CALCULATE expression contains a CROSSFILTER function, 
'	then the innermost CROSSFILTER is the one that prevails in case of a conflict or ambiguity.


=======================================================================================================EXAMPLES

'Suppose you have 2 tables [Dealers] 1 =&gt; * [Sales], i.e. 1 to many, with the direction of the 'filter' from [Dealers] =&gt;  [Sales]
'So if you use [Sales] in the &lt;filter1&gt; of a CALCULATE function to filter the &lt;expression&gt; you will not get the expected results

'SYNTAX
CALCULATE(
			&lt;expression&gt;
			[, &lt;filter1&gt; 	&lt;== You need to use CROSSFILTERR If the active relationship of this does not allow it to filter the &lt;expression&gt;
			[, &lt;filter2&gt; 
			[, …]
			]])
		
'So this will NOT give you the right results, it will not actually 'filter' so you will actually get the TOTAL number of distinct rows in the whole table

		EVALUATE
		{
		    CALCULATE(
		        DISTINCTCOUNT(Dealers[Row Id]),
		        Sales[Date of Sale] = DATE(2018,4,12)
		        )        
		}

'The Solutiuon is to use CROSSFILTER, and just for the calculation use 'BOTH' (or 2)


	EVALUATE
	{
	    CALCULATE(
	        DISTINCTCOUNT(Dealers[Row Id]),
	        Sales[Date of Sale] = DATE(2018,4,12),
	        CROSSFILTER(Sales[Dealer Row Id], Dealers[Row Id], BOTH)
	        )        
	}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Time_Intelligence_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Time_Intelligence_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://docs.microsoft.com/en-us/dax/time-intelligence-functions-dax

CLOSINGBALANCEMONTH
CLOSINGBALANCEQUARTER
CLOSINGBALANCEYEAR
DATEADD
DATESBETWEEN
DATESINPERIOD
DATESMTD
DATESQTD
DATESYTD
ENDOFMONTH
ENDOFQUARTER
ENDOFYEAR
FIRSTDATE
FIRSTNONBLANK
LASTDATE
LASTNONBLANK
NEXTDAY
NEXTMONTH
NEXTQUARTER
NEXTYEAR
OPENINGBALANCEMONTH
OPENINGBALANCEQUARTER
OPENINGBALANCEYEAR
PARALLELPERIOD
PREVIOUSDAY
PREVIOUSMONTH
PREVIOUSQUARTER
PREVIOUSYEAR
SAMEPERIODLASTYEAR
STARTOFMONTH
STARTOFQUARTER
STARTOFYEAR
TOTALMTD
TOTALQTD
TOTALYTD
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Relationhships</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>USERELATIONSHIPS</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Relationhships</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>USERELATIONSHIPS</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USERELATIONSHIP
'Specifies an existing relationship to be used in a specific calculation as the one that exists between columnName1 and columnName2.
'Very usefull for multiple date fields connected to a single calendar table; forces MEASURES to use inactive relationships without having to manually activate them


'SYNTAX
USERELATIONSHIP(
				&lt;columnName1&gt;,		//'should be the FK of the relationship, but DAX engine will swap then if they are in the incorrect order
				&lt;columnName2&gt;		//'should be the PK of the relationship
			 	)
			 	
columnName1	
'The name of an existing column, using standard DAX syntax and fully qualified, 
'	that usually represents the many side of the relationship to be used; 
'if the arguments are given in reverse order the function will swap them before using them. This argument cannot be an expression.
columnName2	
'The name of an existing column, using standard DAX syntax and fully qualified, 
'	that usually represents the one side or lookup side of the relationship to be used; 
'if the arguments are given in reverse order the function will swap them before using them. This argument cannot be an expression.
			 	 
Return value
'The function returns no value; 
'the function only enables the indicated relationship for the duration of the calculation.			 	 
			 	 
NOTES
=========
'USERELATIONSHIP can only be used in functions that take a filter as an argument, 
'	for example: 
'	CALCULATE, CALCULATETABLE, CLOSINGBALANCEMONTH, CLOSINGBALANCEQUARTER, CLOSINGBALANCEYEAR, OPENINGBALANCEMONTH, 
'	OPENINGBALANCEQUARTER, OPENINGBALANCEYEAR, TOTALMTD, TOTALQTD and TOTALYTD functions.

'USERELATIONSHIP cannot be used when row level security is defined for the table in which the measure is included. 
'	For example, 
	CALCULATE(
				SUM(
					[SalesAmount]
					)
			    , USERELATIONSHIP(
			    					FactInternetSales[CustomerKey]
			    					, DimCustomer[CustomerKey]
			    				  )
			   ) 
'will return an error if row level security is defined for DimCustomer.

'USERELATIONSHIP uses existing relationships in the model, identifying relationships by their ending point columns.

'In USERELATIONSHIP, the status of a relationship is not important; 
'	that is, whether the relationship is active or not does not affect the usage of the function. 
'Even if the relationship is inactive, 
'	it will be used and overrides any other active relationships that might be present in the model but not mentioned in the function arguments.

'An error is returned if any of the columns named as an argument is not part of a relationship or the arguments belong to different relationships.

'If multiple relationships are needed to join table A to table B in a calculation, 
'	each relationship must be indicated in a different USERELATIONSHIP function.

'If CALCULATE expressions are nested, 
'	and more than one CALCULATE expression contains a USERELATIONSHIP function, 
'	then the innermost USERELATIONSHIP is the one that prevails in case of a conflict or ambiguity.

'Up to 10 USERELATIONSHIP functions can be nested; 
'	however, your expression might have a deeper level of nesting, 
'	ie. the following sample expression is nested 3 levels deep but only 2 for USEREALTIONSHIP: 
=CALCULATE(CALCULATE( CALCULATE( &amp;lt;anyExpression&amp;gt;, USERELATIONSHIP( t1[colA], t2[colB])), t99[colZ]=999), USERELATIONSHIP( t1[colA], t2[colA])).

'For 1-to-1 relationships, 
'	USERELATIONSHIP will only activate the relationship in one direction. 
'	In particular, filters will only be able to flow from columnName2's table to columnName1's table. 
'If bi-directional cross-filtering is desired, two USERELATIONSHIPs with opposite directionality can be used in the same calculation. 
'For example, 
	CALCULATE(..., USERELATIONSHIP(T1[K], T2[K]), USERELATIONSHIP(T2[K], T1[K])).
			 	 
'EXAMPLES
===========			 	 
'for a situation were there are multiple relationships to the Calendar, but only one is active			 	 
Quantity Sold (USERELATIONSHIP) = 
									CALCULATE(
									    [SUM Quantity Sold],
									    USERELATIONSHIP(
												        'Food Inventory'[baked_date],			//'FK
												        'Calendar'[Transaction_Date]			//'PK
									    				)
												)			 	 
---------------------------------------------------------------------------------------------------------
'There are multiple date relationships, just use one of them for the Count
Funded (count) = CALCULATE(
									COUNTX (
												FILTER(
														P_0052_TASK_17_VIEW_01_vwApplicationsContracts
														,P_0052_TASK_17_VIEW_01_vwApplicationsContracts[Funded_DATE]  &lt;&gt; BLANK ()
														)
												,P_0052_TASK_17_VIEW_01_vwApplicationsContracts[CLIENT_APP_ID]
											)	
									, USERELATIONSHIP(
															P_0052_TASK_17_VIEW_01_vwApplicationsContracts[Funded_DATE] 
															, DateTable[Date]
														  )
							)			 	 
			 	 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>FUNCTIONS_for_TimeIntelligence</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>FUNCTIONS_for_TimeIntelligence</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Performance-to-Date
====================
DATESYTD
DATESQTD
DATESMTD

Time Period Shift  aka Previous Period Pattern
==================     =======================
SAMEPERIODLASTYEAR
DATEADD
PARALLELPERIOD
PREVIOUSYEAR
	'Quarter/Month/Day
NEXTYEAR
	'Quarter/Month/Day

Running Total '(moving average os is the running total divided by the number of periods)
===================
DATESINPERIOD

#######################################################################################################################

DATEADD 'for previous periods
========
---------------------------------------------------------------------------------------------------------------------------
'EXAMPLE
	
	'example to calculate the MEASURE for a previous month
	CALCULATE(
				MEASURE, 
				DATEADD(
							CALENDAR[DATE]
							,-1,			' # of intervals
							MONTH			'Interval tpe: DAY, MONTH, QUARTER, YEAR
						)
			 )
			 
---------------------------------------------------------------------------------------------------------------------------		 
	Prev Month Revenue = CALCULATE(
									[Total Revenue]
									,DATEADD(
												AW_Calendar_Lookup[Date]
												,-1
												,MONTH
											)
								  )	
								  
---------------------------------------------------------------------------------------------------------------------------								  	 
DATESBETWEEN
=============	
		'equivalent in this example to MTD							  	 
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFMONTH(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}								  	 
---------------------------------------------------------------------------------------------------------------------------
DATESINPERIOD	'Running Total
=============

---------------------------------------------------------------------------------------------------------------------------
'EXAMPLE
	CALCULATE(
				MEASURE
				, DATESINPERIOD(
									CALENDAR[DATE]
									, MAX[Calendar[DATE])								//'START parm for the DATESINPERIOD function
									,-10												//'NumberOfIntervals parm, use negative (-) for previous periods
									,DAY												//'Interval parm: DAY, MONTH, QUARTER, YEAR
							   )
			 )
---------------------------------------------------------------------------------------------------------------------------			 
10-day Rolling Revenue = CALCULATE(
									[Total Revenue]
									, DATESINPERIOD(
													AW_Calendar_Lookup[Date]
													, MAX(AW_Calendar_Lookup[Date])
													,-10
													,DAY)
									)			 
			 
---------------------------------------------------------------------------------------------------------------------------
'NOTE: Moving Averages
	'To calculate Moving Average, use the running total calculation above and divide by the number of intervals

DATESMTD 'Month to date
=======
		'-------------------------------------------------------------------------
		'-- DATESMTD: Returns a table that contains a column of the dates for the 
		'--			 month to date, in the current context.
		'--
		'--			 Note: Internally this function is re-written to use the
		'--			 	   DATESBETWEEN function.
		-------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					--COUNTROWS('Calendar'),
					DATESMTD('Calendar'[Date])
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}		
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFMONTH(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
		
		
DATESQTD 'quarter to date
========
		'-------------------------------------------------------------------------
		'-- DATESQTD: Returns a table that contains a column of the dates for the 
		'--			 quarter to date, in the current context.
		'--
		'--			 Note: Internally this function is re-written to use the
		'--			 	   DATESBETWEEN function.
		'-------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					//'--COUNTROWS('Calendar'),
					DATESQTD('Calendar'[Date])
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}		
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFQUARTER(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}
		
DATESYTD 'year to date
========
'Returns a table that contains a column of the dates for the year to date, in the current context.

'SYNTAX
	DATESYTD(
				&lt;dates&gt; 
				[,&lt;year_end_date&gt;]
			)  
			
	dates	
	'	A column that contains dates.
	year_end_date	
	'	(optional) A literal string with a date that defines the year-end date. The default is December 31.			
	
Return value
'A table containing a single column of date values.	
---------------------------------------------------------------------------------------------------------------------------
'EXAMPLE
	
	CALCULATE(
				SUM(
						InternetSales_USD[SalesAmount_USD])			//&lt;&lt;== e.g. using SUM on a field
						, DATESYTD(DateTime[DateKey]
			  		)
			  ) 
---------------------------------------------------------------------------------------------------------------------------
	
	'for reference in the second statement, here is the MEASURE
	Total Revenue = SUMX(
							AW_Sales, AW_Sales[OrderQuantity] * RELATED(AW_Product_Lookup[ProductPrice])
						)			  
				  
	YTD Revenue = CALCULATE(
								[Total Revenue]							//&lt;== example without the SUM, b/c the SUM is in the MEASURE
								, DATESYTD(AW_Calendar_Lookup[Date])	//&lt;== this acts like the filter for the MEASURE
							)		
							
		'-------------------------------------------------------------------------
		'-- DATESYTD: Returns a table that contains a column of the dates for the 
		'--			 year to date, in the current context.
		'--
		'--			 Note: Internally this function is re-written to use the
		'--			 	   DATESBETWEEN function.
		'-------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					--COUNTROWS('Calendar'),
					DATESYTD('Calendar'[Date])
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}		
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESBETWEEN(
						'Calendar'[Date],
						STARTOFYEAR(LastDate('Calendar'[Date])), 
						LASTDATE('Calendar'[Date])
						)
					),
				'Calendar'[Date] = DATE(2008,6,12)
				)
		}
											   
									   
---------------------------------------------------------------------------------------------------------------------------							
ENDOFMONTH
==========
		'------------------------------------------------------------------------------------
		'-- ENDOFMONTH: Finds the date in the current context of the dates table and
		'--			   returns the date of the first of the month of that date.
		'------------------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				ENDOFMONTH('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
---------------------------------------------------------------------------------------------------------------------------
ENDOFQUARTER
============

	'------------------------------------------------------------------------------------
	'-- ENDOFQUARTER: Finds the date in the current context of the dates table and
	'--			     returns the date of the last day of the quarter.
	'------------------------------------------------------------------------------------
	
	EVALUATE
	{
		CALCULATE(
			ENDOFQUARTER('Calendar'[Date]),
			'Calendar'[Date] = DATE(2008,4,12)
			)
	}
---------------------------------------------------------------------------------------------------------------------------
ENDOFYEAR
==============
'------------------------------------------------------------------------------------
'-- ENDOFYEAR: Finds the date in the current context of the dates table and
'--			  returns the date of the last day of the year.
'------------------------------------------------------------------------------------

EVALUATE
{
	CALCULATE(
		ENDOFYEAR('Calendar'[Date]),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}
---------------------------------------------------------------------------------------------------------------------------
NEXTDAY
==============

'-- NEXTDAY: Returns a table that contains a column of all dates representing the 
'--          day that occurs after the current date in the dates column, given the 
'--          current context.
'--
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	'-- Return the day previous to the date contained in the filter
	CALCULATE(
		NEXTDAY('Calendar'[Date]),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

EVALUATE
{
	'-- Calculate total sales in the Contols database occuring the day after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTDAY('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

---------------------------------------------------------------------------------------------------------------------------
NEXTMONTH
==============
'-- NEXTMONTH: Returns a table that contains a column of all dates representing the 
'--            month that occurs after the current date in the dates column, given the 
'--            current context.
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	-- Calculate total sales in the Contols database occuring in the month after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTMONTH('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

---------------------------------------------------------------------------------------------------------------------------
NEXTQUARTER
==============
'------------------------------------------------------------------------------------------------------
'-- NEXTQUARTER: Returns a table that contains a column of all dates representing the 
'--            	quarter that occurs after the current date in the dates column, given the 
'--            	current context.
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	-- Calculate total sales in the Contols database occuring in the month after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTQUARTER('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}
---------------------------------------------------------------------------------------------------------------------------
NEXTYEAR
==============
'------------------------------------------------------------------------------------------------------
'-- NEXTYEAR: Returns a table that contains a column of all dates representing the 
'--           year that occurs after the current date in the dates column, given the 
'--           current context.
'------------------------------------------------------------------------------------------------------

EVALUATE
{
	-- Calculate total sales in the Contols database occuring in the month after the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			NEXTYEAR('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}

---------------------------------------------------------------------------------------------------------------------------
PARALLELPERIOD
==============
'Returns a table that contains a column of dates that represents a period parallel to the dates in the specified dates column, 
' in the current context, with the dates shifted a number of intervals either forward in time or back in time.

'PARALLELPERIOD computes the entire period in the interval (i.e. entire year, quarter, etc.)
'	Values in total rows may not reflect the expected total if partial periods are present =&gt; FUNKY totals

'The PARALLELPERIOD function is similar to the DATEADD function 
'	except that PARALLELPERIOD always returns full periods at the given granularity level instead of the partial periods that DATEADD returns. 
'For example, 
'	if you have a selection of dates that starts at June 10 and finishes at June 21 of the same year, 
'	and you want to shift that selection forward by one month then the PARALLELPERIOD function will return all dates from the next month 
'		(July 1 to July 31); 
'	however, 
'	if DATEADD is used instead, then the result will include only dates from 
'		July 10 to July 21.


'SYNTAX
PARALLELPERIOD(
				&lt;dates&gt;
				,&lt;number_of_intervals&gt;
				,&lt;interval&gt;
			  )  
			  

dates	
'A column that contains dates.
number_of_intervals	
'An integer that specifies the number of intervals to add to or subtract from the dates.
interval	
'The interval by which to shift the dates. The value for interval can be one of the following: year, quarter, month.			  
			  
'Example
--------
'The following sample formula creates a measure that calculates the previous year sales for Internet sales.
= CALCULATE(
			SUM(InternetSales_USD[SalesAmount_USD])
			, PARALLELPERIOD(
								DateTime[DateKey]
								,-1
								,year)
							)		
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSDAY								  
============

'------------------------------------------------------------------------------------------------------
'-- PREVIOUSDAY: Returns a table that contains a column of all dates representing the 
'--              day that is previous to the current date in the dates column, given the 
'--              current context.
'--
------------------------------------------------------------------------------------------------------

EVALUATE
{
	//' Return the day previous to the date contained in the filter
	CALCULATE(
		PREVIOUSDAY('Calendar'[Date]),				//'&lt;=== Returns a table with a single row and a single column, so OK to use as 1st parm of CALCULATE
		'Calendar'[Date] = DATE(2008,4,12)
		)
}								  
								  
EVALUATE		//' The outer CALCULATE sets the Date context, for the inner CALCULATE
{
	//' Calculate total sales in the Contols database occuring the day before the current context date
	CALCULATE(
		CALCULATE(
			[Sales Amount],
			PREVIOUSDAY('Calendar'[Date])			
			),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSDMONTH								  
============								  
		'------------------------------------------------------------------------------------------------------
		'-- PREVIOUSMONTH: Returns a table that contains a column of all dates representing the 
		'--                month that is previous to the current date in the dates column, given the 
		'--                current context.
		'--
		'------------------------------------------------------------------------------------------------------
		
		EVALUATE 
		{
			== ERROR
			//' It won't work b/c PREVIOUSMONTH returns a column with multiple values0
			CALCULATE(
				PREVIOUSMONTH('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
		
		EVALUATE
		{
		//' Calculate total sales in the Contols database occuring in the month prior to the current context date
			CALCULATE(
				CALCULATE(
					''COUNTROWS('Calendar'),  //'&lt;== if you use this you would see it is return 30 days of the month
					[Sales Amount],			  //' the measure would aggregate all the rows 
					PREVIOUSMONTH('Calendar'[Date])			
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}	
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSQUARTER								  
============			
		'------------------------------------------------------------------------------------------------------
		'-- PREVIOUSQUARTER: Returns a table that contains a column of all dates representing the 
		'--                  quarter that is previous to the current date in the dates column, given the 
		'--                  current context.
		'--
		'------------------------------------------------------------------------------------------------------
		
		EVALUATE
		{
			-- Calculate total sales in the Contols database occuring in the month prior to the current context date
			CALCULATE(
				CALCULATE(
					--COUNTROWS('Calendar'),
					[Sales Amount],
					PREVIOUSQUARTER('Calendar'[Date])			
					),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}									  
---------------------------------------------------------------------------------------------------------------------------								
PREVIOUSYEAR								  
============									  
		'------------------------------------------------------------------------------------------------------
		'-- PREVIOUSYEAR: Returns a table that contains a column of all dates representing the 
		'--               year that is previous to the current date in the dates column, given the 
		'--               current context.
		'--
		'------------------------------------------------------------------------------------------------------
		
		EVALUATE
		{
			-- Calculate total sales in the Contols database occuring in the month prior to the current context date
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					PREVIOUSYEAR('Calendar'[Date])			
					),
				'Calendar'[Date] = DATE(2007,4,12)
				)
		}
									  



---------------------------------------------------------------------------------------------------------------------------				  
STARTOFMONTH
============			  
		'------------------------------------------------------------------------------------
		'-- STARTOFMONTH: Finds the date in the current context of the dates table and
		'--				 returns the date of the first of the month of that date.
		'------------------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				STARTOFMONTH('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}		  
							)			  
---------------------------------------------------------------------------------------------------------------------------				  
STARTOFQUARTER	
==============		  
		'------------------------------------------------------------------------------------
		'-- STARTOFQUARTER: Finds the date in the current context of the dates table and
		'--				   returns the date of the first day of the quarter.
		'------------------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				STARTOFQUARTER('Calendar'[Date]),
				'Calendar'[Date] = DATE(2008,4,12)
				)
		}
---------------------------------------------------------------------------------------------------------------------------
STARTOFYEAR
==============					  
'------------------------------------------------------------------------------------
'-- STARTOFYEAR: Finds the date in the current context of the dates table and
'--				returns the date of the first day of the year.
'------------------------------------------------------------------------------------

EVALUATE
{
	CALCULATE(
		STARTOFYEAR('Calendar'[Date]),
		'Calendar'[Date] = DATE(2008,4,12)
		)
}			  
			  
---------------------------------------------------------------------------------------------------------------------------			  
TOTALMTD			  
==============			  
			  -------------------------------------------------------------------------
				-- TOTALMTD: Evaluates the value of the expression for the month to date, 
				--   		 in the current context.
				--
				-- 			 Note: Internally TOTALMTD is re-written to use DATESMTD.
				-------------------------------------------------------------------------
				
				EVALUATE
				{
					CALCULATE(
						TOTALMTD(
							[Sales Amount],
							'Calendar'[Date]
							),
					'Calendar'[Date] = DATE(2008,4,12)
					)
				}
				
				EVALUATE
				{
					CALCULATE(
						CALCULATE(
							[Sales Amount],
							DATESMTD('Calendar'[Date])
							),
					'Calendar'[Date] = DATE(2008,4,12)
					)
				}
---------------------------------------------------------------------------------------------------------------------------			  
TOTALQTD			  
==============
			'----------------------------------------------------------------------------
			'-- TOTALQTD: Evaluates the value of the expression for the quarter to date, 
			'--   		 in the current context.
			'--
			'-- 			 Note: Internally TOTALQTD is re-written to use DATESQTD.
			'----------------------------------------------------------------------------
			
			EVALUATE
			{
				CALCULATE(
					TOTALQTD(
						[Sales Amount],
						'Calendar'[Date]
						),
				'Calendar'[Date] = DATE(2008,6,12)
				)
			}
			
			EVALUATE
			{
				CALCULATE(
					CALCULATE(
						[Sales Amount],
						DATESQTD('Calendar'[Date])
						),
				'Calendar'[Date] = DATE(2008,6,12)
				)
			}
---------------------------------------------------------------------------------------------------------------------------			  
TOTALQTD			  
==============			
		'----------------------------------------------------------------------------
		'-- TOTALYTD: Evaluates the value of the expression for the quarter to date, 
		'--   		 in the current context.
		'--
		'-- 			 Note: Internally TOTALYTD is re-written to use DATESYTD.
		'----------------------------------------------------------------------------
		
		EVALUATE
		{
			CALCULATE(
				TOTALYTD(
					[Sales Amount],
					'Calendar'[Date]
					),
			'Calendar'[Date] = DATE(2008,6,12)
			)
		}
		
		EVALUATE
		{
			CALCULATE(
				CALCULATE(
					[Sales Amount],
					DATESYTD('Calendar'[Date])
					),
			'Calendar'[Date] = DATE(2008,6,12)
			)
		}



















			  
			  
			  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>YearOverYear_Growth</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>YearOverYear_Growth</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>YearOverYear_Growth

'Relationship:
[OrderDate] of table [SalesHeader]  &lt;=&gt; [Date] of table [Date]
'Cardinality: Many-to-one

'TABLE: [Date] w/ 3 column &amp; 1 Measure
--------------
'C1: Date
'C2: "Year"
'C3: "Month"

Date =
ADDCOLUMNS (
    CALENDARAUTO ( 12 ),
    "Year", YEAR ( [Date] ),
    "Month", MONTH ( [Date] )
)
'Measure: YTD which pulls from the [SalesHeader] Table
YTD = TOTALYTD(SUM(SalesHeader[TotalDue]),'Date'[Date])


'TABLE: [SalesHeader]
---------------------
'C1: OrderDate
'C2: OrderDateNum  {YYYYMMDD : INTEGER}
'Measure1: 
	Prev Year = CALCULATE(SUM(SalesHeader[TotalDue]),PREVIOUSYEAR('Date'[Date]))
'C3: SalesOrderID
'C4: TotalDue
'Measure2: 
YoY Growth =
	 ( SUM ( SalesHeader[TotalDue] ) - [Prev Year] )
	    / SUM ( SalesHeader[TotalDue] )
	
'Design Surface
---------------------
Table Visual
'Values:
	[DATE].[Year]				'{Don't summarize}
	[SalesHeader].[TotalDue]	'{Sum}
	[SalesHeader].[Prev Year]	'
	[SalesHeader].[YoY Growth]	'
	
	

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Time_Intelligence</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>YearToDate_total</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Time_Intelligence</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>YearToDate_total</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Start w/ 2 tables:

'Relationship:
[OrderDate] of table [SalesHeader]  &lt;=&gt; [Date] of table [Date]
'Cardinality: Many-to-one

'TABLE: [Date] w/ 3 column &amp; 1 Measure
--------------
'C1: Date
'C2: "Year"
'C3: "Month"
Date = ADDCOLUMNS(CALENDARAUTO(12),"Year", YEAR([Date]),"Month", Month([Date]))
'Measure: YTD which pulls from the [SalesHeader] Table
YTD = TOTALYTD(SUM(SalesHeader[TotalDue]),'Date'[Date])


'TABLE: [SalesHeader]
---------------------
'C1: OrderDate
'C2: OrderDateNum  {YYYYMMDD : INTEGER}
'Measure1: 
	Prev Year = CALCULATE(SUM(SalesHeader[TotalDue]),PREVIOUSYEAR('Date'[Date]))
'C3: SalesOrderID
'C4: TotalDue
'Measure2: 
	YoY Growth = (SUM(SalesHeader[TotalDue]) - [Prev Year]) / Sum(SalesHeader[TotalDue])

'Design Surface
---------------------
Table Visual
'Values:
	[DATE].[Year]				'{Don't summarize}
	[DATE].[Month]				'{Don't summarize}	
	[SalesHeader].[TotalDue]	'{Sum}
	[DATE].[YTD]				'
	
	

</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>