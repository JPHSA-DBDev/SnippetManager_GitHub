<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CTE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CTE_DataType_using_UNION</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CTE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CTE_DataType_using_UNION</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>with alphanumreg as 
(
   SELECT 
		CONVERT(DECIMAL(15,4), 22) as NumData,
		CONVERT(SMALLINT, 22) as NumInt,
		CONVERT(VARCHAR(25),'22') as AlphabeticNum
   UNION SELECT  21.4,21,'21.4' 
   UNION SELECT  40.05,40,'40.05' 
   UNION SELECT  67,67,'67' 
   UNION SELECT  1,1,'1' 
   UNION SELECT  1.00,1,'1.00' 
   UNION SELECT  121.23,121,'e1213' 
   UNION SELECT  33.2341,33,'33.2341' 
   UNION SELECT  33.2341,33,'33.2341' 
   UNION SELECT  -1.09,-1,'-1.09' 
   UNION SELECT  NULL,NULL,'22-E1-9' 
   UNION SELECT  NULL,NULL,'11-EA-0' 
   UNION SELECT  NULL,NULL,'04-E2-9' 
   UNION SELECT  NULL,NULL,'10-E1-7' 
   UNION SELECT  NULL,NULL,'106-E1-700' 
   UNION SELECT  NULL,NULL,'3-E6-9365' 
   UNION SELECT  NULL,NULL,'31-A2-4' 
   UNION SELECT  NULL,NULL,'3723812695735285' 
   UNION SELECT  NULL,NULL,'IX7254017' 
   UNION SELECT  NULL,NULL,'4019638561283650' 
)

select * from alphanumreg


GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CTE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>UNION_of_two_CTE_Select_from</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CTE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>UNION_of_two_CTE_Select_from</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
----------------------- Local Variables
DECLARE @LineNumber int
DECLARE @Source nvarchar(100)
DECLARE @Title nvarchar(255)
----------------------------------------


SELECT @LineNumber = 23
SELECT @Source = '[Q-002]'
SELECT @Title = '[Adults]'
;
WITH cte_Line_23_Adult
AS
(


	SELECT distinct
		  [Patient_No]
	  FROM [Success].[dbo].[zzz_p0021_6_for_Analysis_of_Part_Q]
	  Where (
				[Type] = 'PC'
				AND
				[loc] = 'EJ'
				AND
				[Adult] = 1
			)
)
,cte_Line_23_NotAdult
AS
(


	SELECT distinct
		  [Patient_No]
	  FROM [Success].[dbo].[zzz_p0021_6_for_Analysis_of_Part_Q]
	  Where (
				[Type] = 'PC'
				AND
				[loc] = 'EJ'
				AND
				[Adult] &lt;&gt; 1
			)
)

--Select * 
--From cte_Line_23_Adult
--Order by Patient_No

SELECT *
FROM
	cte_Line_23_Adult a
	INNER JOIN
	cte_Line_23_NotAdult na
	On a.Patient_No = na.Patient_No

////////////////////////////////////////////////////////////////////////
WITH CTE_All_CM
AS
(
select [Name], 
		[Position_Role],
		[Position_Credentials],
		'All' as Type	
FROM [DB2_CRM].[dbo].[prj_8011_vw_008_EmployeePositions_v0]
Where
	(
		(Position_Role='Team Lead')
		or
		(Position_Role='Care Manager')
	)
),
CTE_RN_CM
AS
(
	select [Name], 
			[Position_Role],
			[Position_Credentials],
			'RN' as Type	
	FROM [DB2_CRM].[dbo].[prj_8011_vw_008_EmployeePositions_v0]
	Where Position_Credentials like '%RN%'
)
Select Type, COUNT(*) as TypeCount
From
	(
		(Select * From 	CTE_RN_CM)
		UNION 
		(Select * From 	CTE_All_CM)	
	) as TheUnion
Group by Type
Order by Type DESC

	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>INSERT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>INTO_from_a_UNION</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>INSERT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>INTO_from_a_UNION</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT x.* 
  INTO [NEW_TABLE]
  FROM (SELECT * FROM TABLE1
        UNION
        SELECT * FROM TABLE2) x</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>JOIN</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ORDER_BY_ForAUnionJoin</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>JOIN</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ORDER_BY_ForAUnionJoin</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--================================================
--	Had problems putting in an 'ORDER BY' statement after the join when I used the field name
--     but when I used the field numbers it worked fine

--================================================


		(
		SELECT A.SSN, B.Medicaid_ID, A.PATNAME, A.BD, A.AGE,
			A.ADMITTED, B.PCP_Name, A.LOCATION, A.ROOM,
			A.ADMITTING_SVC, A.COMPLAINT

		from  [CCNCclaims].[dbo].[T1_MissionCensus_Daily_t] as A,  [CCNCclaims].[dbo].[T4_Medicaid_Enrollees_t] as B
		
		WHERE (SUBSTRING(A.SSN,1,3)+ SUBSTRING(A.SSN,5,2)+ SUBSTRING(A.SSN,8,4)) = B.Social_Security
		and A.ROOM is not null
		and Access_Project_Num = '6701007'					-- CCWNC's code

		-- These are the locations that are in the PMH report, so get them off of this report (i.e. the census)

		and ((A.LOCATION NOT LIKE 'Mother%'					-- Unit in the hospital called something like: Mother/Baby
			AND A.LOCATION NOT LIKE 'L&amp;D%'					-- Labor and Delivery
			AND A.LOCATION NOT like 'Maternal%'				-- Maternal Fetal
			AND A.LOCATION NOT like 'Outpt Labor%')			-- Outpatient Labor and Delivery
			AND substring(B.Program_Category,1,3) &lt;&gt; 'MPW')	-- Medicaid program 'medicaid for pregnant women' : so don't include
		) 

	--- This is the code that replace the part done by hand to extract the Mission Pediatric Patients that come out of the Mission Midas Census Sofware every morning;

	UNION

		(
		SELECT 
			  ISNULL([SSN],'')			-- Replace the nulls with blank spaces
			  ,'' as [MID]      
			  ,[PATNAME] AS [NAME]
			  ,[BD]
			  ,[AGE]
		--	, (SELECT 'TheCalculation' =  FLOOR(DATEDIFF(day, BD, CONVERT(CHAR(8), GETDATE(), 112))) ) AS [AGE_Days]		-- this is age in days, need to put in the appropriate date
			  ,[ADMITTED]
			  ,'' as [PCP]
			  ,[LOCATION] as [UNIT]
			  ,[ROOM]
			  ,[ADMITTING_SVC] as [ADMITTING SVC]
			  ,[COMPLAINT] as [ADMITTING DX]
		  FROM [CCNCclaims].[dbo].[T1_MissionCensus_Daily_t]
		  WHERE ([SSN] IS NULL)																-- Patient has no SSN, for now I can't remember why this is necessary.
				AND 
				(( FLOOR(DATEDIFF(day, BD, CONVERT(CHAR(8), GETDATE(), 112))))&gt;3)			-- Age in Days greater than 3 days
				AND 
				(( FLOOR(DATEDIFF(day, BD, CONVERT(CHAR(8), GETDATE(), 112))))&lt; (365*21))	-- Age in Days greater than 21 Years
				--AND ([LOCATION] LIKE '%ICU-Pediatric%')										-- Must be located in the ICU-Pediatric
		) 
ORDER BY 1 DESC, 3 ASC



</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>JOIN</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>PIVOT_vertical_Actual_Target_Diff=&gt;rows_ThenUnionRows</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>JOIN</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>PIVOT_vertical_Actual_Target_Diff=&gt;rows_ThenUnionRows</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--PIVOT_vertical_Actual_Target_Diff=&gt;rows_ThenUnionRows

--P_0020_TASK_041_REP_03_1__RES_01__Actual_and_Target_v1.sql

/*
ACTUAL
---- ONLY INCLUDE THE DELINQUENCY FOR THE LAST DAY OF THE MONTH, PRIOR 25 MONTHS
---- Add footnote: the bankrupt accounts are excluded
--	Just get the EOM date, for the Current year: per Dave. On January we want it to report the previous year.
--	Look at the Chart to make sure output matches what they want.

*/

IF OBJECT_ID('tempdb..#tmpTARGET') IS NOT NULL DROP TABLE #tmpTARGET
IF OBJECT_ID('tempdb..#tmpACTUAL') IS NOT NULL DROP TABLE #tmpACTUAL
IF OBJECT_ID('tempdb..#tmpDifference') IS NOT NULL DROP TABLE #tmpDifference
IF OBJECT_ID('tempdb..#tmpTARGETunionACTUAL') IS NOT NULL DROP TABLE #tmpTARGETunionACTUAL
IF OBJECT_ID('tempdb..#tmpROW1') IS NOT NULL DROP TABLE #tmpROW1
IF OBJECT_ID('tempdb..#tmpROW2') IS NOT NULL DROP TABLE #tmpROW2


DECLARE @START_day_TABLE as DATE
SET @START_day_TABLE = CASE	
					WHEN MONTH(getdate()) = 1	--if today is in first month of the year
						THEN CONVERT(DATE, DATEADD(YEAR, DATEDIFF(YEAR, 0, GETDATE()) - 1, 0))	--First Day of last year
					ELSE CONVERT(DATE, DATEADD(YEAR, DATEDIFF(YEAR, 0, GETDATE()), 0))	--First day of Current Year
					END
DECLARE @END_day_TABLE as DATE
SET @END_day_TABLE = CASE	
					WHEN MONTH(getdate()) = 1	--if today is in first month of the year
						THEN CONVERT(DATE, DATEADD(ms, -2, DATEADD(YEAR, 0, DATEADD(YEAR, DATEDIFF(YEAR, 0, GETDATE()), 0))))	--LastDayOfLastYear
					ELSE CONVERT(DATE, DATEADD(ms, -2, DATEADD(YEAR, 0, DATEADD(YEAR, DATEDIFF(YEAR, 0, GETDATE()) + 1, 0)))) --LastDayOfCurrentYear
					END

--TARGET

SELECT 
      [EOM_Date]
      ,[TargetDelinquencies]
INTO #tmpTARGET
FROM [RiskMngt].[OperationalPerformance].[T_007_OPR_1_SLIDE_03_T_1_30Delinquency]
WHERE EOM_Date BETWEEN @START_day_TABLE AND @END_day_TABLE

--SELECT * FROM #tmpTARGET


--ACTUAL

select  DISTINCT
		EOMonth(BUS_DATE) as [EOM_Date]
		, ROUND(
					(
						SUM(DPD_030_059 + DPD_060_089 + DPD_090_119 + DPD_120_Pls) OVER(PARTITION BY BUS_DATE)
						/ 
						SUM(ActiveBalance) OVER(PARTITION BY BUS_DATE)
					)
				,6) AS Actual_30plus_Delinquecy
INTO #tmpACTUAL
from [edwCrescent].[dbo].[DELQ_TREND]
where 
	BankruptcyStatus = 'NONBK'
	AND
	CONVERT(DATE,BUS_DATE) = EOMonth(BUS_DATE)
	AND
	BUS_DATE BETWEEN @START_day_TABLE AND @END_day_TABLE
ORDER BY [EOM_Date]

--SELECT * FROM #tmpACTUAL


-- UNION a Row onto the bottom w/ the totals

	SELECT 
			FORMAT(t.EOM_Date, 'MMM') as columnName
			, a.Actual_30plus_Delinquecy
			, t.TargetDelinquencies
			  ,CASE
					WHEN ( (a.Actual_30plus_Delinquecy is NULL) OR (t.TargetDelinquencies is NULL) ) THEN NULL
					ELSE ( a.Actual_30plus_Delinquecy - t.TargetDelinquencies  ) 
					END as [Difference]
	INTO #tmpTARGETunionACTUAL
	FROM 
		#tmpTARGET t
		LEFT OUTER JOIN
		#tmpACTUAL a
		on a.EOM_Date = t.EOM_Date

UNION ALL

	SELECT DISTINCT
			'TOTAL' as columnName
			, SUM(a.Actual_30plus_Delinquecy) OVER() AS Actual_30plus_Delinquecy
			, SUM(t.TargetDelinquencies) OVER() AS TargetDelinquencies
			  ,CASE
					WHEN ( (a.Actual_30plus_Delinquecy is NULL) OR (t.TargetDelinquencies is NULL) ) THEN NULL
					ELSE ( a.Actual_30plus_Delinquecy - t.TargetDelinquencies  ) 
					END as [Difference]
	FROM 
		#tmpTARGET t
		LEFT OUTER JOIN
		#tmpACTUAL a
		on a.EOM_Date = t.EOM_Date

SELECT * FROM #tmpTARGETunionACTUAL

----############################################################################################################ TRANSPOSE the data from columns to Rows - START

----------------- Target
SELECT 'Target' AS 'x', [Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec], [TOTAL]
INTO #tmpROW1
FROM (
	SELECT columnName, [targetDelinquencies]
	FROM #tmpTARGETunionACTUAL
	) AS SourceTable
PIVOT(AVG([targetDelinquencies]) FOR columnName IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec], [TOTAL])) AS PivotTable


--SELECT * FROM #tmpROW1

----------------- Actual
SELECT 'Actual' AS 'x', [Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec], [TOTAL]
INTO #tmpROW2
FROM (
	SELECT columnName, [Actual_30plus_Delinquecy]
	FROM #tmpTARGETunionACTUAL
	) AS SourceTable
PIVOT(AVG([Actual_30plus_Delinquecy]) FOR columnName IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec], [TOTAL])) AS PivotTable


--SELECT * FROM #tmpROW2


----------------- Difference

SELECT 'Difference' AS 'x', [Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec], [TOTAL]
INTO #tmpDifference
FROM (
	SELECT columnName, [Difference]
	FROM #tmpTARGETunionACTUAL
	) AS SourceTable
PIVOT(AVG([Difference]) FOR columnName IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec], [TOTAL])) AS PivotTable


--############################################################################################################ TRANSPOSE the data from columns to Rows - START

SELECT 1 as [RowOrder], #tmpROW1.*  FROM #tmpROW1
UNION
SELECT 2 as [RowOrder], #tmpROW2.* FROM #tmpROW2
UNION
SELECT 3 as [RowOrder], #tmpDifference.* FROM #tmpDifference
ORDER BY [RowOrder]

--############################################################################################################ 


IF OBJECT_ID('tempdb..#tmpTARGET') IS NOT NULL DROP TABLE #tmpTARGET
IF OBJECT_ID('tempdb..#tmpACTUAL') IS NOT NULL DROP TABLE #tmpACTUAL
IF OBJECT_ID('tempdb..#tmpDifference') IS NOT NULL DROP TABLE #tmpDifference
IF OBJECT_ID('tempdb..#tmpTARGETunionACTUAL') IS NOT NULL DROP TABLE #tmpTARGETunionACTUAL
IF OBJECT_ID('tempdb..#tmpROW1') IS NOT NULL DROP TABLE #tmpROW1
IF OBJECT_ID('tempdb..#tmpROW2') IS NOT NULL DROP TABLE #tmpROW2</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>JOIN</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>UNION_and_UNION_ALL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>JOIN</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>UNION_and_UNION_ALL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--UNION
--The UNION command is used to select related information from two tables, much like the JOIN command. However, 
--when using the UNION command all selected columns need to be of the same data type. With UNION, only distinct values are selected.

--UNION ALL
--The UNION ALL command is equal to the UNION command, except that UNION ALL selects all values.

--The difference between Union and Union all is that Union all will not eliminate duplicate rows, 
--instead it just pulls all rows from all tables fitting your query specifics and combines them into a tabl


=====================

SELECT * FROM CTE_FullOuterJoin
UNION
SELECT * FROM CTE_InnerJoin

=============SELECT FROM A UNION=================


Select DISTINCT * 
FROM (

		SELECT * FROM CTE_SSN	-- These are all hospital patients, and they have status if their SSN matches Medicaid Enrollees
		UNION
		SELECT * FROM CTE_MID	-- These are all hospital patients, and they have status if their MID matches Medicaid Enrollees
		
		-- The problem is that some patients have SSN, but not MID, or vice a versa
		--	For those patients the union has two records, we need to get rid of one
		-- All the other patients should have only one record
		
	 ) AS TheUnion
WHERE (		
			
			(-- These duplicates will go away with the Distinct Clause above
			
				-- These have a matching SSN. and therefore we have their status
				(T8_PK IN (
							SELECT T8_PK 
							FROM CTE_SSN 
							WHERE [Access_Project_Name] IS NOT NULL 
							)
				)
				AND
				-- These have a matching MID. and therefore we have their status			
				(T8_PK IN (
							SELECT T8_PK 
							FROM CTE_MID 
							WHERE [Access_Project_Name] IS NOT NULL 
							)
				)
				
					
						
					
		)
		
/////////////////////////////////////////////////////////////////

SELECT *
FROM
	(
		(
			SELECT
					[OWNER_OPERATOR] ,
					[UnitType] ,
					[Total_Used] ,
					[Avg_Used] ,
					[VehicleCount_Grand_Total] ,
					[VehicleCountPerDay_Grand_Average] 
							 
			FROM #prj_0031_SP_202
		) 
		UNION ALL	
		(
			SELECT
					[OWNER_OPERATOR] ,
					[UnitType] ,
					[Total_Used] ,
					[Avg_Used] ,
					[VehicleCount_Grand_Total] ,
					[VehicleCountPerDay_Grand_Average]   
			FROM #prj_0031_SP_202_SubTotals
		) 
	) TheUnion</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>JOIN</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>UNION_into_tempTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>JOIN</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>UNION_into_tempTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


IF OBJECT_ID('tempdb..#tmpTARGETunionACTUAL') IS NOT NULL DROP TABLE #tmpTARGETunionACTUAL

-- UNION a Row onto the bottom w/ the averages

	SELECT 
			FORMAT(t.EOM_Date, 'MMM') as theMonth
			, a.Actual_30plus_Delinquecy
			, t.TargetDelinquencies
			  ,CASE
					WHEN ( (a.Actual_30plus_Delinquecy is NULL) OR (t.TargetDelinquencies is NULL) ) THEN NULL
					ELSE ( a.Actual_30plus_Delinquecy - t.TargetDelinquencies  ) 
					END as [Difference]
	INTO #tmpTARGETunionACTUAL
	FROM 
		#tmpTARGET t
		LEFT OUTER JOIN
		#tmpACTUAL a
		on a.EOM_Date = t.EOM_Date

UNION ALL

	SELECT DISTINCT
			'AVERAGE' as theMonth
			, AVG(a.Actual_30plus_Delinquecy) OVER() AS Actual_30plus_Delinquecy
			, AVG(t.TargetDelinquencies) OVER() AS TargetDelinquencies
			  ,CASE
					WHEN ( (a.Actual_30plus_Delinquecy is NULL) OR (t.TargetDelinquencies is NULL) ) THEN NULL
					ELSE ( a.Actual_30plus_Delinquecy - t.TargetDelinquencies  ) 
					END as [Difference]
	FROM 
		#tmpTARGET t
		LEFT OUTER JOIN
		#tmpACTUAL a
		on a.EOM_Date = t.EOM_Date
		
IF OBJECT_ID('tempdb..#tmpTARGETunionACTUAL') IS NOT NULL DROP TABLE #tmpTARGETunionACTUAL</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>JOIN</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Use_CTE_to_UNION_a_ZeroValueGroup_ToExistingGroups</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>JOIN</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Use_CTE_to_UNION_a_ZeroValueGroup_ToExistingGroups</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- prj_8011_SP_339_RichardHudspeth_MAILLIST_ActiveTeam_List.sql

/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 12/07/2012
	By: glenn garson
	************************************************************************************
*/


USE [DB2_CRM]
GO


alter Procedure SP_339_RichardHudspeth_MAILLIST_ActiveTeam_List

	as

--========================================================================
WITH CTE_Zero(Team_Name, T17_PK)
AS
(	
	Select 
		(SELECT 'TheCalculation' =  'ALL' ) AS [Team_Name],
		(SELECT 'TheCalculation' =  0 ) AS [T17_PK]		
),			
CTE_TheData(Team_Name, T17_PK)
AS
(	
	SELECT 
		Team_Name, 
		T17_PK	
	FROM  T17_Team
		WHERE 
			(b_Active=1)
			and 
			(T17_Team.T14_FK = 13)
)

SELECT * FROM CTE_Zero
UNION
SELECT * FROM CTE_TheData
ORDER BY Team_Name	
--========================================================================
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>TEMP_Table_INSERT_INTO_and_UNION_of_Two_TEMP_tables</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>TEMP_Table_INSERT_INTO_and_UNION_of_Two_TEMP_tables</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0024_301_HYPERLINK_FORMs_Directory_Searchable_v2.sql

/*
	************************************************************************************
	NOTE: 
	Uses: 
	MODIFIED: 4/7/2015 - Now it manually brings in the MVC forms, using TEMP tables and UNION of manual and datbase sources
	Created: 4/11/2013
	By: glenn garson
	************************************************************************************
*/

use DB5_FORMs
go

alter Procedure prj_0024_301_HYPERLINK_FORMs_Directory_Searchable(
	@SearchString as NVARCHAR(25)
	)

	as
	
-- START DEBUGGING SECTION -------------------	

	PRINT '1] Input @SearchString: [' + @SearchString + ']'
	
	-- Get rid of any spaces the user may have left in there:
	select @SearchString = LTRIM(RTRIM(@SearchString))
	PRINT '2] Input @SearchString: [' + @SearchString + ']'
-- END DEBUGGING SECTION -------------------	

	
IF OBJECT_ID('tempdb..#T1_DataFromDB') IS NOT NULL

	DROP TABLE #T1_DataFromDB
IF OBJECT_ID('tempdb..#T2_ManualData') IS NOT NULL

	DROP TABLE #T2_ManualData  


--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SELECT 
	(SELECT 'TheCalculation' = '&lt;a href="file:///\\ccwnc01\Shared Documents\Common\Document_Library_ElectronicForms\' + Form_File_Name + '"&gt;CLICK&lt;/a&gt;') AS FORM,
	Form_Description, 
	Form_Alternate_Name
INTO #T1_DataFromDB
FROM  T0_FORMsDirectory						

--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++			
--Select * From #T1_DataFromDB
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
CREATE TABLE #T2_ManualData
  ( 
	FORM VARCHAR(max),
	Form_Description VARCHAR(max),
	Form_Alternate_Name VARCHAR(max)
  ) 


INSERT INTO #T2_ManualData
		  (FORM, Form_Description, Form_Alternate_Name)
	 VALUES
		   ('&lt;a href="http://10.0.0.14:54545/"&gt;CLICK&lt;/a&gt;','Database Project Requisition Form (Requires your Windows Login)', 'FORM_0010' )
 --+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 SELECT * 
 FROM (
		 SELECT * FROM #T1_DataFromDB
		 UNION
		 SELECT * FROM #T2_ManualData
	   ) As TheUnion
WHERE 

		(
				 ([Form_Description] like '%' +  @SearchString + '%')  
				OR ([Form_Alternate_Name] like '%' +  @SearchString + '%') 
		)	
						
go		

	
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TEST_DATA_simulation</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CreateTable_UnionAllRecords_then_INSERT</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TEST_DATA_simulation</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CreateTable_UnionAllRecords_then_INSERT</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- in vs exists from: https://weblogs.sqlteam.com/mladenp/archive/2007/05/18/60210.aspx
------------------------------------------------------------------
-- Prepare tables and data
------------------------------------------------------------------
CREATE TABLE t1 (id INT, title VARCHAR(20), someIntCol INT)
GO
CREATE TABLE t2 (id INT, t1Id INT, someData VARCHAR(20))
GO

INSERT INTO t1
SELECT 1, 'title 1', 5 UNION ALL
SELECT 2, 'title 2', 5 UNION ALL
SELECT 3, 'title 3', 5 UNION ALL
SELECT 4, 'title 4', 5 UNION ALL
SELECT null, 'title 5', 5 UNION ALL
SELECT null, 'title 6', 5

INSERT INTO t2
SELECT 1, 1, 'data 1' UNION ALL
SELECT 2, 1, 'data 2' UNION ALL
SELECT 3, 2, 'data 3' UNION ALL
SELECT 4, 3, 'data 4' UNION ALL
SELECT 5, 3, 'data 5' UNION ALL
SELECT 6, 3, 'data 6' UNION ALL
SELECT 7, 4, 'data 7' UNION ALL
SELECT 8, null, 'data 8' UNION ALL
SELECT 9, 6, 'data 9' UNION ALL
SELECT 10, 6, 'data 10' UNION ALL
SELECT 11, 8, 'data 11'

------------------------------------------------------------------
-- we want to get all data in t1 that has a child row in t2
------------------------------------------------------------------

-- join gives us more rows than we need, because it joins to every child row
SELECT    t1.* 
FROM    t1 
        JOIN t2 ON t1.id = t2.t1Id
-- distinct would solve that but it's not pretty nor efficient
SELECT    DISTINCT t1.* 
FROM    t1 
        JOIN t2 ON t1.id = t2.t1Id

-- now this is a weird part where someIntCol is a column in t1 
-- but the parser doesn't seem to mind that
SELECT    t1.* 
FROM    t1 
WHERE    t1.id IN (SELECT someIntCol FROM t2)

-- here in and exists both get correct results
SELECT    t1.* 
FROM    t1 
WHERE    t1.id IN (SELECT t1id FROM t2)

SELECT    t1.* 
FROM    t1 
WHERE    exists (SELECT * FROM t2 WHERE t1.id = t2.t1id)

------------------------------------------------------------------
-- we want to get all data in t1 that doesn't have a child row in t2
------------------------------------------------------------------

-- join gives us the correct result
SELECT    t1.* 
FROM    t1 
        LEFT JOIN t2 ON t1.id = t2.t1Id
WHERE    t2.id IS NULL

-- IN doesn't get correct results.
-- That's because of how IN treats NULLs and the Three-valued logic
-- NULL is treated as an unknown, so if there's a null in the t2.t1id 
-- NOT IN will return either NOT TRUE or NOT UNKNOWN. And neither can be TRUE.
-- when there's a NULL in the t1id column of the t2 table the NOT IN query will always return an empty set. 
SELECT    t1.* 
FROM    t1 
WHERE    t1.id NOT IN (SELECT t1id FROM t2)

-- NOT EXISTS gets correct results
SELECT    t1.* 
FROM    t1 
WHERE    NOT EXISTS (SELECT * FROM t2 WHERE t1.id = t2.t1id)
GO

DROP TABLE t2
DROP TABLE t1</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>