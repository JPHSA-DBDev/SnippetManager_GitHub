<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_01_Empty_ASP.NET_Core_Web_Application</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>CODE_01__Startup.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_01_Empty_ASP.NET_Core_Web_Application</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>CODE_01__Startup.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CODE_01__Startup.cs
-------------------
using DutchTreat.Data;      //required for AddDbContext&lt;DutchContext&gt;()
using DutchTreat.Services;  //for the IMailService
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
// required for 'UseSqlServer'
using Microsoft.EntityFrameworkCore;
// required for IConfiguration
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;


namespace DutchTreat
{
    public class Startup
    {
        //Private field to hold the configuration interface
        private readonly IConfiguration _config;

        //constructor to inject some interfaces into our startup
        public Startup(IConfiguration config)
        {
            _config = config;
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            //Add this and build the solution. Note need to add Using statement above to bring in the context
            // By default it is added as a 'Scoped' service
            services.AddDbContext&lt;DutchContext&gt;(cfg =&gt;
            {
                //could hard code a connection string in here, but instead we will use a configuration
                // The IConfiguration object (i.e. _config) has a property for the connection string, 
                //      that are stored in the configuration file (created by 'CreateDefaultBuilder' in Program.cs)
                cfg.UseSqlServer(_config.GetConnectionString("DutchConnectionString"));
            });


            //AddTransient =&gt; have no data on themselves, just methods
            //AddScoped =&gt; Kept around for the length of a connection, usually for length of request from client
            //AddSingleton =&gt; created once and kept for the lifetime of the server being up.
            //Later you would add support for a real mail service, so for now it just has an implementation that it can call
            //and for now it would be calling the fake method: NullMailService
            services.AddTransient&lt;IMailService, NullMailService&gt;();

            //Without this code (i.e.  services.AddMvc();)  you would get this error:
            //============================================================================================================================
            //An error occurred while starting the application.
            //    InvalidOperationException: Unable to find the required services. 
            //    Please add all the required services by calling 'IServiceCollection.AddMvc' inside the call to 'ConfigureServices(...)' 
            //    in the application startup code.
            //============================================================================================================================

            //add the 'DutchSeeder' class to the services collection as a Transient service
            services.AddTransient&lt;DutchSeeder&gt;();  //Note DutchSeeder uses DutchContext (a scoped service) which is added above

            //add 'IDutchRepository' as a service that can be used, but as an implementation use 'DutchRepository'
            services.AddTransient&lt;IDutchRepository, DutchRepository&gt;();
            
            services.AddMvc();  

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            //to see ERRORS in 'development'
            // Project(menu) =&gt; Dutchtreat Properties =&gt; Debug {tag} =&gt; Environment variables {right pane} 
            //          Name: ASPNETCORE ENVIRONMENT  Value: Development
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else // where the value of 'ASPNETCORE ENVIRONMENT' is not Development
            {
                app.UseExceptionHandler("/Error");
            }

            // The order matters in this Method
            //app.UseDefaultFiles(); // This lets it find default files (e.g. index.html), COMMENT IT OUT in order to process the MVC files first
            app.UseStaticFiles();  //This line lets you use .html etc files. They must be placed in the wwwroot folder of the project

            //Without this (i.e. app.UseMvc) the .html would work, but not the MVC components           
            app.UseMvc(cfg =&gt;
            {
                cfg.MapRoute("Default",                             //Set up the routes
                    "{controller}/{action}/{id?}",                  // where things in braces are place-holders, vs putting specific controller and action names in there. The "?" means that "id" is optional
                    new { controller = "App", Action = "Index" });  // and if the controller/action is missing then use this line
            });

            //We want this to happen last, so it goes at the bottom
            // put the seeding method call
            if (env.IsDevelopment())    //Project =&gt; Properties =&gt; Debug {left pane} =&gt; Environment Variables(Name='ASPNETCORE_ENVIRONMENT', Value='Development')
            {
                //Seed the database, but don't have the context, nor hosting environment at this point
                // b/c we need a context, we therefore need a scope first while we seed the database
                using (var scope = app.ApplicationServices.CreateScope())
                {
                    var seeder = scope.ServiceProvider.GetService&lt;DutchSeeder&gt;();
                    seeder.Seed();
                }

            }


            //// This was here by default
            //if (env.IsDevelopment())
            //{
            //    app.UseDeveloperExceptionPage();
            //}

            //// example of responding to any query w/ a fixed output
            //app.Run(async (context) =&gt;
            //{
            //    await context.Response.WriteAsync("&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello Glenn&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;");
            //    //await context.Response.WriteAsync("Hello World!");
            //});
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_01_Empty_ASP.NET_Core_Web_Application</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>CODE_01_about_Connection_String</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_01_Empty_ASP.NET_Core_Web_Application</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>CODE_01_about_Connection_String</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CODE_01_about_Connection_String
--------------------------------------------
// 1] add code (AddDbContext) to 'ConfigureServices', in Startup.cs
--------------------------------------------
using DutchTreat.Data;      //required for AddDbContext&lt;DutchContext&gt;()
// required for 'UseSqlServer'
using Microsoft.EntityFrameworkCore;

...

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            //Add this and build the solution. Note need to add Using statement above to bring in the context
            services.AddDbContext&lt;DutchContext&gt;(cfg =&gt;
            {
                //could hard code a connection string in here, but instead we will use a configuration
                // The IConfiguration object (i.e. _config) has a property for the connection string, 
                //      that are stored in the configuration file (created by 'CreateDefaultBuilder' in Program.cs)
                cfg.UseSqlServer(_config.GetConnectionString("DutchConnectionString"));
            });
--------------------------------------------
//2]  Modify 'BuildWebHost' in Program.cs: (1) ConfigureAppConfiguration, (2) SetupConfiguration
--------------------------------------------
        /*
         'CreateDefaultBuilder' sets up a configuration file that we can use
         'ConfigureAppConfiguration' takes a delegate that is going to pass in a configuration builder 
                so that we can add our own configuration options (e.g. the connection string)
                To do this we create a method called 'SetupConfiguration' to keep the code  here simple
                
        */
        public static IWebHost BuildWebHost(string[] args) =&gt;
            WebHost.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration(SetupConfiguration)			//&lt;===============
                .UseStartup&lt;Startup&gt;()
                .Build();

        private static void SetupConfiguration(WebHostBuilderContext ctx, IConfigurationBuilder builder)
        {
            //Remove the default configuration options
            builder.Sources.Clear();

            //builder allows for many types of configuration files. we will use a Json file, with path "config.json"
            // AddJsonFile parms: path, optional, reload on change
            // This example illustrates that you can have multple configuration sources combined into a single 'configuration'
            //          conflicts are resolved (last in is the one that counts, i.e. the bottom most one is the one that rules)
            //          So developer could use the first one, but when it is pushed out to production, the last one is the Production environments values, and they rule
            builder.AddJsonFile("config.json", false, true)         //This requires we create a 'config.json' file om the root
                //.AddXmlFile("config.xml", true)     //&lt;=== just to demonstrate that you can have multiple config files
                .AddEnvironmentVariables();         //&lt;=== to demonstrate you can use environmental variables
        }

--------------------------------------------
//3]  Create config.json in root of project
--------------------------------------------
/* 		This will allow us to store Hierarchies and values
		The name "DutchConnectionString", in this file will be used in the 'AddDbContext' of Startup.cs
		From the VS 2017 menu "View" =&gt; SQL Server Object Explorer =&gt; opens Pane named "SQL Server Object Explorer"
			This shows SQL servers on local machine */
			
  "ConnectionStrings": {
    //"DutchConnectionString": "server=(localdb)\\ProjectsV13;Database=DutchTreatDb;Integrated Security=true;MultipleActiveResultSets=true;"
    //MultipleActiveResultSets is required for EF, to retrieve multiple streams of data at the same time.
    "DutchConnectionString": "server=HOMETOWERVM05\\PROD;Database=JUNK;Integrated Security=true;MultipleActiveResultSets=true;"
  },			
			
--------------------------------------------			
//4  Add the Constructor for DutchContext.cs
--------------------------------------------
        //create constructor that takes the 'options' with my class as the 'type', and refer to it as 'options'
        //  then call the base class with those options, this way it now knows which connection string to use from config.json
        public DutchContext(DbContextOptions&lt;DutchContext&gt; options): base(options)
        {
            
        }	

--------------------------------------------
//5  re-build the object after this, and run the command (CMD or Powershell): 
--------------------------------------------  
&gt;dotnet ef database update
// It should respond:
Done.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_01_Empty_ASP.NET_Core_Web_Application</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>CODE_01_about_SeedingTheDatabase</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_01_Empty_ASP.NET_Core_Web_Application</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>CODE_01_about_SeedingTheDatabase</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CODE_01_about_SeedingTheDatabase

/*
1] Create a class: DutchSeeder, in the Data folder
	then create a constructor that takes a DbContext (ctx), and a local variable */

    public class DutchSeeder
    {
        private readonly DutchContext _ctx;

        public DutchSeeder(DutchContext ctx)
        {
            _ctx = ctx;
        }

        public void Seed()
        {
            //Before we create any queries, make sure the database exists
            //Create if it doesn't exist
            _ctx.Database.EnsureCreated();

            //".Any()" returns true if there are any records in the Products table
            //Not any
            if (!_ctx.Products.Any())
            {
                //Need to create sample data if there are not any products
            }

        }
    }
/*
2] In this example the author has a json file: "art.json" which he reads in to seed the table
	so a bunch of code is added to the "Seed()" method to check to see if the database exists
	and if it does not to pull data in from a JSON file	*/
	
	{See the CODE_01__Data/DutchSeeder.cs snippet for details}
/*
3] In the " ConfigureServices" method of Startup.cs you need to add something that calls the Seed method */

        public void ConfigureServices(IServiceCollection services)
        {
            // By default it is added as a 'Scoped' service
            services.AddDbContext&lt;DutchContext&gt;(cfg =&gt;
                cfg.UseSqlServer(_config.GetConnectionString("DutchConnectionString"));
            });
			...
            //AddTransient =&gt; have no data on themselves, just methods
            //AddScoped =&gt; Kept around for the length of a connection, usually for length of request from client
            //AddSingleton =&gt; created once and kept for the lifetime of the server being up.

            //add the 'DutchSeeder' class to the services collection as a Transient service
            services.AddTransient&lt;DutchSeeder&gt;();  //Note DutchSeeder uses DutchContext (a scoped service) which is added above
			... 
        }
/*	
4] In the Configure method of the Startup.cs you have to call the seed if/when you are in Development:	
	Project =&gt; Properties =&gt; Debug {left pane} =&gt; Environment Variables(Name='ASPNETCORE_ENVIRONMENT', Value='Development')
*/

         public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            ...

            //We want this to happen last, so it goes at the bottom
            // put the seeding method call
            if (env.IsDevelopment())    //Project =&gt; Properties =&gt; Debug {left pane} =&gt; Environment Variables(Name='ASPNETCORE_ENVIRONMENT', Value='Development')
            {
                //Seed the database, but don't have the context, nor hosting environment at this point
                // b/c we need a context, we therefore need a scope first while we seed the database
                using (var scope = app.ApplicationServices.CreateScope())
                {
                    var seeder = scope.ServiceProvider.GetService&lt;DutchSeeder&gt;();
                    seeder.Seed();
                }

            }
		
        }</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_02_Empty_ASP.NET_Core_API</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>CODE_02__Startup.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_02_Empty_ASP.NET_Core_API</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>CODE_02__Startup.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CODE_01__Startup.cs
//Modify: services.AddMvc()
---------------------------
using DutchTreat.Data;      //required for AddDbContext&lt;DutchContext&gt;()
using DutchTreat.Services;  //for the IMailService
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
// required for 'UseSqlServer'
using Microsoft.EntityFrameworkCore;
// required for IConfiguration
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;


namespace DutchTreat
{
    public class Startup
    {
        //Private field to hold the configuration interface
        private readonly IConfiguration _config;

        //constructor to inject some interfaces into our startup
        public Startup(IConfiguration config)
        {
            _config = config;
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            //Add this and build the solution. Note need to add Using statement above to bring in the context
            // By default it is added as a 'Scoped' service
            services.AddDbContext&lt;DutchContext&gt;(cfg =&gt;
            {
                //could hard code a connection string in here, but instead we will use a configuration
                // The IConfiguration object (i.e. _config) has a property for the connection string, 
                //      that are stored in the configuration file (created by 'CreateDefaultBuilder' in Program.cs)
                cfg.UseSqlServer(_config.GetConnectionString("DutchConnectionString"));
            });


            //AddTransient =&gt; have no data on themselves, just methods
            //AddScoped =&gt; Kept around for the length of a connection, usually for length of request from client
            //AddSingleton =&gt; created once and kept for the lifetime of the server being up.
            //Later you would add support for a real mail service, so for now it just has an implementation that it can call
            //and for now it would be calling the fake method: NullMailService
            services.AddTransient&lt;IMailService, NullMailService&gt;();

            //Without this code (i.e.  services.AddMvc();)  you would get this error:
            //============================================================================================================================
            //An error occurred while starting the application.
            //    InvalidOperationException: Unable to find the required services. 
            //    Please add all the required services by calling 'IServiceCollection.AddMvc' inside the call to 'ConfigureServices(...)' 
            //    in the application startup code.
            //============================================================================================================================

            //add the 'DutchSeeder' class to the services collection as a Transient service
            services.AddTransient&lt;DutchSeeder&gt;();  //Note DutchSeeder uses DutchContext (a scoped service) which is added above

            //add 'IDutchRepository' as a service that can be used, but as an implementation use 'DutchRepository'
            services.AddTransient&lt;IDutchRepository, DutchRepository&gt;();

            //services.AddMvc();  //If we leave it just like this then the Order and OrderItem (i.e. header, detail) for a self-referencing loop which causes an error for the API when returning data.
            //Since Json is the default data type returned we need to add in a Json option:
            services.AddMvc()
                .AddJsonOptions(opt =&gt; opt.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore);

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            //to see ERRORS in 'development'
            // Project(menu) =&gt; Dutchtreat Properties =&gt; Debug {tag} =&gt; Environment variables {right pane} 
            //          Name: ASPNETCORE ENVIRONMENT  Value: Development
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else // where the value of 'ASPNETCORE ENVIRONMENT' is not Development
            {
                app.UseExceptionHandler("/Error");
            }

            // The order matters in this Method
            //app.UseDefaultFiles(); // This lets it find default files (e.g. index.html), COMMENT IT OUT in order to process the MVC files first
            app.UseStaticFiles();  //This line lets you use .html etc files. They must be placed in the wwwroot folder of the project

            //Without this (i.e. app.UseMvc) the .html would work, but not the MVC components           
            app.UseMvc(cfg =&gt;
            {
                cfg.MapRoute("Default",                             //Set up the routes
                    "{controller}/{action}/{id?}",                  // where things in braces are place-holders, vs putting specific controller and action names in there. The "?" means that "id" is optional
                    new { controller = "App", Action = "Index" });  // and if the controller/action is missing then use this line
            });

            //We want this to happen last, so it goes at the bottom
            // put the seeding method call
            if (env.IsDevelopment())    //Project =&gt; Properties =&gt; Debug {left pane} =&gt; Environment Variables(Name='ASPNETCORE_ENVIRONMENT', Value='Development')
            {
                //Seed the database, but don't have the context, nor hosting environment at this point
                // b/c we need a context, we therefore need a scope first while we seed the database
                using (var scope = app.ApplicationServices.CreateScope())
                {
                    var seeder = scope.ServiceProvider.GetService&lt;DutchSeeder&gt;();
                    seeder.Seed();
                }

            }


            //// This was here by default
            //if (env.IsDevelopment())
            //{
            //    app.UseDeveloperExceptionPage();
            //}

            //// example of responding to any query w/ a fixed output
            //app.Run(async (context) =&gt;
            //{
            //    await context.Response.WriteAsync("&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello Glenn&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;");
            //    //await context.Response.WriteAsync("Hello World!");
            //});
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_04_Empty_ASP.NET_Core_AutoMapper</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>CODE_04_Startup.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_04_Empty_ASP.NET_Core_AutoMapper</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>CODE_04_Startup.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CODE_04_Startup.cs
------------------
using AutoMapper;       //required after installing Nuget: AutoMapper
using DutchTreat.Data;      //required for AddDbContext&lt;DutchContext&gt;()
using DutchTreat.Services;  //for the IMailService
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
// required for 'UseSqlServer'
using Microsoft.EntityFrameworkCore;
// required for IConfiguration
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;


namespace DutchTreat
{
    public class Startup
    {
        //Private field to hold the configuration interface
        private readonly IConfiguration _config;

        //constructor to inject some interfaces into our startup
        public Startup(IConfiguration config)
        {
            _config = config;
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            //Add this and build the solution. Note need to add Using statement above to bring in the context
            // By default it is added as a 'Scoped' service
            services.AddDbContext&lt;DutchContext&gt;(cfg =&gt;
            {
                //could hard code a connection string in here, but instead we will use a configuration
                // The IConfiguration object (i.e. _config) has a property for the connection string, 
                //      that are stored in the configuration file (created by 'CreateDefaultBuilder' in Program.cs)
                cfg.UseSqlServer(_config.GetConnectionString("DutchConnectionString"));
            });

            //for AutoMapper NuGet package
            services.AddAutoMapper();

            //--------------------------------------------------------------------
            //AddTransient =&gt; have no data on themselves, just methods
            //AddScoped =&gt; Kept around for the length of a connection, usually for length of request from client
            //AddSingleton =&gt; created once and kept for the lifetime of the server being up.
            //--------------------------------------------------------------------
            //Later you would add support for a real mail service, so for now it just has an implementation that it can call
            //and for now it would be calling the fake method: NullMailService
            services.AddTransient&lt;IMailService, NullMailService&gt;();

            //Without this code (i.e.  services.AddMvc();)  you would get this error:
            //============================================================================================================================
            //An error occurred while starting the application.
            //    InvalidOperationException: Unable to find the required services. 
            //    Please add all the required services by calling 'IServiceCollection.AddMvc' inside the call to 'ConfigureServices(...)' 
            //    in the application startup code.
            //============================================================================================================================

            //add the 'DutchSeeder' class to the services collection as a Transient service
            services.AddTransient&lt;DutchSeeder&gt;();  //Note DutchSeeder uses DutchContext (a scoped service) which is added above

            //add 'IDutchRepository' as a service that can be used, but as an implementation use 'DutchRepository'
            services.AddTransient&lt;IDutchRepository, DutchRepository&gt;();

            //services.AddMvc();  //If we leave it just like this then the Order and OrderItem (i.e. header, detail) for a self-referencing loop which causes an error for the API when returning data.
            //Since Json is the default data type returned we need to add in a Json option:
            services.AddMvc()
                .AddJsonOptions(opt =&gt; opt.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore);

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            //to see ERRORS in 'development'
            // Project(menu) =&gt; Dutchtreat Properties =&gt; Debug {tag} =&gt; Environment variables {right pane} 
            //          Name: ASPNETCORE ENVIRONMENT  Value: Development
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else // where the value of 'ASPNETCORE ENVIRONMENT' is not Development
            {
                app.UseExceptionHandler("/Error");
            }

            // The order matters in this Method
            //app.UseDefaultFiles(); // This lets it find default files (e.g. index.html), COMMENT IT OUT in order to process the MVC files first
            app.UseStaticFiles();  //This line lets you use .html etc files. They must be placed in the wwwroot folder of the project

            //Without this (i.e. app.UseMvc) the .html would work, but not the MVC components           
            app.UseMvc(cfg =&gt;
            {
                cfg.MapRoute("Default",                             //Set up the routes
                    "{controller}/{action}/{id?}",                  // where things in braces are place-holders, vs putting specific controller and action names in there. The "?" means that "id" is optional
                    new { controller = "App", Action = "Index" });  // and if the controller/action is missing then use this line
            });

            //We want this to happen last, so it goes at the bottom
            // put the seeding method call
            if (env.IsDevelopment())    //Project =&gt; Properties =&gt; Debug {left pane} =&gt; Environment Variables(Name='ASPNETCORE_ENVIRONMENT', Value='Development')
            {
                //Seed the database, but don't have the context, nor hosting environment at this point
                // b/c we need a context, we therefore need a scope first while we seed the database
                using (var scope = app.ApplicationServices.CreateScope())
                {
                    var seeder = scope.ServiceProvider.GetService&lt;DutchSeeder&gt;();
                    seeder.Seed();
                }

            }


            //// This was here by default
            //if (env.IsDevelopment())
            //{
            //    app.UseDeveloperExceptionPage();
            //}

            //// example of responding to any query w/ a fixed output
            //app.Run(async (context) =&gt;
            //{
            //    await context.Response.WriteAsync("&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello Glenn&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;");
            //    //await context.Response.WriteAsync("Hello World!");
            //});
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>