<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQL</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Xml data type is not supported in distributed queries</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQL</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Xml data type is not supported in distributed queries</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>ERROR: 

Msg 9514, Level 16, State 1, Procedure prj_0021_REP_002_SpotHeavyLightOperators, Line 67
Xml data type is not supported in distributed queries. Remote object 'B2WTIMESHEET\B2WONE.BUILD2WIN.dbo.BusinessUnit' has xml column(s).





Solution #1: Since I don't need the xml fields, I am creating a view 


=================================================================
https://social.msdn.microsoft.com/Forums/sqlserver/en-US/d53699b9-a949-44a5-9630-9570f38b127b/xml-data-type-is-not-supported-in-distributed-queries-remote-object-openrowset-has-xml-columns?forum=sqlxml

1. You cannot use a table or view that contains xml or clr type as 4-part name in your query
2. You need to cast the column to either nvarchar(max) or varbinary(max) or other appropriate type to use
3. If you have a table that has xml type for example then you need to create a view that contains all 
columns other than xml and query it instead. Or you can issue a pass-through query using OPEN QUERY with the appropriate columns only.

Here is a work around:

SELECT

      Cast(a.XML_Data as XML) as XML_Data

FROM

      OPENQUERY([LINKED SERVER NAME HERE],'

          SELECT

            Cast(XML_Data as Varchar) as XML_Data
         FROM
            [DATABASE NAME].[SCHEMA].[TABLE NAME]'
) a


Basically, the data is queried on the remote server, converts the XML data to a varchar, 
sends the data to the requesting server and then reconverts it back to XML.

=================================================================</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>