<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_04_Empty_ASP.NET_Core_AutoMapper</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>about_CODE_04_Empty_ASP.NET_Core_AutoMapper</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_04_Empty_ASP.NET_Core_AutoMapper</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>about_CODE_04_Empty_ASP.NET_Core_AutoMapper</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_CODE_04_Empty_ASP.NET_Core_AutoMapper
/*

1] Install Nuget packages

In Solution Explorer =&gt; right click 'Dependencies'
=&gt; Manage Nuget Packages =&gt; Browse: AutoMapper
	AutoMapper by Jimmy Bogard
	[Install]
	
Because this project is .Core we also need nuget package:
	This is a wrapper to allow Dependency injection to deal 
	with Autmapper in .Core
	"AutoMapper.Extensions.Microsoft.DependencyInjection"
	by Jimmy Brogard
	{So install that one as well}
	
2] Startup.cs: add support for Automapper*/
        public void ConfigureServices(IServiceCollection services)
        {
			...
			services.AddAutoMapper();	// will require a set of automapper profiles
	    	... 						// so see the DutchMappingProfile.cs, Data folder
	    }
/*
3] Inject a third service, into the Controller: OrdersController.cs
	inject an IMapper, and create a local read-only variable  */

namespace DutchTreat.Controllers
{
    [Route("api/[Controller]")]
    public class OrdersController : Controller
    {
        private readonly IDutchRepository _repository;
        private readonly ILogger&lt;OrdersController&gt; _logger;
        private readonly IMapper _mapper;

        public OrdersController(IDutchRepository repository, ILogger&lt;OrdersController&gt; logger, IMapper mapper)
        {
            _repository = repository;
            _logger = logger;
            _mapper = mapper;
        }
        ...
     }
 } /*
 4] Then in the same controller use the _mapper in the IActionResult method: 
 	to map from an 'Order' to an 'OrderViewModel'
 	It will take an 'order' that is passed in and return a mapped 'order' from the ViewModel
 	BECAUSE we always want to be returning ViewModels
 */
        [HttpGet("{id:int}")]
        public IActionResult Get(int id)
        {
            try
            {
                var order = _repository.GetAllOrderById(id);
                //returns an OrderViewModel when an 'Order' is passed to it.
                // HOWEVER it needs some mapping instructions from Data/DutchMappingProfile.cs
                if (order != null) return Ok(_mapper.Map&lt;Order, OrderViewModel&gt;(order));
                else return NotFound();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Failed to get Orders: {ex}");
                return BadRequest("Failed to get orders");
            }
        }    	
 /* If you just try to run it like this from Postman 
 		&gt; http://localhost:8899/api/orders/2
 	you will get a 'BadRequest'	  
 	Before this will work you need an automapper profile: DutchMappingProfile.cs  

5] DutchMappingProfile.cs in Data Folder
	in the Constructor:  */
	
       public DutchMappingProfile() //Constructor
        {
            //Create a map between 'Order' and the 'OrderViewModel' - Note both Namespaces are required above

            /*Simple version:----------------------------------------------------------------------------
            CreateMap&lt;Order, OrderViewModel&gt;();

            /* From Postman send: http://localhost:8899/api/orders/2
                Postman returns the viewmodel:
                            {
                                "orderId": 0,               //&lt;=== This is not populating, it should be '2'
                                "orderDate": "2017-12-25T00:00:00",
                                "orderNumber": null
                            }
            ----------------------------------------------------------------------------------------------*/

            CreateMap&lt;Order, OrderViewModel&gt;() //convention based: will match properties by names/types
                .ForMember(o =&gt; o.OrderId, ex =&gt; ex.MapFrom(o =&gt; o.Id))
                //So when looking for 'OrderId', map it from the source 'Id' field
                .ReverseMap();  //This says use the information before it, and create a map in the reverse order (see OrdersController):
                                //var newOrder = _mapper.Map&lt;OrderViewModel, Order&gt;(model);
                                // and
                                //return Created($"/api/orders/{newOrder.Id}", _mapper.Map&lt;Order,OrderViewModel&gt;(newOrder));

            /*From Postman GET: http://localhost:8899/api/orders/2
              Now it returns:
                             {
                                "orderId": 2,
                                "orderDate": "2017-12-25T00:00:00",
                                "orderNumber": null
                            }       */

        }	
/*
6] Likewise in the OrdersController.cs =&gt; "public IActionResult Get()" Method
*/

        [HttpGet]
        public IActionResult Get()
        {
            try
            {
                //first:
                //return Ok(_repository.GetAllOrders());
                //Second - use the Mapper,
                //      and since the input (_repository.GetAllOrders()) is a collection, the two types must be a collection (i.e. IEnumerable&lt;&gt;)
                //Note Once you map the object_1 to object_2, Automapper knows how to map Collections of those objects to each other
                return Ok(_mapper.Map&lt;IEnumerable&lt;Order&gt;, IEnumerable&lt;OrderViewModel&gt;&gt;(_repository.GetAllOrders()));



            }
            catch (Exception ex)
            {
                _logger.LogError($"Failed to get Orders: {ex}");
                return BadRequest("Failed to get orders");
            }

        }

            /*From Postman GET: http://localhost:8899/api/orders   {i.e. the collection, rather than a single record}
              Now it returns:
								[
								    {
								        "orderId": 1,
								        "orderDate": "2017-12-10T10:12:15.9496825",
								        "orderNumber": "12345"
								    },
								    {
								        "orderId": 2,
								        "orderDate": "2017-12-25T00:00:00",
								        "orderNumber": null
								    },
								    {
								        "orderId": 3,
								        "orderDate": "2017-12-25T12:45:19.1290339",
								        "orderNumber": "1234"
								    },
								    {
								        "orderId": 4,
								        "orderDate": "2017-12-25T14:18:47.3651237",
								        "orderNumber": "1234"
								    }
								]       
7] Now in the POST simplify it*/

       [HttpPost]
        public IActionResult Post([FromBody]OrderViewModel model)    
        {
        	...
		    //Now with the Automapper, instead of doing all this 
		    var newOrder = new Order()
		    {
		        OrderDate = model.OrderDate,
		        OrderNumber = model.OrderNumber,
		        Id = model.OrderId
		    };								
			...
			/*use the Automapper */	
		    //So with the Automapper do it like this, i.e the opposite map:
		    
		        var newOrder = _mapper.Map&lt;OrderViewModel, Order&gt;(model);
		    ...    
		    //and return it:
		    return Created($"/api/orders/{newOrder.Id}", _mapper.Map&lt;Order,OrderViewModel&gt;(newOrder));    
		    ....    								
		}
            /*From Postman POST: http://localhost:8899/api/orders   
             Postman Body:
             	{
					 "orderNumber": "1234"
				}
              Now it returns a new record :	
            
	            {
				    "orderId": 5,
				    "orderDate": "2018-01-06T11:34:40.2398483-06:00",
				    "orderNumber": "1234"
				}
			*/
 	    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CODE_04_Empty_ASP.NET_Core_AutoMapper</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>CODE_04_Data/DutchMappingProfile.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CODE_04_Empty_ASP.NET_Core_AutoMapper</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>CODE_04_Data/DutchMappingProfile.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CODE_04_Data/DutchMappingProfile.cs
-----------------------------------
using AutoMapper;
using DutchTreat.Data.Entities;
using DutchTreat.ViewModels;

//required to derive from 'Profile'

namespace DutchTreat.Data
{
    public class DutchMappingProfile : Profile
    {
        public DutchMappingProfile() //Constructor
        {
            //Create a map between 'Order' and the 'OrderViewModel' - Note both Namespaces are required above

            /*Simple version:----------------------------------------------------------------------------
            CreateMap&lt;Order, OrderViewModel&gt;();

            /* From Postman send: http://localhost:8899/api/orders/2
                Postman returns the viewmodel:
                            {
                                "orderId": 0,               //&lt;=== This is not populating, it should be '2'
                                "orderDate": "2017-12-25T00:00:00",
                                "orderNumber": null
                            }
            ----------------------------------------------------------------------------------------------*/

            CreateMap&lt;Order, OrderViewModel&gt;() //convention based: will match properties by names/types
                .ForMember(o =&gt; o.OrderId, ex =&gt; ex.MapFrom(o =&gt; o.Id))
                //So when looking for 'OrderId', map it from the source 'Id' field
                .ReverseMap();  //This says use the information before it, and create a map in the reverse order (see OrdersController):
                                //var newOrder = _mapper.Map&lt;OrderViewModel, Order&gt;(model);
                                // and
                                //return Created($"/api/orders/{newOrder.Id}", _mapper.Map&lt;Order,OrderViewModel&gt;(newOrder));

            /*From Postman send: http://localhost:8899/api/orders/2
              Now it returns:
                             {
                                "orderId": 2,
                                "orderDate": "2017-12-25T00:00:00",
                                "orderNumber": null
                            }       */

        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Data_Simulation</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_SimulateHeaderDetail_with_RandomNumericAndCharacterStrings__MappingClasses</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Data_Simulation</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_SimulateHeaderDetail_with_RandomNumericAndCharacterStrings__MappingClasses</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--------------------------/Models/Mapping/Header_R_Map.cs

using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace Test_01.Models
	{
	public class Header_R_Map : EntityTypeConfiguration&lt;Header_R&gt;
		{
		public Header_R_Map()
			{
			// Primary Key
			this.HasKey(t =&gt; t.Header_PK);

			// Properties
			this.Property(t =&gt; t.TheName)
				.HasMaxLength(255);

			this.Property(t =&gt; t.PhoneNumber)
				.HasMaxLength(11);

			this.Property(t =&gt; t.Header_RowVersion)
				.IsFixedLength()
				.HasMaxLength(8)
				.IsRowVersion();

			this.Property(t =&gt; t.Percent_Done_0_00_to_1_00).HasPrecision(3, 2);	//This had to be customized after the EF Power Tools
			}
		}
	}

--------------------------/Models/Mapping/Detail_R_Map.cs

using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace Test_01.Models
	{
	public class Detail_R_Map : EntityTypeConfiguration&lt;Detail_R&gt;
		{
		public Detail_R_Map()
			{
			// Primary Key
			this.HasKey(t =&gt; t.Detail_PK);

			// Properties
			this.Property(t =&gt; t.Detail_Category_nvarchar)
				.HasMaxLength(255);

			this.Property(t =&gt; t.Detail_R_RowVersion)
				.IsFixedLength()
				.HasMaxLength(8)
				.IsRowVersion();


			// Relationships
			this.HasOptional(t =&gt; t.Header_R)
				.WithMany(t =&gt; t.Detail_R)
				.HasForeignKey(d =&gt; d.Header_FK);

			}
		}
	}







</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DATASET_DATATABLE</Category>
        <Language>VB.NET</Language>
        <Public>false</Public>
        <Name>ShowTableMappings</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DATASET_DATATABLE</Category>
          <Language>VB.NET</Language>
          <Public>false</Public>
          <Name>ShowTableMappings</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Public Sub ShowTableMappings(ByVal adapterToMap As SqlClient.SqlDataAdapter, ByVal strFromWhere As String)
    Console.WriteLine("")
    Console.WriteLine("")
    Console.WriteLine("")
    Console.WriteLine("")
    Console.WriteLine("== START ShowTableMappings=======================================")
    Console.WriteLine("from: " &amp; strFromWhere)

    Console.WriteLine("adapterToMap.TableMappings.Count(): " &amp; adapterToMap.TableMappings.Count())




    Dim myMessage As String = "Table Mappings:" + ControlChars.Cr
    Dim i As Integer
    For i = 0 To adapterToMap.TableMappings.Count - 1
        myMessage += "Mapping - " &amp; i.ToString() + "] " _
           + adapterToMap.TableMappings(i).ToString() + ControlChars.Cr
    Next i
    Console.WriteLine(myMessage)

    Console.WriteLine("== END ShowTableMappings=======================================")
End Sub
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework_CodeFirst</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>03_TwoTables_using_PK_and_FK__Detail_R_Map.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework_CodeFirst</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>03_TwoTables_using_PK_and_FK__Detail_R_Map.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace Test_01.Models
	{
	public class Detail_R_Map : EntityTypeConfiguration&lt;Detail_R&gt;
		{
		public Detail_R_Map()
			{
			// Primary Key
			this.HasKey(t =&gt; t.Detail_PK);

			// Properties
			this.Property(t =&gt; t.Detail_Category_nvarchar)
				.HasMaxLength(255);

			this.Property(t =&gt; t.Detail_R_RowVersion)
				.IsFixedLength()
				.HasMaxLength(8)
				.IsRowVersion();


			// Relationships
			this.HasOptional(t =&gt; t.Header_R)
				.WithMany(t =&gt; t.Detail_R)
				.HasForeignKey(d =&gt; d.Header_FK);

			}
		}
	}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework_CodeFirst</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>03_TwoTables_using_PK_and_FK__Header_R_Map.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework_CodeFirst</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>03_TwoTables_using_PK_and_FK__Header_R_Map.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace Test_01.Models
	{
	public class Header_R_Map : EntityTypeConfiguration&lt;Header_R&gt;
		{
		public Header_R_Map()
			{
			// Primary Key
			this.HasKey(t =&gt; t.Header_PK);

			// Properties
			this.Property(t =&gt; t.TheName)
				.HasMaxLength(255);

			this.Property(t =&gt; t.PhoneNumber)
				.HasMaxLength(11);

			this.Property(t =&gt; t.Header_RowVersion)
				.IsFixedLength()
				.HasMaxLength(8)
				.IsRowVersion();

			this.Property(t =&gt; t.Percent_Done_0_00_to_1_00).HasPrecision(3, 2);	//This had to be customized after the EF Power Tools
			}
		}
	}
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework_CodeFirst</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>Mapping_SQL_VIEW_in_codeFirst</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework_CodeFirst</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>Mapping_SQL_VIEW_in_codeFirst</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>ref: http://stackoverflow.com/questions/16890505/mapping-sql-view-in-code-first-approach

=================Solution # 1==============================================================

//A view can be mapped as a table. It should be something like:

public class UserFoldersMap : EntityTypeConfiguration&lt;UserFolders&gt;
{
    public UserFoldersMap()
    {
        this.ToTable("view_name");

        this.HasKey(t =&gt; t.Id);                        
    }
}

=================Solution # 2==============================================================
/*
I found that if my mapping didn't perfectly match my view then it would error trying to generate the "table", 
	since it thought it already existed or didn't match the definition in my code.

I used the Reverse Engineer Code First feature in EF Power Tools 
	and copied the model 
	and model Map files it generated for my view. 
	These worked without issue.

Then, the final step, I added the Map file during your OnModelCreation method in your DbContext:	*/

protected override void OnModelCreating(DbModelBuilder modelBuilder)
{
    modelBuilder.Configurations.Add(new UserFoldersMap());
}







=================Problem==============================================================

//I have a SQL view:

WITH DirectReports (ID,ParentFolderID, ParentFolderName,FolderID,FolderName,OwnerOCID,OwnerArName,OwnerEnName,FolderType,LEVEL)
                            AS
                            (
SELECT        e.Id AS ID,cast(cast(0 AS binary) AS uniqueidentifier) AS ParentFolderID, cast('MainFolder - ' + MainFolders.enName AS nvarchar(250)) AS ParentFolderName, 
                         e.Id AS FolderID, e.Name AS FolderName, WorkSpaces.Owner_Id AS OwnerOCID, OrgCharts.arName AS OwnerArName, OrgCharts.enName AS OwnerEnName, 
                         MainFolders.Type AS FolderType, 0 AS LEVEL
FROM            WorkSpaceFolders AS e INNER JOIN
                         MainFolders ON MainFolders.RootFolder_Id = e.Id INNER JOIN
                         WorkSpaces ON WorkSpaces.Id = MainFolders.WorkSpace_Id INNER JOIN
                         OrgCharts ON OrgCharts.Id = WorkSpaces.Owner_Id
WHERE        e.Root = 1 AND e.Parent_Id IS NULL
UNION ALL
SELECT        e.Id AS ID,e.Parent_Id AS ParentFolderID, d .FolderName AS ParentFolderName, e.Id AS FolderID, e.Name AS ChildFolderName, d .OwnerOCID, d .OwnerArName, 
                         d .OwnerEnName, d .FolderType, LEVEL + 1
FROM            WorkSpaceFolders AS e INNER JOIN
                         DirectReports AS d ON e.Parent_Id = d .FolderID)
    SELECT        *
     FROM            DirectReports

//and I'm using code first migrations to my database - how can I map a view to the following entity?

public class UserFolders
{
    public Guid ID { get; set; }
    public Guid ParentFolderID { get; set; }
    public string ParentFolderName { get; set; }
    public Guid FolderID { get; set; }
    public string FolderName { get; set; }
    public Guid OwnerOCID { get; set; }
    public string OwnerArName { get; set; }
    public string OwnerEnName { get; set; }
    public int FolderType { get; set; }
    public int LEVEL { get; set; }
}










</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework_PowerTools</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>1_ReverseEngineerCodeFirst__Mapping.tt</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework_PowerTools</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>1_ReverseEngineerCodeFirst__Mapping.tt</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;#
// Simplifying assumptions based on reverse engineer rules
//  - No complex types
//  - One entity container
//  - No inheritance
//  - Always have two navigation properties
//  - All associations expose FKs (except many:many)
#&gt;
&lt;#@ template hostspecific="true" language="C#" #&gt;
&lt;#@ include file="EF.Utility.CS.ttinclude" #&gt;&lt;#@
 output extension=".cs" #&gt;&lt;#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);

	if (efHost.EntityFrameworkVersion &gt;= new Version(4, 4))
	{
#&gt;
using System.ComponentModel.DataAnnotations.Schema;
&lt;#
	}
	else
	{
#&gt;
using System.ComponentModel.DataAnnotations;
&lt;#
	}
#&gt;
using System.Data.Entity.ModelConfiguration;

namespace &lt;#= code.EscapeNamespace(efHost.Namespace) #&gt;
{
    public class &lt;#= efHost.EntityType.Name #&gt;Map : EntityTypeConfiguration&lt;&lt;#= efHost.EntityType.Name #&gt;&gt;
    {
        public &lt;#= efHost.EntityType.Name #&gt;Map()
        {
            // Primary Key
&lt;#
    if (efHost.EntityType.KeyMembers.Count() == 1)
    {
#&gt;
            this.HasKey(t =&gt; t.&lt;#= efHost.EntityType.KeyMembers.Single().Name #&gt;);
&lt;#
    }
    else
    {
#&gt;
            this.HasKey(t =&gt; new { &lt;#= string.Join(", ", efHost.EntityType.KeyMembers.Select(m =&gt; "t." + m.Name)) #&gt; });
&lt;#
    }
#&gt;

            // Properties
&lt;#
    foreach (var prop in efHost.EntityType.Properties)
    {
        var type = (PrimitiveType)prop.TypeUsage.EdmType;
        var isKey = efHost.EntityType.KeyMembers.Contains(prop);
        var storeProp = efHost.PropertyToColumnMappings[prop];
        var sgpFacet = storeProp.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "StoreGeneratedPattern");
        var storeGeneratedPattern = sgpFacet == null
            ? StoreGeneratedPattern.None
            : (StoreGeneratedPattern)sgpFacet.Value;
            
        var configLines = new List&lt;string&gt;();
             
        if (type.ClrEquivalentType == typeof(int)
            || type.ClrEquivalentType == typeof(decimal)
            || type.ClrEquivalentType == typeof(short)
            || type.ClrEquivalentType == typeof(long))
        {
            if (isKey &amp;&amp; storeGeneratedPattern != StoreGeneratedPattern.Identity)
            {
                configLines.Add(".HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)");
            }
            else if ((!isKey || efHost.EntityType.KeyMembers.Count &gt; 1) &amp;&amp; storeGeneratedPattern == StoreGeneratedPattern.Identity)
            {
                configLines.Add(".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)");
            }
        }
                    
        if (type.ClrEquivalentType == typeof(string)
            || type.ClrEquivalentType == typeof(byte[]))
        {
            if (!prop.Nullable)
            {
                configLines.Add(".IsRequired()");
            }
                
            var unicodeFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "IsUnicode");
            if(unicodeFacet != null &amp;&amp; !(bool)unicodeFacet.Value)
            {
                configLines.Add(".IsUnicode(false)");
            }
                
            var fixedLengthFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "FixedLength");
            if (fixedLengthFacet != null &amp;&amp; (bool)fixedLengthFacet.Value)
            {
                configLines.Add(".IsFixedLength()");
            }
                
            var maxLengthFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f =&gt; f.Name == "MaxLength");
            if (maxLengthFacet != null &amp;&amp; !maxLengthFacet.IsUnbounded)
            {
                configLines.Add(string.Format(".HasMaxLength({0})", maxLengthFacet.Value));

                if (storeGeneratedPattern == StoreGeneratedPattern.Computed
                    &amp;&amp; type.ClrEquivalentType == typeof(byte[])
                    &amp;&amp; (int)maxLengthFacet.Value == 8)
                {
                    configLines.Add(".IsRowVersion()");
                }
            }
        }
            
        if(configLines.Any())
        {
#&gt;
            this.Property(t =&gt; t.&lt;#= prop.Name #&gt;)
                &lt;#= string.Join("\r\n                ", configLines) #&gt;;

&lt;#
        }
    }


        
    // Find m:m relationshipsto configure 
    var manyManyRelationships = efHost.EntityType.NavigationProperties
        .Where(np =&gt; np.DeclaringType == efHost.EntityType
            &amp;&amp; np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            &amp;&amp; np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            &amp;&amp; np.RelationshipType.RelationshipEndMembers.First() == np.FromEndMember); // &lt;- ensures we only configure from one end
        
    // Find FK relationships that this entity is the dependent of
    var fkRelationships = efHost.EntityType.NavigationProperties
        .Where(np =&gt; np.DeclaringType == efHost.EntityType
            &amp;&amp; ((AssociationType)np.RelationshipType).IsForeignKey
            &amp;&amp; ((AssociationType)np.RelationshipType).ReferentialConstraints.Single().ToRole == np.FromEndMember);
        
    if(manyManyRelationships.Any() || fkRelationships.Any())
    {
#&gt;

            // Relationships
&lt;#
        foreach (var navProperty in manyManyRelationships)
        {
            var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n =&gt; n.RelationshipType == navProperty.RelationshipType &amp;&amp; n != navProperty).Single();
            var association = (AssociationType)navProperty.RelationshipType;
            var mapping = efHost.ManyToManyMappings[association];
            var item1 = mapping.Item1;
            var mappingTableName = (string)mapping.Item1.MetadataProperties["Table"].Value
                ?? item1.Name;
            var mappingSchemaName = (string)item1.MetadataProperties["Schema"].Value;

            // Need to ensure that FKs are decalred in the same order as the PK properties on each principal type
            var leftType = (EntityType)navProperty.DeclaringType;
            var leftKeyMappings = mapping.Item2[navProperty.FromEndMember];
            var leftColumns = string.Join(", ", leftType.KeyMembers.Select(m =&gt; "\"" + leftKeyMappings[m] + "\""));
            var rightType = (EntityType)otherNavProperty.DeclaringType;
            var rightKeyMappings = mapping.Item2[otherNavProperty.FromEndMember];
            var rightColumns = string.Join(", ", rightType.KeyMembers.Select(m =&gt; "\"" + rightKeyMappings[m] + "\""));
#&gt;
            this.HasMany(t =&gt; t.&lt;#= code.Escape(navProperty) #&gt;)
                .WithMany(t =&gt; t.&lt;#= code.Escape(otherNavProperty) #&gt;)
                .Map(m =&gt;
                    {
&lt;#
            if (mappingSchemaName == "dbo" || string.IsNullOrWhiteSpace(mappingSchemaName))
            {
#&gt;
                        m.ToTable("&lt;#= mappingTableName #&gt;");
&lt;#
            }
            else
            {
#&gt;
                        m.ToTable("&lt;#= mappingTableName #&gt;", "&lt;#= mappingSchemaName #&gt;");
&lt;#
            }
#&gt;
                        m.MapLeftKey(&lt;#= leftColumns #&gt;);
                        m.MapRightKey(&lt;#= rightColumns #&gt;);
                    });

&lt;#
        }
            
        foreach (var navProperty in fkRelationships)
        {
            var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n =&gt; n.RelationshipType == navProperty.RelationshipType &amp;&amp; n != navProperty).Single();
            var association = (AssociationType)navProperty.RelationshipType;
                
            if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One)
            {
#&gt;
            this.HasRequired(t =&gt; t.&lt;#= code.Escape(navProperty) #&gt;)
&lt;#
            }
            else
            {
#&gt;
            this.HasOptional(t =&gt; t.&lt;#= code.Escape(navProperty) #&gt;)
&lt;#
            }
                
            if(navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#&gt;
                .WithMany(t =&gt; t.&lt;#= code.Escape(otherNavProperty) #&gt;)
&lt;#
                if(association.ReferentialConstraints.Single().ToProperties.Count == 1)
                {
#&gt;
                .HasForeignKey(d =&gt; d.&lt;#= association.ReferentialConstraints.Single().ToProperties.Single().Name #&gt;);
&lt;#
                }
                else
                {
#&gt;
                .HasForeignKey(d =&gt; new { &lt;#= string.Join(", ", association.ReferentialConstraints.Single().ToProperties.Select(p =&gt; "d." + p.Name)) #&gt; });
&lt;#
                }
            }
            else
            {
                // NOTE: We can assume that this is a required:optional relationship 
                //       as EDMGen will never create an optional:optional relationship
                // 		 because everything is one:many except PK-PK relationships which must be required
#&gt;
                .WithOptional(t =&gt; t.&lt;#= code.Escape(otherNavProperty) #&gt;);
&lt;#	
                }
            }
#&gt;

&lt;#
        }
#&gt;
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking

/*

In database management systems following the relational model, 
a junction table is a database table 
that contains common fields from two or more other database tables within the same database. 
It is on the many side of a one-to-many relationship with each of the other tables. 
Junction tables are known under many names, among them 
cross-reference table, 
bridge table, 
join table, 
map table, 
intersection table, 
linking table, 
many-to-many resolver, 
link table, 
pairing table, 
pivot table, 
transition table, 
crosswalk, 
associative entity 
or association table.
*/


see the 'TEST_DATA_simulation' section for a test data table simulation of this type of data</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Logins_Users</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Usernames_Logins_MapThemFromDatabaseToServer_mark_ORPHANED</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Logins_Users</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Usernames_Logins_MapThemFromDatabaseToServer_mark_ORPHANED</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Usernames_Logins_MapThemFromDatabaseToServer_mark_ORPHANED


use barriere
go

select
    dp.name [user_name]
    ,dp.type_desc [user_type]
    ,isnull(sp.name,'Orhphaned!') [login_name]
    ,sp.type_desc [login_type]
from   
    sys.database_principals dp
    left join sys.server_principals sp on (dp.sid = sp.sid)
where
    dp.type in ('S','U','G')
    and dp.principal_id &gt;4
order by sp.name


--user_name				user_type			login_name			login_type
------------			---------			----------			----------
--Administrator			WINDOWS_USER		Orhphaned!			NULL
--Safety				SQL_USER			Orhphaned!			NULL
--IUSR_CONTROL			WINDOWS_USER		Orhphaned!			NULL
--distributor_admin		SQL_USER			Orhphaned!			NULL
--sa_reportsx			SQL_USER			Orhphaned!			NULL
--BCC\blakec			WINDOWS_USER		BCC\blakec			WINDOWS_LOGIN
--BCC\deweyh			WINDOWS_USER		BCC\deweyh			WINDOWS_LOGIN
--BCC\deweytest			WINDOWS_USER		BCC\deweytest		WINDOWS_LOGIN
--BCC\Domain Users		WINDOWS_GROUP		BCC\Domain Users	WINDOWS_GROUP
--BCC\g_SQL_Level1		WINDOWS_GROUP		BCC\g_SQL_Level1	WINDOWS_GROUP
--BCC\g_SQL_Level2		WINDOWS_GROUP		BCC\g_SQL_Level2	WINDOWS_GROUP
--BCC\g_SQL_User1		WINDOWS_GROUP		BCC\g_SQL_User1		WINDOWS_GROUP
--BCC\glenng			WINDOWS_USER		BCC\glenng			WINDOWS_LOGIN
--DotNet_RO				SQL_USER			DotNet_RO			SQL_LOGIN
--DotNet_RW				SQL_USER			DotNet_RW			SQL_LOGIN
--sa_reports			SQL_USER			sa_reports			SQL_LOGIN


/* http://dba.stackexchange.com/questions/40844/after-moving-database-backup-restore-i-have-to-re-add-user

What commonly happens with SQL authenticated logins and database users on a restore 
is that the SIDS will be out of sync, thus breaking the relationship. 
This relationship must be repaired before you can connect to the database using that login, 
because in the eyes of SQL Server those principals are no longer connected. 
You can fix this with the following SQL:
*/

ALTER USER [foo] WITH LOGIN=[foo]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Map_Drives</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_Map_Drives</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Map_Drives</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_Map_Drives</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Map_Drives

'  http://www.computerperformance.co.uk/Logon/Logon_HomeDir.htm#Example_1_-_MapNetworkDrive_-_basic_
' MapNetworkDrive.vbs
' VBScript to map a network drive to a UNC Path.
' Author Guy Thomas http://computerperformance.co.uk/
' Version 2.3 - September 2005
' -----------------------------------------------------------------' 
Option Explicit
Dim objNetwork 
Dim strDriveLetter, strRemotePath
strDriveLetter = "Y:" 
strRemotePath = "\\vhacpafpc3.vha.med.va.gov\Consolidated Revenue Unit\Audit_Aug_2008" 

'consolidated revenue unit on 'vhacpafpc3.vha.med.va.gov'

' Purpose of script to create a network object. (objNetwork)
' Then to apply the MapNetworkDrive method.  Result Y: drive
Set objNetwork = CreateObject("WScript.Network") 

objNetwork.MapNetworkDrive strDriveLetter, strRemotePath 
WScript.Quit

' End of Example VBScript.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Map_Drives</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Map_Multiple_Drives</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Map_Drives</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Map_Multiple_Drives</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Dim WSHNetwork
Dim FSO


Set WSHNetwork = WScript.CreateObject("WScript.Network")
Set FSO = CreateObject("Scripting.FileSystemObject")


WshNetwork.RemoveNetworkDrive "H:", True, false
WshNetwork.RemoveNetworkDrive "i:", True, false
WshNetwork.RemoveNetworkDrive "j:", True, false
WshNetwork.RemoveNetworkDrive "k:", True, false

WSHNetwork.MapNetworkDrive "H:", "\\b2wtimesheet\C$"
WSHNetwork.MapNetworkDrive "i:", "\\bcc-explorerdb\C$"
WSHNetwork.MapNetworkDrive "j:", "\\bcc-explorer3db\C$"
WSHNetwork.MapNetworkDrive "k:", "\\bcc-explorer3\C$"

'*****************************************************
result=Msgbox("Good To Go!",vbYesNo+vbInformation, "")
'*****************************************************


Set wshNetwork = Nothing
Set wshShell = Nothing
WScript.Quit</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MapRoute</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>about_MVC_MapRoute</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MapRoute</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>about_MVC_MapRoute</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_MVC_MapRoute



INTRO:
/*
a route table is created in the application's Global.asax file. 
or in my new stuff it is in /App_Start/RouteConfig.cs

The default route table contains a single route (named Default).
	The Default route maps the first segment of a URL to a controller name, 
	the second segment of a URL to a controller action, 
	and the third segment to a parameter named id. 

First, ASP.NET Routing is enabled in your application's Web configuration file (Web.config file). 
There are four sections in the configuration file that are relevant to routing: 
	the system.web.httpModules section, 
	the system.web.httpHandlers section, 
	the system.webserver.modules section, 
	and the system.webserver.handlers section. 
Be careful not to delete these sections because without these sections routing will no longer work.

Imagine that you enter the following URL into your web browser's address bar:		*/

/Home/Index/3

//The Default route maps this URL to the following parameters:

    controller = Home

    action = Index

    id = 3

//When you request the URL /Home/Index/3, the following code is executed:

HomeController.Index(3) 

/*The Default route includes defaults for all three parameters. 
If you don't supply a controller, then the controller parameter defaults to the value Home. 
If you don't supply an action, the action parameter defaults to the value Index. 
Finally, if you don't supply an id, the id parameter defaults to an empty string.

*/

Name:==========================================================
/*
What is the MapRoute "name" parameter used for?

It gives you a way to access that route from the application. 
	For example, you can write an action method that redirects to a route. 
	The way to specify which route to redirect to is by name.  
	It's used to differentiate routes and when entered has to be unique, 
	there can't be another route with the same name. 
	However, the name is not required and you can leave it as null, 
	it's just that when you do enter a value, it has to be unique compared to all the other routes
	
I've never used a route's name in any of my projects, however it boils down to 
	being a short-hand way to reference a specific route using */
	
	@Html.RouteLink()	// (instead of Html.ActionLink).	
==========================================================	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__201411021841373_ComplexDataModel.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__201411021841373_ComplexDataModel.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>namespace ContosoUniversity.Migrations
{
    using System;
    using System.Data.Entity.Migrations;
    
    public partial class ComplexDataModel : DbMigration
    {
        public override void Up()
        {
            RenameColumn(table: "dbo.Student", name: "FirstMidName", newName: "FirstName");
            CreateTable(
                "dbo.Department",
                c =&gt; new
                    {
                        DepartmentID = c.Int(nullable: false, identity: true),
                        Name = c.String(maxLength: 50),
                        Budget = c.Decimal(nullable: false, storeType: "money"),
                        StartDate = c.DateTime(nullable: false),
                        InstructorID = c.Int(),
                    })
                .PrimaryKey(t =&gt; t.DepartmentID)
                .ForeignKey("dbo.Instructor", t =&gt; t.InstructorID)
                .Index(t =&gt; t.InstructorID);
            
            CreateTable(
                "dbo.Instructor",
                c =&gt; new
                    {
                        ID = c.Int(nullable: false, identity: true),
                        LastName = c.String(nullable: false, maxLength: 50),
                        FirstName = c.String(nullable: false, maxLength: 50),
                        HireDate = c.DateTime(nullable: false),
                    })
                .PrimaryKey(t =&gt; t.ID);
            
            CreateTable(
                "dbo.OfficeAssignment",
                c =&gt; new
                    {
                        InstructorID = c.Int(nullable: false),
                        Location = c.String(maxLength: 50),
                    })
                .PrimaryKey(t =&gt; t.InstructorID)
                .ForeignKey("dbo.Instructor", t =&gt; t.InstructorID)
                .Index(t =&gt; t.InstructorID);
            
            CreateTable(
                "dbo.CourseInstructor",
                c =&gt; new
                    {
                        CourseID = c.Int(nullable: false),
                        InstructorID = c.Int(nullable: false),
                    })
                .PrimaryKey(t =&gt; new { t.CourseID, t.InstructorID })
                .ForeignKey("dbo.Course", t =&gt; t.CourseID, cascadeDelete: true)
                .ForeignKey("dbo.Instructor", t =&gt; t.InstructorID, cascadeDelete: true)
                .Index(t =&gt; t.CourseID)
                .Index(t =&gt; t.InstructorID);

            // Create  a department for course to point to.
            Sql("INSERT INTO dbo.Department (Name, Budget, StartDate) VALUES ('Temp', 0.00, GETDATE())");
            //  default value for FK points to department created above.
            AddColumn("dbo.Course", "DepartmentID", c =&gt; c.Int(nullable: false, defaultValue: 1));
            //AddColumn("dbo.Course", "DepartmentID", c =&gt; c.Int(nullable: false));

            AlterColumn("dbo.Course", "Title", c =&gt; c.String(maxLength: 50));
            AlterColumn("dbo.Student", "LastName", c =&gt; c.String(nullable: false, maxLength: 50));
            AlterColumn("dbo.Student", "FirstName", c =&gt; c.String(nullable: false, maxLength: 50));
            CreateIndex("dbo.Course", "DepartmentID");
            AddForeignKey("dbo.Course", "DepartmentID", "dbo.Department", "DepartmentID", cascadeDelete: true);
        }
        
        public override void Down()
        {
            DropForeignKey("dbo.CourseInstructor", "InstructorID", "dbo.Instructor");
            DropForeignKey("dbo.CourseInstructor", "CourseID", "dbo.Course");
            DropForeignKey("dbo.Course", "DepartmentID", "dbo.Department");
            DropForeignKey("dbo.Department", "InstructorID", "dbo.Instructor");
            DropForeignKey("dbo.OfficeAssignment", "InstructorID", "dbo.Instructor");
            DropIndex("dbo.CourseInstructor", new[] { "InstructorID" });
            DropIndex("dbo.CourseInstructor", new[] { "CourseID" });
            DropIndex("dbo.OfficeAssignment", new[] { "InstructorID" });
            DropIndex("dbo.Department", new[] { "InstructorID" });
            DropIndex("dbo.Course", new[] { "DepartmentID" });
            AlterColumn("dbo.Student", "FirstName", c =&gt; c.String(maxLength: 50));
            AlterColumn("dbo.Student", "LastName", c =&gt; c.String(maxLength: 50));
            AlterColumn("dbo.Course", "Title", c =&gt; c.String());
            DropColumn("dbo.Course", "DepartmentID");
            DropTable("dbo.CourseInstructor");
            DropTable("dbo.OfficeAssignment");
            DropTable("dbo.Instructor");
            DropTable("dbo.Department");
            RenameColumn(table: "dbo.Student", name: "FirstName", newName: "FirstMidName");
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01_ComplexModel_relationships_formatting_validation_datamapping__about

/*
Customize the Data Model by Using Attributes
=============================================

NOTE: the Contoso Example does NOT use mapping files

The DataType Attribute
----------------------

Attributes to make the date show up in the desired format: */
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime EnrollmentDate { get; set; }
 /*
 The  DataType attribute is used to specify a data type that is more specific than the database intrinsic type. 
 In this case we only want to keep track of the date, not the date and time. 
 The   DataType Enumeration provides for many data types, such as
 	 Date, Time, PhoneNumber, Currency, EmailAddress and more. 
The DataType attribute can also enable the application to automatically provide type-specific features. 
For example, a mailto: link can be created for DataType.EmailAddress, 
	and a date selector can be provided for DataType.Date in browsers that support HTML5. 
The  DataType attributes emits HTML 5 data- (pronounced data dash) attributes that HTML 5 browsers can understand. 
The  DataType attributes do not provide any validation. 

DataType.Date does not specify the format of the date that is displayed. 
By default, the data field is displayed according to the default formats based on the server's  CultureInfo.

The ApplyFormatInEditMode setting specifies that the specified formatting should also be applied when the value is displayed in a text box for editing. 
(You might not want that for some fields — for example, for currency values, you might not want the currency symbol in the text box for editing.)

You can use the  DisplayFormat attribute by itself, but the The DataType attribute provides the following benefits that you don't get with DisplayFormat:
	The browser can enable HTML5 features
	By default, the browser will render data using the correct format based on your  locale. 
	The  DataType attribute can enable MVC to choose the right field template to render the data 
		(the  DisplayFormat uses the string template). ref: http://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html

CHROME BROWSERS
If you use the DataType attribute with a date field, 
you have to specify the  DisplayFormat attribute also in order to ensure that the field renders correctly in Chrome browsers. 


You can also use attributes to control how your classes and properties are mapped to the database. 
	Suppose you had used the name FirstMidName for the first-name field because the field might also contain a middle name. 
	But you want the database column to be named FirstName, 
		because users who will be writing ad-hoc queries against the database are accustomed to that name. 
	To make this mapping, you can use the Column attribute. */
	
	[Column("FirstName")]
	
/*The Column attribute specifies that when the database is created, 
	the column of the Student table that maps to the FirstMidName property will be named FirstName.

The addition of the Column attribute changes the model backing the SchoolContext, 
	so it won't match the database. Enter the following commands in the PMC to create another migration:*/

&gt;add-migration ColumnFirstName
&gt;update-database

/*


Create the Instructor Entity 
----------------------------
The Courses and OfficeAssignment properties are navigation properties. 
As was explained earlier, they are typically defined as virtual so that they can take advantage of an Entity Framework feature called lazy loading. 
In addition, if a navigation property can hold multiple entities, 
	its type must implement the  ICollection&lt;T&gt; Interface. 
For example IList&lt;T&gt; qualifies but not  IEnumerable&lt;T&gt; because IEnumerable&lt;T&gt; doesn't implement Add.

An instructor can teach any number of courses, so Courses is defined as a collection of Course entities. */

public virtual ICollection&lt;Course&gt; Courses { get; set; }

/*
Our business rules state an instructor can only have at most one office, 
	so OfficeAssignment is defined as a single OfficeAssignment entity (which may be null if no office is assigned).*/
	
public virtual OfficeAssignment OfficeAssignment { get; set; }

/*


Create the OfficeAssignment Entity
----------------------------------



The Key Attribute
------------------

There's a one-to-zero-or-one relationship  between the Instructor and the OfficeAssignment entities. 
An office assignment only exists in relation to the instructor it's assigned to, 
	and therefore its primary key is also its foreign key to the Instructor entity. 
But the Entity Framework can't automatically recognize InstructorID as the primary key of this entity 
	because its name doesn't follow the ID or classnameID naming convention.

That is to say the Table "OfficeAssignment" has a Primary Key called InstructorID, HOWEVER it is NOT an IDENTIY, rather it is
originating from the Instrutor table's Primary Key, with a one-to-one(zero) relationship (so it is unique) and it does
not follow EF convention for naming a PK	
	
OfficeAssignment */
=================
CREATE TABLE [dbo].[OfficeAssignment](
	[InstructorID] [int] NOT NULL,
	[Location] [nvarchar](50) NULL,
 CONSTRAINT [PK_dbo.OfficeAssignment] PRIMARY KEY CLUSTERED 
(
	[InstructorID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


//Instructor:
===========
CREATE TABLE [dbo].[Instructor](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LastName] [nvarchar](50) NOT NULL,
	[FirstName] [nvarchar](50) NOT NULL,
	[HireDate] [datetime] NULL,
 CONSTRAINT [PK_dbo.Instructor] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
	
/*
	 
Therefore, the Key attribute is used to identify it as the key:
*/
[Key]
[ForeignKey("Instructor")]
public int InstructorID { get; set; }

/*
You can also use the Key attribute if the entity does have its own primary key but you want to name the property something different than classnameID or ID. 
By default EF treats the key as non-database-generated because the column is for an identifying relationship.



The ForeignKey Attribute
-------------------------

When there is a  one-to-zero-or-one relationship or a  one-to-one relationship between two entities 
(such as between OfficeAssignment  and Instructor), 
EF can't work out which end of the relationship is the principal and which end is dependent.  

One-to-one relationships have a reference navigation property in each class to the other class. 
The  ForeignKey Attribute can be applied to the dependent class to establish the relationship. 

If you omit the  ForeignKey Attribute, you get the following error when you try to create the migration: */

Unable to determine the principal end of an association between the types 
'ContosoUniversity.Models.OfficeAssignment' and 'ContosoUniversity.Models.Instructor'. 
The principal end of this association must be explicitly configured using either the relationship fluent API or data annotations.

/*Later in the tutorial you'll see how to configure this relationship with the fluent API. 



The Instructor Navigation Property
------------------------------------

The Instructor entity has a nullable OfficeAssignment navigation property {though I don't see anything to indicate this)
	(because an instructor might not have an office assignment), */
	public class Instructor
	{
		public int ID { get; set; }	
		
					//NOTE: InstructorID is NOT explicitly listed here, but it is in the resulting SQL table, due to the Nav property of the other table
		...
		//Navigation
		public virtual OfficeAssignment OfficeAssignment { get; set; }
	}
	//SQL created by EF
	CREATE TABLE [dbo].[OfficeAssignment](
	[InstructorID] [int] NOT NULL,
	...
 	CONSTRAINT [PK_dbo.OfficeAssignment] PRIMARY KEY CLUSTERED 
		(
			[InstructorID] ASC
		)
	
/*

and the OfficeAssignment entity has a non-nullable Instructor navigation property {though I don't see anything to indicate this)
	(because an office assignment can't exist without an instructor -- InstructorID is non-nullable). 
*/	
    public class OfficeAssignment
    {
		[Key]
        [ForeignKey("Instructor")]					//This, and the Nav property,  creates the [InstructorID] field in the other table!
        public int InstructorID { get; set; }
    	...
    	//Navigation
		public virtual Instructor Instructor { get; set; }
    }
	//SQL created by EF
	CREATE TABLE [dbo].[Instructor](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		...
	 CONSTRAINT [PK_dbo.Instructor] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)

/*	
When an Instructor entity has a related OfficeAssignment entity, each entity will have a reference to the other one in its navigation property.

You could put a  [Required] attribute on the Instructor navigation property to specify that there must be a related instructor, 
	but you don't have to do that because the InstructorID foreign key (which is also the key to this table) is non-nullable.



Modify the Course Entity
-------------------------
The course entity has a foreign key property DepartmentID which points to the related Department entity 
	and it has a Department navigation property. 
*/
   public class Course
   {
      [DatabaseGenerated(DatabaseGeneratedOption.None)]	//specifies that primary key values are provided by the user rather than generated by the database.
      [Display(Name = "Number")]
      public int CourseID { get; set; }

	  ...

      public int DepartmentID { get; set; }

      public virtual Department Department { get; set; }
	  ...
   }
/*
The Entity Framework doesn't require you to add a foreign key property to your data model when you have a navigation property for a related entity.  
EF automatically creates foreign keys in the database wherever they are needed. 
But having the foreign key in the data model can make updates simpler and more efficient. 
For example, when you fetch a course entity to edit, the  Department entity is null if you don't load it, 
	so when you update the course entity, 
	you would have to first fetch the Department entity. 
When the foreign key property DepartmentID is included in the data model, you don't need to fetch the Department entity before you update. 


Foreign Key and Navigation Properties
---------------------------------------
The foreign key properties and navigation properties in the Course entity reflect the following relationships:

A course is assigned to one department, so there's a 
	DepartmentID foreign key 
	and 
	a Department navigation property for the reasons mentioned above. 
	*/
	public int DepartmentID { get; set; }
	public virtual Department Department { get; set; }
	/*
A course can have any number of students enrolled in it, 
	so the Enrollments navigation property is a collection: */
	
	public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
/*
A course may be taught by multiple instructors, 
	so the Instructors navigation property is a collection: */

	public virtual ICollection&lt;Instructor&gt; Instructors { get; set; }

/*

Create the Department Entity
-----------------------------

Foreign Key and Navigation Properties
---------------------------------------

The foreign key and navigation properties reflect the following relationships:
A department may or may not have an administrator, (this is a NAVIGATION property)
	and an administrator is always an instructor. 
Therefore the InstructorID property is included as the foreign key to the Instructor entity, 
	and a question mark is added after the int type designation to mark the property as nullable.
	
The navigation property is named Administrator but holds an Instructor entity: */

   public class Department
   {
      ...
      public int? InstructorID { get; set; }

      public virtual Instructor Administrator { get; set; }		// &lt;==		 Type/Entity = Instructor,   Navigation Property Name = 'Administrator'
      public virtual ICollection&lt;Course&gt; Courses { get; set; }	// A department may have many courses, so there's a Courses navigation property
   }															// 			 Type/Entity = ICollection&lt;Course&gt;,   Navigation Property Name = 'Courses'

/*
NOTE: while I do see the Administrator navigation Property in the EF Model, I  can not find it anywhere in the SQL tables Scripts !!!

By convention, the Entity Framework enables cascade delete for non-nullable foreign keys and for many-to-many relationships. 
This can result in circular cascade delete rules, 
	which will cause an exception when you try to add a migration. 
For example, if you didn't define the Department.InstructorID property as nullable, 
	you'd get the following exception message: "The referential relationship will result in a cyclical reference that's not allowed." 
If your business rules required InstructorID property to be non-nullable,
	you would have to use the following fluent API statement to disable cascade delete on the relationship: 
*/
modelBuilder.Entity().HasRequired(d =&gt; d.Administrator).WithMany().WillCascadeOnDelete(false);

/*
Enrollment Entity
---------------------

Foreign Key and Navigation Properties
--------------------------------------
An enrollment record is for a single course, 
	so there's a CourseID foreign key property and a Course navigation property: */
	public int CourseID { get; set; }
	public virtual Course Course { get; set; }

/*An enrollment record is for a single student, so there's a StudentID foreign key property and a Student navigation property: */

	public int StudentID { get; set; }
	public virtual Student Student { get; set; }

/*
Many-to-Many Relationships
---------------------------

There's a many-to-many relationship between the Student and Course entities, 
	and the Enrollment entity functions as a many-to-many join table with payload in the database. 
This means that the Enrollment table contains additional data besides foreign keys for the joined tables (in this case, 
	a primary key and a Grade property). 
*/

Relationships
.......................
Student (1 - *) Enrollment
Enrollment (* - 1) Course

/*
If the Enrollment table didn't include grade information, it would only need to contain the two foreign keys CourseID and StudentID. 
In that case, it would correspond to a many-to-many join table without payload (or a pure join table) in the database, 
and you wouldn't have to create a model class for it at all.
*/

    public class Student
    {
        public int ID { get; set; }
       ...
        public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
    }
    
    public class Enrollment
    {
        public int EnrollmentID { get; set; }
        public int CourseID { get; set; }
        public int StudentID { get; set; }
        public Grade? Grade { get; set; }

        public virtual Course Course { get; set; }
        public virtual Student Student { get; set; }
    }    
    
   public class Course
   {
      [DatabaseGenerated(DatabaseGeneratedOption.None)]
      [Display(Name = "Number")]
      public int CourseID { get; set; }
      public int DepartmentID { get; set; }

      public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }

   }    
    
/*The Instructor and Course entities have that kind of many-to-many relationship, 
	and as you can see, there is no entity class between them:    
*/    
    
public class Instructor
{
   public int ID { get; set; }

   public virtual ICollection&lt;Course&gt; Courses { get; set; }

}    
    
   public class Course
   {
      [DatabaseGenerated(DatabaseGeneratedOption.None)]
      [Display(Name = "Number")]
      public int CourseID { get; set; }

      public virtual ICollection&lt;Instructor&gt; Instructors { get; set; }
   }    
    
//A join table is required in the database, however:    
    
Instructor		CourseInstructor
==========		===============			Course
ID		&lt;---&gt;	InstructorID			============
LastName		CourseID	&lt;---&gt;		CourseID
FirstMidName							Title
HireDate								Credits
										DepartmentID


/*
The Entity Framework automatically creates the CourseInstructor table, 
	and you read and update it indirectly by reading and updating the 
		Instructor.Courses 
		and 
		Course.Instructors 
	navigation properties.    
    
    
Customize the Data Model by adding Code to the Database Context - fluent API
------------------------------------------------------------------    
  
You can also use the fluent API to specify most of the 
	formatting, 
	validation, 
	and mapping rules 
that you can do by using attributes. 
Some attributes such as MinimumLength can't be applied with the fluent API. 
	As mentioned previously, MinimumLength doesn't change the schema, 
		it only applies a client and server side validation rule
    
Some developers prefer to use the fluent API exclusively so that they can keep their entity classes "clean." 
	You can mix attributes and fluent API if you want, 
	and there are a few customizations that can only be done by using fluent API, 
	but in general the recommended practice is to choose one of these two approaches and use that consistently as much as possible.    
    
DAL\SchoolContext.cs - using the Fluent API
--------------------------------------------

The new statement in the OnModelCreating method configures the many-to-many join table:

For the many-to-many relationship between the Instructor and Course entities, 
	the code specifies the table and column names for the join table. 
Code First can configure the many-to-many relationship for you without this code, 
	but if you don't call it, you will get default names such as InstructorInstructorID for the InstructorID column.

*/
modelBuilder.Entity&lt;Course&gt;()
    .HasMany(c =&gt; c.Instructors).WithMany(i =&gt; i.Courses)
    .Map(t =&gt; t.MapLeftKey("CourseID")
        .MapRightKey("InstructorID")
        .ToTable("CourseInstructor"));

/*
The following code provides an example 
of how you could have used fluent API instead of attributes to specify the relationship between the Instructor and OfficeAssignment entities: 
*/

modelBuilder.Entity&lt;Instructor&gt;()
    .HasOptional(p =&gt; p.OfficeAssignment).WithRequired(p =&gt; p.Instructor);

/*
Update the Migrations\Configuration.cs file : add the Seed Method
--------------------------------------------

Notice how the Course entity, which has a many-to-many relationship with the Instructor entity, is handled:
*/

var courses = new List&lt;Course&gt;
{
    new Course {CourseID = 1050, Title = "Chemistry",      Credits = 3,
      DepartmentID = departments.Single( s =&gt; s.Name == "Engineering").DepartmentID,
      Instructors = new List&lt;Instructor&gt;() 
    },
    ...
};
courses.ForEach(s =&gt; context.Courses.AddOrUpdate(p =&gt; p.CourseID, s));
context.SaveChanges();
    
/*
When you create a Course object, you initialize the Instructors navigation property as an empty collection using the code */
	Instructors = new List&lt;Instructor&gt;()
/*This makes it possible to add Instructor entities that are related to this Course by using the Instructors.Add method. 
If you didn't create an empty list, 
	you wouldn't be able to add these relationships, 
	because the Instructors property would be null and wouldn't have an Add method. 
You could also add the list initialization to the constructor.    
    
Add a Migration and Update the Database
------------------------------------------

enter the command to add a migration	(don't do the update-database command yet):	*/

&gt;add-Migration ComplexDataModel

/*
If you tried to run the update-database command at this point (don't do it yet), you would get the following error:	*/

The ALTER TABLE statement conflicted with the FOREIGN KEY constraint "FK_dbo.Course_dbo.Department_DepartmentID". 
The conflict occurred in database "ContosoUniversity", table "dbo.Department", column 'DepartmentID'.
    
/*
Sometimes when you execute migrations with existing data, 
	you need to insert stub data into the database to satisfy foreign key constraints, 
	and that's what you have to do now. 
The generated code in the ComplexDataModel Up method adds a non-nullable DepartmentID foreign key to the Course table. 
Because there are already rows in the Course table when the code runs, 
	the AddColumn operation will fail because SQL Server doesn't know what value to put in the column that can't be null. 

Therefore have to change the code to give the new column a default value, 
	and create a stub department named "Temp" to act as the default department. 
As a result, existing Course rows will all be related to the "Temp" department after the Up method runs.  
You can relate them to the correct departments in the Seed method.    
    
Edit the &lt;timestamp&gt;_ComplexDataModel.cs file, 
	comment out the line of code that adds the DepartmentID column to the Course table, 
	and add the following highlighted code (the commented line is also highlighted):  
	
After the statement in the configuration file to */

	"CreateTable( "dbo.CourseInstructor","
	
/* add these lines */    

    // Create  a department for course to point to.
    Sql("INSERT INTO dbo.Department (Name, Budget, StartDate) VALUES ('Temp', 0.00, GETDATE())");
    //  default value for FK points to department created above.
    AddColumn("dbo.Course", "DepartmentID", c =&gt; c.Int(nullable: false, defaultValue: 1)); 
    //AddColumn("dbo.Course", "DepartmentID", c =&gt; c.Int(nullable: false));    
    
/*
When the Seed method runs, it will insert rows in the  Department table and it will relate existing Course rows to those new Department rows. 

If you haven't added any courses in the UI, 
	you would then no longer need the "Temp" department or the default value on the Course.DepartmentID column. 
	
To allow for the possibility that someone might have added courses by using the application, 
	you'd also want to update the Seed method code to ensure that all Course rows 
	(not just the ones inserted by earlier runs of the Seed method) 
	have valid DepartmentID values before you remove the default value from the column and delete the "Temp" department.    
    AND HOW THE HELL DO YOU DO THAT?   
    
After you have finished editing the &lt;timestamp&gt;_ComplexDataModel.cs file, enter the  update-database command in the PMC to execute the migration.
*/
&gt;update-database    
    
/*
Handling ERRORs during Migration
----------------------------------

 1] If you get migration errors you can't resolve, 
 	you can either change the database name in the connection string or delete the database.
 	 The simplest approach is to rename the database in  Web.config file.   
   
 	With a new database, there is no data to migrate, and the  update-database command is much more likely to complete without errors.  
   
    
2] If that fails, another thing you can try is re-initialize the database by entering the following command in the PMC:*/

&gt;update-database -TargetMigration:0
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Course.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Course.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ContosoUniversity.Models
{
   public class Course
   {
      [DatabaseGenerated(DatabaseGeneratedOption.None)]
      [Display(Name = "Number")]
      public int CourseID { get; set; }

      [StringLength(50, MinimumLength = 3)]
      public string Title { get; set; }

      [Range(0, 5)]
      public int Credits { get; set; }

      public int DepartmentID { get; set; }

      public virtual Department Department { get; set; }
      public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
      public virtual ICollection&lt;Instructor&gt; Instructors { get; set; }
   }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Department.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Department.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ContosoUniversity.Models
{
   public class Department
   {
      public int DepartmentID { get; set; }

      [StringLength(50, MinimumLength=3)]
      public string Name { get; set; }

      [DataType(DataType.Currency)]
      [Column(TypeName = "money")]
      public decimal Budget { get; set; }

      [DataType(DataType.Date)]
      [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
      [Display(Name = "Start Date")]
      public DateTime StartDate { get; set; }

      public int? InstructorID { get; set; }

      public virtual Instructor Administrator { get; set; }
      public virtual ICollection&lt;Course&gt; Courses { get; set; }
   }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Enrollment</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Enrollment</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>//Enrollment.cs

using System.ComponentModel.DataAnnotations;

namespace ContosoUniversity.Models
{
    public enum Grade
    {
        A, B, C, D, F
    }

    public class Enrollment
    {
        public int EnrollmentID { get; set; }
        public int CourseID { get; set; }
        public int StudentID { get; set; }
        [DisplayFormat(NullDisplayText = "No grade")]
        public Grade? Grade { get; set; }

        public virtual Course Course { get; set; }
        public virtual Student Student { get; set; }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Instructor.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Instructor.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ContosoUniversity.Models
{
    public class Instructor
    {
        public int ID { get; set; }

        [Required]
        [Display(Name = "Last Name")]
        [StringLength(50)]
        public string LastName { get; set; }

        [Required]
        [Column("FirstName")]
        [Display(Name = "First Name")]
        [StringLength(50)]
        public string FirstMidName { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Hire Date")]
        public DateTime HireDate { get; set; }

        [Display(Name = "Full Name")]
        public string FullName
        {
            get { return LastName + ", " + FirstMidName; }
        }

        public virtual ICollection&lt;Course&gt; Courses { get; set; }
        public virtual OfficeAssignment OfficeAssignment { get; set; }
    }
}

//You can put multiple attributes on one line, so you could also write the instructor class as follows:

public class Instructor
{
   public int ID { get; set; }

   [Display(Name = "Last Name"),StringLength(50, MinimumLength=1)]
   public string LastName { get; set; }

   [Column("FirstName"),Display(Name = "First Name"),StringLength(50, MinimumLength=1)]
   public string FirstMidName { get; set; }

   [DataType(DataType.Date),Display(Name = "Hire Date"),DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
   public DateTime HireDate { get; set; }

   [Display(Name = "Full Name")]
   public string FullName
   {
      get { return LastName + ", " + FirstMidName; }
   }

   public virtual ICollection&lt;Course&gt; Courses { get; set; }
   public virtual OfficeAssignment OfficeAssignment { get; set; }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Migrations\Configuration.cs </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Migrations\Configuration.cs </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
=================Newer Version =========================\

namespace ContosoUniversity.Migrations
{
    using ContosoUniversity.Models;
    using ContosoUniversity.DAL;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;
    
    internal sealed class Configuration : DbMigrationsConfiguration&lt;SchoolContext&gt;
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
        }

        protected override void Seed(SchoolContext context)
        {
            var students = new List&lt;Student&gt;
            {
                new Student { FirstMidName = "Carson",   LastName = "Alexander", 
                    EnrollmentDate = DateTime.Parse("2010-09-01") },
                new Student { FirstMidName = "Meredith", LastName = "Alonso",    
                    EnrollmentDate = DateTime.Parse("2012-09-01") },
                new Student { FirstMidName = "Arturo",   LastName = "Anand",     
                    EnrollmentDate = DateTime.Parse("2013-09-01") },
                new Student { FirstMidName = "Gytis",    LastName = "Barzdukas", 
                    EnrollmentDate = DateTime.Parse("2012-09-01") },
                new Student { FirstMidName = "Yan",      LastName = "Li",        
                    EnrollmentDate = DateTime.Parse("2012-09-01") },
                new Student { FirstMidName = "Peggy",    LastName = "Justice",   
                    EnrollmentDate = DateTime.Parse("2011-09-01") },
                new Student { FirstMidName = "Laura",    LastName = "Norman",    
                    EnrollmentDate = DateTime.Parse("2013-09-01") },
                new Student { FirstMidName = "Nino",     LastName = "Olivetto",  
                    EnrollmentDate = DateTime.Parse("2005-09-01") }
            };


            students.ForEach(s =&gt; context.Students.AddOrUpdate(p =&gt; p.LastName, s));
            context.SaveChanges();

            var instructors = new List&lt;Instructor&gt;
            {
                new Instructor { FirstMidName = "Kim",     LastName = "Abercrombie", 
                    HireDate = DateTime.Parse("1995-03-11") },
                new Instructor { FirstMidName = "Fadi",    LastName = "Fakhouri",    
                    HireDate = DateTime.Parse("2002-07-06") },
                new Instructor { FirstMidName = "Roger",   LastName = "Harui",       
                    HireDate = DateTime.Parse("1998-07-01") },
                new Instructor { FirstMidName = "Candace", LastName = "Kapoor",      
                    HireDate = DateTime.Parse("2001-01-15") },
                new Instructor { FirstMidName = "Roger",   LastName = "Zheng",      
                    HireDate = DateTime.Parse("2004-02-12") }
            };
            instructors.ForEach(s =&gt; context.Instructors.AddOrUpdate(p =&gt; p.LastName, s));
            context.SaveChanges();

            var departments = new List&lt;Department&gt;
            {
                new Department { Name = "English",     Budget = 350000, 
                    StartDate = DateTime.Parse("2007-09-01"), 
                    InstructorID  = instructors.Single( i =&gt; i.LastName == "Abercrombie").ID },
                new Department { Name = "Mathematics", Budget = 100000, 
                    StartDate = DateTime.Parse("2007-09-01"), 
                    InstructorID  = instructors.Single( i =&gt; i.LastName == "Fakhouri").ID },
                new Department { Name = "Engineering", Budget = 350000, 
                    StartDate = DateTime.Parse("2007-09-01"), 
                    InstructorID  = instructors.Single( i =&gt; i.LastName == "Harui").ID },
                new Department { Name = "Economics",   Budget = 100000, 
                    StartDate = DateTime.Parse("2007-09-01"), 
                    InstructorID  = instructors.Single( i =&gt; i.LastName == "Kapoor").ID }
            };
            departments.ForEach(s =&gt; context.Departments.AddOrUpdate(p =&gt; p.Name, s));
            context.SaveChanges();

            var courses = new List&lt;Course&gt;
            {
                new Course {CourseID = 1050, Title = "Chemistry",      Credits = 3,
                  DepartmentID = departments.Single( s =&gt; s.Name == "Engineering").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
                new Course {CourseID = 4022, Title = "Microeconomics", Credits = 3,
                  DepartmentID = departments.Single( s =&gt; s.Name == "Economics").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
                new Course {CourseID = 4041, Title = "Macroeconomics", Credits = 3,
                  DepartmentID = departments.Single( s =&gt; s.Name == "Economics").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
                new Course {CourseID = 1045, Title = "Calculus",       Credits = 4,
                  DepartmentID = departments.Single( s =&gt; s.Name == "Mathematics").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
                new Course {CourseID = 3141, Title = "Trigonometry",   Credits = 4,
                  DepartmentID = departments.Single( s =&gt; s.Name == "Mathematics").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
                new Course {CourseID = 2021, Title = "Composition",    Credits = 3,
                  DepartmentID = departments.Single( s =&gt; s.Name == "English").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
                new Course {CourseID = 2042, Title = "Literature",     Credits = 4,
                  DepartmentID = departments.Single( s =&gt; s.Name == "English").DepartmentID,
                  Instructors = new List&lt;Instructor&gt;() 
                },
            };
            courses.ForEach(s =&gt; context.Courses.AddOrUpdate(p =&gt; p.CourseID, s));
            context.SaveChanges();

            var officeAssignments = new List&lt;OfficeAssignment&gt;
            {
                new OfficeAssignment { 
                    InstructorID = instructors.Single( i =&gt; i.LastName == "Fakhouri").ID, 
                    Location = "Smith 17" },
                new OfficeAssignment { 
                    InstructorID = instructors.Single( i =&gt; i.LastName == "Harui").ID, 
                    Location = "Gowan 27" },
                new OfficeAssignment { 
                    InstructorID = instructors.Single( i =&gt; i.LastName == "Kapoor").ID, 
                    Location = "Thompson 304" },
            };
            officeAssignments.ForEach(s =&gt; context.OfficeAssignments.AddOrUpdate(p =&gt; p.InstructorID, s));
            context.SaveChanges();

            AddOrUpdateInstructor(context, "Chemistry", "Kapoor");
            AddOrUpdateInstructor(context, "Chemistry", "Harui");
            AddOrUpdateInstructor(context, "Microeconomics", "Zheng");
            AddOrUpdateInstructor(context, "Macroeconomics", "Zheng");

            AddOrUpdateInstructor(context, "Calculus", "Fakhouri");
            AddOrUpdateInstructor(context, "Trigonometry", "Harui");
            AddOrUpdateInstructor(context, "Composition", "Abercrombie");
            AddOrUpdateInstructor(context, "Literature", "Abercrombie");

            context.SaveChanges();

            var enrollments = new List&lt;Enrollment&gt;
            {
                new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Alexander").ID, 
                    CourseID = courses.Single(c =&gt; c.Title == "Chemistry" ).CourseID, 
                    Grade = Grade.A 
                },
                 new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Alexander").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Microeconomics" ).CourseID, 
                    Grade = Grade.C 
                 },                            
                 new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Alexander").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Macroeconomics" ).CourseID, 
                    Grade = Grade.B
                 },
                 new Enrollment { 
                     StudentID = students.Single(s =&gt; s.LastName == "Alonso").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Calculus" ).CourseID, 
                    Grade = Grade.B 
                 },
                 new Enrollment { 
                     StudentID = students.Single(s =&gt; s.LastName == "Alonso").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Trigonometry" ).CourseID, 
                    Grade = Grade.B 
                 },
                 new Enrollment {
                    StudentID = students.Single(s =&gt; s.LastName == "Alonso").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Composition" ).CourseID, 
                    Grade = Grade.B 
                 },
                 new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Anand").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Chemistry" ).CourseID
                 },
                 new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Anand").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Microeconomics").CourseID,
                    Grade = Grade.B         
                 },
                new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Barzdukas").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Chemistry").CourseID,
                    Grade = Grade.B         
                 },
                 new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Li").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Composition").CourseID,
                    Grade = Grade.B         
                 },
                 new Enrollment { 
                    StudentID = students.Single(s =&gt; s.LastName == "Justice").ID,
                    CourseID = courses.Single(c =&gt; c.Title == "Literature").CourseID,
                    Grade = Grade.B         
                 }
            };

            foreach (Enrollment e in enrollments)
            {
                var enrollmentInDataBase = context.Enrollments.Where(
                    s =&gt;
                         s.Student.ID == e.StudentID &amp;&amp;
                         s.Course.CourseID == e.CourseID).SingleOrDefault();
                if (enrollmentInDataBase == null)
                {
                    context.Enrollments.Add(e);
                }
            }
            context.SaveChanges();
        }

        void AddOrUpdateInstructor(SchoolContext context, string courseTitle, string instructorName)
        {
            var crs = context.Courses.SingleOrDefault(c =&gt; c.Title == courseTitle);
            var inst = crs.Instructors.SingleOrDefault(i =&gt; i.LastName == instructorName);
            if (inst == null)
                crs.Instructors.Add(context.Instructors.Single(i =&gt; i.LastName == instructorName));
        }
    }
}

======================ORIGINAL ==================================

using System.Data.Entity;
using System.Data.Entity.SqlServer;

namespace ContosoUniversity.DAL
{
    public class SchoolConfiguration : DbConfiguration
    {
        public SchoolConfiguration()
        {
            SetExecutionStrategy("System.Data.SqlClient", () =&gt; new SqlAzureExecutionStrategy());
        }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__OfficeAssignment.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__OfficeAssignment.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ContosoUniversity.Models
{
    public class OfficeAssignment
    {
        [Key]
        [ForeignKey("Instructor")]
        public int InstructorID { get; set; }
        
        [StringLength(50)]
        [Display(Name = "Office Location")]
        public string Location { get; set; }

        public virtual Instructor Instructor { get; set; }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__SchoolContext.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__SchoolContext.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

===========Using modelBuilder and Fluent API======================================
using ContosoUniversity.Models;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;

namespace ContosoUniversity.DAL
{
   public class SchoolContext : DbContext
   {
      public DbSet&lt;Course&gt; Courses { get; set; }
      public DbSet&lt;Department&gt; Departments { get; set; }
      public DbSet&lt;Enrollment&gt; Enrollments { get; set; }
      public DbSet&lt;Instructor&gt; Instructors { get; set; }
      public DbSet&lt;Student&gt; Students { get; set; }
      public DbSet&lt;OfficeAssignment&gt; OfficeAssignments { get; set; }

      protected override void OnModelCreating(DbModelBuilder modelBuilder)
      {
         modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();

         modelBuilder.Entity&lt;Course&gt;()
             .HasMany(c =&gt; c.Instructors).WithMany(i =&gt; i.Courses)
             .Map(t =&gt; t.MapLeftKey("CourseID")
                 .MapRightKey("InstructorID")
                 .ToTable("CourseInstructor"));
      }
   }
}



===========ORIGINAL======================================
using ContosoUniversity.Models;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;

namespace ContosoUniversity.DAL
{
    public class SchoolContext : DbContext
    {
    
        public SchoolContext() : base("SchoolContext")
        {
        }
        
        public DbSet&lt;Student&gt; Students { get; set; }
        public DbSet&lt;Enrollment&gt; Enrollments { get; set; }
        public DbSet&lt;Course&gt; Courses { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();
        }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Student.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__Student.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ContosoUniversity.Models
{
    public class Student
    {
        public int ID { get; set; }
        [Required]
        [StringLength(50)]
        [Display(Name = "Last Name")]
        public string LastName { get; set; }
        [Required]
        [StringLength(50, ErrorMessage = "First name cannot be longer than 50 characters.")]
        [Column("FirstName")]
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Enrollment Date")]
        public DateTime EnrollmentDate { get; set; }

        [Display(Name = "Full Name")]			//CALCULATED FIELD
        public string FullName
        {
            get
            {
                return LastName + ", " + FirstMidName;
            }
        }

        public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_MODEL</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>01_ComplexModel_relationships_formatting_validation_datamapping__TABLE_STRUCTURE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_MODEL</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>01_ComplexModel_relationships_formatting_validation_datamapping__TABLE_STRUCTURE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Relationships
.......................
OfficeAssignments (0.1 - 1) Instructor
Instructor (0.1 - *) Department
Instructor (* - *) Course
Department (* - 0.1) Instructor
Department (1 - *) Course
Course (* - 1) Department
Course (* - *) Instructor
Course (1 - *) Enrollment
Enrollment (* - 1) Course
Enrollment (* - 1) Student
Student (1 - *) Enrollment




Target Table Structure
........................

OfficeAssignments
=================
InstructorID
Location
.........NAV
Instructor


Instructor
==========
ID
LastName
FirstMidName
HireDate
.........NAV
Courses
OfficeAssignment


Department
==========
DepartmentID
Name
Budget
StartDate
InstructorID
.........NAV
Administrator
Courses


Course
======
CourseID
Title
Credits
DepartmentID
.........NAV
Department
Enrollments
Instructors


Enrollment
===========
EnrollmentID
CourseID
StudentID
Grade
.........NAV
Course
Student


Student
========
ID
LastName
FirstMidName
EnrollmentDate
.........NAV
Enrollments</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_ViewModel</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>AutoMapper_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_ViewModel</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>AutoMapper_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Package Manager:
&gt; Install-Package AutoMapper

Good Example: http://www.codeproject.com/Articles/639618/CRUD-Opearations-using-AutoMapper-in-an-MVC-Applic

example: http://www.codeguru.com/columns/experts/using-automapper-in-your-asp.net-mvc-applications.htm

/*
You can automatically map the properties of your entity to your viewmodel using something like AutoMapper. 
In my opinion (and most of the people on the AutoMapper group) 
you should not map the other way round (from your viewmodel back to your entity) as yet again, this can lead to unexpected results.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DISM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>DISM.exe__mapTo__DISM_cmdlet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DISM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>DISM.exe__mapTo__DISM_cmdlet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/use-dism-in-windows-powershell-s14

Dism.exe command				DISM cmdlet
Dism.exe /Add-Capability		Add-WindowsCapability
Dism.exe /Append-Image			Add-WindowsImage
Dism.exe /Apply-Image			Expand-WindowsImage
Dism.exe /Capture-Image			New-WindowsImage
Dism.exe /Cleanup-MountPoints	Clear-WindowsCorruptMountPoint
Dism.exe /Commit-Image			Save-WindowsImage
Dism.exe /Export-Image			Export-WindowsImage
Dism.exe /Get-Capabilities		Get-WindowsCapability
Dism.exe /Get-ImageInfo			Get-WindowsImage
Dism.exe /Get-MountedImageInfo	Get-WindowsImage -Mounted
Dism.exe /Get-WimBootEntry		Get-WIMBootEntry
Dism.exe /List-Image			Get-WindowsImageContent
Dism.exe /Mount-Image			Mount-WindowsImage
Dism.exe /Split-Image			Split-WindowsImage
Dism.exe /Remove-Capability		Remove-WindowsCapability
Dism.exe /Remove-Image			Remove-WindowsImage
Dism.exe /Remount-Image			Mount-WindowsImage -Remount
Dism.exe /Unmount-Image			Dismount-WindowsImage
Dism.exe /Update-WimBootEntry	Update-WIMBootEntry
Dism.exe /Image:&lt;...&gt; /Add-Driver						Add-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Add-Package						Add-WindowsPackage
Dism.exe /Image:&lt;...&gt; /Add-ProvisionedAppxPackage		Add-AppxProvisionedPackage
Dism.exe /Image:&lt;...&gt; /Cleanup-Image /CheckHealth		Repair-WindowsImage -CheckHealth
Dism.exe /Image:&lt;...&gt; /Cleanup-Image /ScanHealth		Repair-WindowsImage -ScanHealth
Dism.exe /Image:&lt;...&gt; /Cleanup-Image /RestoreHealth		Repair-WindowsImage -RestoreHealth
Dism.exe /Image:&lt;...&gt; /Disable-Feature					Disable-WindowsOptionalFeature
Dism.exe /Image:&lt;...&gt; /Enable-Feature					Enable-WindowsOptionalFeature
Dism.exe /Image:&lt;...&gt; /Export-Driver					Export-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Get-CurrentEdition				Get-WindowsEdition -Current
Dism.exe /Image:&lt;...&gt; /Get-Driverinfo					Get-WindowsDriver -Driver
Dism.exe /Image:&lt;...&gt; /Get-Drivers						Get-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Get-Featureinfo					Get-WindowsOptionalFeature -FeatureName
Dism.exe /Image:&lt;...&gt; /Get-Features						Get-WindowsOptionalFeature
Dism.exe /Image:&lt;...&gt; /Get-Packageinfo					Get-WindowsPackage -PackagePath
Dism.exe /Image:&lt;...&gt; /Get-Packages						Get-WindowsPackage
Dism.exe /Image:&lt;...&gt; /Get-ProvisionedAppxPackages		Get-AppxProvisionedPackage
Dism.exe /Image:&lt;...&gt; /Get-TargetEditions				Get-WindowsEdition -Target
Dism.exe /Image:&lt;...&gt; /Optimize-Image					Optimize-WindowsImage
Dism.exe /Image:&lt;...&gt; /Remove-Driver					Remove-WindowsDriver
Dism.exe /Image:&lt;...&gt; /Remove-Package					Remove-WindowsPackage
Dism.exe /Image:&lt;...&gt; /Remove-ProvisionedAppxPackage	Remove-AppxProvisionedPackage
Dism.exe /Image:&lt;...&gt; /Set-Edition						Set-WindowsEdition
Dism.exe /Image:&lt;...&gt; /Set-ProductKey					Set-WindowsProductKey
Dism.exe /Image:&lt;...&gt; /Set-ProvisionedAppxDataFile		Set-AppXProvisionedDataFile
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQLBulkCopy</Category>
        <Language>VB.NET</Language>
        <Public>false</Public>
        <Name>Ex_with_ColumnMappings</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQLBulkCopy</Category>
          <Language>VB.NET</Language>
          <Public>false</Public>
          <Name>Ex_with_ColumnMappings</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Ex_with_ColumnMappings


'Ex_with_ColumnMappings, and reading in from CSV


'From: http://www.dotnetcurry.com/ShowArticle.aspx?ID=323


'Bulk Insert into SQL Server using SqlBulkCopy
'===============================================
'1] Sample SQL Table
'2] create a DataTable that contains the information from the text file
'3] use the SqlBulkCopy class to insert the data into SQL Server





'1] Sample SQL Table

CREATE TABLE [dbo].[Censis](
          [Suburb] [varchar](200) NULL,
          [NotStated] [int] NULL,
          [NotApplicable] [int] NULL,
          [Fishing] [int] NULL,
          [Mining] [int] NULL,
          [Manufacturing] [int] NULL,
          [Electricity] [int] NULL,
          [Construction] [int] NULL
) ON [PRIMARY]
GO


'I have to work backwards and explain the final method that bulk loads data. SqlBulkCopy has a method called WriteToServer. 
'    One of the overloads of this method takes a DataTable as the parameter. Because a DataTable contains rows and columns, 
'    this seemed like a logical choice for the task I was facing.


'2] create a DataTable that contains the information from the text file
'we need to create a DataTable that contains the information from the text file. 
'   The code below demonstrates how to do this:
Sub whatever_2()

    Dim dt As New DataTable()
    Dim line As String = Nothing
    Dim i As Integer = 0

    Using sr As StreamReader = File.OpenText("c:\temp\table1.csv")
        line = sr.ReadLine()
        Do While line IsNot Nothing
            Dim data() As String = line.Split(","c)
            If data.Length &gt; 0 Then
                If i = 0 Then
                    For Each item In data
                        dt.Columns.Add(New DataColumn())
                    Next item
                    i += 1
                End If
                Dim row As DataRow = dt.NewRow()
                row.ItemArray = data
                dt.Rows.Add(row)
            End If
            line = sr.ReadLine()
        Loop
    End Using

End Sub



'In the code above, I created a DataTable that will store all the information from the csv file. 
'    The csv file resides in the C:\Temp directory. 
'    I am using a StreamReader object to open the file and read each line in the file. 
'    Each line is then split up into a string array. That string array will be assigned to each DataRow as the ItemArray value. 
'    This sets the values for the row through the array.

'When the file has been read, the next thing to do is use the SqlBulkCopy class to insert the data into SQL Server. 
' The following code demonstrates how to do this:

'3] use the SqlBulkCopy class to insert the data into SQL Server

Sub whatever_3()
    Using cn As New SqlConnection(ConfigurationManager.ConnectionStrings("ConsoleApplication3.Properties.Settings.daasConnectionString").ConnectionString)
        cn.Open()
        Using copy As New SqlBulkCopy(cn)
            copy.ColumnMappings.Add(0, 0)
            copy.ColumnMappings.Add(1, 1)
            copy.ColumnMappings.Add(2, 2)
            copy.ColumnMappings.Add(3, 3)
            copy.ColumnMappings.Add(4, 4)
            copy.DestinationTableName = "Censis"
            copy.WriteToServer(dt)
        End Using
    End Using
End Sub


'SqlBulkCopy uses ADO.NET to connect to a database to bulk load the data. 
'I have created an SqlConnection object, and that object reference is used to create the SqlBulkCopy object. 
'The DestinationTableName property references a table in the database where the data is to be loaded. 
'A handy feature of SqlBulkCopy is the SqlBulkCopyColumnMappingCollection. 
'Column mappings define the relationships between columns in the data source and columns in the destination. 
'This is handy if the data source file has columns that don’t need to be inserted into the database. 
'Column mappings can be set by an index, such as the example above, or they can be set by the name of the column. 
'Using the index is handy when you’re working with files that contain no column names. 
'Finally the data is sent to the database by running the WriteToServer method.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSIS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MappedColumnID </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSIS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MappedColumnID </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>MappedColumnID is just an alternative way of identifying the columns instead of
 using there names. From MSDN

The use of these properties is not required. 
These properties provide an easier way for developers 
to associate related columns, such as input and output columns,
 in custom data flow components.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Version_Build_mapping</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Version_Build_mapping</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>for use interpreting Powershell results from:

&gt;$OperatingSystem = Get-WmiObject -ComputerName IT-1241 -Class Win32_OperatingSystem
&gt;$OperatingSystem.BuildNumber


Version	Code name	Marketing name			Release date	Latest build
1507	Threshold 1	N/A						7/29/2015		10240
1511	Threshold 2	November Update			11/10/2015		10586
1607	Redstone 1	Anniversary Update		8/2/2016		14393
1703	Redstone 2	Creators Update			4/5/2017		15063
1709	Redstone 3	Fall Creators Update	10/17/2017		16299
1803	Redstone 4	TBA						Early 2018		17134
1809	Redstone 5	TBA						Late 2018		17650
</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>