<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Email_SMTP_server</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Test Email flow using SMTP commands</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Email_SMTP_server</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Test Email flow using SMTP commands</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
from: http://community.spiceworks.com/how_to/11-test-email-flow-using-smtp-commands

Scenario: 
Your domain: mydomain.com 
Domain you wish to send to: theirdomain.com

1] Determine the mail server you're sending to.
-------------------------------------------
* Open a CMD prompt 
* Type NSLOOKUP 
&gt; set q=mx 
&gt; theirdomain.com 
Response: 
Non-authoritative answer: 
theirdomain.com MX preference = 50, mail exchanger = mail.theirdomain.com 

2] Connect to their mail server
-------------------------------
SMTP communicates over port 25. We will now try to use TELNET to connect to their mail server "mail.theirdomain.com"

* Open a CMD prompt 
* TELNET MAIL.THEIRDOMAIN.COM 25

You should see something like this as a response: 
220 mx.google.com ESMTP 6si6253627yxg.6

Be aware that different servers will come up with different greetings but you should get SOMETHING. 
	If nothing comes up at this point there are 2 possible problems. 
	Port 25 is being blocked at your firewall, 
	or their server is not responding. 
	Try a different domain, if that works then it's not you.

3] Send an Email
---------------------
Now, use simple SMTP commands to send a test email. 
This is very important, you CANNOT use the backspace key, 
	it will work onscreen but not be interpreted correctly. 
You have to type these commands perfectly.

ehlo mydomain.com 
mail from:&lt;martin9700@mydomain.com&gt; 
rcpt to:&lt;recipient@theirdomain.com&gt; 
data 
This is a test, please do not respond 
. 
quit



So, what does that all mean? 
-------------------------------
EHLO 
	- introduce yourself to the mail server HELO can also be used but EHLO tells the server to use the extended command set 
	(not that we're using that).

MAIL FROM 
	- who's sending the email. Make sure to place this is the greater than/less than brackets as many email servers will require this (Postini).

RCPT TO 
	- who you're sending it to. 
	Again you need to use the brackets. See Step #4 on how to test relaying mail!

DATA 
	- tells the SMTP server that what follows is the body of your email. Make sure to hit "Enter" at the end.

. 
	- the period alone on the line tells the SMTP server you're all done with the data portion and it's clear to send the email.

quit - exits the TELNET session.


4] Test SMTP relay
--------------------
Testing SMTP relay is very easy, and simply requires a small change to the above commands. See below:

ehlo mydomain.com 
mail from:&lt;martin9700@mydomain.com&gt; 
rcpt to:&lt;recipient@someotherdomain.com&gt; 
data 
This is a test, please do not respond 
. 
quit

See the difference? On the RCPT TO line, 
	we're sending to a domain that is not controlled by the SMTP server we're sending to. 
	You will get an immediate error is SMTP relay is turned off. 
	If you're able to continue and send an email, then relay is allowed by that server.












</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_IP_Port_Telnet_WindowsSockets</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_IP_Port_Telnet_WindowsSockets</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_IP_Port_Telnet_WindowsSockets</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_IP_Port_Telnet_WindowsSockets</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_IP_Port_Telnet_WindowsSockets


'TELNET
'---------------
' By default, Telnet is not installed on Windows or Windows Server. 
'	In order to use Telnet, the Telnet client has to be installed. 
'	In Windows, this can be done through Control Panel &gt; Programs and Features &gt; Turn Windows features on or off, and check the Telnet Client. 
'	For Windows Server, go to Server Manager &gt; Features &gt; Add Features &gt; Telnet Client.

'Can add the Telnet Client feature through PowerShell,
Import-Module ServerManager
Add-WindowsFeature -Name Telnet-Client 


'Instead of installing the Telnet client, 
'	alternatively we could use Windows Sockets through the System.Net.Sockets provided in .NET framework.

'To test the TCP port,
$tcp = New-Object System.Net.Sockets.TcpClient
$tcp.connect('&lt;remote server&gt;', &lt;port&gt;)

'Or even one line of code if you wish,
(New-Object System.Net.Sockets.TcpClient).Connect('&lt;remote server&gt;', &lt;port&gt;)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Service_Stop_Restart_Start</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Service_Stop_Restart_Start</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'The Stop-Service cmdlet is used for stopping a service that is currently running. 
'To stop a service, simply call Stop-Service followed by the service name 
'(that is, the name of the service as stored in the registry):

Stop-Service btwdins

'Alternatively, you can add the -displayname parameter and stop the service using the service display name, 
'the name that appears in the Services snap-in:

Stop-Service -displayname "Bluetooth service"



========================================================

What's in a Name?  What do these groups of services have in common?

'Group A
Alerter, Messenger, WebClient

'Group B
Print Spooler, Telnet, Telephony and Windows Time

'More importantly, why won't PowerShell's service family interact with Group B?

'The Answer: Some services have a 'Display Name' which differs from their 'Service Name', for example Telnet and Tlnsvr.  
'How did I find this out?  When I tried to start 'Telnet', or 'Print Spooler', nothing happened.  
'Yet if I had a manual walk-through in the Service GUI, no problem.  
'Then I ran Get-Service * and observed the two columns, Name and also Display Name.  
'What threw me into confusion was Group A, where both names are the same.

'Just to emphasise, if you wish to control 'Print Spooler', you need to script its Name - 'Spooler'.  
'If you double-check with the command: 
Get-Service s* 
'you see Name: Spooler, Display Name: 'Print Spooler'.


========================================================restart
'Production Script
'To achieve a restart, all you really need is this one-liner:

Restart-Service "Spooler"

'Learning Script

# PowerShell cmdlet to Restart the Spooler service
$srvName = "Spooler"
$servicePrior = Get-Service $srvName
"$srvName is now " + $servicePrior.status
Set-Service $srvName -startuptype manual
Restart-Service $srvName
$serviceAfter = Get-Service $srvName
"$srvName is now " + $serviceAfter.status</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PowerShell</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>DeterminingGroup_AD_Membership</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PowerShell</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>DeterminingGroup_AD_Membership</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'From: http://www.telnetport25.com/2008/03/quick-tip-determining-group-ad-membership-using-powershell/


The function requires two parameters:

    An Active Directory Account Name (in the samAccountName format)
    The name of a security group

Therefore the syntax of the function is such: “get-groupMembership ” – 
so an example of the command in use is: get-groupMembership “andy.grogan” “Domain Admins” 
If the function derives that the account passed is a member of the group passed – the function will return 1,
 however is the account if NOT a member of the group passed the function will return 0. 
 I have provided a down-loadable copy of the file here (which also includes some demo syntax on how the return values are presented):

////////////////////////////////////////////////////////////////////
$strName = $env:username

function get-GroupMembership($DNName,$cGroup){
	
	$strFilter = "(&amp;(objectCategory=User)(samAccountName=$strName))"

	$objSearcher = New-Object System.DirectoryServices.DirectorySearcher
	$objSearcher.Filter = $strFilter

	$objPath = $objSearcher.FindOne()
	$objUser = $objPath.GetDirectoryEntry()
	$DN = $objUser.distinguishedName
		
	$strGrpFilter = "(&amp;(objectCategory=group)(name=$cGroup))"
	$objGrpSearcher = New-Object System.DirectoryServices.DirectorySearcher
	$objGrpSearcher.Filter = $strGrpFilter
	
	$objGrpPath = $objGrpSearcher.FindOne()
	
	If (!($objGrpPath -eq $Null)){
		
		$objGrp = $objGrpPath.GetDirectoryEntry()
		
		$grpDN = $objGrp.distinguishedName
		$ADVal = [ADSI]"LDAP://$DN"
	
		if ($ADVal.memberOf.Value -eq $grpDN){
			$returnVal = 1
			return $returnVal = 1
		}else{
			$returnVal = 0
			return $returnVal = 0
	
		}
	
	}else{
			$returnVal = 0
			return $returnVal = 0
	
	}
		
}

$result = get-groupMembership $strName "Administrators"
////////////////////////////////////////////////////////////////////</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Telnet_activate_it_in_Windows7</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Telnet_activate_it_in_Windows7</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.wikihow.com/Activate-Telnet-in-Windows-7

1] Open the Control Panel. By default, Telnet is not installed with Windows 7. 
	It will need to be 
	manually activated in order for you to use it. 
	You can do so through the Control Panel, which can be accessed from the Start menu.
	
2] Open "Programs and Features" or "Programs". The option available to you 
	will depend on whether your Control Panel is in Icon or Category view, 
	but they both take you to the same place.
	
3] Click the "Turn Windows features on or off" link. You may be asked for the Administrator password.

4] Find the "Telnet Client" entry. In the list of available features, 
	you will see an entry labeled Telnet Client. 
	You may have to scroll down to find it. 
	Check the box next to Telnet Client, and click OK.
    You may have to wait a minute or two for the client to be installed after selecting it.

5] Install Telnet through the command prompt. 
	If you'd rather do everything through the Command Prompt, 
	you can install Telnet with a quick command. 
	First, open the Command Prompt by typing cmd into the Run box. 
	At the command line, type pkgmgr /iu:"TelnetClient" and press ↵ Enter. 
	After a moment, you will be returned to the command prompt.[1]

    Restart the command prompt to begin using Telnet.

USING TELNET:


1] Open the Command Prompt.
	 Telnet runs through the Command Prompt. 
	 You can access the command prompt by pressing Win and typing cmd into the Run field.
	 
2] 	Start the Telnet client. Type telnet and press ↵ Enter to start Microsoft Telnet. 
	The Command Prompt will disappear, and you will be taken to the Telnet command line, displayed as Microsoft Telnet&gt;.
	 
3] Connect to a Telnet server. At the Telnet command line, type open serveraddress [port]. 
	You have successfully connected to the server when you receive either a welcome message or are prompted for your username and password.

    For example, to watch ASCII Star Wars, type open towel.blinkenlights.nl and press ↵ Enter.
    You can also start a connection directly from the Command Prompt by typing telnet serveraddress [port].

4] Close your Telnet session.Once you are finished administering your Telnet server, 
	you should close your connection before closing the window. 
	To do so, open the Telnet command line by pressing ^ Ctrl+]. 
	Type quit and press ↵ Enter to close the connection.[2]	 </Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>