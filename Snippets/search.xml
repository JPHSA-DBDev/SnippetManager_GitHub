<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory_OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_AD_Active_Directory_OPENROWSET</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory_OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_AD_Active_Directory_OPENROWSET</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_AD_Active_Directory_OPENROWSET

OPENROWSET requires Ad Hoc Distributed Queries to be enabled and OPENQUERY requires a linked server.

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory_OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>organizationalUnit</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory_OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>organizationalUnit</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT *
FROM OPENROWSET('ADSDSOOBJECT','adsdatasource','SELECT *
FROM ''LDAP://jphsa.org/dc=jphsa,dc=org''
WHERE objectClass =''organizationalUnit'' ')

--===============================================List of OU under and including DIV_Admin

SELECT *
FROM OPENROWSET('ADSDSOOBJECT','adsdatasource','SELECT *
FROM ''LDAP://jphsa.org/OU=DIV_Admin,dc=jphsa,dc=org''
WHERE objectClass =''organizationalUnit'' ')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory_OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OU_in_root_AND_ManagedBy_for_OU</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory_OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OU_in_root_AND_ManagedBy_for_OU</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT *
FROM OPENROWSET('ADSDSOOBJECT','adsdatasource','SELECT ADsPath, ManagedBy
FROM ''LDAP://jphsa.org/dc=jphsa,dc=org''
WHERE objectClass =''organizationalUnit'' ')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory_OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>user</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory_OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>user</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT DisplayName
FROM OPENROWSET('ADSDSOOBJECT','adsdatasource','SELECT displayName
FROM ''LDAP://jphsa.org/dc=jphsa,dc=org''
WHERE objectClass =''User'' ')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_AD_Active_Directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_AD_Active_Directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_AD_Active_Directory


--LDAP Search Filter Syntax:	
	https://msdn.microsoft.com/en-us/library/windows/desktop/aa746475(v=vs.85).aspx
--User Attributes - Inside Active Directory: 
	http://www.kouti.com/tables/userattributes.htm

There are three ways to query Active Directory (AD) from SQL Server: 
	-	Using CLR Stored Procedures
	-	using the OpenRowset command
	-	using the OpenQuery command. 


--To Set up a Linked Server: 
	https://msdn.microsoft.com/en-us/library/aa772380(VS.105).aspx

/*Creating a Linked Server
===========================
In the following example, note that there are several arguments used with the sp_addlinkedserver System Stored Procedure:
	"ADSI" is the server argument and will be the name of this linked server.
	"Active Directory Services 2.5" is the srvproduct argument, which is the name of the OLE DB data source that you are adding as a linked server.
	"ADSDSOObject" is the provider_name argument.
	"adsdatasource" is the data_source argument, which is the name of the data source as interpreted by the OLE DB Provider.
	
For Windows-authenticated logins, 
	the self-mapping is sufficient to access the directory with SQL Server Security Delegation. 
	Because the self-mapping is created by default for linked servers created through sp_addlinkedserver, no other login mapping is necessary.
For SQL Server–authenticated logins, 
	you can configure suitable logins and passwords for connecting to the directory service by using the sp_addlinkedsrvlogin System Stored Procedure.	
	
The EXEC command is used to execute System Stored Procedures.
*/

EXEC sp_addlinkedserver 'ADSI', 'Active Directory Services 2.5', 
'ADSDSOObject', 'adsdatasource'
GO

/*
Query Syntax for OpenRowset and OpenQuery
=========================================
There are two options for writing the AD queries through OpenRowset and OpenQuery: 
	SQL syntax and LDAP dialect. 
	SQL syntax is more natural for database developers, while LDAP dialect is more familiar to system administrators. 
	Either can be used to query AD, but the LDAP dialect option offers a few nice extras, 
	such as extended matching rules and bitwise matching

Notes for LDAP syntax:

-	In LDAP syntax, there are no quotes around string values
-	Options for scope are Base, One Level, Subtree – generally use subtree search unless you know what you are looking for is at a particular scope level


When using OpenQuery or OpenRowset, you can’t simply pass in variables. 
They need to be concatenated into the query, 
	and then you need to use Exec (or sp_executesql if you want to set variables from the results) to run the query. 
	Because of this, any dynamic querying of AD must be done through stored procedures. 
*/

DECLARE @SQL nvarchar(2000) = ''
DECLARE @GroupName varchar(30) = 'SomeGroupName'

SELECT @SQL = 'SELECT @GroupPath = ADsPath FROM OPENQUERY
	(ACTIVE_DIR,
	''SELECT *
	FROM ''''LDAP://Domain.company.com,DC=Domain,DC=Company,DC=Com''''
	WHERE sAMAccountName = ''''' + @GroupName + '''''
	'')'
	
execute sp_executesql @SQL, N'@GroupPath varchar(1000) output', @GroupPath output

/*
Limitations and Gotchas
========================
There are a number of limitations and gotchas when querying AD through SQL.


-	‘Select *’ in a query against AD does not return all fields as you might expect that it would. 
		Instead, it returns the ADsPath of the object. 
		There is no way to return all fields.
		
-	Wildcard searches can only be done using * character; 
		however, instead of using the keyword ‘like’, the ‘=’ sign is used. 
		Example:  ‘and givenname = 'Jo*' ’  returns  all objects with a first name that start with ‘Jo’
		
-	Multi-valued attributes such as MemberOf can’t be retrieved through this method.

-	The number of records returned is limited by the ‘MaxPageSize’ configuration in AD. 
	The default is 1000 records. 
	You can implement pagination to handle this, or change the value in AD (See Helpful Links section). 
	Do your research before making the change in AD – this could degrade performance if the number is set too high.
	http://support.microsoft.com/default.aspx?scid=kb;en-us;315071&amp;sd=tech%20
	
-	Performing extended matching searches (i.e., recursively listing members of a group) will take a longer time to execute, 
	depending on how many levels of nested groups there are. 
	In my testing, it took almost 20 seconds to return all members of a group that had only 2 levels of nested groups.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL ActiveDirectoryObjects_computers_domainControllers_users_contacts</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL ActiveDirectoryObjects_computers_domainControllers_users_contacts</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--ALL ActiveDirectoryObjects_computers_domainControllers_users_contacts 

https://stackoverflow.com/questions/8594775/error-cannot-fetch-a-row-from-ole-db-provider-adsdsoobject-for-linked-server

CREATE TABLE #ADData(
    Login           NVARCHAR(256)
    ,CommonName     NVARCHAR(256)
    ,GivenName      NVARCHAR(256)
    ,FamilyName     NVARCHAR(256)   
    ,DisplayName    NVARCHAR(256)
    ,Title          NVARCHAR(256)
    ,Department     NVARCHAR(256)
    ,Location       NVARCHAR(256)
    ,Info           NVARCHAR(256)
    ,LastLogin      BIGINT
    ,flags          INT
    ,Email          NVARCHAR(256)
    ,Phone          NVARCHAR(256)   
    ,Mobile         NVARCHAR(256)
    ,Quickdial      NVARCHAR(256)
    , usnCreated    INT
)

DECLARE @Query      VARCHAR (2000)
DECLARE @Filter     VARCHAR(200)
DECLARE @Rowcount   INT

select @Filter =''

WHILE ISNULL(@rowcount,901)  = 901 BEGIN

    SELECT @Query = '
    SELECT top 901
            Login           = SamAccountName
            , CommonName    = cn
            , GivenName
            , FamilyName    = sn    
            , DisplayName
            , Title
            , Department
            , Location      = physicalDeliveryOfficeName
            , Info
            , LastLogin     = CAST(LastLogon AS bigint)
            , flags         = CAST (UserAccountControl as int)
            , Email         = mail
            , Phone         = telephoneNumber
            , Mobile        = mobile
            , QuickDial     = Pager
            , usnCreated
        FROM OPENROWSET(''ADSDSOObject'', '''', ''
                SELECT cn, givenName, sn, userAccountControl, lastLogon, displayName, samaccountname, 
                title,  department, physicalDeliveryOfficeName, info, mail, telephoneNumber, mobile, pager, usncreated
            FROM ''''LDAP://dc=jphsa,dc=org'''' 
            WHERE objectClass=''''Person''''
            AND objectClass = ''''User''''
            ' + @filter + '
            ORDER BY usnCreated'')'             
    INSERT INTO #ADData EXEC (@Query) 
    SELECT @Rowcount = @@ROWCOUNT
    SELECT @Filter = 'and usnCreated &gt; '+ LTRIM(STR((SELECT MAX(usnCreated) FROM #ADData)))

END

SELECT LOGIN            
        , CommonName    
        , GivenName
        , FamilyName
        , DisplayName
        , Title         
        , Department
        , Location      
        , Email         
        , Phone         
        , QuickDial     
        , Mobile        
        , Info          
        , Disabled      = CASE WHEN CAST (flags AS INT) &amp; 2 &gt; 0 THEN 'Y' ELSE NULL END 
        , Locked        = CASE WHEN CAST (flags AS INT) &amp; 16  &gt; 0 THEN 'Y' ELSE NULL END 
        , NoPwdExpiry   = CASE WHEN CAST (flags AS INT) &amp; 65536  &gt; 0 THEN 'Y' ELSE NULL END 
        , LastLogin     = CASE WHEN ISNULL(CAST (LastLogin AS BIGINT),0) = 0 THEN NULL ELSE 
                            DATEADD(ms, (CAST (LastLogin AS BIGINT) / CAST(10000 AS BIGINT)) % 86400000,
                            DATEADD(day, CAST (LastLogin AS BIGINT) / CAST(864000000000 AS BIGINT) - 109207, 0)) END 
        , Type = CASE WHEN flags  &amp; 512 = 512 THEN 'user' 
                    WHEN flags IS NULL THEN 'contact' 
                    WHEN flags &amp; 4096 = 4096 THEN 'computer'
                    WHEN flags &amp; 532480 = 532480 THEN 'computer (DC)' END
FROM #ADData
ORDER BY Login

DROP TABLE #ADData</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OpenRowSet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OpenRowSet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>OpenRowset
\\\\\\\\\\
/*
The OpenRowset command requires that SQL Server be configured to allow Ad Hoc Distributed Queries. 
	By default, it uses the credentials of the logged in user, 
	but you can specify a username and password. 
	Note: passwords are sent in clear text, 
	so if the account does not have rights to query AD, 
	it would be better to use OpenQuery.

Syntax:
*/
SELECT Name, displayName, givenname, distinguishedName, SAMAccountName
FROM OPENROWSET('ADSDOObject','adsdatasource',
'SELECT Name, displayName, givenname, distinguishedName, SAMAccountName
	FROM ''LDAP://Domainname.company.com/ou=northamerica,dc=domainname,dc=company,dc=com''
	WHERE SAMAccountName = ''SomeUserName'' ')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSV_Export</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>some_ideas</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSV_Export</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>some_ideas</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/12567410/i-need-best-practice-in-t-sql-export-data-to-csv-with-header

--Using Microsoft.Jet.OLEDB.4.0, like this:

INSERT INTO OPENROWSET('Microsoft.Jet.OLEDB.4.0',
                       'Text;Database=C:\Temp\;HDR=Yes;',
                       'SELECT * FROM test.csv')
            (object_id, name)
SELECT object_id, name
  FROM sys.tables;
  
  
-----------------------
---You could use a UNION to create a header row, like this:

SELECT 'object_id', 'name'

UNION ALL

SELECT object_id, name
FROM sys.tables  

------------------------------------------------------
EXEC xp_cmdshell 'SQLCMD -S . -d MsVehicleReg2 -Q "SELECT * FROM tempViolationInfo" -s "," -o "O:\result.csv"'

--------------------------------------------------------
-- need to have the Microsoft.ACE.OLEDB.12.0 provider available
--The Jet 4.0 provider will work, too, but it's ancient, so I used this one instead.
--The .CSV file will have to exist already. 
--	If you're using headers (HDR=YES), make sure the first line of the .CSV file is a delimited list of all the fields.

INSERT INTO OPENROWSET('Microsoft.ACE.OLEDB.12.0','Text;Database=D:\;HDR=YES;FMT=Delimited','SELECT * FROM [FileName.csv]')
SELECT Field1, Field2, Field3 FROM DatabaseName

---------------------------------------------------------------------
https://www.codeproject.com/Questions/546777/HowplusToplusExportplusDataplusToplustheplus-csvpl

declare @sql varchar(8000)
select @sql = 'bcp "select * from EmailVarification..tblTransaction" queryout c:\bcp\Tom.xls -c -t, -T -S' + @@servername
exec master..xp_cmdshell @sql

--in this query EmailVarification is DB name and tblTransaction is table name.
--for execute this query you have to set path for write file.
--currently in this query you have to create a "bcp" folder in "C:\ "Drive .</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>EXCEL_to_SQL_Import_multiple_Files</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>EXCEL_to_SQL_Import_multiple_Files</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--p_0063_MAINT_301_NaturalHazards_ReadInData_CreateTables_v2.sql
/*
	************************************************************************************
	NOTE: This runs in the DEV instance, and uses "Local System" to run the SQL Server
	Uses: 
	Modified: 3/19/2018 - uses dynamic SQL
	Created: 3/19/2018
	By: glenn garson
	************************************************************************************
*/

use p_0063
go

--CREATE TABLE --------------------------------------------
IF OBJECT_ID('dbo.NaturalHazards_2018_03_19') IS NOT NULL
    DROP TABLE dbo.NaturalHazards_2018_03_19

SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Beverly' as fromWho 
Into NaturalHazards_2018_03_19
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Beverly.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');

--=======================================Variables - START
SET NOCOUNT ON

DECLARE @ExcelWorkBookList TABLE (ExcelWorkBookName NVARCHAR(128) NOT NULL) 

-- This is where you put the list of tables to be archived.
INSERT @ExcelWorkBookList VALUES 
('Nicole'),
('Rosanna'),
('Tammy'),
('Thomas'),
('Trudy'),
('Wanda')

DECLARE 
  @sqlcmd VARCHAR(4000),
  @theDynamicRecord  VARCHAR(128)
  --=======================================Variables - END

  -- Loop through the Excel Workbooks in the list
DECLARE theCursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR
SELECT ExcelWorkBookName
FROM @ExcelWorkBookList
ORDER BY ExcelWorkBookName

OPEN theCursor 
FETCH NEXT FROM theCursor INTO @theDynamicRecord
WHILE @@FETCH_STATUS = 0 
BEGIN 
-------------------------------------------------------------------------------


  --SET @sqlcmd = 'IF OBJECT_ID(''dbo.' + @theDynamicRecord + ''' ) IS NOT NULL
		--		 DROP TABLE dbo.' + @theDynamicRecord + ''

  SET @sqlcmd = 'INSERT INTO NaturalHazards_2018_03_19
				 SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, '''+ @theDynamicRecord + ''' as fromWho 
				 FROM OPENROWSET(''Microsoft.ACE.OLEDB.15.0'',
                 ''Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\'+ @theDynamicRecord + '.xlsx'',
				 ''SELECT * FROM [Natural_Hazards$A7:H15]'');'

-------------------------------------------------------------------------------
   print '-------------------'
   PRINT @sqlcmd
   print '-------------------'
  EXEC (@sqlcmd) 
  FETCH NEXT FROM theCursor INTO @theDynamicRecord
END

CLOSE theCursor 
DEALLOCATE theCursor

go


-------------------------------------------
Select * from NaturalHazards_2018_03_19</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Export_Excell_icrosoft.ACE.OLEDB.12.0</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Export_Excell_icrosoft.ACE.OLEDB.12.0</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/26267224/the-ole-db-provider-microsoft-ace-oledb-12-0-for-linked-server-null

ERROR: Cannot create an instance of OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)".

-- I'm running Office 365 (64bit). I have loaded the Microsoft Access Database Engine (64bit). 
--This is in Visual Studio 2013 with SSDT as well as SQL Server 2012. 
    
--First, I ran...

sp_configure 'show advanced options', 1;
RECONFIGURE;
GO
sp_configure 'Ad Hoc Distributed Queries', 1;
RECONFIGURE;
GO    
    
--Followed by...with no love.

EXEC sys.sp_addsrvrolemember @loginame = N'&lt;&lt;Domain\User&gt;&gt;', @rolename = N'sysadmin';
GO

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0', N'AllowInProcess', 1 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0', N'DynamicParameters', 1 
GO     
    
    
    
    SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0', 
    'Excel 12.0;Database=C:\Users\UserName\Folder\SomeFile.xlsx;;HDR=NO;IMEX=1', [Table 1$])
    
--I have changed the code to read Microsoft.ACE.OLEDB.12.0 as I have seen that as well, still no love.    
===========================================================================================================================
--Here was one solution to the error
https://www.aspsnippets.com/Articles/The-OLE-DB-provider-Microsoft.Ace.OLEDB.12.0-for-linked-server-null.aspx

--Run the following Query in your SQL Server Management Studio close it and start again

USE [master] 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'AllowInProcess', 1 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'DynamicParameters', 1 
GO 

==================================================================================================================
--another solution	
--If you are the admin on this Windows system, you can set also choose Local System account. 
--This way you won't need to worry about changing the pwd. Works great! Thanks for the tip!! </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ExportToExcel_withAScrip</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ExportToExcel_withAScrip</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Normally for exporting data from SQL Server to Excel one would use DTS (SQL 2k) or SSIS (SQL Server 2005).

--For some reason if at all you want to do it via query read on:

--Step 1: Execute the code snippet


EXEC sp_configure 'show advanced options', 1;

GO

RECONFIGURE;

GO

EXEC sp_configure 'Ad Hoc Distributed Queries', 1;

GO

RECONFIGURE;

GO

--Step 2: Create the excel file and then add the headings in the .xls file.

-– Create one Excel File in c:\Test.xls and rename the Sheet1 to Emp. The Sheet should contain 2 columns EmployeeID,Title

--Step 3: Run the following query to export data from sql server to excel

USE [AdventureWorks]

INSERT INTO OPENROWSET ('Microsoft.Jet.OLEDB.4.0', 'Excel 8.0;Database=c:\Test.xls;','Select * from [Emp$]')

SELECT EmployeeID, Title FROM HumanResources.Employee

--Points which might interest you:

--1. As long as the file is within your C: drive this sample would work. If at all your database is in a different machine from that .xls file you need to change Database=c:\Test.xls; to UNC path. For example, Database=\\Servername\shareName (And need to provide appropriate permission).

--2. Instead of “Emp” replace it with your excel worksheet name.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Import_Export_Excel_To_From_SQL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Import_Export_Excel_To_From_SQL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Apart from using DTS and Import/Export wizard, we can also use this query to export data 
--from SQL Server2000 to Excel and vice versa

--To export data from SQL Server table to Excel file, create an Excel file named testing having the headers same as that of table columns and use this query

insert into OPENROWSET('Microsoft.Jet.OLEDB.4.0',
'Excel 8.0;Database=D:\testing.xls;',
'SELECT * FROM [SheetName$]') select * from SQLServerTable

--To export data from Excel to new SQL Server table,

select *
into SQLServerTable FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0',
'Excel8.0;Database=D:\testing.xls;HDR=YES',
'SELECT * FROM [Sheet1$]')

--To export data from Excel to existing SQL Server table,

Insert into SQLServerTable Select * FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0',
'Excel8.0;Database=D:\testing.xls;HDR=YES',
'SELECT * FROM [SheetName$]')


--ERRATA NOTES:
===================

there is an space between Excel and 8.0.

SELECT * into table FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0',

'Excel 8.0;Database=C:\file.xls; HDR=YES', 'SELECT * FROM [Sheet1$]')


===================================
in using the export to Excel script I get the following message

insert into OPENROWSET('Microsoft.Jet.OLEDB.4.0',

'Excel 8.0;Database=C:\testing.xls;HDR=YES',

'SELECT * FROM [Sheet1$]')

select * from cdbLink

WHERE (((cdbLink.extObjType)=11 Or (cdbLink.extObjType)=-1))

error message

Server: Msg 213, Level 16, State 5, Line 1

Insert Error: Column name or number of supplied values does not match table definition.

------------
Make sure the number of columns in excel sheet is same as the table


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_IMPORT_Excel_CSV_TEXT</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_IMPORT_Excel_CSV_TEXT</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_IMPORT_Excel_CSV_TEXT

PART-1 Setup, 32bit vs 64bit, Access Runtime
https://blog.learningtree.com/using-openrowset-to-read-excel-worksheets-from-sql-server-part-1-setting-up-the-system/

PART-2 Linked Server, 32bit, 64bit, OpenRowSet
https://blog.learningtree.com/using-openrowset-to-read-excel-worksheets-from-sql-server-part-2-linked-sql-queries/

////////////////////////////////////////////////////////////////////////////////////
https://community.flexerasoftware.com/archive/index.php?t-201524.html
MADE (Microsoft Access Database Engine) 32bit or 64 bit installed?
I would check the existance of the following registry keys on 64-bit machines: to see which 

For 64-bit:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Office\14.0\Access Connectivity Engine\InstallRoot

For 32-bit:
HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Office\14.0\Access Connectivity Engine\InstallRoot
////////////////////////////////////////////////////////////////////////////////////

IT TURNS OUT, I had to run SSMS as administrator to get it to read data from C:\DATA\someFile.xlsx

https://www.sqlshack.com/query-excel-data-using-sql-server-linked-servers/
https://www.excel-sql-server.com/excel-import-to-sql-server-using-distributed-queries.htm</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ERRORS</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ERRORS</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Msg 7399, Level 16, State 1, Line 1
The OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)" reported an error. Access denied.
Msg 7301, Level 16, State 2, Line 1
Cannot obtain the required interface ("IID_IDBCreateCommand") from OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)".

Ref:
https://www.aspsnippets.com/Articles/The-OLE-DB-provider-Microsoft.Ace.OLEDB.12.0-for-linked-server-null.aspx

--I removed the underscore in the file name: 
--	the “Access Denied” part of the error went away.
--Now it says:
Msg 7314, Level 16, State 1, Line 1
The OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)" does not contain the table "NaturalHazards$". The table either does not exist or the current user does not have permissions on that table.

DID NOT GET IT TO WORK
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0','Excel 12.0;Database=C:\DATA\TESTv4.xlsx;HDR=YES',NaturalHazards$) 
--TRIED BOTH 12 AND 15

OLE DB provider "Microsoft.ACE.OLEDB.15.0" for linked server "(null)" returned message "Unspecified error".
Msg 7303, Level 16, State 1, Line 10
Cannot initialize the data source object of OLE DB provider "Microsoft.ACE.OLEDB.15.0" for linked server "(null)".

OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)" returned message "Unspecified error".
Msg 7303, Level 16, State 1, Line 10
Cannot initialize the data source object of OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)".

DID NOT GET IT TO WORK
///////////////////////////////////////////////////////////////////

OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)" returned message "Unspecified error".
Msg 7303, Level 16, State 1, Line 10
Cannot initialize the data source object of OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)".

ref: https://visakhm.blogspot.ae/2013/12/how-to-solve-microsoftaceoledb120-error.html

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' 
    , N'AllowInProcess', 1 
GO


EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0'
    , N'DynamicParameters', 1
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LINKED_Server_for_Excel_SELECT_FROM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LINKED_Server_for_Excel_SELECT_FROM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://blog.learningtree.com/using-openrowset-to-read-excel-worksheets-from-sql-server-part-2-linked-sql-queries/


--Querying the Linked Server
--The syntax for querying Excel from SQL Server is simple, 
--	but there are a few tricks. 
--A named range in the Excel workbook can be queried directly, 
--	as if it were a table. In contrast, 
--	if you wish to specify a worksheet rather than a range, 
--	you must tack a “$” onto the end of the sheet name. 
--In my opinion, using named ranges is less prone to problems and is the better choice. 
--Note also the three periods between the server name 
--	and the table name in the following query examples. 
--This is because SQL Server expects the four-part name syntax for linked servers:

Servername.DatabaseName.Schema.TableName

--Since database name and schema name have no meaning in a workbook, 
--	they are omitted from the four-part syntax, leaving three odd-looking periods.

////RANGE
-- “results” is a named range
SELECT xl.* FROM OrderValues_EXCEL64…results AS xl


////Sheet
-- “OrderData” is a sheet name
SELECT xl.* FROM OrderValues_EXCEL64…OrderData$ AS xl

my Idea from SSIS to read only certain cell range
sheetName$B7:H15

--The workbook file cannot be open in Excel while SQL Server is attempting to execute a linked query. 
--The table alias in the above queries is not necessary, 
--	but it is handy to alias a remote table if we want to include it in a join. 
--The join syntax for linked tables is no different from the usua

SELECT ProductName, xl.*
FROM 
		OrderValues_EXCEL32…results AS xl	
		JOIN 
		Products AS p
		ON xl.ProductID = p.ProductID</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LINKED_Server_for_Excel</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LINKED_Server_for_Excel</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://blog.learningtree.com/using-openrowset-to-read-excel-worksheets-from-sql-server-part-2-linked-sql-queries/
--Since an Excel worksheet is not really a “server”, 
--	it is probably best to take the time to write an SQL script 
--	to create a linked server rather than use the GUI. 
--Once you have created a script, you can easily change the workbook path 
--	and filename for future projects.

--Remember that when you define a linked server, 
--	SQL Server does not check to see that your settings will work. 
--Therefore, the sp_addlinkedserver can execute without error even with erroneous parameter values. 
--It is only when you attempt to execute a query will you discover 
--	whether your linked server definition is actually correc

--The 32-bit Version
--If you are using 32-bit SQL Server, you must create a linked server for Microsoft.Jet.OLEDB.4.0. 


///////////////////////////////////////////////////////////// - Linked Server setup
-- the Excel version number entered in the @provstr 
--	does not need to match your version of Excel. 
--You might as well enter the correct number to make your code more self-documenting, 
--	but it should work regardless.

--The value for @srvproduct cannot be null, but the actual value is not used and is irrelevant. 

EXEC sp_addlinkedserver
@server=OrderValues_EXCEL32,
@srvproduct='Whatever',				
@provider= 'Microsoft.Jet.OLEDB.4.0',
@datasrc= 'c:\Temp\OrderValues.xls', — xlsx files do not work in 32-bit version
@provstr= 'Excel 8.0;'-- version doesn't matter

--The 64-bit Version
EXEC sp_addlinkedserver
@server=OrderValues_EXCEL64,
@srvproduct='Whatever',				--The value for @srvproduct cannot be null, but the actual value is not used and is irrelevant. 
@provider= 'Microsoft.ACE.OLEDB.12.0',
@datasrc= 'c:\Temp\OrderValues.xlsx',
@provstr= 'Excel 12.0;' -- version doesn't matter</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OPENROWSET__CreateTable_Append_xlsx_to_SQL_table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OPENROWSET__CreateTable_Append_xlsx_to_SQL_table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--p_0063_MAINT_301_NaturalHazards_ReadInData_CreateTables_v1.sql

/*
	************************************************************************************
	NOTE: This runs in the DEV instance, and uses "Local System" to run the SQL Server
	Uses: 
	Created: 3/19/2018
	By: glenn garson
	************************************************************************************
*/

use p_0063
go

--CREATE TABLE --------------------------------------------
IF OBJECT_ID('dbo.NaturalHazards_2018_03_19') IS NOT NULL
    DROP TABLE dbo.NaturalHazards_2018_03_19

SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Beverly' as fromWho 
Into NaturalHazards_2018_03_19
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Beverly.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');

-- Append to Table -----------------------------------------
INSERT INTO NaturalHazards_2018_03_19
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Nicole' as fromWho 
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Nicole.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');


INSERT INTO NaturalHazards_2018_03_19
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Rosanna' as fromWho 
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Rosanna.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');

INSERT INTO NaturalHazards_2018_03_19
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Tammy' as fromWho 
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Tammy.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');

INSERT INTO NaturalHazards_2018_03_19
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Thomas' as fromWho 
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Thomas.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');

INSERT INTO NaturalHazards_2018_03_19
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Trudy' as fromWho 
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Trudy.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');


INSERT INTO NaturalHazards_2018_03_19
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS RowOrder, *, 'Wanda' as fromWho 
FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\p_0063\TEST\Wanda.xlsx',
				         'SELECT * FROM [Natural_Hazards$A7:H15]');

-------------------------------------------
Select * from NaturalHazards_2018_03_19</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OPENROWSET_to_read_EXCEL_data_v2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OPENROWSET_to_read_EXCEL_data_v2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>OPENROWSET_to_read_EXCEL_data_v2
-- This is based on WBSQL1 at JPHSA

////////////////////////////////////////////////////--OLEDB drivers
https://community.flexerasoftware.com/archive/index.php?t-201524.html

--Check registry:
--For 64-bit:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Office\14.0\Access Connectivity Engine\InstallRoot
--For 32-bit:
HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Office\14.0\Access Connectivity Engine\InstallRoot


Microsoft Access Runtime 2010
v 14.0.4763.1000
Microsoft Access Runtime 2013
v 15.0.4569.1506
Microsoft Access Runtime 2016  (Installed today)  
v 16.0.4288.1001

in the folder: C:\Program Files (x86)\Microsoft Office


/////////////////////////////////////////////////////-- SETUP
--I  set the OLEDB.15 Provider to the following
		--Dynamic parameter [1]
		--DisallowAdHocAccess [0]
		--AllowInProcess [1]


EXEC sp_configure 'Show Advanced', 1
RECONFIGURE

EXEC sp_configure 'Ad hoc dis', 1
RECONFIGURE
--Then used regedit to change the 1 to 0
--The above setting, created a registry entry DisallowAdHocAccess at: 
	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL11.SQL2012\Providers\Microsoft.ACE.OLEDB.12.0
--Set the value of DisallowAdHocAccess to 0.
--Restart the SQL service.

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0' 
    , N'AllowInProcess', 1
RECONFIGURE     
GO

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0'
    , N'DynamicParameters', 1
RECONFIGURE
GO

/////////////////////////////////////////////////////-- run as administrator

-- Initially I was able to read an Excel file by opening SSMS "run as Administrator" using this:

SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=YES;Database=C:\DATA\TESTv4.xlsx',
				         'SELECT * FROM [NaturalHazards$]');

////////////////////////////////////////////////////-- run as me

--Add local administrator login:  WBSQL1\Administrator
--	Default database:master
--Server Roles {tab}
--	public
--	serveradmin
--		Members of the serveradmin fixed server role can change server-wide configuration options and shut down the server.
--	sysadmin
--		Members of the sysadmin fixed server role can perform any activity in the server.
--	setupadmin
--		Members of the setupadmin fixed server role can add and remove linked servers by using Transact-SQL statements.
--	diskadmin
--		The diskadmin fixed server role is used for managing disk files.
--	bulkadmin
--		Members of the bulkadmin fixed server role can run the BULK INSERT statement

--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||This script runs, while logged on as ggarson
use master
go

EXECUTE AS LOGIN='WBSQL1\Administrator'

SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=YES;Database=C:\DATA\TESTv4.xlsx',
				         'SELECT * FROM [NaturalHazards$]');
REVERT

GO
--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OPENROWSET_to_read_EXCEL_data_v3</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OPENROWSET_to_read_EXCEL_data_v3</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>OPENROWSET_to_read_EXCEL_data_v3

--This deals with the reading specific cells from the Excel sheet, and using Local System

--The problem was I was getting this error, when I tried the setings in:OPENROWSET_to_read_EXCEL_data_v2
--	when I tried to read specific cells from the Excel spreadsheet.

Msg 7399, Level 16, State 1, Line 32
The OLE DB provider "Microsoft.ACE.OLEDB.16.0" for linked server "(null)" reported an error. The provider reported an unexpected catastrophic failure.
Msg 7303, Level 16, State 1, Line 32

-- I was trying to run this, but it gave me the error above:

SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\TESTv0.xlsx',
				         'SELECT * FROM [NaturalHazards$B7:H15]');

-- Up to now I had been using the service account to run "SQL Server(DEV)"

----------------------------------------------------------------
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0', N'AllowInProcess', 1
 
GO

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0', N'DynamicParameters', 1

GO
----------------------------------------------------------------
USE [MSDB]
GO

sp_configure 'show advanced options', 1
GO
RECONFIGURE WITH OverRide
GO
sp_configure 'Ad Hoc Distributed Queries', 1   --Then used regedit to change to 0
GO
RECONFIGURE WITH OverRide
GO
--Then used regedit to change the 1 to 0
--The above setting, created a registry entry DisallowAdHocAccess at: 
	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL11.SQL2012\Providers\Microsoft.ACE.OLEDB.12.0
--Set the value of DisallowAdHocAccess to 0.
--Restart the SQL service.


--With these settings;
EXEC master.dbo.sp_MSset_oledb_prop

provider_name				allow_in_process	disallow_adhoc_access	dynamic_parameters	index_as_access_path	level_zero_only	nested_queries	non_transacted_updates	sql_server_like
Microsoft.ACE.OLEDB.12.0	1					0						1					0	0	0	0	0
Microsoft.ACE.OLEDB.15.0	1					0						1					0	0	0	0	0
Microsoft.ACE.OLEDB.16.0	1					0						1					0	0	0	0	0

////////////////////////////////////////////////////--THIS WORKED
-- So I tried the following:
--1] I replaced the Service account as the Logon for "SQL Server(DEV)"
		(x) This account
		JPHSA01\SQL_DEV_DataEngine
		P: jpHsa_001
	with:
		Local System   --&lt;===============  This appears to be the key
		
--2] I ran SSMS as myself (ggarson)

--3] Using this script:

SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=NO;Database=C:\DATA\TESTv0.xlsx',
				         'SELECT * FROM [NaturalHazards$B7:H15]'); 
--OUTPUT				         
F1	F2	F3	F4	F5	F6	F7
3	2	2	3	2	2	2
1	1	1	1	2	2	2
2	1	1	1	2	2	2
1	1	1	1	3	3	3
0	0	0	0	0	0	0
1	1	1	1	0	0	0
1	1	1	1	0	0	0
0	0	0	0	0	0	0
1	1	1	1	2	2	2				         
////////////////////////////////////////////////////</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OPENROWSET_to_read_EXCEL_data</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OPENROWSET_to_read_EXCEL_data</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://blog.learningtree.com/using-openrowset-to-read-excel-worksheets-from-sql-server-part-2-linked-sql-queries/
Using OPENROWSET
==================
--In my opinion, it is wiser to use OPENROWSET to link to data in Excel workbooks 
--	rather than define a linked server. 
--It is common to grab data from many different workbooks, 
--	and the OPENROWSET function enables you to query different workbooks 
--	without having to define many multiple linked servers. 
--Just as with linked server definitions, 
--	you must use the 32-bit version if you are using 32-bit SQL Server, 
--	and as before you will not be able to query xlsx files. 
--If you are using 64-bit SQL Server, 
--	then either the 32- or the 64-bit technique are available to you.

Configure ad-hoc distributed queries
====================================
--You will not be able to use OPENROWSET until you have configured your server 
--	to allow ad-hoc distributed queries. 
--You can check the current configuration setting by running the following query 
--	in the Management Studio. 
--Notice that when using sp_configure, 
--	it is not necessary to type out the entire configuration setting name; 
--	you must only type out enough so that the name is unambiguously distinguished 
--	from other configuration setting names.

EXEC sp_configure 'Ad hoc dis'

--If you get an error message, 
--	it may be that your server is not configured to show the advanced configuration options. 
--You can turn on advanced options as follows:

EXEC sp_configure 'Show Advanced', 1

RECONFIGURE

--You should now be able to check the current setting of Ad Hoc Distributed Queries. 
--If it is 0, you must turn it on.

EXEC sp_configure 'Ad hoc dis', 1

RECONFIGURE

--Check the value once again to ensure the value is now 1.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\query from NameRange

===&gt;&gt;&gt; my Idea from SSIS to read only certain cell range
===&gt;&gt;&gt; sheetName$B7:H15
--Try with a $ sign for Table, and 

--The 32-bit Version
SELECT * FROM OPENROWSET(
'Microsoft.Jet.OLEDB.4.0'
,'Excel 8.0;Database=C:\Temp\OrderValues.xls;HDR=YES'
,results) 
-- “results” is a named range in excel

--The 64-bit Version
SELECT * FROM OPENROWSET(
'Microsoft.ACE.OLEDB.12.0'
,'Excel 12.0;Database=C:\Temp\OrderValues.xlsx;HDR=YES'
,results) 
-- “results” is a named range in excel

/////////////////////////////////////////////////////////////SELECT INTO from NameRange
--Try with a $ sign for Table, and 
SELECT * INTO #testTable

FROM OPENROWSET(

'Microsoft.ACE.OLEDB.12.0'

,'Excel 2.0;Database=C:\Temp\OrderValues.xlsx;HDR=YES'

,results)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>script_from_LearningTree_example</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>script_from_LearningTree_example</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- daniel_buskirk@learningtree.me
USE Northwind

/* ***** Defining a linked server for Excel ***** */

-- 32-bit version 
EXEC sp_addlinkedserver 
	@server=OrderValues_EXCEL32,
    @srvproduct='Whatever',
    @provider= 'Microsoft.Jet.OLEDB.4.0',
    @datasrc= 'c:\Temp\OrderValues.xls', -- xlsx files do not work in 32-bit version
    @provstr= 'Excel 8.0;' -- version number doesn't matter

-- sp_dropserver @server='OrderValues_Excel32'


-- 64-bit version
EXEC sp_addlinkedserver 
	@server=OrderValues_EXCEL64,
    @srvproduct='Whatever',
    @provider= 'Microsoft.ACE.OLEDB.12.0',
    @datasrc= 'c:\Temp\OrderValues.xlsx', 
	@provstr= 'Excel 5.0;' -- version number doesn't matter

-- sp_dropserver @server='OrderValues_Excel64'

-- results is a named range in the Excel spreadsheet
SELECT	ProductName
		, xl.* 
FROM OrderValues_EXCEL32...results AS xl
JOIN Products AS p
ON xl.ProductID = p.ProductID

SELECT xl.* FROM OrderValues_EXCEL64...results AS xl -- results is a named range
SELECT xl.* FROM OrderValues_EXCEL64...OrderData$ AS xl -- OrderData is a sheet name

/* ***** Using OPENROWSET ***** */

/*
To use OPENROWSET with any remote server, including Excel, SQL Server must be
configured to allow ad-hoc distributed queries
*/

EXEC sp_configure 'Show Advanced', 1
RECONFIGURE

EXEC sp_configure 'Ad hoc dis', 1
RECONFIGURE

-- 32-bit version
SELECT * FROM OPENROWSET(
				'Microsoft.Jet.OLEDB.4.0'
				,'Excel 8.0;Database=C:\Temp\OrderValues.xls;HDR=YES'
				,results) -- results is a named range in excel

-- doesn't work; you cannot open xlsx files with the 32-bit version
SELECT * FROM OPENROWSET(
				'Microsoft.Jet.OLEDB.4.0'
				,'Excel 8.0;Database=C:\Temp\OrderValues.xlsx;HDR=YES'
				,results) -- results is a named range in excel
				
-- 64-bit				
SELECT * FROM OPENROWSET(
				'Microsoft.ACE.OLEDB.12.0'
				,'Excel 12.0;Database=C:\Temp\OrderValues.xls;HDR=YES'
				,results) -- results is a named range in excel
				
SELECT * FROM OPENROWSET(
				'Microsoft.ACE.OLEDB.12.0'
				,'Excel 12.0;Database=C:\Temp\OrderValues.xlsx;HDR=YES'
				,results) -- results is a named range in excel

SELECT	p.ProductName
		,xl.*
FROM	OPENROWSET(
			'Microsoft.ACE.OLEDB.12.0'
			,'Excel 12.0;Database=C:\Temp\OrderValues.xlsx;HDR=YES'
			,results) AS xl
JOIN	Products AS p
ON		p.ProductID = xl.ProductID

-- Importing Excel data into an SQL Server table

SELECT * INTO #testTable
FROM	OPENROWSET(
			'Microsoft.ACE.OLEDB.12.0'
			,'Excel 12.0;Database=C:\Temp\OrderValues.xlsx;HDR=YES'
			,results) 

SELECT * FROM #testTable
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Export_to_File</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Export_to_File</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>INSERT INTO OPENROWSET ('Microsoft.Jet.OLEDB.4.0', 'Excel 8.0;Database=c:\Test.xls;','SELECT *')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>call_a_StoredProcedure_on_rows_of_a_TABLE_05_OPENROWSET</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>call_a_StoredProcedure_on_rows_of_a_TABLE_05_OPENROWSET</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=173762

select * from mytable mt
join book b on b.idbook = mt.idbook
cross apply(SELECT * FROM OPENROWSET('SQLOLEDB','Data Source=yourServername;Trusted_Connection=yes;Integrated Security=SSPI','Execute yourdb..spGetbookdetail(b.BookName)')) p on p.idBook = b.idBook

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedure_as_Input__using_OPENQUERY</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedure_as_Input__using_OPENQUERY</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--1] Need to enable DataAccess: http://sqlblogcasts.com/blogs/piotr_rodak/archive/2009/11/22/data-access-setting-on-local-server.aspx

--Test Beforehand
select server_id, name, is_data_access_enabled from sys.servers

use master

EXEC sp_serveroption 'BCC-EXPLORERDB', 'DATA ACCESS', TRUE

go

--Test afterwards
select server_id, name, is_data_access_enabled from sys.servers
--===============================================================================================================================
--2] Then you can use OpenQuery

use B2W_Reports
go
							
SELECT  * 
FROM    
OPENQUERY([BCC-EXPLORERDB], 'EXEC B2W_Reports.dbo.prj_0013_SP_226_sub_00C_Section_1ab ''04-01-2016'', ''04-30-2016'', ''0_ALL'', ''0_ALL''');  


--3] Use STORED PROC as input, AND create temp table from the input

use B2W_Reports
go
							
SELECT  * 
INTO tmpJUNK
FROM    
OPENQUERY([BCC-EXPLORERDB], 'EXEC B2W_Reports.dbo.prj_0013_SP_226_sub_00C_Section_1ab ''04-01-2016'', ''04-30-2016'', ''0_ALL'', ''0_ALL''');  




--=============================================================================================
--http://stackoverflow.com/questions/209383/select-columns-from-result-set-of-stored-procedure

--This works for me: (i.e. I only need 2 columns of the 30+ returned by sp_help_job)

SELECT name, current_execution_status 
FROM OPENQUERY (MYSERVER, 
  'EXEC msdb.dbo.sp_help_job @job_name = ''My Job'', @job_aspect = ''JOB''');  

--Before this would work, I needed to run this:

sp_serveroption 'MYSERVER', 'DATA ACCESS', TRUE;

--....to update the sys.servers table. (i.e. Using a self-reference within OPENQUERY seems to be disabled by default.)

--For my simple requirement, I ran into none of the problems described in the OPENQUERY section of Lance's excellent link.

--Rossini, if you need to dynamically set those input parameters, then use of OPENQUERY becomes a little more fiddly:

DECLARE @innerSql varchar(1000);
DECLARE @outerSql varchar(1000);

-- Set up the original stored proc definition.
SET @innerSql = 
'EXEC msdb.dbo.sp_help_job @job_name = '''+@param1+''', @job_aspect = N'''+@param2+'''' ;

-- Handle quotes.
SET @innerSql = REPLACE(@innerSql, '''', '''''');

-- Set up the OPENQUERY definition.
SET @outerSql = 
'SELECT name, current_execution_status 
FROM OPENQUERY (MYSERVER, ''' + @innerSql + ''');';

-- Execute.
EXEC (@outerSql);

/*
I'm not sure of the differences (if any) between using sp_serveroption 
	to update the existing sys.servers self-reference directly, vs. using sp_addlinkedserver (as described in Lance's link) 
	to create a duplicate/alias.

Note 1: I prefer OPENQUERY over OPENROWSET, given that OPENQUERY does not require the connection-string definition within the proc.

Note 2: Having said all this: normally I would just use INSERT ... EXEC :) Yes, it's 10 mins extra typing, but if I can help it, 
I prefer not to jigger around with:
(a) quotes within quotes within quotes, and
(b) sys tables, and/or sneaky self-referencing Linked Server setups (i.e. for these, I need to plead my case to our all-powerful DBAs :)

However in this instance, I couldn't use a INSERT ... EXEC construct, as sp_help_job is already using one. 
("An INSERT EXEC statement cannot be nested.")</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedure_as_Input__using_OPENROWSET_and_tempTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedure_as_Input__using_OPENROWSET_and_tempTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
http://stackoverflow.com/questions/209383/select-columns-from-result-set-of-stored-procedure


--As it's been mentioned in the question, it's hard to define the 80 column temp table before executing the stored procedure.

--So the other way around this is to populate the table based on the stored procedure result set.

SELECT * INTO #temp FROM OPENROWSET('SQLNCLI', 'Server=localhost;Trusted_Connection=yes;'
                                   ,'EXEC MyStoredProc')
--If you are getting any error, you need to enable ad hoc distributed queries by executing following query.

sp_configure 'Show Advanced Options', 1
GO
RECONFIGURE
GO
sp_configure 'Ad Hoc Distributed Queries', 1
GO
RECONFIGURE
GO


--To execute sp_configure with both parameters to change a configuration option or to run the RECONFIGURE statement, 
--	you must be granted the ALTER SETTINGS server-level permission

--Now you can select your specific columns from the generated table

SELECT col1, col2
FROM #temp</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_Blocked_Process_Report___sp_blocked_process_report_viewer.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_Blocked_Process_Report___sp_blocked_process_report_viewer.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE master
GO

IF OBJECT_ID('sp_blocked_process_report_viewer') IS NULL
	EXEC ('
	CREATE PROCEDURE dbo.sp_blocked_process_report_viewer 
	AS 
	SELECT ''Replace Me''')
GO

ALTER PROCEDURE dbo.sp_blocked_process_report_viewer
(
	@Source nvarchar(max),
	@Type varchar(10) = 'FILE' 
)

AS

SET NOCOUNT ON

-- Validate @Type
IF (@Type NOT IN ('FILE', 'TABLE', 'XMLFILE', 'XESESSION'))
	RAISERROR ('The @Type parameter must be ''FILE'', ''TABLE'' or ''XMLFILE''', 11, 1)

IF (@Source LIKE '%.trc' AND @Type &lt;&gt; 'FILE')
	RAISERROR ('Warning: You specified a .trc trace. You should also specify @Type = ''FILE''', 10, 1)

IF (@Source LIKE '%.xml' AND @Type &lt;&gt; 'XMLFILE')
	RAISERROR ('Warning: You specified a .xml trace. You should also specify @Type = ''XMLFILE''', 10, 1)

IF (@Type = 'XESESSION' AND NOT EXISTS (
	SELECT * 
	FROM sys.server_event_sessions es
	JOIN sys.server_event_session_targets est
		ON es.event_session_id = est.event_session_id
	WHERE est.name in ('event_file', 'ring_buffer')
	  AND es.name = @Source ) 
)
	RAISERROR ('Warning: The extended event session you supplied does not exist or does not have an "event_file" or "ring_buffer" target.', 10, 1);
		

CREATE TABLE #ReportsXML
(
	monitorloop nvarchar(100) NOT NULL,
	endTime datetime NULL,
	blocking_spid INT NOT NULL,
	blocking_ecid INT NOT NULL,
	blocked_spid INT NOT NULL,
	blocked_ecid INT NOT NULL,
	blocked_hierarchy_string as CAST(blocked_spid as varchar(20)) + '.' + CAST(blocked_ecid as varchar(20)) + '/',
	blocking_hierarchy_string as CAST(blocking_spid as varchar(20)) + '.' + CAST(blocking_ecid as varchar(20)) + '/',
	bpReportXml xml not null,
	primary key clustered (monitorloop, blocked_spid, blocked_ecid),
	unique nonclustered (monitorloop, blocking_spid, blocking_ecid, blocked_spid, blocked_ecid)
)

DECLARE @SQL NVARCHAR(max);
DECLARE @TableSource nvarchar(max);

-- define source for table
IF (@Type = 'TABLE')
BEGIN
	-- everything input by users get quoted
	SET @TableSource = ISNULL(QUOTENAME(PARSENAME(@Source,4)) + N'.', '')
		+ ISNULL(QUOTENAME(PARSENAME(@Source,3)) + N'.', '')
		+ ISNULL(QUOTENAME(PARSENAME(@Source,2)) + N'.', '')
		+ QUOTENAME(PARSENAME(@Source,1));
END

-- define source for trc file
IF (@Type = 'FILE')
BEGIN	
	SET @TableSource = N'sys.fn_trace_gettable(N' + QUOTENAME(@Source, '''') + ', -1)';
END

-- load table or file
IF (@Type IN ('TABLE', 'FILE' ))
BEGIN
	SET @SQL = N'		
		INSERT #ReportsXML(blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
			monitorloop,bpReportXml,endTime)
		SELECT blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
			COALESCE(monitorloop, CONVERT(nvarchar(100), endTime, 120), cast(newid() as nvarchar(100))),
			bpReportXml,EndTime
		FROM ' + @TableSource + N'
		CROSS APPLY (
			SELECT CAST(TextData as xml)
			) AS bpReports(bpReportXml)
		CROSS APPLY (
			SELECT 
				monitorloop = bpReportXml.value(''(//@monitorLoop)[1]'', ''nvarchar(100)''),
				blocked_spid = bpReportXml.value(''(/blocked-process-report/blocked-process/process/@spid)[1]'', ''int''),
				blocked_ecid = bpReportXml.value(''(/blocked-process-report/blocked-process/process/@ecid)[1]'', ''int''),
				blocking_spid = bpReportXml.value(''(/blocked-process-report/blocking-process/process/@spid)[1]'', ''int''),
				blocking_ecid = bpReportXml.value(''(/blocked-process-report/blocking-process/process/@ecid)[1]'', ''int'')
			) AS bpShredded
		WHERE EventClass = 137
		  AND blocking_spid is not null
		  AND blocked_spid is not null';
		
	EXEC (@SQL);

END 


IF (@Type = 'XESESSION')
BEGIN
	DECLARE @SessionType sysname;
	DECLARE @SessionId int;
	DECLARE @SessionTargetId int;
	DECLARE @FilenamePattern sysname;

	SELECT TOP ( 1 ) 
		@SessionType = est.name,
		@SessionId = est.event_session_id,
		@SessionTargetId = est.target_id
	FROM sys.server_event_sessions es
	JOIN sys.server_event_session_targets est
		ON es.event_session_id = est.event_session_id
	WHERE est.name in ('event_file', 'ring_buffer')
		AND es.name = @Source;

	IF (@SessionType = 'event_file')
	BEGIN
		 
		SELECT @filenamePattern = REPLACE( CAST([value] AS sysname), '.xel', '*xel' )
		FROM sys.server_event_session_fields
		WHERE event_session_id = @SessionId
		  AND [object_id] = @SessionTargetId
		  AND name = 'filename'

		IF (@filenamePattern not like '%xel')
			set @filenamePattern += '*xel';

		INSERT #ReportsXML(blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
			monitorloop,bpReportXml,endTime)
		SELECT blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
			COALESCE(monitorloop, CONVERT(nvarchar(100), eventDate, 120), cast(newid() as nvarchar(100))),
			bpReportXml,eventDate
		FROM sys.fn_xe_file_target_read_file ( @filenamePattern, null, null, null) 
			as event_file_value
		CROSS APPLY ( SELECT CAST(event_file_value.[event_data] as xml) ) 
			as event_file_value_xml ([xml])
		CROSS APPLY (
			SELECT 
				event_file_value_xml.[xml].value('(event/@timestamp)[1]', 'datetime') as eventDate,
				event_file_value_xml.[xml].query('//event/data/value/blocked-process-report') as bpReportXml	
		) as bpReports
		CROSS APPLY (
			SELECT 
				monitorloop = bpReportXml.value('(//@monitorLoop)[1]', 'nvarchar(100)'),
				blocked_spid = bpReportXml.value('(/blocked-process-report/blocked-process/process/@spid)[1]', 'int'),
				blocked_ecid = bpReportXml.value('(/blocked-process-report/blocked-process/process/@ecid)[1]', 'int'),
				blocking_spid = bpReportXml.value('(/blocked-process-report/blocking-process/process/@spid)[1]', 'int'),
				blocking_ecid = bpReportXml.value('(/blocked-process-report/blocking-process/process/@ecid)[1]', 'int')
			) AS bpShredded
		WHERE blocking_spid is not null
		  AND blocked_spid is not null;

	END

	ELSE IF (@SessionType = 'ring_buffer')
	BEGIN
		-- get data from ring buffer
		INSERT #ReportsXML(blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
			monitorloop,bpReportXml,endTime)
		SELECT blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
			COALESCE(monitorloop, CONVERT(nvarchar(100), bpReportEndTime, 120), cast(newid() as nvarchar(100))),
			bpReportXml,bpReportEndTime
		FROM sys.dm_xe_session_targets st
		JOIN sys.dm_xe_sessions s 
			ON s.address = st.event_session_address
		CROSS APPLY 
			( SELECT CAST(st.target_data AS XML) ) 
			AS TargetData ([xml])
		CROSS APPLY 
			TargetData.[xml].nodes('/RingBufferTarget/event[@name="blocked_process_report"]') 
			AS bpNodes(bpNode)
		CROSS APPLY 
			bpNode.nodes('./data[@name="blocked_process"]/value/blocked-process-report')
			AS bpReportXMLNodes(bpReportXMLNode)
		CROSS APPLY
			(
			  SELECT 
				bpReportXml = CAST(bpReportXMLNode.query('.') as xml),
				bpReportEndTime = bpNode.value('(./@timestamp)[1]', 'datetime'),
				monitorloop = bpReportXMLNode.value('(//@monitorLoop)[1]', 'nvarchar(100)'),
				blocked_spid = bpReportXMLNode.value('(./blocked-process/process/@spid)[1]', 'int'),
				blocked_ecid = bpReportXMLNode.value('(./blocked-process/process/@ecid)[1]', 'int'),
				blocking_spid = bpReportXMLNode.value('(./blocking-process/process/@spid)[1]', 'int'),
				blocking_ecid = bpReportXMLNode.value('(./blocking-process/process/@ecid)[1]', 'int')
			) AS bpShredded
		WHERE s.name = @Source
		OPTION (MAXDOP 1);
	END

END



IF (@Type = 'XMLFILE')
BEGIN
	CREATE TABLE #TraceXML (
		id int identity primary key,
		ReportXML xml NOT NULL	
	)
	
	SET @SQL = N'
		INSERT #TraceXML(ReportXML)
		SELECT col FROM OPENROWSET (
				BULK ' + QUOTENAME(@Source, '''') + N', SINGLE_BLOB
			) as xmldata(col)';

	EXEC (@SQL);
	
	CREATE PRIMARY XML INDEX PXML_TraceXML ON #TraceXML(ReportXML);

	WITH XMLNAMESPACES 
	(
		'http://tempuri.org/TracePersistence.xsd' AS MY
	),
	ShreddedWheat AS 
	(
		SELECT
			bpShredded.blocked_ecid,
			bpShredded.blocked_spid,
			bpShredded.blocking_ecid,
			bpShredded.blocking_spid,
			bpShredded.monitorloop,
			bpReports.bpReportXml,
			bpReports.bpReportEndTime
		FROM #TraceXML
		CROSS APPLY 
			ReportXML.nodes('/MY:TraceData/MY:Events/MY:Event[@name="Blocked process report"]')
			AS eventNodes(eventNode)
		CROSS APPLY 
			eventNode.nodes('./MY:Column[@name="EndTime"]')
			AS endTimeNodes(endTimeNode)
		CROSS APPLY
			eventNode.nodes('./MY:Column[@name="TextData"]')
			AS bpNodes(bpNode)
		CROSS APPLY (
			SELECT CAST(bpNode.value('(./text())[1]', 'nvarchar(max)') as xml),
				CAST(LEFT(endTimeNode.value('(./text())[1]', 'varchar(max)'), 19) as datetime)
		) AS bpReports(bpReportXml, bpReportEndTime)
		CROSS APPLY (
			SELECT 
				monitorloop = bpReportXml.value('(//@monitorLoop)[1]', 'nvarchar(100)'),
				blocked_spid = bpReportXml.value('(/blocked-process-report/blocked-process/process/@spid)[1]', 'int'),
				blocked_ecid = bpReportXml.value('(/blocked-process-report/blocked-process/process/@ecid)[1]', 'int'),
				blocking_spid = bpReportXml.value('(/blocked-process-report/blocking-process/process/@spid)[1]', 'int'),
				blocking_ecid = bpReportXml.value('(/blocked-process-report/blocking-process/process/@ecid)[1]', 'int')
		) AS bpShredded
	)
	INSERT #ReportsXML(blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
		monitorloop,bpReportXml,endTime)
	SELECT blocked_ecid,blocked_spid,blocking_ecid,blocking_spid,
		COALESCE(monitorloop, CONVERT(nvarchar(100), bpReportEndTime, 120), 'unknown'),
		bpReportXml,bpReportEndTime
	FROM ShreddedWheat;
	
	DROP TABLE #TraceXML

END

-- Organize and select blocked process reports
;WITH Blockheads AS
(
	SELECT blocking_spid, blocking_ecid, monitorloop, blocking_hierarchy_string
	FROM #ReportsXML
	EXCEPT
	SELECT blocked_spid, blocked_ecid, monitorloop, blocked_hierarchy_string
	FROM #ReportsXML
), 
Hierarchy AS
(
	SELECT monitorloop, blocking_spid as spid, blocking_ecid as ecid, 
		cast('/' + blocking_hierarchy_string as varchar(max)) as chain,
		0 as level
	FROM Blockheads
	
	UNION ALL
	
	SELECT irx.monitorloop, irx.blocked_spid, irx.blocked_ecid,
		cast(h.chain + irx.blocked_hierarchy_string as varchar(max)),
		h.level+1
	FROM #ReportsXML irx
	JOIN Hierarchy h
		ON irx.monitorloop = h.monitorloop
		AND irx.blocking_spid = h.spid
		AND irx.blocking_ecid = h.ecid
)
SELECT 
	ISNULL(CONVERT(nvarchar(30), irx.endTime, 120), 
		'Lead') as traceTime,
	SPACE(4 * h.level) 
		+ CAST(h.spid as varchar(20)) 
		+ CASE h.ecid 
			WHEN 0 THEN ''
			ELSE '(' + CAST(h.ecid as varchar(20)) + ')' 
		END AS blockingTree,
	irx.bpReportXml
from Hierarchy h
left join #ReportsXML irx
	on irx.monitorloop = h.monitorloop
	and irx.blocked_spid = h.spid
	and irx.blocked_ecid = h.ecid
order by h.monitorloop, h.chain

DROP TABLE #ReportsXML

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>WSUS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>spGetObsoleteUpdatesToCleanup_cleanUpMultipleUpdates</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>WSUS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>spGetObsoleteUpdatesToCleanup_cleanUpMultipleUpdates</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--http://blog.ctglobalservices.com/configuration-manager-sccm/kea/house-of-cardsthe-configmgr-software-update-point-and-wsus/
/*
Before deleting any updates first run this stored procure exec spGetObsoleteUpdatesToCleanup. 
The stored procedure will return the update id of each obsolete update in the database. 
I have seen any number from 100 to 8,000. 
What I have learned is that there is no magic limit to when the server will time-out. 
In order to delete the updates you need to run this store procedure */
	exec spDeleteUpdate @localUpdateID=&lt;50697&gt; 
/*
where &lt;50697&gt; is the update id. You can choose to delete the updates one by one, 
or use the script below to delete x-number of updates at the time 
(thanks for Henrik Rading for helping out). 
Simply change the number in the SELECT TOP (1000) statement to any number you want to delete. 
I will warn you, it can easily take several hours to delete the updates 
and while the process is ongoing you might see WSUS synchronization errors.


*/
USE SUSDB 
GO 
IF object_id(‘tempdb..#MyTempTable’) is not null  DROP TABLE #MyTempTable 
GO 
IF (SELECT CURSOR_STATUS(‘global’,’myCursor’)) &gt;= -1 
BEGIN 
DEALLOCATE myCursor 
END 
GO 
sp_configure ‘Show Advanced Options’, 1 
GO 
RECONFIGURE 
GO 
sp_configure ‘Ad Hoc Distributed Queries’, 1 
GO 
RECONFIGURE 
GO

SELECT TOP (2000) * INTO #MyTempTable 
    FROM OPENROWSET(‘SQLNCLI’, ‘Server=(local);Trusted_Connection=yes;’, ‘EXEC susdb.dbo.spGetObsoleteUpdatesToCleanup’)

DECLARE myCursor CURSOR FOR 
SELECT LocalUpdateID FROM #MyTempTable

DECLARE @x INT 
DECLARE @Msg VARCHAR(50) 
DECLARE @Count INT 
SELECT @Count = COUNT(*) FROM #MyTempTable

SELECT @msg = ‘Number of updates to be deleted:’ +  CAST( @Count AS VARCHAR(10)) 
RAISERROR(@msg, 0, 1) WITH NOWAIT

OPEN myCursor 
FETCH NEXT FROM myCursor INTO @x

WHILE @@FETCH_STATUS = 0 
BEGIN 
    SELECT @msg = ‘Deleting update with ID:’ + CAST (@x AS VARCHAR(10)) 
    RAISERROR(@msg, 0, 1) WITH NOWAIT 
    EXEC spDeleteUpdate @localUpdateID=@x 
    
    FETCH NEXT FROM myCursor INTO @x 
END 
CLOSE myCursor; 
DEALLOCATE myCursor; 
DROP TABLE #MyTempTable; 
SELECT @msg = ‘Deletion completed’ 
    RAISERROR(@msg, 0, 1) WITH NOWAIT</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>All_Steps_exceptXSD_For_AssetManagement</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>All_Steps_exceptXSD_For_AssetManagement</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_1023_106_ImportAllDataFromDataDump.sql
--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

-- IMPORTANT:

--1] Set the data dump file name!! (Around line 51)
--2] CHANGE THE DATE DUMPED VARIABLE!!!! BEFORE RUNNING (Around line 101)

--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Use DB6_AssetManagement
go

-- Drop Table first, b/c the otherwise you can't drop the schema--------------------

IF OBJECT_ID('dbo.[XmlImport_JUNK_001]') IS NOT NULL
    DROP TABLE dbo.[XmlImport_JUNK_001]
GO
IF EXISTS ( SELECT * FROM sys.xml_schema_collections where [name] = 'XmlSchema_001')
DROP XML SCHEMA COLLECTION [XmlSchema_001]
GO

-------------------------------------------------------------------------------------
DECLARE @MySchema XML
SET @MySchema = 
(
    SELECT * FROM OPENROWSET
    (
        --BULK 'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xsd', SINGLE_CLOB 
        BULK '\\SQL-SERVER\QI_Data_Storage\XSD_001.xsd', SINGLE_CLOB 
    ) AS xmlData
)

CREATE XML SCHEMA COLLECTION [XmlSchema_001] AS @MySchema 
GO
    
--Code to create the table with a typed XML column:



CREATE TABLE [dbo].[XmlImport_JUNK_001] (
        xmlFileName VARCHAR(300),
        xml_data xml
        )

go

--=========================================================================================

    DECLARE @xmlFileName VARCHAR(300)
    SELECT  @xmlFileName = '\\SQL-SERVER\QI_Data_Storage\AssetManagement_2013_05_13.xml'
    --'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xml'
    -- dynamic sql is just so we can use @xmlFileName variable in OPENROWSET
    EXEC('
    INSERT INTO XmlImport_JUNK_001(xmlFileName, xml_data)

    SELECT ''' + @xmlFileName + ''', xmlData 
    FROM
    (
        SELECT  * 
        FROM    OPENROWSET (BULK ''' + @xmlFileName + ''' , SINGLE_BLOB) AS XMLDATA
    ) AS FileImport (XMLDATA)
    ')
    GO
    --SELECT top 10 * FROM XmlImport_JUNK_1
    
--=========================================================================================    

--||||||||||||||||||||||||||||||||||||||||||||||||||||||
IF OBJECT_ID('dbo.T0_Machine') IS NOT NULL
    DROP TABLE dbo.T0_Machine


CREATE TABLE T0_Machine(

		  [T00_PK] [int] IDENTITY(1,1) NOT NULL,
		  DeviceSerial_ComputerName NVARCHAR(100),
		  chassis NVARCHAR(25),
		  IP NVARCHAR(15),
		  DeviceSerial NVARCHAR(15),
		  mac1  NVARCHAR(17),
		  mac2  NVARCHAR(17),
		  mac3  NVARCHAR(17),
		 [USER] NVARCHAR(50), 
		  ComputerName NVARCHAR(50), 
		 manufacturer NVARCHAR(50),
		 model NVARCHAR(50), 
		 os NVARCHAR(100),
		 OS_Serial_Number NVARCHAR(50),
		 OS_Product_Key NVARCHAR(50),
		 OS_ServicePack smallINT,
		 ram  NVARCHAR(20),
		 scantime NVARCHAR(50),
		 Date_Uploaded Date,
		 Date_Dumped Date
  );		 
		  
go

DECLARE @Date_Dumped date
SELECT @Date_Dumped ='05-13-2013'

INSERT INTO T0_Machine 
	(
[DeviceSerial_ComputerName]	
,[chassis]
,ip
,DeviceSerial
,mac1
,mac2
,mac3
,[user]
,[ComputerName]
,[manufacturer]
,[model]
,[os]
,[OS_Serial_Number]
,[OS_Product_Key]
,OS_ServicePack
,[ram]
,[scantime]
,[Date_Uploaded]
,[Date_Dumped]
	)
--||||||||||||||||||||||||||||||||||||||||||||||||||||||	
SELECT	
(SELECT 'TheCalculation' =  coalesce(C.value('(deviceserial/text())[1]', 'nvarchar(15)'), '{missing}') + '_' + coalesce(RTRIM(C.value('(name/text())[1]', 'nvarchar(50)')), '{missing}') ) AS [DeviceSerial_ComputerName]
,C.value('(chassis/text())[1]', 'nvarchar(25)') chassis
,C.value('(ip/text())[1]', 'nvarchar(15)') ip
,C.value('(deviceserial/text())[1]', 'nvarchar(15)') DeviceSerial
,C.value('(mac1/text())[1]', 'nvarchar(17)') mac1
,C.value('(mac2/text())[1]', 'nvarchar(17)') mac2
,C.value('(mac3/text())[1]', 'nvarchar(17)') mac3
,C.value('(user/text())[1]', 'nvarchar(50)') [user]
,C.value('(name/text())[1]', 'nvarchar(50)') [ComputerName]
,C.value('(manufacturer/text())[1]', 'nvarchar(50)') [manufacturer]
,C.value('(model/text())[1]', 'nvarchar(50)') [model]
,C.value('(os/text())[1]', 'nvarchar(50)') [os]
,C.value('(osserialnumber/text())[1]', 'nvarchar(50)') [osserialnumber]
,C.value('(osproductkey/text())[1]', 'nvarchar(50)') [osproductkey]
,C.value('(servicepack/text())[1]', 'smallINT') [servicepack]
,C.value('(ram/text())[1]', 'nvarchar(50)') [ram]
,C.value('(scantime/text())[1]', 'datetime') [scantime]
,GETDATE() AS Date_Uploaded
,@Date_Dumped as Date_Dumped



FROM
[XmlImport_JUNK_001]
CROSS APPLY 
XmlImport_JUNK_001.xml_data.nodes('assets/client/machine') T(C)


--=========================================================================================

--||||||||||||||||||||||||||||||||||||||||||||||||||||||
IF OBJECT_ID('dbo.T01_Hardware') IS NOT NULL
    DROP TABLE dbo.T01_Hardware
go

CREATE TABLE T01_Hardware(

		  [T01_PK] [int] IDENTITY(1,1) NOT NULL,
		  DeviceSerial NVARCHAR(50),
		  ComputerName NVARCHAR(50),
		  DeviceSerial_ComputerName NVARCHAR(100),
		  DeviceType  NVARCHAR(50),
		  DeviceName  NVARCHAR(100),
		  DeviceManufacturer  NVARCHAR(100)
  );		 
go		  

INSERT INTO T01_Hardware 
	(
DeviceSerial
,ComputerName
,DeviceSerial_ComputerName
,DeviceType
,DeviceName
,DeviceManufacturer

	)
--||||||||||||||||||||||||||||||||||||||||||||||||||||||

	
SELECT	

	C.value('(deviceserial/text())[1]', 'nvarchar(15)') DeviceSerial
	,C.value('(name/text())[1]', 'nvarchar(50)') [ComputerName]
	, (SELECT 'TheCalculation' =  coalesce(C.value('(deviceserial/text())[1]', 'nvarchar(15)'), '{missing}') + '_' + coalesce(RTRIM(C.value('(name/text())[1]', 'nvarchar(50)')), '{missing}') ) AS [DeviceSerial_ComputerName]
	,B.value('(type/text())[1]', 'nvarchar(255)') [DeviceType]
	,B.value('(name/text())[1]', 'nvarchar(255)') [DeviceName]
	,B.value('(manufacturer/text())[1]', 'nvarchar(255)') [DeviceManufacturer]

FROM
[XmlImport_JUNK_001]
CROSS APPLY 
XmlImport_JUNK_001.xml_data.nodes('assets/client/machine') T(C)
OUTER APPLY
C.nodes('hardware/item') as S(B)


--=========================================================================================


--||||||||||||||||||||||||||||||||||||||||||||||||||||||
IF OBJECT_ID('dbo.T02_Software') IS NOT NULL
    DROP TABLE dbo.T02_Software
go

CREATE TABLE T02_Software(

		  [T02_PK] [int] IDENTITY(1,1) NOT NULL,
		  DeviceSerial NVARCHAR(50),
		  ComputerName NVARCHAR(50),
		  DeviceSerial_ComputerName NVARCHAR(100),
		  SoftwareName  NVARCHAR(255),
		  SoftwareVersion  NVARCHAR(50),
		  SoftwareInstallDate  NVARCHAR(100)
  );		 
go		  

INSERT INTO T02_Software 
	(
DeviceSerial
,ComputerName
,DeviceSerial_ComputerName
,SoftwareName
,SoftwareVersion
,SoftwareInstallDate

	)
--||||||||||||||||||||||||||||||||||||||||||||||||||||||

	
SELECT	

	C.value('(deviceserial/text())[1]', 'nvarchar(15)') DeviceSerial
	,C.value('(name/text())[1]', 'nvarchar(50)') [ComputerName]
	, (SELECT 'TheCalculation' =  coalesce(C.value('(deviceserial/text())[1]', 'nvarchar(15)'), '{missing}') + '_' + coalesce(RTRIM(C.value('(name/text())[1]', 'nvarchar(50)')), '{missing}') ) AS [DeviceSerial_ComputerName]
	,B.value('(name/text())[1]', 'nvarchar(255)') [SoftwareName]
	,B.value('(version/text())[1]', 'nvarchar(255)') [SoftwareVersion]
	,B.value('(install_date/text())[1]', 'nvarchar(255)') [SoftwareInstallDate]

FROM
[XmlImport_JUNK_001]
CROSS APPLY 
XmlImport_JUNK_001.xml_data.nodes('assets/client/machine') T(C)
OUTER APPLY
C.nodes('software/item') as S(B)


--=========================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Complex_OPENROWSET_BULK</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Complex_OPENROWSET_BULK</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- From: http://www.sqlservercentral.com/Forums/Topic1108062-392-1.aspx


--Sample XML file

&lt;CustomerDetails&gt;
  &lt;PersonalInfo&gt;
	&lt;CustID&gt;1001&lt;/CustID&gt;
	&lt;CustLastName&gt;Smith&lt;/CustLastName&gt;
	&lt;DOB&gt;2011-05-05T09:25:48.253&lt;/DOB&gt;
	&lt;Address&gt;
		&lt;Addr1&gt;100 Smith St.&lt;/Addr1&gt;
		&lt;City&gt;New York&lt;/City&gt;
	&lt;/Address&gt; 
 &lt;/PersonalInfo&gt;	
&lt;/CustomerDetails&gt;


--And the result table should look like

CREATE TABLE #Cust
	(CustID INT, CustLastName VARCHAR(10)
             , DOB DATETIME, Addr1 VARCHAR(100), City VARCHAR(10))
	
INSERT INTO #Cust
VALUES (1001, 'Smith', '2011-05-05', '100 Smith St.', 'New York')


--Replace the C:\test.txt with your filename in the following.

insert into #Cust
select
   c3.value('CustID[1]','int'),
   c3.value('CustLastName[1]','varchar(10)'),
   c3.value('DOB[1]','DATETIME'),
   c3.value('(Address/Addr1)[1]','VARCHAR(100)'),
   c3.value('(Address/City)[1]','VARCHAR(10)')
from
(
   select 
      cast(c1 as xml)
   from 
      OPENROWSET (BULK 'C:\test.txt',SINGLE_BLOB) as T1(c1)
)as T2(c2)
cross apply c2.nodes('/CustomerDetails/PersonalInfo') T3(c3)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Example_Read_AssetManagement_XML_IntoTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Example_Read_AssetManagement_XML_IntoTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> --prj_1023_CreateTable_T0_Machine_v2.sql
-- This took 11 minutes 6 seconds to run
-- it reads directly from the XML file

Use DB6_AssetManagement
go
IF OBJECT_ID('dbo.T0_Machine') IS NOT NULL
    DROP TABLE dbo.T0_Machine
go
CREATE TABLE T0_Machine(

		  [T00_PK] [int] IDENTITY(1,1) NOT NULL,
		  chassis NVARCHAR(25),
		  IP NVARCHAR(15),
		  Deviceserial NVARCHAR(15),
		  mac1  NVARCHAR(17),
		  mac2  NVARCHAR(17),
		  mac3  NVARCHAR(17),
		 [USER] NVARCHAR(50), 
		  name NVARCHAR(50), 
		 manufacturer NVARCHAR(50),
		 model NVARCHAR(50), 
		 os NVARCHAR(100),
		 osserialnumber NVARCHAR(50),
		 osproductkey NVARCHAR(50),
		 servicepack smallINT,
		 ram  NVARCHAR(20),
		 scantime NVARCHAR(50),
		 Date_Uploaded as Date
		  
  );


--Finally, the following statement will load the XML file, parse the XML elements to columns, and insert into the Products table:

INSERT INTO T0_Machine (
		  chassis,
		  IP,
		  Deviceserial,
		  mac1,
		  mac2,
		  mac3,
		 [USER], 
		  name, 
		 manufacturer,
		 model, 
		 os,
		 osserialnumber,
		 osproductkey,
		 servicepack,
		 ram ,
		 scantime,
		 Date_Uploaded
			)
SELECT 
		--X.machine.query('ip').value('.', 'NVARCHAR(15)'),
		--X.machine.query('user').value('.', 'NVARCHAR(50)')
		
		
		  X.machine.query('chassis').value('.', 'NVARCHAR(25)'),
		  X.machine.query('ip').value('.', 'NVARCHAR(15)'),
		  X.machine.query('deviceserial').value('.', 'NVARCHAR(15)'),
		  X.machine.query('mac1').value('.', 'NVARCHAR(17)'),		  
		  X.machine.query('mac2').value('.', 'NVARCHAR(17)'),	
		  X.machine.query('mac3').value('.', 'NVARCHAR(17)'),			  
		  X.machine.query('user').value('.', 'NVARCHAR(50)'),		  
		  X.machine.query('name').value('.', 'NVARCHAR(50)'),		  		  
		  X.machine.query('manufacturer').value('.', 'NVARCHAR(50)'),
		  X.machine.query('model').value('.', 'NVARCHAR(50)'),
		  X.machine.query('os').value('.', 'NVARCHAR(100)'),
		  X.machine.query('osserialnumber').value('.', 'NVARCHAR(50)'),
		  X.machine.query('osproductkey').value('.', 'NVARCHAR(50)'),
		  X.machine.query('servicepack').value('.', 'smallINT'),
		  X.machine.query('ram').value('.', 'NVARCHAR(20)'),
		  X.machine.query('scantime').value('.', 'NVARCHAR(50)'),
		  GETDATE() as [Date_Uploaded]
	
		
		
		
FROM (
SELECT CAST(x AS XML)
FROM OPENROWSET(
    BULK '\\SQL-SERVER\QI_Data_Storage\AssetManagement_2013_04_18.xml',   --&lt;== MOVE data to folder:  N:\DATA\QI_Data_Storage 
    SINGLE_BLOB) AS T(x)
    ) AS T(x)
CROSS APPLY x.nodes('assets/client/machine') AS X(machine);


--Here are the results:
select *
--SELECT IP, [USER], LEN(ltrim(rtrim([user]))) as LenUser
FROM T0_Machine
--Order by LenUser desc</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Import_XML_Using_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Import_XML_Using_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

--The ‘SINGLE_BLOB’ argument of OPENROWSET designates the 
--XML data into a Blob of data type VARBINARY(MAX) – this type also is limited to a size of 2GB


	--query the XML Blob using a CTE (pulling from the XML file each time)
WITH XmlFile 
			(Contents) 
AS (
	SELECT CONVERT (XML, BulkColumn) 
	FROM OPENROWSET (BULK 'G:\DATA_No_Backup\asset_tracking_dump_03-05-13.xml', SINGLE_BLOB) AS XmlData
	)
	
SELECT *
FROM XmlFile
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ImportFromFile_Simple</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ImportFromFile_Simple</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--FROM: http://pratchev.blogspot.com/2008/11/import-xml-file-to-sql-table.html
--First, the following XML is saved to XML file C:\Products.xml.

    &lt;Products&gt;
      &lt;Product&gt;
        &lt;SKU&gt;1&lt;/SKU&gt;
        &lt;Desc&gt;Book&lt;/Desc&gt;
      &lt;/Product&gt;
      &lt;Product&gt;
        &lt;SKU&gt;2&lt;/SKU&gt;
        &lt;Desc&gt;DVD&lt;/Desc&gt;
      &lt;/Product&gt;
      &lt;Product&gt;
        &lt;SKU&gt;3&lt;/SKU&gt;
        &lt;Desc&gt;Video&lt;/Desc&gt;
      &lt;/Product&gt;
    &lt;/Products&gt;


--Next, a table named Products is created to store the XML data.

    CREATE TABLE Products(
     sku INT PRIMARY KEY,
     product_desc VARCHAR(30));


--Finally, the following statement will load the XML file, parse the XML elements to columns, and insert into the Products table:

    INSERT INTO Products (sku, product_desc)
    SELECT X.product.query('SKU').value('.', 'INT'),
           X.product.query('Desc').value('.', 'VARCHAR(30)')
    FROM (
    SELECT CAST(x AS XML)
    FROM OPENROWSET(
        BULK 'C:\Products.xml',
        SINGLE_BLOB) AS T(x)
        ) AS T(x)
    CROSS APPLY x.nodes('Products/Product') AS X(product);


--Here are the results:

    SELECT sku, product_desc
    FROM Products;

     

    /*

     

    Results:

     

    sku         product_desc

    ----------- -------------

    1           Book

    2           DVD

    3           Video

     

    */</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Needed_Namespace_Declaration</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Needed_Namespace_Declaration</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--query is not working: SEE at bottom for version w/ Namespace

INSERT INTO neutc_import(macaddr,tcname)
SELECT X.a.query('MACAddress').value('.', 'varchar(50)'),
X.a.query('ComputerName').value('.', 'VARCHAR(50)')
FROM (
SELECT CAST(x AS XML)
FROM OPENROWSET(
BULK 'E:\scout_import\DSBU010995_Imdly_2_HwInfo.xml',
SINGLE_BLOB) AS T(x)
) AS T(x)
CROSS APPLY x.nodes('records/record') AS X(a);

--referenced xml:

&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Systems Version="4.00" xsi:schemaLocation="urn:schemas-ts-fujitsu-com:software-preload HWInfo4.00.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:schemas-ts-fujitsu-com:software-preload"&gt;
&lt;System&gt;
&lt;SystemIdentification&gt;
&lt;SerialNumber&gt;DSBU010995&lt;/SerialNumber&gt;
&lt;IndividualSoftwareID /&gt;
&lt;SystemUUID&gt;{B2E832CC-7484-11E1-8B14-5026909B9A32}&lt;/SystemUUID&gt;
&lt;CustomerSerialNumber /&gt;
&lt;IMEINumber&gt;&lt;/IMEINumber&gt;
&lt;MACAddresses&gt;
&lt;MACAddress type="OnBoard"&gt;00:30:05:68:FF:BD&lt;/MACAddress&gt;
&lt;/MACAddresses&gt;
&lt;/SystemIdentification&gt;
&lt;OrderReferenceData&gt;
&lt;P82OrderNumber&gt;xxxxxxx&lt;/P82OrderNumber&gt;
&lt;P82CustomerOrderNumber&gt;xxxxxxx&lt;/P82CustomerOrderNumber&gt;
&lt;P84OrderNumber&gt;xxxxxxx&lt;/P84OrderNumber&gt;
&lt;P84OrderPosition&gt;100&lt;/P84OrderPosition&gt;
&lt;P84CustomerOrderNumber&gt;xxxxxxx&lt;/P84CustomerOrderNumber&gt;
&lt;EndCustomerOrderNumber&gt;xxxxxxx&lt;/EndCustomerOrderNumber&gt;
&lt;/OrderReferenceData&gt;
&lt;ProductDetails&gt;
&lt;OrderCode&gt;CUZ:KxxxVXXX-EMFxx&lt;/OrderCode&gt;
&lt;Product&gt;LB P771 BLACK /CUZ:KxxxVXXX-EMFxx&lt;/Product&gt;
&lt;/ProductDetails&gt;
&lt;SoftwareModules /&gt;
&lt;OrderAttachements&gt;
&lt;HeaderSpecificData /&gt;
&lt;PositionSpecificData&gt;
&lt;ClientParameters SubClient="None" Client="Caritas"&gt;
&lt;ComputerName&gt;CNxxxxx&lt;/ComputerName&gt;
&lt;OldComputerName&gt;ONxxxxx&lt;/OldComputerName&gt;
&lt;PrimaryContact&gt;Max Mustermann&lt;/PrimaryContact&gt;
&lt;/ClientParameters&gt;
&lt;/PositionSpecificData&gt;
&lt;/OrderAttachements&gt;
&lt;/System&gt;
&lt;System&gt;
&lt;SystemIdentification&gt;
&lt;SerialNumber&gt;DSBU010995&lt;/SerialNumber&gt;
&lt;IndividualSoftwareID /&gt;
&lt;SystemUUID&gt;{B2E832CC-7484-11E1-8B14-5026909B9A32}&lt;/SystemUUID&gt;
&lt;CustomerSerialNumber /&gt;
&lt;IMEINumber&gt;&lt;/IMEINumber&gt;
&lt;MACAddresses&gt;
&lt;MACAddress type="OnBoard"&gt;00:30:05:68:FF:BD&lt;/MACAddress&gt;
&lt;/MACAddresses&gt;
&lt;/SystemIdentification&gt;
&lt;OrderReferenceData&gt;
&lt;P82OrderNumber&gt;xxxxxxx&lt;/P82OrderNumber&gt;
&lt;P82CustomerOrderNumber&gt;xxxxxxx&lt;/P82CustomerOrderNumber&gt;
&lt;P84OrderNumber&gt;xxxxxxx&lt;/P84OrderNumber&gt;
&lt;P84OrderPosition&gt;200&lt;/P84OrderPosition&gt;
&lt;P84CustomerOrderNumber&gt;xxxxxxx&lt;/P84CustomerOrderNumber&gt;
&lt;EndCustomerOrderNumber&gt;xxxxxxx&lt;/EndCustomerOrderNumber&gt;
&lt;/OrderReferenceData&gt;
&lt;ProductDetails&gt;
&lt;OrderCode&gt;CUZ:KxxxVXXX-EMFxx&lt;/OrderCode&gt;
&lt;Product&gt;LB P771 BLACK /CUZ:KxxxVXXX-EMFxx&lt;/Product&gt;
&lt;/ProductDetails&gt;
&lt;SoftwareModules /&gt;
&lt;OrderAttachements&gt;
&lt;HeaderSpecificData /&gt;
&lt;PositionSpecificData&gt;
&lt;ClientParameters SubClient="None" Client="Caritas"&gt;
&lt;ComputerName&gt;CNxxxxx&lt;/ComputerName&gt;
&lt;OldComputerName&gt;ONxxxxx&lt;/OldComputerName&gt;
&lt;PrimaryContact&gt;Max Mustermann&lt;/PrimaryContact&gt;
&lt;/ClientParameters&gt;
&lt;/PositionSpecificData&gt;
&lt;/OrderAttachements&gt;
&lt;/System&gt;
&lt;/Systems&gt;p.




--I think the main thing that you was missing was the namespace declaration. 
--I have also made a couple of minor alterations, namely the cross apply and removing the .query() methods in the select statement. 
--I have come up with the following that gets the MAC address and the computer name from the example xml

WITH xmlnamespaces (DEFAULT 'urn:schemas-ts-fujitsu-com:software-preload')
SELECT X.a.value('(SystemIdentification/MACAddresses/MACAddress/text())[1]', 'VARCHAR(30)') AS 'MAC',
X.a.value('(OrderAttachements/PositionSpecificData/ClientParameters/ComputerName/text())[1]', 'VARCHAR(30)')
FROM (
SELECT CAST(x AS XML)
FROM OPENROWSET(
BULK 'd:\ExampleXml.xml',
SINGLE_BLOB) AS T(x)
) AS T(x)
CROSS APPLY x.nodes('Systems/System') AS X(a);

 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OPENROWSET_BULK_SINGLE_BLOB</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OPENROWSET_BULK_SINGLE_BLOB</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--More than  one example


///////////////////////////
--1. Save the xml file to a location on your drive eg.C:\xmlfiles\Students.xml
--2. Create Table Students
--3. Import the xml using Openrowset bulk option  and select the values in xml using xpath and xquery
--    and Do a Insert into using select
--4. Results
--STEP 1
--The contents of the saved file will be
&lt;Students&gt;
  &lt;Student&gt;
    &lt;Id&gt;1&lt;/Id&gt;
    &lt;Name&gt;Madhan&lt;/Name&gt;
  &lt;/Student&gt;
  &lt;Student&gt;
    &lt;Id&gt;2&lt;/Id&gt;
    &lt;Name&gt;Karthi&lt;/Name&gt;
  &lt;/Student&gt;
  &lt;Student&gt;
    &lt;Id&gt;3&lt;/Id&gt;
    &lt;Name&gt;Bata&lt;/Name&gt;
  &lt;/Student&gt;
&lt;/Students&gt;
--STEP 2
--The syntax to create a table
CREATE TABLE TblStudents
(
 Id INT PRIMARY KEY,
 Name VARCHAR(50)
);
--STEP 3
--Query to select the values from xml and to extract

INSERT INTO TblStudents (Id , Name )
SELECT students.student.query('Id').value('.', 'INT') as Id,
       students.student.query('Name').value('.', 'VARCHAR(30)') as Name
FROM (
SELECT CAST(b AS XML)
FROM OPENROWSET(
     BULK 'C:\xmlfiles\Students.xml',
     SINGLE_BLOB) AS a(b)
     ) AS a(b)
CROSS APPLY b.nodes('Students/Student') AS students(student);

--STEP 4

SELECT Id, Name FROM TblStudents;

/*
Results:
Id        Name
----------- -------------
1           Madhan
2           Karthi
3           Bata

*/


///////////Another example/////////////////////////////

-- Save this in a file:

&lt;books&gt;
	&lt;category type="ssrs"&gt;
		&lt;book lang="en"&gt;
			Microsoft SQL Server 2008 Reporting Services Step by Step
		&lt;/book&gt;
		&lt;book lang="en"&gt;
			Microsoft SQL Server 2008 Reporting Services
		&lt;/book&gt;
		&lt;book lang="en"&gt;
			Applied Microsoft SQL Server 2008 Reporting Services
		&lt;/book&gt;
		&lt;book lang="en"&gt;
			Microsoft SQL Server Reporting Services Recipes: for Designing Expert Reports
		&lt;/book&gt;
	&lt;/category&gt;
	&lt;category type="ssas"&gt;
		&lt;book lang="en"&gt;
			Microsoft SQL Server 2008 Analysis Services Step by Step
		&lt;/book&gt;
		&lt;book lang="en"&gt;
			Microsoft SQL Server 2008 MDX Step by Step
		&lt;/book&gt;
		&lt;book lang="en"&gt;
			Expert Cube Development with Microsoft SQL Server 2008 Analysis Services
		&lt;/book&gt;
	&lt;/category&gt;
	&lt;category&gt;
		&lt;book lang="en"&gt;
			Smart Business Intelligence Solutions with Microsoft SQL Server 2008
		&lt;/book&gt;
		&lt;book lang="en"&gt;
			Delivering Business Intelligence with Microsoft SQL Server 2008
		&lt;/book&gt;
	&lt;/category&gt;
&lt;/books&gt;





DECLARE @X XML

SELECT
  @X = books
FROM OPENROWSET (BULK 'c:\sql-server-2008-books.xml', SINGLE_BLOB) AS Import(books)

Select
  [Book Name].value('.','varchar(100)') AS Book
From @X.




</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Parse_OPENROWSET_GoodExample</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Parse_OPENROWSET_GoodExample</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- Sample xml file:

&lt;CustomerDetails&gt;
  &lt;PersonalInfo&gt;
	&lt;CustID&gt;1001&lt;/CustID&gt;
	&lt;CustLastName&gt;Smith&lt;/CustLastName&gt;
	&lt;DOB&gt;2011-05-05T09:25:48.253&lt;/DOB&gt;
	&lt;Address&gt;
		&lt;Addr1&gt;100 Smith St.&lt;/Addr1&gt;
		&lt;City&gt;New York&lt;/City&gt;
	&lt;/Address&gt; 
 &lt;/PersonalInfo&gt;	
&lt;/CustomerDetails&gt;



--Replace the C:\test.txt with your filename in the following. 

insert into #Cust
select
   c3.value('CustID[1]','int'),
   c3.value('CustLastName[1]','varchar(10)'),
   c3.value('DOB[1]','DATETIME'),
   c3.value('(Address/Addr1)[1]','VARCHAR(100)'),
   c3.value('(Address/City)[1]','VARCHAR(10)')
from
(
   select 
      cast(c1 as xml)
   from 
      OPENROWSET (BULK 'C:\test.txt',SINGLE_BLOB) as T1(c1)
)as T2(c2)
cross apply c2.nodes('/CustomerDetails/PersonalInfo') T3(c3)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Read_XML_File_into_a_variable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Read_XML_File_into_a_variable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>DECLARE @XML xml
SELECT @xml = x.a 
FROM OPENROWSET(BULK 'C:\Med_Form.xml', SINGLE_BLOB) AS x(a)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ReadsXML_BUT_DoesNotParseIt</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ReadsXML_BUT_DoesNotParseIt</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> --From: http://weblogs.sqlteam.com/mladenp/archive/2007/06/18/60235.aspx
 
 use AssetManagment
    go
    
    
    CREATE TABLE XmlImportTest
    (
        xmlFileName VARCHAR(300),
        xml_data xml
    )
    GO

    DECLARE @xmlFileName VARCHAR(300)
    SELECT  @xmlFileName = 'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xml'
    -- dynamic sql is just so we can use @xmlFileName variable in OPENROWSET
    EXEC('
    INSERT INTO XmlImportTest(xmlFileName, xml_data)

    SELECT ''' + @xmlFileName + ''', xmlData 
    FROM
    (
        SELECT  * 
        FROM    OPENROWSET (BULK ''' + @xmlFileName + ''' , SINGLE_BLOB) AS XMLDATA
    ) AS FileImport (XMLDATA)
    ')
    GO
    SELECT * FROM XmlImportTest

    DROP TABLE XmlImportTest	--&lt;== Need to run this to drop it from memory</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Shredding_Complex</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Shredding_Complex</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--Also, I totally whiffed on my understanding of the node structure. 
--You have the relative path as (../../PriceListId) 
--even though it is at the top level of the node structure. 
--Can you explain this please?

--nodes return a virtual node, or if you want, 
--a default path in the XML tree structure. 
--This is most likely NOT the root of the document, 
--and as such it may make sense to retrieve information one level up (../) 
--or even multiple levels up. 
--If you use a path like (/something) after using nodes(), 
--it is essentially as if you did not use nodes, as you override the default pat

--I think that what you misunderstand is that 
--the 2 dots and slash (../) symbol is actually for going up one level 
--and not going down one level (like the 2 dots in DOS – cd .. takes up one step in the files tree). 
--The path that you specify in the nodes method is the reference point that from there it will go u

declare @x xml
set @x =
'&lt;ProductFamilyUpdate&gt;
&lt;PriceListId&gt;1111&lt;/PriceListId&gt;
&lt;GenerationTime&gt;01:31:33&lt;/GenerationTime&gt;
&lt;MajorFamily&gt;
&lt;FamilyName&gt;3G modules and 3G Router Bundles&lt;/FamilyName&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;3G Antennas and Cables&lt;/FamilyName&gt;
&lt;ProductNumber&gt;3G-AE015-R=&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;3G Bundles&lt;/FamilyName&gt;
&lt;ProductNumber&gt;CISCO881G-A-K9&lt;/ProductNumber&gt;
&lt;ProductNumber&gt;CISCO881G-S-K9&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;/MajorFamily&gt;
&lt;MajorFamily&gt;
&lt;FamilyName&gt;CPE Telco Home Networks&lt;/FamilyName&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;xDSL Residential Gateway (Telcos)&lt;/FamilyName&gt;
&lt;ProductNumber&gt;SP-AR3-RFGW1A2E&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;/MajorFamily&gt;
&lt;MajorFamily&gt;
&lt;FamilyName&gt;Cables and Accessories for All Router and Security Platforms&lt;/FamilyName&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;Power Cords&lt;/FamilyName&gt;
&lt;ProductNumber&gt;AIR-PWR-CORD-JP=&lt;/ProductNumber&gt;
&lt;ProductNumber&gt;AIR-PWR-CORD-NA=&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;/MajorFamily&gt;
&lt;MajorFamily&gt;
&lt;FamilyName&gt;Catalyst 2350 Series&lt;/FamilyName&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;TwinGig Converter Module for the Catalyst 2350 Series&lt;/FamilyName&gt;
&lt;ProductNumber&gt;CVR-X2-SFP10G=&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;/MajorFamily&gt;
&lt;MajorFamily&gt;
&lt;FamilyName&gt;Catalyst 2900&lt;/FamilyName&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;Software Relicenses for Used 2900 Equipment&lt;/FamilyName&gt;
&lt;ProductNumber&gt;LL29GL3-IP&lt;/ProductNumber&gt;
&lt;ProductNumber&gt;LLC2900SA6EN&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;/MajorFamily&gt;
&lt;MajorFamily&gt;
&lt;FamilyName&gt;Catalyst 2900 Series&lt;/FamilyName&gt;
&lt;MinorFamily&gt;
&lt;FamilyName&gt;Catalyst 2900 Series Accessories&lt;/FamilyName&gt;
&lt;ProductNumber&gt;STK-RACKMOUNT-1RU=&lt;/ProductNumber&gt;
&lt;/MinorFamily&gt;
&lt;/MajorFamily&gt;
&lt;/ProductFamilyUpdate&gt;'
select @x

select NewTbl.XMLCol.value('(../../PriceListId)[1]', 'int') as PriceListID,
NewTbl.XMLCol.value('(../../GenerationTime)[1]', 'char(8)'),
NewTbl.XMLCol.value('(../FamilyName)[1]','varchar(50)') as MajorFamilyName,
NewTbl.XMLCol.value('(FamilyName)[1]','varchar(50)') as MinorFamilyName
from @x.nodes('ProductFamilyUpdate/MajorFamily/MinorFamily') NewTbl (XMLCol)



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--With one change to Adi SQL, I have the solution

SELECT X.MPL.value('(../../PriceListId)[1]', 'nvarchar(4)') As PriceListID,
X.MPL.value('(../../ThisDocumentGenerationTime)[1]', 'nvarchar(20)') As DocDateTime,
X.MPL.value('(../FamilyName)[1]', 'nvarchar(50)') As PGroup,
X.MPL.value('(FamilyName)[1]', 'nvarchar(50)') As PSubGroup,
Y.MPL.value('(.)[1]', 'nvarchar(50)') As ProductNumber
FROM (
SELECT CAST(x AS XML)
FROM OPENROWSET(
BULK '\\psf\Home\Import\1134_Family_New.xml',
SINGLE_BLOB) AS T(x)
) AS T(x)
CROSS APPLY x.nodes('ProductFamilyUpdate/MajorFamily/MinorFamily') AS X(MPL)
CROSS APPLY MPL.nodes('ProductNumber') As Y(MPL);

--The additional CROSS APPLY allowed me to shred the last element, ProductNumber, which was contained in the MinorFamily element multiple times.

--I'm still not sure why 
--X.MPL.value('(../../PriceListId)[1]', 'nvarchar(4)') 
--As PriceListID is referenced this way in the SELECT. 

--Looking back at the sample of the XML data above, 
--one can see that PriceListId the first node below the root, 
--ProductFamilyUpdate, with ProductNumber as the bottom most node. 
--Yet the "value" method references PriceListId 
--as if it's at the bottom (as I understand it) using (../../PriceListId) and MinorFamily[FamilyName] 
--as if it's at the top using (FamilyName). 
--I would think the reference to PSubGroup would pull the first occurrence of FamilyName, 
--which is under MajorFamily, instead using this reference.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Simple_OPENROWSET_BULK</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Simple_OPENROWSET_BULK</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--In order to import XML data in SQL Server, you can use the BULK keyword with OPENROWSET

--Let us explore how to import XML data with an example.

--Step 1: Create an independent sample table in the Northwind database or any db of your choice :

USE NORTHWIND
CREATE TABLE CustomerDiscount (ID int NOT NULL, Discount xml)
GO

--Step 2: Now create a XML file and save it on your disk. We will call the file 'sample.xml' and save it in C:\

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Customers&gt;
&lt;Customer ID="1"&gt;
&lt;Discount&gt;20&lt;/Discount&gt;
&lt;/Customer&gt;
&lt;/Customers&gt;

--Step 3: Let us now import the xml data from C:\sample.xml into our newly created table 'CustomerDiscount'

INSERT INTO CustomerDiscount(ID, Discount)
SELECT 1, Disc
FROM
	(
	SELECT * 
	FROM OPENROWSET(BULK 'c:\sample.xml',SINGLE_BLOB) as Disc
	) AS ImportXML (Disc)

--Note: Do not forget to specify the UTF-8 encoding scheme in the XML file. </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Use_XSD_CreateSchema_CreateTypedXML_Create_XML_Index</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Use_XSD_CreateSchema_CreateTypedXML_Create_XML_Index</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- from: http://stackoverflow.com/questions/61233/the-best-way-to-shred-xml-data-into-sql-server-database-columns

--Stumbled across this question whilst having a very similar problem, 
--I'd been running a query processing a 7.5MB XML file 
--(~approx 10,000 nodes) for around 3.5~4 hours before finally giving up.

--However, after a little more research 
--I found that having typed the XML using a schema and created an XML Index 
--(I'd bulk inserted into a table) the same query completed in ~ 0.04ms.

--How's that for a performance improvement!

--Code to create a schema:


IF EXISTS ( SELECT * FROM sys.xml_schema_collections where [name] = 'MyXmlSchema')
DROP XML SCHEMA COLLECTION [MyXmlSchema]
GO

DECLARE @MySchema XML
SET @MySchema = 
(
    SELECT * FROM OPENROWSET
    (
        BULK 'C:\Path\To\Schema\MySchema.xsd', SINGLE_CLOB 
    ) AS xmlData
)

CREATE XML SCHEMA COLLECTION [MyXmlSchema] AS @MySchema 
GO

--Code to create the table with a typed XML column:

CREATE TABLE [dbo].[XmlFiles] (
    [Id] [uniqueidentifier] NOT NULL,

    -- Data from CV element 
    [Data] xml(CONTENT dbo.[MyXmlSchema]) NOT NULL,

CONSTRAINT [PK_XmlFiles] PRIMARY KEY NONCLUSTERED 
(
    [Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

--Code to create Index

CREATE PRIMARY XML INDEX PXML_Data
ON [dbo].[XmlFiles] (Data)

--There are a few things to bear in mind though. SQL Server's implementation of Schema doesn't support xsd:include.
-- This means that if you have a schema which references other schema, you'll have to copy all of these into a single schema and add that.

--Also I would get an error:

--XQuery [dbo.XmlFiles.Data.value()]: Cannot implicitly atomize or apply 'fn:data()' to complex content elements, found type 'xs:anyType' within inferred type 'element({http://www.mynamespace.fake/schemas}:SequenceNumber,xs:anyType) ?'.

--if I tried to navigate above the node I had selected with the nodes function. E.g.

SELECT
    ,C.value('CVElementId[1]', 'INT') AS [CVElementId]
    ,C.value('../SequenceNumber[1]', 'INT') AS [Level]
FROM 
    [dbo].[XmlFiles]
CROSS APPLY
    [Data].nodes('/CVSet/Level/CVElement') AS T(C)
    
    
--Found that the best way to handle this was to use the OUTER APPLY to in effect perform an "outer join" on the XML. 

SELECT
    ,C.value('CVElementId[1]', 'INT') AS [CVElementId]
    ,B.value('SequenceNumber[1]', 'INT') AS [Level]
FROM 
    [dbo].[XmlFiles]
CROSS APPLY
    [Data].nodes('/CVSet/Level') AS T(B)
OUTER APPLY
    B.nodes ('CVElement') AS S(C)   </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_ReadIn_Untyped_ConvertToTyped</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Convert_Untyped_To_XSD_Then_Create_SCHEMA</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_ReadIn_Untyped_ConvertToTyped</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Convert_Untyped_To_XSD_Then_Create_SCHEMA</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--1] Clicked on the UNTYPED xml field to go into the XML editor in SSMS
--		Could not read it at first:

--		Go to Tools-&gt;Options then in the wizard go to Query Results-&gt;SQL Server-&gt;Results to Grid 
--		and set the maximum chars retrieved for XML data to Unlimited.
-- 		May have to disconnect then reconnect to have it take effect

--2] Used XML editor to create and save the .xsd file to disk
--	a) XML {Menu} =&gt; Create Schema, then save it to disk
--	b) File {Menu} =&gt; Save XSD_001.xsd


--=================================================================

--Created the schema from the .xsd file:
--Pgm:
-- CreateSchemaFromXSD_ThenCreateTyped_XML_Column_ThenIndex

 use AssetManagment
    go



IF EXISTS ( SELECT * FROM sys.xml_schema_collections where [name] = 'MyXmlSchema')
DROP XML SCHEMA COLLECTION [MyXmlSchema]
GO

DECLARE @MySchema XML
SET @MySchema = 
(
    SELECT * FROM OPENROWSET
    (
        BULK 'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xsd', SINGLE_CLOB 
    ) AS xmlData
)

CREATE XML SCHEMA COLLECTION [MyXmlSchema] AS @MySchema 
GO
    
--Code to create the table with a typed XML column:

CREATE TABLE [dbo].[XmlFiles] (
    [Id] [uniqueidentifier] NOT NULL,

    -- Data from CV element 
    [Data] xml(CONTENT dbo.[MyXmlSchema]) NOT NULL,

CONSTRAINT [PK_XmlFiles] PRIMARY KEY NONCLUSTERED 
(
    [Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

--Code to create Index

--CREATE PRIMARY XML INDEX PXML_Data
--ON [dbo].[XmlFiles] (Data)    

go
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_ReadIn_Untyped_ConvertToTyped</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>XML_Read_Typed</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_ReadIn_Untyped_ConvertToTyped</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>XML_Read_Typed</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>use AssetManagment
    go
    
    
	IF OBJECT_ID('dbo.XmlImportTest') IS NOT NULL
		DROP TABLE dbo.XmlImportTest

    ----Untyped
    --CREATE TABLE XmlImportTest
    --(
    --    xmlFileName VARCHAR(300),
    --    xml_data xml
    --)
    --GO

   -- Typed
    CREATE TABLE XmlImportTest
    (
        xmlFileName VARCHAR(300),
        xml_data xml (MyXmlSchema)
    )
    GO

    DECLARE @xmlFileName VARCHAR(300)
    SELECT  @xmlFileName = 'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xml'
    -- dynamic sql is just so we can use @xmlFileName variable in OPENROWSET
    EXEC('
    INSERT INTO XmlImportTest(xmlFileName, xml_data)

    SELECT ''' + @xmlFileName + ''', xmlData 
    FROM
    (
        SELECT  * 
        FROM    OPENROWSET (BULK ''' + @xmlFileName + ''' , SINGLE_BLOB) AS XMLDATA
    ) AS FileImport (XMLDATA)
    ')
    GO
    SELECT top 10 * FROM XmlImportTest
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_ReadIn_Untyped_ConvertToTyped</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>XML_Read_Untyped</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_ReadIn_Untyped_ConvertToTyped</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>XML_Read_Untyped</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>use AssetManagment
    go
    
    
	IF OBJECT_ID('dbo.XmlImportTest') IS NOT NULL
		DROP TABLE dbo.XmlImportTest

    ----Untyped
    CREATE TABLE XmlImportTest
    (
        xmlFileName VARCHAR(300),
        xml_data xml
    )
    GO

    --Typed
    --CREATE TABLE XmlImportTest
    --(
    --    xmlFileName VARCHAR(300),
    --    xml_data xml (MyXmlSchema)
    --)
    --GO

    DECLARE @xmlFileName VARCHAR(300)
    SELECT  @xmlFileName = 'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xml'
    -- dynamic sql is just so we can use @xmlFileName variable in OPENROWSET
    EXEC('
    INSERT INTO XmlImportTest(xmlFileName, xml_data)

    SELECT ''' + @xmlFileName + ''', xmlData 
    FROM
    (
        SELECT  * 
        FROM    OPENROWSET (BULK ''' + @xmlFileName + ''' , SINGLE_BLOB) AS XMLDATA
    ) AS FileImport (XMLDATA)
    ')
    GO
    SELECT top 10 * FROM XmlImportTest
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XQuery</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>XQuery_Nodes_Within_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XQuery</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>XQuery_Nodes_Within_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- FROM: https://www.simple-talk.com/sql/database-administration/ad-hoc-xml-file-querying/

--use XQuery nodes() method within a CTE to get distinct authors

WITH XmlFile (
				Contents
			  ) 
AS (
		SELECT CONVERT (XML, BulkColumn) 
		FROM OPENROWSET (BULK 'C:\Books.xml', SINGLE_BLOB) AS XmlData
	)
SELECT DISTINCT x.[Computer Book Authors] 
FROM(
		SELECT c.value('(author)[1]', 'varchar(50)') AS [Computer Book Authors]
		FROM   
				XmlFile 
				CROSS APPLY 
				Contents.nodes ('(//book/genre[. = "Computer"]/..)') AS t(c)
	)x;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XQuery</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>XQuery_ValueMethod_within_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XQuery</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>XQuery_ValueMethod_within_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--use XQuery value() method within a CTE
WITH XmlFile 
		(Contents) 
AS (
		SELECT CONVERT (XML, BulkColumn) 
		FROM OPENROWSET (
							BULK 'G:\DATA_No_Backup\From_CCWNC\2013_03_08_AssetManagement\asset_tracking_dump_03-05-13.xml', 
							SINGLE_BLOB
						) AS XmlData
	)
-- note [1] i.e. singleton requirement for 'value'	
SELECT Contents.value('(/assets/client/machine[user = "ACCESSIICAREWNC\darrington"]/hardware/item/details/AdapterType)[1]', 'varchar(50)') AS [AdapterType]
FROM   XmlFile
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SERVER_query_from_another_server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SERVER_query_from_another_server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>



-- https://stackoverflow.com/questions/1144051/selecting-data-from-two-different-servers-in-sql-server

SELECT
        *
FROM
        [SERVER2NAME].[THEDB].[THEOWNER].[THETABLE]
        
--==========================================
Querying across 2 different databases is a distributed query. Here is a list of some techniques plus the pros and cons:

Linked servers: 
	Provide access to a wider variety of data sources than SQL Server replication provides
Linked servers: 
	Connect with data sources that replication does not support or which require ad hoc access
Linked servers: 
	Perform better than OPENDATASOURCE or OPENROWSET
OPENDATASOURCE and OPENROWSET functions: 
	Convenient for retrieving data from data sources on an ad hoc basis. OPENROWSET has BULK facilities as well that may/may not require a format file which might be fiddley
OPENQUERY: 
	Does not support variables
--All are T-SQL solutions. Relatively easy to implement and set up
--All are dependent on connection between source and destionation which might affect performance and scalability

--=============================================================
SELECT * FROM OPENROWSET('SQLNCLI', 'Server=YOUR SERVER;Trusted_Connection=yes;','SELECT * FROM Table1') AS a
UNION
SELECT * FROM OPENROWSET('SQLNCLI', 'Server=ANOTHER SERVER;Trusted_Connection=yes;','SELECT * FROM Table1') AS a


--===================================================================

-- using SQL Server Authentication with data provider SQLOLEDB . 
--I am just posting here a code snippet for one table is in the current sever database where the code is running and another in other server '192.166.41.123'

SELECT TOP 2 *
FROM 
		dbo.tblHamdoonSoft tbl1
		INNER JOIN 
		OPENDATASOURCE (
				'SQLOLEDB'
				,'Data Source=192.166.41.123;User ID=sa;Password=hamdoonsoft'
				).[TestDatabase].[dbo].[tblHamdoonSoft1] tbl2
		ON tbl1.id = tbl2.id</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_OPENROWSET</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_OPENROWSET</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_OPENROWSET

--Includes all connection information that is required to access remote data from an OLE DB data source. 
--This method is an alternative to accessing tables in a linked server and is a one-time, 
--	ad hoc method of connecting and accessing remote data by using OLE DB. 
--The OPENROWSET function can be referenced in the FROM clause of a query as if it were a table name. 
--The OPENROWSET function can also be referenced as the target table of an INSERT, UPDATE, or DELETE statement, 
--	subject to the capabilities of the OLE DB provider. 
--Although the query might return multiple result sets, OPENROWSET returns only the first on

-- OPENROWSET also supports bulk operations through a built-in 
--	BULK provider that enables data from a file to be read and returned as a rowset.

OPENROWSET   
( { 'provider_name' , { 'datasource' ; 'user_id' ; 'password'   
   | 'provider_string' }   
   , {   [ catalog. ] [ schema. ] object   
       | 'query'   
     }   
   | BULK 'data_file' ,   
       { FORMATFILE = 'format_file_path' [ &lt;bulk_options&gt; ]  
       | SINGLE_BLOB | SINGLE_CLOB | SINGLE_NCLOB }  
} )   
  
OPENROWSET can be used to access remote data from OLE DB data sources only when 
--the DisallowAdhocAccess registry option is explicitly set to 0 for the specified provider, 
--and the Ad Hoc Distributed Queries advanced configuration option is enabled. 
--When these options are not set, the default behavior does not allow for ad hoc access.
  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SQLNCLI_example_from_remote_server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SQLNCLI_example_from_remote_server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--The following example uses the SQL Server Native Client OLE DB provider to 
--access the HumanResources.Department table in the AdventureWorks2012 database on the 
--remote server 
Seattle1
--(Use SQLNCLI and SQL Server will redirect to the latest version of SQL Server Native Client OLE DB Provider.) 
--A SELECT statement is used to define the row set returned. The provider string contains the Server and Trusted_Connection keywords. 
--These keywords are recognized by the SQL Server Native Client OLE DB provide

ELECT a.*  
FROM OPENROWSET('SQLNCLI', 'Server=Seattle1;Trusted_Connection=yes;',  
     'SELECT GroupName, Name, DepartmentID  
      FROM AdventureWorks2012.HumanResources.Department  
      ORDER BY GroupName, Name') AS a; </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ADSDSOOBJECT_example_from_ActiveDirectory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ADSDSOOBJECT_example_from_ActiveDirectory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT *
FROM OPENROWSET('ADSDSOOBJECT','adsdatasource','SELECT *
FROM ''LDAP://jphsa.org/dc=jphsa,dc=org''
WHERE objectClass =''organizationalUnit'' ')

--===============================================List of OU under and including DIV_Admin

SELECT *
FROM OPENROWSET('ADSDSOOBJECT','adsdatasource','SELECT *
FROM ''LDAP://jphsa.org/OU=DIV_Admin,dc=jphsa,dc=org''
WHERE objectClass =''organizationalUnit'' ')</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>