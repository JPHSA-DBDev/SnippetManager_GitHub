<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>about_M_PowerQuery_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>DaysAgo</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>about_M_PowerQuery_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>DaysAgo</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://jaykilleen.com/posts/power-query-m-function-to-add-days-to-a-date


'DAYSAGO.pq

'You can also use this to add days by passing a positive value to the function like 
'	DAYSAGO(today, 1) but I'd recommend just having another function called DAYSAHEAD 

let
   days_ago = (n) =&gt;
      let
          date = Date.AddDays(today, -n)
      in
       date
in
   days_ago


'Now you can do stuff like

Table.AddColumn(
  last_step, "in_last_7_days?", 
  each 
    if Date.From([invoiced_at]) &gt;= DAYSAGO(-7) then 
      true 
    else 
      false
)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ACCESS_2010</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Null_Date_or_INT_Creates_#Error</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ACCESS_2010</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Null_Date_or_INT_Creates_#Error</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Expression Builder

Test the field ([O1V2DT]) before passing it to a function
If it is null or "" then populate the field with a ""

Date:
DateTime_of_Lab_Test: IIF( ((trim([O1V2DT])="") OR (IsNull([O1V2DT]))),"",CDate(fn_sGetOneOfTwoPieces_GivenSeperators([O1V2DT],"1"," ") ))

INT:
NumberOfVisitsInPastYear: IIF(((trim([O1V3VAL])="") OR (IsNull([O1V3VAL]))),"",CInt([O1V3VAL]))

Single:
AIC_TestResult: IIf(((Trim([O1V16VAL])="") Or (IsNull([O1V16VAL]))),"",CSng([O1V16VAL]))</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ACCESS_2010</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Password_Protect</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ACCESS_2010</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Password_Protect</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>    Open Microsoft Access 2010 and open the database that you wish to password protect in exclusive mode. 
    You may do this by selecting Open from the file menu and navigating to the database you'd like to
     encrypt and then click it once. Then, instead of just clicking the Open button, 
     click the downward arrow icon to the right of the button.
      Choose "Open Exclusive" to open the database in exclusive mode.
      
    When the database opens, go to the File tab and click the Info button.
    
    Click the Encrypt with Password button.
    
    Choose a strong password for your database and enter it in both the Password and Verify boxes in the 
    Set Database Password dialog box, as shown in the image above. Once you've done this, click OK.
    
    
    That's all there is to it. After clicking OK, your database will be encrypted. 
    (This may take a while depending upon the size of your database). 
    The next time you open your database, you'll be prompted to enter the password before accessing it. </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ACCESS_2010</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Split_Database_FrontEnd_BackEnd</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ACCESS_2010</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Split_Database_FrontEnd_BackEnd</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Good overview
http://www.fmsinc.com/microsoftaccess/databasesplitter/

How to split and work with compiled
https://bytes.com/topic/access/answers/865488-how-compile-access-database

1. If you haven't split the database yet into Data Table in one,
	and all the other Queries, Forms, reports, Macro and Modules in another, please do so.

2. Once that is completed, 
	you need to make sure that you have a Network shared directory that has 
	Read,Write, Change Permissions for all users of the database.

3. Copy the MDW (User Workgroup File) and MDE (Compiled Version of your database) file 
	that you have for your application to the Network Share.

4. Have each user copy the MDE file to a local directory that has all the forms,
	 etc onto there local computer.

4. Then when they log in make sure that the MDW file that you're pointing too 
	is located on a Network shared drive as described before in option 2.

5. Once all that is setup, this should take care of your problem.


A file with the MDW file extension is a Microsoft Access Workgroup Information file, 
sometimes just called a WIF (workgroup information file).

An MDW file stores the usernames and passwords for users and groups that should have access 
	to a particular MS Access database, like an MDB file.

While the credentials for a database are stored in the MDW file, 
	it's the MDB file that holds the permissions that the users are granted.
	
The user-level security that MDW files provide are for MDB files only, 
	so they're not available for use with newer database formats like ACCDB and ACCDE. 	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Access</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Remove_Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Access</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Remove_Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Open .accdb exclusively
	Close the access database
	Open Access application =&gt; File {menu} =&gt; Open Exclusive
	Then provide password (storage2015) when challenged
File =&gt; Info =&gt; Decrypt Database
	Then provide the password again</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ActiveDirectory_Groups_Users_etc</Category>
        <Language>SQLSERVER7 SQL</Language>
        <Public>false</Public>
        <Name>Query_AD_three_Strategies_Linked_Server_or_OPENROWSET_or_CLR</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ActiveDirectory_Groups_Users_etc</Category>
          <Language>SQLSERVER7 SQL</Language>
          <Public>false</Public>
          <Name>Query_AD_three_Strategies_Linked_Server_or_OPENROWSET_or_CLR</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

http://www.pawlowski.cz/2011/04/querying-active-directory-sql-server-t-sql/
/*
There are basically 3 ways of accessing the Active Directory on SQL Server.

		Use Linked Server
		User OPENROWSET statement
		Using CLR

1] Access Active Directory using Linked Server

To get the linked server working we need to add the linked server itself 
and also provide credentials to be used by linked server. Here we have two possibilities
 – use the login’s current security context 
 – this mean use credentials of currently authenticated user (will not work for SQL Server authentication) 
or provide some AD account credentials to access the linked server.
		
*/		
EXEC sp_addlinkedserver @server = N'ADSI', 
	@srvproduct=N'Active Directory Service Interfaces', 
	@provider=N'ADSDSOObject', 
	@datasrc=N'adsdatasource'		
	
/*Prior we can use the linked server we have to add a login to that linked server which will be used to authenticate against AD. 
There are three possibilities:
*/

--Use current user security context (Linked server will use security context of currently autheticated user
EXEC sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',@useself=N'True',@locallogin=NULL,@rmtuser=NULL,@rmtpassword=NULL
 
--Use one remote account for all users (Linked server will be available to all users) and will use 'DOMAINUserAccount' for authetication to AD
EXEC sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',@useself=N'False',@locallogin=NULL,@rmtuser=N'DOMAINUserAccount',@rmtpassword=N'DomainAccountPassword'
 
--The Linked Server will be available to SQL Server Login 'SQL Server Login Name' and will use the 'DomainUserAccount' for authetication to AD
EXEC sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',@useself=N'False',@locallogin=N'SQL Server Login Name',@rmtuser=N'DOMAINUserAccunt',@rmtpassword=N'DomainAccountPassword'	


--2] Creating the Linked Server using Management Studio


/*
Once we have created the linked server we can start querying the AD and we have two possibilities to construct the query against AD (LDAP).

Use SQL Dialect (MSDN)
Use LDAP Dialect (MSDN)

SQL Dialect uses the constructs of SQL language and we can write queries against the AD */
\\\\\\\\\\\

--Select all groups
SELECT
*
FROM OPENQUERY(ADSI,'SELECT cn, ADsPath FROM ''LDAP://DC=Fabricam,DC=com'' WHERE objectCategory=''group''')
 
--Select all users
SELECT
*
FROM OPENQUERY(ADSI,'SELECT cn, ADsPath FROM ''LDAP://OU=Sales,DC=Fabricam,DC=com'' WHERE bjectCategory=''person'' AND objectClass=''user''')

/*
Be aware, the the LDAP is case sensitive, so you have to write LDAP:// and not ldap:// otherwise you will not receive any results. 
Also remember that the LDAP path needs to be enclosed in single quotes and therefore when it is specified in the OPENQUERY statement, 
it needs to be double single quoted as in example.

Also remember, that LDAP query returns only first 1000 records matching the specified conditions. 
Once the limit is met, you will receive and error message. 
You can limit the number of records using the TOP clause to not receive the error. 
To receive more than 1000 records is possible by using pagination, 
but it’s quite problematic in T-SQL and I will show this method in the upcoming article which will focus on getting AD data using CLR.

DAP Dialect	*/
\\\\\\\\\\\
/*
As mentioned above, the other option to make query against the AD is using the LDAP dialect 
and details about the dialect you can find on the link above. 
Details how you write the condition in LDAP dialect you can find on MSDN Search Filter Syntax. 
Using the LDAP dialect we have a greater possibilities in writing conditions, which allow us easily retrieve members of AD Groups etc..
*/

--Select all groups
SELECT
*
FROM OPENQUERY(ADSI,'&lt;LDAP://DC=Fabricam,DC=com&gt;;(&amp;(objectCategory=group));cn,ADsPath;subtree')
 
--Select all users
SELECT
*
FROM OPENQUERY(ADSI,'&lt;LDAP://OU=Sales,DC=Fabricam,DC=com&gt;;(&amp;(objectCategory=person)(objectClass=user));cn,ADsPath;subtree')
 
--Select all users belonging to group 'MyGroup'
SELECT
*
FROM OPENQUERY(ADSI,'&lt;LDAP://DC=Fabricam,DC=com&gt;;(&amp;(objectCategory=user)(objectClass=user)(memberOf=MyGroups,OU=Security Groups,OU=Groups,DC=Fabricam,DC=com));cn,ADsPath;subtree')

/*
3] Access Active Directory using OPENROWSET statement
The method of accessing Active Directory using the OPENROWSET statement is similar to the Linked Server solution. 
The difference is, that we do not have to create the linked server, 
but instead of this we provide all the information related to driver, login etc. directly as parameters of the OPENROWSET statement.

Again we have the possibilities to use SQL Dialect or LDAP dialect whatever suits your needs better. Here are some Examples.
*/
--Select all Groups which name starts with "D" (SQL Dialect)
SELECT
*
FROM OPENROWSET('ADSDSOObject', '','SELECT cn, ADsPath FROM ''LDAP://DC=Fabricam,DC=com'' WHERE objectCategory=''group'' AND cn=''D*''')
 
 
--Select all users (LDAP Dialect) providing also credentials and flags
SELECT
*
FROM OPENROWSET('ADSDSOObject', 'User ID=UserName;Password=UserPassword;ADSI Flag=0x11;','&lt;LDAP://OU=Sales,DC=Fabricam,DC=com&gt;;(&amp;(objectCategory=user)(objectClass=user));cn,ADsPath;subtree')


/*In the second example with LDAP Dialect I’ve used also an “ADSI Flag” option. 
This option specifies binding authentication option and can be a combination of values from the ADS_AUTHENTICATION_ENUM
*/



</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ActiveDirectory_Groups_Users_etc</Category>
        <Language>SQLSERVER7 SQL</Language>
        <Public>false</Public>
        <Name>Querying Active Directory Data from SQL Server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ActiveDirectory_Groups_Users_etc</Category>
          <Language>SQLSERVER7 SQL</Language>
          <Public>false</Public>
          <Name>Querying Active Directory Data from SQL Server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--Querying Active Directory Data from SQL Server
https://www.mssqltips.com/sqlservertip/2580/querying-active-directory-data-from-sql-server/


--1] Create Linked Server
--First thing we'll do is create our linked server, Active Directory Service Interface also known as ASDI, 
--	to Active Directory using the code below:

--===&gt; Make sure you change the @rmtuser and @rmtpassword variables to a login and password that has access to your Active Directory.

USE [master]
GO 
EXEC master.dbo.sp_addlinkedserver @server = N'ADSI', @srvproduct=N'Active Directory Service Interfaces', @provider=N'ADSDSOObject', @datasrc=N'adsdatasource'
EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',@useself=N'False',@locallogin=NULL,@rmtuser=N'DOMAIN\USER',@rmtpassword='*********'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'collation compatible',  @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'data access', @optvalue=N'true'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'dist', @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'pub', @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'rpc', @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'rpc out', @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'sub', @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'connect timeout', @optvalue=N'0'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'collation name', @optvalue=null
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'lazy schema validation',  @optvalue=N'false'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'query timeout', @optvalue=N'0'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'use remote collation',  @optvalue=N'true'
GO 
EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'remote proc transaction promotion', @optvalue=N'true'
GO

/*
2] Querying Active Directory
Once the linked server is created we can now setup our query to return the information we need.

First, you'll need to ask your Network/Systems Administrator for your LDAP info then we can continue to the query. 

Here is how the LDAP connection is broken down:

For our example it looks like this: LDAP://DOMAIN.com/OU=Players,DC=DOMAIN,DC=com
LDAP://Domain.com - is the name of a domain controller
/OU=Players - this is the Organization Unit, in our case (Players)
,DC - this is the Domain Name broken up by domain and extension name
So....LDAP://DomainControllerName.com/OU=OrganizationalUnit,DC=DOMAIN,DC=NAME
According to the problem, this user needs to return the companies email addresses and phone numbers. To do this we can use the code below:

(note - you will need to change your domain information for this to work)
*/
SELECT * FROM OpenQuery ( 
  ADSI,  
  'SELECT displayName, telephoneNumber, mail, mobile, facsimileTelephoneNumber 
  FROM  ''LDAP://DOMAIN.com/OU=Players,DC=DOMAIN,DC=com'' 
  WHERE objectClass =  ''User'' 
  ') AS tblADSI
ORDORDER BY displayname

/*As you can see this query will return Active Directory's Display Name, Telephone Number, Email Address, Mobile Number, 
and Fax Number. Also note, that when you query Active Directory it actually creates the SELECT statement backwards. 
I started the SELECT statement with SELECT displayname, but it was the last field in the results
*/

/*
if you wanted to view more columns for each user we can use the below code to display fields such as: 
	FirstName, Office, Department, Fax, Mobile, Email, Login, Telephone, Display Name, Title, Company, Pager, Street Address, and more.
*/
SELECT * FROM OpenQuery
  ( 
  ADSI,  
  'SELECT streetaddress, pager, company, title, displayName, telephoneNumber, sAMAccountName, 
  mail, mobile, facsimileTelephoneNumber, department, physicalDeliveryOfficeName, givenname 
  FROM  ''LDAP://DOMAIN.com/OU=Players,DC=DOMAIN,DC=com''
  WHERE objectClass =  ''User'' 
  ') AS tblADSI
ORDER BY displayname

-- list of all the user attributes;
http://www.kouti.com/tables/userattributes.htm











</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_AD_Active_Directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_AD_Active_Directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_AD_Active_Directory


--LDAP Search Filter Syntax:	
	https://msdn.microsoft.com/en-us/library/windows/desktop/aa746475(v=vs.85).aspx
--User Attributes - Inside Active Directory: 
	http://www.kouti.com/tables/userattributes.htm

There are three ways to query Active Directory (AD) from SQL Server: 
	-	Using CLR Stored Procedures
	-	using the OpenRowset command
	-	using the OpenQuery command. 


--To Set up a Linked Server: 
	https://msdn.microsoft.com/en-us/library/aa772380(VS.105).aspx

/*Creating a Linked Server
===========================
In the following example, note that there are several arguments used with the sp_addlinkedserver System Stored Procedure:
	"ADSI" is the server argument and will be the name of this linked server.
	"Active Directory Services 2.5" is the srvproduct argument, which is the name of the OLE DB data source that you are adding as a linked server.
	"ADSDSOObject" is the provider_name argument.
	"adsdatasource" is the data_source argument, which is the name of the data source as interpreted by the OLE DB Provider.
	
For Windows-authenticated logins, 
	the self-mapping is sufficient to access the directory with SQL Server Security Delegation. 
	Because the self-mapping is created by default for linked servers created through sp_addlinkedserver, no other login mapping is necessary.
For SQL Server–authenticated logins, 
	you can configure suitable logins and passwords for connecting to the directory service by using the sp_addlinkedsrvlogin System Stored Procedure.	
	
The EXEC command is used to execute System Stored Procedures.
*/

EXEC sp_addlinkedserver 'ADSI', 'Active Directory Services 2.5', 
'ADSDSOObject', 'adsdatasource'
GO

/*
Query Syntax for OpenRowset and OpenQuery
=========================================
There are two options for writing the AD queries through OpenRowset and OpenQuery: 
	SQL syntax and LDAP dialect. 
	SQL syntax is more natural for database developers, while LDAP dialect is more familiar to system administrators. 
	Either can be used to query AD, but the LDAP dialect option offers a few nice extras, 
	such as extended matching rules and bitwise matching

Notes for LDAP syntax:

-	In LDAP syntax, there are no quotes around string values
-	Options for scope are Base, One Level, Subtree – generally use subtree search unless you know what you are looking for is at a particular scope level


When using OpenQuery or OpenRowset, you can’t simply pass in variables. 
They need to be concatenated into the query, 
	and then you need to use Exec (or sp_executesql if you want to set variables from the results) to run the query. 
	Because of this, any dynamic querying of AD must be done through stored procedures. 
*/

DECLARE @SQL nvarchar(2000) = ''
DECLARE @GroupName varchar(30) = 'SomeGroupName'

SELECT @SQL = 'SELECT @GroupPath = ADsPath FROM OPENQUERY
	(ACTIVE_DIR,
	''SELECT *
	FROM ''''LDAP://Domain.company.com,DC=Domain,DC=Company,DC=Com''''
	WHERE sAMAccountName = ''''' + @GroupName + '''''
	'')'
	
execute sp_executesql @SQL, N'@GroupPath varchar(1000) output', @GroupPath output

/*
Limitations and Gotchas
========================
There are a number of limitations and gotchas when querying AD through SQL.


-	‘Select *’ in a query against AD does not return all fields as you might expect that it would. 
		Instead, it returns the ADsPath of the object. 
		There is no way to return all fields.
		
-	Wildcard searches can only be done using * character; 
		however, instead of using the keyword ‘like’, the ‘=’ sign is used. 
		Example:  ‘and givenname = 'Jo*' ’  returns  all objects with a first name that start with ‘Jo’
		
-	Multi-valued attributes such as MemberOf can’t be retrieved through this method.

-	The number of records returned is limited by the ‘MaxPageSize’ configuration in AD. 
	The default is 1000 records. 
	You can implement pagination to handle this, or change the value in AD (See Helpful Links section). 
	Do your research before making the change in AD – this could degrade performance if the number is set too high.
	http://support.microsoft.com/default.aspx?scid=kb;en-us;315071&amp;sd=tech%20
	
-	Performing extended matching searches (i.e., recursively listing members of a group) will take a longer time to execute, 
	depending on how many levels of nested groups there are. 
	In my testing, it took almost 20 seconds to return all members of a group that had only 2 levels of nested groups.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>GetUserGroups_Given_UserName</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>GetUserGroups_Given_UserName</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


//--Usage of SP

use IT_DEPT
go

EXEC prj_0014_SP_206_UseTheSP__GetLdapUserGroups_Given_UserName 'glenng'


///////////////--OUTPUT

--LdapGroup
===========
--Administrators
--BOD_Reports
--Construction Div
--Denied RODC Password Replication Group
--Domain Admins
--Everyone-Barriere
--Exchange Organization Administrators
--Exchange Public Folder Administrators
--Exchange Recipient Administrators
--Exchange View-Only Administrators
--g PeopleTrak users
--g_Board_Files
--g_citrix_explorer
--g_ECLIPSE_Admin
--g_SELA_folder
--g_SQL_Level1
--gCitrix PeopleTrak
--HRPhotos
--New Orleans
--NOLA
--PlantDB_Users
--REPORT_test_report
--Websense Barriere Te

///////////////-- 2nd SP (calls the first SP)

use IT_DEPT
go

create PROCEDURE [dbo].[prj_0014_SP_206_UseTheSP__GetLdapUserGroups_Given_UserName]
    (
    @LdapUsername NVARCHAR(max)
    )
AS
BEGIN

		DECLARE @UserGroup table (LdapGroup nvarchar(max))
		INSERT INTO @UserGroup exec [prj_0014_SP_205_GetLdapUserGroups_Given_UserName] @LdapUsername

		SELECT * from @UserGroup

END


///////////////-- First SP:


--prj_0014_SP_205_GetLdapUserGroups_Given_UserName.sql
--from: http://stackoverflow.com/questions/13914698/query-ad-group-membership-recursively-through-sql

use IT_DEPT
go

alter PROCEDURE [dbo].[GetLdapUserGroups_Given_UserName]
    (
    @LdapUsername NVARCHAR(max)
    )
AS
BEGIN
		DECLARE @Query NVARCHAR(max), @Path NVARCHAR(max)

		SET @Query = '
			SELECT @Path = distinguishedName
			FROM OPENQUERY(ADSI, ''
				SELECT distinguishedName 
				FROM ''''LDAP://DC=barriere,DC=COM''''
				WHERE 
					objectClass = ''''user'''' AND
					sAMAccountName = ''''' + @LdapUsername + '''''
			'')
		'
		
		EXEC sp_executesql @Query, N'@Path NVARCHAR(max) OUTPUT', @Path = @Path OUTPUT 

		  SET @Query = '
			SELECT cn AS [LdapGroup]
			FROM OPENQUERY (ADSI, ''&lt;LDAP://barriere.COM&gt;;
			(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:= ' + @Path + '));
			cn, adspath;subtree'')
			ORDER BY cn;
		'

		EXEC sp_executesql @Query
END</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>How-to : Use SQL Server to query Active Directory </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>How-to : Use SQL Server to query Active Directory </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://blog.skufel.net/2012/01/how-to-use-sql-server-to-query-active-directory/

/* 
In this example:
lab-dc-01 – 172.16.90.11 – Domain Controller
lab-sql-01 – 172.16.90.21 – SQL Server 2008 R2

To define directory services as Linked Server follow steps:
===========================================================
1] Logon to lab-sql-01 and start Microsoft SQL Server Management Studio
2] In Object Explorer navigate to Server Objects and right-click on Linked Servers and then click New Linked Server
3] In New Linked Server window populate information on General page and Security page as shown below

General page
------------
	Linked server: ADSI
	Server type: 
		(x) Other data source
	Provider: 
		OLE DB Provider for Microsoft Directory Services
	Product name: 
		Active Directory Services 2.5
	Data source: 
		adsdatasource
	Provider string: 
		ADSDSOObject
Security page
-------------
	For the login not defined in the list above, connections will: 
		(x) Be made using login’s current security context
	{it turns out that this did not work, even though I am Domain Admin}
	{apparently all domain users have read access to the AD by defaul}
	So when I tried this it worked:
		(x) Be made using this security context:
		Remote Login: BCC\SSRS_ServAcct_1
		With Password: {and I gave it the appropriate Password}			
		
Once Linked Server is defined just write queries to read information from Active Directory and you can process all results in Transact-SQL.
*/

SELECT *
  FROM OPENQUERY
  (ADSI
   , 'SELECT displayName, userPrincipalName
         FROM ''LDAP://lab-dc-01/DC=laboratory,DC=ltd''
      WHERE objectClass = ''Person''')

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>List_of_Attributes_available_with_OPENQUERY_of_Linked_Server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>List_of_Attributes_available_with_OPENQUERY_of_Linked_Server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>from: http://www.kouti.com/tables/userattributes.htm

Attr LDAP Name
===============
accountExpires
accountNameHistory
aCSPolicyName
adminCount
adminDescription
adminDisplayName
allowedAttributes
allowedAttributesEffective
allowedChildClasses
allowedChildClassesEffective
altSecurityIdentities
assistant
badPasswordTime
badPwdCount
bridgeheadServerListBL
c
canonicalName
cn
co
codePage
comment
company
controlAccessRights
countryCode
createTimeStamp
dBCSPwd
defaultClassStore
department
description
desktopProfile
destinationIndicator
directReports
displayName
displayNamePrintable
distinguishedName
division
dSASignature
dSCorePropagationData
dynamicLDAPServer
employeeID
extensionName
facsimileTelephoneNumber
flags
fromEntry
frsComputerReferenceBL
fRSMemberReferenceBL
fSMORoleOwner
garbageCollPeriod
generationQualifier
givenName
groupMembershipSAM
groupPriority
groupsToIgnore
homeDirectory
homeDrive
homePhone
homePostalAddress
info
initials
instanceType
internationalISDNNumber
ipPhone
isCriticalSystemObject
isDeleted
isPrivilegeHolder
l
lastKnownParent
lastLogoff
lastLogon
legacyExchangeDN
lmPwdHistory
localeID
lockoutTime
logonCount
logonHours
logonWorkstation
mail
managedObjects
manager
masteredBy
maxStorage
memberOf
mhsORAddress
middleName
mobile
modifyTimeStamp
mS-DS-ConsistencyChildCount
mS-DS-ConsistencyGuid
mS-DS-CreatorSID
mSMQDigests
mSMQDigestsMig
mSMQSignCertificates
mSMQSignCertificatesMig
msNPAllowDialin
msNPCallingStationID
msNPSavedCallingStationID
msRADIUSCallbackNumber
msRADIUSFramedIPAddress
msRADIUSFramedRoute
msRADIUSServiceType
msRASSavedCallbackNumber
msRASSavedFramedIPAddress
msRASSavedFramedRoute
name
netbootSCPBL
networkAddress
nonSecurityMemberBL
ntPwdHistory
nTSecurityDescriptor
o
objectCategory
objectClass
objectGUID
objectSid
objectVersion
operatorCount
otherFacsimileTelephoneNumber
otherHomePhone
otherIpPhone
otherLoginWorkstations
otherMailbox
otherMobile
otherPager
otherTelephone
otherWellKnownObjects
ou
pager
partialAttributeDeletionList
partialAttributeSet
personalTitle
physicalDeliveryOfficeName
possibleInferiors
postalAddress
postalCode
postOfficeBox
preferredDeliveryMethod
preferredOU
primaryGroupID
primaryInternationalISDNNumber
primaryTelexNumber
profilePath
proxiedObjectName
proxyAddresses
pwdLastSet
queryPolicyBL
registeredAddress
replPropertyMetaData
replUpToDateVector
repsFrom
repsTo
revision
rid
sAMAccountName
sAMAccountType
scriptPath
sDRightsEffective
securityIdentifier
seeAlso
serverReferenceBL
servicePrincipalName
showInAddressBook
showInAdvancedViewOnly
sIDHistory
siteObjectBL
sn
st
street
streetAddress
subRefs
subSchemaSubEntry
supplementalCredentials
systemFlags
telephoneNumber
teletexTerminalIdentifier
telexNumber
terminalServer
textEncodedORAddress
thumbnailLogo
thumbnailPhoto
title
tokenGroups
tokenGroupsGlobalAndUniversal
tokenGroupsNoGCAcceptable
unicodePwd
url
userAccountControl
userCert
userCertificate
userParameters
userPassword
userPrincipalName
userSharedFolder
userSharedFolderOther
userSMIMECertificate
userWorkstations
uSNChanged
uSNCreated
uSNDSALastObjRemoved
USNIntersite
uSNLastObjRem
uSNSource
wbemPath
wellKnownObjects
whenChanged
whenCreated
wWWHomePage
x121Address
207
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OpenRowSet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OpenRowSet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>OpenRowset
\\\\\\\\\\
/*
The OpenRowset command requires that SQL Server be configured to allow Ad Hoc Distributed Queries. 
	By default, it uses the credentials of the logged in user, 
	but you can specify a username and password. 
	Note: passwords are sent in clear text, 
	so if the account does not have rights to query AD, 
	it would be better to use OpenQuery.

Syntax:
*/
SELECT Name, displayName, givenname, distinguishedName, SAMAccountName
FROM OPENROWSET('ADSDOObject','adsdatasource',
'SELECT Name, displayName, givenname, distinguishedName, SAMAccountName
	FROM ''LDAP://Domainname.company.com/ou=northamerica,dc=domainname,dc=company,dc=com''
	WHERE SAMAccountName = ''SomeUserName'' ')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Scripts_To_Link_an_ADSI_Server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Scripts_To_Link_an_ADSI_Server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/****** Object:  LinkedServer [ADSI]    Script Date: 07/25/2016 13:06:49 ******/
EXEC master.dbo.sp_addlinkedserver @server = N'ADSI', @srvproduct=N'Active Directory Services 2.5', @provider=N'ADsDSOObject', @datasrc=N'adsdatasource', @provstr=N'ADSDSOObject'
 /* For security reasons the linked server remote logins password is changed with ######## */
EXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'ADSI',@useself=N'False',@locallogin=NULL,@rmtuser=N'BCC\SSRS_ServAcct_1',@rmtpassword='te5t_u5er'

GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'collation compatible', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'data access', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'dist', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'pub', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'rpc', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'rpc out', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'sub', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'connect timeout', @optvalue=N'0'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'collation name', @optvalue=null
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'lazy schema validation', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'query timeout', @optvalue=N'0'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'use remote collation', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'ADSI', @optname=N'remote proc transaction promotion', @optvalue=N'true'
GO

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASP.NET</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>LoginFailedForUser_xxxxxx\SHAREPOINT01$</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASP.NET</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>LoginFailedForUser_xxxxxx\SHAREPOINT01$</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

it should use this string in Web.config:

&lt;add name="DB5_FORMs_ConnectionString" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB5_FORMs;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
      providerName="System.Data.SqlClient" /&gt;
      
But by default it uses this string:

&lt;add name="DB5_FORMsConnectionString" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB5_FORMs;Integrated Security=True"
  providerName="System.Data.SqlClient" /&gt;      </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASP.NET</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Update_Delete_conflict_for_property_OverwriteChanges</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASP.NET</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Update_Delete_conflict_for_property_OverwriteChanges</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


on DELETE:
-----------
You have specified that your delete command compares all values on SqlDataSource 'dsStudents', 
but the dictionary passed in for values is empty. Pass in a valid dictionary for delete or change your mode to OverwriteChanges. 


on UPDATE:
-------------
ERROR: You have specified that your update command compares all values on SqlDataSource 'dsStudents', 
but the dictionary passed in for oldValues is empty. Pass in a valid dictionary for update or change your mode to OverwriteChanges. 



One Person observed (http://www.codingforums.com/asp-net/123511-udpate-delete-queries-causing-gridview-control-throw-odd-exceptions.html)
Ultimately, it had to do with which controls used Eval and which used Bind...Apparently, 
controls that display primary key values don't need to use (and shouldn't use) 
Bind (because primary key values shouldn;t change during these DB operations), 
whereas ItemTemplate controls need to use Bind for the Delete row function to work, 
and EditItemTemplate controls need to use Bind for the Update row function to work....That sound right to you?


My solution was to:

1] Leave the ITEM as Eval, 
	and the EDIT and DELETE as BIND
2] Reduce the list of Delete Parms in the SQLDataSource to just the PK that is used to delete the record

3] For example when deleting, check to see if the control is still there before processing it in the FormView_Databound event

    if (fvX.fn_bTheControlExists("lbl_EDIT_a_DateTime_Updated"))
        {
        }
	

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_aspnetdb_Using_Membership_Class</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_CreateUser_Markup_and_CodeBehind</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_aspnetdb_Using_Membership_Class</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_CreateUser_Markup_and_CodeBehind</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
PROBLEM: can't control which application the user is created for.

========= Markup ===============================

&lt;%@ Page Language="vb" AutoEventWireup="false" CodeBehind="JUNK_CreateUser.aspx.vb" Inherits="CCWNC411_Security.JUNK_CreateUser" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
&lt;head&gt;
&lt;title&gt;Create User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;form id="form1" runat="server"&gt;
  &lt;h3&gt;Create New User&lt;/h3&gt;

  &lt;asp:Label id="Msg" ForeColor="maroon" runat="server" /&gt;&lt;br /&gt;

  &lt;table cellpadding="3" border="0"&gt;
    &lt;tr&gt;
      &lt;td&gt;Username:&lt;/td&gt;
      &lt;td&gt;&lt;asp:Textbox id="UsernameTextbox" runat="server" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;asp:RequiredFieldValidator id="UsernameRequiredValidator" runat="server"
                                      ControlToValidate="UserNameTextbox" ForeColor="red"
                                      Display="Static" ErrorMessage="Required" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Password:&lt;/td&gt;
      &lt;td&gt;&lt;asp:Textbox id="PasswordTextbox" runat="server" TextMode="Password" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;asp:RequiredFieldValidator id="PasswordRequiredValidator" runat="server"
                                      ControlToValidate="PasswordTextbox" ForeColor="red"
                                      Display="Static" ErrorMessage="Required" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Confirm Password:&lt;/td&gt;
      &lt;td&gt;&lt;asp:Textbox id="PasswordConfirmTextbox" runat="server" TextMode="Password" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;asp:RequiredFieldValidator id="PasswordConfirmRequiredValidator" runat="server"
                                      ControlToValidate="PasswordConfirmTextbox" ForeColor="red"
                                      Display="Static" ErrorMessage="Required" /&gt;
          &lt;asp:CompareValidator id="PasswordConfirmCompareValidator" runat="server"
                                      ControlToValidate="PasswordConfirmTextbox" ForeColor="red"
                                      Display="Static" ControlToCompare="PasswordTextBox"
                                      ErrorMessage="Confirm password must match password." /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;


&lt;% If Membership.RequiresQuestionAndAnswer Then %&gt;

    &lt;tr&gt;
      &lt;td&gt;Password Question:&lt;/td&gt;
      &lt;td&gt;&lt;asp:Textbox id="PasswordQuestionTextbox" runat="server" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;asp:RequiredFieldValidator id="PasswordQuestionRequiredValidator" runat="server"
                                      ControlToValidate="PasswordQuestionTextbox" ForeColor="red"
                                      Display="Static" ErrorMessage="Required" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Password Answer:&lt;/td&gt;
      &lt;td&gt;&lt;asp:Textbox id="PasswordAnswerTextbox" runat="server" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;asp:RequiredFieldValidator id="PasswordAnswerRequiredValidator" runat="server"
                                      ControlToValidate="PasswordAnswerTextbox" ForeColor="red"
                                      Display="Static" ErrorMessage="Required" /&gt;&lt;/td&gt;
    &lt;/tr&gt;

&lt;% End If %&gt;


    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;asp:Button id="CreateUserButton" Text="Create User" OnClick="CreateUser_OnClick" runat="server" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;


===============Code-Behind============================


Imports System.Web.Security

Public Class JUNK_CreateUser
    Inherits System.Web.UI.Page

    Public Sub CreateUser_OnClick(sender As Object, args As EventArgs) Handles CreateUserButton.Click
        Try
            ' Create new user.

            Dim newUser As MembershipUser = Membership.CreateUser(UsernameTextbox.Text, PasswordTextbox.Text)


            ' If user created successfully, set password question and answer (if applicable) and 
            ' redirect to login page. Otherwise Return an error message.

            If Membership.RequiresQuestionAndAnswer Then

                newUser.ChangePasswordQuestionAndAnswer(PasswordTextbox.Text, _
                                                        PasswordQuestionTextbox.Text, _
                                                        PasswordAnswerTextbox.Text)
            End If

            Response.Redirect("~/Account/login.aspx")
        Catch e As MembershipCreateUserException
            Msg.Text = GetErrorMessage(e.StatusCode)
        Catch e As HttpException
            Msg.Text = e.Message
        End Try
    End Sub

    Public Function GetErrorMessage(status As MembershipCreateStatus) As String

        Select Case status
            Case MembershipCreateStatus.DuplicateUserName
                Return "Username already exists. Please enter a different user name."

            Case MembershipCreateStatus.DuplicateEmail
                Return "A username for that e-mail address already exists. Please enter a different e-mail address."

            Case MembershipCreateStatus.InvalidPassword
                Return "The password provided is invalid. Please enter a valid password value."

            Case MembershipCreateStatus.InvalidEmail
                Return "The e-mail address provided is invalid. Please check the value and try again."

            Case MembershipCreateStatus.InvalidAnswer
                Return "The password retrieval answer provided is invalid. Please check the value and try again."

            Case MembershipCreateStatus.InvalidQuestion
                Return "The password retrieval question provided is invalid. Please check the value and try again."

            Case MembershipCreateStatus.InvalidUserName
                Return "The user name provided is invalid. Please check the value and try again."

            Case MembershipCreateStatus.ProviderError
                Return "The authentication provider Returned an error. Please verify your entry and try again. If the problem persists, please contact your system administrator."

            Case MembershipCreateStatus.UserRejected
                Return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists, please contact your system administrator."

            Case Else
                Return "An unknown error occurred. Please verify your entry and try again. If the problem persists, please contact your system administrator."
        End Select
    End Function

End Class</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_aspnetdb_Using_Membership_Class</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_SQL_from_Profiler</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_aspnetdb_Using_Membership_Class</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_SQL_from_Profiler</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>I just provided the UserName and the password


declare @p12 uniqueidentifier
set @p12='F866F0E0-450F-4FEC-BEB5-F13B61D00EC5'
exec dbo.aspnet_Membership_CreateUser @ApplicationName=N'CCWNC411_Security',@UserName=N'JUNK_CreateUser_2',@Password=N'abcde_12345',@PasswordSalt=N'nbWT37JDBvuZ6f6ES2vvxw==',@Email=NULL,@PasswordQuestion=NULL,@PasswordAnswer=NULL,@IsApproved=1,@UniqueEmail=0,@PasswordFormat=0,@CurrentTimeUtc='2013-12-24 17:46:03',@UserId=@p12 output
select @p12 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_aspnetdb</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_UseClassFor_profile_section</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_aspnetdb</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_UseClassFor_profile_section</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices"
         connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
         providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;compilation debug="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices"
             enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false"
             maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10"
             applicationName="/" /&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;
&lt;!-- Here is where it has  a fully qualified reference to a Class --&gt;
    &lt;profile inherits="PluralSightBookWebsite.Code.MyProfile"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add 
            name="AspNetSqlProfileProvider" 
            type="System.Web.Profile.SqlProfileProvider" 
            connectionStringName="ApplicationServices" 
            applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;

    &lt;roleManager enabled="false"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" connectionStringName="ApplicationServices" applicationName="/" /&gt;
        &lt;add name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider" applicationName="/" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;

  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_aspnetdb</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>web.config_IntegratedSecurity_and_SQLLogin</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_aspnetdb</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>web.config_IntegratedSecurity_and_SQLLogin</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;

  &lt;appSettings&gt;
    &lt;add key="CCWNC411_Security" value="CCWNC411_Security" /&gt;
  &lt;/appSettings&gt;

    &lt;connectionStrings&gt;

        &lt;add name="SHAREPOINT01_aspnetdb"
           connectionString="Server=SHAREPOINT01; Database=aspnetdb; User Id=Web_ASP_NET_user; password= abcde12345"
           providerName="System.Data.SqlClient" /&gt;      
        &lt;add name="SHAREPOINT01_aspnetdb_OLD" connectionString="Data Source=SHAREPOINT01;Initial Catalog=aspnetdb;Integrated Security=True"
          providerName="System.Data.SqlClient" /&gt;
        &lt;add name="DB2_CRMConnectionString1" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Integrated Security=True"
          providerName="System.Data.SqlClient" /&gt;
        &lt;add name="DB2_CRMConnectionString2" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
          providerName="System.Data.SqlClient" /&gt;
    &lt;/connectionStrings&gt;

  &lt;system.web&gt;

    &lt;authorization&gt;

        &lt;allow roles="Admin"/&gt;
        &lt;deny users="*"/&gt; 

    &lt;/authorization&gt;

    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership defaultProvider="SqlProvider"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="SqlProvider"
             type="System.Web.Security.SqlMembershipProvider"
             connectionStringName="SHAREPOINT01_aspnetdb"
             applicationName="CCWNC411_Security"
             enablePasswordRetrieval="false"
             enablePasswordReset="false"
             requiresQuestionAndAnswer="false"
             requiresUniqueEmail="false"
             maxInvalidPasswordAttempts="999"
             minRequiredPasswordLength="6"
             minRequiredNonalphanumericCharacters="0"
             passwordFormat="Clear"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;

    &lt;roleManager enabled="true"&gt;
      &lt;providers&gt;
        &lt;clear /&gt;
        &lt;add connectionStringName="SHAREPOINT01_aspnetdb"
             applicationName="CCWNC411_Security"
             name="AspNetSqlRoleProvider"
             type="System.Web.Security.SqlRoleProvider" /&gt;
        &lt;add applicationName="DataGuardians"
             name="AspNetWindowsTokenRoleProvider"
             type="System.Web.Security.WindowsTokenRoleProvider" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;

      &lt;customErrors mode="Off"/&gt;
      
  &lt;/system.web&gt;

  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_aspnetdb</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>web.config_TemplateFor_SQL_basedDatabase</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_aspnetdb</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>web.config_TemplateFor_SQL_basedDatabase</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>NOTE: 
Change the following PARMS:
		connectionStringName
		applicationName
and check the: 
	&lt;connectionStrings&gt;
	&lt;appSettings&gt;
|||||||||||||||||||||||||||||||||||||||||||||||		
		

&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;

  &lt;appSettings&gt;
    &lt;add key="CCWNC411_Security" value="CCWNC411_Security" /&gt;
  &lt;/appSettings&gt;

  &lt;connectionStrings&gt;
    &lt;add name="SHAREPOINT01_aspnetdb" connectionString="Data Source=.\DEV;Initial Catalog=aspnetdb;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;

    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership defaultProvider="SqlProvider"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="SqlProvider"
             type="System.Web.Security.SqlMembershipProvider"
             connectionStringName="SHAREPOINT01_aspnetdb"
             applicationName="CCWNC411_Security"
             enablePasswordRetrieval="false"
             enablePasswordReset="false"
             requiresQuestionAndAnswer="false"
             requiresUniqueEmail="false"
             maxInvalidPasswordAttempts="999"
             minRequiredPasswordLength="6"
             minRequiredNonalphanumericCharacters="0"
             passwordFormat="Clear"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;

    &lt;roleManager enabled="true"&gt;
      &lt;providers&gt;
        &lt;clear /&gt;
        &lt;add connectionStringName="SHAREPOINT01_aspnetdb"
             applicationName="CCWNC411_Security"
             name="AspNetSqlRoleProvider"
             type="System.Web.Security.SqlRoleProvider" /&gt;
        &lt;add applicationName="DataGuardians"
             name="AspNetWindowsTokenRoleProvider"
             type="System.Web.Security.WindowsTokenRoleProvider" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;


  &lt;/system.web&gt;

  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Bind_Eval</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>readMe_ASPNET_Bind_Eval</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Bind_Eval</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>readMe_ASPNET_Bind_Eval</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>readMe_ASPNET_Bind_Eval

#EVAL vs #BIND
===============
For a read-only (one way databinding) databound control, 
	they are the same

For 2 way databinding 
	(using a datasource in which you want to update, insert, etc with declarative databinding), 
	you'll need to use #Bind.

Simple as that. 
	Eval is read only, 
	Bind allows for data to go two ways. 
	
the Bind keyword works like Eval to display data and can retrieve the value you've entered when updating or inserting a record.
In addition, 
	Bind is very useful in TemplateFields used in the GridView and DetailsView. 
	Bind stores the value of the bound control property into a collection of values 
		that the FormView control automatically retrieves and uses to compose the parameter list of the insert or edit command. 
	The argument passed to Bind must match the name of a field in the data container.
	
=========================================================================================	
For example, the textbox in the code snippet provides the value for the notes field. 		

&lt;asp:TextBox Runat="server" ID="TheNotes"
     Text='&lt;%# Bind("notes") %&gt;' /&gt;

=========================================================================================	
Eval() is a shortcut for Container.DataItem().
Since Eval() uses Reflection, it causes overhead. From a optimization standpoint, it is better to use Container.DataItem()

=========================================================================================
I was working on databinding in an asp.net 2.0 app and found the following difference which i felt i must share with you.
    The following expression does not work:
    
     '&lt;%# Bind("Step")  &amp; " / " &amp; Bind("Step") %&gt;' /&gt;
     
     
    it displays only "10" in the gridview column while the expected result should be "10 / 10"
    
    I used eval for the same:
    
     '&lt;%# Eval("Step")  &amp; " / " &amp; Eval("Step") %&gt;' /&gt;
     
     
    And i got the desired result - "10 / 10" was displayed in the gridview column
    I assume we can't use multiple expression operations like concatenation doesnt work with bind 
    	(a reason could be Bind allows for data to go two ways 
    	and hence expression might create problem for data to go back to datasource 

=========================================================================================

For read-only controls they are the same. 
For 2 way databinding, using a datasource
	 in which you want to update, insert, etc with declarative databinding,
	 you'll need to use Bind.

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_DataSource_PARAMETERS</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>QueryStringParameter_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_DataSource_PARAMETERS</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>QueryStringParameter_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
    	the 'QueryStringParameter' tells where the value for that parameter will come from
    							   It means that this will come in as part of the URL from the page.
    							   The 'name' attribute must match the field name in the SQL statement.
    							   The 'QueryStringField' is the name that will be passed in as part of the URL.
    							   		That name (i.e. "au_id") will be created later in this exercise.
    							   The 'Type' is the implied data type of the attribute.
    							   
            &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="au_id"        
                    QueryStringField="au_id" Type="Int32" /&gt;
            &lt;/SelectParameters&gt;
            
            
......................................

	       &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="L004_PK"	&lt;========= This matches the parameter in the SQL Statement
                    QueryStringField="L004_PK"            	&lt;========= This matches the parameter in the URL
                    
                    Type="Int32" /&gt;							&lt;========={note for uniqueidentifier, 
                    													remove the "Type" parameter, 
                    													or type="empty"
                    													or maybe use 'object'}

            &lt;/SelectParameters&gt;
            </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_DataSource_PARAMETERS</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>QueryStringParameter_SELECT</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_DataSource_PARAMETERS</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>QueryStringParameter_SELECT</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>        &lt;asp:SqlDataSource ID="SqlDataSource_GridView" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb %&gt;" 
             ProviderName="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb.ProviderName %&gt;" 
            SelectCommand="SELECT 
		                            aspnet_Users.UserName, 
		                            aspnet_Applications.ApplicationName, 
		                            aspnet_Membership.IsApproved, 
		                            aspnet_Membership.IsLockedOut, 
		                            aspnet_Membership.Password, 
		                            aspnet_Membership.PasswordFormat, 
		                            aspnet_Membership.PasswordSalt, 
		                            aspnet_Membership.CreateDate, 
		                            aspnet_Membership.LastLoginDate, 
		                            aspnet_Membership.FailedPasswordAttemptCount, 
		                            aspnet_Users.LastActivityDate, 
		                            aspnet_Users.UserId, 
		                            aspnet_Applications.ApplicationId
                            FROM  
	                            (
		                            aspnet_Membership 
		                            INNER JOIN
		                            aspnet_Users 
		                            ON aspnet_Membership.UserId = aspnet_Users.UserId 
                                )
                                INNER JOIN
                                aspnet_Applications 
                                ON 
		                            (
			                            (aspnet_Membership.ApplicationId = aspnet_Applications.ApplicationId) 
			                            AND 
                                        (aspnet_Users.ApplicationId = aspnet_Applications.ApplicationId)
                                    )
                                    
                             WHERE aspnet_Users.ApplicationId = @ApplicationId      
                                    
                                    
                                    " &gt;

             &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="ApplicationId"
                    QueryStringField="ApplicationId" 
                     /&gt;

            &lt;/SelectParameters&gt;
        &lt;/asp:SqlDataSource&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_EntityFramework</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Simple_DropDown_GridView_AWModel.Designer.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_EntityFramework</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Simple_DropDown_GridView_AWModel.Designer.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace EntityDataSourceDemo
{
    #region Contexts
    
    /// &lt;summary&gt;
    /// No Metadata Documentation available.
    /// &lt;/summary&gt;
    public partial class AdventureWorksLT2008R2Entities : ObjectContext
    {
        #region Constructors
    
        /// &lt;summary&gt;
        /// Initializes a new AdventureWorksLT2008R2Entities object using the connection string found in the 'AdventureWorksLT2008R2Entities' section of the application configuration file.
        /// &lt;/summary&gt;
        public AdventureWorksLT2008R2Entities() : base("name=AdventureWorksLT2008R2Entities", "AdventureWorksLT2008R2Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// &lt;summary&gt;
        /// Initialize a new AdventureWorksLT2008R2Entities object.
        /// &lt;/summary&gt;
        public AdventureWorksLT2008R2Entities(string connectionString) : base(connectionString, "AdventureWorksLT2008R2Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// &lt;summary&gt;
        /// Initialize a new AdventureWorksLT2008R2Entities object.
        /// &lt;/summary&gt;
        public AdventureWorksLT2008R2Entities(EntityConnection connection) : base(connection, "AdventureWorksLT2008R2Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        public ObjectSet&lt;Customer&gt; Customers
        {
            get
            {
                if ((_Customers == null))
                {
                    _Customers = base.CreateObjectSet&lt;Customer&gt;("Customers");
                }
                return _Customers;
            }
        }
        private ObjectSet&lt;Customer&gt; _Customers;

        #endregion

        #region AddTo Methods
    
        /// &lt;summary&gt;
        /// Deprecated Method for adding a new object to the Customers EntitySet. Consider using the .Add method of the associated ObjectSet&amp;lt;T&amp;gt; property instead.
        /// &lt;/summary&gt;
        public void AddToCustomers(Customer customer)
        {
            base.AddObject("Customers", customer);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// &lt;summary&gt;
    /// No Metadata Documentation available.
    /// &lt;/summary&gt;
    [EdmEntityTypeAttribute(NamespaceName="AWDataModel", Name="Customer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Customer : EntityObject
    {
        #region Factory Method
    
        /// &lt;summary&gt;
        /// Create a new Customer object.
        /// &lt;/summary&gt;
        /// &lt;param name="customerID"&gt;Initial value of the CustomerID property.&lt;/param&gt;
        /// &lt;param name="nameStyle"&gt;Initial value of the NameStyle property.&lt;/param&gt;
        /// &lt;param name="firstName"&gt;Initial value of the FirstName property.&lt;/param&gt;
        /// &lt;param name="lastName"&gt;Initial value of the LastName property.&lt;/param&gt;
        /// &lt;param name="passwordHash"&gt;Initial value of the PasswordHash property.&lt;/param&gt;
        /// &lt;param name="passwordSalt"&gt;Initial value of the PasswordSalt property.&lt;/param&gt;
        /// &lt;param name="rowguid"&gt;Initial value of the rowguid property.&lt;/param&gt;
        /// &lt;param name="modifiedDate"&gt;Initial value of the ModifiedDate property.&lt;/param&gt;
        public static Customer CreateCustomer(global::System.Int32 customerID, global::System.Boolean nameStyle, global::System.String firstName, global::System.String lastName, global::System.String passwordHash, global::System.String passwordSalt, global::System.Guid rowguid, global::System.DateTime modifiedDate)
        {
            Customer customer = new Customer();
            customer.CustomerID = customerID;
            customer.NameStyle = nameStyle;
            customer.FirstName = firstName;
            customer.LastName = lastName;
            customer.PasswordHash = passwordHash;
            customer.PasswordSalt = passwordSalt;
            customer.rowguid = rowguid;
            customer.ModifiedDate = modifiedDate;
            return customer;
        }

        #endregion

        #region Primitive Properties
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CustomerID
        {
            get
            {
                return _CustomerID;
            }
            set
            {
                if (_CustomerID != value)
                {
                    OnCustomerIDChanging(value);
                    ReportPropertyChanging("CustomerID");
                    _CustomerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CustomerID");
                    OnCustomerIDChanged();
                }
            }
        }
        private global::System.Int32 _CustomerID;
        partial void OnCustomerIDChanging(global::System.Int32 value);
        partial void OnCustomerIDChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean NameStyle
        {
            get
            {
                return _NameStyle;
            }
            set
            {
                OnNameStyleChanging(value);
                ReportPropertyChanging("NameStyle");
                _NameStyle = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NameStyle");
                OnNameStyleChanged();
            }
        }
        private global::System.Boolean _NameStyle;
        partial void OnNameStyleChanging(global::System.Boolean value);
        partial void OnNameStyleChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Suffix
        {
            get
            {
                return _Suffix;
            }
            set
            {
                OnSuffixChanging(value);
                ReportPropertyChanging("Suffix");
                _Suffix = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Suffix");
                OnSuffixChanged();
            }
        }
        private global::System.String _Suffix;
        partial void OnSuffixChanging(global::System.String value);
        partial void OnSuffixChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyName
        {
            get
            {
                return _CompanyName;
            }
            set
            {
                OnCompanyNameChanging(value);
                ReportPropertyChanging("CompanyName");
                _CompanyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyName");
                OnCompanyNameChanged();
            }
        }
        private global::System.String _CompanyName;
        partial void OnCompanyNameChanging(global::System.String value);
        partial void OnCompanyNameChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SalesPerson
        {
            get
            {
                return _SalesPerson;
            }
            set
            {
                OnSalesPersonChanging(value);
                ReportPropertyChanging("SalesPerson");
                _SalesPerson = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SalesPerson");
                OnSalesPersonChanged();
            }
        }
        private global::System.String _SalesPerson;
        partial void OnSalesPersonChanging(global::System.String value);
        partial void OnSalesPersonChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EmailAddress
        {
            get
            {
                return _EmailAddress;
            }
            set
            {
                OnEmailAddressChanging(value);
                ReportPropertyChanging("EmailAddress");
                _EmailAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EmailAddress");
                OnEmailAddressChanged();
            }
        }
        private global::System.String _EmailAddress;
        partial void OnEmailAddressChanging(global::System.String value);
        partial void OnEmailAddressChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PasswordHash
        {
            get
            {
                return _PasswordHash;
            }
            set
            {
                OnPasswordHashChanging(value);
                ReportPropertyChanging("PasswordHash");
                _PasswordHash = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PasswordHash");
                OnPasswordHashChanged();
            }
        }
        private global::System.String _PasswordHash;
        partial void OnPasswordHashChanging(global::System.String value);
        partial void OnPasswordHashChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PasswordSalt
        {
            get
            {
                return _PasswordSalt;
            }
            set
            {
                OnPasswordSaltChanging(value);
                ReportPropertyChanging("PasswordSalt");
                _PasswordSalt = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PasswordSalt");
                OnPasswordSaltChanged();
            }
        }
        private global::System.String _PasswordSalt;
        partial void OnPasswordSaltChanging(global::System.String value);
        partial void OnPasswordSaltChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid rowguid
        {
            get
            {
                return _rowguid;
            }
            set
            {
                OnrowguidChanging(value);
                ReportPropertyChanging("rowguid");
                _rowguid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("rowguid");
                OnrowguidChanged();
            }
        }
        private global::System.Guid _rowguid;
        partial void OnrowguidChanging(global::System.Guid value);
        partial void OnrowguidChanged();
    
        /// &lt;summary&gt;
        /// No Metadata Documentation available.
        /// &lt;/summary&gt;
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ModifiedDate
        {
            get
            {
                return _ModifiedDate;
            }
            set
            {
                OnModifiedDateChanging(value);
                ReportPropertyChanging("ModifiedDate");
                _ModifiedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedDate");
                OnModifiedDateChanged();
            }
        }
        private global::System.DateTime _ModifiedDate;
        partial void OnModifiedDateChanging(global::System.DateTime value);
        partial void OnModifiedDateChanged();

        #endregion

    
    }

    #endregion

    
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_EntityFramework</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Simple_DropDown_GridView_AWModel.edmx</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_EntityFramework</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Simple_DropDown_GridView_AWModel.edmx</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;edmx:Edmx Version="2.0" xmlns:edmx="http://schemas.microsoft.com/ado/2008/10/edmx"&gt;
  &lt;!-- EF Runtime content --&gt;
  &lt;edmx:Runtime&gt;
    &lt;!-- SSDL content --&gt;
    &lt;edmx:StorageModels&gt;
      &lt;Schema Namespace="AWDataModel.Store" Alias="Self" Provider="System.Data.SqlClient" ProviderManifestToken="2008" xmlns:store="http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator" xmlns="http://schemas.microsoft.com/ado/2009/02/edm/ssdl"&gt;
        &lt;EntityContainer Name="AWDataModelStoreContainer"&gt;
          &lt;EntitySet Name="Customer" EntityType="AWDataModel.Store.Customer" store:Type="Tables" Schema="SalesLT" /&gt;
        &lt;/EntityContainer&gt;
        &lt;EntityType Name="Customer"&gt;
          &lt;Key&gt;
            &lt;PropertyRef Name="CustomerID" /&gt;
          &lt;/Key&gt;
          &lt;Property Name="CustomerID" Type="int" Nullable="false" StoreGeneratedPattern="Identity" /&gt;
          &lt;Property Name="NameStyle" Type="bit" Nullable="false" /&gt;
          &lt;Property Name="Title" Type="nvarchar" MaxLength="8" /&gt;
          &lt;Property Name="FirstName" Type="nvarchar" Nullable="false" MaxLength="50" /&gt;
          &lt;Property Name="MiddleName" Type="nvarchar" MaxLength="50" /&gt;
          &lt;Property Name="LastName" Type="nvarchar" Nullable="false" MaxLength="50" /&gt;
          &lt;Property Name="Suffix" Type="nvarchar" MaxLength="10" /&gt;
          &lt;Property Name="CompanyName" Type="nvarchar" MaxLength="128" /&gt;
          &lt;Property Name="SalesPerson" Type="nvarchar" MaxLength="256" /&gt;
          &lt;Property Name="EmailAddress" Type="nvarchar" MaxLength="50" /&gt;
          &lt;Property Name="Phone" Type="nvarchar" MaxLength="25" /&gt;
          &lt;Property Name="PasswordHash" Type="varchar" Nullable="false" MaxLength="128" /&gt;
          &lt;Property Name="PasswordSalt" Type="varchar" Nullable="false" MaxLength="10" /&gt;
          &lt;Property Name="rowguid" Type="uniqueidentifier" Nullable="false" /&gt;
          &lt;Property Name="ModifiedDate" Type="datetime" Nullable="false" /&gt;
        &lt;/EntityType&gt;
      &lt;/Schema&gt;
    &lt;/edmx:StorageModels&gt;
    &lt;!-- CSDL content --&gt;
    &lt;edmx:ConceptualModels&gt;
      &lt;Schema Namespace="AWDataModel" Alias="Self" xmlns:annotation="http://schemas.microsoft.com/ado/2009/02/edm/annotation" xmlns="http://schemas.microsoft.com/ado/2008/09/edm"&gt;
        &lt;EntityContainer Name="AdventureWorksLT2008R2Entities" annotation:LazyLoadingEnabled="true"&gt;
          &lt;EntitySet Name="Customers" EntityType="AWDataModel.Customer" /&gt;
        &lt;/EntityContainer&gt;
        &lt;EntityType Name="Customer"&gt;
          &lt;Key&gt;
            &lt;PropertyRef Name="CustomerID" /&gt;
          &lt;/Key&gt;
          &lt;Property Name="CustomerID" Type="Int32" Nullable="false" annotation:StoreGeneratedPattern="Identity" /&gt;
          &lt;Property Name="NameStyle" Type="Boolean" Nullable="false" /&gt;
          &lt;Property Name="Title" Type="String" MaxLength="8" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="FirstName" Type="String" Nullable="false" MaxLength="50" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="MiddleName" Type="String" MaxLength="50" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="LastName" Type="String" Nullable="false" MaxLength="50" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="Suffix" Type="String" MaxLength="10" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="CompanyName" Type="String" MaxLength="128" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="SalesPerson" Type="String" MaxLength="256" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="EmailAddress" Type="String" MaxLength="50" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="Phone" Type="String" MaxLength="25" Unicode="true" FixedLength="false" /&gt;
          &lt;Property Name="PasswordHash" Type="String" Nullable="false" MaxLength="128" Unicode="false" FixedLength="false" /&gt;
          &lt;Property Name="PasswordSalt" Type="String" Nullable="false" MaxLength="10" Unicode="false" FixedLength="false" /&gt;
          &lt;Property Name="rowguid" Type="Guid" Nullable="false" /&gt;
          &lt;Property Name="ModifiedDate" Type="DateTime" Nullable="false" /&gt;
        &lt;/EntityType&gt;
      &lt;/Schema&gt;
    &lt;/edmx:ConceptualModels&gt;
    &lt;!-- C-S mapping content --&gt;
    &lt;edmx:Mappings&gt;
      &lt;Mapping Space="C-S" xmlns="http://schemas.microsoft.com/ado/2008/09/mapping/cs"&gt;
        &lt;EntityContainerMapping StorageEntityContainer="AWDataModelStoreContainer" CdmEntityContainer="AdventureWorksLT2008R2Entities"&gt;
          &lt;EntitySetMapping Name="Customers"&gt;
            &lt;EntityTypeMapping TypeName="AWDataModel.Customer"&gt;
              &lt;MappingFragment StoreEntitySet="Customer"&gt;
                &lt;ScalarProperty Name="CustomerID" ColumnName="CustomerID" /&gt;
                &lt;ScalarProperty Name="NameStyle" ColumnName="NameStyle" /&gt;
                &lt;ScalarProperty Name="Title" ColumnName="Title" /&gt;
                &lt;ScalarProperty Name="FirstName" ColumnName="FirstName" /&gt;
                &lt;ScalarProperty Name="MiddleName" ColumnName="MiddleName" /&gt;
                &lt;ScalarProperty Name="LastName" ColumnName="LastName" /&gt;
                &lt;ScalarProperty Name="Suffix" ColumnName="Suffix" /&gt;
                &lt;ScalarProperty Name="CompanyName" ColumnName="CompanyName" /&gt;
                &lt;ScalarProperty Name="SalesPerson" ColumnName="SalesPerson" /&gt;
                &lt;ScalarProperty Name="EmailAddress" ColumnName="EmailAddress" /&gt;
                &lt;ScalarProperty Name="Phone" ColumnName="Phone" /&gt;
                &lt;ScalarProperty Name="PasswordHash" ColumnName="PasswordHash" /&gt;
                &lt;ScalarProperty Name="PasswordSalt" ColumnName="PasswordSalt" /&gt;
                &lt;ScalarProperty Name="rowguid" ColumnName="rowguid" /&gt;
                &lt;ScalarProperty Name="ModifiedDate" ColumnName="ModifiedDate" /&gt;
              &lt;/MappingFragment&gt;
            &lt;/EntityTypeMapping&gt;
          &lt;/EntitySetMapping&gt;
        &lt;/EntityContainerMapping&gt;
      &lt;/Mapping&gt;
    &lt;/edmx:Mappings&gt;
  &lt;/edmx:Runtime&gt;
  &lt;!-- EF Designer content (DO NOT EDIT MANUALLY BELOW HERE) --&gt;
  &lt;Designer xmlns="http://schemas.microsoft.com/ado/2008/10/edmx"&gt;
    &lt;Connection&gt;
      &lt;DesignerInfoPropertySet&gt;
        &lt;DesignerProperty Name="MetadataArtifactProcessing" Value="EmbedInOutputAssembly" /&gt;
      &lt;/DesignerInfoPropertySet&gt;
    &lt;/Connection&gt;
    &lt;Options&gt;
      &lt;DesignerInfoPropertySet&gt;
        &lt;DesignerProperty Name="ValidateOnBuild" Value="true" /&gt;
        &lt;DesignerProperty Name="EnablePluralization" Value="True" /&gt;
        &lt;DesignerProperty Name="IncludeForeignKeysInModel" Value="True" /&gt;
      &lt;/DesignerInfoPropertySet&gt;
    &lt;/Options&gt;
    &lt;!-- Diagram content (shape and connector positions) --&gt;
    &lt;Diagrams&gt;
      &lt;Diagram Name="AWModel"&gt;
        &lt;EntityTypeShape EntityType="AWDataModel.Customer" Width="1.5" PointX="0.75" PointY="0.75" Height="3.4453905713558193" IsExpanded="true" /&gt;
      &lt;/Diagram&gt;
    &lt;/Diagrams&gt;
  &lt;/Designer&gt;
&lt;/edmx:Edmx&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_EntityFramework</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Simple_DropDown_GridView_MarkUp</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_EntityFramework</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Simple_DropDown_GridView_MarkUp</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="EntityDataSourceDemo.Default" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head runat="server"&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
    
        &lt;!-- add in the attribute: AutoPostBack="True" --&gt;
        Select a Sales Person:&lt;asp:DropDownList 
            ID="DropDownList1" 
            runat="server" 
            DataSourceID="SalesPersonEDS" 
            DataTextField="SalesPerson" 
            DataValueField="SalesPerson"
            AutoPostBack="True"&gt;
        &lt;/asp:DropDownList&gt;

        &lt;!-- By default the 'Select' statement does not have the "DISTINCT" key word, this was manually added --&gt;

        &lt;asp:EntityDataSource 
            ID="SalesPersonEDS" 
            runat="server" 
            ConnectionString="name=AdventureWorksLT2008R2Entities" 
            DefaultContainerName="AdventureWorksLT2008R2Entities" 
            EnableFlattening="False" 
            EntitySetName="Customers" 
            Select="DISTINCT it.[SalesPerson]"&gt;
        &lt;/asp:EntityDataSource&gt;
    
        &lt;br /&gt;
        &lt;br /&gt;
        Customers:&lt;br /&gt;
        &lt;br /&gt;
        &lt;asp:GridView 
            ID="GridView1" 
            runat="server" 
            BackColor="White" 
            BorderColor="#CCCCCC" 
            BorderStyle="None" 
            BorderWidth="1px" 
            CellPadding="3" 
            AllowPaging="True" 
            AllowSorting="True" 
            AutoGenerateColumns="False" 
            DataKeyNames="CustomerID" 
            DataSourceID="CustomersEDS"&gt;
            &lt;Columns&gt;
                &lt;asp:CommandField ShowDeleteButton="True" ShowEditButton="True" /&gt;

                &lt;asp:BoundField DataField="CustomerID" HeaderText="CustomerID" ReadOnly="True" 
                    SortExpression="CustomerID" /&gt;
                &lt;asp:CheckBoxField DataField="NameStyle" HeaderText="NameStyle" 
                    SortExpression="NameStyle" /&gt;
                &lt;asp:BoundField DataField="Title" HeaderText="Title" SortExpression="Title" /&gt;
                &lt;asp:BoundField DataField="FirstName" HeaderText="FirstName" 
                    SortExpression="FirstName" /&gt;
                &lt;asp:BoundField DataField="MiddleName" HeaderText="MiddleName" 
                    SortExpression="MiddleName" /&gt;
                &lt;asp:BoundField DataField="LastName" HeaderText="LastName" 
                    SortExpression="LastName" /&gt;
                &lt;asp:BoundField DataField="Suffix" HeaderText="Suffix" 
                    SortExpression="Suffix" /&gt;
                &lt;asp:BoundField DataField="CompanyName" HeaderText="CompanyName" 
                    SortExpression="CompanyName" /&gt;
                &lt;asp:BoundField DataField="SalesPerson" HeaderText="SalesPerson" 
                    SortExpression="SalesPerson" /&gt;
                &lt;asp:BoundField DataField="EmailAddress" HeaderText="EmailAddress" 
                    SortExpression="EmailAddress" /&gt;
                &lt;asp:BoundField DataField="Phone" HeaderText="Phone" SortExpression="Phone" /&gt;
                &lt;asp:BoundField DataField="PasswordHash" HeaderText="PasswordHash" 
                    SortExpression="PasswordHash" /&gt;
                &lt;asp:BoundField DataField="PasswordSalt" HeaderText="PasswordSalt" 
                    SortExpression="PasswordSalt" /&gt;
                &lt;asp:BoundField DataField="rowguid" HeaderText="rowguid" 
                    SortExpression="rowguid" /&gt;
                &lt;asp:BoundField DataField="ModifiedDate" HeaderText="ModifiedDate" 
                    SortExpression="ModifiedDate" /&gt;
            &lt;/Columns&gt;
            &lt;FooterStyle BackColor="White" ForeColor="#000066" /&gt;
            &lt;HeaderStyle BackColor="#006699" Font-Bold="True" ForeColor="White" /&gt;
            &lt;PagerStyle BackColor="White" ForeColor="#000066" HorizontalAlign="Left" /&gt;
            &lt;RowStyle ForeColor="#000066" /&gt;
            &lt;SelectedRowStyle BackColor="#669999" Font-Bold="True" ForeColor="White" /&gt;
            &lt;SortedAscendingCellStyle BackColor="#F1F1F1" /&gt;
            &lt;SortedAscendingHeaderStyle BackColor="#007DBB" /&gt;
            &lt;SortedDescendingCellStyle BackColor="#CAC9C9" /&gt;
            &lt;SortedDescendingHeaderStyle BackColor="#00547E" /&gt;
        &lt;/asp:GridView&gt;
    
        &lt;!-- Manually add the Where clause at the end of the 'EntityDataSource' --&gt;
        &lt;!-- Add Where Parameters to feed into the 'Where' attribute above --&gt;
            &lt;!-- ControlParameter
            For the 'Name' add the Where Parameter, from the 'Where' attribute of the 'EntityDataSource', 
                without the '@'
            Get the ControlID from the Drop-Down-List control 
            Note: possible use of the 'OrderBy' attribute
        --&gt;
        &lt;asp:EntityDataSource 
            ID="CustomersEDS" 
            runat="server" 
            ConnectionString="name=AdventureWorksLT2008R2Entities" 
            DefaultContainerName="AdventureWorksLT2008R2Entities" 
            EnableDelete="True" 
            EnableFlattening="False" 
            EnableInsert="True" 
            EnableUpdate="True" 
            EntitySetName="Customers"
            Where="it.[SalesPerson] == @SalesPerson"
            OrderBy="it.[FirstName]"&gt;

            
            &lt;WhereParameters&gt;

                &lt;asp:ControlParameter 
                    Name="SalesPerson" 
                    ControlID="DropDownList1" 
                    Type="String" 
                    DefaultValue="NULL" /&gt;
                  
            &lt;/WhereParameters&gt;


        &lt;/asp:EntityDataSource&gt;
    
    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_EntityFramework</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_QueryExtender_FilterBasedOnTextBox_DropDown_Grid</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_EntityFramework</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_QueryExtender_FilterBasedOnTextBox_DropDown_Grid</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- QueryExtender NOTE: Could also search based on cookiee, query string, etc --&gt;


&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default_with_QueryExtender.aspx.cs" Inherits="EntityDataSourceDemo.Default_with_QueryExtender" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head runat="server"&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
    
       
        First Name Contains:
        &lt;asp:TextBox ID="txt_Contains" runat="server"&gt;&lt;/asp:TextBox&gt;
        
        
        &lt;br /&gt;
        &lt;br /&gt;
        
         &lt;!-- add in the attribute: AutoPostBack="True" --&gt;
        Select a Sales Person:&lt;asp:DropDownList 
            ID="DropDownList1" 
            runat="server" 
            DataSourceID="SalesPersonEDS" 
            DataTextField="SalesPerson" 
            DataValueField="SalesPerson"
            AutoPostBack="True"&gt;
        &lt;/asp:DropDownList&gt;

        &lt;!-- By default the 'Select' statement does not have the "DISTINCT" key word, this was manually added --&gt;

        &lt;asp:EntityDataSource 
            ID="SalesPersonEDS" 
            runat="server" 
            ConnectionString="name=AdventureWorksLT2008R2Entities" 
            DefaultContainerName="AdventureWorksLT2008R2Entities" 
            EnableFlattening="False" 
            EntitySetName="Customers" 
            Select="DISTINCT it.[SalesPerson]"&gt;
        &lt;/asp:EntityDataSource&gt;
    
        &lt;br /&gt;
        &lt;br /&gt;
        Customers:&lt;br /&gt;
        &lt;br /&gt;
        &lt;asp:GridView 
            ID="GridView1" 
            runat="server" 
            BackColor="White" 
            BorderColor="#CCCCCC" 
            BorderStyle="None" 
            BorderWidth="1px" 
            CellPadding="3" 
            AllowPaging="True" 
            AllowSorting="True" 
            AutoGenerateColumns="False" 
            DataKeyNames="CustomerID" 
            DataSourceID="CustomersEDS"&gt;
            &lt;Columns&gt;
                &lt;asp:CommandField ShowDeleteButton="True" ShowEditButton="True" /&gt;

                &lt;asp:BoundField DataField="CustomerID" HeaderText="CustomerID" ReadOnly="True" 
                    SortExpression="CustomerID" /&gt;
                &lt;asp:CheckBoxField DataField="NameStyle" HeaderText="NameStyle" 
                    SortExpression="NameStyle" /&gt;
                &lt;asp:BoundField DataField="Title" HeaderText="Title" SortExpression="Title" /&gt;
                &lt;asp:BoundField DataField="FirstName" HeaderText="FirstName" 
                    SortExpression="FirstName" /&gt;
                &lt;asp:BoundField DataField="MiddleName" HeaderText="MiddleName" 
                    SortExpression="MiddleName" /&gt;
                &lt;asp:BoundField DataField="LastName" HeaderText="LastName" 
                    SortExpression="LastName" /&gt;
                &lt;asp:BoundField DataField="Suffix" HeaderText="Suffix" 
                    SortExpression="Suffix" /&gt;
                &lt;asp:BoundField DataField="CompanyName" HeaderText="CompanyName" 
                    SortExpression="CompanyName" /&gt;
                &lt;asp:BoundField DataField="SalesPerson" HeaderText="SalesPerson" 
                    SortExpression="SalesPerson" /&gt;
                &lt;asp:BoundField DataField="EmailAddress" HeaderText="EmailAddress" 
                    SortExpression="EmailAddress" /&gt;
                &lt;asp:BoundField DataField="Phone" HeaderText="Phone" SortExpression="Phone" /&gt;
                &lt;asp:BoundField DataField="PasswordHash" HeaderText="PasswordHash" 
                    SortExpression="PasswordHash" /&gt;
                &lt;asp:BoundField DataField="PasswordSalt" HeaderText="PasswordSalt" 
                    SortExpression="PasswordSalt" /&gt;
                &lt;asp:BoundField DataField="rowguid" HeaderText="rowguid" 
                    SortExpression="rowguid" /&gt;
                &lt;asp:BoundField DataField="ModifiedDate" HeaderText="ModifiedDate" 
                    SortExpression="ModifiedDate" /&gt;
            &lt;/Columns&gt;
            &lt;FooterStyle BackColor="White" ForeColor="#000066" /&gt;
            &lt;HeaderStyle BackColor="#006699" Font-Bold="True" ForeColor="White" /&gt;
            &lt;PagerStyle BackColor="White" ForeColor="#000066" HorizontalAlign="Left" /&gt;
            &lt;RowStyle ForeColor="#000066" /&gt;
            &lt;SelectedRowStyle BackColor="#669999" Font-Bold="True" ForeColor="White" /&gt;
            &lt;SortedAscendingCellStyle BackColor="#F1F1F1" /&gt;
            &lt;SortedAscendingHeaderStyle BackColor="#007DBB" /&gt;
            &lt;SortedDescendingCellStyle BackColor="#CAC9C9" /&gt;
            &lt;SortedDescendingHeaderStyle BackColor="#00547E" /&gt;
        &lt;/asp:GridView&gt;
    
        &lt;!-- Manually add the Where clause at the end of the 'EntityDataSource' --&gt;

        &lt;asp:EntityDataSource 
            ID="CustomersEDS" 
            runat="server" 
            ConnectionString="name=AdventureWorksLT2008R2Entities" 
            DefaultContainerName="AdventureWorksLT2008R2Entities" 
            EnableDelete="True" 
            EnableFlattening="False" 
            EnableInsert="True" 
            EnableUpdate="True" 
            EntitySetName="Customers"&gt;
        &lt;/asp:EntityDataSource&gt;
    
    	&lt;!-- HERE IS THE SEARCH BOX PART --&gt;
     	&lt;!-- It uses the text in the 'txt_Contains' control to filter the Gridview --&gt;    	
    
        &lt;asp:QueryExtender ID="CustomersQE" runat="server" TargetControlID="CustomersEDS"&gt;
        
            &lt;asp:SearchExpression SearchType="Contains" DataFields="FirstName"&gt;
                &lt;asp:ControlParameter ControlID="txt_Contains" /&gt;
            &lt;/asp:SearchExpression&gt;
            
        &lt;/asp:QueryExtender&gt;


    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_EntityFramework</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>3_QueryExtender_PropertyExpression_FilterGridView_basedOn_DropDown</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_EntityFramework</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>3_QueryExtender_PropertyExpression_FilterGridView_basedOn_DropDown</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- QueryExtender NOTE: Could also search based on cookiee, query string, etc --&gt;


&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default_with_QueryExtender_PropertyExpression.aspx.cs" Inherits="EntityDataSourceDemo.Default_with_QueryExtender_PropertyExpression" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head runat="server"&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
    
        &lt;!-- add in the attribute: AutoPostBack="True" --&gt;
        First Name Contains:
        &lt;asp:TextBox ID="txt_Contains" runat="server"&gt;&lt;/asp:TextBox&gt;
        &lt;br /&gt;
        &lt;br /&gt;
        Select a Sales Person:&lt;asp:DropDownList 
            ID="DropDownList1" 
            runat="server" 
            DataSourceID="SalesPersonEDS" 
            DataTextField="SalesPerson" 
            DataValueField="SalesPerson"
            AutoPostBack="True"&gt;
        &lt;/asp:DropDownList&gt;

        &lt;!-- By default the 'Select' statement does not have the "DISTINCT" key word, this was manually added --&gt;

        &lt;asp:EntityDataSource 
            ID="SalesPersonEDS" 
            runat="server" 
            ConnectionString="name=AdventureWorksLT2008R2Entities" 
            DefaultContainerName="AdventureWorksLT2008R2Entities" 
            EnableFlattening="False" 
            EntitySetName="Customers" 
            Select="DISTINCT it.[SalesPerson]"&gt;
        &lt;/asp:EntityDataSource&gt;
    
        &lt;br /&gt;
        &lt;br /&gt;
        Customers:&lt;br /&gt;
        &lt;br /&gt;
        &lt;asp:GridView 
            ID="GridView1" 
            runat="server" 
            BackColor="White" 
            BorderColor="#CCCCCC" 
            BorderStyle="None" 
            BorderWidth="1px" 
            CellPadding="3" 
            AllowPaging="True" 
            AllowSorting="True" 
            AutoGenerateColumns="False" 
            DataKeyNames="CustomerID" 
            DataSourceID="CustomersEDS"&gt;
            &lt;Columns&gt;
                &lt;asp:CommandField ShowDeleteButton="True" ShowEditButton="True" /&gt;

                &lt;asp:BoundField DataField="CustomerID" HeaderText="CustomerID" ReadOnly="True" 
                    SortExpression="CustomerID" /&gt;
                &lt;asp:CheckBoxField DataField="NameStyle" HeaderText="NameStyle" 
                    SortExpression="NameStyle" /&gt;
                &lt;asp:BoundField DataField="Title" HeaderText="Title" SortExpression="Title" /&gt;
                &lt;asp:BoundField DataField="FirstName" HeaderText="FirstName" 
                    SortExpression="FirstName" /&gt;
                &lt;asp:BoundField DataField="MiddleName" HeaderText="MiddleName" 
                    SortExpression="MiddleName" /&gt;
                &lt;asp:BoundField DataField="LastName" HeaderText="LastName" 
                    SortExpression="LastName" /&gt;
                &lt;asp:BoundField DataField="Suffix" HeaderText="Suffix" 
                    SortExpression="Suffix" /&gt;
                &lt;asp:BoundField DataField="CompanyName" HeaderText="CompanyName" 
                    SortExpression="CompanyName" /&gt;
                &lt;asp:BoundField DataField="SalesPerson" HeaderText="SalesPerson" 
                    SortExpression="SalesPerson" /&gt;
                &lt;asp:BoundField DataField="EmailAddress" HeaderText="EmailAddress" 
                    SortExpression="EmailAddress" /&gt;
                &lt;asp:BoundField DataField="Phone" HeaderText="Phone" SortExpression="Phone" /&gt;
                &lt;asp:BoundField DataField="PasswordHash" HeaderText="PasswordHash" 
                    SortExpression="PasswordHash" /&gt;
                &lt;asp:BoundField DataField="PasswordSalt" HeaderText="PasswordSalt" 
                    SortExpression="PasswordSalt" /&gt;
                &lt;asp:BoundField DataField="rowguid" HeaderText="rowguid" 
                    SortExpression="rowguid" /&gt;
                &lt;asp:BoundField DataField="ModifiedDate" HeaderText="ModifiedDate" 
                    SortExpression="ModifiedDate" /&gt;
            &lt;/Columns&gt;
            &lt;FooterStyle BackColor="White" ForeColor="#000066" /&gt;
            &lt;HeaderStyle BackColor="#006699" Font-Bold="True" ForeColor="White" /&gt;
            &lt;PagerStyle BackColor="White" ForeColor="#000066" HorizontalAlign="Left" /&gt;
            &lt;RowStyle ForeColor="#000066" /&gt;
            &lt;SelectedRowStyle BackColor="#669999" Font-Bold="True" ForeColor="White" /&gt;
            &lt;SortedAscendingCellStyle BackColor="#F1F1F1" /&gt;
            &lt;SortedAscendingHeaderStyle BackColor="#007DBB" /&gt;
            &lt;SortedDescendingCellStyle BackColor="#CAC9C9" /&gt;
            &lt;SortedDescendingHeaderStyle BackColor="#00547E" /&gt;
        &lt;/asp:GridView&gt;
    
        &lt;!-- Manually add the Where clause at the end of the 'EntityDataSource' --&gt;

        &lt;asp:EntityDataSource 
            ID="CustomersEDS" 
            runat="server" 
            ConnectionString="name=AdventureWorksLT2008R2Entities" 
            DefaultContainerName="AdventureWorksLT2008R2Entities" 
            EnableDelete="True" 
            EnableFlattening="False" 
            EnableInsert="True" 
            EnableUpdate="True" 
            EntitySetName="Customers"&gt;
        &lt;/asp:EntityDataSource&gt;
  
      	&lt;!-- Use Query Extender, and Property Expression --&gt;
     	&lt;!-- Filter GridView based on DropDown selection --&gt;    
        &lt;asp:QueryExtender ID="CustomersQE" runat="server" TargetControlID="CustomersEDS"&gt;
        
            &lt;asp:PropertyExpression&gt;
                &lt;asp:ControlParameter ControlID="DropDownList1" Name="SalesPerson"/&gt;
            &lt;/asp:PropertyExpression&gt;
            
        &lt;/asp:QueryExtender&gt;


    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_LinkButton_ButtonField_HyperLink_and_Their_events</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Button_ButtonField_in_GridView_Respond_to_Events</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_LinkButton_ButtonField_HyperLink_and_Their_events</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Button_ButtonField_in_GridView_Respond_to_Events</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

&lt;!-- from: http://msdn.microsoft.com/en-us/library/vstudio/bb907626%28v=vs.100%29.aspx

You can add custom functionality to a GridView control in the following ways:
    By adding a ButtonField field to the GridView control.
    By adding a Button, LinkButton, or ImageButton controls to a template in the GridView control.
    
You can use the CommandName property of the event argument to identify the button's function in the event handler method.

If you are working with ButtonField or TemplateField objects, you can also use the CommandEventArgs.CommandArgument property to identify the current row.

When you are using a ButtonField object, the CommandEventArgs.CommandArgument property is set automatically to the row index.
When you are using a TemplateField object, the CommandEventArgs.CommandArgument property is not automatically set by the control.
	In that case, if you have to determine the row index in the event handler, 
	you can set the CommandArgument property of the button to the row index by using a data-binding expression.

EXAMPLE: buttonfield - 
--&gt;		


&lt;%@ Page language="C#" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;script runat="server"&gt;

  void ContactsGridView_RowCommand(Object sender, GridViewCommandEventArgs e)
  {
    // If multiple buttons are used in a GridView control, use the
    // CommandName property to determine which button was clicked.
    if(e.CommandName=="Add")
    {
      // Convert the row index stored in the CommandArgument
      // property to an Integer.
      int index = Convert.ToInt32(e.CommandArgument);

      // Retrieve the row that contains the button clicked 
      // by the user from the Rows collection.
      GridViewRow row = ContactsGridView.Rows[index];

      // Create a new ListItem object for the contact in the row.     
      ListItem item = new ListItem();
      item.Text = Server.HtmlDecode(row.Cells[2].Text) + " " + Server.HtmlDecode(row.Cells[3].Text);

      // If the contact is not already in the ListBox, add the ListItem 
      // object to the Items collection of the ListBox control. 
      if (!ContactsListBox.Items.Contains(item))
      {
        ContactsListBox.Items.Add(item);
      }
    }
  }    
&lt;/script&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
  &lt;head runat="server"&gt;
    &lt;title&gt;GridView RowCommand Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;

      &lt;h3&gt;GridView RowCommand Example&lt;/h3&gt;

      &lt;table width="100%"&gt;
        &lt;tr&gt;
          &lt;td style="width:50%"&gt;

            &lt;asp:gridview id="ContactsGridView" 
              datasourceid="ContactsSource"
              allowpaging="true" 
              autogeneratecolumns="false"
              onrowcommand="ContactsGridView_RowCommand"
              runat="server"&gt;

              &lt;columns&gt;
                &lt;asp:buttonfield buttontype="Link" 
                  commandname="Add" 
                  text="Add"/&gt;
                &lt;asp:boundfield datafield="ContactID" 
                  headertext="Contact ID"/&gt;
                &lt;asp:boundfield datafield="FirstName" 
                  headertext="First Name"/&gt; 
                &lt;asp:boundfield datafield="LastName" 
                  headertext="Last Name"/&gt;
              &lt;/columns&gt;

            &lt;/asp:gridview&gt;

          &lt;/td&gt;

          &lt;td style="vertical-align:top; width:50%"&gt;

            Contacts: &lt;br/&gt;
            &lt;asp:listbox id="ContactsListBox"
              runat="server" Height="200px" Width="200px"/&gt;

          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

      &lt;!-- This example uses Microsoft SQL Server and connects    --&gt;
      &lt;!-- to the AdventureWorks sample database. Use an ASP.NET  --&gt;
      &lt;!-- expression to retrieve the connection string value     --&gt;
      &lt;!-- from the Web.config file.                              --&gt;
      &lt;asp:sqldatasource id="ContactsSource"
        selectcommand="Select [ContactID], [FirstName], [LastName] From Person.Contact"
        connectionstring="&lt;%$ ConnectionStrings:AdventureWorks_DataConnectionString%&gt;" 
        runat="server"/&gt;

    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;

........................................................................................................

&lt;!--
EXAMPLE: Button - to pass the RowIndex in as Command Argument
--&gt;	

&lt;asp:TemplateField&gt;
  &lt;ItemTemplate&gt;
    &lt;asp:Button ID="AddButton" runat="server" 
      CommandName="AddToCart" 
      CommandArgument="&lt;%# ((GridViewRow) Container).RowIndex %&gt;"
      Text="Add to Cart" /&gt;
  &lt;/ItemTemplate&gt; 
&lt;/asp:TemplateField&gt;

&lt;!--	
Create a method for the RowCommand event of the GridView control. In the method, do the following:
    Check the CommandName property of the event-argument object to see what string was passed.
    Retrieve the index of the row that contains the button by using the CommandArgument property, if required.
    Perform the appropriate logic for the button that the user clicked. 
--&gt;
protected void GridView1_RowCommand(object sender, 
  GridViewCommandEventArgs e)
{
  if (e.CommandName == "AddToCart")
  {
    // Retrieve the row index stored in the 
    // CommandArgument property.
    int index = Convert.ToInt32(e.CommandArgument);

    // Retrieve the row that contains the button 
    // from the Rows collection.
    GridViewRow row = GridView1.Rows[index];

    // Add code here to add the item to the shopping cart.
  }

  }

&lt;!--	

--&gt;


&lt;!--	

--&gt;


&lt;!--	

--&gt;


&lt;!--	

--&gt;


&lt;!--	

--&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_LinkButton_ButtonField_HyperLink_and_Their_events</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>ButtonField_use_DataKeyNames_to_IdentifyTheFieldToGet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_LinkButton_ButtonField_HyperLink_and_Their_events</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>ButtonField_use_DataKeyNames_to_IdentifyTheFieldToGet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

&lt;!-- from: http://forums.asp.net/t/1024293.aspx?Pass+the+ID+in+a+gridView+ButtonField+
I have a GridView control and I added  a ‘ButtonField’ to it. 
I am trying to wire the ‘onClick’ event of the button to a 
procedure and pass the ID of the line item from which the button was clicked.
--&gt;

&lt;!-- Don't forget  (OnRowCommand) --&gt;
&lt;asp:GridView
	OnRowCommand="gv_rowCommand"		
	DataSourceID="dataSrcID"
	ID="gv_1" 
	runat="server"
	DataKeyNames="theID"
	AutoGenerateColumns="false"
	AutoGenerateDeleteButton="true"
	AutoGenerateEditButton="true"&gt; 
      &lt;Columns&gt;

            &lt;asp:CheckBoxField DataField="field1" HeaderText="Field 1" ReadOnly="false" /&gt;

            &lt;asp:BoundField DataField="field2" HeaderText="Field 2" ReadOnly="false" /&gt;

            &lt;asp:BoundField DataField="Date" DataFormatString="{0:MM/dd/yyyy}" HeaderText="Date" HtmlEncode="false" ReadOnly="false" /&gt;

            &lt;asp:ButtonField ButtonType="link" Text="Find similar" /&gt; 'this is where I want to pass the 'ID' to procedure

      &lt;/Columns&gt;

&lt;/asp:GridView&gt;


//VB
Protected Sub gv_rowCommand(s As Object, e As GridViewCommandEventArgs)

      Dim rIndex       As integer = CType(e.CommandArgument, Integer)
      Dim thisID        As String = Me.gv_listTitles.DataKeys(rIndex).Value.ToString()

End Sub

//C#
protected void gv_rowCommand(object s, GridViewCommandEventArgs e)
{
	int rIndex = Convert.ToInt32(e.CommandArgument);
	string thisID = this.gv_listTitles.DataKeys(rIndex).Value.ToString();
	//Response.Write(thisID);
}



.......................another example ..............................................

&lt;asp:TemplateField HeaderText="Remove" ShowHeader="False"&gt;
  &lt;ItemTemplate&gt;
    &lt;asp:LinkButton ID="btnRemoveItem" runat="server" CausesValidation="false" Text="remove" CommandArgument='&lt;%# eval("MyRowId") %&gt;' oncommand="btnRemove_Command" /&gt;
  &lt;/ItemTemplate&gt;
&lt;/asp:TemplateField&gt;

//C#
protected void btnRemove_Command(object sender, System.Web.UI.WebControls.CommandEventArgs e)
{
	int myId = e.CommandArgument;

}


//VB:

Protected Sub btnRemove_Command(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.CommandEventArgs)

   Dim myId As Integer = e.CommandArgument

End Sub
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_SqlDataSource_StoredProcedure</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Passing_PARMs_To_SqlDataSource</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_SqlDataSource_StoredProcedure</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Passing_PARMs_To_SqlDataSource</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- from:  http://forums.asp.net/t/1019588.aspx?Passing+parameters+to+Sqldatasource+stored+procedure  --&gt;


Re: Passing parameters to Sqldatasource stored procedure


It worked doing this:

&lt;asp:SqlDataSource ID="SqlDataSource1" runat="server" 
    ConnectionString="&lt;%$ ConnectionStrings:DatabaseConnectionString %&gt;" 
    SelectCommand="StoredProcedure1" SelectCommandType="StoredProcedure"&gt;
&lt;selectparameters&gt;
      &lt;asp:parameter Name="UserID" Type="String"/&gt;
      &lt;/selectparameters&gt;
&lt;/asp:SqlDataSource&gt;


&lt;!-- 
Then in the Page_Load sub simply

sqldatasource1.selectparameters("UserID").DefaultValue = "whatever you want"

Note that @UserID must be used as the name of the parameter in StoredProcedure1.

  --&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_Validation</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Validator_RegExp_Required_Compare_Summary</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_Validation</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Validator_RegExp_Required_Compare_Summary</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;%@ Page Language="C#" AutoEventWireup="true"  CodeFile="Default.aspx.cs" Inherits="_Default" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head runat="server"&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
     &lt;table cellSpacing="1" cellPadding="1" width="300" border="1"&gt;
        &lt;tr&gt;
          &lt;td&gt;Name:&lt;/td&gt;
          &lt;td&gt;
            &lt;asp:TextBox 
                    id="nameTextBox" 
                    runat="server"&gt;
            &lt;/asp:TextBox&gt;&lt;/td&gt;
            
          &lt;td&gt;

            &lt;!-- If no data is entered into 'nameTextBox' there is no POSTBACK, and then the validation is client side --&gt; 
            &lt;asp:RequiredFieldValidator 
                    Display="Dynamic" &lt;!-- renders as 'display:none', otherwise it renders as: 'visibility:hidden' --&gt;
                    ID="nameValidator" 
                    runat="server" 
                    Text="**"   &lt;!-- This will appear immediately adjacent to the control to give a heads up to the user --&gt;
                    ErrorMessage="Please enter a name"  &lt;!-- This will be extracted by the ValidatorSummary control and displayed in the summary --&gt;
                    ControlToValidate="nameTextBox"&gt;
            &lt;/asp:RequiredFieldValidator&gt;

            &lt;!-- Compare --&gt;
            &lt;asp:CompareValidator 
                    Display="Dynamic"  &lt;!-- renders as 'display:none', otherwise it renders as: 'visibility:hidden' --&gt;
                    ID="nameCompareValidator" 
                    runat="server" 
                    Text="**"  &lt;!-- This will appear immediately adjacent to the control to give a heads up to the user --&gt;
                    ErrorMessage="Please enter the name 'Bob'"  "  &lt;!-- This will be extracted by the ValidatorSummary control and displayed in the summary --&gt;
                    ControlToValidate="nameTextBox" 
                    ValueToCompare="Bob"&gt;
            &lt;/asp:CompareValidator&gt;


          &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Age:&lt;/td&gt;
          &lt;td&gt;
            &lt;asp:TextBox id="ageTextBox" runat="server" Width="32px"&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Email:&lt;/td&gt;
          &lt;td&gt;
            &lt;asp:TextBox id="emailTextBox" runat="server"&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;
          &lt;td&gt;
              &lt;!-- RegularExpression --&gt;
              &lt;!-- Note easy common ones: from the designer surface =&gt; properties =&gt; Validation Expression --&gt;
                &lt;asp:RegularExpressionValidator 
                    ControlToValidate="emailTextBox" 
                    ID="emailRegExValidator" 
                    Text="**" 
                    runat="server" 
                    ErrorMessage="Please enter an email of the form cindy@yahoo.com" 
                    ValidationExpression="\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*"&gt;
                &lt;/asp:RegularExpressionValidator&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Password:&lt;/td&gt;
          &lt;td&gt;
            &lt;asp:TextBox id="passwordTextBox" TextMode="Password" runat="server"&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;            
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Re-enter password:&lt;/td&gt;
          &lt;td&gt;
            &lt;asp:TextBox id="reenterPasswordTextBox" runat="server" TextMode="Password"&gt;&lt;/asp:TextBox&gt;&lt;/td&gt;

            &lt;!-- Compare --&gt;
            &lt;asp:CompareValidator 
                ControlToValidate="reenterPasswordTextBox" 
                ControlToCompare="passwordTextBox" 
                Type="String" 
                Operator="Equal" 
                ID="CompareValidator1" 
                Text="**" 
                runat="server" 
                ErrorMessage="Please enter passwords that match"&gt;
           &lt;/asp:CompareValidator&gt;

          &lt;td&gt;
              
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;
            &lt;asp:Button id="enterButton" runat="server" Text="Enter" 
                  onclick="enterButton_Click"&gt;&lt;/asp:Button&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

      &lt;!-- Summary is aware of all the validation controls, and will harvest all the messages --&gt; 
        &lt;asp:ValidationSummary 
                ID="vsControl" 
                runat="server" 
                HeaderText="Please correct these errors:"
                ShowMessageBox="true" 
                DisplayMode="BulletList" /&gt;

    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;



///////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class _Default : System.Web.UI.Page 
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (IsPostBack) //Then we know the data is being processed in this method, but it has not arrived at the Page.Validate event yet
                        // 
        {
            this.Validate();    // &lt;== Must invoke this first if you want to use IsValid in the Page_Load event
            if (this.IsValid)   // &lt;== can NOT check IsValid unless you first invoke Validate, b/c the Page.Validate event does not normally
                                //      occur until AFTER the Page_Load event
            {
                // use data...
            }
        }
    }
    protected void enterButton_Click(object sender, EventArgs e)
    {
        if (this.IsValid)       // the developer must check for validity, b/c Server side processing does NOT stop just b/c validation fails
        {
            Context.Items["name"] = nameTextBox.Text;
            Context.Items["age"] = ageTextBox.Text;
            Context.Items["email"] = emailTextBox.Text;
            Context.Items["password"] = passwordTextBox.Text;
            Server.Transfer("~/ThankYou.aspx");
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_controls_examples</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>DropDown_set_value_For_SELECT_of_DataGrid</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_controls_examples</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>DropDown_set_value_For_SELECT_of_DataGrid</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] first shows the drop down only

2] select from the drop down, if valid value then reposts back with GridView, otherwise a message:


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

&lt;%@ Page Title="" Language="vb" AutoEventWireup="false" MasterPageFile="~/Site.Master" CodeBehind="Users_Child.aspx.vb" Inherits="CCWNC411_Security.Users_Child" %&gt;
&lt;asp:Content ID="Content1" ContentPlaceHolderID="HeadContent" runat="server"&gt;
&lt;/asp:Content&gt;
&lt;asp:Content ID="Content2" ContentPlaceHolderID="MainContent" runat="server"&gt;
    &lt;p&gt;


        &lt;asp:DropDownList 
            ID="DropDownList_Application" 
            runat="server" 
            AppendDataBoundItems="true"
            DataSourceID="SqlDataSource_DropDownList" 
            DataTextField="ApplicationName" 
            DataValueField="ApplicationId" 
            AutoPostBack="true"
        &gt;


        &lt;/asp:DropDownList&gt;


    &lt;/p&gt;
    &lt;p&gt;

        &lt;asp:Label ID="lbl_Message" runat="server" Text="Label"&gt;&lt;/asp:Label&gt;
        


    &lt;/p&gt;
    &lt;p&gt;


        &lt;asp:Button ID="btn_ListUsersForSelectedApplication" runat="server" 
            Text="List the users associated with the Web Site" /&gt;


    &lt;/p&gt;

        &lt;p&gt;


            &lt;asp:GridView ID="GridView_UsersInApplication" runat="server" AutoGenerateColumns="False" 
                DataKeyNames="ApplicationId" DataSourceID="SqlDataSource_GridView"&gt;
                &lt;Columns&gt;
                    &lt;asp:BoundField DataField="UserName" HeaderText="User" 
                        SortExpression="UserName" /&gt;
                    &lt;asp:BoundField DataField="ApplicationName" HeaderText="Application" 
                        SortExpression="ApplicationName" /&gt;
                    &lt;asp:CheckBoxField DataField="IsApproved" HeaderText="Approved" 
                        SortExpression="IsApproved" /&gt;
                    &lt;asp:CheckBoxField DataField="IsLockedOut" HeaderText="Locked Out" 
                        SortExpression="IsLockedOut" /&gt;
                    &lt;asp:BoundField DataField="Password" HeaderText="Password" 
                        SortExpression="Password" /&gt;
                    &lt;asp:BoundField DataField="PasswordFormat" HeaderText="PasswordFormat" 
                        SortExpression="PasswordFormat" Visible="false" /&gt;
                    &lt;asp:BoundField DataField="PasswordSalt" HeaderText="PasswordSalt" 
                        SortExpression="PasswordSalt" Visible="false" /&gt;
                    &lt;asp:BoundField DataField="CreateDate" HeaderText="Created" 
                        SortExpression="CreateDate"  Visible="false" /&gt;
                    &lt;asp:BoundField DataField="LastLoginDate" HeaderText="LastLogin" 
                        SortExpression="LastLoginDate" /&gt;
                    &lt;asp:BoundField DataField="FailedPasswordAttemptCount" 
                        HeaderText="Failed P-word Count" 
                        SortExpression="FailedPasswordAttemptCount" /&gt;
                    &lt;asp:BoundField DataField="LastActivityDate" HeaderText="LastActivity" 
                        SortExpression="LastActivityDate" /&gt;
                    &lt;asp:BoundField DataField="UserId" HeaderText="UserId" 
                        SortExpression="UserId" Visible="false" /&gt;
                    &lt;asp:BoundField DataField="ApplicationId" HeaderText="ApplicationId" 
                        ReadOnly="True" SortExpression="ApplicationId" Visible="false" /&gt;
                &lt;/Columns&gt;
            &lt;/asp:GridView&gt;
    &lt;/p&gt;
    &lt;p&gt;
    &lt;p&gt;


        &lt;asp:SqlDataSource ID="SqlDataSource_GridView" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb %&gt;" 
             ProviderName="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb.ProviderName %&gt;" 
            SelectCommand="SELECT 
		                            aspnet_Users.UserName, 
		                            aspnet_Applications.ApplicationName, 
		                            aspnet_Membership.IsApproved, 
		                            aspnet_Membership.IsLockedOut, 
		                            aspnet_Membership.Password, 
		                            aspnet_Membership.PasswordFormat, 
		                            aspnet_Membership.PasswordSalt, 
		                            aspnet_Membership.CreateDate, 
		                            aspnet_Membership.LastLoginDate, 
		                            aspnet_Membership.FailedPasswordAttemptCount, 
		                            aspnet_Users.LastActivityDate, 
		                            aspnet_Users.UserId, 
		                            aspnet_Applications.ApplicationId
                            FROM  
	                            (
		                            aspnet_Membership 
		                            INNER JOIN
		                            aspnet_Users 
		                            ON aspnet_Membership.UserId = aspnet_Users.UserId 
                                )
                                INNER JOIN
                                aspnet_Applications 
                                ON 
		                            (
			                            (aspnet_Membership.ApplicationId = aspnet_Applications.ApplicationId) 
			                            AND 
                                        (aspnet_Users.ApplicationId = aspnet_Applications.ApplicationId)
                                    )
                                    
                             WHERE aspnet_Users.ApplicationId = @ApplicationId      
                                    
                                    
                                    " &gt;

             &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="ApplicationId"
                    QueryStringField="ApplicationId" 
                     /&gt;

            &lt;/SelectParameters&gt;
        &lt;/asp:SqlDataSource&gt;
    &lt;/p&gt;



        &amp;nbsp;&lt;/p&gt;
   &lt;p&gt;
        &lt;asp:SqlDataSource ID="SqlDataSource_DropDownList" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb %&gt;" 
            DeleteCommand="DELETE FROM [aspnet_Applications] WHERE [ApplicationId] = @ApplicationId" 
            InsertCommand="INSERT INTO [aspnet_Applications] ([ApplicationName], [LoweredApplicationName], [ApplicationId], [Description]) VALUES (@ApplicationName, @LoweredApplicationName, @ApplicationId, @Description)" 
            ProviderName="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb.ProviderName %&gt;" 
            SelectCommand="SELECT [ApplicationName], [LoweredApplicationName], [ApplicationId], [Description] FROM [aspnet_Applications]" 
            UpdateCommand="UPDATE [aspnet_Applications] SET [ApplicationName] = @ApplicationName, [LoweredApplicationName] = @LoweredApplicationName, [Description] = @Description WHERE [ApplicationId] = @ApplicationId"&gt;

            &lt;DeleteParameters&gt;
                &lt;asp:Parameter Name="ApplicationId" Type="Object" /&gt;
            &lt;/DeleteParameters&gt;
            &lt;InsertParameters&gt;
                &lt;asp:Parameter Name="ApplicationName" Type="String" /&gt;
                &lt;asp:Parameter Name="LoweredApplicationName" Type="String" /&gt;
                &lt;asp:Parameter Name="ApplicationId" Type="Object" /&gt;
                &lt;asp:Parameter Name="Description" Type="String" /&gt;
            &lt;/InsertParameters&gt;
            &lt;UpdateParameters&gt;
                &lt;asp:Parameter Name="ApplicationName" Type="String" /&gt;
                &lt;asp:Parameter Name="LoweredApplicationName" Type="String" /&gt;
                &lt;asp:Parameter Name="Description" Type="String" /&gt;
                &lt;asp:Parameter Name="ApplicationId" Type="Object" /&gt;
            &lt;/UpdateParameters&gt;
        &lt;/asp:SqlDataSource&gt;

    &lt;/p&gt;
&lt;/asp:Content&gt;




\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Public Class Users_Child
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        DropDownList_Application.Items.Add(New ListItem("---Select---", "0"))
        Me.Form.Target = "_self"
        lbl_Message.ForeColor = Drawing.Color.White

    End Sub

    Protected Sub btn_ListUsersForSelectedApplication_Click(sender As Object, e As EventArgs) Handles btn_ListUsersForSelectedApplication.Click

        Try
            If DropDownList_Application.SelectedValue &lt;&gt; "0" Then

                lbl_Message.ForeColor = Drawing.Color.White


                Dim sX As String
                sX = Request.Url.ToString &amp; "?ApplicationId=" &amp; DropDownList_Application.SelectedValue

                Response.Redirect(sX)
            Else

                GridView_UsersInApplication.Visible = False

                lbl_Message.ForeColor = Drawing.Color.Black
                lbl_Message.Text = "You need to select an Application first"
            End If
        Catch ex As Exception
            lbl_Message.Text = ex.Message
        End Try
    End Sub
End Class</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_controls_examples</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>GridView_Buttons_Run_CodeBehind</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_controls_examples</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>GridView_Buttons_Run_CodeBehind</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>reference: http://msdn.microsoft.com/en-us/library/bb907626%28v=vs.100%29.aspx

reference for ButtonField: http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.buttonfield%28v=vs.100%29.aspx

When a button is clicked in a GridView control, the RowCommand event is raised. 
The GridView control has built-in functionality for operations such as edit, delete, and paging. 
You can also add buttons and use the RowCommand event to add custom functionality to the control.

If you are working with ButtonField or TemplateField objects, 
	you can also use the CommandEventArgs.CommandArgument property to identify the current row.
	
When you are using a ButtonField object, the CommandEventArgs.CommandArgument property is set automatically to the row index. 	


To respond to button events in the GridView control
====================================================
1] Set the button's CommandName property to a string that identifies its function, such as "Print" or "Copy".

2] {regarding: &lt;asp:TemplateField&gt;

3] Create a method for the RowCommand event of the GridView control. In the method, do the following:

   a. Check the CommandName property of the event-argument object to see what string was passed.

   b. Retrieve the index of the row that contains the button by using the CommandArgument property, if required.

   c. Perform the appropriate logic for the button that the user clicked. 

The following example shows how you can respond to a button click in a GridView control. 
	In the example, a button in a TemplateField column sends the command "AddToCart". 
	The RowCommand event handler determines which button was clicked. 
	If it was the shopping cart button, the code performs the appropriate logic. 
	
-------------------------------------------------------------------------
Protected Sub GridView1_RowCommand(ByVal sender As Object, _
  ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs)
  If (e.CommandName = "AddToCart") Then
    ' Retrieve the row index stored in the CommandArgument property.
    Dim index As Integer = Convert.ToInt32(e.CommandArgument)

    ' Retrieve the row that contains the button 
    ' from the Rows collection.
    Dim row As GridViewRow = GridView1.Rows(index)

    ' Add code here to add the item to the shopping cart.

  End If
End Sub
-------------------------------------------------------------------------















</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_CRUD</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Bind_Together_DataGrid_page_and_DetailsView_Insert_Page</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_CRUD</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Bind_Together_DataGrid_page_and_DetailsView_Insert_Page</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Overview:
Authors.aspx        :	has a DataGrid with a hyperlink: "Insert new Record"
						when you click the hyperlink it sends you to Authors_Insert.aspx page
Authors_Insert.aspx :   lets you insert a record, HOWEVER there is no validation
						If you click Insert or Cancel it will send you back to Authors.aspx				


1] From 'standard' section of ToolBox, drag and drop 'Hyperlink' onto page (in this
		example below the &lt;asp:GridView&gt; control
		
		Change 'text' property of the hyperlink to 'Add New Author'
		
		Then go to the 'NavigateUrl' property of the hyperlink control and browse
			to the 'AuthorInsert.aspx' page (i.e. the one set up with a 'DetailsView'
			control and configured to do inserts (Default Mode = 'Insert')
			
2] Next set up the navigation back from the Insert page to the 'GridView' page

a) Add a sub into the Code-behind:

   Protected Sub DetailsView1_ItemInsert(sender As Object, e As System.Web.UI.WebControls.DetailsViewInsertedEventArgs)

        If e.AffectedRows = 1 Then          'if the number of affected rows = 1
            Response.Redirect("~/Authors.aspx")
        End If

    End Sub
    
b) Then wire that subroutine up to the front end by modifying the first tag of the DetailsView control:

From:

&lt;asp:DetailsView ID="DetailsView1" runat="server" AutoGenerateRows="False" 
    BackColor="White" BorderColor="#999999" BorderStyle="Solid" BorderWidth="1px" 
    CellPadding="3" DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
    ForeColor="Black" GridLines="Vertical" Height="50px" Width="232px" 
    DefaultMode="Insert"&gt;

To:

&lt;asp:DetailsView ID="DetailsView1" runat="server" AutoGenerateRows="False" 
    BackColor="White" BorderColor="#999999" BorderStyle="Solid" BorderWidth="1px" 
    CellPadding="3" DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
    ForeColor="Black" GridLines="Vertical" Height="50px" Width="232px" 
    DefaultMode="Insert" 
    OnItemInserted="DetailsView_ItemInsert"&gt;    &lt;!-- &lt;=== Add this --&gt;
            

    
c] Then to handle situation where user clicks 'Cancel'

Add a sub into the Code-behind:


    Protected Sub DetailsView1_ItemCommand(sender As Object, e As System.Web.UI.WebControls.DetailsViewCommandEventArgs)
        'This event fires when either 'Insert' or 'Cancel' is clicked in the DetailsView control on the Insert Record page

        If e.CommandName = "Cancel" Then          'if user chooses  'cancel'
            Response.Redirect("~/Authors.aspx")
        End If

    End Sub   
    
 Modify the MarkUp:
 
&lt;asp:DetailsView ID="DetailsView1" runat="server" AutoGenerateRows="False" 
    BackColor="White" BorderColor="#999999" BorderStyle="Solid" BorderWidth="1px" 
    CellPadding="3" DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
    ForeColor="Black" GridLines="Vertical" Height="50px" Width="232px" 
    DefaultMode="Insert" 
	OnItemInserted="DetailsView_ItemInsert"
	OnItemCommand="DetailsView_ItemCommand"&gt;        &lt;!-- &lt;=== Add this --&gt;
	
    
EXAMPLES    
======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################

    
&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="Authors.aspx.vb" Inherits="Authors" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;The Night Owl - Author List&lt;/title&gt;
    &lt;link href="styles.css" rel="Stylesheet" type="text/css"/&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;

    &lt;customControls:HeaderWithProperty ID="Header1" runat="server" heading="Author List"/&gt;

    &lt;p&gt;


        &lt;asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" 
            DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
            EmptyDataText="There are no data records to display." Width="720px" 
            AllowPaging="True" CellPadding="4" ForeColor="#333333" GridLines="None" 
            PageSize="5"&gt;
            &lt;AlternatingRowStyle BackColor="White" /&gt;
            &lt;Columns&gt;


                &lt;asp:CommandField ShowEditButton="True" /&gt;


                &lt;asp:BoundField DataField="au_lname" HeaderText="Last Nme" 
                    SortExpression="au_lname" ReadOnly="True" /&gt;
                &lt;asp:BoundField DataField="au_fname" HeaderText="F* Name" 
                    SortExpression="au_fname" ReadOnly="True" /&gt;
                &lt;asp:BoundField DataField="phone" HeaderText="phone" SortExpression="phone" /&gt;
            &lt;/Columns&gt;
            &lt;EditRowStyle BackColor="#7C6F57" /&gt;
            &lt;FooterStyle BackColor="#1C5E55" Font-Bold="True" ForeColor="White" /&gt;
            &lt;HeaderStyle BackColor="#1C5E55" Font-Bold="True" ForeColor="White" /&gt;
            &lt;PagerSettings Mode="NumericFirstLast" Position="TopAndBottom" /&gt;
            &lt;PagerStyle BackColor="#666666" ForeColor="White" HorizontalAlign="Center" /&gt;
            &lt;RowStyle BackColor="#E3EAEB" /&gt;
            &lt;SelectedRowStyle BackColor="#C5BBAF" Font-Bold="True" ForeColor="#333333" /&gt;
            &lt;SortedAscendingCellStyle BackColor="#F8FAFA" /&gt;
            &lt;SortedAscendingHeaderStyle BackColor="#246B61" /&gt;
            &lt;SortedDescendingCellStyle BackColor="#D4DFE1" /&gt;
            &lt;SortedDescendingHeaderStyle BackColor="#15524A" /&gt;
        &lt;/asp:GridView&gt;


    &lt;/p&gt;
    &lt;p&gt;


        &lt;asp:HyperLink ID="HyperLink1" runat="server" 
            NavigateUrl="~/Authors_Insert.aspx"&gt;Insert new Record&lt;/asp:HyperLink&gt;


    &lt;/p&gt;
    &lt;p&gt;


        &amp;nbsp;&lt;/p&gt;
    &lt;p&gt;


        &lt;asp:SqlDataSource ID="SqlDataSource1" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:mybookstoreConnectionString1 %&gt;" 
            DeleteCommand="DELETE FROM [authors] WHERE [au_id] = @au_id" 
            InsertCommand="INSERT INTO [authors] ([au_lname], [au_fname], [phone], [address], [city], [state], [zip]) VALUES (@au_lname, @au_fname, @phone, @address, @city, @state, @zip)" 
            ProviderName="&lt;%$ ConnectionStrings:mybookstoreConnectionString1.ProviderName %&gt;" 
            SelectCommand="SELECT [au_id], [au_lname], [au_fname], [phone], [address], [city], [state], [zip] FROM [authors]" 
            UpdateCommand="UPDATE [authors] SET  [phone] = @phone WHERE [au_id] = @au_id"&gt;
            &lt;DeleteParameters&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/DeleteParameters&gt;
            &lt;InsertParameters&gt;
                &lt;asp:Parameter Name="au_lname" Type="String" /&gt;
                &lt;asp:Parameter Name="au_fname" Type="String" /&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="address" Type="String" /&gt;
                &lt;asp:Parameter Name="city" Type="String" /&gt;
                &lt;asp:Parameter Name="state" Type="String" /&gt;
                &lt;asp:Parameter Name="zip" Type="String" /&gt;
            &lt;/InsertParameters&gt;
            &lt;UpdateParameters&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/UpdateParameters&gt; 
        &lt;/asp:SqlDataSource&gt;


    &lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;

    
    
=====Authors.aspx - Code-Behind======================================================================================================================
############################################################################################################################

Partial Class Authors
    Inherits System.Web.UI.Page

End Class
    
    
    
======Author_Insert.aspx - UI Source=====================================================================================================================
############################################################################################################################

&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="Authors_Insert.aspx.vb" Inherits="Authors" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;The Night Owl - Author List&lt;/title&gt;
    &lt;link href="styles.css" rel="Stylesheet" type="text/css"/&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;

    &lt;customControls:HeaderWithProperty ID="Header1" runat="server" heading="Insert Author"/&gt;

    &lt;p&gt;
        &lt;asp:DetailsView ID="DetailsView1" runat="server" AutoGenerateRows="False" 
            BackColor="White" BorderColor="#999999" BorderStyle="Solid" BorderWidth="1px" 
            CellPadding="3" DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
            ForeColor="Black" GridLines="Vertical" Height="50px" Width="232px" 
            DefaultMode="Insert" 
            OnItemInserted="DetailsView_ItemInsert"
            OnItemCommand="DetailsView_ItemCommand"&gt;

            &lt;AlternatingRowStyle BackColor="#CCCCCC" /&gt;
            &lt;EditRowStyle BackColor="#000099" Font-Bold="True" ForeColor="White" /&gt;
            &lt;Fields&gt;

                &lt;asp:BoundField DataField="au_id" HeaderText="Author ID" InsertVisible="False" 
                    ReadOnly="True" SortExpression="au_id" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                
                &lt;asp:BoundField DataField="au_lname" HeaderText="Last Name" 
                    SortExpression="au_lname" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="au_fname" HeaderText="First Name" 
                    SortExpression="au_fname"&gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="phone" HeaderText="phone" SortExpression="phone" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="address" HeaderText="address" 
                    SortExpression="address" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="city" HeaderText="city" SortExpression="city" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="state" HeaderText="state" SortExpression="state" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="zip" HeaderText="zip" SortExpression="zip" &gt;

                    &lt;ItemStyle Wrap="False" /&gt;

                &lt;/asp:BoundField&gt;
                &lt;asp:CommandField ShowInsertButton="True" /&gt;
            &lt;/Fields&gt;
            &lt;FooterStyle BackColor="#CCCCCC" /&gt;
            &lt;HeaderStyle BackColor="Black" Font-Bold="True" ForeColor="White" /&gt;
            &lt;PagerStyle BackColor="#999999" ForeColor="Black" HorizontalAlign="Center" /&gt;
        &lt;/asp:DetailsView&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;asp:SqlDataSource ID="SqlDataSource1" runat="server" ConnectionString="&lt;%$ ConnectionStrings:mybookstoreConnectionString1 %&gt;"
            DeleteCommand="DELETE FROM [authors] WHERE [au_id] = @au_id" InsertCommand="INSERT INTO [authors] ([au_lname], [au_fname], [phone], [address], [city], [state], [zip]) VALUES (@au_lname, @au_fname, @phone, @address, @city, @state, @zip)"
            ProviderName="&lt;%$ ConnectionStrings:mybookstoreConnectionString1.ProviderName %&gt;"
            SelectCommand="SELECT [au_id], [au_lname], [au_fname], [phone], [address], [city], [state], [zip] FROM [authors]"
            UpdateCommand="UPDATE [authors] SET [au_lname] = @au_lname, [au_fname] = @au_fname, [phone] = @phone, [address] = @address, [city] = @city, [state] = @state, [zip] = @zip WHERE [au_id] = @au_id"&gt;
            &lt;DeleteParameters&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/DeleteParameters&gt;
            &lt;InsertParameters&gt;
                &lt;asp:Parameter Name="au_lname" Type="String" /&gt;
                &lt;asp:Parameter Name="au_fname" Type="String" /&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="address" Type="String" /&gt;
                &lt;asp:Parameter Name="city" Type="String" /&gt;
                &lt;asp:Parameter Name="state" Type="String" /&gt;
                &lt;asp:Parameter Name="zip" Type="String" /&gt;
            &lt;/InsertParameters&gt;
            &lt;UpdateParameters&gt;
                &lt;asp:Parameter Name="au_lname" Type="String" /&gt;
                &lt;asp:Parameter Name="au_fname" Type="String" /&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="address" Type="String" /&gt;
                &lt;asp:Parameter Name="city" Type="String" /&gt;
                &lt;asp:Parameter Name="state" Type="String" /&gt;
                &lt;asp:Parameter Name="zip" Type="String" /&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/UpdateParameters&gt;
        &lt;/asp:SqlDataSource&gt;
    &lt;/p&gt;

    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;

    
    
    
========Authors_Insert.aspx - Code-Behind====================================================================================================================
############################################################################################################################


Partial Class Authors
    Inherits System.Web.UI.Page

    Protected Sub DetailsView_ItemInsert(sender As Object, e As DetailsViewInsertedEventArgs)

        If e.AffectedRows = 1 Then          'if the number of affected rows = 1
            Response.Redirect("~/Authors.aspx")
        End If

    End Sub


    Protected Sub DetailsView_ItemCommand(sender As Object, e As DetailsViewCommandEventArgs)
        'This event fires when either 'Insert' or 'Cancel' is clicked in the DetailsView control on the Insert Record page

        If e.CommandName = "Cancel" Then          'if user chooses  'cancel'
            Response.Redirect("~/Authors.aspx")
        End If

    End Sub

End Class
    
    
    
=======HeaderWithProps.ascx  WUC source====================================================================================================================
############################################################################################################################

    
&lt;%@ Control Language="VB" ClassName="HeaderWithProps" %&gt;

&lt;script runat="server"&gt;
    Public heading As String = "Page Heading" 'give it default value
    
&lt;/script&gt;

&lt;link href="styles.css" rel="Stylesheet" type="text/css"/&gt;

&lt;asp:Panel ID="Panel1" runat="server"&gt;
    &lt;img alt="The Night Owl" 
        src="Images/bookshelf.jpg" 
        width="800" height="110"/&gt;
&lt;/asp:Panel&gt;
&lt;asp:Panel id="menuPanel" runat="server" CssClass="menuPanelclass"&gt;
    &lt;a href="Default.aspx"&gt;Home&lt;/a&gt; |
    &lt;a href="Titles.aspx"&gt;Titles&lt;/a&gt; |
    &lt;a href="Authors.aspx"&gt;Authors&lt;/a&gt; |
    &lt;a href="Publishers.aspx"&gt;Publishers&lt;/a&gt;
&lt;/asp:Panel&gt;

&lt;h1&gt;&lt;%= heading %&gt;&lt;/h1&gt;


&lt;h3&gt; New&lt;/h3&gt;    
    
========web.config===================================================================================================================
############################################################################################################################

    
&lt;?xml version="1.0"?&gt;
&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;
&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient"/&gt;
    &lt;add name="mybookstoreConnectionString1" connectionString="Data Source=HOMETOWER\DEV;Initial Catalog=mybookstore;Integrated Security=True" providerName="System.Data.SqlClient"/&gt;
  &lt;/connectionStrings&gt;
  &lt;system.web&gt;
    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0"/&gt;

    &lt;!-- this is the new part --&gt;
    
    &lt;pages&gt;
      &lt;controls&gt;
        &lt;add tagPrefix="customControls" tagName="Header" src="~/controls/Header.ascx"/&gt;
        &lt;add tagPrefix="customControls" tagName="HeaderWithProperty" src="~/controls/HeaderWithProps.ascx"/&gt;
      &lt;/controls&gt;
    &lt;/pages&gt;
    
    &lt;!-- ==================== --&gt;   
    
    
    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880"/&gt;
    &lt;/authentication&gt;
    &lt;membership&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;
    &lt;profile&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;
    &lt;roleManager enabled="false"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
        &lt;add name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;
  &lt;/system.web&gt;
  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;    
    
===========================================================================================================================
############################################################################################################################

    
    
    
===========================================================================================================================
############################################################################################################################

    
    
===========================================================================================================================
############################################################################################################################

    
    
    
        
    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_CRUD</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>DetailsViewControl_Update</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_CRUD</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>DetailsViewControl_Update</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Overview:
Authors.aspx        :	has a DataGrid with a hyperlink column: "Click to Edit"
						when you click the hyperlink it sends you to Authors_Update.aspx page, for the specific record
						whose PK is passed in the URL
Authors_Update.aspx :   lets you Update a record, HOWEVER there is no validation
						If you click Update or Cancel it will send you back to Authors.aspx				




start with the form that is set up to do Insert with a DetailsView control

1] Rather than checking off "Enable Inserting" from the 'DetailsView Tasks' GUI window
	you need to check off: "Enable Editing"

2] With the DetailsView control selected =&gt; Properties =&gt; Default Mode = Edit
	Doing so makes the Primary Key 'read-only', and there are now links at the
	bottom for 'Update' and 'Cancel'

3] Next Modify the SQL Data Source

    a) add a 'Where' statement at the end of the 'SELECT' statement to select by PK:
    
    SelectCommand="SELECT [au_id], [au_lname], [au_fname], [phone], [address], [city], [state], [zip] FROM [authors] WHERE [au_id] = @au_id" 
    
    b) Delete the default parameter sections:
    		DELETE: &lt;DeleteParameters&gt;  and &lt;InsertParameters&gt; sections
    
    c) Then where I deleted those two sections add in a new section: &lt;SelectParameters&gt;
    	the 'QueryStringParameter' tells where the value for that parameter will come from
    							   It means that this will come in as part of the URL from the page.
    							   The 'name' attribute must match the field name in the SQL statement.
    							   The 'QueryStringField' is the name that will be passed in as part of the URL.
    							   		That name (i.e. "au_id") will be created later in this exercise.
    							   The 'Type' is the implied data type of the attribute.
    							   
            &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="au_id"        
                    QueryStringField="au_id" Type="Int32" /&gt;
            &lt;/SelectParameters&gt;    		
    
    
    Note if you were to run the page now it would not work b/c there are no parameters being passed in the URL.
    This is what is being passed at this time:
    	http://localhost:50074/DEV_ASP_NET_Web_Site/AuthorUpdate.aspx
    	
 4] Add subs to Code-behind:
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    Partial Class AuthorUpdate
    Inherits System.Web.UI.Page
	
	    Protected Sub Page_Load(sender As Object, e As EventArgs)
	
	    End Sub
	    Protected Sub DetailView_ItemUpdate(sender As Object, e As DetailsViewUpdatedEventArgs)
	        If e.AffectedRows = 1 Then
	            Response.Redirect("~/Authors.aspx")
	        End If
	    End Sub
	    Protected Sub DetailView_ItemCommand(sender As Object, e As DetailsViewCommandEventArgs)
	        If e.CommandName = "Cancel" Then
	            Response.Redirect("~/Authors.aspx")
	        End If
	    End Sub

	End Class	  
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

5] add attributes to &lt;asp:DetailsView&gt;:

            OnItemUpdated="DetailView_ItemUpdate"
            OnItemCommand="DetailView_ItemCommand"
    	  
6] Now need to modify the DataGrid page to pass the Parameter for the SELECT statement
	in the URL.    
    
6a] Go to the "GridView Tasks" GUI editor =&gt; 'Add New Column' =&gt; opens the 'Add Field' window
	From drop-down for 'Choose a Field type:" =&gt; HyperLinkField	 
    
    Hyperlink text {section} =&gt; (x) Specify Text: "Edit"
    {Note: could use a button or hyperlink}
    
    Hyperlink URL {section} 
    	=&gt; (x) Get URL from data field: au_id   {firstfield}
    	=&gt; ~/AuthorUpdate.aspx?au_id={0}  {in the 'URL format string' field}
    	
    		Note: This is where we are specifying the incoming parm name (i.e.?au_id=)
    		and the "{0}" indicates the first value in the list (i.e. au_id)
    [ok]
    {I went back and set the 'Header Text' to "Click to Edit"
    
    This step added the following into the Markup:
    
		&lt;asp:HyperLinkField DataNavigateUrlFields="au_id" 
		DataNavigateUrlFormatString="~/AuthorUpdate.aspx?au_id={0}" 
		HeaderText="Click to Edit" Text="Edit"&gt;

EXAMPLES    
======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################
&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="Authors.aspx.vb" Inherits="Authors" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;The Night Owl - Author List&lt;/title&gt;
    &lt;link href="styles.css" rel="Stylesheet" type="text/css"/&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
        &lt;img alt="The Night Owl" 
            src="Images/bookshelf.jpg" 
            width="800" height="110"/&gt;
    &lt;/div&gt;
    &lt;asp:Panel id="menuPanel" runat="server"&gt;
        &lt;a href="Default.aspx"&gt;Home&lt;/a&gt; |
        &lt;a href="Titles.aspx"&gt;Titles&lt;/a&gt; |
        &lt;a href="Authors.aspx"&gt;Authors&lt;/a&gt; |
        &lt;a href="Publishers.aspx"&gt;Publishers&lt;/a&gt;
    &lt;/asp:Panel&gt;
    &lt;h1&gt;&lt;span lang="en-us"&gt;Author List&lt;/span&gt;&lt;/h1&gt;
    &lt;p&gt;


        &lt;asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" 
            DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
            EmptyDataText="There are no data records to display." Width="720px" 
            AllowPaging="True" CellPadding="4" ForeColor="#333333" GridLines="None" 
            PageSize="5"&gt;
            &lt;AlternatingRowStyle BackColor="White" /&gt;
            &lt;Columns&gt;


                &lt;asp:CommandField ShowEditButton="True" /&gt;


                &lt;asp:BoundField DataField="au_lname" HeaderText="Last Nme" 
                    SortExpression="au_lname" ReadOnly="True" /&gt;
                &lt;asp:BoundField DataField="au_fname" HeaderText="F* Name" 
                    SortExpression="au_fname" ReadOnly="True" /&gt;
                &lt;asp:BoundField DataField="phone" HeaderText="phone" SortExpression="phone" /&gt;
                &lt;asp:HyperLinkField DataNavigateUrlFields="au_id" 
                    DataNavigateUrlFormatString="~/AuthorUpdate.aspx?au_id={0}" 
                    HeaderText="Click to Edit" Text="Edit"&gt;
                &lt;ItemStyle HorizontalAlign="Center" /&gt;
                &lt;/asp:HyperLinkField&gt;
            &lt;/Columns&gt;
            &lt;EditRowStyle BackColor="#7C6F57" /&gt;
            &lt;FooterStyle BackColor="#1C5E55" Font-Bold="True" ForeColor="White" /&gt;
            &lt;HeaderStyle BackColor="#1C5E55" Font-Bold="True" ForeColor="White" /&gt;
            &lt;PagerSettings Mode="NumericFirstLast" Position="TopAndBottom" /&gt;
            &lt;PagerStyle BackColor="#666666" ForeColor="White" HorizontalAlign="Center" /&gt;
            &lt;RowStyle BackColor="#E3EAEB" /&gt;
            &lt;SelectedRowStyle BackColor="#C5BBAF" Font-Bold="True" ForeColor="#333333" /&gt;
            &lt;SortedAscendingCellStyle BackColor="#F8FAFA" /&gt;
            &lt;SortedAscendingHeaderStyle BackColor="#246B61" /&gt;
            &lt;SortedDescendingCellStyle BackColor="#D4DFE1" /&gt;
            &lt;SortedDescendingHeaderStyle BackColor="#15524A" /&gt;
        &lt;/asp:GridView&gt;


    &lt;/p&gt;
    &lt;p&gt;


        &lt;asp:HyperLink ID="HyperLink1" runat="server" 
            NavigateUrl="~/Authors_Insert.aspx"&gt;Insert new Record&lt;/asp:HyperLink&gt;


    &lt;/p&gt;
    &lt;p&gt;


        &amp;nbsp;&lt;/p&gt;
    &lt;p&gt;


        &lt;asp:SqlDataSource ID="SqlDataSource1" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:mybookstoreConnectionString1 %&gt;" 
            DeleteCommand="DELETE FROM [authors] WHERE [au_id] = @au_id" 
            InsertCommand="INSERT INTO [authors] ([au_lname], [au_fname], [phone], [address], [city], [state], [zip]) VALUES (@au_lname, @au_fname, @phone, @address, @city, @state, @zip)" 
            ProviderName="&lt;%$ ConnectionStrings:mybookstoreConnectionString1.ProviderName %&gt;" 
            SelectCommand="SELECT [au_id], [au_lname], [au_fname], [phone], [address], [city], [state], [zip] FROM [authors]" 
            UpdateCommand="UPDATE [authors] SET  [phone] = @phone WHERE [au_id] = @au_id"&gt;
            &lt;DeleteParameters&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/DeleteParameters&gt;
            &lt;InsertParameters&gt;
                &lt;asp:Parameter Name="au_lname" Type="String" /&gt;
                &lt;asp:Parameter Name="au_fname" Type="String" /&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="address" Type="String" /&gt;
                &lt;asp:Parameter Name="city" Type="String" /&gt;
                &lt;asp:Parameter Name="state" Type="String" /&gt;
                &lt;asp:Parameter Name="zip" Type="String" /&gt;
            &lt;/InsertParameters&gt;
            &lt;UpdateParameters&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/UpdateParameters&gt; 
        &lt;/asp:SqlDataSource&gt;


    &lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;

		
======Authors.aspx - Code-Behind =====================================================================================================================
############################################################################################################################
Partial Class Authors
    Inherits System.Web.UI.Page

End Class

======Authors_Update.aspx - UI Source=====================================================================================================================
############################################################################################################################
&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="AuthorUpdate.aspx.vb" Inherits="AuthorUpdate" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;The Night Owl - Author Detail&lt;/title&gt;
    &lt;link href="styles.css" rel="Stylesheet" type="text/css"/&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;customControls:HeaderWithProperty ID="Header1" runat="server" heading="Update Author"/&gt;    
    &lt;p&gt;
        &lt;asp:DetailsView ID="DetailsView1" runat="server" AutoGenerateRows="False" 
            CellPadding="4" DataKeyNames="au_id" DataSourceID="SqlDataSource1" 
            ForeColor="#333333" GridLines="None" Height="50px" Width="170px" 
            DefaultMode="Edit"
            OnItemUpdated="DetailView_ItemUpdate"
            OnItemCommand="DetailView_ItemCommand"&gt;

            &lt;FooterStyle BackColor="#1C5E55" Font-Bold="True" ForeColor="White" /&gt;
            &lt;CommandRowStyle BackColor="#C5BBAF" Font-Bold="True" /&gt;
            &lt;RowStyle BackColor="#E3EAEB" /&gt;
            &lt;FieldHeaderStyle BackColor="#D0D0D0" Font-Bold="True" /&gt;
            &lt;PagerStyle BackColor="#666666" ForeColor="White" HorizontalAlign="Center" /&gt;
            &lt;Fields&gt;
                &lt;asp:BoundField DataField="au_id" HeaderText="Author ID" InsertVisible="False" 
                    ReadOnly="True" SortExpression="au_id" &gt;
                &lt;HeaderStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="au_lname" HeaderText="Last Name" 
                    SortExpression="au_lname" &gt;
                &lt;HeaderStyle Wrap="False" /&gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="au_fname" HeaderText="First Name" 
                    SortExpression="au_fname" &gt;
                &lt;HeaderStyle Wrap="False" /&gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="phone" HeaderText="Phone" SortExpression="phone" &gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="address" HeaderText="Address" 
                    SortExpression="address" &gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="city" HeaderText="City" SortExpression="city" &gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="state" HeaderText="State" SortExpression="state" &gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:BoundField DataField="zip" HeaderText="Zip" SortExpression="zip" &gt;
                &lt;ItemStyle Wrap="False" /&gt;
                &lt;/asp:BoundField&gt;
                &lt;asp:CommandField ShowEditButton="True" /&gt;
            &lt;/Fields&gt;
            &lt;HeaderStyle BackColor="#1C5E55" Font-Bold="True" ForeColor="White" /&gt;
            &lt;EditRowStyle BackColor="#7C6F57" /&gt;
            &lt;AlternatingRowStyle BackColor="White" /&gt;
        &lt;/asp:DetailsView&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;asp:SqlDataSource ID="SqlDataSource1" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:mybookstoreConnectionString1 %&gt;" 
            DeleteCommand="DELETE FROM [authors] WHERE [au_id] = @au_id" 
            InsertCommand="INSERT INTO [authors] ([au_lname], [au_fname], [phone], [address], [city], [state], [zip]) VALUES (@au_lname, @au_fname, @phone, @address, @city, @state, @zip)" 
            ProviderName="&lt;%$ ConnectionStrings:mybookstoreConnectionString1.ProviderName %&gt;" 
            SelectCommand="SELECT [au_id], [au_lname], [au_fname], [phone], [address], [city], [state], [zip] FROM [authors] WHERE [au_id] = @au_id" 
            UpdateCommand="UPDATE [authors] SET [au_lname] = @au_lname, [au_fname] = @au_fname, [phone] = @phone, [address] = @address, [city] = @city, [state] = @state, [zip] = @zip WHERE [au_id] = @au_id"&gt;
            &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="au_id"
                    QueryStringField="au_id" Type="Int32" /&gt;
            &lt;/SelectParameters&gt;
            &lt;UpdateParameters&gt;
                &lt;asp:Parameter Name="au_lname" Type="String" /&gt;
                &lt;asp:Parameter Name="au_fname" Type="String" /&gt;
                &lt;asp:Parameter Name="phone" Type="String" /&gt;
                &lt;asp:Parameter Name="address" Type="String" /&gt;
                &lt;asp:Parameter Name="city" Type="String" /&gt;
                &lt;asp:Parameter Name="state" Type="String" /&gt;
                &lt;asp:Parameter Name="zip" Type="String" /&gt;
                &lt;asp:Parameter Name="au_id" Type="Int32" /&gt;
            &lt;/UpdateParameters&gt;
        &lt;/asp:SqlDataSource&gt;
    &lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
		
======Authors_Update.aspx - Code-Behind=====================================================================================================================
############################################################################################################################

Partial Class AuthorUpdate
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(sender As Object, e As EventArgs)

    End Sub
    Protected Sub DetailView_ItemUpdate(sender As Object, e As DetailsViewUpdatedEventArgs)
        If e.AffectedRows = 1 Then
            Response.Redirect("~/Authors.aspx")
        End If
    End Sub
    Protected Sub DetailView_ItemCommand(sender As Object, e As DetailsViewCommandEventArgs)
        If e.CommandName = "Cancel" Then
            Response.Redirect("~/Authors.aspx")
        End If
    End Sub

End Class

======HeadersWithProps.ascx - UI Source=====================================================================================================================
############################################################################################################################
&lt;%@ Control Language="VB" ClassName="HeaderWithProps" %&gt;

&lt;script runat="server"&gt;
    Public heading As String = "Page Heading" 'give it default value
    
&lt;/script&gt;

&lt;link href="styles.css" rel="Stylesheet" type="text/css"/&gt;

&lt;asp:Panel ID="Panel1" runat="server"&gt;
    &lt;img alt="The Night Owl" 
        src="Images/bookshelf.jpg" 
        width="800" height="110"/&gt;
&lt;/asp:Panel&gt;
&lt;asp:Panel id="menuPanel" runat="server" CssClass="menuPanelclass"&gt;
    &lt;a href="Default.aspx"&gt;Home&lt;/a&gt; |
    &lt;a href="Titles.aspx"&gt;Titles&lt;/a&gt; |
    &lt;a href="Authors.aspx"&gt;Authors&lt;/a&gt; |
    &lt;a href="Publishers.aspx"&gt;Publishers&lt;/a&gt;
&lt;/asp:Panel&gt;

&lt;h1&gt;&lt;%= heading %&gt;&lt;/h1&gt;


&lt;h3&gt; New&lt;/h3&gt;		
======web.config - MarkUp=====================================================================================================================
############################################################################################################################
&lt;?xml version="1.0"?&gt;
&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;
&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient"/&gt;
    &lt;add name="mybookstoreConnectionString1" connectionString="Data Source=HOMETOWER\DEV;Initial Catalog=mybookstore;Integrated Security=True" providerName="System.Data.SqlClient"/&gt;
  &lt;/connectionStrings&gt;
  &lt;system.web&gt;
    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0"/&gt;

    &lt;!-- this is the new part --&gt;
    
    &lt;pages&gt;
      &lt;controls&gt;
        &lt;add tagPrefix="customControls" tagName="Header" src="~/controls/Header.ascx"/&gt;
        &lt;add tagPrefix="customControls" tagName="HeaderWithProperty" src="~/controls/HeaderWithProps.ascx"/&gt;
      &lt;/controls&gt;
    &lt;/pages&gt;
    
    &lt;!-- ==================== --&gt;   
    
    
    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880"/&gt;
    &lt;/authentication&gt;
    &lt;membership&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;
    &lt;profile&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;
    &lt;roleManager enabled="false"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
        &lt;add name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;
  &lt;/system.web&gt;
  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################
		
======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################

======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################
		
======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################

======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################
		
======Authors.aspx - UI Source=====================================================================================================================
############################################################################################################################
		
		
		
		
		
		
		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_DETAILSVIEW</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_FrontEnd_ObjectDataSource_Insert_Method</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_DETAILSVIEW</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_FrontEnd_ObjectDataSource_Insert_Method</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>reference: http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.objectdatasource.insertmethod%28v=vs.100%29.aspx

I think this may be a Microsoft example??
The InsertMethod property, of the objectdatasource Markup, 
	delegates to the InsertMethod property of the ObjectDataSourceView object 
	that is associated with the ObjectDataSource object.

================================================

&lt;%@ Register TagPrefix="aspSample" Namespace="Samples.AspNet.VB" Assembly="Samples.AspNet.VB" %&gt;
&lt;%@ Import namespace="Samples.AspNet.VB" %&gt;
&lt;%@ Page language="vb" %&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;script runat="server"&gt;
Private Sub NorthwindEmployeeInserting(source As Object, e As ObjectDataSourceMethodEventArgs)

  ' The GridView control passes an array of strings in the parameters
  ' collection because that is the type it knows how to work with.
  ' However, the business object expects a custom type. Build it
  ' and add it to the parameters collection.
  Dim paramsFromPage As IDictionary = e.InputParameters

  Dim ne As New NorthwindEmployee()
  ne.FirstName  = paramsFromPage("FirstName").ToString()
  ne.LastName   = paramsFromPage("LastName").ToString()
  ne.Title      = paramsFromPage("Title").ToString()
  ne.Courtesy   = paramsFromPage("Courtesy").ToString()
  ne.Supervisor = Int32.Parse(paramsFromPage("Supervisor").ToString())

  paramsFromPage.Clear()
  paramsFromPage.Add("ne", ne)
End Sub ' NorthwindEmployeeInserting

&lt;/script&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
  &lt;head&gt;
    &lt;title&gt;ObjectDataSource - VB Example&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form id="Form1" method="post" runat="server"&gt;

        &lt;asp:detailsview
          id="DetailsView1"
          runat="server"
          autogenerateinsertbutton="True"
          datasourceid="ObjectDataSource1"&gt;
        &lt;/asp:detailsview&gt;

        &lt;asp:objectdatasource
          id="ObjectDataSource1"
          runat="server"
          selectmethod="GetEmployee"
          insertmethod="UpdateEmployeeInfo"					&lt;==== This is in the Business Tier
          oninserting="NorthwindEmployeeInserting"            &lt;==== This is in the Code-Behind
          typename="Samples.AspNet.VB.EmployeeLogic" &gt;
          &lt;selectparameters&gt;
            &lt;asp:parameter name="anID" defaultvalue="-1" /&gt;
          &lt;/selectparameters&gt;
        &lt;/asp:objectdatasource&gt;

    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;

================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_DropDownList</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>SelectedIndex_SelectedItem_SelectedValue</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_DropDownList</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>SelectedIndex_SelectedItem_SelectedValue</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


||||||||| CodeBehind |||||||||||||||||||||||||||


    Protected Sub btn_ListUsersForSelectedApplication_Click(sender As Object, e As EventArgs) Handles btn_ListUsersForSelectedApplication.Click



        Try
            If DropDownList_Application.SelectedValue &lt;&gt; "0" Then

                lbl_Message.ForeColor = Drawing.Color.White


                'Response.Redirect(fn_ReturnURL_withApplicationNameAsPARM)   'Redirects back to itself w/ the Application name in the URL

                Session("Application_SelectedIndex") = DropDownList_Application.SelectedIndex	'&lt;==   1
                Session("Application_SelectedItem") = DropDownList_Application.SelectedItem		'&lt;==  {CCWNC411_Security}
                Session("Application_SelectedValue") = DropDownList_Application.SelectedValue 	'&lt;==  "CCWNC411_Security"



                GridView_UsersInApplication.DataBind()

            Else

                lbl_Message.ForeColor = Drawing.Color.Black
                lbl_Message.Text = "You need to select an Application first"
            End If
        Catch ex As Exception
            lbl_Message.ForeColor = Drawing.Color.Black
            lbl_Message.Text = ex.Message
        End Try
    End Sub






||||||||| MarkUp |||||||||||||||||||||||||||

        &lt;asp:DropDownList 
            ID="DropDownList_Application" 
            runat="server" 
            AppendDataBoundItems="true"
            DataSourceID="SqlDataSource_DropDownList" 
            DataTextField="ApplicationName" 
            DataValueField="ApplicationName" 
            AutoPostBack="false"&gt;

        &lt;/asp:DropDownList&gt;
        
 &lt;%--  ODS for the DropDownList : Application --%&gt;

        &lt;asp:SqlDataSource ID="SqlDataSource_DropDownList_Application" 
            runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb %&gt;"        
            ProviderName="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb.ProviderName %&gt;" 
            SelectCommand="SELECT [ApplicationName], [ApplicationId] FROM [aspnet_Applications]" &gt;
        &lt;/asp:SqlDataSource&gt;       
        
     &lt;asp:ObjectDataSource 
        ID="ods_ViewDetails_User" 
        runat="server" 
        TypeName="CCWNC411_Security.ns_USER.c_USER_DL"
        DataObjectTypeName="CCWNC411_Security.ns_USER.c_USER_Record"
        SelectMethod="GetUser"
        InsertMethod="InsertUser"
        UpdateMethod="UpdateUser"
        DeleteMethod="DeleteUser"
        OnInserted="ods_ViewDetails_User_Inserted"
        OnUpdated="ods_ViewDetails_User_Updated"
        OnDeleted="ods_ViewDetails_User_Deleted"  
        OnSelecting="ods_ViewDetails_User_Selecting"&gt;
        &lt;SelectParameters&gt;
          &lt;asp:Parameter Name="UserName" Type="String" /&gt;  
          &lt;asp:Parameter Name="ApplicationName" Type="String" /&gt;  
        &lt;/SelectParameters&gt;
      &lt;/asp:ObjectDataSource&gt;
    &lt;/p&gt;
||||||||| BackEnd |||||||||||||||||||||||||||    


        Public Shared Function GetUser(ByVal UserName As String, ByVal ApplicationName As String) As List(Of c_User_Record)

            Dim c_User_Record As c_User_Record
            Dim Users As List(Of c_User_Record) = New List(Of c_User_Record)()
            Try
                Using connection As New SqlConnection(c_Database_Connection.GetConnectionString)

                    Using selectCommand As New SqlCommand()


                        selectCommand.Connection = connection
                        selectCommand.CommandText = "prj_0031_WA003_SP_001_SELECT_User_Given_ApplicationName_and_UserName"
                        ' .. and sets the command type.
                        selectCommand.CommandType = CommandType.StoredProcedure
                        selectCommand.Parameters.AddWithValue("@ApplicationName", ApplicationName)
                        selectCommand.Parameters.AddWithValue("@UserName ", UserName)

                        connection.Open()

                        Using reader As SqlDataReader = selectCommand.ExecuteReader(CommandBehavior.SingleRow)



                            If reader.Read Then

                                c_User_Record = New c_User_Record
                                c_User_Record.ApplicationName = reader("ApplicationName").ToString
                                c_User_Record.UserName = reader("UserName").ToString
                                c_User_Record.Password = reader("Password").ToString
                                c_User_Record.PasswordSalt = reader("PasswordSalt").ToString
                                c_User_Record.Email = reader("Email").ToString
                                c_User_Record.PasswordQuestion = reader("PasswordQuestion").ToString
                                c_User_Record.PasswordAnswer = reader("PasswordAnswer").ToString
                                c_User_Record.IsApproved = c_CustomFunctions.CsqlBIT(reader("IsApproved"))
                                c_User_Record.CreateDate = c_CustomFunctions.CSqlDateTime(reader("CreateDate"))
                                c_User_Record.PasswordFormat = reader("PasswordFormat").ToString
                                c_User_Record.UserId = Guid.Parse(reader("UserId").ToString())
                                c_User_Record.IsLockedOut = c_CustomFunctions.CsqlBIT(reader("IsLockedOut"))
                                c_User_Record.LastLoginDate = c_CustomFunctions.CSqlDateTime(reader("LastLoginDate"))
                                c_User_Record.FailedPasswordAttemptCount = c_CustomFunctions.CsqlInt16(reader("FailedPasswordAttemptCount"))
                                c_User_Record.LastActivityDate = c_CustomFunctions.CSqlDateTime(reader("LastActivityDate"))
                                c_User_Record.ApplicationId = Guid.Parse(reader("ApplicationId").ToString())


                                'c_User_Record.ApplicationName = c_CustomFunctions.CsqlInt32(reader("T20_PK"))
                                'c_User_Record.NameOfUser = reader("NameOfUser").ToString
                                'c_User_Record.T20_Users_Notes = reader("T20_Users_Notes").ToString
                                'c_User_Record.DefaultCompanyPolicy_e27 = c_CustomFunctions.CsqlInt16(reader("DefaultCompanyPolicy_e27"))
                                'c_User_Record.bActive = c_CustomFunctions.CsqlBIT(reader("bActive"))

                            Else
                                c_User_Record = Nothing
                            End If

                            Users.Add(c_User_Record)

                        End Using ' reader

                    End Using '  selectCommand

                End Using   'connection

            Catch ex As System.Data.SqlClient.SqlException
                c_Error.UnhandledSqlClientExceptionHandler(ex, "Get_User", k_ClassName)


            Catch ex As Exception
                c_Error.UnhandledExceptionHandler(ex, "Get_User", k_ClassName)
            Finally

            End Try

            Return Users

        End Function
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_FORMVIEW</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>DropDownList_inside_FormView</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_FORMVIEW</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>DropDownList_inside_FormView</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


&lt;!--
From: http://jwcooney.com/2012/02/28/asp-net-overview-of-binding-a-dropdownlist-to-a-formview/

1]  drag the FormView control onto your WebForm and then add a DropDownList control.
2]  drag two DataSource controls onto your WebForm and assign one to your 
	FormView control and the other to your DropDownList control along with SQL queries to populate both.
3]  Set the DataTextField and DataValueField parameters for your DropDownList. 
	The DataValueField parameter is what gets passed to your form and back to the database behind the scenes, 
	while the DataTextField parameter is what is displayed to users of your form in the DropDownList control’s options. 
	You will want to set them with the names of the database fields that your DataSource is retrieving
4]  Finally, add a parameter called SelectedValue to your DropDownList control.
	Make sure you either Bind or Eval the SelectedValue parameter to the name of the field from your database that your FormView control &amp; DataSource is working with. 
	Just to review: Bind reads and writes and Eval only reads from the DataSource.
	
	Here is an example of the DropDownList:
--&gt;

	&lt;asp:DropDownList 
		ID="ddlTestList" 
		runat="server" 
		DataSourceID="SqlDSTestList" 
		DataValueField="Id" 
		DataTextField="Desc" 
		SelectedValue='&lt;%# Eval("TestId") %&gt;' &gt;
	&lt;/asp:DropDownList&gt;



&lt;!--
From: http://jwcooney.com/2012/02/28/asp-net-overview-of-binding-a-dropdownlist-to-a-formview/

The above binding method will throw an error on your 
	WebForm if the value returned from the database is not present in the list of options of the DropDownList control. 
	Sometimes this is desired since you don’t want bad data corrupting your form, 
	but other times you do want your form to ignore this problem and simply show a blank selection. 
	In that case the form becomes self-correcting when the user saves the form with the incorrect data.

example of how to hook up a DropDownList control to a SqlDataSource control with a blank option at the top. 
	If the value returned from the FormView control is not present in the list of options for the DropDownList control, 
	then this example will not cause a page error message, but will simply show the blank option selected.		
--&gt;

&lt;asp:DropDownList 
	ID="ddlTestList" 
	runat="server" 
	DataSourceID="SqlDSTestList" 
	DataValueField="Id" 
	DataTextField="Desc" 
	SelectedValue='&lt;%# Eval("TestId") %&gt;' &gt;
&lt;/asp:DropDownList&gt;
&lt;asp:SqlDataSource 
	ID="SqlDSTestList" 
	runat="server" 
	ConnectionString="&lt;%$ ConnectionStrings:ConnTest %&gt;"
	 ProviderName="&lt;%$ ConnectionStrings:ConnTest.ProviderName %&gt;" 
	 EnableCaching="false"
	 SelectCommandType="Text" 
	 SelectCommand="SELECT '' [Id], '---' [Desc]
		 UNION
		 SELECT DISTINCT [ServiceLevelCd] [Id], [ServiceLevelCd] [Desc]
		 FROM [TestTable]
		 ORDER BY [Desc]"&gt;
 &lt;/asp:SqlDataSource&gt;




&lt;!--
FROM: http://www.beansoftware.com/ASP.NET-Tutorials/FormView-Control.aspx

Very often, used table contains column related with "one to many" relation to some column in other table in database. 
	Typical example is selecting a category, where main table usually contains only foreign key, 
	but user expects to select category name using DropDownList control, 
	instead of writing a category id directly in TextBox control.
	 
	To display category data we need second data source control. 
		Create another data source that will contain CategoryName used for DataTextField property, 
		and CategoryID field used for DataValueField property:
e.g.:
--&gt;
&lt;asp:SqlDataSource 
	ID="sdsCategory" 
	runat="server" 
	ConnectionString="&lt;%$ ConnectionStrings:ConnStr %&gt;" 
	SelectCommand="SELECT ID AS CategoryID, CategoryName FROM Categories"&gt;
&lt;/asp:SqlDataSource&gt;

&lt;!--
Set values of DataTextField and DataValueField properties and that is enough for inserting a new record in InsertItemTemplate. 
	For EditItemTemplate, 
		you can select current value from first data source with Bind() function. 
	You can show categories in DropDownList by using markup code like this:
e.g.:
--&gt;

Category: 
	&lt;asp:DropDownList 
		ID="ddlCategory"
		DataSourceID="dsCategory"
		DataTextField="CategoryName"
		DataValueField="CategoryID"
		SelectedValue='&lt;%# Bind("Category") %&gt;' 
		runat="server" &gt;
	&lt;/asp:DropDownList&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_FORMVIEW</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Open_FormView_in_EDIT_or_Insert_MODE_determinedByData</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_FORMVIEW</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Open_FormView_in_EDIT_or_Insert_MODE_determinedByData</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
&lt;!--
http://codeverge.com/asp.net.presentation-controls/open-formview-in-insert-mode/473774

you can set the DefaultMode property of the FormView to Insert.

Another technique could be that if you want to view you can pass in a querystring to the second page that passes the id of item to view. 
if the querystring's omitted then you could place it directly in Insert mode.

in the second webform, in the Page_Load event, you check if the querystring != null. 
If it is you don't change the defaultmode (set to readonly in design time) and if it's null then you can set it there to Insert.
--&gt;
VB:  If Request.QueryString("rsrecno") = Null Then
OR:  If Request.QueryString("rsrecno") = ""



&lt;!-- 
From: http://stackoverflow.com/questions/9978929/open-a-formview-in-insert-mode-only-when-its-empty

You need to wait until the FormView has been databound before doing that check, 
otherwise you'll always get "true" 
(because it does have zero items until you bind it to whatever data source is providing it with said items). 
You could do this in the databound event, preferably:
--&gt;

SomeFormView_Databound (ByVal sender As Object, ByVal e As EventArgs) Handles SomeFormView.DataBound
{
    If SomeFormView.DataItemCount = 0 Then
        SomeFormView.ChangeMode(FormViewMode.Insert)
    Else
        SomeFormView.ChangeMode(FormViewMode.Edit)
    End If
}

&lt;!-- 
from: http://stackoverflow.com/questions/11869130/accesing-controls-of-a-formview-getting-null-references
Although the default mode is set "Edit", the form view won't switch to that mode until the control is DataBound.

There is also the possibility that your data source is not returning any data. 
This will result in the EditItemTemplate being empty which might explain your null reference errors.
Try checking for a Edit_FV.DataItemCount &gt; 0 before switching into Edit mode.
--&gt; 


&lt;!-- 
from:  http://forums.asp.net/t/1519280.aspx?FormView+ChangeMode+is+not+working+

On the other hand someone else said this:
--&gt; 

protected void Page_Load(object sender, EventArgs e)   
    {   
         if(!IsPostBack)
          {
              FormView1.ChangeMode(FormViewMode.Edit); 
              FormView1.DefaultMode = FormViewMode.Edit;
          }  
    }  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_MasterPage</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_css_ForSiteMaster</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_MasterPage</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_css_ForSiteMaster</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/* DEFAULTS
----------------------------------------------------------*/

body   
{
    background: #b6b7bc;
    font-size: .80em;
    font-family: "Helvetica Neue", "Lucida Grande", "Segoe UI", Arial, Helvetica, Verdana, sans-serif;
    margin: 0px;
    padding: 0px;
    color: #696969;
}

a:link, a:visited
{
    color: #034af3;
}

a:hover
{
    color: #1d60ff;
    text-decoration: none;
}

a:active
{
    color: #034af3;
}

p
{
    margin-bottom: 10px;
    line-height: 1.6em;
}


/* HEADINGS   
----------------------------------------------------------*/

h1, h2, h3, h4, h5, h6
{
    font-size: 1.5em;
    color: #666666;
    font-variant: small-caps;
    text-transform: none;
    font-weight: 200;
    margin-bottom: 0px;
}

h1
{
    font-size: 1.6em;
    padding-bottom: 0px;
    margin-bottom: 0px;
}

h2
{
    font-size: 1.5em;
    font-weight: 600;
}

h3
{
    font-size: 1.2em;
}

h4
{
    font-size: 1.1em;
}

h5, h6
{
    font-size: 1em;
}

/* this rule styles &lt;h1&gt; and &lt;h2&gt; tags that are the 
first child of the left and right table columns */
.rightColumn &gt; h1, .rightColumn &gt; h2, .leftColumn &gt; h1, .leftColumn &gt; h2
{
    margin-top: 0px;
}


/* PRIMARY LAYOUT ELEMENTS   
----------------------------------------------------------*/

.page
{
    width: 960px;
    background-color: #fff;
    margin: 20px auto 0px auto;
    border: 1px solid #496077;
}

.header
{
    position: relative;
    margin: 0px;
    padding: 0px;
    background: #4b6c9e;
    width: 100%;
}

.header h1
{
    font-weight: 700;
    margin: 0px;
    padding: 0px 0px 0px 20px;
    color: #f9f9f9;
    border: none;
    line-height: 2em;
    font-size: 2em;
}

.main
{
    padding: 0px 12px;
    margin: 12px 8px 8px 8px;
    min-height: 420px;
}

.leftCol
{
    padding: 6px 0px;
    margin: 12px 8px 8px 8px;
    width: 200px;
    min-height: 200px;
}

.footer
{
    color: #4e5766;
    padding: 8px 0px 0px 0px;
    margin: 0px auto;
    text-align: center;
    line-height: normal;
}


/* TAB MENU   
----------------------------------------------------------*/

div.hideSkiplink
{
    background-color:#3a4f63;
    width:100%;
}

div.menu
{
    padding: 4px 0px 4px 8px;
}

div.menu ul
{
    list-style: none;
    margin: 0px;
    padding: 0px;
    width: auto;
}

div.menu ul li a, div.menu ul li a:visited
{
    background-color: #465c71;
    border: 1px #4e667d solid;
    color: #dde4ec;
    display: block;
    line-height: 1.35em;
    padding: 4px 20px;
    text-decoration: none;
    white-space: nowrap;
}

div.menu ul li a:hover
{
    background-color: #bfcbd6;
    color: #465c71;
    text-decoration: none;
}

div.menu ul li a:active
{
    background-color: #465c71;
    color: #cfdbe6;
    text-decoration: none;
}

/* FORM ELEMENTS   
----------------------------------------------------------*/

fieldset
{
    margin: 1em 0px;
    padding: 1em;
    border: 1px solid #ccc;
}

fieldset p 
{
    margin: 2px 12px 10px 10px;
}

fieldset.login label, fieldset.register label, fieldset.changePassword label
{
    display: block;
}

fieldset label.inline 
{
    display: inline;
}

legend 
{
    font-size: 1.1em;
    font-weight: 600;
    padding: 2px 4px 8px 4px;
}

input.textEntry 
{
    width: 320px;
    border: 1px solid #ccc;
}

input.passwordEntry 
{
    width: 320px;
    border: 1px solid #ccc;
}

div.accountInfo
{
    width: 42%;
}

/* MISC  
----------------------------------------------------------*/

.clear
{
    clear: both;
}

.title
{
    display: block;
    float: left;
    text-align: left;
    width: auto;
}

.loginDisplay
{
    font-size: 1.1em;
    display: block;
    text-align: right;
    padding: 10px;
    color: White;
}

.loginDisplay a:link
{
    color: white;
}

.loginDisplay a:visited
{
    color: white;
}

.loginDisplay a:hover
{
    color: white;
}

.failureNotification
{
    font-size: 1.2em;
    color: Red;
}

.bold
{
    font-weight: bold;
}

.submitButton
{
    text-align: right;
    padding-right: 10px;
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_MasterPage</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_css_for_NewHire_MasterPage</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_MasterPage</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_css_for_NewHire_MasterPage</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/* Color Palette

background: #808040;        - Olive - Header
background-color:#FAC905;   - Gold  -  skipLink
background-color:#CEA604;   - Dark Gold - Nav
*/



/* DEFAULTS
----------------------------------------------------------*/

body   
{
    background-image:url('../images/background_1.jpg');
    font-size: .80em;
    font-family: "Helvetica Neue", "Lucida Grande", "Segoe UI", Arial, Helvetica, Verdana, sans-serif;
    margin: 0px;
    padding: 0px;
    color: #696969; 

    
}

a:link, a:visited
{
    color: #034af3;
}

a:hover
{
    color: #1d60ff;
    text-decoration: none;
}

a:active
{
    color: #034af3;
}

p
{
    margin-bottom: 10px;
    line-height: 1.6em;
}


/* HEADINGS   
----------------------------------------------------------*/

h1, h2, h3, h4, h5, h6
{
    font-size: 1.5em;
    color: #666666;
    font-variant: small-caps;
    text-transform: none;
    font-weight: 200;
    margin-bottom: 0px;
}

h1
{
    font-size: 1.6em;
    padding-bottom: 0px;
    margin-bottom: 0px;
}

h2
{
    font-size: 1.5em;
    font-weight: 600;
}

h3
{
    font-size: 1.2em;
}

h4
{
    font-size: 1.1em;
}

h5, h6
{
    font-size: 1em;
}

/* this rule styles &lt;h1&gt; and &lt;h2&gt; tags that are the 
first child of the left and right table columns */
.rightColumn &gt; h1, .rightColumn &gt; h2, .leftColumn &gt; h1, .leftColumn &gt; h2
{
    margin-top: 0px;
}


/* PRIMARY LAYOUT ELEMENTS   
----------------------------------------------------------*/

.page
{
    width: 960px;
    background-color: #fff;
    margin: 20px auto 0px auto;
    border: 1px solid #496077;
}

.header
{
    position: relative;
    margin: 0px;
    padding: 0px;
    /* background: #4b6c9e; */
    background: #808040;
    width: 100%;
}

.header h1
{
    border-style: none;
    border-color: inherit;
    border-width: medium;
    font-weight: 700;
    margin: 0px;
    padding: 0px 0px 0px 20px;
    color: #f9f9f9;
    line-height: 2em;
    font-size: 2em;
    width: 264px;
}

.main
{
    padding: 0px 12px;
    margin: 12px 8px 8px 8px;
    min-height: 420px;
}

.leftCol
{
    padding: 6px 0px;
    margin: 12px 8px 8px 8px;
    width: 200px;
    min-height: 200px;
}

.footer
{
    color: #4e5766;
    padding: 8px 0px 0px 0px;
    margin: 0px auto;
    text-align: center;
    line-height: normal;
}


/* TAB MENU   
----------------------------------------------------------*/

div.hideSkiplink
{
    /* background-color:#3a4f63; */
    background-color:#FAC905;
    width:100%;
}

div.menu
{
    padding: 4px 0px 4px 8px;
}

div.menu ul
{
    list-style: none;
    margin: 0px;
    padding: 0px;
    width: auto;
}

div.menu ul li a, div.menu ul li a:visited
{
     /*   background-color: #465c71; */
    background-color:#CEA604;
    border: 1px #4e667d solid;
    color: #dde4ec;
    display: block;
    line-height: 1.35em;
    padding: 4px 20px;
    text-decoration: none;
    white-space: nowrap;
}

div.menu ul li a:hover
{
    background-color: #bfcbd6;
    color: #465c71;
    text-decoration: none;
}

div.menu ul li a:active
{
    background-color: #465c71;
    color: #cfdbe6;
    text-decoration: none;
}

/* FORM ELEMENTS   
----------------------------------------------------------*/

fieldset
{
    margin: 1em 0px;
    padding: 1em;
    border: 1px solid #ccc;
}

fieldset p 
{
    margin: 2px 12px 10px 10px;
}

fieldset.login label, fieldset.register label, fieldset.changePassword label
{
    display: block;
}

fieldset label.inline 
{
    display: inline;
}

legend 
{
    font-size: 1.1em;
    font-weight: 600;
    padding: 2px 4px 8px 4px;
}

input.textEntry 
{
    width: 320px;
    border: 1px solid #ccc;
}

input.passwordEntry 
{
    width: 320px;
    border: 1px solid #ccc;
}

div.accountInfo
{
    width: 42%;
}

/* MISC  
----------------------------------------------------------*/

.clear
{
    clear: both;
}

.title
{
    display: block;
    float: left;
    text-align: left;
    width: auto;
}

.loginDisplay
{
    font-size: 1.1em;
    display: block;
    text-align: right;
    padding: 10px;
    color: White;
}

.loginDisplay a:link
{
    color: white;
}

.loginDisplay a:visited
{
    color: white;
}

.loginDisplay a:hover
{
    color: white;
}

.failureNotification
{
    font-size: 1.2em;
    color: Red;
}

.bold
{
    font-weight: bold;
}

.submitButton
{
    text-align: right;
    padding-right: 10px;
}

/* Modifications  
----------------------------------------------------------*/

.header img
{
	float: left;    
}

.header h1
{
    float: right;  
}


/*-----This is not working yet. The tables are still not centered---------*/

.CenterTheTablesInThisSpan .cssTable_Notes, .cssTable_HR_Required, .cssTable_HR_Delay, .cssTable_Supervisor_Required, .cssTable_Supervisor_Delay, .cssTable_Supervisor_NotRequired, .cssTable_FacilityCoordinator, .cssTable_Security, .cssTable_Admin
{
 
 	margin:auto;
 	padding: auto; 
   
}

/* Tables in Forms =========================================================================================================================================================================================================================================
----------------------------------------------------------*/
.cssFormView_DetailsForm .cssTable_Notes, .cssTable_HR_Required, .cssTable_HR_Delay, .cssTable_Supervisor_Required, .cssTable_Supervisor_Delay, .cssTable_Supervisor_NotRequired, .cssTable_FacilityCoordinator, .cssTable_Security, .cssTable_Admin
{
    border: 1px solid black;
    table-layout: fixed;
    width: 800px;   

}

.cssFormView_DetailsForm .cssTableCell_FieldName
{

    width: 200px;
}

/* Table: Table_HR_Required 
----------------------------------------------------------*/
.cssTable_HR_Required, .cssTable_Supervisor_Required, .cssTable_FacilityCoordinator
{
    color:Black;
    background-color:#95DEF0;   
}

.cssTable_HR_Required .cssTableCell_data, .cssTable_Supervisor_Required .cssTableCell_data, .cssTable_FacilityCoordinator .cssTableCell_data
{
    background-color:#27BBE0
    
}

/* Table: Table_HR_Delay 
----------------------------------------------------------*/
.cssTable_HR_Delay, .cssTable_Supervisor_Delay, .cssTable_Security
{
    color:Black;
    background-color:#C8FF91;   
}

.cssTable_HR_Delay .cssTableCell_data, .cssTable_Supervisor_Delay .cssTableCell_data, .cssTable_Security .cssTableCell_data
{
    background-color:#68D000
    
}

/* Table: Table_Notes 
----------------------------------------------------------*/
.cssTable_Notes
{
    color:Black;
    background-color:#FDD7DC;   
}

.cssTable_Notes .cssTableCell_data
{
    color:Yellow;
    background-color:#BE0A20
    
}

/* Table: Table_Supervisor_NotRequired 
----------------------------------------------------------*/
.cssTable_Supervisor_NotRequired
{
    color:Black;
    background-color:#FBFD9D;   
}

.cssTable_Supervisor_NotRequired .cssTableCell_data
{
    color:Black;
    background-color:#F3FA0C
    
}

/* Message: DIV, Table cells
----------------------------------------------------------*/
#Message_DIV        /* This is not in use */
{
background-color:#f9f9f9; 
    width:40em;
    left:0;

}

#Message_Table
{
background-color:#a9a9a9; 
    width:auto;
    left:0;

}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_StronglyTyped_TheWebPage</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_StronglyTyped_TheWebPage</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;%@ Page language="VB" %&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;script runat="server"&gt;

  Sub EmployeesDetailsView_ItemInserted(sender As Object, e As DetailsViewInsertedEventArgs)  
    EmployeesGridView.DataBind()  
  End Sub  

  Sub EmployeesDetailsView_ItemUpdated(sender As Object, e As DetailsViewUpdatedEventArgs)  
    EmployeesGridView.DataBind()
  End Sub  

  Sub EmployeesDetailsView_ItemDeleted(sender As Object, e As DetailsViewDeletedEventArgs)  
    EmployeesGridView.DataBind()
  End Sub




  Sub EmployeesGridView_OnSelectedIndexChanged(sender As Object, e As EventArgs)  				'&lt;== When user clicks 'Select', it sets the DetailsView EmployeeID 
  																								'		to that of the GridView, and then reBinds the DetailsView
    EmployeeDetailsObjectDataSource.SelectParameters("EmployeeID").DefaultValue = _
      EmployeesGridView.SelectedDataKey.Value.ToString()
    EmployeesDetailsView.DataBind()
  End Sub
  
  
  

  Sub EmployeeDetailsObjectDataSource_OnInserted(sender As Object, e As ObjectDataSourceStatusEventArgs)  
    EmployeeDetailsObjectDataSource.SelectParameters("EmployeeID").DefaultValue = _
      e.ReturnValue.ToString()
    EmployeesDetailsView.DataBind()
  End Sub

  Sub EmployeeDetailsObjectDataSource_OnUpdated(sender As Object, e As ObjectDataSourceStatusEventArgs)  
    If CInt(e.ReturnValue) = 0 Then _
      Msg.Text = "Employee was not updated. Please try again."
  End Sub

  Sub EmployeeDetailsObjectDataSource_OnDeleted(sender As Object, e As ObjectDataSourceStatusEventArgs)  
    If CInt(e.ReturnValue) = 0 Then _
      Msg.Text = "Employee was not deleted. Please try again."
  End Sub

  Sub Page_Load()  
    Msg.Text = ""
  End Sub

&lt;/script&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
  &lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;ObjectDataSource Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;

      &lt;h3&gt;ObjectDataSource Example&lt;/h3&gt;
      &lt;asp:Label id="Msg" runat="server" ForeColor="Red" /&gt;

      &lt;asp:ObjectDataSource 
        ID="EmployeesObjectDataSource" 
        runat="server" 
        TypeName="StronglyTyped.AspNet.ObjectDataSource.NorthwindEmployeeData"			&lt;== NameSpace (of the code) "." Class of the Public NorthwindEmployee DataLayer
        																					Note: it has a Public New() sub 
        DataObjectTypeName="StronglyTyped.AspNet.ObjectDataSource.NorthwindEmployee"	&lt;== NameSpace (of the code) "." Class of the Public NorthwindEmployee Record
        																					Note: it has a Public New() sub
	    SortParameterName="SortColumns"						&lt;== This is passing as " ", and the code did needed to be fixed/adjusted
        EnablePaging="true"
        StartRowIndexParameterName="StartRecord"
        MaximumRowsParameterName="MaxRecords" 				&lt;== This is passing as "-1", and the code did needed to be fixed/adjusted
        SelectMethod="GetAllEmployees" &gt;					&lt;== Function(Data Layer) IN: parm list, RETURNS: List(Of NorthwindEmployee)
      &lt;/asp:ObjectDataSource&gt;


      &lt;asp:ObjectDataSource 
        ID="EmployeeDetailsObjectDataSource" 
        runat="server" 
        TypeName="StronglyTyped.AspNet.ObjectDataSource.NorthwindEmployeeData" 			&lt;== NameSpace (of the code) "." Class of the Public NorthwindEmployee Record
        																					Note: it has a Public New() sub
        DataObjectTypeName="StronglyTyped.AspNet.ObjectDataSource.NorthwindEmployee"	&lt;== NameSpace (of the code) "." Class of the Public NorthwindEmployee Record
        																					Note: it has a Public New() sub
        SelectMethod="GetEmployee"														&lt;== Function(Data Layer) IN: parm list, RETURNS: List(Of NorthwindEmployee)
        InsertMethod="InsertEmployee"													&lt;== Function(Data Layer) IN: NorthwindEmployee (object), RETURNS: Integer
        UpdateMethod="UpdateEmployee"													&lt;== Function(Data Layer) IN: NorthwindEmployee (object), RETURNS: Integer
        DeleteMethod="DeleteEmployee"													&lt;== Function(Data Layer) IN: NorthwindEmployee (object), RETURNS: Integer
        OnInserted="EmployeeDetailsObjectDataSource_OnInserted"							&lt;== Sub(Code-Behind Layer) IN: Event Signature (sender As Object, e As ObjectDataSourceStatusEventArgs) 
        OnUpdated="EmployeeDetailsObjectDataSource_OnUpdated"							&lt;== Sub(Code-Behind Layer) IN: Event Signature (sender As Object, e As ObjectDataSourceStatusEventArgs) 
        OnDeleted="EmployeeDetailsObjectDataSource_OnDeleted"&gt;							&lt;== Sub(Code-Behind Layer) IN: Event Signature (sender As Object, e As ObjectDataSourceStatusEventArgs)
        &lt;SelectParameters&gt;
          &lt;asp:Parameter Name="EmployeeID" Type="Int32" /&gt;  
        &lt;/SelectParameters&gt;
      &lt;/asp:ObjectDataSource&gt;


      &lt;table cellspacing="10"&gt;
        &lt;tr&gt;
          &lt;td valign="top"&gt;
            &lt;asp:GridView ID="EmployeesGridView" 
              DataSourceID="EmployeesObjectDataSource" 
              AutoGenerateColumns="false"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="5"
              DataKeyNames="EmployeeID" 
              OnSelectedIndexChanged="EmployeesGridView_OnSelectedIndexChanged"
              RunAt="server"&gt;

              &lt;HeaderStyle backcolor="lightblue" forecolor="black"/&gt;

              &lt;Columns&gt;                
                &lt;asp:ButtonField Text="Details..."											&lt;== The button to open the Details View 
                                 HeaderText="Show Details"
                                 CommandName="Select"/&gt;  

                &lt;asp:BoundField DataField="EmployeeID" HeaderText="Employee ID" SortExpression="EmployeeID" /&gt;
                &lt;asp:BoundField DataField="FirstName"  HeaderText="First Name" SortExpression="FirstName" /&gt;
                &lt;asp:BoundField DataField="LastName"   HeaderText="Last Name" SortExpression="LastName, FirstName" /&gt;                    
              &lt;/Columns&gt;                
            &lt;/asp:GridView&gt;            
          &lt;/td&gt;
          &lt;td valign="top"&gt;                
            &lt;asp:DetailsView ID="EmployeesDetailsView"
              DataSourceID="EmployeeDetailsObjectDataSource"
              AutoGenerateRows="false"
              EmptyDataText="No records."      
              DataKeyNames="EmployeeID"     
              Gridlines="Both" 
              AutoGenerateInsertButton="true"
              AutoGenerateEditButton="true"
              AutoGenerateDeleteButton="true"
              OnItemInserted="EmployeesDetailsView_ItemInserted"
              OnItemUpdated="EmployeesDetailsView_ItemUpdated"
              OnItemDeleted="EmployeesDetailsView_ItemDeleted" 
              RunAt="server"&gt;

              &lt;HeaderStyle backcolor="Navy" forecolor="White"/&gt;

              &lt;RowStyle backcolor="White"/&gt;

              &lt;AlternatingRowStyle backcolor="LightGray"/&gt;

              &lt;EditRowStyle backcolor="LightCyan"/&gt;

              &lt;Fields&gt;                  
                &lt;asp:BoundField DataField="EmployeeID" HeaderText="Employee ID" InsertVisible="False" ReadOnly="true"/&gt;                    
                &lt;asp:BoundField DataField="FirstName"  HeaderText="First Name"/&gt;
                &lt;asp:BoundField DataField="LastName"   HeaderText="Last Name"/&gt;                    
                &lt;asp:BoundField DataField="Address"    HeaderText="Address"/&gt;                    
                &lt;asp:BoundField DataField="City"       HeaderText="City"/&gt;                        
                &lt;asp:BoundField DataField="Region"     HeaderText="Region"/&gt;
                &lt;asp:BoundField DataField="PostalCode" HeaderText="Postal Code"/&gt;                    
              &lt;/Fields&gt;                    
            &lt;/asp:DetailsView&gt;
          &lt;/td&gt;                
        &lt;/tr&gt;            
      &lt;/table&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>3_Master-GridView_Slave_DetailsView_BackEnd</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>3_Master-GridView_Slave_DetailsView_BackEnd</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Imports System
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections.Generic
Imports System.Web.UI
Imports System.Web.UI.WebControls
Imports System.ComponentModel   '&lt;============
Imports System.Data.SqlTypes

Namespace ns_USER

    Public Class c_User_Record

        '-------- in the CREATE SP
        Private _ApplicationName As String = ""
        Private _UserName As String = ""
        Private _Password As String = ""
        Private _PasswordSalt As String = ""
        Private _Email As String = ""
        Private _PasswordQuestion As String = ""
        Private _PasswordAnswer As String = ""
        Private _IsApproved As Object
        Private _PasswordFormat As Object
        Private _UserId As Object


        '------- in the SELECT SP, but not in the CREATE SP

        Private _IsLockedOut As Object
        Private _LastLoginDate As Object
        Private _FailedPasswordAttemptCount As Object
        Private _LastActivityDate As Object
        Private _ApplicationId As Object


        'NOT USED that I know of

        Private _CreateDate As Object
        Private _UniqueEmail As Object
        Private _Comment As String = ""
        Private _TablesToDeleteFrom As SqlInt16 = 15
        Private _NumTablesDeletedFrom As SqlInt16 = 0
        Private _IsPasswordCorrect As Object
        Private _MaxInvalidPasswordAttempts As Object
        Private _PasswordAttemptWindow As Object
        Private _UpdateLastLoginActivityDate As Object
        Private _LastPasswordChangedDate As Object
        Private _LastLockoutDate As Object
        Private _CurrentTimeUtc As Object


        '---
        Property ApplicationName As String
            Get
                Return _ApplicationName
            End Get
            Set(ByVal value As String)
                _ApplicationName = value
            End Set
        End Property
        '---
        Property UserName As String
            Get
                Return _UserName
            End Get
            Set(ByVal value As String)
                _UserName = value
            End Set
        End Property
        '---
        Property Password As String
            Get
                Return _Password
            End Get
            Set(ByVal value As String)
                _Password = value
            End Set
        End Property
        '---
        Property PasswordSalt As String
            Get
                Return _PasswordSalt
            End Get
            Set(ByVal value As String)
                _PasswordSalt = value
            End Set
        End Property
        '---
        Property Email As String
            Get
                Return _Email
            End Get
            Set(ByVal value As String)
                _Email = value
            End Set
        End Property
        '---
        Property PasswordQuestion As String
            Get
                Return _PasswordQuestion
            End Get
            Set(ByVal value As String)
                _PasswordQuestion = value
            End Set
        End Property
        '---
        Property PasswordAnswer As String
            Get
                Return _PasswordAnswer
            End Get
            Set(ByVal value As String)
                _PasswordAnswer = value
            End Set
        End Property
        '---
        Property IsApproved As Object
            Get
                Return _IsApproved
            End Get
            Set(ByVal value As Object)
                _IsApproved = value
            End Set
        End Property

        '---
        Property CurrentTimeUtc As Object
            Get
                Return _CurrentTimeUtc
            End Get
            Set(ByVal value As Object)
                _CurrentTimeUtc = value
            End Set
        End Property

        '---
        Property CreateDate As Object
            Get
                Return _CreateDate
            End Get
            Set(ByVal value As Object)
                _CreateDate = value
            End Set
        End Property

        '---
        Property UniqueEmail As Object
            Get
                Return _UniqueEmail
            End Get
            Set(ByVal value As Object)
                _UniqueEmail = value
            End Set
        End Property

        Property PasswordFormat As Object
            Get
                Return _PasswordFormat
            End Get
            Set(ByVal value As Object)
                _PasswordFormat = value
            End Set
        End Property
        '---
        Property UserId As Object
            Get
                Return _UserId
            End Get
            Set(ByVal value As Object)
                _UserId = value
            End Set
        End Property
        '---
        Property Comment As String
            Get
                Return _Comment
            End Get
            Set(ByVal value As String)
                _Comment = value
            End Set
        End Property
        '---
        Property LastLoginDate As Object
            Get
                Return _LastLoginDate
            End Get
            Set(ByVal value As Object)
                _LastLoginDate = value
            End Set
        End Property

        '---
        Property LastActivityDate As Object
            Get
                Return _LastActivityDate
            End Get
            Set(ByVal value As Object)
                _LastActivityDate = value
            End Set
        End Property

        Property TablesToDeleteFrom As Object
            Get
                Return _TablesToDeleteFrom
            End Get
            Set(ByVal value As Object)
                _TablesToDeleteFrom = value
            End Set
        End Property
        '---

        Property NumTablesDeletedFrom As Object
            Get
                Return _NumTablesDeletedFrom
            End Get
            Set(ByVal value As Object)
                _NumTablesDeletedFrom = value
            End Set
        End Property
        '---

        Property IsPasswordCorrect As Object
            Get
                Return _IsPasswordCorrect
            End Get
            Set(ByVal value As Object)
                _IsPasswordCorrect = value
            End Set
        End Property
        '--- 

        Property MaxInvalidPasswordAttempts As Object
            Get
                Return _MaxInvalidPasswordAttempts
            End Get
            Set(ByVal value As Object)
                _MaxInvalidPasswordAttempts = value
            End Set
        End Property
        '--- 

        Property PasswordAttemptWindow As Object
            Get
                Return _PasswordAttemptWindow
            End Get
            Set(ByVal value As Object)
                _PasswordAttemptWindow = value
            End Set
        End Property
        '---

        Property UpdateLastLoginActivityDate As Object
            Get
                Return _UpdateLastLoginActivityDate
            End Get
            Set(ByVal value As Object)
                _UpdateLastLoginActivityDate = value
            End Set
        End Property
        '---
        Property LastPasswordChangedDate As Object
            Get
                Return _LastPasswordChangedDate
            End Get
            Set(ByVal value As Object)
                _LastPasswordChangedDate = value
            End Set
        End Property
        '---


        Property IsLockedOut As Object
            Get
                Return _IsLockedOut
            End Get
            Set(ByVal value As Object)
                _IsLockedOut = value
            End Set
        End Property
        '---
        Property LastLockoutDate As Object
            Get
                Return _LastLockoutDate
            End Get
            Set(ByVal value As Object)
                _LastLockoutDate = value
            End Set
        End Property

        Property FailedPasswordAttemptCount As Object
            Get
                Return _FailedPasswordAttemptCount
            End Get
            Set(ByVal value As Object)
                _FailedPasswordAttemptCount = value
            End Set
        End Property
        '---
        Property ApplicationId As Object
            Get
                Return _ApplicationId
            End Get
            Set(ByVal value As Object)

                If (value Is DBNull.Value) Then
                    value = Guid.Parse("{00000000-0000-0000-0000-000000000000}").ToString
                    _ApplicationId = value
                Else
                    _ApplicationId = value
                End If


            End Set
        End Property
        '---

        '=======================================================


        Public Sub New(
            ByVal sApplicationName As String,
            ByVal sUserName As String
            )

            Me.ApplicationName = sApplicationName
            Me.UserName = sUserName

        End Sub

        Public Sub New()
        End Sub
    End Class       'c_User_Record



    Public Class c_USER_DL

        Private Const k_ClassName As String = "c_USER_DL"

        Private _connectionString As String

        Public Sub New()
            Initialize()
        End Sub

        Public Sub Initialize()

        End Sub

        Public Shared Function GetAllUsers_GivenApplicationName(ApplicationName As String) As List(Of c_User_Record)

            If ApplicationName Is Nothing Then
                ApplicationName = "No Application Chosen"
            End If

            Dim UsersForApplication_LIST As List(Of c_User_Record) = New List(Of c_User_Record)

            Try
                Using connection As SqlConnection = c_Database_Connection.GetConnection

                    Using selectCommand As New SqlCommand()

                        selectCommand.Connection = connection
                        selectCommand.CommandText = "aspnet_Membership_GetAllUsers"
                        selectCommand.CommandType = CommandType.StoredProcedure
                        selectCommand.Parameters.AddWithValue("@ApplicationName", ApplicationName)
                        selectCommand.Parameters.AddWithValue("@PageIndex", 0)
                        selectCommand.Parameters.AddWithValue("@PageSize", 100)

                        connection.Open()
                        Using reader As SqlDataReader = selectCommand.ExecuteReader
                            Dim c_User_Record As c_User_Record
                            Do While reader.Read

                                c_User_Record = New c_User_Record

                                c_User_Record.UserName = reader("UserName").ToString
                                c_User_Record.Email = reader("Email").ToString
                                c_User_Record.PasswordQuestion = reader("PasswordQuestion").ToString
                                c_User_Record.Comment = reader("Comment").ToString
                                c_User_Record.IsApproved = c_CustomFunctions.CsqlBIT(reader("IsApproved").ToString)
                                c_User_Record.CreateDate = c_CustomFunctions.CSqlDateTime(reader("CreateDate").ToString)
                                c_User_Record.LastLoginDate = c_CustomFunctions.CSqlDateTime(reader("LastLoginDate").ToString)
                                c_User_Record.LastActivityDate = c_CustomFunctions.CSqlDateTime(reader("LastActivityDate").ToString)
                                c_User_Record.LastPasswordChangedDate = c_CustomFunctions.CSqlDateTime(reader("LastPasswordChangedDate").ToString)
                                ' *********
                                c_User_Record.UserId = reader("UserId").ToString
                                ' *********                                
                                'c_User_Record.IsLockedOut = c_CustomFunctions.CsqlBIT(reader("IsLockedOut").ToString)
                                c_User_Record.LastLockoutDate = c_CustomFunctions.CSqlDateTime(reader("LastLockoutDate").ToString)

                                UsersForApplication_LIST.Add(c_User_Record)
                            Loop
                        End Using    'reader

                    End Using  'selectCommand

                End Using   'connection

            Catch ex As System.Data.SqlClient.SqlException

                Throw New ApplicationException(ex.Message)

            Catch ex As Exception
                Throw New ApplicationException(ex.Message)

            Finally

            End Try

            Return UsersForApplication_LIST

        End Function

        ' Select an employee.

        Public Shared Function GetUser(ByVal UserName As String, ByVal ApplicationName As String) As List(Of c_User_Record)

            Dim c_User_Record As c_User_Record
            Dim Users As List(Of c_User_Record) = New List(Of c_User_Record)()
            Try
                Using connection As New SqlConnection(c_Database_Connection.GetConnectionString)

                    Using selectCommand As New SqlCommand()


                        selectCommand.Connection = connection
                        selectCommand.CommandText = "prj_0031_WA003_SP_001_SELECT_User_Given_ApplicationName_and_UserName"
                        ' .. and sets the command type.
                        selectCommand.CommandType = CommandType.StoredProcedure
                        selectCommand.Parameters.AddWithValue("@ApplicationName", ApplicationName)
                        selectCommand.Parameters.AddWithValue("@UserName ", UserName)

                        connection.Open()

                        Using reader As SqlDataReader = selectCommand.ExecuteReader(CommandBehavior.SingleRow)



                            If reader.Read Then

                                c_User_Record = New c_User_Record
                                c_User_Record.ApplicationName = reader("ApplicationName").ToString
                                c_User_Record.UserName = reader("UserName").ToString
                                c_User_Record.Password = reader("Password").ToString
                                c_User_Record.PasswordSalt = reader("PasswordSalt").ToString
                                c_User_Record.Email = reader("Email").ToString
                                c_User_Record.PasswordQuestion = reader("PasswordQuestion").ToString
                                c_User_Record.PasswordAnswer = reader("PasswordAnswer").ToString
                                c_User_Record.IsApproved = c_CustomFunctions.CsqlBIT(reader("IsApproved"))
                                c_User_Record.CreateDate = c_CustomFunctions.CSqlDateTime(reader("CreateDate"))
                                c_User_Record.PasswordFormat = reader("PasswordFormat").ToString
                                c_User_Record.UserId = Guid.Parse(reader("UserId").ToString())
                                c_User_Record.IsLockedOut = c_CustomFunctions.CsqlBIT(reader("IsLockedOut"))
                                c_User_Record.LastLoginDate = c_CustomFunctions.CSqlDateTime(reader("LastLoginDate"))
                                c_User_Record.FailedPasswordAttemptCount = c_CustomFunctions.CsqlInt16(reader("FailedPasswordAttemptCount"))
                                c_User_Record.LastActivityDate = c_CustomFunctions.CSqlDateTime(reader("LastActivityDate"))
                                c_User_Record.ApplicationId = Guid.Parse(reader("ApplicationId").ToString())


                            Else
                                c_User_Record = Nothing
                            End If

                            Users.Add(c_User_Record)

                        End Using ' reader

                    End Using '  selectCommand

                End Using   'connection

            Catch ex As System.Data.SqlClient.SqlException
                c_Error.UnhandledSqlClientExceptionHandler(ex, "Get_User", k_ClassName)


            Catch ex As Exception
                c_Error.UnhandledExceptionHandler(ex, "Get_User", k_ClassName)
            Finally

            End Try

            Return Users

        End Function

        Public Shared Function UpdateUser(User As c_User_Record) As Integer 'Just updates the Password


            User.CurrentTimeUtc = fn_DotNetDateTime_to_SQLDateTime(Now())
            User.PasswordSalt = User.Password
            User.PasswordFormat = 0
            User.MaxInvalidPasswordAttempts = 100
            User.PasswordAttemptWindow = 100
            User.PasswordAnswer = String.Empty


            Dim iReturn As Integer = 99

            Try

                Using connection As SqlConnection = c_Database_Connection.GetConnection
                    '====================================================================

                    Using cmd As New SqlCommand("aspnet_Membership_ResetPassword", connection)

                        cmd.CommandType = CommandType.StoredProcedure

                        Dim prm As New SqlParameter("RETURN", SqlDbType.Int)
                        cmd.Parameters.Add(prm)
                        prm.Direction = ParameterDirection.ReturnValue


                        '---
                        'REQUIRED:
                        cmd.Parameters.Add(New SqlParameter("@ApplicationName", SqlDbType.NVarChar, 256)).Value = User.ApplicationName
                        cmd.Parameters.Add(New SqlParameter("@UserName", SqlDbType.NVarChar, 256)).Value = User.UserName
                        cmd.Parameters.Add(New SqlParameter("@NewPassword", SqlDbType.NVarChar, 128)).Value = User.Password
                        '---
                        '=============== START NEW Training PARMs ============================================================================

                        '---
                        FixNullValues_Then_AddParameter(User.MaxInvalidPasswordAttempts, cmd, "@MaxInvalidPasswordAttempts", TheDataType._Int)
                        FixNullValues_Then_AddParameter(User.PasswordAttemptWindow, cmd, "@PasswordAttemptWindow", TheDataType._Int)
                        FixNullValues_Then_AddParameter(User.PasswordSalt, cmd, "@PasswordSalt", TheDataType._NVarChar, 128)
                        FixNullValues_Then_AddParameter(User.CurrentTimeUtc, cmd, "@CurrentTimeUtc ", TheDataType._SqlDateTime)
                        FixNullValues_Then_AddParameter(User.PasswordFormat, cmd, "@PasswordFormat", TheDataType._Int)
                        FixNullValues_Then_AddParameter(User.PasswordAnswer, cmd, "@PasswordAnswer", TheDataType._NVarChar, 128)

                        '---

                        '=========================================================
                        connection.Open()
                        c_Error.PrintParameterListInSQLCommand(cmd)     '&lt;== Just for debugging
                        ' c_Error.PrintParameterListInSQLCommand(cmd)
                        Debug.Print("After Open, before ExecuteNonQuery")

                        cmd.ExecuteNonQuery()
                        iReturn = CType(prm.Value, Integer)     'returns SQL ErrorCode

                    End Using 'cmd
                End Using 'connection

                '=========================================================
            Catch ex As SqlException

                'If ex.Number = 2627 Then
                Throw New ApplicationException(ex.Message)



            Catch ex As Exception
                Throw New ApplicationException(ex.Message)

                Throw ex
            Finally
                'connection.Close()
            End Try

            Return iReturn

        End Function





        Public Function InsertUser(User As c_User_Record) As Integer
            Dim iReturn As Integer = 99

            User.PasswordSalt = User.Password
            User.CurrentTimeUtc = fn_DotNetDateTime_to_SQLDateTime(Now())
            User.CreateDate = fn_DotNetDateTime_to_SQLDateTime(Now())
            User.PasswordFormat = 0
            User.UserId = System.Guid.NewGuid


            Try


                Using connection As SqlConnection = c_Database_Connection.GetConnection
                    '====================================================================

                    Using cmd As New SqlCommand("aspnet_Membership_CreateUser", connection)
                        '=========================================================
                        cmd.CommandType = CommandType.StoredProcedure
                        Dim prm As New SqlParameter("RETURN", SqlDbType.Int)
                        cmd.Parameters.Add(prm)
                        prm.Direction = ParameterDirection.ReturnValue

                        ''---
                        ''REQUIRED
                        'cmd.Parameters.Add(New SqlParameter("@iT05_FK", SqlDbType.Int)).Value = User.T05_FK
                        ''---
                        FixNullValues_Then_AddParameter(User.ApplicationName, cmd, "@ApplicationName", TheDataType._NVarChar, 256)
                        FixNullValues_Then_AddParameter(User.UserName, cmd, "@UserName", TheDataType._NVarChar, 256)
                        FixNullValues_Then_AddParameter(User.Password, cmd, "@Password", TheDataType._NVarChar, 128)
                        FixNullValues_Then_AddParameter(User.PasswordSalt, cmd, "@PasswordSalt", TheDataType._NVarChar, 128)
                        FixNullValues_Then_AddParameter(User.Email, cmd, "@Email ", TheDataType._NVarChar, 256)
                        FixNullValues_Then_AddParameter(User.PasswordQuestion, cmd, "@PasswordQuestion ", TheDataType._NVarChar, 256)
                        FixNullValues_Then_AddParameter(User.PasswordAnswer, cmd, "@PasswordAnswer", TheDataType._NVarChar, 256)
                        FixNullValues_Then_AddParameter(User.IsApproved, cmd, "@IsApproved", TheDataType._Bit)
                        FixNullValues_Then_AddParameter(User.CurrentTimeUtc, cmd, "@CurrentTimeUtc", TheDataType._SqlDateTime)
                        FixNullValues_Then_AddParameter(User.CreateDate, cmd, "@CreateDate ", TheDataType._SqlDateTime)
                        FixNullValues_Then_AddParameter(User.UniqueEmail, cmd, "@UniqueEmail", TheDataType._SmallInt)
                        FixNullValues_Then_AddParameter(User.PasswordFormat, cmd, "@PasswordFormat ", TheDataType._SmallInt)
                        FixNullValues_Then_AddParameter(User.UserId, cmd, "@UserId", TheDataType._SqlGUID)

                        '---

                        connection.Open()
                        cmd.ExecuteNonQuery()
                        iReturn = CType(prm.Value, Integer)

                        '=========================================================
                    End Using   'cmd
                    '====================================================================
                End Using 'connection 

            Catch ex As SqlException
                c_Error.UnhandledSqlClientExceptionHandler(ex, "InsertUser", k_ClassName)
            Catch ex As Exception
                c_Error.UnhandledExceptionHandler(ex, "InsertUser", k_ClassName)
                Throw ex
            Finally

            End Try

            Return iReturn
        End Function

        '
        ' Delete the Employee by ID.
        '   This method assumes that ConflictDetection is Set to OverwriteValues.
        Public Shared Function DeleteUser(User As c_User_Record) As Integer

            Dim iReturn As Integer = 0

            Try

                Using connection As New SqlConnection(c_Database_Connection.GetConnectionString)

                    Using DeleteCommand As New SqlCommand()

                        DeleteCommand.Connection = connection
                        DeleteCommand.CommandText = "aspnet_Users_DeleteUser"
                        ' .. and sets the command type.
                        DeleteCommand.CommandType = CommandType.StoredProcedure

                        'The return value PARM
                        Dim prm As New SqlParameter("RETURN", SqlDbType.Int)
                        DeleteCommand.Parameters.Add(prm)
                        prm.Direction = ParameterDirection.ReturnValue
                        'The PK PARM
                        DeleteCommand.Parameters.AddWithValue("@ApplicationName", User.ApplicationName)
                        DeleteCommand.Parameters.AddWithValue("@UserName", User.UserName)
                        DeleteCommand.Parameters.AddWithValue("@TablesToDeleteFrom", 15)
                        DeleteCommand.Parameters.AddWithValue("@NumTablesDeletedFrom", 0)
                        connection.Open()
                        DeleteCommand.ExecuteNonQuery()
                        iReturn = CType(prm.Value, Integer)

                    End Using 'DeleteCommand

                End Using 'connection 



            Catch ex As System.Data.SqlClient.SqlException

                Throw New ApplicationException(ex.Message)
            Catch ex As Exception

                Throw New ApplicationException(ex.Message)
            Finally

            End Try

            Return iReturn      'Error Code

        End Function


    End Class



    Public Class c_Database_Connection

        Public Shared Function GetConnection() As SqlConnection

            Dim connectionString As String = ConfigurationManager.ConnectionStrings("SHAREPOINT01_aspnetdb").ConnectionString

            Return New SqlConnection(connectionString)
        End Function

        Public Shared Function GetConnectionString() As String

            Dim connectionString As String = ConfigurationManager.ConnectionStrings("SHAREPOINT01_aspnetdb").ConnectionString
          
            Return connectionString

        End Function

    End Class


    Public Class c_CustomFunctions

        Public Shared Function fn_boolStringIsPresent(ByVal strStringToSearch As String, ByVal strStringToSearchFor As String) As Boolean
            ' Returns true if the strStringToSearchFor is in strStringToSearch
            Dim iX As Integer
            Dim boolX As Boolean
            iX = InStr(1, strStringToSearch, strStringToSearchFor)
            If iX = 0 Then
                boolX = False
            Else
                boolX = True
            End If
            Return boolX

        End Function


        Public Shared Function CsqlBIT(o As Object) As Boolean
            Dim bX As Boolean

            If IsDBNull(o) Then
                bX = False
            Else
                bX = CType(o, Boolean)
            End If

            Return bX

        End Function


        Public Shared Function CsqlInt32(o As Object) As SqlInt32
            Dim iX As SqlInt32

            If IsDBNull(o) Then
                iX = SqlInt32.Null
            Else
                iX = CType(CInt(o), SqlInt32)
            End If

            Return CType(iX, SqlInt32)

        End Function

        Public Shared Function CsqlInt16(o As Object) As SqlInt16
            Dim iX As SqlInt16

            If IsDBNull(o) Then
                iX = SqlInt16.Null
            Else
                iX = CType(CInt(o), SqlInt16)
            End If

            Return CType(iX, SqlInt16)

        End Function


        Public Shared Function CSqlDateTime(o As Object) As SqlDateTime
            Dim dX As SqlDateTime

            Try


                If IsDBNull(o) Then
                    dX = SqlDateTime.Null
                Else
                    dX = CType(o.ToString, SqlDateTime)
                End If

                Return dX

            Catch ex As SqlException

                c_Error.UnhandledSqlClientExceptionHandler(ex, "CSqlDateTime", "c_CustomFunctions")
            End Try
        End Function

        Public Shared Function CSqlDecimal(o As Object) As SqlDecimal
            Dim dX As SqlDecimal
            Try


                If IsDBNull(o) Then
                    dX = SqlDecimal.Null
                Else
                    dX = CType(o.ToString, SqlDecimal)
                End If

                Return dX

            Catch ex As SqlException

                c_Error.UnhandledSqlClientExceptionHandler(ex, "CSqlDecimal", "c_CustomFunctions")
            End Try

        End Function

        Public Shared Function NullableINTisNothing(iX As Nullable(Of Integer)) As Boolean

            Dim bX As Boolean = False
            '===================================
            If IsNothing(iX) Then bX = True
            If Not iX.HasValue Then bX = True
            '===================================
            Return bX

        End Function



    End Class
End Namespace

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>3_Master-GridView_Slave_DetailsView_Markup</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>3_Master-GridView_Slave_DetailsView_Markup</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;%@ Page Title="" Language="vb" AutoEventWireup="false" MasterPageFile="~/Site.Master" CodeBehind="User_CRUD.aspx.vb" Inherits="CCWNC411_Security.User_CRUD" Trace="True" TraceMode="SortByTime" %&gt;
&lt;asp:Content ID="Content1" ContentPlaceHolderID="HeadContent" runat="server"&gt;
&lt;/asp:Content&gt;
&lt;asp:Content ID="Content2" ContentPlaceHolderID="MainContent" runat="server"&gt;


&lt;%--  Object Data Sources ------------------------------------------------------------------------ --%&gt;


&lt;%--  ODS for the DropDownList --%&gt;
   &lt;p&gt;
        &lt;asp:SqlDataSource ID="SqlDataSource_DropDownList" runat="server" 
            ConnectionString="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb %&gt;"        
            ProviderName="&lt;%$ ConnectionStrings:SHAREPOINT01_aspnetdb.ProviderName %&gt;" 
            SelectCommand="SELECT [ApplicationName], [ApplicationId] FROM [aspnet_Applications]" &gt;
        &lt;/asp:SqlDataSource&gt;

    &lt;/p&gt;
&lt;%--  ODS for the  GridView --%&gt;
    &lt;p&gt;
          &lt;asp:ObjectDataSource 
            ID="ods_GridView_Users" 
            runat="server" 
            TypeName="CCWNC411_Security.ns_USER.c_USER_DL" 
            DataObjectTypeName="CCWNC411_Security.ns_USER.c_USER_Record" 
            SelectMethod="GetAllUsers_GivenApplicationName" 
            OnSelecting="ods_GridView_Users_Selecting"&gt;
             &lt;SelectParameters&gt;
                &lt;asp:QueryStringParameter Name="ApplicationName"
                    QueryStringField="ApplicationName" 
                     /&gt;
            &lt;/SelectParameters&gt;
      &lt;/asp:ObjectDataSource&gt;
    
    &lt;/p&gt;
&lt;%--  ODS for the  DetailsView --%&gt;
    &lt;p&gt;
    
      &lt;asp:ObjectDataSource 
        ID="ods_ViewDetails_User" 
        runat="server" 
        TypeName="CCWNC411_Security.ns_USER.c_USER_DL"
        DataObjectTypeName="CCWNC411_Security.ns_USER.c_USER_Record"
        SelectMethod="GetUser"
        InsertMethod="InsertUser"
        UpdateMethod="UpdateUser"
        DeleteMethod="DeleteUser"
        OnInserted="ods_ViewDetails_User_Inserted"
        OnUpdated="ods_ViewDetails_User_Updated"
        OnDeleted="ods_ViewDetails_User_Deleted"  
        OnSelecting="ods_ViewDetails_User_Selecting"&gt;
        &lt;SelectParameters&gt;
          &lt;asp:Parameter Name="UserName" Type="String" /&gt;  
          &lt;asp:Parameter Name="ApplicationName" Type="String" /&gt;  
        &lt;/SelectParameters&gt;
      &lt;/asp:ObjectDataSource&gt;
    &lt;/p&gt;

   &lt;p&gt;

&lt;%--  Controls ------------------------------------------------- --%&gt;

    &lt;p&gt;
        &lt;asp:Label ID="lbl_Message" runat="server" Text="Label"&gt;&lt;/asp:Label&gt;
        
    &lt;/p&gt;
    &lt;p&gt;

        &lt;asp:Button ID="btn_ListUsersForSelectedApplication" runat="server" 
            Text="List the users associated with the Web Site" Width="309px" /&gt;
    &lt;/p&gt;


&lt;%--  Controls using ODS ------------------------------------------------- --%&gt;


&lt;%--  uses ODS: DropDownList --%&gt;

&lt;p&gt;
        &lt;asp:DropDownList 
            ID="DropDownList_Application" 
            runat="server" 
            AppendDataBoundItems="true"
            DataSourceID="SqlDataSource_DropDownList" 
            DataTextField="ApplicationName" 
            DataValueField="ApplicationName" 
            AutoPostBack="true"&gt;

        &lt;/asp:DropDownList&gt;


&lt;/p&gt;
&lt;%--  uses ODS: GridView --%&gt;
&lt;p&gt;
            &lt;asp:GridView 
                  ID="GridView_UsersInApplication" 
                  DataSourceID="ods_GridView_Users" 
                  AutoGenerateColumns="false"
                  DataKeyNames="UserName" 
                  OnSelectedIndexChanged="GridView_UsersInApplication_SelectedIndexChanged"
                  RunAt="server"&gt;

              &lt;HeaderStyle backcolor="lightblue" forecolor="black"/&gt;

              &lt;Columns&gt;                
                &lt;asp:ButtonField Text="Details..."
                                 HeaderText="Show Details"
                                 CommandName="Select"/&gt;  

                &lt;asp:BoundField DataField="UserName"  HeaderText="UserName" SortExpression="UserName" /&gt;
                &lt;asp:BoundField DataField="IsApproved"   HeaderText="IsApproved" SortExpression="IsApproved" /&gt;  
                &lt;asp:BoundField DataField="IsLockedOut"   HeaderText="IsLockedOut" SortExpression="IsLockedOut" /&gt;                 
                &lt;asp:BoundField DataField="LastActivityDate"   HeaderText="LastActivityDate" SortExpression="LastActivityDate" /&gt;                                      
              &lt;/Columns&gt;                
            &lt;/asp:GridView&gt; 
&lt;/p&gt;
&lt;%--  uses ODS: DetailsView --%&gt;
&lt;p&gt;

            &lt;asp:DetailsView ID="DetailsView_User"
              DataSourceID="ods_ViewDetails_User"
              AutoGenerateRows="False"
              EmptyDataText="No records."      
              DataKeyNames="UserName,ApplicationName" 
              AutoGenerateInsertButton="True"
              AutoGenerateEditButton="True"
              AutoGenerateDeleteButton="True"
              OnItemInserted="DetailsView_User_ItemInserted"
              OnItemUpdated="DetailsView_User_ItemUpdated"
              OnItemDeleted="DetailsView_User_ItemDeleted" 
              RunAt="server"&gt;

              &lt;HeaderStyle backcolor="Navy" forecolor="White"/&gt;

              &lt;RowStyle backcolor="White"/&gt;

              &lt;AlternatingRowStyle backcolor="LightGray"/&gt;

              &lt;EditRowStyle backcolor="LightCyan"/&gt;

              &lt;Fields&gt;      
                    &lt;asp:TemplateField HeaderText="ApplicationName"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox1" runat="server" Text='&lt;%# Bind("ApplicationName") %&gt;' ReadOnly="true" BackColor="LightGray" &gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox1" runat="server" Text='&lt;%# Bind("ApplicationName") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label1" runat="server" Text='&lt;%# Bind("ApplicationName") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="UserName"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox2" runat="server" Text='&lt;%# Bind("UserName") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox2" runat="server" Text='&lt;%# Bind("UserName") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label2" runat="server" Text='&lt;%# Bind("UserName") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="Password"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox3" runat="server" Text='&lt;%# Bind("Password") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox3" runat="server" Text='&lt;%# Bind("Password") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label3" runat="server" Text='&lt;%# Bind("Password") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="PasswordSalt"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox4" runat="server" Text='&lt;%# Bind("PasswordSalt") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox4" runat="server" Text='&lt;%# Bind("PasswordSalt") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label4" runat="server" Text='&lt;%# Bind("PasswordSalt") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="Email"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox5" runat="server" Text='&lt;%# Bind("Email") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox5" runat="server" Text='&lt;%# Bind("Email") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label5" runat="server" Text='&lt;%# Bind("Email") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="PasswordQuestion"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox6" runat="server" 
                                Text='&lt;%# Bind("PasswordQuestion") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox6" runat="server" 
                                Text='&lt;%# Bind("PasswordQuestion") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label6" runat="server" Text='&lt;%# Bind("PasswordQuestion") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="PasswordAnswer"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox7" runat="server" Text='&lt;%# Bind("PasswordAnswer") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox7" runat="server" Text='&lt;%# Bind("PasswordAnswer") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label7" runat="server" Text='&lt;%# Bind("PasswordAnswer") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="IsApproved"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox8" runat="server" Text='&lt;%# Bind("IsApproved") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox8" runat="server" Text='&lt;%# Bind("IsApproved") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label8" runat="server" Text='&lt;%# Bind("IsApproved") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;

                    &lt;asp:TemplateField HeaderText="CurrentTimeUtc"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox9" runat="server" Text='&lt;%# Bind("CurrentTimeUtc") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt; 
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox9" runat="server" Text='&lt;%# Bind("CurrentTimeUtc") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label9" runat="server" Text='&lt;%# Bind("CurrentTimeUtc") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;


                    &lt;asp:TemplateField HeaderText="CreateDate"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox10" runat="server" Text='&lt;%# Bind("CreateDate") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox10" runat="server" Text='&lt;%# Bind("CreateDate") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label10" runat="server" Text='&lt;%# Bind("CreateDate") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="UniqueEmail"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox11" runat="server" Text='&lt;%# Bind("UniqueEmail") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox11" runat="server" Text='&lt;%# Bind("UniqueEmail") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label11" runat="server" Text='&lt;%# Bind("UniqueEmail") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="PasswordFormat"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox12" runat="server" Text='&lt;%# Bind("PasswordFormat") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox12" runat="server" Text='&lt;%# Bind("PasswordFormat") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label12" runat="server" Text='&lt;%# Bind("PasswordFormat") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="UserID" InsertVisible="False"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:Label ID="Label1" runat="server" Text='&lt;%# Eval("UserID") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label13" runat="server" Text='&lt;%# Bind("UserID") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="IsLockedOut"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox13" runat="server" Text='&lt;%# Bind("IsLockedOut") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox13" runat="server" Text='&lt;%# Bind("IsLockedOut") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label14" runat="server" Text='&lt;%# Bind("IsLockedOut") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="LastLoginDate"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox14" runat="server" Text='&lt;%# Bind("LastLoginDate") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox14" runat="server" Text='&lt;%# Bind("LastLoginDate") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label15" runat="server" Text='&lt;%# Bind("LastLoginDate") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="LastActivityDate"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox15" runat="server" 
                                Text='&lt;%# Bind("LastActivityDate") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox15" runat="server" 
                                Text='&lt;%# Bind("LastActivityDate") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label16" runat="server" Text='&lt;%# Bind("LastActivityDate") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
                    &lt;asp:TemplateField HeaderText="ApplicationId"&gt;
                        &lt;EditItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox16" runat="server" Text='&lt;%# Bind("ApplicationId") %&gt;' ReadOnly="true" BackColor="LightGray"&gt;&lt;/asp:TextBox&gt;
                        &lt;/EditItemTemplate&gt;
                        &lt;InsertItemTemplate&gt;
                            &lt;asp:TextBox ID="TextBox16" runat="server" Text='&lt;%# Bind("ApplicationId") %&gt;'&gt;&lt;/asp:TextBox&gt;
                        &lt;/InsertItemTemplate&gt;
                        &lt;ItemTemplate&gt;
                            &lt;asp:Label ID="Label17" runat="server" Text='&lt;%# Bind("ApplicationId") %&gt;'&gt;&lt;/asp:Label&gt;
                        &lt;/ItemTemplate&gt;
                    &lt;/asp:TemplateField&gt;
      
               &lt;/Fields&gt;                    
            &lt;/asp:DetailsView&gt;

&lt;/p&gt;

&lt;/asp:Content&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>3_Master-GridView_Slave_DetailsView_ReadMe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>3_Master-GridView_Slave_DetailsView_ReadMe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Project Name (Assembly namespace): CCWNC411_Security
Page Name: User_CRUD.aspx
NameSpace for BackEnd: ns_USER


It let's you select the records, Edit, Update and Delete

Initially neither the Gridview nor the DetailsView are visible
	Because they are both CANCELLED in their ObjectDataSource's 'Selecting' event
	
This page has a drop-down that allows the user to select an application {using an SqlDataSource}
Then user clicks the button: [List the users associated with the Web Site]
Which posts back to the same page with the ApplicationName as a PARM in the Query string, and when the 
	When the GridView Object is created in the Markup, it grabs the 'ApplicationName' PARM from the QueryString
	and pass it to the: SelectMethod="GetAllUsers_GivenApplicationName"	
	

If there are users for that  Application then the GridView is populated {using an Object Data Source}
	but the Details view is not visible (b/c it is CANCELLED in its ObjectDataSource's 'Selecting' event)
	
When the user clicks on the &lt;asp:ButtonField&gt; labeled "Details" in the GridView then:
 
1]	The UserName Field, from the 'SelectedDataKey', 
		
2]	As well as the the 'ApplicationName' from the QueryString

are used in the 'GridView_UsersInApplication_SelectedIndexChanged' 
	code-behind method to Bind the GridView to the Users for the chosen Application
	and SELECTING data from the backend: GetAllUsers_GivenApplicationName
	
As the form is rebuilding itself it then causes the DetailsView to invoke the SelectMethod of it's 
	object data source:  'ods_ViewDetails_User' ( it proceeds b/c this time m_bApplicationNameIsEmpty is false)	
The DetailsView has two PARMS for it's SelectMethod (set in the Markup: &lt;SelectParameters&gt;, and populated
	in the GridView event: GridView_UsersInApplication_SelectedIndexChanged)
The Details view SELECTs data using the Backend: GetUser			</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>3_Master-GridView_Slave_DetailsView_web.config</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>3_Master-GridView_Slave_DetailsView_web.config</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;

  &lt;appSettings&gt;
    &lt;add key="CCWNC411_Security" value="CCWNC411_Security" /&gt;
  &lt;/appSettings&gt;

  &lt;connectionStrings&gt;
    &lt;add name="SHAREPOINT01_aspnetdb" connectionString="Data Source=.\DEV;Initial Catalog=aspnetdb;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="aspnetdbConnectionString1" connectionString="Data Source=HOMETOWER\DEV;Initial Catalog=aspnetdb;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;

    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership defaultProvider="SqlProvider"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="SqlProvider"
             type="System.Web.Security.SqlMembershipProvider"
             connectionStringName="SHAREPOINT01_aspnetdb"
             applicationName="CCWNC411_Security"
             enablePasswordRetrieval="false"
             enablePasswordReset="false"
             requiresQuestionAndAnswer="false"
             requiresUniqueEmail="false"
             maxInvalidPasswordAttempts="999"
             minRequiredPasswordLength="6"
             minRequiredNonalphanumericCharacters="0"
             passwordFormat="Clear"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;

    &lt;roleManager enabled="true"&gt;
      &lt;providers&gt;
        &lt;clear /&gt;
        &lt;add connectionStringName="SHAREPOINT01_aspnetdb"
             applicationName="CCWNC411_Security"
             name="AspNetSqlRoleProvider"
             type="System.Web.Security.SqlRoleProvider" /&gt;
        &lt;add applicationName="DataGuardians"
             name="AspNetWindowsTokenRoleProvider"
             type="System.Web.Security.WindowsTokenRoleProvider" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;


  &lt;/system.web&gt;

  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Roles_Membership_web.config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_After_Initial_Configuration</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Roles_Membership_web.config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_After_Initial_Configuration</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices"
         connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
         providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices"
             enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false"
             maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10"
             applicationName="/" /&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;

    &lt;profile&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;

    &lt;roleManager enabled="true"&gt;
      &lt;providers&gt;
        &lt;clear /&gt;
        &lt;add connectionStringName="ApplicationServices" 
				applicationName="/"
				name="AspNetSqlRoleProvider" 
				type="System.Web.Security.SqlRoleProvider" /&gt;
        &lt;add applicationName="/" 
				name="AspNetWindowsTokenRoleProvider"
				type="System.Web.Security.WindowsTokenRoleProvider" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;

  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Roles_Membership_web.config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Original_web.config</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Roles_Membership_web.config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Original_web.config</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices"
         connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
         providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices"
             enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false"
             maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10"
             applicationName="/" /&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;

    &lt;profile&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;

    &lt;roleManager enabled="false"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlRoleProvider" 
				type="System.Web.Security.SqlRoleProvider" 
				connectionStringName="ApplicationServices" 
				applicationName="/" /&gt;
        &lt;add name="AspNetWindowsTokenRoleProvider" 
				type="System.Web.Security.WindowsTokenRoleProvider" 
				applicationName="/" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;

  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Roles_Membership_web.config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Membership_and_roleManager_web.config</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Roles_Membership_web.config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Membership_and_roleManager_web.config</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="SHAREPOINT01_aspnetdb" connectionString="Data Source=SHAREPOINT01;Initial Catalog=aspnetdb;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="DB2_CRMConnectionString1" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="DB2_CRMConnectionString2" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
      providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0" /&gt;

    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880" /&gt;
    &lt;/authentication&gt;

    &lt;membership defaultProvider="SqlProvider"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="SqlProvider"
             type="System.Web.Security.SqlMembershipProvider"
             connectionStringName="SHAREPOINT01_aspnetdb"            
             applicationName="/"
             enablePasswordRetrieval="true"
             enablePasswordReset="true"
             requiresQuestionAndAnswer="false"
             requiresUniqueEmail="true"
             passwordFormat="Clear"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;

    &lt;roleManager enabled="true"&gt;
      &lt;providers&gt;
        &lt;clear /&gt;
        &lt;add connectionStringName="SHAREPOINT01_aspnetdb" applicationName="/"
          name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" /&gt;
        &lt;add applicationName="/" name="AspNetWindowsTokenRoleProvider"
          type="System.Web.Security.WindowsTokenRoleProvider" /&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;
    
    
  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Roles_Membership_web.config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Roles_Membership_web.config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>from: http://stackoverflow.com/questions/3753226/create-password-and-passwordsalt
|||||||||||passwordFormat||||||||||||||||||||||||||||||||||||

Here in this setting section the attribute 
"passwordFormat" set the way your user password is stored.
Options are - 
	Clear (0), 
	Hashed (1), 
	Encrypted (2)
	
==========================================================
&lt;membership&gt;
  &lt;providers&gt;
    &lt;clear/&gt;
    &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices"
         enablePasswordRetrieval="false" passwordFormat="Encrypted" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false"
         maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10"
         applicationName="/" /&gt;
  &lt;/providers&gt;
&lt;/membership&gt;

============================================================

By default it will be having hashed value - or if u have not specified passwordFormat.

In clear text the password will saved as it is - Text clear - readable.

In Hashed option the password will not be (Encrypted) only encoded using Hashing alogorithm

In Encrypted option the password will be stored with first Encrypting the password and then encoding it.

In Encrypted option u need to specify the a non-auto generated "machine key" and store in the machine config To get one refer : Get a non-autogenerated machine key 

=============================================================

and talking about the password salt - 
	its just randomly generated string which is used to Encrypt and encode the password along with the Validation &amp; Decryption Key.

If you want to overide the encrypting method of asp.net membership provider to encode youself (if using custome membership provider) 
you can do something like this:

private string EncodePassword(byte passFormat, string passtext, string passwordSalt)
{
    if(passFormat.Equals(0)) // passwordFormat="Clear" (0)
        return passtext;
    else{
        byte[] bytePASS = Encoding.Unicode.GetBytes(passtext);
        byte[] byteSALT = Convert.FromBase64String(passwordSalt);
        byte[] byteRESULT = new byte[byteSALT.Length + bytePASS.Length + 1];

        System.Buffer.BlockCopy(byteSALT, 0, byteRESULT, 0, byteSALT.Length);
        System.Buffer.BlockCopy(bytePASS, 0, byteRESULT, byteSALT.Length, bytePASS.Length);

        if(passFormat.Equals(1)) // passwordFormat="Hashed" (1)
        {
            HashAlgorithm ha = HashAlgorithm.Create(Membership.HashAlgorithmType);
            return (Convert.ToBase64String(ha.ComputeHash(byteRESULT)));
        }
        else // passwordFormat="Encrypted" (2)
        {
            MyCustomMembership myObj = new MyCustomMembership();
            return(Convert.ToBase64String(myObj.EncryptPassword(byteRESULT)));
        }
    }
}

and then call with something like this

    string passSalt = // Either generate a random salt for that user or retrieve the salt from database if the user is in edit and has a password salt
    EncodePassword(/* 0 or 1 or 2 */, passwordText, passSalt);

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Roles_Membership_web.config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>web.config_AspNetSqlProfileProvider</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Roles_Membership_web.config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>web.config_AspNetSqlProfileProvider</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/* for sql SERVER */

&lt;?xml version="1.0"?&gt;
&lt;configuration&gt;
    
    &lt;system.web&gt;
        &lt;compilation debug="true" targetFramework="4.0" /&gt;
    &lt;/system.web&gt;


  &lt;connectionStrings&gt;
    &lt;add name="ASPNETDBConnectionString" 
         connectionString="Data Source=SQLServerFQDN;Initial Catalog=DBName;user=UsrName;pwd=Pass;" 
         providerName="System.Data.SqlClient"/&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;profile&gt;
      &lt;providers&gt;
        &lt;clear /&gt;
        &lt;add name="AspNetSqlProfileProvider" 
             connectionStringName="ASPNETDBConnectionString" 
             applicationName="/login" 
             type="System.Web.Profile.SqlProfileProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;

&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_SECURITY_User_ActiveDirectoryGroupAccess</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>readMe_ASPNET_Security_User_ActiveDirectoryGroupAccess</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_SECURITY_User_ActiveDirectoryGroupAccess</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>readMe_ASPNET_Security_User_ActiveDirectoryGroupAccess</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>readMe_ASPNET_Security_User_ActiveDirectoryGroupAccess


Change the account that ASP.NET runs under
http://www.bluevisionsoftware.com/WebSite/TipsAndTricksDetails.aspx?Name=AspNetAccount



=======================================================================================================================
User.Identity.Name represents identity passed from IIS.
(HttpContext.Current.User.Identity.Name)

WindowsIdentity.GetCurrent().Name is he identity under which the thread is running.


Now their values are:

=================================================================================================================================
Impersonate attribute          Anonymous                   User.Identity.Name             WindowsIdentity.GetCurrent().Name
(web.config  in &lt;identity&gt;     access (in IIS)            (id passed from IIS)            (thread's identity)
----------------------------------------------------------------------------------------------------------------------------------------
"true"                                   Yes                    Empty string                 IUSR_&lt;machineName&gt;

"false"                                   Yes                   Empty string                 NT Authority\Network Service(*)

"true"                                    No                    domain\user(**)           domain\user(**)         

"false"                                   No                    domain\user(**)           NT Authority\Network Service(*)

==================================================================================================================================

*) - NT Authority\Network Service (for server Windows) or ASPNET (machineName\ASPNET_WP (for Windows XP)

(**) - domain\user (for AD) or machineName\userName (for local account)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ViewState_SessionVariables_Postback</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Create_Session_Variable_then_Read_Session_Variable_on_another_page</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ViewState_SessionVariables_Postback</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Create_Session_Variable_then_Read_Session_Variable_on_another_page</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This example has two pages:

	SessionVarCreate.aspx
	and
	SessionVarRead.aspx

|||||||||||||| 	SessionVarCreate.aspx  - Markup ||||||||||||||||||||||||||||

&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="SessionVarCreate.aspx.vb" Inherits="SessionVarCreate" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;


&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;Create Session Variable&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
        &lt;h1&gt;Create Variable&lt;/h1&gt;
        &lt;p&gt;
            &amp;nbsp;&lt;/p&gt;
        &lt;p&gt;
            &lt;asp:TextBox ID="TextBox1" runat="server"&gt;&lt;/asp:TextBox&gt;
            &lt;span lang="en-us"&gt;&amp;nbsp;&lt;asp:Button ID="Button1" runat="server" onclick="Button1_Click" 
                Text="Set Variable" /&gt;
            &lt;/span&gt;
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;



|||||||||||||| 	SessionVarCreate.aspx.vb  - Code-Behind ||||||||||||||||||||||||||||


Partial Class SessionVarCreate
    Inherits System.Web.UI.Page

    Protected Sub Button1_Click(sender As Object, e As System.EventArgs) Handles Button1.Click

        Session("mySessionVar") = TextBox1.Text 'can use many variable types if desired

        Response.Redirect("SessionVarRead.aspx")
        'B/c the redirect command is being used, we are not 'posting' to the page
        '   and there for can not use the 'ViewState' object to pass the data
        '   In this case the session variable is being stored in server memory

    End Sub
End Class



|||||||||||||| 	SessionVarRead.aspx  - Markup ||||||||||||||||||||||||||||


&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="SessionVarRead.aspx.vb" Inherits="SessionVarRead" %&gt;


&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;


&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;Read Session Variable&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
        &lt;h1&gt;&lt;span lang="en-us"&gt;Read&lt;/span&gt; Session Variable&lt;/h1&gt;
        &lt;p&gt;
            &lt;asp:Button ID="Button1" runat="server" onclick="Button1_Click" 
                Text="Read Variable" /&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;asp:Label ID="OutputLabel" runat="server" Text="Label"&gt;&lt;/asp:Label&gt;
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


|||||||||||||| 	SessionVarRead.aspx.vb  - Code-Behind ||||||||||||||||||||||||||||



Partial Class SessionVarRead
    Inherits System.Web.UI.Page

    Protected Sub Button1_Click(sender As Object, e As System.EventArgs) Handles Button1.Click
        OutputLabel.Text = CType(Session.Item("mySessionVar"), String)



    End Sub
End Class
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>PassingVariablesBetweenPagesUsingQueryString</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>PassingVariablesBetweenPagesUsingQueryString</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>PassingVariablesBetweenPagesUsingQueryString
reference: http://www.codeproject.com/Articles/5876/Passing-variables-between-pages-using-QueryString


? starts your QueryString, 
and &amp; is used between variables.


Submit button
=================
Private Sub btnSubmit_Click(sender As Object, e As System.EventArgs)
	Response.Redirect("Webform2.aspx?Name=" &amp; Convert.ToString(Me.txtName.Text) &amp; "&amp;LastName=" &amp; Convert.ToString(Me.txtLastName.Text))
End Sub


retrieve this values from second page
======================================== 

Private Sub Page_Load(sender As Object, e As System.EventArgs)
	Me.txtBox1.Text = Request.QueryString("Name")
	Me.txtBox2.Text = Request.QueryString("LastName")
End Sub

OR
====
Private Sub Page_Load(sender As Object, e As System.EventArgs)
	Me.txtBox1.Text = Request.QueryString(0)
	Me.txtBox2.Text = Request.QueryString(1)
End Sub 


Get the elements of the array:
=================================
For Each s As String In Request.QueryString
	Response.Write(Request.QueryString(s))
Next


OR
========

For i As Integer = 0 To Request.QueryString.Count - 1
	Response.Write(Request.QueryString(i))
Next


To clean up the spaces:
=============================
Private Sub btnSubmit_Click(sender As Object, e As System.EventArgs)
	Dim p1 As String = Me.txtName.Text.Replace("&amp;", "%26")
	p1 = Me.txtName.Text.Replace(" ", "%20")
	Dim p2 As String = Me.txtLastName.Text.Replace("&amp;", "%26")
	p2 = Me.txtName.Text.Replace(" ", "%20")
	"WebForm2.aspx?" &amp; "Name=" &amp; p1 &amp; "&amp;LastName=" &amp; p2
	Response.Redirect(p2)
End Sub



Since this is a such a common problem Asp.Net should have some way to solve. 
There it is Server.UrlEncode. 
Server.UrlEncode method changes your query strings to so that they will not create problems. 
================================================================================================
Private Sub btnSubmit_Click(sender As Object, e As System.EventArgs)
	Response.Redirect("WebForm2.Aspx?" &amp; "Name=" &amp; Server.UrlEncode(Me.txtName.Text) &amp; "&amp;LastName=" &amp; Server.UrlEncode(Me.txtLastName.Text))
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>ServerSide_DataBinding_ToGetDataFromControl_ToScreen</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>ServerSide_DataBinding_ToGetDataFromControl_ToScreen</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- Data Binding is a syntax style that allows you to refer to a property of a server control --&gt;
&lt;!-- and display or otherwise use the that data in another control --&gt;


&lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="UsingDataBinding.aspx.vb" Inherits="UsingDataBinding" %&gt;

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style type="text/css"&gt;

        .controlcolumn
        {
            width: 500px;
        }
        .labelcolumn
        {
            width: 130px;
            font-weight:bold;
            text-align:right;
        }
        &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
    &lt;div&gt;
    &lt;h1&gt;Author Data&lt;/h1&gt;
    &lt;/div&gt;
    &lt;table class="controlcolumn"&gt;
        &lt;tr&gt;
            &lt;td class="labelcolumn"&gt;
                First Name:&lt;/td&gt;
            &lt;td class="controlcolumn"&gt;
                &lt;asp:TextBox ID="fnameInput" runat="server" Width="200px"&gt;&lt;/asp:TextBox&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="labelcolumn"&gt;
                Last Name:&lt;/td&gt;
            &lt;td class="controlcolumn"&gt;
                &lt;asp:TextBox ID="lnameInput" runat="server" Width="200px"&gt;&lt;/asp:TextBox&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="labelcolumn"&gt;
                Date of Birth:&lt;/td&gt;
            &lt;td class="controlcolumn"&gt;
                &lt;asp:TextBox ID="dobInput" runat="server"&gt;&lt;/asp:TextBox&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td class="labelcolumn"&gt;
                &amp;nbsp;&lt;/td&gt;
            &lt;td class="controlcolumn"&gt;
                &lt;asp:Button ID="Button1" runat="server" Text="Submit" /&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/table&gt;
    &lt;br /&gt;
    &lt;asp:Panel ID="Panel1" runat="server"&gt;
        &lt;strong&gt;First Name:&lt;/strong&gt;                    &lt;!-- place the code piece between the qoutation marks --&gt;
        &lt;asp:Label ID="fnameLabel" runat="server"       
            Text="&lt;%# fnameInput.Text %&gt;"&gt;&lt;/asp:Label&gt;  &lt;!-- No code completion in the data binding section --&gt; 
        &lt;br /&gt;                                          &lt;!-- refer to a control's ID and it's property --&gt;
        &lt;strong&gt;Last Name:&lt;/strong&gt;
        &lt;asp:Label ID="lnameLabel" runat="server" 
            Text="&lt;%# lnameInput.Text %&gt;"&gt;&lt;/asp:Label&gt;
        &lt;br /&gt;
        &lt;strong&gt;Date of Birth:&lt;/strong&gt;
        &lt;asp:Label ID="dobLabel" runat="server" 
            Text="&lt;%# dobInput.Text %&gt;"&gt;&lt;/asp:Label&gt;
    &lt;/asp:Panel&gt;
    &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;



&lt;!-- ======================================================================  --&gt;



Partial Class UsingDataBinding
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(sender As Object, e As System.EventArgs) Handles Me.Load
        'To activate the Data Binding must call databinding method in page load event
        ' to pass data from one server side control to another server side control
        Page.DataBind()     'Note: needs the parenthesis

    End Sub
End Class

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb_StoredProcedures_ORIG</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>aspnet_Membership_ChangePasswordQuestionAndAnswer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb_StoredProcedures_ORIG</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>aspnet_Membership_ChangePasswordQuestionAndAnswer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE [aspnetdb]
GO

/****** Object:  StoredProcedure [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]    Script Date: 12/24/2013 10:17:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Membership m, dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE dbo.aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb_StoredProcedures_ORIG</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>aspnet_Membership_CreateUser</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb_StoredProcedures_ORIG</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>aspnet_Membership_CreateUser</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE [aspnetdb]
GO

/**
This SP calls: aspnet_Users_CreateUser

*/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Membership_CreateUser]
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt                           nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId                                 uniqueidentifier OUTPUT		-- need the calling subroutine to provide this: 	
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0
    	
	-- Create Application and get it's PK if it does not already exist, otherwise does nothing.
    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR &lt;&gt; 0 )	--i.e. if there was an error creating the application, in the case that it did not exist
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

	-- Check to see if there is a user with the same name for the same application
    SELECT  @NewUserId = UserId FROM dbo.aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
    -- If the user does not exist then create the user, using the incoming UserID
        SET @NewUserId = @UserId
        EXEC @ReturnValue = dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
		-- Else the user does exist for that application
        SET @NewUserCreated = 0
        IF( @NewUserId &lt;&gt; @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6 -- The user already exists
            GOTO Cleanup
        END
    END

    IF( @@ERROR &lt;&gt; 0 )
    BEGIN
        SET @ErrorCode = -1	-- There were some errors somewhere in the previous statements
        GOTO Cleanup
    END

    IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10	--There was a problem creating the user
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   dbo.aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6	--The UserId exists in aspnet_Membership
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7 --The email was supposed to be unique, but was not
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate = @CreateDate
        WHERE  @UserId = UserId
        IF( @@ERROR &lt;&gt; 0 )
        BEGIN
            SET @ErrorCode = -1	--There was a problem updating the LastActivityDate
            GOTO Cleanup
        END
    END

    INSERT INTO dbo.aspnet_Membership
                ( ApplicationId,
                  UserId,
                  Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
                  IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,
                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR &lt;&gt; 0 )
    BEGIN
        SET @ErrorCode = -1	--There was an error in:  INSERT INTO dbo.aspnet_Membership
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb_StoredProcedures_ORIG</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>aspnet_Membership_ResetPassword</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb_StoredProcedures_ORIG</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>aspnet_Membership_ResetPassword</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE [aspnetdb]
GO

/****** Object:  StoredProcedure [dbo].[aspnet_Membership_ResetPassword]    Script Date: 12/24/2013 10:15:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Membership_ResetPassword]
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM dbo.aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc &gt; DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount &gt;= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount &gt; 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR &lt;&gt; 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb_StoredProcedures_ORIG</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>aspnet_Membership_UpdateUserInfo</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb_StoredProcedures_ORIG</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>aspnet_Membership_UpdateUserInfo</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE [aspnetdb]
GO

/****** Object:  StoredProcedure [dbo].[aspnet_Membership_UpdateUserInfo]    Script Date: 12/24/2013 10:14:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[aspnet_Membership_UpdateUserInfo]
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc &gt; DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount &gt;= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount &gt; 0 OR @FailedPasswordAnswerAttemptCount &gt; 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR &lt;&gt; 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR &lt;&gt; 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
        FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR &lt;&gt; 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Notes_On_SP_used_by_Web-Site-Administration-Tool</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Notes_On_SP_used_by_Web-Site-Administration-Tool</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- CommandList_from_Profiler.sql


--Access Rules are handled through web.config in each folder
--	For that particular folder you specify whether the role is
	-- Denied
	-- Has access
--		

use aspnetdb
go

exec dbo.aspnet_Membership_GetAllUsers @ApplicationName=N'/',@PageIndex=0,@PageSize=2147483647

-- Create user =============================================================================

declare @p12 uniqueidentifier
set @p12='D0E56CEE-6753-460A-B130-A72297EC2DD6'
exec dbo.aspnet_Membership_CreateUser 
	@ApplicationName=N'DataGuardians',
	@UserName=N'dgarson',
	@Password=N'abcde_12345',
	@PasswordSalt=N'nWJbIKBD6+ZRZE0unmcV7A==',
	@Email=N'dgarson@ccwnc.org',
	@PasswordQuestion=NULL,
	@PasswordAnswer=NULL,
	@IsApproved=1,
	@UniqueEmail=1,
	@PasswordFormat=0,
	@CurrentTimeUtc='2013-12-22 14:52:43',
	@UserId=@p12 output
select @p12

-- Delete User======================

--Since there are 4 Tables that contain additional User Information the enumerated values are 1, 2, 4, 8.  (1+2+4+8=15)
	--The method DeleteUser(UserName, True) would have to set the @TablesToDeleteFrom parameter to at least 15 in order to delete all user information. 
-- The @numTablesToDeleteFrom parameter is an OUTPUT parameter that indicates how  many tables the user information was deleted from.  
	-- I don't think it is used by the default membership provider.	\
	
-- Comments within the SP:	
-- Delete from Membership table if (@TablesToDeleteFrom &amp; 1) is set
--Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom &amp; 2) is set
-- Delete from aspnet_Profile table if (@TablesToDeleteFrom &amp; 4) is set
-- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom &amp; 8) is set
-- Delete from aspnet_Users table if (@TablesToDeleteFrom &amp; 1,2,4 &amp; 8) are all set
declare @p4 int
set @p4=2
exec dbo.aspnet_Users_DeleteUser 
			@ApplicationName=N'DataGuardians',
			@UserName=N'dgarson',
			@TablesToDeleteFrom=15,
			@NumTablesDeletedFrom=@p4 output
select @p4

--Update



-- Create user and add to existing role ======================================================

declare @p12 uniqueidentifier
set @p12='D606945A-4662-45B1-9990-4ED74529FC46'
exec dbo.aspnet_Membership_CreateUser 
	@ApplicationName=N'DataGuardians',
	@UserName=N'abc',
	@Password=N'abcde_12345',
	@PasswordSalt=N'sv4Ra0+dBNUehKSm8MoWeA==',
	@Email=N'abc@a.com',@PasswordQuestion=NULL,
	@PasswordAnswer=NULL,
	@IsApproved=1,
	@UniqueEmail=1,
	@PasswordFormat=0,
	@CurrentTimeUtc='2013-12-22 16:36:15',
	@UserId=@p12 output
select @p12

-- check to see if user is already in the role:
exec dbo.aspnet_UsersInRoles_IsUserInRole @ApplicationName=N'DataGuardians',@UserName=N'abc',@RoleName=N'rAdmin'

-- if not in the role then add the user to the role:
exec dbo.aspnet_UsersInRoles_AddUsersToRoles @ApplicationName=N'DataGuardians',@RoleNames=N'rAdmin',@UserNames=N'abc',@CurrentTimeUtc='2013-12-22 16:36:15.817'

-- Then check to confirm that the user is in the role:
exec dbo.aspnet_UsersInRoles_IsUserInRole @ApplicationName=N'DataGuardians',@UserName=N'abc',@RoleName=N'rDataGuardian'

-- Not sure why it does this:
exec dbo.aspnet_Membership_GetPasswordWithFormat @ApplicationName=N'DataGuardians',@UserName=N'abc',@UpdateLastLoginActivityDate=1,@CurrentTimeUtc='2013-12-22 16:36:15.823'




-- create role ===============================================================================

exec dbo.aspnet_Roles_CreateRole @ApplicationName=N'DataGuardians',@RoleName=N'rAdmin'

-- get roles
exec dbo.aspnet_Roles_GetAllRoles @ApplicationName=N'DataGuardians'

-- delete role:
			--	check to see if it exists (1 if yes, 0 if not)
exec dbo.aspnet_Roles_RoleExists @ApplicationName=N'DataGuardians',@RoleName=N'rJunk'
			-- if so delete it:
exec dbo.aspnet_Roles_DeleteRole @ApplicationName=N'DataGuardians',@RoleName=N'rJunk',@DeleteOnlyIfRoleIsEmpty=0
			-- get the updated list
exec dbo.aspnet_Roles_GetAllRoles @ApplicationName=N'DataGuardians'

	
-- Remove User from role:
exec dbo.aspnet_UsersInRoles_RemoveUsersFromRoles @ApplicationName=N'DataGuardians',@UserNames=N'uJunk',@RoleNames=N'rAdmin'	

-- Add user to role
-- if not in the role then add the user to the role:
exec dbo.aspnet_UsersInRoles_AddUsersToRoles @ApplicationName=N'DataGuardians',@RoleNames=N'rAdmin',@UserNames=N'abc',@CurrentTimeUtc='2013-12-22 16:36:15.817'



--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- always checking the schema:

exec dbo.aspnet_Roles_GetAllRoles @ApplicationName=N'DataGuardians'
exec dbo.aspnet_CheckSchemaVersion @Feature=N'Role Manager',@CompatibleSchemaVersion=N'1'</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedures</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedures</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/*
reference: http://msdn.microsoft.com/en-us/library/aa478949.aspx

-- Stored Procedure	Description
==================================================================

-- aspnet_Membership_ChangePassword-QuestionAndAnswer	
	Changes the specified user's password question and answer.
	
-- aspnet_Membership_CreateUser	
	Adds a new membership user to the membership database. 
	Records the user in the aspnet_Users and aspnet_Membership tables and, 
	if necessary, adds a new application to the aspnet_Applications table.

-- aspnet_Membership_FindUsersByEmail	
	Retrieves records from aspnet_Membership table 
	with e-mail addresses matching the specified pattern and with the specified application ID.

-- aspnet_Membership_FindUsersByName	
	Retrieves records from aspnet_Membership table 
	with user names matching the specified pattern and with the specified application ID.

-- aspnet_Membership_GetAllUsers	
	Retrieves all users from the aspnet_Membership 
	table with the specified application ID.

-- aspnet_Membership_GetNumberOfUsersOnline	
	Gets the number of users currently online 
	(those whose last activity dates.

-- aspnet_Membership_GetPassword	
	Gets the specified user's password data from the database. 
	Used for retrieving passwords with a user-supplied password answer.

-- aspnet_Membership_GetPasswordWithFormat	
	Gets the specified user's password from the database. 
	Used by the provider to retrieve passwords for performing password comparisons 
	(for example, when ValidateUser needs to validate a password).

-- aspnet_Membership_GetUserByEmail	
	Given an e-mail address and application ID, 
	retrieves the corresponding record from the aspnet_Membership table.

-- aspnet_Membership_GetUserByName	
	Given a user name and application ID, 
	retrieves the corresponding record from the aspnet_Membership table.

-- aspnet_Membership_GetUserByUserId	
	Given a user ID and application ID, 
	retrieves the corresponding record from the aspnet_Membership table.

-- aspnet_Membership_ResetPassword	
	Resets the specified user's password based on a password answer.

-- aspnet_Membership_SetPassword	
	Sets the specified user's password to the password input 
	to the stored procedure.

-- aspnet_Membership_UnlockUser	
	Restores login privileges for the specified user by setting the user's 
	IsLockedOut bit to 0.

-- aspnet_Membership_UpdateUser	
	Updates the user's last activity date in the aspnet_Users table and e-mail address, 
	comment, is-approved status, and last login date in the aspnet_Membership table.

-- aspnet_Membership_UpdateUserInfo	
	Updates account locking data for the specified user in the aspnet_Users and 
	aspnet_Membership tables. Used in conjunction with provider methods that track bad password and bad password-answer attempts.

-- aspnet_Users_CreateUser	
	Adds a user to the aspnet_Users table. Called by aspnet_Membership_CreateUser.

-- aspnet_Users_DeleteUser	
	Deletes a user from the aspnet_Membership table and optionally from other SQL provider tables, including aspnet_Users.
	
	
reference: http://msdn.microsoft.com/en-us/library/aa478950.aspx	
	
aspnet_Roles_CreateRole	
	Adds a role to the aspnet_Roles table and, if necessary, adds a new application to the aspnet_Applications table.
	
aspnet_Roles_DeleteRole	
	Removes a role from the aspnet_Roles table. Optionally deletes records referencing the deleted role from the aspnet_UsersInRoles table.

aspnet_Roles_GetAllRoles	
	Retrieves all roles with the specified application ID from the aspnet_Roles table.

aspnet_Roles_RoleExists	
	Checks the aspnet_Roles table to determine whether the specified role exists.

aspnet_UsersInRoles_AddUsersToRoles	
	Adds the specified users to the specified roles by adding them to the aspnet_UsersInRoles table.
aspnet_UsersInRoles_FindUsersInRole	
	Queries the aspnet_UsersInRoles table for all users belonging to the specified role whose user names match the specified pattern.

aspnet_UsersInRoles_GetRolesForUser	
	Queries the aspnet_UsersInRoles table for all roles assigned to a specified user.

aspnet_UsersInRoles_GetUsersInRoles	
	Queries the aspnet_UsersInRoles table for all users belonging to the specified role.

aspnet_UsersInRoles_IsUserInRole	
	Checks the aspnet_UsersInRoles table to determine whether the specified user belongs to the specified role.

aspnet_UsersInRoles_RemoveUsersFromRoles	
	Removes the specified users from the specified roles by deleting the corresponding records from the aspnet_UsersInRoles table.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>BAT</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>.bat_to_run_other_BatchFiles</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>BAT</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>.bat_to_run_other_BatchFiles</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


echo Starting Database Update.
echo
echo Excuting Script 1
echo.
start /wait C:\path\to\your\script1.bat
echo If there was a problem, break here.
Pause
echo Excuting Script 2
echo
start /wait C:\path\to\your\script2.bat
echo If there was a problem, break here.
Pause


rem: https://social.msdn.microsoft.com/Forums/sqlserver/en-US/7df3e988-6408-4e53-bf58-484fc99da3e5/sqlcmd-in-dos-batch-wait-for-finish?forum=ssdt
rem: The DOS Batch file now waits for the SQLCMD to finish.
START /b /wait SQLCMD

rem:==========================================================================================
START rem: Start a program, command or batch script (opens in a new window.)

/W or /WAIT  rem:  Start application and wait for it to terminate.
/B	rem: Start application without creating a new window. In this case Ctrl-C will be ignored - leaving Ctrl-Break as the only way to interrupt the application.

rem:The behaviour of START /Wait will vary depending on the item being started, for example

Echo Starting
START /wait "demo" calc.exe
Echo Done
rem: The above will start the calculator and wait before continuing. 
rem: However if you replace calc.exe with Winword.exe, to run Word instead, then the /wait will stop working, 
rem: this is because Winword.exe is a stub which launches the main Word application and then exits.

rem: A similar problem will occur when starting a batch file, by default START will run
rem:  the equivalent of CMD /K which opens a second command window and leaves it open.
rem:   In most cases you will want the batch script to complete, then just close it's CMD console and resume the initial batch script. 
rem:   This can be done by explicitly running CMD /C ...

Echo Starting
START /wait "demo" CMD /c demoscript.cmd
Echo Done
Add /B to have everything run in a single window.

rem: In a batch file, an alternative is to use TIMEOUT to delay processing of individual commands.

rem:   Starting a new process with CALL, is very similar to running START /wait, 
rem:   in both cases the calling script will (usually) pause until the second script has completed.

rem:   Starting a new process with CALL, will run in the same shell environment as the calling script. 
rem:   For a GUI application this makes no difference, but a second 'called' batch file will be able to change variables and pass those changes back to the caller.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>BAT</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>run_SQLCMD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>BAT</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>run_SQLCMD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
START /WAIT   rem: to run SQLCMD, which in this case just returns results from the query.

-Q (uppercase) rem:  runs the query and quits. 
-q (lowercase) rem: it will run the query and sit open in SQLCMD waiting for another query.

-i	rem: will run an SQLCMD ??
-b	rem: will end ??
-S	rem: Server name
-d	rem: database name
-U	rem: SQL login/User name
-P	rem: sql login password
-E	rem: to use Trusted Authentication
-e	rem: Saving the Output to a Text File Including the Input Batches
	rem:	Remember that the –e argument is not required to be used with the –o option. 
	rem:	You can also use it without the –o argument if you need the results to be displayed on the
	rem:	screen. That may be useful if you are invoking sqlcmd from another program that reads the standard output.
-A	rem: to connect via Dedicated Administrator Connection (DAC), when just that connection is available

&gt; sqlcmd -S (local) -i C:\path\to\your\script.sql -b

&gt; echo.
&gt; echo Running SQLCMD: "select top 100 * from sys.objects"
&gt; start /wait sqlcmd -S (local) -Q "select top 100 * from system..."

-o rem: output file

SYNTAX 
&gt; sqlcmd -S [SERVERNAME\INSTANCE] –U [username] –P [password] -A

EXAMPLES

&gt; sqlcmd -S localhost -U fdmsusr -P fdmsamho -i "E:\brantst\BranchAtt.sql" -o "E:\brantst\branchlog.txt"

&gt; sqlcmd -S 127.0.0.1 -E -i AdventureWorksDW2012.sql

&gt; sqlcmd -S 127.0.0.1 –U sa -P 1234 -i AdventureWorksDW2012.sql

&gt; sqlcmd -S 127.0.0.1 -E -i AdventureWorksDW2012.sql -o QueryResults.txt
 
 &gt; sqlcmd -S 127.0.0.1 -E -i AdventureWorksDW2012.sql -o QueryResults.txt -e
 
 rem: example of a file that you want the output to come back to screen:
 rem: file: sample.sql ------------------------------------------------
	SELECT @@VERSION
	GO
	SELECT @@SERVERNAME
	GO
 rem: ------------------------------------------------------------------
 rem: If you want to execute this file and display the output to the console, you can use the following command:
 sqlcmd -S 127.0.0.1 –U sa -P 1234 -i sample.sql -e</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>BAT</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>runMultipleSQLscriptsInAFolder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>BAT</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>runMultipleSQLscriptsInAFolder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>rem: runMultipleSQLscriptsInAFolder

https://www.sqlservercentral.com/articles/sqlcmd-and-batch-file-magic

To execute a bunch of scripts from a folder 

rem: Save this file with the Extension as .bat in one of your scripts folder.

rem: ========================================= .bat file in the folder that has the .sql script files

@@echo off
del errors /f /s /q
rd Errors
md Errors
FOR %%A IN (*.SQL) DO ( sqlcmd -S SERVERNAME -d DATABASE1 -U username -P password -i "%%A" -o "Errors\%%AError_DB1.txt" -I )
FOR %%A IN (*.SQL) DO ( sqlcmd -S SERVERNAME -d DATABASE2 -U username -P password -i "%%A" -o "Errors\%%AError_DB2.txt" -I )

rem: =========================================
SERVERNAME – Your Database Server Name.
DATABASE1 – Your Database name.
Username – Your SQL Username.
Password – Your SQL Password.

rem: =========================================
del errors /f /s /q
rem: When executing the scripts, we dump all errors to a folder called Errors. This needs to be cleaned up. This will delete the contents of folder silently.

md Errors
rem: This will create a new folder names Errors. I know it is redundant, but why not start with a clean slate.

FOR %%A IN (*.SQL) DO ( sqlcmd -S MANU -d DATABASE1 -U username -P password -i "%%A" -o "Errors\%%AError_DB1.txt" -I )

rem: Using a FOR loop we select each file name in sequential order as per the name of the file which ends with .sql extension in the current folder 
rem: 	and pass the file name to execute with Server Name, Username, Password and the database name using SQLCMD.

%%A
rem: here denotes the name of the current file name in the loop.

–o
rem:	outputs any errors/messages from the script to a file in the errors folder followed by the Database name.
rem:		 if there are no errors, it will still create the Error File.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>BOOTSTRAP</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>example_Inline_Form</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>BOOTSTRAP</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>example_Inline_Form</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- example_Inline_Form

http://getbootstrap.com/css/#forms

1]  &lt;label class="sr-only"
	- not visible, but is available to screen readers

2] 
	
3] 
     
4] 

 --&gt;
==================================================================

&lt;!-- styling.css  --&gt;

body {
    padding: 30px;
}


==================================================================

&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;link href="../../Content/bootstrap.min.css" rel="stylesheet" /&gt;
    &lt;link href="styling.css" rel="stylesheet" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form class="form-inline" role="form"&gt;
    
    &lt;!-- START --------------------------------------------------------------------------------------    --&gt;

    &lt;div class="form-group"&gt;
        &lt;label class="sr-only" for="exampleInputEmail2"&gt;Email address&lt;/label&gt;
        &lt;input type="email" class="form-control" id="exampleInputEmail2" placeholder="Enter email"/&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label class="sr-only" for="exampleInputPassword2"&gt;Password&lt;/label&gt;
        &lt;input type="password" class="form-control" id="exampleInputPassword2" placeholder="Password"/&gt;
    &lt;/div&gt;
    &lt;div class="checkbox"&gt;
        &lt;label&gt;
            &lt;input type="checkbox"/&gt;
            Remember me
        &lt;/label&gt;
    &lt;/div&gt;
    &lt;button type="submit" class="btn btn-default"&gt;Sign in&lt;/button&gt;

    &lt;!-- START --------------------------------------------------------------------------------------    --&gt;

&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CHROME_IRON</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>GoogleRemoteAccess</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CHROME_IRON</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>GoogleRemoteAccess</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>//////////////////////


1] How to set it up on your machine:

http://www.howtogeek.com/142146/how-to-use-google-chrome-to-remotely-access-your-computer/

2] This is the “Chrome Remote Desktop” Extension

https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp?hl=en


/////////////////////

Google gMail acct (CCWNC.Remote.Computer@gmail.com)
Name:
Joe
Smith
Password:
abcde_12345
BDay:
January 02 1960
Gender
Female
Mobile phone:
{none}
Other Email Address:
{none}
Remote Access
PIN: 147258

//////////////////////


Remote Access w/ Google
Security:
Gmail account (upper right corner of ' Chrome Remote Desktop' page)
Login, and logout at the end
Chrome Remote Desktop (new tab =&gt; Chrome Remote Desktop (click) =&gt; 
Enable remote connections
Disable Remote Connections


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CHROME_IRON</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>passwords</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CHROME_IRON</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>passwords</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>chrome://settings/passwords</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Command_Line</Category>
        <Language>ORACLE SQL</Language>
        <Public>false</Public>
        <Name>about_Command_Line</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Command_Line</Category>
          <Language>ORACLE SQL</Language>
          <Public>false</Public>
          <Name>about_Command_Line</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Command_Line

/*
Display the SQL command prompt window. 
	For example, on Windows, 
	click Start, 
	then Programs (or All Programs), 
	then Oracle Database 11g Express Edition, 
	and then Run SQL Command Line.

Connect as the SYSTEM user:
	Type: connect
	Enter user-name: system
	Enter password: &lt;password-for-system&gt; 	(e.g. abc123)
	
Exit:	*/
	&gt; exit
	
	
&gt; show user		--returns the user that you are running as (e.g. SYS)

--{to get some info about a table in a namespace (e.g. oe, table: orders}	
&gt; describe oe.orders</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Command_Line</Category>
        <Language>ORACLE SQL</Language>
        <Public>false</Public>
        <Name>Create_User</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Command_Line</Category>
          <Language>ORACLE SQL</Language>
          <Public>false</Public>
          <Name>Create_User</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Create the user. 
&gt; create user chris identified by &lt;password-for-chris&gt;;

--Grant the user the necessary privileges. For example:

&gt;SQL&gt; grant CREATE SESSION, ALTER SESSION, CREATE DATABASE LINK, -
CREATE MATERIALIZED VIEW, CREATE PROCEDURE, CREATE PUBLIC SYNONYM, -
CREATE ROLE, CREATE SEQUENCE, CREATE SYNONYM, CREATE TABLE, -
CREATE TRIGGER, CREATE TYPE, CREATE VIEW, UNLIMITED TABLESPACE -
to chris;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CrossApply</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CROSS_APPLY_with_Table_Function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CrossApply</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CROSS_APPLY_with_Table_Function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--https://www.simple-talk.com/sql/t-sql-programming/sql-server-apply-basics/

/*
The APPLY operator can take one of two forms: 
	CROSS APPLY or OUTER APPLY. 
The CROSS APPLY operator returns rows from the primary (outer) table 
    ===========
	only if the table-value function produces a result set. 
	That means, in the example above, 
		an employee would be included in the returned data only 
		if that employee has held a specific position within the company. 
		
The OUTER APPLY form, on the other hand, returns all rows from the outer table,
    =========== 
	even if the function produces no results. 
	So an employee would be listed even if that employee held no specific position.
*/


/*
CROSS APPLY returns only those rows in the outer table 
	for which the table value function returns data.
 */
 
 
USE AdventureWorks2008
GO

IF OBJECT_ID (N'fn_sales', N'IF') IS NOT NULL
  DROP FUNCTION dbo.fn_sales
GO

CREATE FUNCTION fn_sales (@SalesPersonID int) RETURNS TABLE
AS
RETURN
(
  SELECT TOP 3
		    SalesPersonID,
		    ROUND(TotalDue, 2) AS SalesAmount
  FROM Sales.SalesOrderHeader
  WHERE SalesPersonID = @SalesPersonID
  ORDER BY TotalDue DESC
)
GO

/*
As you can see, the fn_sales function takes one parameter, 
	@SalesPersonID, which is configured with the int data type. 
The function returns the three highest sales for the specified salesperson. 
Note that this is a table-valued function, 
	which means that it returns the entire result set generated by the SELECT statement. 
For the fn_sales function, the result set includes the SalesPersonID and SalesAmount columns.

After you create your function, 
	you can test it by running a SELECT statement that retrieves data from the function. 
For example, the following SELECT statement returns the SalesAmount column for salesperson ID 285:
*/

SELECT SalesAmount FROM fn_sales(285)


--The following table shows the results returned by the statement. 
--As you would expect, three rows have been returned—the three highest sales for this salesperson.

SalesAmount
85652.33
45338.76
36317.54

-- use the function within a statement that includes the CROSS APPLY operator

SELECT
		  sp.FirstName + ' ' + sp.LastName AS FullName,
		  fn.SalesAmount
FROM
		Sales.vSalesPerson AS sp
		CROSS APPLY
		fn_sales(sp.BusinessEntityID) AS fn		--&lt;== pass in the BusinessEntityID value, from the current row, as the function’s parameter
ORDER BY
  sp.LastName, fn.SalesAmount DESC
  
/*
Also notice that the columns in the SELECT list reference the source table 
	and function as they would if I were joining two tables. 
I assign an alias to the table (sp) and one to the function (fn) 
	and then reference the columns accordingly. 
For example, because the SalesAmount column in the SELECT list is returned by the function, 
	I qualify the column name as fn.SalesAmount.
*/  



</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CrossApply</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Instead_Of_Subquery_EX_2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CrossApply</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Instead_Of_Subquery_EX_2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--from: http://social.msdn.microsoft.com/Forums/en-US/59d3e53f-1458-43da-b4e4-3f9bab850606/passing-a-suquery-to-a-function-as-a-parameter?forum=transactsql

--As a subquery:
SELECT * 
FROM 
		dbo.f_Split(
						 (SELECT Code FROM Codes WHERE ID = 10)
						 , '|'
				    )

-- As a cross Apply:

SELECT * FROM Codes

                Cross Apply dbo.f_Split(Code, '|')

WHERE

                ID = 10</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Element_Formatting</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Clipping</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Element_Formatting</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Clipping</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Clipping is for 'absolute' positioned elements

Top, right, bottom, left
From top, from left, from top, from left

example:
&lt;style&gt;
.element1 {

	position: absolute;	/* can also use with 'fixed' */
	clip:rect(50px 200px 150px 50px);	/* this is the OLD syntax, new syntax is with comma seperation */
}
&lt;/style&gt;

////////////////////////////////

&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;clipping positined elements&lt;/title&gt;
&lt;!--[if lt IE 9]&gt;
&lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;style&gt;
aside, article, section, header, footer, nav {
	display: block;
}
html, body {
	margin: 0;
	padding: 0;
}
html {
	background: #ccc;
}
body {
	width: 700px;
	background: #fff;
	margin: 2em auto 2em;
	font: 100% Arial, Helvetica, sans-serif;
	padding: 25px;
}
div {
	margin-bottom: 25px;
	width: 400px;
	height: 150px;
	padding: 25px;
	border: 2px solid red;
}
/*add styles here*/
.container {
	background: rgb(237,228,214);
	padding: 25px;
	height: 100px;
	position: relative;
	margin-top: 25px;
	border: 1px solid black;
}
.element1 {
	background: rgb(211, 206, 61);
	position: fixed;
	left: 25px;
	top: 25px;
	clip:rect(2px 452px 200px 2px);
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Clip&lt;/h1&gt;
&lt;p&gt;The Clip property can be set to define the visible part of absolutely positioned elements. You can set clipping values through the use of a rectangular shape. Values: &lt;strong&gt;&amp;lt;shape&amp;gt;&lt;/strong&gt; | &lt;strong&gt;auto&lt;/strong&gt; | &lt;strong&gt;inherit&lt;/strong&gt; &lt;p&gt;
&lt;p&gt;When defined, an element's clipping region hides any part of the element that is outside of the clipping region. Clipping is defined as a series of offset that tell the browser how far away from each side of the element to clip. Currently, the only supported shape for clipping is rectangular. The syntax is defined as a series of offsets that looks like this: &lt;strong&gt;rect(10px,10px, 25px, 10px)&lt;/strong&gt;&lt;/p&gt;
&lt;section class="container"&gt;
&lt;div class="element1"&gt;&lt;p&gt;This content will eventually be clipped based on the offsets passed into the clip property. The syntax of the property starts at the top and moves clockwise, so the offsets are: top, right, bottom, and left. Top and bottom offsets start at the top edge of the box while left and right offsets start from the left edge of the element's box.&lt;/p&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Layout</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Fixed</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Layout</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Fixed</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Starting in the &lt;bocy&gt; it is set to a fixed size, so if user or user-agent changes the window size, 
	the appearance does not change
The &lt;article&gt; float, but have a fixed size		

960px is probably acceptable for contemporary monitors
	b/c most monitors are 1024 wide


&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;fixed layout&lt;/title&gt;
&lt;!--[if lt IE 9]&gt;
&lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;style&gt;
aside, article, section, header, footer, nav {
	display: block;
}
aside, article, section, header, footer, nav, html, body, p, h1, h2, h3, div {
	margin: 0;
	padding: 0;
}
html {
	background: #D2B78F;
}
body {
	width: 960px;   /* &lt;&lt;&lt; Fixed size */
	margin: 0 auto;
	background: #fff;
	font: 90%/1.6 baskerville, palatino, 'palatino linotype', georgia,serif;
}

/*layout styles*/
article {
	float: left;
	width: 615px;
	padding-left: 25px;
}
aside {
	float: right;
	width: 243px;
	padding: 0 25px;
	border-left: 1px solid #aaa;
}
footer {
	clear: both;
	padding: 25px 0 15px;
}

/*content styling*/
header {
	background: #4F483E;
	padding: 50px 25px 10px 0;
	color: #fff;
	margin-bottom: 2em;
}
h1 {
	text-align: right;
	font-size: 3em;
	font-weight: normal;
	font-variant: small-caps;
	letter-spacing: .1em;
}
p {
	margin-bottom: 1em;
}
article {
	text-align: justify;
}
article h2 {
	font-size: 2em;
	font-weight: normal;
	margin-bottom: .2em;
}
article p {
	font-size: 1.2em;
	margin-bottom: 1em;
}
aside {
	font: .9em "Lucida Sans Unicode", "Lucida Grande", sans-serif;
}
aside h2 {
	font-size: 1.2em;
	margin-bottom: 1em;
}
.author {
	font-weight: bold;
	text-align: right;
}
footer {
	background: #686D7B;
	font: 1.2em "Lucida Sans Unicode", "Lucida Grande", sans-serif;
	text-transform: uppercase;
	letter-spacing: .2em;
	text-align: center;
	color: #fff;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;header&gt;
&lt;h1&gt;Alice in Wonderland&lt;/h1&gt;
&lt;/header&gt;
&lt;article class="chapterOne"&gt;
&lt;h2&gt;Down the Rabbit Hole&lt;/h2&gt;
&lt;section class="secOne"&gt;
&lt;p&gt;Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'&lt;/p&gt;
&lt;p&gt;So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.&lt;/p&gt;
&lt;p&gt;There was nothing so very remarkable in that; nor did Alice think it so very much out of the way to hear the Rabbit say to itself, `Oh dear! Oh dear! I shall be late!' (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually took a watch out of its waistcoat-pocket, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge. &lt;/p&gt;
&lt;p&gt;In another moment down went Alice after it, never once considering how in the world she was to get out again.&lt;/p&gt;
&lt;p&gt;The rabbit-hole went straight on like a tunnel for some way, and then dipped suddenly down, so suddenly that Alice had not a moment to think about stopping herself before she found herself falling down a very deep well.&lt;/p&gt;
&lt;/section&gt;
&lt;h2&gt;The Fall Continues&lt;/h2&gt;
&lt;section class="secTwo"&gt;
&lt;p&gt;Either the well was very deep, or she fell very slowly, for she had plenty of time as she went down to look about her and to wonder what was going to happen next. First, she tried to look down and make out what she was coming to, but it was too dark to see anything; then she looked at the sides of the well, and noticed that they were filled with cupboards and book-shelves; here and there she saw maps and pictures hung upon pegs. She took down a jar from one of the shelves as she passed; it was labelled `ORANGE MARMALADE', but to her great disappointment it was empty: she did not like to drop the jar for fear of killing somebody, so managed to put it into one of the cupboards as she fell past it.&lt;/p&gt;
&lt;p&gt;`Well!' thought Alice to herself, `after such a fall as this, I shall think nothing of tumbling down stairs! How brave they'll all think me at home! Why, I wouldn't say anything about it, even if I fell off the top of the house!' (Which was very likely true.) &lt;/p&gt;
&lt;p&gt;Down, down, down. Would the fall NEVER come to an end! `I wonder how many miles I've fallen by this time?' she said aloud. `I must be getting somewhere near the centre of the earth. Let me see: that would be four thousand miles down, I think--' (for, you see, Alice had learnt several things of this sort in her lessons in the schoolroom, and though this was not a VERY good opportunity for showing off her knowledge, as there was no one to listen to her, still it was good practice to say it over) `--yes, that's about the right distance--but then I wonder what Latitude or Longitude I've got to?' (Alice had no idea what Latitude was, or Longitude either, but thought they were nice grand words to say.)&lt;/p&gt;
&lt;p&gt;Presently she began again. `I wonder if I shall fall right THROUGH the earth! How funny it'll seem to come out among the people that walk with their heads downward! The Antipathies, I think--' (she was rather glad there WAS no one listening, this time, as it didn't sound at all the right word) `--but I shall have to ask them what the name of the country is, you know. Please, Ma'am, is this New Zealand or Australia?' (and she tried to curtsey as she spoke--fancy CURTSEYING as you're falling through the air! Do you think you could manage it?) `And what an ignorant little girl she'll think me for asking! No, it'll never do to ask: perhaps I shall see it written up somewhere.'&lt;/p&gt;
&lt;p&gt;Down, down, down. There was nothing else to do, so Alice soon began talking again. `Dinah'll miss me very much to-night, I should think!' (Dinah was the cat.) `I hope they'll remember her saucer of milk at tea-time. Dinah my dear! I wish you were down here with me! There are no mice in the air, I'm afraid, but you might catch a bat, and that's very like a mouse, you know. But do cats eat bats, I wonder?' And here Alice began to get rather sleepy, and went on saying to herself, in a dreamy sort of way, `Do cats eat bats? Do cats eat bats?' and sometimes, `Do bats eat cats?' for, you see, as she couldn't answer either question, it didn't much matter which way she put it. She felt that she was dozing off, and had just begun to dream that she was walking hand in hand with Dinah, and saying to her very earnestly, `Now, Dinah, tell me the truth: did you ever eat a bat?' when suddenly, thump! thump! down she came upon a heap of sticks and dry leaves, and the fall was over. &lt;/p&gt;
&lt;/section&gt;
&lt;/article&gt;
&lt;aside&gt;
&lt;h2&gt;'Who will Riddle me the How and the Why?'&lt;/h2&gt;
&lt;p&gt;So questions one of England's sweetest singers. The `How?' has already been told, after a fashion, in the verses prefixed to Alice in Wonderland ; and some other memories of that happy summer day are set down, for those who care to see them, in this little book--the germ that was to grow into the published volume. But the `Why?' cannot, and need not, be put into words. Those for whom a child's mind is a sealed book, and who see no divinity in a child's smile, would read such words in vain: while for any one that has ever loved one true child, no words are needed. For he will have known the awe that falls on one in the presence of a spirit fresh from GOD's hands, on whom no shadow of sin, and but the outermost fringe of the shadow of sorrow, has yet fallen: he will have felt the bitter contrast between the haunting selfishness that spoils his best deeds and the life that is but an overflowing love--for I think a child's first attitude to the world is a simple love for all living things: and he will have learned that the best work a man can do is when he works for love's sake only, with no thought of name, or gain, or earthly reward. No deed of ours, I suppose, on this side the grave, is really unselfish: yet if one can put forth all one's powers in a task where nothing of reward is hoped for but a little child's whispered thanks, and the airy touch of a little child's pure lips, one seems to come somewhere near to this.&lt;/p&gt;
&lt;p&gt;There was no idea of publication in my mind when I wrote this little book: that was wholly an afterthought, pressed on me by the `perhaps too partial friends' who always have to bear the blame when a writer rushes into print: and I can truly say that no praise of theirs has ever given me one hundredth part of the pleasure it has been to think of the sick children in hospitals (where it has been a delight to me to send copies) forgetting, for a few bright hours, their pain and weariness--perhaps thinking lovingly of the unknown writer of the tale--perhaps even putting up a childish prayer (and oh, how much it needs!) for one who can but dimly hope to stand, some day, not quite out of sight of those pure young faces, before the great white throne. `I am very sure,' writes a lady-visitor at a Home for Sick Children, `that there will be many loving earnest prayers for you on Easter morning from the children.' . &lt;/p&gt;
&lt;p&gt;Let me add--for I feel I have drifted into far too serious a vein for a preface to a fairy-tale--the deliciously naive remark of a very dear child-friend, whom I asked, after an acquaintance of two or three days, if she had read `Alice' and the `Looking-Glass'. `Oh yes,' she replied readily, `I've read both of them! And I think' (this more slowly and thoughtfully) `I think "Through the Looking-Glass" is more stupid than "Alice's Adventures". Don't you think so?' But this was a question I felt it would be hardly discreet for me to enter upon.&lt;/p&gt;
&lt;p class="author"&gt;Lewis Carroll December, 1886&lt;/p&gt;
&lt;/aside&gt;
&lt;footer&gt;
&lt;p&gt;`Oh, I've had such a curious dream!' said Alice&lt;/p&gt;
&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Selector</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Universal_Selector</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Selector</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Universal_Selector</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8"&gt;
        &lt;title&gt;Universal selector&lt;/title&gt;
        &lt;!--[if lt IE 9]&gt;
    &lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
        &lt;style&gt;
            /*The '*' is the Universal selector, it applies to every single element */
            *
                {
                    margin: 0;
                    padding: 0;
                }
                
            /* This will not over-ride the universal selector, like it would if you used the 'body' style    
            section
                {
                    color: red;
                }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;article&gt;
        &lt;header&gt;
            &lt;hgroup&gt;
                &lt;h1&gt;Chapter One: Down the Rabbit Hole&lt;/h1&gt;
                &lt;h2&gt;In which Alice follows a very &lt;em&gt;curious-looking rabbit&lt;/em&gt; down his hole, finds herself&lt;/em&gt;in an odd hallway, and changes sizes in a most peculiar manner&lt;/h2&gt;
             &lt;/hgroup&gt;
        &lt;/header&gt;
        &lt;section&gt;
                  &lt;p&gt;Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, 'and what is the use of a book,' thought Alice 'without pictures or conversation?'&lt;/p&gt;
                  &lt;p&gt;So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.&lt;/p&gt;
                  &lt;p&gt;There was nothing so VERY remarkable in that; nor did Alice think it so VERY much out of the way to hear the Rabbit say to itself, 'Oh dear! Oh dear! I shall be late!' (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually TOOK A WATCH OUT OF ITS WAISTCOAT-POCKET, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge.&lt;/p&gt;
                  &lt;/section&gt;
                  &lt;section&gt;
                  &lt;h2&gt;Alice ventures down the hole&lt;/h2&gt;
                  &lt;p&gt;In another moment down went Alice after it, never once considering how in the world she was to get out again.&lt;/p&gt;
                  &lt;p&gt; The rabbit-hole went straight on like a tunnel for some way, and then dipped suddenly down, so suddenly that Alice had not a moment to think about stopping herself before she found herself falling down a very deep well.&lt;/p&gt;
                  &lt;p&gt;Either the well was very deep, or she fell very slowly, for she had plenty of time as she went down to look about her and to wonder what was going to happen next. First, she tried to look down and make out what she was coming to, but it was too dark to see anything; then she looked at the sides of the well, and noticed that they were filled with cupboards and book-shelves; here and there she saw maps and pictures hung upon pegs. She took down a jar from one of the shelves as she passed; it was labelled 'ORANGE MARMALADE', but to her great disappointment it was empty: she did not like to drop the jar for fear of killing somebody, so managed to put it into one of the cupboards as she fell past it.&lt;/p&gt;
                  &lt;p&gt;Well!' thought Alice to herself, 'after such a fall as this, I shall think nothing of tumbling down stairs! How brave they'll all think me at home! Why, I wouldn't say anything about it, even if I fell off the top of the house!' (Which was very likely true.)&lt;/p&gt;
                  &lt;p&gt;Down, down, down. Would the fall NEVER come to an end! 'I wonder how many miles I've fallen by this time?' she said aloud. 'I must be getting somewhere near the centre of the earth. Let me see: that would be four thousand miles down, I think--' (for, you see, Alice had learnt several things of this sort in her lessons in the schoolroom, and though this was not a VERY good opportunity for showing off her knowledge, as there was no one to listen to her, still it was good practice to say it over) '--yes, that's about the right distance--but then I wonder what Latitude or Longitude I've got to?' (Alice had no idea what Latitude was, or Longitude either, but thought they were nice grand words to say.)&lt;/p&gt;
                  &lt;/section&gt;
                  &lt;/article&gt;
    &lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Text_Formatting</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>LineHeight</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Text_Formatting</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>LineHeight</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;line spacing&lt;/title&gt;
&lt;!--[if lt IE 9]&gt;
&lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;style&gt;
aside, article, section, header, footer, nav {
	display: block;
}
html {
	background-color: white;
}
body {
	width: 50%;
	margin: 0 auto;
	font: 100% Georgia, "Times New Roman", Times, serif;
	padding:50px;
	line-height: 1.6;   /* &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; can use %, em, or no units, but when inheriting down do NOT use any unit that way
									the math will be done at the level of each element, rather
									than doing the math up here at the body element  */
}
h1 {
	font-size: 1.8em;
}
h2 {
	font-size: 1.4em;
}
p {
	font-size: 1em;
}
span {
	background: yellow;
	display: inline-block;
	line-height: 2;
}
.center {
	color: #fff;
	background: #666;
	line-height: 50px;
	padding-left: 25px;
}
/*add styles here*/

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;article&gt;
&lt;h1&gt;Line height&lt;/h1&gt;
&lt;p&gt;Leading, or line spacing, is controlled in CSS through the line-height property. You can use any unit of measurement with line-height, and it is unique in that it allows you to use a &amp;quot;multiple&amp;quot; value as well. Multiples are a single number with no unit of measurement specified, the number simply acts as a multiple of the current element's font-size.&lt;/p&gt;
&lt;h2&gt;How it's calculated&lt;/h2&gt;
&lt;p&gt;The line-height value is used to specify the minimal height of line boxes within an element. If you want to visualize an element's line box, simply place a background color behind an element element with no padding. &lt;span&gt;Like this text, for example, which is in a span tag.&lt;/span&gt; The minimum height is determined by calculating the minimum height above the baseline and a minimum height below it.&lt;/p&gt;
&lt;h2 class="center"&gt;Other uses&lt;/h2&gt;
&lt;p&gt;Line-height is often used to center single line text vertically within a box. Take the above headline, by giving it a background color and a line-height to either match or set the element's height, and the text is vertically centered, as it &amp;quot;floats&amp;quot; in the middle of it's line-height. Try it!&lt;/p&gt;
&lt;h2&gt;Things to consider&lt;/h2&gt;
&lt;p&gt;If you use relative units of measurement with line-height, or a multiple, the value is calculated based on the font-size of the element it is applied to. If no font-size is explicitly set, the font-size of the parent element is used. In the case of element's inheriting line-height, they usually inherit the calculated value, meaning that if you set a parent element to 1em, that value will be calculated and passed down to all child elements. However, if you set line-height in multiples, the multiple itself is passed down, letting the children calculate  line-height values from their own font-size.&lt;/p&gt;
&lt;/article&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Text_Formatting</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Margin_spaceBetweenElements</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Text_Formatting</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Margin_spaceBetweenElements</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;element spacing&lt;/title&gt;
&lt;!--[if lt IE 9]&gt;
&lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;style&gt;
aside, article, section, header, footer, nav {
	display: block;
}
body, h1, h2, h3, p {
	margin: 0;  /* reset the margins */
}
html {
	background-color: white;
}
body {
	width: 50%;
	margin: 0 auto;
	font: 100% Georgia, "Times New Roman", Times, serif;
	padding:50px;
	line-height: 1.6;
}
h1 {
	font-size: 1.8em;
	margin-bottom: 1em;      /* &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   */
}
h2 {
	font-size: 1.4em;
	margin-bottom: .2em;      /* &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   */
}
p {
	font-size: 1em;
	margin-bottom: 1em;      /* &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   */
}
span {
	background: yellow;
	display: inline-block;
	line-height: 2;
}
.center {
	color: #fff;
	background: #666;
	line-height: 50px;
	padding-left: 25px;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;article&gt;
&lt;h1&gt;Line height&lt;/h1&gt;
&lt;p&gt;Leading, or line spacing, is controlled in CSS through the line-height property. You can use any unit of measurement with line-height, and it is unique in that it allows you to use a &amp;quot;multiple&amp;quot; value as well. Multiples are a single number with no unit of measurement specified, the number simply acts as a multiple of the current element's font-size.&lt;/p&gt;
&lt;h2&gt;How it's calculated&lt;/h2&gt;
&lt;p&gt;The line-height value is used to specify the minimal height of line boxes within an element. If you want to visualize an element's line box, simply place a background color behind an element element with no padding. &lt;span&gt;Like this text, for example, which is in a span tag.&lt;/span&gt; The minimum height is determined by calculating the minimum height above the baseline and a minimum height below it.&lt;/p&gt;
&lt;h2 class="center"&gt;Other uses&lt;/h2&gt;
&lt;p&gt;Line-height is often used to center single line text vertically within a box. Take the above headline, by giving it a background color and a line-height to either match or set the element's height, and the text is vertically centered, as it &amp;quot;floats&amp;quot; in the middle of it's line-height. Try it!&lt;/p&gt;
&lt;h2&gt;Things to consider&lt;/h2&gt;
&lt;p&gt;If you use relative units of measurement with line-height, or a multiple, the value is calculated based on the font-size of the element it is applied to. If no font-size is explicitly set, the font-size of the parent element is used. In the case of element's inheriting line-height, they usually inherit the calculated value, meaning that if you set a parent element to 1em, that value will be calculated and passed down to all child elements. However, if you set line-height in multiples, the multiple itself is passed down, letting the children calculate  line-height values from their own font-size.&lt;/p&gt;
&lt;/article&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DATES</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>PureMath_NoCharecters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DATES</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>PureMath_NoCharecters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>    --has added benefit of not doing any string conversions, 
    --so it's pure arithmetic processing (very fast) and it's not 
    --dependant on any date format This capitalizes on the fact that 
    --SQL Server's internal representation for datetime and smalldatetime 
    --values is a two part value the first part of which is an integer 
    --representing the number of days since 1 Jan 1900, and the second 
    --part is a decimal fraction representing the fractional portion 
    --of one day (for the time) --- So the integer value 0 (zero) always 
    --translates directly into Midnight morning of 1 Jan 1900...
    
    --Just a little addition: You have to add "@DayOfMonth - 1" and "@Month - 1", because 0 already is 1 Jan, not day "0" ;) 
    
    --Works for leap years: select dateadd(mm,(@y-1900)* 12 + @m - 1,0) + (@d-1) 
    
    --Results in a valid yet spurious date value when passed invalid combination of values e.g. @Year = 2001,
    --  @Month = 13 and @DayOfMonth = 32 results in 2002-02-01T00:00:00.000. The accepted answer (by Cade Roux) 
    
    
    --generates an error, which is more useful.

Declare @DayOfMonth TinyInt Set @DayOfMonth = 13
Declare @Month TinyInt Set @Month = 6
Declare @Year Integer Set @Year = 2006
-- ------------------------------------
Select DateAdd(day, @DayOfMonth - 1, 
          DateAdd(month, @Month - 1, 
              DateAdd(Year, @Year-1900, 0)))
              
              </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions_ITERATORS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>COUNTX</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions_ITERATORS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>COUNTX</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>




=============================EXAMPLES============================================
COUNTX():
	'Syntax: 
	COUNTX(
			&lt;table&gt;
			,&lt;expression&gt;
		   )
		   

table	
	'The table containing the rows to be counted.
	'The first argument must always be a table, or any expression that returns a table
expression	
	'An expression that returns the set of values that contains the values you want to count.
	' The second argument is the column or expression that is searched by COUNTX.		   
		   
		   
	'COUNTX function counts the number of rows which are non-empty when 
	'evaluating an expression over a table.
	'This function cannot be used for boolean values.

------------------------------------------------------
'The following formula returns a count of all rows in the Product table that have a list price.
COUNTX(
		Product,
		[ListPrice]
	  )  
	  
---------------------------------------------------	  
'The following formula illustrates how 
' 	to pass a filtered table to COUNTX for the first argument. 
'The formula uses a filter expression to get only the rows in the Product table that meet the condition, 
'	ProductSubCategory = "Caps", 
'	and then counts the rows in the resulting table that have a list price. 
'The FILTER expression applies to the table Products but uses a value that you look up in the related table, ProductSubCategory.


COUNTX(
		FILTER(
				Product,
				RELATED(ProductSubcategory[EnglishProductSubcategoryName])="Caps"
				), 
		Product[ListPrice]
	   )
---------------------------------------------------------------------------------------
Quantity Resources =
						COUNTX (
						
								'This will exclude only the blank rows of WorkLocation
								Quantity Resources =
								COUNTX (
									    FILTER (
										        Resource Actual,
										        Resource Actual[Category] = "Hours"
										            &amp;&amp; Resource Actual[Quantity] &gt; 0
										            &amp;&amp; NOT ISBLANK ( Resource Actual[Work Location] )
									   		   ),
									    Resource Actual[Name]
								)
								
---------------------------------------------------------------------------------------------
'I am trying to filter all Males with a grade of either C,D or E and to give me the count of rows. 	
CALCULATE(
         COUNTROWS(Grades),
            FILTER(Grades,Grades[Gender]="M"),
            FILTER(Grades,
                 Grades[Grade]="c" || Grades[Grade]="d" || Grades[Grade]="e")

        )								
---------------------------------------------------------------------------------------------
'This will exclude the name completely from the count, if they contain atleast one blank value in Work Location

Quantity Resources =
						VAR _BlankWL =
						    SELECTCOLUMNS (
						        FILTER ( Resource Actual, LEN ( Resource Actual[Work Location] ) = 0 ),
						        "Name", [Name]
						    )
						RETURN
						    COUNTX (
						        FILTER (
						            Resource Actual,
						            Resource Actual[Category] = "Hours"
						                &amp;&amp; Resource Actual[Quantity] &gt; 0
						                &amp;&amp; NOT Resource Actual[Work Location] IN { _BlankWL }
						        ),
						        Resource Actual[Name]
						    )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions_String</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>TEXT_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions_String</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>TEXT_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://docs.microsoft.com/en-us/dax/text-functions-dax

ampersand (&amp;) to concatenate strings



BLANK
CODE
CONCATENATE


	-------------------------------- also Ampersand
	&amp; (ampersand)						Connects, or concatenates, two values to produce one continuous text value						
									[Region] &amp; ", " &amp; [City]
CONCATENATEX - 'returns the concatenation of those values in a single string result, seperated by a specified delimiter
	'e.g.Notice: DISTINCT gets rid of the duplicates
	Colors = CONCATENATEX(DISTINCT(Products[Color]),Products[Color], ", ")
	'It is possible to pass Unicode characters to the CONCATENATEX function, using the UNICHAR(number) function.	
	'new line is given by UNICHAR(10).
	
	Cities = IF(
				    //' if there is one city for the current 
				    //' filter context ...
				    DISTINCTCOUNT(City[CityName]) = 1,
				    //' ... shows the city's name
				    VALUES(City[CityName]),
				    //' Otherwise, list all city names    
				    CONCATENATEX(							--&lt;===
				        VALUES(City[CityName]),
				        City[CityName],
				        ",",
				        City[CityName],
				        ASC
				    )
				)	
	
		
	
Custom date and time formats for the FORMAT function
Custom Numeric Formats for the FORMAT function
EXACT
FIND
	'Returns the starting position of one text string within another text string. FIND is case-sensitive.
	FIND(
			&lt;find_text&gt;
			, &lt;within_text&gt;
			[, [&lt;start_num&gt;]
			[, &lt;NotFoundValue&gt;]]
			) 
	'e.g.: Caps sensitive, find 'Mouse" in column  'Product'[ProductName], 1= yes report back the position if found, if not found then put a zero(0)
	Mouse = FIND("Mouse",'Product'[ProductName],1,0)

FIXED
FORMAT
	can use to format many things, but regardless it convert them to a string, e.g. dates become strings
	e.g.
	Month Year = 
			//'  returns 2 digit month hypen 4 digit year
			//' MM-YYYY
			FORMAT(
			    'Date'[Date],
			    "MM-YYYY")
			//' MM =&gt; 01, MMM =&gt; Jan, MMMM =&gt; January	
				
	
LEFT
LEN
LOWER
MID
	'Returns a string of characters from the middle of a text string, given a starting position and length.
	MID(&lt;text&gt;, &lt;start_num&gt;, &lt;num_chars&gt;) 
	'Example
	Removes all spaces from text except for single spaces between words.
		
Pre-defined date and time formats for the FORMAT function
Pre-Defined Numeric Formats for the FORMAT function
REPLACE
REPT
RIGHT
SEARCH
SUBSTITUTE
	'replace multiple values in a column
		Segments = SUBSTITUTE(
		                     SUBSTITUTE(Segments[DealerSegmentation], "Signed Not Submitting Apps", "SNSA"),
		                     "Submitting Apps No Contracts", "SNS"
)

TRIM
	'Removes all spaces from text except for single spaces between words.
UNICHAR
UPPER
VALUE
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATE_1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATE_1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>' CALCULATE is NOT an ITERATOR

'NOTE: When a MEASURE is referenced in a DAX expression, it is always surrounded by a CALCULATE statement

'SYNTAX
CALCULATE(
			&lt;expression&gt;
			[, &lt;filter1&gt; 
			[, &lt;filter2&gt; 
			[, …]
			]])

RETURNS
----------
'a scaler value

NOTE:
'WITHOUT a filter parameter, the Row Context is passed in as a Filter context, so the expression parameter is evaluated
' on each row, under the row context
'WITH a filter parameter, all the external filters (and Row Context) are replaced by the filter parameter.

'CALCULATE allows you to evaluate an expresson in a modified Filter context
'example: I want to see Total Sales, BUT not for the Current Filter, rather for "Last Year", 
'		so take whatever the current year is and modify it to give me last years total sales
' or even though I am on the row for Australia, I want the total sales for the U.S.

'CALCULATE also performs "CONTEXT TRANSITION" i.e. Row Context is converted to Filter Context

-------------------------------------------------------------------------------------

	&lt;expression&gt;
		'CALCULATE: This is some expression, Measure, or scaler Function, that would be operating in the present filter context
		'CALCULATETABLE: The is some table, or Table Function, that would be operating in the present filter context
		
		
	 &lt;filter1&gt; 
	 	'List of simple boolean filter expressions (note these requre simple, fixed values; you cannot create filters based on MEASURES)
	 	'	as compared to FILTER which can use MEASURES
	 	'	so If you want to use a measure to filter with, use a FILTER statement as the filter Expression.
	 
		'The filter replaces the present filter context with a new filter context, and THEN the &lt;expression&gt; is resolved
		'you can’t use a measure in the filtering part of a CALCULATE function; you can only refer to columns
		
		'CALCULATE filter expressions accept both boolean &amp; table functions (individually or
			'at the same time!), but all filter arguments are automatically converted into a table
			
		'Any time you use write a function that contains a logical statement (IN, &gt;,&lt;, =, etc.) you’re creating a
			'table (internally processed with FILTER &amp; ALL)
			
		'the FILTER function can be used to create a virtual table &lt;filter&gt; for CALCULATE
		
		'The filters are evaluated from last, to first.,
-------------------------------------------------------------------------------------	
	

'There's also the CALCULATETABLE function. 
'	It performs exactly the same functionality, except it modifies the filter context applied to an expression that returns a table object.



'The expression used as the first parameter is essentially the same as a measure.
'the 'filters' over-ride existing filters that are already being applied.

Filters can be:
-----------------
'	Boolean filter expressions
'	Table filter expressions
'	Filter modification functions
'When there are multiple filters, they're evaluated by using the AND logical operator. 
'That means all conditions must be TRUE at the same time.

BOOLEAN FILTER EXPRESSIONS
--------------------------
'A Boolean expression filter is an expression that evaluates to TRUE or FALSE. There are several rules that they must abide by:
'	They can reference only a single column.
'	They cannot reference measures.
'	They cannot use a nested CALCULATE function.
'	They cannot use functions that scan or return a table, including aggregation functions.

'Table filter expression


'EXAMPLE
'you might already have a MEASURE: 

	Number of Products = COUNTROWS('Product')
	
'but you could create a second measure that only looks at that calculation when the unit cost is &gt; $100

	Number of Products OVER 100 = CALCULATE(
											[Number of Products], 
											'Product'[UnitCost] &gt; 100
											)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATE_2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATE_2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] 'The name CALCULATE is a misnomer. The function doesn't really calculate anything. It simply
'		modifies the evaluation context under which an expression gets evaluated.
2]' CALCULATE is sometimes preferred to using Time intelligence functions
'		Some TI functions contain an optional filter, but just one. This is not the case for CALCULATE
'		Most, or all, TI functions require the &lt;date&gt; argument to be a continous set of data that
'			encompass the period being analyzed CALCULATE doesn't have this issue.
3]' All CALCULATE filters are table filters and you can have as many as you want.
4]' All CALCULATE filters are applied using logical AND.
5]' Since CALCULATE modifies the filter context for an expression, you may need to change the relationship
'		between two tables (e.g. usising USERELATIONSHIP)
6]' When CALCULATE operates in a row context situation, a context transition occors.

A context transition 
	'involves a row context being converted to, or replaced by, a filter context,
	'caused by the CALCULATE statement being used in an iterator. 
	
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CALCULATE_modifiers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CALCULATE_modifiers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
MODIFIERS:'modifiers are evaluated before the &lt;filter1&gt;  parameter(s)
--------------------------
	REMOVEFILTERS 'from a table, or a column
	'Remove all filters, or filters from one or more columns of a table, or from all columns of a single table.
	'Just like ALL, except it can only be used in CALCUATE, and not as a Table Expression
	ALL, ALLEXCEPT, ALLNOBLANKROW, ALLSELECTED, 
	'Remove filters from one or more columns, or from all columns of a single table.
	KEEPFILTERS 'for an expression, that can be a logical statement, table, or table expression
	'Add filter without removing existing filters on the same columns.
	'e.g.
	 
			Measure1 = 
				CALCULATE ( 
							[Sales Amount], 
							KEEPFILTERS( Product[Color] IN {"Green","Red"} )
						   )
	
	
	
	USERELATIONSHIP
	'Engage an inactive relationship between related columns, in which case the active relationship will automatically become inactive.
	CROSSFILTER
	'Modify filter direction (from both to single, or from single to both) or disable a relationship.
	
	


'The expression used as the first parameter is essentially the same as a measure.
'the 'filters' over-ride existing filters that are already being applied.


============================================================================= remove all external filters on field: Calendar Year
'Modifies the filters: to use all Years, regardless of external filters
EVALUATE
{
	CALCULATE( 
	[Sales Amount]
	,ALL(Calendar[Calendary Year])
	)	
}

'OR using REMOVEFILTERS

EVALUATE
{
	CALCULATE( 
	[Sales Amount]
	,REMOVEFILTERS(Calendar[Calendary Year])
	)	
}
============================================================================= VALUES respects the outer filters
'using VALUES would give the calculation, where any filters from the slicers is passed through to the Measure

EVALUATE
{
	CALCULATE( 
	[Sales Amount]
	,VALUES(Calendar[Calendary Year])
	)	
}
============================================================================= Simulate the Inner Calculate, in a specific row of a visual
EVALUATE
{
	CALCULATE(
			CALCULATE( 
					[Sales Amount]
					,ALL(Calendar[Calendary Year])
					)
			,Calendar[Calendary Year] = 2014			//'simulate how the inner CALCULATE would act for a row where Year = 2014
			)
	
}
=============================================================================KEEPFILTERS 
//'KEEPFILTERS keeps the external filters, and adds the filter that is in the KEEPFILTERS statement

//'This is looking for situations where the dealer name is both "Dealer-9940" &amp; "Dealer-9941" which results in zero records
EVALUATE
{
    CALCULATE(
        CALCULATE(
            [Total Sales],
            KEEPFILTERS(Dealers[Dealer Name] = "Dealer-9940")
            ),
        Dealers[Dealer Name] = "Dealer-9941"
        )
}    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CompareContrastTwoMainMethods</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CompareContrastTwoMainMethods</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- [CompareContrastTwoMainMethods]
-- these are examples of BAD usage of dynamic SQL
--how to write a stored procedure that takes a table name as its input.
--======================================================
-- there are two ways to invoke dynamic SQL, sp_executesql and EXEC():
--	 sp_executesql should be your choice 95% of the time

CREATE PROCEDURE general_select1 @tblname sysname,
                                 @key     varchar(10) AS
DECLARE @sql nvarchar(4000)
SELECT @sql = ' SELECT col1, col2, col3 ' +
              ' FROM dbo.' + quotename(@tblname) +
              ' WHERE keycol = @key'
EXEC sp_executesql @sql, N'@key varchar(10)', @key

-- Syntax:

sp_executesql @SQL_commands, @parameter_definitions, param1,...paramN

--======================================================

CREATE PROCEDURE general_select2 @tblname nvarchar(127),
                                 @key     varchar(10) AS
EXEC('SELECT col1, col2, col3
      FROM ' + @tblname + '
      WHERE keycol = ''' + @key + '''')
--======================================================
--  Passing a table name as a parameter is not how you should write stored procedures
--	The first thing is permissions. You may know that when you use stored procedures, 
--		users do not need permissions to access the tables accessed by the stored procedure. 
--		This does not apply when you use dynamic SQL!
--	 For the procedures above to execute successfully, the users must have SELECT permission on the table in @tblname
--		Starting with SQL 2005, there are alternatives
--	Next thing to observe is that the dynamic SQL is not part of the stored procedure, but constitutes its own scope
--
--	-----------
--	
--	Within the block of dynamic SQL, you cannot access local variables 
--		(including table variables) or parameters of the calling stored procedure. 
--		But you can pass parameters – in and out – to a block of dynamic SQL if you use sp_executesql.
--	Any USE statement in the dynamic SQL will not affect the calling stored procedure.
--	Temp tables created in the dynamic SQL will not be accessible from the calling procedure since 
--		they are dropped when the dynamic SQL exits. (Compare to how temp tables created in a 
--		stored procedure go away when you exit the procedure.) 
--		The block of dynamic SQL can however access temp tables created by the calling procedure.
--	If you issue a SET command in the dynamic SQL, the effect of the SET command lasts for the 
--		duration of the block of dynamic SQL only and does not affect the caller.
--	The query plan for the stored procedure does not include the dynamic SQL. 
--		The block of dynamic SQL has a query plan of its own.
--
--	-----------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>EXEC_Passing_a_VariableList_of_ValuesInto_a_StoredProcedure</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>EXEC_Passing_a_VariableList_of_ValuesInto_a_StoredProcedure</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--[EXEC_Passing_a_VariableList_of_ValuesInto_a_StoredProcedure]

IF EXISTS ( SELECT * FROM sys.procedures
               WHERE schema_id = schema_id('dbo')
                 AND name = N'find_books_by_type')
   DROP PROCEDURE dbo.find_books_by_type
GO
create proc find_books_by_type @typelist varchar(8000)
as

exec ('select title_id, title = substring(title, 1, 40), type, price
         from titles where type in ('
       + @typelist + ') order by type, title_id')
go

set quoted_identifier off
exec find_books_by_type "'business', 'mod_cook', 'trad_cook'"
go
--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
--[EXEC_ChangingDatabaseContext_in_an_EXEC_Statement]
use bigpubs2008
go
create proc db_context as
print db_name()
exec ('USE AdventureWorks print db_name()')
print db_name()
go

exec db_context
go</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_executesql_UsingOutputParm</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_executesql_UsingOutputParm</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--[sp_executesql_UsingOutputParm]

--	shows an example of a stored procedure that uses sp_executesql to execute a dynamic SQL query and 
--	return a value via an output parameter. You can use the parameters inside the dynamic 
--	SQL–like parameters inside a stored procedure. Any values assigned to output parameters 
--	within the dynamic SQL query are passed back to the local variable in the calling procedure.

IF EXISTS ( SELECT * FROM sys.procedures
               WHERE schema_id = schema_id('dbo')
                 AND name = N'get_avg_price')
   DROP PROCEDURE dbo.get_avg_price
GO
create proc get_avg_price @dbname sysname,
                          @type varchar(12) = '%'
as

declare @dsql nvarchar(500),
        @avgval float

/*********************************************************
** build the dynamic query using the @avg and @type as
** variables, which will be passed in via sp_executesql
**********************************************************/
select @dsql = 'select @avg = avg(isnull(price, 0)) from '
                + @dbname+ '..titles '
                + 'where type like @type'

/*************************************************************
** submit the dynamic query using sp_executesql, passing type
**  as an input parameter, and @avgval as an output parameter
**  The value of @avg in the dynamic query will be passed
**  back into @avgval
*************************************************************/
exec sp_executesql @dsql, N'@avg float OUT, @type varchar(12)',
                   @avgval OUT, @type
print 'The avg value of price for the titles table'
      + ' where type is like ''' + @type
      + ''' in the ' + @dbname + ' database'
      + ' is ' + ltrim(str(@avgval, 9,4))

go

exec get_avg_price @dbname = 'bigpubs2008',
                   @type = 'business'
go

--The avg value of price for the titles table where type is like 'business'
-- in the bigpubs2008 database is 15.0988


exec get_avg_price @dbname = 'bigpubs2008',
                   @type = DEFAULT
go

--The avg value of price for the titles table where type is like '%' in the
--  bigpubs2008 database is 0.3744</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_executesql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_executesql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--	[sp_executesql]
-- sp_executesql is a built-in stored procedure that takes two pre-defined parameters and any number of user-defined parameters.  

--The first parameter: @stmt is mandatory, 
--	and contains a batch of one or more SQL statements. 
--	The data type of @stmt is ntext in SQL 7 and SQL 2000, and nvarchar(MAX) in SQL 2005 and later. 
--	Beware that you must pass an nvarchar/ntext value (that is, a Unicode value). A varchar value won't do.    

--The second parameter @params is optional, 
--	but you will use it 90% of the time. 
--	@params declares the parameters that you refer to in @stmt. 
--	The syntax of @params is exactly the same as for the parameter list of a stored procedure. 
--	The parameters can have default values and they can have the OUTPUT marker. 
--	Not all parameters you declare must actually appear in the SQL string. 
--	(Whereas all variables that appear in the SQL string must be declared, either with a DECLARE inside @stmt, or in @params.) 
--	Just like @stmt, the data type of @params is ntext SQL 2000 and earlier and nvarchar(MAX) since SQL 2005. 

--The rest of the parameters are simply the parameters that you declared in @params, 
--	and you pass them as you pass parameters to a stored procedure, either positional or named. 
--	To get a value back from your output parameter, you must specify OUTPUT with the parameter, 
--	just like when you call a stored procedure. Note that the first two parameters, @stmt and @params, 
--	must be specified positionally. You can provide the parameter names for them, 
--	but these names are blissfully ignored.

-- Example:  You want to be able to find out how many rows in each table that were modified at least once during a period.

DECLARE @tbl    sysname,
        @sql    nvarchar(max),
        @params nvarchar(max),
        @count  int

DECLARE tblcur CURSOR STATIC LOCAL FOR
   SELECT object_name(id) FROM syscolumns WHERE name = 'LastUpdated'
   ORDER  BY 1
OPEN tblcur

WHILE 1 = 1
BEGIN
   FETCH tblcur INTO @tbl
   IF @@fetch_status &lt;&gt; 0
      BREAK
--  I've prefixed the string literals with N to denote that they are Unicode strings

   SELECT @sql =														--&lt;== START Dynamic
   N' SELECT @cnt = COUNT(*) FROM dbo.' + quotename(@tbl) +				--&lt;== quotename(), and prefix the table name with "dbo."
   N' WHERE LastUpdated BETWEEN @fromdate AND ' +
   N'                           coalesce(@todate, ''99991231'')'		--&lt;== '' around the date literal is doubled
   SELECT @params = N'@fromdate datetime, ' +
                    N'@todate   datetime = NULL, ' +
                    N'@cnt      int      OUTPUT'						--&lt;== OUTPUT variable
                    
--In this example, the dynamic SQL has three parameters: 
--	one mandatory input parameter, one optional input parameter, and one output parameter:
--I've assumed that this time the DBA wanted to see all changes made after 2006-01-01
-- Since I left out one variable, I must specify the last, @cnt by name
                    
   EXEC sp_executesql @sql, @params, '20060101', @cnt = @count OUTPUT	--&lt;== END Dynamic
   
--Note also that the variable is called @cnt in the dynamic SQL, 
--	but @count in the surrounding script. Normally, you might want to use the same name, 
--	but I wanted to stress that the @cnt in the dynamic SQL is only visible within the dynamic SQL, 
--	whereas @count is not visible there.

   PRINT @tbl + ': ' + convert(varchar(10), @count) + ' modified rows.'
END

DEALLOCATE tblcur 

--When I assign the @sql variable, I am careful to format the statement so that it is easy to read, 
--	and I leave in spaces to avoid that two concatenated parts are glued together without space in between, 
--	which could cause a syntax error. 
--I put the table name in quotename() in case a table name has any special characters in it. 
--I also prefix the table name with "dbo.", which is a good habit, as we will see when we look at dynamic SQL and query plans. 
--Overall, I will cover this sort of good practices more in detail later in the text. 
--Note also the appearance of '' around the date literal – the rule in T-SQL is that to include the string delimiter in a string, 
--	you must double it.

-------------------------------------------------------------------------------------

-- I've prefixed the string literals with N to denote that they are Unicode strings. 
--		As @sql and @params are declared as nvarchar, technically this is not necessary 
--	    (as long as you stick to your 8-bit character set). However, 
--		when you provide any of the strings directly in the call to sp_executesql, 
--		you must specify the N, as in this fairly silly example:

EXEC sp_executesql N'SELECT @x', N'@x int', @x = 2

--If you remove any of the Ns, you will get an error message. 
--	Since sp_executesql is a built-in stored procedure, there is no implicit conversion from varchar.

-------------------------------------------------------------------------------------

--You may wonder why I do not pass @tbl as a parameter as well. 
--	The answer is that you can't. Dynamic SQL is just like any other SQL. 
--	You can't specify a table name through a variable in T-SQL, that's the whole story. 
--Thus, when you need to specify things like table names, column names etc dynamically, 
--	you must interpolate them into the string.

-------------------------------------------------------------------------------------
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SQL_Injection</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SQL_Injection</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
-- [SQL Injection]

-- SQL injection is possible as soon there is dynamic SQL which is handled carelessly, 
--	be that SQL statements sent from the client, dynamic SQL generated in T-SQL stored procedures, 
--	or SQL batches executed from CLR stored procedures

-- EXAMPLE:------------------------------------------------------

CREATE PROCEDURE search_orders @custid   nchar(5)     = NULL,
                               @shipname nvarchar(40) = NULL AS
DECLARE @sql nvarchar(4000)
SELECT @sql = ' SELECT OrderID, OrderDate, CustomerID, ShipName ' +
              ' FROM dbo.Orders WHERE 1 = 1 '
IF @custid IS NOT NULL
   SELECT @sql = @sql + ' AND CustomerID LIKE ''' + @custid + ''''
IF @shipname IS NOT NULL
   SELECT @sql = @sql + ' AND ShipName LIKE ''' + @shipname + ''''
EXEC(@sql)
----------------------------------------------------------------

-- 1] Assume that the input for the parameters @custid and @shipname comes directly from the user 
--		and a naïve and innocent user wants to look for orders where ShipName is Let's Stop N Shop, 
--		so he enters Let's. Do you see what will happen? 
--		Because @shipname includes a single quote, he will get a syntax error.

-- 2] A malicious user can take benefit of the example. For instance, consider this input for @shipname:

' DROP TABLE Orders --


'
-- The resulting SQL becomes:

SELECT * FROM dbo.Orders WHERE 1 = 1  AND ShipName LIKE '' DROP TABLE orders --'

--	Typically, an attacker first tests what happens if he enters a single quote (') in an input field or a URL. 
--	If this yields a syntax error, the attacker knows that there is a vulnerability.

--	One approach I seen mentioned from time to time, is to validate input data in some way, 
--	but in my opinion that is not the right way to go. 
--	Here are are the three steadfast principles you need to follow:

--	1] Never run with more privileges than necessary. 
--		Users that log into an application with their own login should normally only have EXEC permissions on stored procedures. 
--		If you use dynamic SQL, it should be confined to reading operations so that users only need SELECT permissions. 
--		A web site that logs into a database should not have any elevated privileges, preferably only EXEC and (maybe) 
--		SELECT permissions. Never let the web site log in as sa!

--	2] For web applications: never expose error messages from SQL Server to the end user.
--	3] Always used parameterised statements. That is, in a T-SQL procedure use sp_executesql, not EXEC().

--------------------------------------------------------------
-- The procedure search_orders above should be coded as:

CREATE PROCEDURE search_orders @custid   nchar(5) = NULL,
                               @shipname nvarchar(40) = NULL AS
DECLARE @sql nvarchar(4000)
SELECT @sql = ' SELECT OrderID, OrderDate, CustomerID, ShipName ' +
              ' FROM dbo.Orders WHERE 1 = 1 '
IF @custid IS NOT NULL
   SELECT @sql = @sql + ' AND CustomerID LIKE @custid '
IF @shipname IS NOT NULL
   SELECT @sql = @sql + ' AND ShipName LIKE @shipname '
EXEC sp_executesql @sql, N'@custid nchar(5), @shipname nvarchar(40)',
                   @custid, @shipname
                   
--  Since the SQL string does not include any user input, there is no opening for SQL injection. 
--	It's as simple as that. By the way, note that since we can include parameters in the parameter list, 
--	even if they don't actually appear in the SQL string, we don't need any complicated logic to build the parameter list, 
--	but can keep it static. In the same vein, we can always pass all input parameters to the SQL string.
--------------------------------------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>eMail</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Send-MailMessage</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>eMail</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Send-MailMessage</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Send-MailMessage -To $emailTo -Subject $subject -Body $SessionList -SmtpServer $smtpServer -From $emailFrom -Priority $priority

-------------------------------------------
Send email to one recipient
============================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Subject "Daily report" -Body "This is a daily report of server uptime"

Send email to multiple recipients in To and CC
==============================================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;", "Manager2 &lt;Manager2@xyz.com&gt;" -CC "Manager 3 &lt;Manager3@xyz.com&gt;", "Manager4 &lt;Manager4@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Subject "Daily report sent to multiple managers" -Body "This is a daily report of servers uptime"


Send email to one recipient with an attachment
==============================================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Subject "Daily report" -Body "Attached file has uptime details of all servers" -Attachments "c:\temp\uptime-report.txt"

Send email to one recipient with multiple attachments
======================================================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Subject "Daily report" -Body "Attached file has uptime details of all servers" -Attachments "c:\temp\server1-uptime-report.txt", "c:\temp\server2-uptime-report.txt"


Send email via an SMTP relay server that requires authentication
==================================================================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Credentials (Get-Credential) -Subject "Daily report" -Body "This is a daily report of servers uptime"

Send status of all services in a server as an email
=====================================================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Subject "Services status of Server1" -Body (Get-Service -ComputerName Server1 | Out-String)

Send high-priority email
=========================
Send-MailMessage -To "Manager 1 &lt;Manager1@xyz.com&gt;" -From "Reports Admin &lt;Reportadmin@xyx.com&gt;" -SMTPServer smtp1.xyz.com -Subject "Daily report" -Body "This is a daily report of servers uptime" -Priority High




---------------------------------------------
-FROM: 
	Every email needs a “from” address. 
	Without this, email cannot be sent. 
	Though it is a required parameter, the email ID doesn’t necessarily have to be a valid one. 
	You can use nothing@nothing.com and the cmdlet will still work.

-TO: 
	This is also a mandatory parameter. 
	You can supply a single or multiple email addresses, 
	and you can also specify the name associated with the email address 
	(for example, -To “Sitaram Pamarthi &lt;sitaram @4sysops.com&gt;”).

-SMTPServer: 
	You need to provide the name of the SMTP server through which you want to send the email. 
	If you are in doubt, ask your email administrator for the server to use. 
	If this parameter is not specified, 
	PowerShell tries to pick the value from the $PSEmailServer preference variable, 
	if this variable is set.


-CC and -BCC: 
	You know what they are. 
	If you would like to CC or BCC somebody in the email, 
	pass their email addresses to these parameters.

-Attachments: 
	This parameter takes the full path of the file(s) that you want to attach to the email.

-Subject: This is a simple string that represents the subject of your email.

-Body: This string specifies the body of your email message.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXCEL</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>LockCells</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXCEL</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>LockCells</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>If You Want the Majority of Cells Locked
========================================
To lock the majority of the cells on the worksheet, follow these steps:

1]    Select the cells that you want to remain unprotected. 
		To select nonadjacent (noncontiguous) cells, hold down CTRL and click the cells that are to remain unprotected.
2]    In versions of Excel previous to 2007, on the Format menu, click Cells, and then click the Protection tab. 
		On Excel 2007 or later, show the format cells dialog box by clicking the Expand button to the bottom right of the Font section of the Home ribbon, 
		and then click Protection tab.
3]    Click to clear the Locked check box and click OK.
4]    In versions of Excel previous to 2007, on the Tools menu, point to Protection, and then click Protect Sheet. 
		In Excel 2007 or later, click the Review tab, and click Protect Sheet. Type a password if you want one, and then click OK. 

If You Want the Majority of Cells Unlocked
===========================================
To leave the majority of the cells on the worksheet unlocked, follow these steps:

1]    Select the entire worksheet by clicking the Select All button 
		(the gray rectangle in the upper-left corner of the worksheet where the row 1 and column A headings meet), 
		or by pressing CTRL+A or CTRL+SHIFT+SPACEBAR.
2]    In versions of Excel previous to 2007, on the Format menu, click Cells, 
		and then click the Protection tab. On Excel 2007 or later, show the format cells dialog box by clicking the 
		Expand button to the bottom right of the Font section of the Home ribbon,
		and then click Protection tab. Click to clear the Locked check box and click OK.
3]    Select the cells that you want to protect. To select nonadjacent (noncontiguous) cells,
		 hold down CTRL and click the cells that you want to protect.
4]    Return to the Format Cells dialog box, and then click the Protection tab. 
		Click to select the Locked check box, and then click OK.
5]    In versions of Excel previous to 2007, on the Tools menu, 
		point to Protection, and then click Protect Sheet. 
		In Excel 2007 or later, click the Review tab, and click Protect Sheet. 
		Type a password, if you want one, and then click OK. .</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ExportToExcelWithColumnNames</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ExportToExcelWithColumnNames</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Export to EXCEL with column names

--In the post Import/Export to Excel, I showed how to export data to EXCEL
--The problem that most users find it is it wont include column names in the file and file should exists already with headings

--This procedure would solve that problem

 

create procedure proc_generate_excel_with_columns
(
        @db_name varchar(100),
        @table_name varchar(100), 
        @file_name varchar(100)
)

as

--Generate column names as a recordset
declare @columns varchar(8000), @sql varchar(8000), @data_file varchar(100)

select 
        @columns=coalesce(@columns+',','')+column_name+' as '+column_name
from 
        information_schema.columns
where 
        table_name=@table_name

select @columns=''''''+replace(replace(@columns,' as ',''''' as '),',',',''''')

--Create a dummy file to have actual data
select @data_file=substring(@file_name,1,len(@file_name)-charindex('\',reverse(@file_name)))+'\data_file.xls'

--Generate column names in the passed EXCEL file
set @sql='exec master..xp_cmdshell ''bcp " select * from (select '+@columns+') as t" queryout "'+@file_name+'" -c'''
exec(@sql)

--Generate data in the dummy file
set @sql='exec master..xp_cmdshell ''bcp "select * from '+@db_name+'..'+@table_name+'" queryout "'+@data_file+'" -c'''
exec(@sql)

--Copy dummy file to passed EXCEL file
set @sql= 'exec master..xp_cmdshell ''type '+@data_file+' &gt;&gt; "'+@file_name+'"'''
exec(@sql)

--Delete dummy file
set @sql= 'exec master..xp_cmdshell ''del '+@data_file+''''
exec(@sql)

--After creating the procedure, execute it by supplying database name, table name and file path
EXEC proc_generate_excel_with_columns 'your dbname', 'your table name','your file path'

--For more informations and to know how to solve the errors, refer this thread Export to Excel</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>FileZilla</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_FileZilla</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>FileZilla</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_FileZilla</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_FileZilla


usernames and passwords are encrypted in:
C:\Users\ggarson\AppData\Roaming\FileZilla\sitemanager.xml</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters

--I used this function for a multivalue parameter report in  SSRS 

--SUMMARY: 
/*
a) Let a user pick one or more values for a particular Parm.
b) Use an Expression in the 'Value' of a Parameter that concatenates the multiple values into one string
c) Feed the multi-value string to the Stored Procedure
d) Then have a function that un-packs the substrings into seperate pieces, with commas between each piece
e) Then use that comma-seperated string of multiple values in an 'IN' statement of a WHERE clause in the 
	Stored Proc that gets the data for the DataSet of the SSRS Report



use a function that returns a table, of substrings, given a Large string made up of of Concatenated sub-strings



*/
--1] In the SSRS dataset properties, pass the multi-value param to the stored procedure as a comma-delimited string

-- for the Dataset, in the SSRS Report, right click =&gt; Properties =&gt; Parameters (e.g. for Parm '@BU'), for the Parm 'Value' 
--		use this expression:
								=JOIN(Parameters!BU.Value,",")

--2] Create this function in SQL Server to be used by the stored procedure that provides the data to the report

CREATE FUNCTION [dbo].[fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters]
   (@ConcatenatedSubStrings nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@ConcatenatedSubStrings)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@ConcatenatedSubStrings,@chrind - 1)
      ELSE
        SELECT @Piece = @ConcatenatedSubStrings
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @ConcatenatedSubStrings = RIGHT(@ConcatenatedSubStrings,LEN(@ConcatenatedSubStrings) - @chrind)
      IF LEN(@ConcatenatedSubStrings) = 0 BREAK
    END
  RETURN
  END 
  
 --3] Then in the Stored procedure, for the Dataset, you can call the function 
  
--======= How to Use the function in the Stored Proc for the report:=========================================================================================
SELECT *
FROM SomeTable
WHERE
	(BU_Name IN (select Item from dbofn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters(@BU,','))	)	
--===================================================================================================================  
 
  
  
  
  
  
  
  


--ORIGINAL Version:
--=======================

--prj_0013_FN_401_unSplit.sql
USE B2W_Reports
go
CREATE FUNCTION [dbo].[prj_0013_FN_401_unSplit]
   (@RepParam nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 
  
  
  --======= Use the function:
  (BU_Name IN (select Item from dbo.prj_0013_FN_401_unSplit(@BU,','))	)	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>NULL_input_PARM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>NULL_input_PARM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE AdventureWorks2012;
GO
IF OBJECT_ID(N'dbo.fnGetTotalItems', N'FN') IS NOT NULL
DROP FUNCTION dbo.fnGetTotalItems;
GO
CREATE FUNCTION dbo.fnGetTotalItems (@OrderID INT)
RETURNS INT
WITH RETURNS NULL ON NULL INPUT,		--&lt;=======================the database engine will not execute the function body when a NULL value is passed in
  SCHEMABINDING AS
BEGIN
  DECLARE @TotalItems INT
  SELECT @TotalItems = SUM(OrderQty)
  FROM Sales.SalesOrderDetail
  WHERE SalesOrderID = @OrderID
  GROUP BY SalesOrderID
  RETURN @TotalItems;
END;
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>GIT_and_GitHubDesktop</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_GIT_and_GitHubDesktop</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>GIT_and_GitHubDesktop</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_GIT_and_GitHubDesktop</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_GIT_and_GitHubDesktop


==============================
Username:
JPHSA-DBDev
email address:
DBDev.JPHSA@gmail.com
PassWord:
jphSA.DBDev.123
Unlimited public repositories for free
Did not opt in to set up an organization
===============================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>GoDaddy</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Using GoDaddy SQL Server w/ ASP.NET MVC5 &amp; Code First</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>GoDaddy</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Using GoDaddy SQL Server w/ ASP.NET MVC5 &amp; Code First</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://httpjunkie.com/2014/954/using-godaddy-sql-server-w-asp-net-mvc5-code-first/

So even though I am a huge proponent of using Foundation over Bootstrap. 
This tutorial will be focused on the basic MVC5 APplication which utilizes Bootstrap. 
Once you are done with this tutorial I have several other tutorials specifically on removing Bootstrap &amp; adding Foundation. 
They are both great Frameworks. 
In fact I have had some client work dealing with working solely on Bootstrap for the past month 
and I’m quite happy about how much of my deep knowledge of Foundation transfers right over to Bootstrap. 
The Framework is not the point of this tutorial, the point is to show how to configure GoDaddy SQL Server with MVC5, 
Identity &amp; Code First by creating a real world (but simple) application for listing a companies national offices.

What you need at minimum for this project:

GoDaddy Hosting with access to at least 1 SQL Server instance.

Visual Studio Express 2013 for Web:
http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx

    If you only have VS 2012 See my tutorial here on setting up MVC5 &amp; Identity in Visual Studio 2012:
    http://httpjunkie.com/2013/158/install-zurbs-foundation-5-in-net-mvc-5/

Microsoft SQL Server Management Studio 2012:
http://www.microsoft.com/en-us/download/details.aspx?id=29062

1. Ceate a MVC 5 project Choose to use Individual Membership using OneASP.Net
2. Create a SQL Server DB at GoDaddy by logging into your Hosting Account &gt; Add SQL Server DB
3. Create a Friendly Name, Database Name &amp; Password then hit OK. I used..

Friendly Name: myLocations
Database name and username: myLocations
Password: a321Password!

     The DB will take a while to setup
    in the meantime it will say Pending Setup for about ten minutes.

4. Once pending setup is done, you will be left on the Manage Databases page select the actions dropdown 
to the right of your database and select Details.

5. Copy the following Information to keep on file for later usage:

    Hostname:
    myLocations.db.9xx6x6x.hostedresource.com
    Admin URL:
    https://p3nmssqladmin.secureserver.net/2012/6

6. Get a connection String for our database by clicking Code Sample in the Details Tab.

    SqlConnection (.NET):
    Data Source=myLocations.db.9116567.hostedresource.com; Initial Catalog=myLocations; User ID=myLocations;     Password=’your password';

7. Once this is done close out of GoDaddy for now. The rest of our work will be done locally. 
So let’s take our connection string and go plug it in as the default connection string in our project. 
I’m going to open up my project for the first time and run it oonce just to make sure it’s working. 
I get the typical Bootstrap template so I’m good!

8. Open your web.config file in the root directory and replace the line:

	
&lt;add name="DefaultConnection" connectionString="Data Source=
(LocalDb)\v11.0;AttachDbFilename=|DataDirectory|\aspnet-
MyNewProject-20140713052856.mdf;Initial Catalog=aspnet-
MyNewProject-20140713052856;Integrated Security=True"
providerName="System.Data.SqlClient" /&gt;

with


	
&lt;add name="DefaultConnection" connectionString="Data Source=
myLocations.db.9116567.hostedresource.com;
Initial Catalog=myLocations; User ID=myLocations;
Password='your password';"
providerName="System.Data.SqlClient" /&gt;

9. Now before we run our ASP.Net application and register our first user (which will add the Identity Tables to our database) 
I want to open up Microsoft SQL Server Management Studio 2012 and click on Connect to Object Explorer or Connect to Database.

(*use your info not mine)

    For Server Name use: myLocations.db.9116567.hostedresource.com
    Login: myLocations
    Password: a321Password!

10. CONNECT, now open (considering your credentials worked) open Databases Tree
Now I’m going to look for myLocations database. The databases you see here are all the other databases hosted on this server. 
Other than the ability to see their name, you cannot access them and they cannot access yours. 
The only database you will be able to manipulate is your database. 
But it is a bit of a pain sorting through to find yours. 
Next time we’ll name it starting with an “A” lol. 
Once you have found yours don’t do anything. just leave it alone for a few minutes. 
You will get an error until we have put some tables in it.

11. Let’s go into our application and hit Ctrl + F5 run our website and click on the register user option in the navigation. 
Make sure you remember your username and password you setup. I’m using:

    U: me@mydomain.com
    P: a321Password!

Once you register it will redirect back to the home page and you wil be logged in with your new email. 
This means that as long as we saved our webconfig file before attempting this ASP.Net 
just accessed our SQL Server Database and setup the tables required in order to maintain users for our site. 
But it also establishes a connection with our SQL Server so that we can start to use Code First to create our own project. 
This concludes the section about setting up a SQL Server Database using GoDaddy and ASP.Net. 
If you would like to continue we will be creating a set of manageable office locations 
for our website using Code First and scaffodling out our MVC Controls &amp; Views. 
We will also include a makeshift Image Upload and use some custom routing techniques as well as some Bootstrap formatting. 
See you on the next line of text.
Model Creation and Enable Migrations

Let’s start by creating an Images folder in the main directory. 
I hate the fact that they don’t have an images folder there, 
so I always create one right off the bat.  
There is a bg.jpg below that you can download and use for the demo if you want or you can create and image that is  
I’m going to show you a quick way to add a background to the jumbotron background. 
Just to spice up the page a little bit. This is in no way professional grade CSS,
 but the standard front page is hideous and I’d rather look at something with some type of style.

bg.zip

12. Put the following CSS in your Site.css file inside the ~/Content folder, just add it to the bottom.

~/Content/Site.css

	
.jumboBg {
 background: url('/images/bg.jpg') no-repeat center center;
}
 
.jumboTitle {
 background: linear-gradient(left, white, rgba(0,0,0, 0.0));
 background: -webkit-linear-gradient(left, white, rgba(0,0,0, 0.0)); /* For Safari 5.1 to 6.0 */
 background: -o-linear-gradient(left, white, rgba(0,0,0, 0.0)); /* For Opera 11.1 to 12.0 */
 background: -moz-linear-gradient(left, white, rgba(0,0,0, 0.0)); /* For Firefox 3.6 to 15 */
 padding: 3px;
 color: #111;
 text-shadow: 2px 2px #ccc;
}
 
.jumboText {
 background: linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0));
 background: -webkit-linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0)); /* For Safari 5.1 to 6.0 */
 background: -o-linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0)); /* For Opera 11.1 to 12.0 */
 background: -moz-linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0)); /* For Firefox 3.6 to 15 */
 padding: 3px;
 color: #111;
 text-shadow: 1px 1px #fff;
}

13. Replace Index.cshtml with the following code:

~/Views/Home/Index.cshtml

	
@{
 ViewBag.Title = "Office Locations";
}
 
&lt;div class="jumbotron jumboBg"&gt;
   &lt;h1 class="jumboTitle"&gt;Office Locations&lt;/h1&gt;
   &lt;p class="lead jumboText"&gt;ASP.Net MVC5 Demo ~ Responsive office locations project&lt;/p&gt;
   &lt;p&gt;&lt;a href="http://asp.net" class="btn btn-primary btn-lg"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
 
&lt;div class="row"&gt;
   &lt;div class="col-md-4"&gt;
   &lt;h2&gt;Our New Business&lt;/h2&gt;
  &lt;p&gt;
   This new business has clients all over America, therefore we need to have office locations
    in just about every darn near state, city and town.
   &lt;/p&gt;
   &lt;p&gt;&lt;a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
 &lt;/div&gt;
 &lt;div class="col-md-4"&gt;
   &lt;h2&gt;Get more us&lt;/h2&gt;
   &lt;p&gt;Us is good, that's why we sell it and our locations give you us in a building with lights and walls, sometimes computers...&lt;/p&gt;
     &lt;p&gt;&lt;a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301866"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
 &lt;/div&gt;
 &lt;div class="col-md-4"&gt;
     &lt;h2&gt;What we do&lt;/h2&gt;
     &lt;p&gt;You can easily find what we do by visiting where were at. Like a wise man once said it aint where you from it's where you's at..&lt;/p&gt;
     &lt;p&gt;&lt;a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301867"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;

Save the files and run the page, you should see the difference on the home page. Let’s move on.

14. Right click on the Models folder and select Add &gt; Class and name it location.cs

15. make sure the using includes look like this:

	
using System;
 
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;

then make sure the location class looks like this:

	
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;
 
namespace myLocations.Models
{
  public class location
  {
    //This Id must be named like: 'classNameId'
    public int locationId { get; set; }
    public string name { get; set; }
    [StringLength(10), Display(Name = "Address Number")]
    public string addressNum { get; set; }
    [StringLength(100), Column(TypeName = "varchar"), Display(Name = "Street")]
    public string addressStreet { get; set; }
    [StringLength(10), Display(Name = "Suite Number")]
    public string suiteNum { get; set; }
    [StringLength(20), Column(TypeName = "varchar")]
    public string city { get; set; }
    [StringLength(2), Column(TypeName = "varchar")]
    public string state { get; set; }
    [StringLength(10), Column(TypeName = "varchar")]
    public string zip { get; set; }
    [StringLength(16), Column(TypeName = "varchar"), Display(Name = "Phone Number")]
    public string phone { get; set; }
    [StringLength(16), Column(TypeName = "varchar"), Display(Name = "Fax Number")]
    public string fax { get; set; }
    [Required(ErrorMessage = "The email address is required")]
    [EmailAddress(ErrorMessage = "Invalid Email Address")]
    [StringLength(50), Column(TypeName = "varchar")]
    public string email { get; set; }
    [DataType(DataType.MultilineText)]
    [StringLength(255), Column(TypeName = "varchar"), Display(Name = "Counties Served")]
    public string countiesServed { get; set; }
    public bool hasLicense { get; set; }
    [StringLength(20), Column(TypeName = "varchar"), Display(Name = "License Number")]
    public string licenseNum { get; set; }
    [DataType(DataType.MultilineText)]
    [Column(TypeName = "varchar(Max)"), Display(Name = "Location Description")]
    public string description { get; set; }
    [DataType(DataType.MultilineText)]
    [Column(TypeName = "varchar(Max)"), Display(Name = "Why Us")]
    public string whyUs { get; set; }
 
 
 
    //Upload Map Image to /images/maps/ named: (addressNum + "_" + zipdoce + ".jpg")
    public string MapImage
    {
        get { return addressNum.Replace(" ", string.Empty) + "_" + zip.Replace(" ", string.Empty) + ".jpg"; }
    }
  }
}

16. Save the location.cs file then right click on the root of your project and click Build. 
This will ensure that the model class is available for us to create a controller that uses scaffolding. 
If we miss this Build step we will get an error when we scaffold out the controller &amp; view because it won’t know about the model class yet.

After you have finished with the build, right click on the controllers directory 
and Add &gt; Controller &gt; MVC5 Controller with views, using Entity Framework and choose location from the Model class dropdown menu, 
for Data context class choose ApplicationDbContext, 
we will select the option to Use async controllers and leave all 3 checkboxes checked and the layout page blank (but checked). 
Name it the controller locationController

    Note: If you have problems adding a controller, 
    it may be because you did not Build your project after adding your Product model. 
    If this is the case, close out of your controller dialog box, Build the project and try again. 

At this point you have a working controller, 
a folder for views called locations and inside that folder the pages needed for CRUD operations 
(Create, Delete, Details, Edit &amp; Index.cshtml). 
But before we use them , we need to talk to our database and make sure that we have persisted the model to the database, 
so we have no tables for the crud to work with yet.

17. In the upper right hand corner of Visual Studio there is a search field that says: Quick Launch (Ctrl+Q) 
click there and type console + Enter. In the console type the following:

PM&gt; Enable-Migrations -EnableAutomaticMigrations

        *Note: You could also pull up the Package manager console by either navigating to:
        Tools &gt; Library Package Manager &gt; Package Manager Console

    If you entered it correctly you will receive the following in your command line:

    Checking if the context targets an existing database…
    Code First Migrations enabled for project myLocations..

    The enable-migrations command creates a Migrations folder, 
    and it puts in that folder a Configuration.cs file that you can edit to configure Migrations. 
    It has a Configuration class that lets you configure how Migrations behaves for your context. 
    We are using the default configuration. Lets create our first migration to the database. 
    The database is our meccas and we have yet to make a trip.

    There are two command you must know.

    Add-Migration will create a file which contains the instructions for the next migration based on 
    changes you have made to your model or are applying for the first time.

    Update-Database will then run that instruction and apply any pending changes to the database. 
    This can be rolled back. Take a look at the file before you do an update-database and just see who it works so you know. 
    There is an up and a down. Apply &amp; rollback.

    For info on rollbacks, see this Stack-O question: Rollbacks

    We are not using Add-Migration (right now), 
    Code First Migrations automatically calculates and applies the changes when we use Update-Database. 
    THis will instruct Code First Migrations to push the changes to our model up to the database (Mecca).

    Run the ‘Update-Database’ command in Package Manager Console.

    PM&gt; Update-Database -Verbose

    the verbose flag we flew was to let the console know w want to watch the tables get added and get a 
    verbose feedback of what our command is doing. You should be left with the full detail in the console once it’s done. 
    Look through it. Understand what it did.

    Let’s go look at our database in SQL Server Management Studio. If it’s not still open go to File &gt; Connect Object Explorer.

        *Use your information

    Server Name: myLocations.db.9xx6x6x.hostedresource.com
    Login: myLocations
    Password: a321Password!

    Search for your database ‘myLocations’, expand it and then expand Tables. 
    YOu should now see not only your User tables, but also your locations table. 
    DO not use Management Studio to edit your database unless you know exactly what yo are doing with code migrations and code first. 
    You will screw up your project. For now, let’s do all updating of the database through Entity Framework &amp; Code First Migrations.

    Right click on the table locations and choose Edit Top 200 Rows. 
    Don’t edit anything, just let it set there for now.

    Go to your ~Views/Shared/_Layout.cshtml page and replace all with the following code
  
    	
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8" /&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
        &lt;title&gt;@ViewBag.Title - Office Locations&lt;/title&gt;
        @Styles.Render("~/Content/css")
        @Scripts.Render("~/bundles/modernizr")
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
            &lt;div class="container"&gt;
                &lt;div class="navbar-header"&gt;
                    &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;/button&gt;
                    @Html.ActionLink("myLocator", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
                &lt;/div&gt;
                &lt;div class="navbar-collapse collapse"&gt;
                    &lt;ul class="nav navbar-nav"&gt;
                        &lt;li&gt;@Html.ActionLink("Home", "Index", "Home")&lt;/li&gt;
                        &lt;li&gt;@Html.ActionLink("About", "About", "Home")&lt;/li&gt;
                        &lt;li&gt;@Html.ActionLink("Contact", "Contact", "Home")&lt;/li&gt;
                        &lt;li&gt;@Html.ActionLink("Locations", "Index", "Locations")&lt;/li&gt;
                    &lt;/ul&gt;
                    @Html.Partial("_LoginPartial")
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="container body-content"&gt;
            @RenderBody()
            &lt;hr /&gt;
            &lt;footer&gt;
                &lt;p&gt;&amp;copy; It's @DateTime.Now.Year, do you know where are locations are?&lt;/p&gt;
            &lt;/footer&gt;
        &lt;/div&gt;
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/bootstrap")
        @RenderSection("scripts", required: false)
    &lt;/body&gt;
    &lt;/html&gt;
    &lt;/body&gt;
    &lt;/html&gt;

    Hit Ctrl + F5 to run the site locally. 
    In that edit we just performed we added a link to the navigation inside the layout page called locations. 
    Click on it to get to the Index page of your Locations CRUD operations.

    We are going to fix these pages one by one. 
    We will transform the index page into our actual Locations page for our front end of our website. 
    We will transform the details page into a specific location page. 
    And the Edit, Insert and Delete pages will be linked to from our frontend pages 
    BUT ONLY when someone is logged in with the proper admin role associated with their username.

    First lets start by replacing all the CRUD pages they gave you. 
    I have went through and made them a little more responsive and useful. 
    As you change each page. Pay attention to the changes and what they do.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>HISTOGRAM</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CreateGenericHistogramFunction</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>HISTOGRAM</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CreateGenericHistogramFunction</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://protect-us.mimecast.com/s/0Qg1C68mV2h58P1hpsTZ6?domain=sqlsunday.com
---------------------------------------------------
--Creating a generic histogram T-SQL function
--Finishing off this post, I’m going to show you how to write a table value function that performs a histogram calculation using the modulo method above. 
--In order to pass an arbitrary number of values into a function, we’ll first need to define a user-defined table type to hold the values:

CREATE TYPE dbo.valueArray AS TABLE (
    value     numeric(38, 18) NOT NULL
);
--And here’s the finished function:

CREATE FUNCTION dbo.fn_histogram (
    @values  dbo.valueArray READONLY,
    @levels  smallint=10
)
RETURNS @output TABLE (
    lowerBound     numeric(38, 18) NOT NULL,
    upperBound     numeric(38, 18) NOT NULL,
    [count]        int NOT NULL,
    PRIMARY KEY CLUSTERED (lowerBound)
)
WITH SCHEMABINDING
AS

BEGIN;
    --- Declare and set the work variables:
    DECLARE @interval numeric(38, 18),
            @min      numeric(38, 18),
            @max      numeric(38, 18);

    SELECT @min=MIN(value),
           @max=MAX(value)
    FROM @values;

    SET @interval=(@max-@min)/@levels;

    --- Calculate the histogram, using modulo, and
    --- insert the result into @output:
    INSERT INTO @output (lowerBound, upperBound, [count])
    SELECT @min+(value-value%@interval)           AS lowerBound,
           @min+(value-value%@interval)+@interval AS upperBound,
           COUNT(*)                               AS [count]
    FROM (
          --- If value is @max, set value to @max-0.5*@interval
          --- Then subtract @min.
          SELECT ISNULL(NULLIF(value, @max), @max-0.5*@interval)-@min AS value
          FROM @values
          ) AS sub
    GROUP BY value-value%@interval;

    --- ... and done:
    RETURN;
END;

--SCHEMABINDING helps the query processor to further optimize the solution for performance. I’ve deliberatly left out a clustered index on the table type because this operation doesn’t benefit from ordered data (in fact, the sort operation may even slow things down). And everything we do on the table is a start-to-finish full table scan on @values anyway.

--To test the function, try this:

--- Declare a table variable using the user-defined table type:
DECLARE @test dbo.valueArray;

--- Fill @test with some data:
WITH n (i)
AS ( SELECT CAST(0.0 AS numeric(28, 8)) AS i UNION ALL
     SELECT CAST(.00001*PI()+i AS numeric(28, 8)) FROM n WHERE i&lt;PI())

INSERT INTO @test (value)
SELECT SIN(i) FROM n
OPTION (MAXRECURSION 0);

--- .. and call the histogram function:
SELECT *
FROM dbo.fn_histogram(@test, 16);
If you want the fancy bar chart as well, you can try this. ;)

SELECT lowerBound, upperBound, [count],
       --- Percent of total row count:
       STR(100.0*[count]/SUM([count]) OVER (PARTITION BY NULL), 5, 2)+'%' AS [percent],
       --- Bar diagram, width between 0 and 50 characters:
       REPLICATE(':', 50*[count]/MAX([count]) OVER (PARTITION BY NULL)) AS barChart
FROM dbo.fn_histogram(@test, 16);

--The REPLICATE() function has nothing to do with SQL Server replication; 
--	it just copies a string a given number of times. In this case, we’re using it to create a horizontal bar for the histogram.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>HTML_FORMs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Form_With_JavaScript</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>HTML_FORMs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Form_With_JavaScript</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This is a complex example with Validation in the Javascript



&lt;!DOCTYPE html&gt;
&lt;!-- form.html by Bill Weinman http://bw.org/ --&gt;

&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8" /&gt; 
    &lt;title&gt;
        HTML Forms
    &lt;/title&gt;
    &lt;link rel="stylesheet" type="text/css" href="forms.css" /&gt;
    &lt;script type="text/javascript" src="forms.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id="outer"&gt;
&lt;div id="form"&gt;
&lt;h1&gt;
    HTML Forms
&lt;/h1&gt;

&lt;form id="f1" onsubmit="return display()" method="post"&gt;
    &lt;p&gt; Text: &lt;input type="text" name="text1" autofocus /&gt; &lt;/p&gt;
    &lt;p&gt; Password: &lt;input type="password" name="password1" /&gt; &lt;/p&gt;
    &lt;p&gt; Checkboxes: &lt;/p&gt;
    &lt;p&gt; Red: &lt;input type="checkbox" name="red" /&gt; &amp;nbsp;
        Blue: &lt;input type="checkbox" name="blue" checked /&gt; &amp;nbsp;
        Green: &lt;input type="checkbox" name="green" /&gt; 
    &lt;/p&gt;
    &lt;p&gt; Radio buttons: &lt;/p&gt;
    &lt;p&gt; Tall: &lt;input type="radio" name="size" value="tall" /&gt; &amp;nbsp;
        Grande: &lt;input type="radio" name="size" value="grande" /&gt; &amp;nbsp;
        Venti: &lt;input type="radio" name="size" value="venti" checked /&gt; 
    &lt;/p&gt;
    &lt;p&gt; &lt;input type="submit" name="submit1" value="Big Red Button" onclick="return display()" /&gt; &lt;/p&gt;
&lt;/form&gt;

&lt;/div&gt; &lt;!-- form --&gt;

&lt;div id="results"&gt;
    &lt;p&gt; Results go here. &lt;/p&gt;
&lt;/div&gt; &lt;!-- results --&gt;
&lt;/div&gt; &lt;!-- outer --&gt;

&lt;/body&gt;
&lt;/html&gt;

===============JavaScript file==================================


// forms.js by Bill Weinman  http://bw.org/

var eResults;
var eForm;
var resultsContent = "";
var haveValidation = false;
var validOkay = true;

// display a string in the output div
function output( s ) {
    eResults.innerHTML += '&lt;p&gt;' + s + '&lt;/p&gt;';
}

// display an error message in the output div
function errorOutput( s ) {
    eResults.innerHTML += '&lt;p class="error"&gt;' + s + '&lt;/p&gt;';
}

// clear the output div
function clearOutput() {
    eResults.innerHTML = '';
}

// check a form element with the validity API
function isValid( e ) {
    if(e.validity.valid === true) {
        return true;
    } else {
        m = e.validationMessage;
        errorOutput(e.name + ': ' + m);
        validOkay = false;
        return false;
    }
}

// return the display value of a form element
function dispValue( e ) {
    v = function(s) { return e.name + ': ' + s }

    if(e.type == "radio") {
        if(e.checked) return v(e.value);
        else return ""  ;
    }

    // for select-multiple display a comma-separated list
    if(e.type == "select-multiple") {
        a = [];
        for( var i = 0; i &lt; e.length; ++i ) {
            if(e[i].selected) a.push(e[i].value);
        }
        return v(a.join(', '));
    }

    if(e.type == "checkbox") return v( e.checked ? "on" : "off" );

    else return v(e.value);
}

// display all the form elements
function display() {
    clearOutput();
    if(!haveValidation) {
        errorOutput('This platform does not support the HTML5 validation API.');
    }
    validOkay = true;
    for( var i = 0; i &lt; eForm.length; ++i ) {
        var e = eForm.elements[i];
        var name = e.name;
        if(!haveValidation) output(dispValue(e));
        if(haveValidation &amp;&amp; isValid(e)) {
            output(dispValue(e));
        }
    }
    return false;
}

function submitDisplay() {
    display();
    return validOkay;
}

function init() {
    // initialize elements
    eResults = document.getElementById('results');
    eForm = document.getElementById('f1');

    // check to see if the validation API is implemented
    haveValidation = (typeof eForm.elements[0].validity === 'object');
}

window.onload = init;


==================CSS =======================================
/* main.css by Bill Weinman http://bw.org/contact
  v 1.0 - 2012-05-20
*/

/* reset margins */
html, body, div, span, h1, h2, h3, h4, h5, h6, p, ol, ul, li,
blockquote, pre, form, label, legend, table, caption, tbody, tfoot, thead,
tr, th, td, article, aside, canvas, details, embed, figure, figcaption,
footer, header, hgroup, menu, nav, output, section, summary, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

/* setup body */
body{
    background-color: #9ab;
}

body, p, input {
    line-height: 1.2;
    font-family: Tahoma, sans-serif;
    font-size: 16pt;
}

/* reasonable starting margins */
h1, h2, h3, h4, h5, h6, ol, ul, li { margin: .5ex 12pt; }
p { margin: 1ex 12pt; }
li { margin-left: 2em; }

/* setup headings */
h1, h2, h3, h4, h5, h6 {
    line-height: 1;
    font-family: Tahoma, Verdana, sans-serif;
    font-weight: bold;
}

h1 { font-size: 120%; }
h2 { font-size: 110%; }
h3 { font-size: 100%; }
h4 { font-size: 100%; }
h5 { font-size: 100%; }
h6 { font-size: 100%; }

/* setup pre */
pre { font-family: consolas, monospace; }

/* style the forms */

#outer {
    width: 800px;
    margin: 5px auto;
}

#form, #results {
    width: 396px;
    float: left;
    padding: 0;
    margin: 0 2px;
    background-color: #def;
}

#results p {
    font-family: monospace;
    margin: .5ex 1ex;
}

#results p.error {
    color: #c66;
}

textarea {
    width: 300px;
    height: 150px;
    font-size: 16pt;
}

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>HTML_Misc</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>JumpToID_like_a_bookMark</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>HTML_Misc</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>JumpToID_like_a_bookMark</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] Click to jump, use 'title' which will act like hover-over message
&lt;a href="#content" title="skip to content"&gt;Skip to content&lt;/a&gt;

2] Destination: id
&lt;article id="content" role="main"&gt;



////////////////////////////////////////
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Creating accessible links&lt;/title&gt;
&lt;style&gt;
html {
	background: #E6E3D4;
}
body {
	font: 100% Georgia, "Times New Roman", Times, serif;
	line-height: 1.4;
	width: 70%;
	margin: 0 auto;
}
h1, h2, h3 {
	font-size: 2.4em;
	font-weight: normal;
	text-shadow: 0 1px 0 rgba(255, 255, 255, 0.75);
	color: #575451;
}
h2 {
	font-size: 1.4em;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;header role="banner"&gt;
&lt;h1&gt;Making links accessible&lt;/h1&gt;
&lt;a href="#content" title="skip to content"&gt;Skip to content&lt;/a&gt;
&lt;ul id="mainNav" role="navigation"&gt;
&lt;li&gt;&lt;a href="index.htm" title="home page"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="products.htm" title="our products"&gt;Products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="blog.htm" title="read our blog"&gt;Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="about.htm" title="company info"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="contact.htm" title="contact us"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/header&gt;
&lt;article id="content" role="main"&gt;
&lt;h2&gt;Creating accessible links&lt;/h2&gt;
&lt;p&gt;Creating accessible HTML should be an important part of any web designer&amp;rsquo;s workflow. Ensuring that links are accessible is especially critical, as user&amp;rsquo;s ability to navigate through your site and access content can be severely restricted through poor accessibility. Let&amp;rsquo;s take a look at some of the ways you can increase the accessibility of your links.&lt;/p&gt;
&lt;h3&gt;Skip navigation links&lt;/h3&gt;
&lt;p&gt;Sites usually have the main navigation at the top of the page. When structuring HTML, this means that the site navigation appears above the page&amp;rsquo;s main content. This requires people using screen readers to read through each link in the site on every page prior to actually reading content. This can be especially frustrating on sites with complex menu structures or those that contain a large amount of links. To address this, sites can contain a skip navigation link prior to the navigation that gives users the option to jump to the page&amp;rsquo;s content. This link can be hidden or minimized through CSS while still accessible to screen readers.&lt;/p&gt;
&lt;h3&gt;Use the &amp;ldquo;title&amp;rdquo; attribute&lt;/h3&gt;
&lt;p&gt;Using the global &lt;b&gt;title&lt;/b&gt; attribute allows you to pass along additional advisory information about links. In most browsers, title attributes are shown as &amp;ldquo;tool tips&amp;rdquo; when links are hovered over by the user. While this is valuable, the real value of the &lt;b&gt;title&lt;/b&gt; attribute is the additional information it can pass on through other user agents like screen readers. As such, you want to make sure your &lt;b&gt;title&lt;/b&gt; attributes are succinct and informative. &lt;/p&gt;
&lt;h3&gt;Make link content meaningful&lt;/h3&gt;
&lt;p&gt;Often we forget that users need the contents of a link to instruct them as to the link&amp;rsquo;s purpose and destination. Links that use terms like &amp;ldquo;click here&amp;rdquo; and &amp;ldquo;more&amp;rdquo; may look fine in the flow of an article, but they&amp;rsquo;re not descriptive or informative at all. Make sure than when you are creating links that the content inside the links are as descriptive as possible. When possible, don&amp;rsquo;t include a long URL as link content simply use descriptive text to replace the URL. When using images as links, make sure you include descriptive content in the images &lt;b&gt;alt&lt;/b&gt; attribute and use a descriptive &lt;b&gt;title&lt;/b&gt; attribute on the link itself.&lt;/p&gt;
&lt;h3&gt;Links should be keyboard accessible&lt;/h3&gt;
&lt;p&gt;Most user agents will allow users to tab through the links on a page. If you stick to using the anchor element to create links, you avoid the issue of needing mouse input to trigger a link. In cases where pages are progressively enhanced, it&amp;rsquo;s not uncommon to see links created purely through JavaScript on non-anchor elements. Avoid this practice by using anchors for all links, use class or id attributes for JavaScript hooks when necessary, and use the &lt;b&gt;tabindex&lt;/b&gt; attribute to add non-anchor links to the tab order if non-anchor links are an absolute necessity.&lt;/p&gt;
&lt;h3&gt;Use ARIA landmark roles&lt;/h3&gt;
&lt;p&gt;WAI-ARIA landmark roles allow you to identify content regions to which users might want quick access. Among these roles are banner, contentinfo, form, main, navigation, and search. To use them, you simply use the roll attribute with the desired value. Supporting user agents then allow users to navigate directly to the desired area. While there has been some debate as to whether or not the role attribute directly conflicts with the new HTML5 elements, support for ARIA roles is fairly widespread and there&amp;rsquo;s no reason you can&amp;rsquo;t use the two in concert with one another. For more information on WAI-ARIA roles &lt;a href="http://www.w3.org/TR/wai-aria/roles"&gt;explore the WAI-ARIA specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, these are just a few suggestions on how to make your links more accessible. Later in the course we&amp;rsquo;ll explore a few best practices surrounding styling links and we&amp;rsquo;ll discuss the impact they can have on accessibility.&lt;/p&gt;
&lt;p&gt;For more information on accessibility and navigation, visit the &lt;a href="http://webaim.org/techniques/hypertext/"&gt;WebAIM&amp;rsquo;s page on links and hypertext.&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>HTML_Tags</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>a</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>HTML_Tags</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>a</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Examples

&lt;!-- anchor linking to external file --&gt;
&lt;a href="http://www.democompany.com/"&gt;
External Link
&lt;/a&gt;

&lt;!-- anchor linking to file on local filesystem --&gt;
&lt;a href="file:/c:\html\index.htm"&gt;
local file link
&lt;/a&gt;


&lt;!-- run command from anchor --&gt;
&lt;a href="file://h:\companyapps\standard.bat"&gt;Run the standard stuff&lt;/a&gt;

&lt;!-- anchor linking to UNC path for intranet
To link to a UNC path from an HTML document, use file:///// (yes, that's five slashes).
Note that this is most useful in IE and Outlook/Word. It won't work in Chrome or Firefox, intentionally - the link will fail silently
 --&gt;
&lt;a href="file://///server/share/path/to/file.txt"&gt;
UNC link
&lt;/a&gt;

&lt;!-- anchor invoking anonymous FTP --&gt;
&lt;a href="ftp://ftp.democompany.com/freestuff"&gt;
Anonymous FTP link
&lt;/a&gt;

&lt;!-- anchor invoking FTP with password --&gt;
&lt;a href=
"ftp://user:secretpassword@
democompany.com/path/file"&gt;
FTP with password&lt;/a&gt;

&lt;!-- anchor invoking mail --&gt;
&lt;a href="mailto:fakeid@democompany.com"&gt;
Send mail
&lt;/a&gt;

&lt;!-- anchor used to define target destination within document --&gt;
&lt;a name="jump"&gt;
Jump target
&lt;/a&gt;

&lt;!-- anchor linking internally to previous target anchor --&gt;
&lt;a href="#jump"&gt;Local jump within document&lt;/a&gt;

&lt;!-- anchor linking externally
to previous target anchor --&gt;
&lt;a href="http://www.democompany.com/
document#jump"&gt;
Remote jump within document
&lt;/a&gt; 

&lt;!-- Target attribute --&gt;
&lt;a href="http://www.w3schools.com" target="_blank"&gt;Visit W3Schools&lt;/a&gt; 
&lt;!-- 
_blank 	Opens the linked document in a new window or tab
_self 	Opens the linked document in the same frame as it was clicked (this is default)
_parent 	Opens the linked document in the parent frame
_top 	Opens the linked document in the full body of the window
framename 	Opens the linked document in a named frame
--&gt;


&lt;!-- An image that is a link: --&gt;
&lt;a href="http://www.w3schools.com"&gt;
&lt;img src="smiley.gif" alt="Go to W3Schools!" width="42" height="42" border="0"&gt;
&lt;/a&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IIS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Getting IIS to impersonate the windows user to SQL server in an intranet environment</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IIS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Getting IIS to impersonate the windows user to SQL server in an intranet environment</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://stackoverflow.com/questions/21891605/getting-iis-to-impersonate-the-windows-user-to-sql-server-in-an-intranet-environ

I am developing an intranet site using C# and ASP.NET MVC. 
I have SQL Server on one machine and IIS running on a separate machine. 
I would like a user to visit the intranet site and without prompting the user internet explorer 
sends the users windows credentials to IIS and these are then passed to 
sql server meaning sql server can see the user accessing the database.

I am aware of the Kerberos double hop issue and it is this I am trying to get around.
At present I can get IE to pass the windows credentials to IIS and authenticate fine. 
I just cannot get IIS to pass on those credentials to SQL Server and instead the request 
currently runs under the app pool identity which is set to a domain service account "htu\srv-htu-iis".

My setup is as follows:

Web.Config
==============

&lt;system.web&gt;
    &lt;authentication mode="Windows" /&gt;
    &lt;authorization&gt;
        &lt;deny users="?" /&gt;
    &lt;/authorization&gt;
    &lt;identity impersonate="true" /&gt;
&lt;/system.web&gt;
&lt;system.webServer&gt;
    &lt;validation validateIntegratedModeConfiguration="false" /&gt;
&lt;/system.webServer&gt;

Connection String
======================

connection string=&amp;quot;data source=hturesbsqlp01;initial catalog=R2_Dev;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework&amp;quot;"

was:
==========================
    &lt;connectionStrings&gt;
        &lt;add name="DEVServer_Connection" connectionString="Data Source=SQL-SERVER\DEV;Initial Catalog=DB101_DBProjectRequistion;Integrated Security=True;Trusted_Connection=Yes;Pooling=False" providerName="System.Data.SqlClient" /&gt;
        &lt;add name="SQLEXPRESS_LOCAL_Connection" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=DB101_DBProjectRequistion;Integrated Security=True;Trusted_Connection=Yes;Pooling=False" providerName="System.Data.SqlClient" /&gt;
        &lt;add name="HomeTower_DEV" connectionString="Data Source=.\DEV;Initial Catalog=DB101_DBProjectRequistion;Integrated Security=True;Trusted_Connection=Yes;Pooling=False" providerName="System.Data.SqlClient" /&gt;
    &lt;/connectionStrings&gt;
==========================

IIS Authentication Settings
=============================

Anonymous Authentication = Disabled
ASP.NET Impersonation = Enabled
Forms Authentication = Disabled
Windows Authentication = Enabled

IIS App Pool Settings
=====================

Managed Pipeline = Integrated
Identity = htu\srv-htu-iis (domain service account)

Active Directory Settings
==========================

The domain service account htu\srv-htu-iis has had a service principal name set which associates our site with the account.

Active directory has

Allow Delagation to any service

SQL Server is running under its own SQL Domain Service account.

Tests
===================

I ran the following code tests:

System.Web.HttpContext.Current.User.Identity.Name

this correctly return the windows credentials of the user accessing the site

System.Security.Principal.WindowsIdentity.GetCurrent().Name

return the domain service account "htu\srv-htu-iis" which is what the app pool identity is running under.

Can anyone provide direction as to where I might be going wrong?</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>INDEXs</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_INDEXs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>INDEXs</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_INDEXs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_INDEXs


There are limitations to creating indexes that make covering queries difficult:

    A 900-byte size limit on indexes
    A maximum of 16 columns can be named in the index
    Columns with data types like nvarchar(max), text, and ntext cannot be used in indexes

--    CLUSTERED | NONCLUSTERED
--    Indicate that a clustered or a nonclustered index is created for the PRIMARY KEY or UNIQUE constraint. 

--    PRIMARY KEY constraints default to CLUSTERED, 
--		and 
--	  UNIQUE constraints default to NONCLUSTERED.

--    In a CREATE TABLE statement, CLUSTERED can be specified for only one constraint. 
--    If CLUSTERED is specified for a UNIQUE constraint and a PRIMARY KEY constraint 
--    is also specified, the PRIMARY KEY defaults to NONCLUSTERED.

PRIMARY KEY and UNIQUE constraints
--	When you create a PRIMARY KEY constraint, a unique clustered index on the column or columns is automatically created 
--		if a clustered index on the table does not already exist and you do not specify a unique nonclustered index. 
--	The primary key column cannot allow NULL values.

--

--NOTE: nomenclature of index: INDEX$tableName$fieldName
CREATE NONCLUSTERED INDEX INDEX$LNK06_T1_T12$T12_FK ON dbo.[LNK06_T1_T12] (T12_FK)
GO

/*
A table or view can contain the following types of indexes:
Clustered
=========
Clustered indexes sort and store the data rows in the table or view based on their key values. 
These are the columns included in the index definition. 
There can be only one clustered index per table, 
because the data rows themselves can be sorted in only one order.

The only time the data rows in a table are stored in sorted order is when the table contains a clustered index. 
When a table has a clustered index, the table is called a clustered table.
If a table has no clustered index, its data rows are stored in an unordered structure called a heap.
 
Nonclustered
=============
Nonclustered indexes have a structure separate from the data rows. 
	A nonclustered index contains the nonclustered index key values 
	and each key value entry has a pointer to the data row that contains the key value.

The pointer from an index row in a nonclustered index to a data row is called a row locator. 
	The structure of the row locator depends on whether the data pages are stored in a heap or a clustered table. 
	For a heap, a row locator is a pointer to the row. For a clustered table, the row locator is the clustered index key.
	You can add nonkey columns to the leaf level of the nonclustered index to by-pass existing index key limits, 
	900 bytes and 16 key columns, and execute fully covered, indexed, queries. 

Both clustered and nonclustered indexes can be unique. 
	This means no two rows can have the same value for the index key. 
	Otherwise, the index is not unique and multiple rows can share the same key value.  


Covering or Included 
====================

Covering index is just an ordinary index. It's called "covering" if it can satisfy query without necessity to analyze data
	Covering indexes are indexes which "cover" all columns needed from a specific table, 
	removing the need to access the physical table at all for a given query/ operation. */
CREATE TABLE MyTable

(
  ID INT IDENTITY PRIMARY KEY, 
  Foo INT
) 

CREATE NONCLUSTERED INDEX index1 ON MyTable(ID, Foo)

SELECT ID, Foo FROM MyTable -- All requested data are covered by index

/*
Since the index contains the desired columns (or a superset of them), 
	table access can be replaced with an index lookup or scan -- which is generally much faster.

	Columns to cover:
		- parameterized or static conditions; columns restricted by a parameterized or constant condition.
		- join columns; columns dynamically used for joining
		- selected columns; to answer selected values.
		
While covering indexes can often provide good benefit for retrieval, 
they do add somewhat to insert/ update overhead; 
due to the need to write extra or larger index rows on every update.

Covering indexes for Joined Queries
------------------------------------
Covering indexes are probably most valuable as a performance technique for joined queries. 
This is because joined queries are more costly &amp; more likely then single-table retrievals to suffer high cost performance problems.

	- in a joined query, covering indexes should be considered per-table.
	- each 'covering index' removes a physical table access from the plan &amp; replaces it with index-only access.
	- investigate the plan costs &amp; experiment with which tables are most worthwhile to replace by a covering index.
	- by this means, the multiplicative cost of large join plans can be significantly reduced.





</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>INDEXs</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CHECK_constraint</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>INDEXs</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CHECK_constraint</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--A Check constraint checks for a specific condition before inserting data into a table. 
--If the data passes all the Check constraints then the data will be inserted into the table 
--	otherwise the data for insertion will be discarded. 
--The CHECK constraint ensures that all values in a column satisfies certain condition

--You can apply multiple CHECK constraints to a single column. 
--You can also apply a single CHECK constraint to multiple columns by creating it at the table level. 
--For example, a multiple-column CHECK constraint could be used to confirm that 
--	any row with a country_region column value of USA also has a two-character value in the state column. 
--This allows for multiple conditions to be checked in one location.

--CHECK constraints are similar to FOREIGN KEY constraints in that they control the values that are put in a column. 
--The difference is in how they determine which values are valid: 
	FOREIGN KEY 
--		constraints obtain the list of valid values from another table, 
--	while 
	CHECK 
--		constraints determine the valid values from a logical expression.

--CHECK constraints 
--		reject values that evaluate to FALSE. Because null values evaluate to UNKNOWN, 
--		their presence in expressions may override a constraint. 
--	For example, suppose you place a constraint on an int column MyColumn specifying that MyColumn 
--		can contain only the value 10 (MyColumn=10). 
--	If you insert the value NULL into MyColumn, the Database Engine inserts NULL and does not return an error.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Accounts</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>about_LINUX_Accounts</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Accounts</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>about_LINUX_Accounts</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LINUX_Accounts

$ and #

	::When you open a Terminal, after the account name 
	$ = Logged in as a normal user
	# = Logged in as a Root user
	
su = Super User
	
	::To use the Super User command, just type:
		&gt; su [login name]
		e.g.
	
	::in UBUNTU: 
		&gt;sudo su 	::{then you are challenged for password}
		
	::To return to normal user
		&gt;exit
		
&gt; whoami

	To find out which user you are		
	
&gt; passwd
	::to change the password of a login
	&gt;passwd [account name] [Enter]
	::will then prompt you for the new password
	&gt; [new password]  [Enter]
	
	::To change the password of the root account, use sudo to become Root user
	:: then type 
	&gt; passwd  [Enter]
	:: it will ask for the new password for the root
	
	
&gt;id
	::OUTPUT for kobe
	::--------
	uid=1000(kobe) gid=1000(kobe) groups=1000(kobe),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)
	
	::OUTPUT for su
	::-------------
	uid=0(root) gid=0(root) groups=0(root)
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Files_Folders_Directories</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>ROOT_directory_contents</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Files_Folders_Directories</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>ROOT_directory_contents</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>bin
	Executable programs
boot
cdrom
dev
etc
	Contains CONF items like account info and hashed passwords
home
	contains user home directories
initrd.img
initrd.img.old
lib
	Contains common libraries
lib64
lost+found
media
mnt
	Mount: Temp file systems are attached like CD ROM or USB drive
opt
proc
	Virtual File syxtem Stores kernel info
root
	Root Account's Home dir
run
sbin
	Executable system programs
snap
srv
swapfile
sys
tmp
	Contains temporary data
	Items are erased when computer is rebooted
usr
	Contains USR Program and other Data
var
	Variable data where system must be able to write during operation
vmlinuz
vmlinuz.old
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_MYSQL</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_LINUX_MYSQL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_MYSQL</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_LINUX_MYSQL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LINUX_MYSQL
good ref: http://www.cyberciti.biz/faq/howto-install-mysql-on-ubuntu-linux-16-04/

--To log in as the root user, type:
$ mysql -u root -p
{Then it asks for the root's password}

--Create a new server database, 
CREATE DATABASE DATABASE-NAME-HERE;
GRANT ALL ON DATABASE-NAME-HERE.* TO 'DATABASE-USERNAME-HERE' IDENTIFIED BY 'DATABASE-PASSWORD-HERE';


create database testDB;
grant all on testDB.* to 'testROOT' identified by 'abc123';

show databases;

------------------------------------

--How do I start MySQL server?

$ sudo systemctl start mysql

--OR
$ sudo systemctl start mysql.service

--How do I stop MySQL server?

$ sudo systemctl stop mysql

--OR
$ sudo systemctl stop mysql.service

--How do I restart MySQL server?

$ sudo systemctl restart mysql

--OR
$ sudo systemctl restart mysql.service

--How do I find out if MySQL running/active?

$ sudo systemctl status mysql.service
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Users_and_Groups</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>commands_Users_and_Groups</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Users_and_Groups</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>commands_Users_and_Groups</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

::CREATE a USER - NOTE: this is not a user that can use "sudo"
&gt; sudo adduser userOne
:: asks for sudo password, then for password for the new user

:: CREATE a GROUP
&gt; sudo groupadd theGroup

::To SWITCH OVER TO the new user
:: NOTE: if a standard user tries to do anything that requires sudo,  that user will get this message (e.g.)
::		 "userOne is not in the sudoers file. This incident will be reported"
&gt; su userOne

:: TO ADD A USER TO A GROUP (e.g. add 'userOne' to the administrator group) : can add user to any group this way
&gt; sudo adduser userOne sudo

:: To DELETE a user:
&gt; sudo deluser userOne

:: To CHANGE PASSWORD of existing user:
&gt; sudo passwd userOne
:: responds:
Enter new UNIX password:
:: then type the new password, and it will respond that it was updated successfully</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ADVANTAGE_LINKED_Server___ConfigurationScript.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ADVANTAGE_LINKED_Server___ConfigurationScript.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>ADVANTAGE_LINKED_Server___ConfigurationScript.sql

--ASTEC_Baton_Rouge_NEW_server.sql
/*
For the Provider: Allow InProcess
*/

sp_dropserver N'ASTEC_Baton_Rouge_NEW_server', 'droplogins';  
go
EXEC master.dbo.sp_addlinkedserver
	@server = N'ASTEC_Baton_Rouge_NEW_server'
	,@srvproduct=N'Advantage OLE DB Provider' 
	,@provider=N'Advantage OLE DB Provider'
	,@datasrc=N'\\10.0.0.48:2211\WM2000_Baton_Rouge\Data\WM2000DATA.add'	--	,@datasrc=N'\\10.0.0.48:2211\WM2000 Baton_Rouge\Data\WM2000DATA.add'		
	,@provstr=N'ServerType=ADS_REMOTE_SERVER; TableType=ADS_ADT;'	
EXEC master.dbo.sp_addlinkedsrvlogin 
	@rmtsrvname=N'ASTEC_Baton_Rouge_NEW_server',
	@useself=N'False',
	@locallogin=NULL,	
	@rmtuser='astec',
	@rmtpassword='3483'		
GO	

--https://blogs.msdn.microsoft.com/dataaccesstechnologies/2010/08/19/permissions-needed-to-set-up-linked-server-with-out-of-process-provider/

EXEC master.dbo.sp_serveroption @server=N'ASTEC_Baton_Rouge_NEW_server', @optname=N'rpc', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'ASTEC_Baton_Rouge_NEW_server', @optname=N'rpc out', @optvalue=N'false'
GO
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>MySQL_LINKED_Server___ConfigurationScript.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>MySQL_LINKED_Server___ConfigurationScript.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--MySQL_LINKED_Server___ConfigurationScript.sql



/****** Object:  LinkedServer [MYSQL]    Script Date: 05/20/2016 15:48:28 ******/
EXEC master.dbo.sp_addlinkedserver
									 @server = N'MYSQL',
									 @srvproduct=N'MySQL', 
									 @provider=N'MSDASQL', 
									 @datasrc=N'MySQL', 
									 @provstr=N'DRIVER={MySQL ODBC 5.3 Driver};SERVER=BCC-SHORETEL;PORT=4309;DATABASE=shorewarecdr; USER=st_cdrreport;PASSWORD=passwordcdrreport;OPTION=3;'
 /* For security reasons the linked server remote logins password is changed with ######## */
EXEC master.dbo.sp_addlinkedsrvlogin 
									@rmtsrvname=N'MYSQL',
									@useself=N'False',
									@locallogin=NULL,
									@rmtuser=NULL,
									@rmtpassword=NULL

GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'collation compatible', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'data access', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'dist', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'pub', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'rpc', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'rpc out', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'sub', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'connect timeout', @optvalue=N'0'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'collation name', @optvalue=null
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'lazy schema validation', @optvalue=N'false'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'query timeout', @optvalue=N'0'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'use remote collation', @optvalue=N'true'
GO

EXEC master.dbo.sp_serveroption @server=N'MYSQL', @optname=N'remote proc transaction promotion', @optvalue=N'true'
GO


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>MySQL_LINKED_Server___Setup</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>MySQL_LINKED_Server___Setup</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>MySQL_LINKED_Server___Setup

ref:
https://dbperf.wordpress.com/2010/07/22/link-mysql-to-ms-sql-server2008/

/*
Step 1: Create ODBC DSN for MySQL
==================================
	To create ODBC DSN you need to download the MySQL Connector/ODBC Drivers 5.1 from
		http://www.mysql.com/downloads/connector/odbc/
		
	Had to register with Oracle to get the download
	-----------------------------------------------
		Oracle MySQL Web Account
			Web Address is user name:
				glenng@barriere.com
			password:
				Abcde12345
			Name:
				BCC Developer
			Phone number
				800.234.5376
	Downloaded:
		mysql-connector-odbc-5.3.6-winx64
		Stored it in:
			\\BCC-FS1\IT Data\Software\For_Glenns_Computer\MySQL_ODBC_driver
	Installed driver
		C:\Program Files\MySQL\Connector ODBC 5.3\
	Once you download and install the ODBC drivers, it’s time to create the DSN. 
	Initially check if the drivers are listed under your data sources from CONTROL PANEL&gt;Administrative Tools&gt;Data Sources(ODBC)


2] Setup MySQL ODBC DSN
========================
	On System DSN tab click Add button:
		w-1 Create New Data Source
			MySQL ODBC 5.3 ANSI Driver
			[ok?]
		MySQL Connector/ODBC Data Source Configuration
			Data Source name:
				MySQL
			TCP/IP Server: 
				10.0.0.8
			Port
				4309
			User
				st_cdrreport
			Password:
				Passwordcdrreport
			Database
				Shorewarecdr
			[TEST]
				Connection successful

3] Create Linked Server through SSMS
=====================================
	Under Object Browser expand Server Objects and right click Linked Servers as shown below
	Click New Linked Sever, It brings up a window; fill in the information as shown to create linked server under General tab
	New Linked Server {Window}
		General {Tab }
			Linked Server:
				MYSQL_SHORETEL
			(x) Other Data Source
			Provider: 
				Microsoft OLE DB Provider for ODBC Drivers
			Product name:  
				MySQL
			Data Source: 
				MySQL_ShoreTel (This the system dsn created earlier)
			Provider String:	
				*/  
				DRIVER={MySQL ODBC 5.3 Driver};SERVER=BCC-SHORETEL;PORT=4309;DATABASE=shorewarecdr; USER=st_cdrreport;PASSWORD=passwordcdrreport;OPTION=3;
				/*
			Location: 
				Null {greyed out}
			Catalog
				Shorewarecdr
	Security {Tab}
		Now on the Security tab, select 
			(x) Be made without using a security context  
	Server Options {Tab}
		Also finally under Server Options tab, change RPC and RPC Out properties to True, by default they are set to False.
	[Details &gt;&gt;]
		Connection {tab}
			[x] Allow Big Result sets
			[x] Use compression
	
	Click Ok, 
		after making all the mentioned changes. This will create the linked server and it will be listed under SSMS Object Browser. Right Click on the MYSQL linked server and click Test Connection.
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>MySQL_LINKED_Server___View</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LNK_Junction_Cross-Reference_Bridge_Map_Intersection_Linking</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>MySQL_LINKED_Server___View</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0011_vw_501_ShoreTel_Directory.sql

/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 1/12/2016
	By: glenn garson
	************************************************************************************
*/

use IT_DEPT
go

IF OBJECT_ID('prj_0011_vw_501_ShoreTel_Directory', 'V') IS NOT NULL
DROP view prj_0011_vw_501_ShoreTel_Directory
GO


CREATE VIEW prj_0011_vw_501_ShoreTel_Directory AS
--==============================================
WITH CTE_ShoreTel_users(
								UserDN ,
								UserGroupID ,
								AddressID ,
								GuiLoginName ,
								GUIPassword ,
								TUIPassword ,
								CurrentCHMTypeID ,
								CurrentCallStackDepth ,
								CallWaitingToneEnabled ,
								UserTypeID ,
								DefaultTrunkGroupID ,
								UserStatusID ,
								MustRecordName ,
								MustChangeTUIPassword ,
								MustChangeGUIPassword ,
								HeadsetMode ,
								ClientType ,
								AutoCHM ,
								AnyIPPhone ,
								ExternalDialTone ,
								AllowSoftPhone ,
								UseProgButtonsIP100 ,
								RoleID ,
								RingToneID ,
								VoiceMailboxForRecordedCalls ,
								TUIPasswordLastUpdated ,
								GUIPasswordLastUpdated ,
								VMServerID ,
								PSTNFailoverTypeID ,
								PSTNFailoverNumber ,
								BridgePassword ,
								BridgeID ,
								BridgeUserID ,
								CIDNumber ,
								LicenseTypeID ,
								UseHeadsetAudioPath ,
								AdvancedCHM ,
								PCMXMonDisplayMode ,
								BluetoothAudioPath ,
								ContactCenterIntegration ,
								MCMAllowed ,
								MCMPinEntryFrequency ,
								MCMMobileNumber ,
								FaxSupport ,
								AllowPAPI ,
								SIPPassword ,
								IMServerID ,
								AllowVideoCalls ,
								EnableDelayedRingdown ,
								RingdownType ,
								RingdownDN ,
								RingdownExtern ,
								RingdownDelay ,
								AllowTelephonyPresence ,
								MCMStatusID ,
								LDAPUser ,
								LDAPGuid ,
								LDAPDomainName ,
								IMPrivacySetting ,
								DirSortPreference ,
								WPID ,
								SIPServerID ,
								QsigVMID ,
								bBcaDN ,
								WebBridgePictureID ,
								WebBridgeRoomName ,
								WebBridgeRoomDescription ,
								WebBridgeTimeZone ,
								WebBridgeViewerID ,
								ScribeEnabled ,
								FaxEnabled ,
								MobilityEnabled ,
								LastUpdateUTCTime ,
								MobileDN 

							  )
AS
(							  
SELECT *
FROM OPENQUERY(MYSQL, 'SELECT * FROM users')
)
--SELECT * from CTE_ShoreTel_users

,CTE_ShoreTel_TabAddresses(
							AddressID ,
							UserDN ,
							FirstName ,
							LastName ,
							[Address] ,
							City ,
							StateOrProvince ,
							PostalCode ,
							Country ,
							EmailAddress ,
							HomePhone ,
							WorkPhone ,
							FaxPhone ,
							CellPhone ,
							PagerPhone ,
							CompanyName ,
							DepartmentName ,
							Relationship ,
							IMUri ,
							NTLoginName ,
							AddressType ,
							IMStatusNote ,
							BusinessPhone2 ,
							HomePhone2 ,
							EmailAddress2 ,
							EmailAddress3 ,
							CellPhone2 ,
							ContactID ,
							SourceName ,
							ContactDetails ,
							ImportTimeStamp ,
							LastUpdateUTCTime 
							  )
AS
(							  
SELECT *
FROM OPENQUERY(MYSQL, 'SELECT * FROM TabAddresses')
)
--SELECT * from CTE_ShoreTel_TabAddresses

SELECT 
		U.UserDN AS Extension
		--, A.UserDN AS Extension_2
		, U.GuiLoginName as Login
		, A.FirstName
		, A.LastName
		, A.EmailAddress
		, A.WorkPhone
		, A.FaxPhone

FROM 
	CTE_ShoreTel_users U
	RIGHT OUTER JOIN
	CTE_ShoreTel_TabAddresses A
	on U.AddressID = A.AddressID
Where 
		(U.UserDN is NOT NULL)
		
--Order by FirstName, LastName
		--FirstName like '%glenn%'
	
	
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Logins_Users</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LOGINS_does_it_exist_and_CREATE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Logins_Users</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LOGINS_does_it_exist_and_CREATE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>IF NOT EXISTS 
    (SELECT name  
     FROM master.sys.server_principals
     WHERE name = 'LoginName')
BEGIN
    CREATE LOGIN [LoginName] WITH PASSWORD = N'password'
END


--If you need to check for the existence of a user in a particular database before creating them, then you can do this:

USE your_db_name

IF NOT EXISTS
    (SELECT name
     FROM sys.database_principals
     WHERE name = 'Bob')
BEGIN
    CREATE USER [Bob] FOR LOGIN [Bob] 
END








--=================Deprecated: syslogins view

If not Exists (select loginname from master.dbo.syslogins 
    where name = @loginName and dbname = 'PUBS')
Begin
Select @SqlStatement = QUOTENAME('CREATE LOGIN [' + @loginName + '] 
FROM WINDOWS WITH DEFAULT_DATABASE=     [PUBS], DEFAULT_LANGUAGE=[us_english]')

EXEC sp_executesql @SqlStatement
End </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Logins_Users</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>MigrateCreate_UserAccounts_and_Logins</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Logins_Users</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>MigrateCreate_UserAccounts_and_Logins</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://dba.stackexchange.com/questions/40844/after-moving-database-backup-restore-i-have-to-re-add-user

/*
 Run it from the Server that you have restored the database to and supply the original Server name as a parameter to the procedure.
 */
 
USE [master]
GO
/****** Object:  StoredProcedure [dbo].[stp_Admin_ReplicateUserLogins]    Script Date: 10/29/2015 08:22:43 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER Procedure [dbo].[stp_Admin_ReplicateUserLogins] --'OriginalSourceDatabase', 1
    @PartnerServer sysname,
    @Debug bit = 0 -- 0 = Create Users, 1 = Display SQL command but doesn't execute query.
As

Declare @MaxID int,
    @CurrID int,
    @SQL nvarchar(max),
    @LoginName sysname,
    @IsDisabled int,
    @Type char(1),
    @SID varbinary(85),
    @SIDString nvarchar(100),
    @PasswordHash varbinary(256),
    @PasswordHashString nvarchar(300),
    @RoleName sysname,
    @Machine sysname,
    @PermState nvarchar(60),
    @PermName sysname,
    @Class tinyint,
    @MajorID int,
    @ErrNumber int,
    @ErrSeverity int,
    @ErrState int,
    @ErrProcedure sysname,
    @ErrLine int,
    @ErrMsg nvarchar(2048)
Declare @Logins Table (LoginID int identity(1, 1) not null primary key,
                        [Name] sysname not null,
                        [SID] varbinary(85) not null,
                        IsDisabled int not null,
                        [Type] char(1) not null,
                        PasswordHash varbinary(256) null)
Declare @Roles Table (RoleID int identity(1, 1) not null primary key,
                    RoleName sysname not null,
                    LoginName sysname not null)
Declare @Perms Table (PermID int identity(1, 1) not null primary key,
                    LoginName sysname not null,
                    PermState nvarchar(60) not null,
                    PermName sysname not null,
                    Class tinyint not null,
                    ClassDesc nvarchar(60) not null,
                    MajorID int not null,
                    SubLoginName sysname null,
                    SubEndPointName sysname null)

Set NoCount On;

If CharIndex('\', @PartnerServer) &gt; 0
  Begin
    Set @Machine = LEFT(@PartnerServer, CharIndex('\', @PartnerServer) - 1);
  End
Else
  Begin
    Set @Machine = @PartnerServer;
  End

-- Get all Windows logins from principal server
Set @SQL = 'Select P.name, P.sid, P.is_disabled, P.type, L.password_hash' + CHAR(10) +
        'From ' + QUOTENAME(@PartnerServer) + '.master.sys.server_principals P' + CHAR(10) +
        'Left Join ' + QUOTENAME(@PartnerServer) + '.master.sys.sql_logins L On L.principal_id = P.principal_id' + CHAR(10) +
        'Where P.type In (''U'', ''G'', ''S'')' + CHAR(10) +
        'And P.name &lt;&gt; ''sa''' + CHAR(10) +
        'And P.name Not Like ''##%''' + CHAR(10) +
        'and P.Name Not like ''NT SERVICE%''' + CHAR(10) +
        'And CharIndex(''' + @Machine + '\'', P.name) = 0;';

Insert Into @Logins (Name, SID, IsDisabled, Type, PasswordHash)
Exec sp_executesql @SQL;

-- Get all roles from principal server
Set @SQL = 'Select RoleP.name, LoginP.name' + CHAR(10) +
        'From ' + QUOTENAME(@PartnerServer) + '.master.sys.server_role_members RM' + CHAR(10) +
        'Inner Join ' + QUOTENAME(@PartnerServer) + '.master.sys.server_principals RoleP' +
        CHAR(10) + char(9) + 'On RoleP.principal_id = RM.role_principal_id' + CHAR(10) +
        'Inner Join ' + QUOTENAME(@PartnerServer) + '.master.sys.server_principals LoginP' +
        CHAR(10) + char(9) + 'On LoginP.principal_id = RM.member_principal_id' + CHAR(10) +
        'Where LoginP.type In (''U'', ''G'', ''S'')' + CHAR(10) +
        'And LoginP.name &lt;&gt; ''sa''' + CHAR(10) +
        'And LoginP.name Not Like ''##%''' + CHAR(10) +
        'And LoginP.name Not Like ''NT SERVICE%''' + CHAR(10) +
        'And RoleP.type = ''R''' + CHAR(10) +
        'And CharIndex(''' + @Machine + '\'', LoginP.name) = 0;';

Insert Into @Roles (RoleName, LoginName)
Exec sp_executesql @SQL;

-- Get all explicitly granted permissions
Set @SQL = 'Select P.name Collate database_default,' + CHAR(10) +
        '   SP.state_desc, SP.permission_name, SP.class, SP.class_desc, SP.major_id,' + CHAR(10) +
        '   SubP.name Collate database_default,' + CHAR(10) +
        '   SubEP.name Collate database_default' + CHAR(10) +
        'From ' + QUOTENAME(@PartnerServer) + '.master.sys.server_principals P' + CHAR(10) +
        'Inner Join ' + QUOTENAME(@PartnerServer) + '.master.sys.server_permissions SP' + CHAR(10) +
        CHAR(9) + 'On SP.grantee_principal_id = P.principal_id' + CHAR(10) +
        'Left Join ' + QUOTENAME(@PartnerServer) + '.master.sys.server_principals SubP' + CHAR(10) +
        CHAR(9) + 'On SubP.principal_id = SP.major_id And SP.class = 101' + CHAR(10) +
        'Left Join ' + QUOTENAME(@PartnerServer) + '.master.sys.endpoints SubEP' + CHAR(10) +
        CHAR(9) + 'On SubEP.endpoint_id = SP.major_id And SP.class = 105' + CHAR(10) +
        'Where P.type In (''U'', ''G'', ''S'')' + CHAR(10) +
        'And P.name &lt;&gt; ''sa''' + CHAR(10) +
        'And P.name Not Like ''##%''' + CHAR(10) +
        'And P.name Not Like ''NT SERVICE%''' + CHAR(10) +
        'And CharIndex(''' + @Machine + '\'', P.name) = 0;'

Insert Into @Perms (LoginName, PermState, PermName, Class, ClassDesc, MajorID, SubLoginName, SubEndPointName)
Exec sp_executesql @SQL;



Select @MaxID = Max(LoginID), @CurrID = 1
From @Logins;

While @CurrID &lt;= @MaxID
  Begin
    Select @LoginName = Name,
        @IsDisabled = IsDisabled,
        @Type = [Type],
        @SID = [SID],
        @PasswordHash = PasswordHash
    From @Logins
    Where LoginID = @CurrID;

    If Not Exists (Select 1 From sys.server_principals
                Where name = @LoginName)
      Begin
        Set @SQL = 'Create Login ' + quotename(@LoginName)
        If @Type In ('U', 'G')
          Begin
            Set @SQL = @SQL + ' From Windows;'
          End
        Else
          Begin
            Set @PasswordHashString = '0x' +
                Cast('' As XML).value('xs:hexBinary(sql:variable("@PasswordHash"))', 'nvarchar(300)');

            Set @SQL = @SQL + ' With Password = ' + @PasswordHashString + ' HASHED, ';

            Set @SIDString = '0x' +
                Cast('' As XML).value('xs:hexBinary(sql:variable("@SID"))', 'nvarchar(100)');
            Set @SQL = @SQL + 'SID = ' + @SIDString + ';';
          End

        If @Debug = 0
          Begin
            Begin Try
                Exec sp_executesql @SQL;
            End Try
            Begin Catch
                Set @ErrNumber = ERROR_NUMBER();
                Set @ErrSeverity = ERROR_SEVERITY();
                Set @ErrState = ERROR_STATE();
                Set @ErrProcedure = ERROR_PROCEDURE();
                Set @ErrLine = ERROR_LINE();
                Set @ErrMsg = ERROR_MESSAGE();
                RaisError(@ErrMsg, 1, 1);
            End Catch
          End
        Else
          Begin
            Print @SQL;
          End

        If @IsDisabled = 1
          Begin
            Set @SQL = 'Alter Login ' + quotename(@LoginName) + ' Disable;'
            If @Debug = 0
              Begin
                Begin Try
                    Exec sp_executesql @SQL;
                End Try
                Begin Catch
                    Set @ErrNumber = ERROR_NUMBER();
                    Set @ErrSeverity = ERROR_SEVERITY();
                    Set @ErrState = ERROR_STATE();
                    Set @ErrProcedure = ERROR_PROCEDURE();
                    Set @ErrLine = ERROR_LINE();
                    Set @ErrMsg = ERROR_MESSAGE();
                    RaisError(@ErrMsg, 1, 1);
                End Catch
              End
            Else
              Begin
                Print @SQL;
              End
          End
        End
    Set @CurrID = @CurrID + 1;
  End

Select @MaxID = Max(RoleID), @CurrID = 1
From @Roles;

While @CurrID &lt;= @MaxID
  Begin
    Select @LoginName = LoginName,
        @RoleName = RoleName
    From @Roles
    Where RoleID = @CurrID;

    If Not Exists (Select 1 From sys.server_role_members RM
                Inner Join sys.server_principals RoleP
                    On RoleP.principal_id = RM.role_principal_id
                Inner Join sys.server_principals LoginP
                    On LoginP.principal_id = RM.member_principal_id
                Where LoginP.type In ('U', 'G', 'S')
                And RoleP.type = 'R'
                And RoleP.name = @RoleName
                And LoginP.name = @LoginName)
      Begin
        If @Debug = 0
          Begin
            Exec sp_addsrvrolemember @rolename = @RoleName,
                            @loginame = @LoginName;
          End
        Else
          Begin
            Print 'Exec sp_addsrvrolemember @rolename = ''' + @RoleName + ''',';
            Print '     @loginame = ''' + @LoginName + ''';';
          End
      End

    Set @CurrID = @CurrID + 1;
  End

Select @MaxID = Max(PermID), @CurrID = 1
From @Perms;

While @CurrID &lt;= @MaxID
  Begin
    Select @PermState = PermState,
        @PermName = PermName,
        @Class = Class,
        @LoginName = LoginName,
        @MajorID = MajorID,
        @SQL = PermState + space(1) + PermName + SPACE(1) +
            Case Class When 101 Then 'On Login::' + QUOTENAME(SubLoginName)
                    When 105 Then 'On ' + ClassDesc + '::' + QUOTENAME(SubEndPointName)
                    Else '' End +
            ' To ' + QUOTENAME(LoginName) + ';'
    From @Perms
    Where PermID = @CurrID;

    If Not Exists (Select 1 From sys.server_principals P
                Inner Join sys.server_permissions SP On SP.grantee_principal_id = P.principal_id
                Where SP.state_desc = @PermState
                And SP.permission_name = @PermName
                And SP.class = @Class
                And P.name = @LoginName
                And SP.major_id = @MajorID)
      Begin
        If @Debug = 0
          Begin
            Begin Try
                Exec sp_executesql @SQL;
            End Try
            Begin Catch
                Set @ErrNumber = ERROR_NUMBER();
                Set @ErrSeverity = ERROR_SEVERITY();
                Set @ErrState = ERROR_STATE();
                Set @ErrProcedure = ERROR_PROCEDURE();
                Set @ErrLine = ERROR_LINE();
                Set @ErrMsg = ERROR_MESSAGE();
                RaisError(@ErrMsg, 1, 1);
            End Catch
          End
        Else
          Begin
            Print @SQL;
          End
      End

    Set @CurrID = @CurrID + 1;
  End


Set NoCount Off;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Logins_Users</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>password_change</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Logins_Users</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>password_change</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Step 1. Open SQL Server Management Studio
Step 2. Open a new query
Step 3. Type the follow commands and excute:
GO
ALTER LOGIN [LOGIN_NAME] WITH DEFAULT_DATABASE=[master]
GO
USE [master]
GO
ALTER LOGIN [LOGIN_NAME] WITH PASSWORD=N’NewPassword’ MUST_CHANGE
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>machine_config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>machine.config</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>machine_config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>machine.config</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0" encoding="us-ascii"?&gt;
&lt;!--
    Please refer to machine.config.comments for a description and
    the default values of each configuration section.

    For a full documentation of the schema please refer to
    http://go.microsoft.com/fwlink/?LinkId=42127

    To improve performance, machine.config should contain only those
    settings that differ from their defaults.
--&gt;
&lt;configuration&gt;
    &lt;configSections&gt;
        &lt;section name="appSettings" type="System.Configuration.AppSettingsSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" /&gt;
        &lt;section name="connectionStrings" type="System.Configuration.ConnectionStringsSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" requirePermission="false" /&gt;
        &lt;section name="mscorlib" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;section name="runtime" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;section name="assemblyBinding" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;section name="satelliteassemblies" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;section name="startup" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;section name="system.codedom" type="System.CodeDom.Compiler.CodeDomConfigurationHandler, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.data" type="System.Data.Common.DbProviderFactoriesConfigurationHandler, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.data.dataset" type="System.Configuration.NameValueFileSectionHandler, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" restartOnExternalChanges="false" /&gt;
        &lt;section name="system.data.odbc" type="System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.data.oledb" type="System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.data.oracleclient" type="System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.data.sqlclient" type="System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.diagnostics" type="System.Diagnostics.SystemDiagnosticsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="system.runtime.remoting" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;section name="system.windows.forms" type="System.Windows.Forms.WindowsFormsSection, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;section name="windows" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowLocation="false" /&gt;
        &lt;sectionGroup name="system.xml.serialization" type="System.Xml.Serialization.Configuration.SerializationSectionGroup, System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"&gt;
            &lt;section name="schemaImporterExtensions" type="System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection, System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;section name="dateTimeSerialization" type="System.Xml.Serialization.Configuration.DateTimeSerializationSection, System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;section name="xmlSerializer" type="System.Xml.Serialization.Configuration.XmlSerializerSection, System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" /&gt;
        &lt;/sectionGroup&gt;
        &lt;sectionGroup name="system.net" type="System.Net.Configuration.NetSectionGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"&gt;
            &lt;section name="authenticationModules" type="System.Net.Configuration.AuthenticationModulesSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;section name="connectionManagement" type="System.Net.Configuration.ConnectionManagementSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;section name="defaultProxy" type="System.Net.Configuration.DefaultProxySection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;sectionGroup name="mailSettings" type="System.Net.Configuration.MailSettingsSectionGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"&gt;
                &lt;section name="smtp" type="System.Net.Configuration.SmtpSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;/sectionGroup&gt;
            &lt;section name="requestCaching" type="System.Net.Configuration.RequestCachingSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;section name="settings" type="System.Net.Configuration.SettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;section name="webRequestModules" type="System.Net.Configuration.WebRequestModulesSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;/sectionGroup&gt;
        &lt;sectionGroup name="system.transactions" type="System.Transactions.Configuration.TransactionsSectionGroup, System.Transactions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null"&gt;
            &lt;section name="defaultSettings" type="System.Transactions.Configuration.DefaultSettingsSection, System.Transactions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null" /&gt;
            &lt;section name="machineSettings" type="System.Transactions.Configuration.MachineSettingsSection, System.Transactions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null" allowDefinition="MachineOnly" allowExeDefinition="MachineOnly" /&gt;
        &lt;/sectionGroup&gt;
        &lt;sectionGroup name="system.web" type="System.Web.Configuration.SystemWebSectionGroup, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&gt;
            &lt;section name="anonymousIdentification" type="System.Web.Configuration.AnonymousIdentificationSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="authentication" type="System.Web.Configuration.AuthenticationSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="authorization" type="System.Web.Configuration.AuthorizationSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="browserCaps" type="System.Web.Configuration.HttpCapabilitiesSectionHandler, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="clientTarget" type="System.Web.Configuration.ClientTargetSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="compilation" type="System.Web.Configuration.CompilationSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="customErrors" type="System.Web.Configuration.CustomErrorsSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="deployment" type="System.Web.Configuration.DeploymentSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineOnly" /&gt;
            &lt;section name="deviceFilters" type="System.Web.Mobile.DeviceFiltersSection, System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="globalization" type="System.Web.Configuration.GlobalizationSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="healthMonitoring" type="System.Web.Configuration.HealthMonitoringSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="hostingEnvironment" type="System.Web.Configuration.HostingEnvironmentSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="httpCookies" type="System.Web.Configuration.HttpCookiesSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="httpHandlers" type="System.Web.Configuration.HttpHandlersSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="httpModules" type="System.Web.Configuration.HttpModulesSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="httpRuntime" type="System.Web.Configuration.HttpRuntimeSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="identity" type="System.Web.Configuration.IdentitySection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="machineKey" type="System.Web.Configuration.MachineKeySection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="membership" type="System.Web.Configuration.MembershipSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="mobileControls" type="System.Web.UI.MobileControls.MobileControlsSection, System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="pages" type="System.Web.Configuration.PagesSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="processModel" type="System.Web.Configuration.ProcessModelSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineOnly" allowLocation="false" /&gt;
            &lt;section name="profile" type="System.Web.Configuration.ProfileSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="protocols" type="System.Web.Configuration.ProtocolsSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToWebRoot" /&gt;
            &lt;section name="roleManager" type="System.Web.Configuration.RoleManagerSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="securityPolicy" type="System.Web.Configuration.SecurityPolicySection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="sessionPageState" type="System.Web.Configuration.SessionPageStateSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="sessionState" type="System.Web.Configuration.SessionStateSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="siteMap" type="System.Web.Configuration.SiteMapSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="trace" type="System.Web.Configuration.TraceSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="trust" type="System.Web.Configuration.TrustSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="urlMappings" type="System.Web.Configuration.UrlMappingsSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;section name="webControls" type="System.Web.Configuration.WebControlsSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="webParts" type="System.Web.Configuration.WebPartsSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="webServices" type="System.Web.Services.Configuration.WebServicesSection, System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;section name="xhtmlConformance" type="System.Web.Configuration.XhtmlConformanceSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;sectionGroup name="caching" type="System.Web.Configuration.SystemWebCachingSectionGroup, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"&gt;
                &lt;section name="cache" type="System.Web.Configuration.CacheSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
                &lt;section name="outputCache" type="System.Web.Configuration.OutputCacheSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
                &lt;section name="outputCacheSettings" type="System.Web.Configuration.OutputCacheSettingsSection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
                &lt;section name="sqlCacheDependency" type="System.Web.Configuration.SqlCacheDependencySection, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" allowDefinition="MachineToApplication" /&gt;
            &lt;/sectionGroup&gt;
        &lt;/sectionGroup&gt;
        &lt;section name="system.webServer" type="System.Configuration.IgnoreSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
    &lt;/configSections&gt;
    &lt;!--
        &lt;appSettings
            file = "" [String]
            &gt;
            &lt;add
                key = "" [String, Collection Key]
                value = "" [String]
            /&gt;

        &lt;/appSettings&gt;
    --&gt;
    &lt;appSettings file=""&gt;
        &lt;clear /&gt;
    &lt;/appSettings&gt;
    &lt;!--
        &lt;system.diagnostics
            &gt;
            &lt;assert
                assertuienabled = "true" [true|false]
                logfilename = "" [String]
            /&gt;
            &lt;performanceCounters
                filemappingsize = "524288" [number]
            /&gt;
            &lt;trace
                autoflush = "false" [true|false]
                indentsize = "4" [number]
                useGlobalLock = "true" [true|false]
                &gt;
            &lt;/trace&gt;
        &lt;/system.diagnostics&gt;
    --&gt;
    &lt;system.diagnostics&gt;
        &lt;assert assertuienabled="true" logfilename="" /&gt;
        &lt;performanceCounters filemappingsize="524288" /&gt;
        &lt;switches&gt;
            &lt;clear /&gt;
        &lt;/switches&gt;
        &lt;trace autoflush="false" indentsize="4" useGlobalLock="true"&gt;
            &lt;listeners&gt;
                &lt;clear /&gt;
                &lt;add initializeData="" type="System.Diagnostics.DefaultTraceListener" name="Default" traceOutputOptions="None"&gt;
                    &lt;filter type="" initializeData="" /&gt;
                &lt;/add&gt;
            &lt;/listeners&gt;
        &lt;/trace&gt;
    &lt;/system.diagnostics&gt;
    &lt;!--
        &lt;system.windows.forms
            jitDebugging = "false" [true|false]
        /&gt;
    --&gt;
    &lt;system.windows.forms jitDebugging="false" /&gt;
    &lt;!--
        &lt;configProtectedData
            defaultProvider = "RsaProtectedConfigurationProvider" [String]
            &gt;
            &lt;providers&gt;
                &lt;add
                    name = "" [String, Required, Collection Key]
                    type = "" [String, Required]
                /&gt;
            &lt;/providers&gt;

        &lt;/configProtectedData&gt;
    --&gt;
    &lt;configProtectedData defaultProvider="RsaProtectedConfigurationProvider"&gt;
        &lt;providers&gt;
            &lt;clear /&gt;
            &lt;add description="Uses RsaCryptoServiceProvider to encrypt and decrypt" keyContainerName="NetFrameworkConfigurationKey" cspProviderName="" useMachineContainer="true" useOAEP="false" name="RsaProtectedConfigurationProvider" type="System.Configuration.RsaProtectedConfigurationProvider,System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;add description="Uses CryptProtectData and CryptUnProtectData Windows APIs to encrypt and decrypt" useMachineProtection="true" keyEntropy="" name="DataProtectionConfigurationProvider" type="System.Configuration.DpapiProtectedConfigurationProvider,System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
        &lt;/providers&gt;
    &lt;/configProtectedData&gt;
    &lt;!--
        &lt;runtime
        /&gt;
    --&gt;
    &lt;runtime /&gt;
    &lt;!--
        &lt;connectionStrings
            &gt;
            &lt;add
                name = "" [String, Required, Collection Key]
                connectionString = "" [String, Required]
                providerName = "System.Data.SqlClient" [String]
            /&gt;

        &lt;/connectionStrings&gt;
    --&gt;
    &lt;connectionStrings&gt;
        &lt;clear /&gt;
        &lt;add name="LocalSqlServer" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient" /&gt;
    &lt;/connectionStrings&gt;
    &lt;!--
        &lt;system.data
        /&gt;
    --&gt;
    &lt;system.data&gt;
        &lt;DbProviderFactories&gt;
            &lt;add name="Odbc Data Provider" invariant="System.Data.Odbc" description=".Net Framework Data Provider for Odbc" type="System.Data.Odbc.OdbcFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="OleDb Data Provider" invariant="System.Data.OleDb" description=".Net Framework Data Provider for OleDb" type="System.Data.OleDb.OleDbFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="OracleClient Data Provider" invariant="System.Data.OracleClient" description=".Net Framework Data Provider for Oracle" type="System.Data.OracleClient.OracleClientFactory, System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlClient Data Provider" invariant="System.Data.SqlClient" description=".Net Framework Data Provider for SqlServer" type="System.Data.SqlClient.SqlClientFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;/DbProviderFactories&gt;
    &lt;/system.data&gt;
    &lt;system.web&gt;
        &lt;!--
            &lt;deployment
                retail = "false" [true|false]
            /&gt;
        --&gt;
        &lt;deployment retail="false" /&gt;
        &lt;!--
            &lt;processModel
                enable = "true" [true|false]
                timeout = "10675199.02:48:05.4775807" [HH:MM:SS]
                idleTimeout = "10675199.02:48:05.4775807" [HH:MM:SS]
                shutdownTimeout = "00:00:05" [HH:MM:SS]
                requestLimit = "2147483647" [number]
                requestQueueLimit = "5000" [number]
                restartQueueLimit = "10" [number]
                memoryLimit = "60" [number]
                webGarden = "false" [true|false]
                cpuMask = "0xffffffff" [number]
                userName = "machine" [String]
                password = "AutoGenerate" [String]
                logLevel = "Errors" [None | All | Errors]
                clientConnectedCheck = "00:00:05" [HH:MM:SS]
                comAuthenticationLevel = "Connect" [None | Call | Connect | Default | Pkt | PktIntegrity | PktPrivacy]
                comImpersonationLevel = "Impersonate" [Default | Anonymous | Delegate | Identify | Impersonate]
                responseDeadlockInterval = "00:03:00" [HH:MM:SS]
                responseRestartDeadlockInterval = "00:03:00" [HH:MM:SS]
                autoConfig = "false" [true|false]
                maxWorkerThreads = "20" [number]
                maxIoThreads = "20" [number]
                minWorkerThreads = "1" [number]
                minIoThreads = "1" [number]
                serverErrorMessageFile = "" [String]
                pingFrequency = "10675199.02:48:05.4775807" [HH:MM:SS]
                pingTimeout = "10675199.02:48:05.4775807" [HH:MM:SS]
                maxAppDomains = "2000" [number]
            /&gt;
        --&gt;
        &lt;processModel enable="true" timeout="Infinite" idleTimeout="Infinite" shutdownTimeout="00:00:05" requestLimit="Infinite" requestQueueLimit="5000" restartQueueLimit="10" memoryLimit="60" webGarden="false" cpuMask="0xffffffff" userName="machine" password="AutoGenerate" logLevel="Errors" clientConnectedCheck="00:00:05" comAuthenticationLevel="Connect" comImpersonationLevel="Impersonate" responseDeadlockInterval="00:03:00" responseRestartDeadlockInterval="00:03:00" autoConfig="true" maxWorkerThreads="20" maxIoThreads="20" minWorkerThreads="1" minIoThreads="1" serverErrorMessageFile="" pingFrequency="Infinite" pingTimeout="Infinite" maxAppDomains="2000" /&gt;
        &lt;!--
            &lt;membership
                defaultProvider = "AspNetSqlMembershipProvider" [String]
                hashAlgorithmType = "" [String]
                userIsOnlineTimeWindow = "15"  [in Minutes][number]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/membership&gt;
        --&gt;
        &lt;membership defaultProvider="AspNetSqlMembershipProvider" userIsOnlineTimeWindow="15" hashAlgorithmType=""&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add connectionStringName="LocalSqlServer" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="true" applicationName="/" requiresUniqueEmail="false" passwordFormat="Hashed" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="7" minRequiredNonalphanumericCharacters="1" passwordAttemptWindow="10" passwordStrengthRegularExpression="" name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
        &lt;/membership&gt;
        &lt;!--
            &lt;profile
                automaticSaveEnabled = "true" [true|false]
                enabled = "true" [true|false]
                defaultProvider = "AspNetSqlProfileProvider" [String]
                inherits = "" [String]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/profile&gt;
        --&gt;
        &lt;profile enabled="true" defaultProvider="AspNetSqlProfileProvider" inherits="" automaticSaveEnabled="true"&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add connectionStringName="LocalSqlServer" applicationName="/" name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
            &lt;properties&gt;
                &lt;clear /&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;!--
            &lt;roleManager
                enabled = "false" [true|false]
                createPersistentCookie = "false" [true|false]
                cacheRolesInCookie = "false" [true|false]
                cookieName = ".ASPXROLES" [String]
                cookieTimeout = "30"  [in Minutes][number]
                cookiePath = "/" [String]
                cookieRequireSSL = "false" [true|false]
                cookieSlidingExpiration = "true" [true|false]
                cookieProtection = "All" [None | Validation | Encryption | All]
                defaultProvider = "AspNetSqlRoleProvider" [String]
                domain = "" [String]
                maxCachedResults = "25" [number]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/roleManager&gt;
        --&gt;
        &lt;roleManager enabled="false" cacheRolesInCookie="false" cookieName=".ASPXROLES" cookieTimeout="30" cookiePath="/" cookieRequireSSL="false" cookieSlidingExpiration="true" cookieProtection="All" defaultProvider="AspNetSqlRoleProvider" createPersistentCookie="false" maxCachedResults="25"&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add connectionStringName="LocalSqlServer" applicationName="/" name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add applicationName="/" name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
        &lt;/roleManager&gt;
    &lt;/system.web&gt;
    &lt;system.net&gt;
        &lt;!--
            &lt;authenticationModules
                &gt;
                &lt;add
                    type = "" [String, Required, Collection Key]
                /&gt;

            &lt;/authenticationModules&gt;
        --&gt;
        &lt;authenticationModules&gt;
            &lt;clear /&gt;
            &lt;add type="System.Net.NegotiateClient, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add type="System.Net.KerberosClient, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add type="System.Net.NtlmClient, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add type="System.Net.DigestClient, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add type="System.Net.BasicClient, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;/authenticationModules&gt;
        &lt;!--
            &lt;connectionManagement
                &gt;
                &lt;add
                    address = "" [String, Required, Collection Key]
                    maxconnection = "1" [number, Required]
                /&gt;

            &lt;/connectionManagement&gt;
        --&gt;
        &lt;connectionManagement&gt;
            &lt;clear /&gt;
        &lt;/connectionManagement&gt;
        &lt;!--
            &lt;defaultProxy
                enabled = "true" [true|false]
                useDefaultCredentials = "false" [true|false]
                &gt;
                &lt;bypasslist&gt;
                    &lt;add
                        address = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/bypasslist&gt;

                &lt;module
                    type = "" [String]
                /&gt;
                &lt;proxy
                    autoDetect = "Unspecified" [False | True | Unspecified]
                    scriptLocation = "" 
                    bypassonlocal = "Unspecified" [False | True | Unspecified]
                    proxyaddress = "" 
                    usesystemdefault = "Unspecified" [False | True | Unspecified]
                /&gt;
            &lt;/defaultProxy&gt;
        --&gt;
        &lt;defaultProxy enabled="true" useDefaultCredentials="false"&gt;
            &lt;bypasslist&gt;
                &lt;clear /&gt;
            &lt;/bypasslist&gt;
            &lt;proxy autoDetect="Unspecified" bypassonlocal="Unspecified" usesystemdefault="Unspecified" /&gt;
        &lt;/defaultProxy&gt;
        &lt;!--
            &lt;requestCaching
                defaultPolicyLevel = "BypassCache" [Default | BypassCache | CacheOnly | CacheIfAvailable | Revalidate | Reload | NoCacheNoStore]
                disableAllCaching = "false" [true|false]
                isPrivateCache = "true" [true|false]
                unspecifiedMaximumAge = "1.00:00:00" [HH:MM:SS]
                &gt;
                &lt;defaultHttpCachePolicy
                    maximumAge = "10675199.02:48:05.4775807" [HH:MM:SS]
                    maximumStale = "-10675199.02:48:05.4775808" [HH:MM:SS]
                    minimumFresh = "-10675199.02:48:05.4775808" [HH:MM:SS]
                    policyLevel = "Default" [Default | BypassCache | CacheOnly | CacheIfAvailable | Revalidate | Reload | NoCacheNoStore | CacheOrNextCacheOnly | Refresh, Required]
                /&gt;
                &lt;defaultFtpCachePolicy
                    policyLevel = "Default" [Default | BypassCache | CacheOnly | CacheIfAvailable | Revalidate | Reload | NoCacheNoStore]
                /&gt;
            &lt;/requestCaching&gt;
        --&gt;
        &lt;requestCaching disableAllCaching="false" defaultPolicyLevel="BypassCache" isPrivateCache="true" unspecifiedMaximumAge="1.00:00:00"&gt;
            &lt;defaultHttpCachePolicy maximumAge="10675199.02:48:05.4775807" maximumStale="-10675199.02:48:05.4775808" minimumFresh="-10675199.02:48:05.4775808" policyLevel="Default" /&gt;
            &lt;defaultFtpCachePolicy policyLevel="Default" /&gt;
        &lt;/requestCaching&gt;
        &lt;!--
            &lt;settings
                &gt;
                &lt;httpWebRequest
                    maximumUnauthorizedUploadLength = "-1" [number]
                    maximumErrorResponseLength = "64" [number]
                    maximumResponseHeadersLength = "64" [number]
                    useUnsafeHeaderParsing = "false" [true|false]
                /&gt;
                &lt;ipv6
                    enabled = "false" [true|false]
                /&gt;
                &lt;servicePointManager
                    checkCertificateName = "true" [true|false]
                    checkCertificateRevocationList = "false" [true|false]
                    dnsRefreshTimeout = "120000" [number]
                    enableDnsRoundRobin = "false" [true|false]
                    expect100Continue = "true" [true|false]
                    useNagleAlgorithm = "true" [true|false]
                /&gt;
                &lt;socket
                    alwaysUseCompletionPortsForAccept = "false" [true|false]
                    alwaysUseCompletionPortsForConnect = "false" [true|false]
                /&gt;
                &lt;webProxyScript
                    downloadTimeout = "00:02:00" [HH:MM:SS]
                /&gt;
                &lt;performanceCounters
                    enabled = "false" [true|false]
                /&gt;
            &lt;/settings&gt;
        --&gt;
        &lt;settings&gt;
            &lt;httpWebRequest maximumResponseHeadersLength="64" maximumErrorResponseLength="64" maximumUnauthorizedUploadLength="-1" useUnsafeHeaderParsing="false" /&gt;
            &lt;ipv6 enabled="false" /&gt;
            &lt;servicePointManager checkCertificateName="true" checkCertificateRevocationList="false" dnsRefreshTimeout="120000" enableDnsRoundRobin="false" expect100Continue="true" useNagleAlgorithm="true" /&gt;
            &lt;socket alwaysUseCompletionPortsForAccept="false" alwaysUseCompletionPortsForConnect="false" /&gt;
            &lt;webProxyScript downloadTimeout="00:01:00" /&gt;
            &lt;performanceCounters enabled="false" /&gt;
        &lt;/settings&gt;
        &lt;!--
            &lt;webRequestModules
                &gt;
                &lt;add
                    prefix = "" [String, Required, Collection Key]
                    type = "" 
                /&gt;

            &lt;/webRequestModules&gt;
        --&gt;
        &lt;webRequestModules&gt;
            &lt;clear /&gt;
            &lt;add prefix="https:" type="System.Net.HttpRequestCreator, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add prefix="http:" type="System.Net.HttpRequestCreator, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add prefix="file:" type="System.Net.FileWebRequestCreator, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add prefix="ftp:" type="System.Net.FtpWebRequestCreator, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;/webRequestModules&gt;
        &lt;mailSettings&gt;
            &lt;!--
                &lt;smtp
                    deliveryMethod = "Network" [Network | SpecifiedPickupDirectory | PickupDirectoryFromIis]
                    from = "" [String]
                    &gt;
                    &lt;network
                        defaultCredentials = "false" [true|false]
                        host = "" [String]
                        password = "" [String]
                        port = "25" [number]
                        userName = "" [String]
                    /&gt;
                    &lt;specifiedPickupDirectory
                        pickupDirectoryLocation = "" [String]
                    /&gt;
                &lt;/smtp&gt;
            --&gt;
            &lt;smtp deliveryMethod="Network"&gt;
                &lt;network defaultCredentials="false" port="25" /&gt;
            &lt;/smtp&gt;
        &lt;/mailSettings&gt;
    &lt;/system.net&gt;
    &lt;system.transactions&gt;
        &lt;!--
            &lt;defaultSettings
                distributedTransactionManagerName = "" [String]
                timeout = "00:01:00" [HH:MM:SS]
            /&gt;
        --&gt;
        &lt;defaultSettings distributedTransactionManagerName="" timeout="00:01:00" /&gt;
        &lt;!--
            &lt;machineSettings
                maxTimeout = "00:10:00" [HH:MM:SS]
            /&gt;
        --&gt;
        &lt;machineSettings maxTimeout="00:10:00" /&gt;
    &lt;/system.transactions&gt;
    &lt;system.xml.serialization&gt;
        &lt;!--
            &lt;dateTimeSerialization
                mode = "Roundtrip" [Default | Roundtrip | Local]
            /&gt;
        --&gt;
        &lt;dateTimeSerialization mode="Roundtrip" /&gt;
        &lt;!--
            &lt;schemaImporterExtensions
                &gt;
                &lt;add
                    name = "" [String, Required, Collection Key]
                    type = "" [Required]
                /&gt;

            &lt;/schemaImporterExtensions&gt;
        --&gt;
        &lt;schemaImporterExtensions&gt;
            &lt;clear /&gt;
            &lt;add name="SqlTypesSchemaImporterChar" type="System.Data.SqlTypes.TypeCharSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterNChar" type="System.Data.SqlTypes.TypeNCharSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterVarChar" type="System.Data.SqlTypes.TypeVarCharSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterNVarChar" type="System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterText" type="System.Data.SqlTypes.TypeTextSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterNText" type="System.Data.SqlTypes.TypeNTextSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterVarBinary" type="System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterBinary" type="System.Data.SqlTypes.TypeBinarySchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterImage" type="System.Data.SqlTypes.TypeVarImageSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterDecimal" type="System.Data.SqlTypes.TypeDecimalSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterNumeric" type="System.Data.SqlTypes.TypeNumericSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterBigInt" type="System.Data.SqlTypes.TypeBigIntSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterInt" type="System.Data.SqlTypes.TypeIntSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterSmallInt" type="System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterTinyInt" type="System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterBit" type="System.Data.SqlTypes.TypeBitSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterFloat" type="System.Data.SqlTypes.TypeFloatSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterReal" type="System.Data.SqlTypes.TypeRealSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterDateTime" type="System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterSmallDateTime" type="System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterMoney" type="System.Data.SqlTypes.TypeMoneySchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterSmallMoney" type="System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;add name="SqlTypesSchemaImporterUniqueIdentifier" type="System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
        &lt;/schemaImporterExtensions&gt;
        &lt;!--
            &lt;xmlSerializer
                checkDeserializeAdvances = "false" [true|false]
                tempFilesLocation = "" [String]
            /&gt;
        --&gt;
        &lt;xmlSerializer checkDeserializeAdvances="false" /&gt;
    &lt;/system.xml.serialization&gt;
    &lt;system.codedom&gt;
        &lt;!-- 
            &lt;compiler 
               language = "[string]" - semicolon separated list of friendly names.  Notice these have to be unique   across all compilers in this section.  They are case insensitive.
               extensions = "[string]" - semicolon separated list of source file extensions (should include the '.'). Notice these have to be unique   across all compilers in this section.  They are case insensitive.
               type = "[Fully qualified type Name]"
               warningLevel = "[integer]" - warning level to pass to the compilers.
               compilerOptions = "[string]" - options to pass to the compilers.
            /&gt;
        --&gt;
        &lt;compilers&gt;
            &lt;compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.VisualBasic.VBCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            &lt;compiler language="js;jscript;javascript" extension=".js" type="Microsoft.JScript.JScriptCodeProvider, Microsoft.JScript, Version=8.0.1100.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;compiler language="vj#;vjs;vjsharp" extension=".jsl;.java" type="Microsoft.VJSharp.VJSharpCodeProvider, VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;compiler language="c++;mc;cpp" extension=".h" type="Microsoft.VisualC.CppCodeProvider, CppCodeProvider, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
        &lt;/compilers&gt;
    &lt;/system.codedom&gt;
&lt;/configuration&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MaintenancePlan</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ola_hallengren__USAGE_Server_Integrity</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MaintenancePlan</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ola_hallengren__USAGE_Server_Integrity</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Examples
A. Check the integrity of all user databases

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKDB'
B. Check the physical integrity of all user databases

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKDB',
@PhysicalOnly = 'Y'
C. Check the integrity of all user databases, using the option not to check nonclustered indexes

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKDB',
@NoIndex = 'Y'
D. Check the integrity of all user databases, using the option to perform extended logical checks

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKDB',
@ExtendedLogicalChecks = 'Y'
E. Check the integrity of the filegroup PRIMARY in the database AdventureWorks

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'AdventureWorks',
@CheckCommands = 'CHECKFILEGROUP',
@FileGroups = 'AdventureWorks.PRIMARY'
F. Check the integrity of all filegroups except the filegroup PRIMARY in the database AdventureWorks

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKFILEGROUP',
@FileGroups = 'ALL_FILEGROUPS, -AdventureWorks.PRIMARY'
G. Check the integrity of the table Production.Product in the database AdventureWorks

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'AdventureWorks',
@CheckCommands = 'CHECKTABLE',
@Objects = 'AdventureWorks.Production.Product'
H. Check the integrity of all tables except the table Production.Product in the database AdventureWorks

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKTABLE',
@Objects = 'ALL_OBJECTS, -AdventureWorks.Production.Product'
I. Check the disk-space allocation structures of all user databases

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKALLOC'
J. Check the catalog consistency of all user databases

EXECUTE dbo.DatabaseIntegrityCheck
@Databases = 'USER_DATABASES',
@CheckCommands = 'CHECKCATALOG'
Execution

Execute the stored procedures from SQL Server Agent CmdExec jobs, using sqlcmd and the -b option. Pass the parameters to the stored procedures by name:

sqlcmd -E -S $(ESCAPE_SQUOTE(SRVR)) -d master -Q "EXECUTE dbo.DatabaseIntegrityCheck @Databases = 'USER_DATABASES'" -b

Use SQL Server Agent output files to ensure that you always have a full set of information, in case of an error.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MaintenancePlan</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ola_hallengren_MaintenanceSolution.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MaintenancePlan</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ola_hallengren_MaintenanceSolution.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/*
--http://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html
SQL Server Maintenance Solution - SQL Server 2005, SQL Server 2008, SQL Server 2008 R2, and SQL Server 2012

Backup: http://ola.hallengren.com/sql-server-backup.html
Integrity Check: http://ola.hallengren.com/sql-server-integrity-check.html
Index and Statistics Maintenance: http://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html

The solution is free: http://ola.hallengren.com/license.html

You can contact me by e-mail at ola@hallengren.com.

Last updated 23 February, 2014.

Ola Hallengren
http://ola.hallengren.com

*/

USE [master] -- Specify the database in which the objects will be created.

SET NOCOUNT ON

DECLARE @CreateJobs nvarchar(max)
DECLARE @BackupDirectory nvarchar(max)
DECLARE @OutputFileDirectory nvarchar(max)
DECLARE @LogToTable nvarchar(max)
DECLARE @Version numeric(18,10)
DECLARE @Error int

SET @CreateJobs          = 'Y'          -- Specify whether jobs should be created.
SET @BackupDirectory     = N'C:\Backup' -- Specify the backup root directory.
SET @OutputFileDirectory = NULL         -- Specify the output file directory. If no directory is specified, then the SQL Server error log directory is used.
SET @LogToTable          = 'Y'          -- Log commands to a table.

SET @Error = 0

SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

IF IS_SRVROLEMEMBER('sysadmin') = 0
BEGIN
  RAISERROR('You need to be a member of the SysAdmin server role to install the solution.',16,1)
  SET @Error = @@ERROR
END

IF OBJECT_ID('tempdb..#Config') IS NOT NULL DROP TABLE #Config

CREATE TABLE #Config ([Name] nvarchar(max),
                      [Value] nvarchar(max))

IF @CreateJobs = 'Y' AND @OutputFileDirectory IS NULL AND SERVERPROPERTY('EngineEdition') &lt;&gt; 4
BEGIN
  IF @Version &gt;= 11
  BEGIN
    SELECT @OutputFileDirectory = [path]
    FROM sys.dm_os_server_diagnostics_log_configurations
  END
  ELSE
  BEGIN
    SELECT @OutputFileDirectory = LEFT(CAST(SERVERPROPERTY('ErrorLogFileName') AS nvarchar(max)),LEN(CAST(SERVERPROPERTY('ErrorLogFileName') AS nvarchar(max))) - CHARINDEX('\',REVERSE(CAST(SERVERPROPERTY('ErrorLogFileName') AS nvarchar(max)))))
  END
END

IF @CreateJobs = 'Y' AND RIGHT(@OutputFileDirectory,1) = '\' AND SERVERPROPERTY('EngineEdition') &lt;&gt; 4
BEGIN
  SET @OutputFileDirectory = LEFT(@OutputFileDirectory, LEN(@OutputFileDirectory) - 1)
END

INSERT INTO #Config ([Name], [Value])
VALUES('CreateJobs', @CreateJobs)

INSERT INTO #Config ([Name], [Value])
VALUES('BackupDirectory', @BackupDirectory)

INSERT INTO #Config ([Name], [Value])
VALUES('OutputFileDirectory', @OutputFileDirectory)

INSERT INTO #Config ([Name], [Value])
VALUES('LogToTable', @LogToTable)

INSERT INTO #Config ([Name], [Value])
VALUES('DatabaseName', DB_NAME(DB_ID()))

INSERT INTO #Config ([Name], [Value])
VALUES('Error', CAST(@Error AS nvarchar))

IF OBJECT_ID('[dbo].[DatabaseBackup]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseBackup]
IF OBJECT_ID('[dbo].[DatabaseIntegrityCheck]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseIntegrityCheck]
IF OBJECT_ID('[dbo].[IndexOptimize]') IS NOT NULL DROP PROCEDURE [dbo].[IndexOptimize]
IF OBJECT_ID('[dbo].[CommandExecute]') IS NOT NULL DROP PROCEDURE [dbo].[CommandExecute]

IF OBJECT_ID('[dbo].[CommandLog]') IS NULL AND OBJECT_ID('[dbo].[PK_CommandLog]') IS NULL
BEGIN
CREATE TABLE [dbo].[CommandLog](
[ID] int IDENTITY(1,1) NOT NULL CONSTRAINT [PK_CommandLog] PRIMARY KEY CLUSTERED,
[DatabaseName] sysname NULL,
[SchemaName] sysname NULL,
[ObjectName] sysname NULL,
[ObjectType] char(2) NULL,
[IndexName] sysname NULL,
[IndexType] tinyint NULL,
[StatisticsName] sysname NULL,
[PartitionNumber] int NULL,
[ExtendedInfo] xml NULL,
[Command] nvarchar(max) NOT NULL,
[CommandType] nvarchar(60) NOT NULL,
[StartTime] datetime NOT NULL,
[EndTime] datetime NULL,
[ErrorNumber] int NULL,
[ErrorMessage] nvarchar(max) NULL
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CommandExecute]

@Command nvarchar(max),
@CommandType nvarchar(max),
@Mode int,
@Comment nvarchar(max) = NULL,
@DatabaseName nvarchar(max) = NULL,
@SchemaName nvarchar(max) = NULL,
@ObjectName nvarchar(max) = NULL,
@ObjectType nvarchar(max) = NULL,
@IndexName nvarchar(max) = NULL,
@IndexType int = NULL,
@StatisticsName nvarchar(max) = NULL,
@PartitionNumber int = NULL,
@ExtendedInfo xml = NULL,
@LogToTable nvarchar(max),
@Execute nvarchar(max)

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)
  DECLARE @ErrorMessageOriginal nvarchar(max)

  DECLARE @StartTime datetime
  DECLARE @EndTime datetime

  DECLARE @StartTimeSec datetime
  DECLARE @EndTimeSec datetime

  DECLARE @ID int

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO ReturnCode
  END

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF @Command IS NULL OR @Command = ''
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Command is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CommandType IS NULL OR @CommandType = '' OR LEN(@CommandType) &gt; 60
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CommandType is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Mode NOT IN(1,2) OR @Mode IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Mode is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO ReturnCode
  END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartTime = GETDATE()
  SET @StartTimeSec = CONVERT(datetime,CONVERT(nvarchar,@StartTime,120),120)

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTimeSec,120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Command: ' + @Command
  IF @Comment IS NOT NULL SET @StartMessage = @StartMessage + CHAR(13) + CHAR(10) + 'Comment: ' + @Comment
  SET @StartMessage = REPLACE(@StartMessage,'%','%%')
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  IF @LogToTable = 'Y'
  BEGIN
    INSERT INTO dbo.CommandLog (DatabaseName, SchemaName, ObjectName, ObjectType, IndexName, IndexType, StatisticsName, PartitionNumber, ExtendedInfo, CommandType, Command, StartTime)
    VALUES (@DatabaseName, @SchemaName, @ObjectName, @ObjectType, @IndexName, @IndexType, @StatisticsName, @PartitionNumber, @ExtendedInfo, @CommandType, @Command, @StartTime)
  END

  SET @ID = SCOPE_IDENTITY()

  ----------------------------------------------------------------------------------------------------
  --// Execute command                                                                            //--
  ----------------------------------------------------------------------------------------------------

  IF @Mode = 1 AND @Execute = 'Y'
  BEGIN
    EXECUTE(@Command)
    SET @Error = @@ERROR
    SET @ReturnCode = @Error
  END

  IF @Mode = 2 AND @Execute = 'Y'
  BEGIN
    BEGIN TRY
      EXECUTE(@Command)
    END TRY
    BEGIN CATCH
      SET @Error = ERROR_NUMBER()
      SET @ReturnCode = @Error
      SET @ErrorMessageOriginal = ERROR_MESSAGE()
      SET @ErrorMessage = 'Msg ' + CAST(@Error AS nvarchar) + ', ' + ISNULL(@ErrorMessageOriginal,'')
      RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    END CATCH
  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  SET @EndTime = GETDATE()
  SET @EndTimeSec = CONVERT(datetime,CONVERT(varchar,@EndTime,120),120)

  SET @EndMessage = 'Outcome: ' + CASE WHEN @Execute = 'N' THEN 'Not Executed' WHEN @Error = 0 THEN 'Succeeded' ELSE 'Failed' END + CHAR(13) + CHAR(10)
  SET @EndMessage = @EndMessage + 'Duration: ' + CASE WHEN DATEDIFF(ss,@StartTimeSec, @EndTimeSec)/(24*3600) &gt; 0 THEN CAST(DATEDIFF(ss,@StartTimeSec, @EndTimeSec)/(24*3600) AS nvarchar) + '.' ELSE '' END + CONVERT(nvarchar,@EndTimeSec - @StartTimeSec,108) + CHAR(13) + CHAR(10)
  SET @EndMessage = @EndMessage + 'Date and time: ' + CONVERT(nvarchar,@EndTimeSec,120) + CHAR(13) + CHAR(10) + ' '
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @LogToTable = 'Y'
  BEGIN
    UPDATE dbo.CommandLog
    SET EndTime = @EndTime,
        ErrorNumber = CASE WHEN @Execute = 'N' THEN NULL ELSE @Error END,
        ErrorMessage = @ErrorMessageOriginal
    WHERE ID = @ID
  END

  ReturnCode:
  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DatabaseBackup]

@Databases nvarchar(max),
@Directory nvarchar(max) = NULL,
@BackupType nvarchar(max),
@Verify nvarchar(max) = 'N',
@CleanupTime int = NULL,
@Compress nvarchar(max) = NULL,
@CopyOnly nvarchar(max) = 'N',
@ChangeBackupType nvarchar(max) = 'N',
@BackupSoftware nvarchar(max) = NULL,
@CheckSum nvarchar(max) = 'N',
@BlockSize int = NULL,
@BufferCount int = NULL,
@MaxTransferSize int = NULL,
@NumberOfFiles int = NULL,
@CompressionLevel int = NULL,
@Description nvarchar(max) = NULL,
@Threads int = NULL,
@Throttle int = NULL,
@Encrypt nvarchar(max) = 'N',
@EncryptionAlgorithm nvarchar(max) = NULL,
@EncryptionKey nvarchar(max) = NULL,
@ReadWriteFileGroups nvarchar(max) = 'N',
@OverrideBackupPreference nvarchar(max) = 'N',
@LogToTable nvarchar(max) = 'N',
@Execute nvarchar(max) = 'Y'

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @DatabaseMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)

  DECLARE @Version numeric(18,10)
  DECLARE @AmazonRDS bit

  DECLARE @Cluster nvarchar(max)

  DECLARE @DefaultDirectory nvarchar(4000)

  DECLARE @CurrentRootDirectoryID int
  DECLARE @CurrentRootDirectoryPath nvarchar(4000)

  DECLARE @CurrentDBID int
  DECLARE @CurrentDatabaseID int
  DECLARE @CurrentDatabaseName nvarchar(max)
  DECLARE @CurrentBackupType nvarchar(max)
  DECLARE @CurrentFileExtension nvarchar(max)
  DECLARE @CurrentFileNumber int
  DECLARE @CurrentDifferentialBaseLSN numeric(25,0)
  DECLARE @CurrentDifferentialBaseIsSnapshot bit
  DECLARE @CurrentLogLSN numeric(25,0)
  DECLARE @CurrentLatestBackup datetime
  DECLARE @CurrentDatabaseNameFS nvarchar(max)
  DECLARE @CurrentDirectoryID int
  DECLARE @CurrentDirectoryPath nvarchar(max)
  DECLARE @CurrentFilePath nvarchar(max)
  DECLARE @CurrentDate datetime
  DECLARE @CurrentCleanupDate datetime
  DECLARE @CurrentIsDatabaseAccessible bit
  DECLARE @CurrentAvailabilityGroup nvarchar(max)
  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)
  DECLARE @CurrentAvailabilityGroupBackupPreference nvarchar(max)
  DECLARE @CurrentIsPreferredBackupReplica bit
  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)
  DECLARE @CurrentLogShippingRole nvarchar(max)

  DECLARE @CurrentCommand01 nvarchar(max)
  DECLARE @CurrentCommand02 nvarchar(max)
  DECLARE @CurrentCommand03 nvarchar(max)
  DECLARE @CurrentCommand04 nvarchar(max)

  DECLARE @CurrentCommandOutput01 int
  DECLARE @CurrentCommandOutput02 int
  DECLARE @CurrentCommandOutput03 int
  DECLARE @CurrentCommandOutput04 int

  DECLARE @CurrentCommandType01 nvarchar(max)
  DECLARE @CurrentCommandType02 nvarchar(max)
  DECLARE @CurrentCommandType03 nvarchar(max)
  DECLARE @CurrentCommandType04 nvarchar(max)

  DECLARE @Directories TABLE (ID int PRIMARY KEY,
                              DirectoryPath nvarchar(max),
                              Completed bit)

  DECLARE @DirectoryInfo TABLE (FileExists bit,
                                FileIsADirectory bit,
                                ParentDirectoryExists bit)

  DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseNameFS nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))

  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)

  DECLARE @CurrentDirectories TABLE (ID int PRIMARY KEY,
                                     DirectoryPath nvarchar(max),
                                     CreateCompleted bit,
                                     CleanupCompleted bit,
                                     CreateOutput int,
                                     CleanupOutput int)

  DECLARE @CurrentFiles TABLE (CurrentFilePath nvarchar(max))

  DECLARE @CurrentCleanupDates TABLE (CleanupDate datetime)

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  SET @AmazonRDS = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (SELECT QUOTENAME(schemas.name) FROM sys.schemas schemas INNER JOIN sys.objects objects ON schemas.[schema_id] = objects.[schema_id] WHERE [object_id] = @@PROCID) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Directory = ' + ISNULL('''' + REPLACE(@Directory,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @BackupType = ' + ISNULL('''' + REPLACE(@BackupType,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Verify = ' + ISNULL('''' + REPLACE(@Verify,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CleanupTime = ' + ISNULL(CAST(@CleanupTime AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Compress = ' + ISNULL('''' + REPLACE(@Compress,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CopyOnly = ' + ISNULL('''' + REPLACE(@CopyOnly,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @ChangeBackupType = ' + ISNULL('''' + REPLACE(@ChangeBackupType,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @BackupSoftware = ' + ISNULL('''' + REPLACE(@BackupSoftware,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CheckSum = ' + ISNULL('''' + REPLACE(@CheckSum,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @BlockSize = ' + ISNULL(CAST(@BlockSize AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @BufferCount = ' + ISNULL(CAST(@BufferCount AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @MaxTransferSize = ' + ISNULL(CAST(@MaxTransferSize AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @NumberOfFiles = ' + ISNULL(CAST(@NumberOfFiles AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @CompressionLevel = ' + ISNULL(CAST(@CompressionLevel AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Description = ' + ISNULL('''' + REPLACE(@Description,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Threads = ' + ISNULL(CAST(@Threads AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Throttle = ' + ISNULL(CAST(@Throttle AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Encrypt = ' + ISNULL('''' + REPLACE(@Encrypt,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @EncryptionAlgorithm = ' + ISNULL('''' + REPLACE(@EncryptionAlgorithm,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @EncryptionKey = ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @ReadWriteFileGroups = ' + ISNULL('''' + REPLACE(@ReadWriteFileGroups,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @OverrideBackupPreference = ' + ISNULL('''' + REPLACE(@OverrideBackupPreference,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL') + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Source: http://ola.hallengren.com' + CHAR(13) + CHAR(10)
  SET @StartMessage = REPLACE(@StartMessage,'%','%%') + ' '
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute is missing. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND (OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@LogToTable%' OR OBJECT_DEFINITION(objects.[object_id]) LIKE '%LOCK_TIMEOUT%'))
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute needs to be updated. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @AmazonRDS = 1
  BEGIN
    SET @ErrorMessage = 'The stored procedure DatabaseBackup is not supported on Amazon RDS.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Select databases                                                                           //--
  ----------------------------------------------------------------------------------------------------

  SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition &lt; LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)

  INSERT INTO @tmpDatabases (DatabaseName, DatabaseNameFS, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([name],'\',''),'/',''),':',''),'*',''),'?',''),'"',''),'&lt;',''),'&gt;',''),'|',''),' ','') AS DatabaseNameFS,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] &lt;&gt; 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Check database names                                                                       //--
  ----------------------------------------------------------------------------------------------------

  SET @ErrorMessage = ''
  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '
  FROM @tmpDatabases
  WHERE Selected = 1
  AND DatabaseNameFS = ''
  ORDER BY DatabaseName ASC
  IF @@ROWCOUNT &gt; 0
  BEGIN
    SET @ErrorMessage = 'The names of the following databases are not supported: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  SET @ErrorMessage = ''
  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '
  FROM @tmpDatabases
  WHERE UPPER(DatabaseNameFS) IN(SELECT UPPER(DatabaseNameFS) FROM @tmpDatabases GROUP BY UPPER(DatabaseNameFS) HAVING COUNT(*) &gt; 1)
  AND UPPER(DatabaseNameFS) IN(SELECT UPPER(DatabaseNameFS) FROM @tmpDatabases WHERE Selected = 1)
  AND DatabaseNameFS &lt;&gt; ''
  ORDER BY DatabaseName ASC
  OPTION (RECOMPILE)
  IF @@ROWCOUNT &gt; 0
  BEGIN
    SET @ErrorMessage = 'The names of the following databases are not unique in the file system: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Select directories                                                                         //--
  ----------------------------------------------------------------------------------------------------

  IF @Directory IS NULL
  BEGIN
    EXECUTE [master].dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\Microsoft\MSSQLServer\MSSQLServer', N'BackupDirectory', @DefaultDirectory OUTPUT

    INSERT INTO @Directories (ID, DirectoryPath, Completed)
    SELECT 1, @DefaultDirectory, 0
  END
  ELSE
  BEGIN
    SET @Directory = REPLACE(@Directory, ', ', ',');

    WITH Directories (StartPosition, EndPosition, Directory) AS
    (
    SELECT 1 AS StartPosition,
           ISNULL(NULLIF(CHARINDEX(',', @Directory, 1), 0), LEN(@Directory) + 1) AS EndPosition,
           SUBSTRING(@Directory, 1, ISNULL(NULLIF(CHARINDEX(',', @Directory, 1), 0), LEN(@Directory) + 1) - 1) AS Directory
    WHERE @Directory IS NOT NULL
    UNION ALL
    SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
           ISNULL(NULLIF(CHARINDEX(',', @Directory, EndPosition + 1), 0), LEN(@Directory) + 1) AS EndPosition,
           SUBSTRING(@Directory, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Directory, EndPosition + 1), 0), LEN(@Directory) + 1) - EndPosition - 1) AS Directory
    FROM Directories
    WHERE EndPosition &lt; LEN(@Directory) + 1
    )
    INSERT INTO @Directories (ID, DirectoryPath, Completed)
    SELECT ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS ID,
           Directory,
           0
    FROM Directories
    OPTION (MAXRECURSION 0)
  END

  ----------------------------------------------------------------------------------------------------
  --// Check directories                                                                          //--
  ----------------------------------------------------------------------------------------------------

  IF EXISTS(SELECT * FROM @Directories WHERE NOT (DirectoryPath LIKE '_:' OR DirectoryPath LIKE '_:\%' OR DirectoryPath LIKE '\\%\%') OR DirectoryPath IS NULL OR LEFT(DirectoryPath,1) = ' ' OR RIGHT(DirectoryPath,1) = ' ') OR EXISTS (SELECT * FROM @Directories GROUP BY DirectoryPath HAVING COUNT(*) &lt;&gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Directory is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END
  ELSE
  BEGIN
    WHILE EXISTS(SELECT * FROM @Directories WHERE Completed = 0)
    BEGIN
      SELECT TOP 1 @CurrentRootDirectoryID = ID,
                   @CurrentRootDirectoryPath = DirectoryPath
      FROM @Directories
      WHERE Completed = 0
      ORDER BY ID ASC

      INSERT INTO @DirectoryInfo (FileExists, FileIsADirectory, ParentDirectoryExists)
      EXECUTE [master].dbo.xp_fileexist @CurrentRootDirectoryPath

      IF NOT EXISTS (SELECT * FROM @DirectoryInfo WHERE FileExists = 0 AND FileIsADirectory = 1 AND ParentDirectoryExists = 1)
      BEGIN
        SET @ErrorMessage = 'The directory ' + @CurrentRootDirectoryPath + ' does not exist.' + CHAR(13) + CHAR(10) + ' '
        RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
        SET @Error = @@ERROR
      END

      UPDATE @Directories
      SET Completed = 1
      WHERE ID = @CurrentRootDirectoryID

      SET @CurrentRootDirectoryID = NULL
      SET @CurrentRootDirectoryPath = NULL

      DELETE FROM @DirectoryInfo
    END
  END

  ----------------------------------------------------------------------------------------------------
  --// Get default compression                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF @Compress IS NULL
  BEGIN
    SELECT @Compress = CASE
    WHEN @BackupSoftware IS NULL AND EXISTS(SELECT * FROM sys.configurations WHERE name = 'backup compression default' AND value_in_use = 1) THEN 'Y'
    WHEN @BackupSoftware IS NULL AND NOT EXISTS(SELECT * FROM sys.configurations WHERE name = 'backup compression default' AND value_in_use = 1) THEN 'N'
    WHEN @BackupSoftware IS NOT NULL AND (@CompressionLevel IS NULL OR @CompressionLevel &gt; 0)  THEN 'Y'
    WHEN @BackupSoftware IS NOT NULL AND @CompressionLevel = 0  THEN 'N'
    END
  END

  ----------------------------------------------------------------------------------------------------
  --// Get number of files                                                                        //--
  ----------------------------------------------------------------------------------------------------

  IF @NumberOfFiles IS NULL
  BEGIN
    SELECT @NumberOfFiles = (SELECT COUNT(*) FROM @Directories)
  END

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF @BackupType NOT IN ('FULL','DIFF','LOG') OR @BackupType IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BackupType is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Verify NOT IN ('Y','N') OR @Verify IS NULL OR (@BackupSoftware = 'SQLSAFE' AND @Encrypt = 'Y' AND @Verify = 'Y')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Verify is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CleanupTime &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CleanupTime is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Compress NOT IN ('Y','N') OR @Compress IS NULL OR (@Compress = 'Y' AND @BackupSoftware IS NULL AND NOT ((@Version &gt;= 10 AND @Version &lt; 10.5 AND SERVERPROPERTY('EngineEdition') = 3) OR (@Version &gt;= 10.5 AND (SERVERPROPERTY('EngineEdition') = 3 OR SERVERPROPERTY('EditionID') IN (-1534726760, 284895786))))) OR (@Compress = 'N' AND @BackupSoftware IS NOT NULL AND (@CompressionLevel IS NULL OR @CompressionLevel &gt;= 1)) OR (@Compress = 'Y' AND @BackupSoftware IS NOT NULL AND @CompressionLevel = 0)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Compress is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CopyOnly NOT IN ('Y','N') OR @CopyOnly IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CopyOnly is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @ChangeBackupType NOT IN ('Y','N') OR @ChangeBackupType IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @ChangeBackupType is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware NOT IN ('LITESPEED','SQLBACKUP','SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BackupSoftware is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware = 'LITESPEED' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'xp_backup_database')
  BEGIN
    SET @ErrorMessage = 'NetVault LiteSpeed for SQL Server is not installed. Download http://www.quest.com/litespeed-for-sql-server/.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware = 'SQLBACKUP' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'sqlbackup')
  BEGIN
    SET @ErrorMessage = 'Red Gate SQL Backup is not installed. Download http://www.red-gate.com/products/dba/sql-backup/.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware = 'SQLSAFE' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'xp_ss_backup')
  BEGIN
    SET @ErrorMessage = 'Idera SQL safe backup is not installed. Download http://www.idera.com/Products/SQL-Server/SQL-safe-backup/.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CheckSum NOT IN ('Y','N') OR @CheckSum IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CheckSum is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BlockSize NOT IN (512,1024,2048,4096,8192,16384,32768,65536) OR (@BlockSize IS NOT NULL AND @BackupSoftware = 'SQLBACKUP') OR (@BlockSize IS NOT NULL AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BlockSize is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BufferCount &lt;= 0 OR @BufferCount &gt; 2147483647 OR (@BufferCount IS NOT NULL AND @BackupSoftware = 'SQLBACKUP') OR (@BufferCount IS NOT NULL AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BufferCount is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @MaxTransferSize &lt; 65536 OR @MaxTransferSize &gt; 4194304 OR @MaxTransferSize % 65536 &gt; 0 OR (@MaxTransferSize &gt; 1048576 AND @BackupSoftware = 'SQLBACKUP') OR (@MaxTransferSize IS NOT NULL AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @MaxTransferSize is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @NumberOfFiles &lt; 1 OR @NumberOfFiles &gt; 64 OR (@NumberOfFiles &gt; 32 AND @BackupSoftware = 'SQLBACKUP') OR @NumberOfFiles IS NULL OR @NumberOfFiles &lt; (SELECT COUNT(*) FROM @Directories) OR @NumberOfFiles % (SELECT COUNT(*) FROM @Directories) &gt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @NumberOfFiles is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF (@BackupSoftware IS NULL AND @CompressionLevel IS NOT NULL) OR (@BackupSoftware = 'LITESPEED' AND (@CompressionLevel &lt; 0 OR @CompressionLevel &gt; 8)) OR (@BackupSoftware = 'SQLBACKUP' AND (@CompressionLevel &lt; 0 OR @CompressionLevel &gt; 4)) OR (@BackupSoftware = 'SQLSAFE' AND (@CompressionLevel &lt; 1 OR @CompressionLevel &gt; 4))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CompressionLevel is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF LEN(@Description) &gt; 255 OR (@BackupSoftware = 'LITESPEED' AND LEN(@Description) &gt; 128)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Description is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Threads IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED','SQLBACKUP','SQLSAFE') OR @BackupSoftware IS NULL) OR @Threads &lt; 2 OR @Threads &gt; 32
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Threads is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Throttle IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED') OR @BackupSoftware IS NULL) OR @Throttle &lt; 1 OR @Throttle &gt; 100
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Throttle is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Encrypt NOT IN('Y','N') OR @Encrypt IS NULL OR (@Encrypt = 'Y' AND @BackupSoftware IS NULL)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Encrypt is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF (@EncryptionAlgorithm IS NOT NULL AND @BackupSoftware IS NULL) OR (@EncryptionAlgorithm IS NOT NULL AND @Encrypt = 'N') OR ((@EncryptionAlgorithm NOT IN('RC2_40','RC2_56','RC2_112','RC2_128','3DES_168','RC4_128','AES_128','AES_192','AES_256') OR @EncryptionAlgorithm IS NULL) AND @Encrypt = 'Y' AND @BackupSoftware = 'LITESPEED') OR ((@EncryptionAlgorithm NOT IN('AES_128','AES_256') OR @EncryptionAlgorithm IS NULL) AND @Encrypt = 'Y' AND @BackupSoftware = 'SQLBACKUP') OR ((@EncryptionAlgorithm NOT IN('AES_128','AES_256') OR @EncryptionAlgorithm IS NULL) AND @Encrypt = 'Y' AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @EncryptionAlgorithm is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF (@EncryptionKey IS NOT NULL AND @BackupSoftware IS NULL) OR (@EncryptionKey IS NOT NULL AND @Encrypt = 'N') OR (@EncryptionKey IS NULL AND @Encrypt = 'Y' AND @BackupSoftware IN('LITESPEED','SQLBACKUP','SQLSAFE'))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @EncryptionKey is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @ReadWriteFileGroups NOT IN('Y','N') OR @ReadWriteFileGroups IS NULL OR (@ReadWriteFileGroups = 'Y' AND @BackupType = 'LOG')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @ReadWriteFileGroups is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @OverrideBackupPreference NOT IN('Y','N') OR @OverrideBackupPreference IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @OverrideBackupPreference is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ErrorMessage = 'The documentation is available at http://ola.hallengren.com/sql-server-backup.html.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Check Availability Group cluster name                                                      //--
  ----------------------------------------------------------------------------------------------------

  IF @Version &gt;= 11
  BEGIN
    SELECT @Cluster = cluster_name
    FROM sys.dm_hadr_cluster
  END

  ----------------------------------------------------------------------------------------------------
  --// Execute backup commands                                                                    //--
  ----------------------------------------------------------------------------------------------------

  WHILE EXISTS (SELECT * FROM @tmpDatabases WHERE Selected = 1 AND Completed = 0)
  BEGIN

    SELECT TOP 1 @CurrentDBID = ID,
                 @CurrentDatabaseName = DatabaseName,
                 @CurrentDatabaseNameFS = DatabaseNameFS
    FROM @tmpDatabases
    WHERE Selected = 1
    AND Completed = 0
    ORDER BY ID ASC

    SET @CurrentDatabaseID = DB_ID(@CurrentDatabaseName)

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = @CurrentDatabaseID AND database_guid IS NOT NULL)
      BEGIN
        SET @CurrentIsDatabaseAccessible = 1
      END
      ELSE
      BEGIN
        SET @CurrentIsDatabaseAccessible = 0
      END
    END
    ELSE
    BEGIN
      SET @CurrentIsDatabaseAccessible = 0
    END

    SELECT @CurrentDifferentialBaseLSN = differential_base_lsn
    FROM sys.master_files
    WHERE database_id = @CurrentDatabaseID
    AND [type] = 0
    AND [file_id] = 1

    -- Workaround for a bug in SQL Server 2005
    IF @Version &gt;= 9 AND @Version &lt; 10
    AND EXISTS(SELECT * FROM sys.master_files WHERE database_id = @CurrentDatabaseID AND [type] = 0 AND [file_id] = 1 AND differential_base_lsn IS NOT NULL AND differential_base_guid IS NOT NULL AND differential_base_time IS NULL)
    BEGIN
      SET @CurrentDifferentialBaseLSN = NULL
    END

    SELECT @CurrentDifferentialBaseIsSnapshot = is_snapshot
    FROM msdb.dbo.backupset
    WHERE database_name = @CurrentDatabaseName
    AND [type] = 'D'
    AND checkpoint_lsn = @CurrentDifferentialBaseLSN

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      SELECT @CurrentLogLSN = last_log_backup_lsn
      FROM sys.database_recovery_status
      WHERE database_id = @CurrentDatabaseID
    END

    SET @CurrentBackupType = @BackupType

    IF @ChangeBackupType = 'Y'
    BEGIN
      IF @CurrentBackupType = 'LOG' AND DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') &lt;&gt; 'SIMPLE' AND @CurrentLogLSN IS NULL AND @CurrentDatabaseName &lt;&gt; 'master'
      BEGIN
        SET @CurrentBackupType = 'DIFF'
      END
      IF @CurrentBackupType = 'DIFF' AND @CurrentDifferentialBaseLSN IS NULL AND @CurrentDatabaseName &lt;&gt; 'master'
      BEGIN
        SET @CurrentBackupType = 'FULL'
      END
    END

    IF @CurrentBackupType = 'LOG'
    BEGIN
      SELECT @CurrentLatestBackup = MAX(backup_finish_date)
      FROM msdb.dbo.backupset
      WHERE [type] IN('D','I')
      AND is_damaged = 0
      AND database_name = @CurrentDatabaseName
    END

    IF @CurrentBackupType = 'LOG' AND @CurrentLatestBackup IS NULL
    BEGIN
      SELECT @CurrentLatestBackup = MAX(backup_finish_date)
      FROM msdb.dbo.backupset
      WHERE database_backup_lsn &lt; @CurrentDifferentialBaseLSN
      AND is_damaged = 0
      AND database_name = @CurrentDatabaseName
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL
    BEGIN
      SELECT @CurrentAvailabilityGroup = availability_groups.name,
             @CurrentAvailabilityGroupRole = dm_hadr_availability_replica_states.role_desc,
             @CurrentAvailabilityGroupBackupPreference = UPPER(availability_groups.automated_backup_preference_desc)
      FROM sys.databases databases
      INNER JOIN sys.availability_databases_cluster availability_databases_cluster ON databases.group_database_id = availability_databases_cluster.group_database_id
      INNER JOIN sys.availability_groups availability_groups ON availability_databases_cluster.group_id = availability_groups.group_id
      INNER JOIN sys.dm_hadr_availability_replica_states dm_hadr_availability_replica_states ON availability_groups.group_id = dm_hadr_availability_replica_states.group_id AND databases.replica_id = dm_hadr_availability_replica_states.replica_id
      WHERE databases.name = @CurrentDatabaseName
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL AND @CurrentAvailabilityGroup IS NOT NULL
    BEGIN
      SELECT @CurrentIsPreferredBackupReplica = sys.fn_hadr_backup_is_preferred_replica(@CurrentDatabaseName)
    END

    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)
    FROM sys.database_mirroring
    WHERE database_id = @CurrentDatabaseID

    IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)
    BEGIN
      SET @CurrentLogShippingRole = 'PRIMARY'
    END
    ELSE
    IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)
    BEGIN
      SET @CurrentLogShippingRole = 'SECONDARY'
    END

    -- Set database message
    SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabaseName) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE WHEN DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') AS nvarchar) + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group: ' + @CurrentAvailabilityGroup + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group role: ' + @CurrentAvailabilityGroupRole + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group backup preference: ' + @CurrentAvailabilityGroupBackupPreference + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Is preferred backup replica: ' + CASE WHEN @CurrentIsPreferredBackupReplica = 1 THEN 'Yes' WHEN @CurrentIsPreferredBackupReplica = 0 THEN 'No' ELSE 'N/A' END + CHAR(13) + CHAR(10)
    IF @CurrentDatabaseMirroringRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Database mirroring role: ' + @CurrentDatabaseMirroringRole + CHAR(13) + CHAR(10)
    IF @CurrentLogShippingRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Log shipping role: ' + @CurrentLogShippingRole + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Differential base LSN: ' + ISNULL(CAST(@CurrentDifferentialBaseLSN AS nvarchar),'N/A') + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Differential base is snapshot: ' + CASE WHEN @CurrentDifferentialBaseIsSnapshot = 1 THEN 'Yes' WHEN @CurrentDifferentialBaseIsSnapshot = 0 THEN 'No' ELSE 'N/A' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Last log backup LSN: ' + ISNULL(CAST(@CurrentLogLSN AS nvarchar),'N/A') + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = REPLACE(@DatabaseMessage,'%','%%') + ' '
    RAISERROR(@DatabaseMessage,10,1) WITH NOWAIT

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    AND NOT (DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)
    AND DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 0
    AND NOT (@CurrentBackupType = 'LOG' AND (DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') = 'SIMPLE' OR @CurrentLogLSN IS NULL))
    AND NOT (@CurrentBackupType = 'DIFF' AND @CurrentDifferentialBaseLSN IS NULL)
    AND NOT (@CurrentBackupType IN('DIFF','LOG') AND @CurrentDatabaseName = 'master')
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'FULL' AND @CopyOnly = 'N' AND (@CurrentAvailabilityGroupRole &lt;&gt; 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'FULL' AND @CopyOnly = 'Y' AND (@CurrentIsPreferredBackupReplica &lt;&gt; 1 OR @CurrentIsPreferredBackupReplica IS NULL) AND @OverrideBackupPreference = 'N')
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'DIFF' AND (@CurrentAvailabilityGroupRole &lt;&gt; 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'LOG' AND @CopyOnly = 'N' AND (@CurrentIsPreferredBackupReplica &lt;&gt; 1 OR @CurrentIsPreferredBackupReplica IS NULL) AND @OverrideBackupPreference = 'N')
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'LOG' AND @CopyOnly = 'Y' AND (@CurrentAvailabilityGroupRole &lt;&gt; 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))
    AND NOT ((@CurrentLogShippingRole = 'PRIMARY' AND @CurrentLogShippingRole IS NOT NULL) AND @CurrentBackupType = 'LOG')
    BEGIN

      -- Set variables
      SET @CurrentDate = GETDATE()

      INSERT INTO @CurrentCleanupDates (CleanupDate)
      SELECT @CurrentDate

      IF @CurrentBackupType = 'LOG'
      BEGIN
        INSERT INTO @CurrentCleanupDates (CleanupDate)
        SELECT @CurrentLatestBackup
      END

      SELECT @CurrentFileExtension = CASE
      WHEN @BackupSoftware IS NULL AND @CurrentBackupType = 'FULL' THEN 'bak'
      WHEN @BackupSoftware IS NULL AND @CurrentBackupType = 'DIFF' THEN 'bak'
      WHEN @BackupSoftware IS NULL AND @CurrentBackupType = 'LOG' THEN 'trn'
      WHEN @BackupSoftware = 'LITESPEED' AND @CurrentBackupType = 'FULL' THEN 'bak'
      WHEN @BackupSoftware = 'LITESPEED' AND @CurrentBackupType = 'DIFF' THEN 'bak'
      WHEN @BackupSoftware = 'LITESPEED' AND @CurrentBackupType = 'LOG' THEN 'trn'
      WHEN @BackupSoftware = 'SQLBACKUP' AND @CurrentBackupType = 'FULL' THEN 'sqb'
      WHEN @BackupSoftware = 'SQLBACKUP' AND @CurrentBackupType = 'DIFF' THEN 'sqb'
      WHEN @BackupSoftware = 'SQLBACKUP' AND @CurrentBackupType = 'LOG' THEN 'sqb'
      WHEN @BackupSoftware = 'SQLSAFE' AND @CurrentBackupType = 'FULL' THEN 'safe'
      WHEN @BackupSoftware = 'SQLSAFE' AND @CurrentBackupType = 'DIFF' THEN 'safe'
      WHEN @BackupSoftware = 'SQLSAFE' AND @CurrentBackupType = 'LOG' THEN 'safe'
      END

      INSERT INTO @CurrentDirectories (ID, DirectoryPath, CreateCompleted, CleanupCompleted)
      SELECT ROW_NUMBER() OVER (ORDER BY ID), DirectoryPath + CASE WHEN RIGHT(DirectoryPath,1) = '\' THEN '' ELSE '\' END + CASE WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @Cluster + '$' + @CurrentAvailabilityGroup ELSE REPLACE(CAST(SERVERPROPERTY('servername') AS nvarchar),'\','$') END + '\' + @CurrentDatabaseNameFS + '\' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END, 0, 0
      FROM @Directories
      ORDER BY ID ASC

      SET @CurrentFileNumber = 0

      WHILE @CurrentFileNumber &lt; @NumberOfFiles
      BEGIN
        SET @CurrentFileNumber = @CurrentFileNumber + 1

        SELECT @CurrentDirectoryPath = DirectoryPath
        FROM @CurrentDirectories
        WHERE @CurrentFileNumber &gt;= (ID - 1) * (SELECT @NumberOfFiles / COUNT(*) FROM @CurrentDirectories) + 1
        AND @CurrentFileNumber &lt;= ID * (SELECT @NumberOfFiles / COUNT(*) FROM @CurrentDirectories)

        SET @CurrentFilePath = @CurrentDirectoryPath + '\' + CASE WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @Cluster + '$' + @CurrentAvailabilityGroup ELSE REPLACE(CAST(SERVERPROPERTY('servername') AS nvarchar),'\','$') END + '_' + @CurrentDatabaseNameFS + '_' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END + '_' + REPLACE(REPLACE(REPLACE((CONVERT(nvarchar,@CurrentDate,120)),'-',''),' ','_'),':','') + CASE WHEN @NumberOfFiles &gt; 1 AND @NumberOfFiles &lt;= 9 THEN '_' + CAST(@CurrentFileNumber AS nvarchar) WHEN @NumberOfFiles &gt;= 10 THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END + '.' + @CurrentFileExtension

        IF LEN(@CurrentFilePath) &gt; 259
        BEGIN
          SET @CurrentFilePath = @CurrentDirectoryPath + '\' + @CurrentDatabaseNameFS + '_' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END + '_' + REPLACE(REPLACE(REPLACE((CONVERT(nvarchar,@CurrentDate,120)),'-',''),' ','_'),':','') + CASE WHEN @NumberOfFiles &gt; 1 AND @NumberOfFiles &lt;= 9 THEN '_' + CAST(@CurrentFileNumber AS nvarchar) WHEN @NumberOfFiles &gt;= 10 THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END + '.' + @CurrentFileExtension
        END

        IF LEN(@CurrentFilePath) &gt; 259
        BEGIN
          SET @CurrentFilePath = @CurrentDirectoryPath + '\' + LEFT(@CurrentDatabaseNameFS,CASE WHEN (LEN(@CurrentDatabaseNameFS) + 259 - LEN(@CurrentFilePath) - 3) &lt; 20 THEN 20 ELSE (LEN(@CurrentDatabaseNameFS) + 259 - LEN(@CurrentFilePath) - 3) END) + '...' + '_' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END + '_' + REPLACE(REPLACE(REPLACE((CONVERT(nvarchar,@CurrentDate,120)),'-',''),' ','_'),':','') + CASE WHEN @NumberOfFiles &gt; 1 AND @NumberOfFiles &lt;= 9 THEN '_' + CAST(@CurrentFileNumber AS nvarchar) WHEN @NumberOfFiles &gt;= 10 THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END + '.' + @CurrentFileExtension
        END

        INSERT INTO @CurrentFiles (CurrentFilePath)
        SELECT @CurrentFilePath

        SET @CurrentDirectoryPath = NULL
        SET @CurrentFilePath = NULL
      END

      -- Create directory
      WHILE EXISTS (SELECT * FROM @CurrentDirectories WHERE CreateCompleted = 0)
      BEGIN
        SELECT TOP 1 @CurrentDirectoryID = ID,
                     @CurrentDirectoryPath = DirectoryPath
        FROM @CurrentDirectories
        WHERE CreateCompleted = 0
        ORDER BY ID ASC

        SET @CurrentCommandType01 = 'xp_create_subdir'
        SET @CurrentCommand01 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_create_subdir N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error creating directory.'', 16, 1)'
        EXECUTE @CurrentCommandOutput01 = [dbo].[CommandExecute] @Command = @CurrentCommand01, @CommandType = @CurrentCommandType01, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput01 = @Error
        IF @CurrentCommandOutput01 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput01

        UPDATE @CurrentDirectories
        SET CreateCompleted = 1,
            CreateOutput = @CurrentCommandOutput01
        WHERE ID = @CurrentDirectoryID

        SET @CurrentDirectoryID = NULL
        SET @CurrentDirectoryPath = NULL

        SET @CurrentCommand01 = NULL

        SET @CurrentCommandOutput01 = NULL

        SET @CurrentCommandType01 = NULL
      END

      -- Perform a backup
      IF NOT EXISTS (SELECT * FROM @CurrentDirectories WHERE CreateOutput &lt;&gt; 0 OR CreateOutput IS NULL)
      BEGIN
        IF @BackupSoftware IS NULL
        BEGIN
          SELECT @CurrentCommandType02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP_DATABASE'
          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP_LOG'
          END

          SELECT @CurrentCommand02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabaseName)
          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabaseName)
          END

          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ' READ_WRITE_FILEGROUPS'

          SET @CurrentCommand02 = @CurrentCommand02 + ' TO'

          SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'
          IF @Compress = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COMPRESSION'
          IF @Compress = 'N' AND @Version &gt;= 10 SET @CurrentCommand02 = @CurrentCommand02 + ', NO_COMPRESSION'
          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'
          IF @CopyOnly = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'
          IF @BlockSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS nvarchar)
          IF @BufferCount IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', BUFFERCOUNT = ' + CAST(@BufferCount AS nvarchar)
          IF @MaxTransferSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description,'''','''''') + ''''
        END

        IF @BackupSoftware = 'LITESPEED'
        BEGIN
          SELECT @CurrentCommandType02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'xp_backup_database'
          WHEN @CurrentBackupType = 'LOG' THEN 'xp_backup_log'
          END

          SELECT @CurrentCommand02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_backup_database @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''
          WHEN @CurrentBackupType = 'LOG' THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_backup_log @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''
          END

          SELECT @CurrentCommand02 = @CurrentCommand02 + ', @filename = N''' + REPLACE(CurrentFilePath,'''','''''') + ''''
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ', @with = '''
          IF @CheckSum = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'
          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'
          IF @CopyOnly = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'
          IF @BlockSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS nvarchar)
          SET @CurrentCommand02 = @CurrentCommand02 + ''''
          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', @read_write_filegroups = 1'
          IF @CompressionLevel IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @compressionlevel = ' + CAST(@CompressionLevel AS nvarchar)
          IF @BufferCount IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @buffercount = ' + CAST(@BufferCount AS nvarchar)
          IF @MaxTransferSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @maxtransfersize = ' + CAST(@MaxTransferSize AS nvarchar)
          IF @Threads IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @threads = ' + CAST(@Threads AS nvarchar)
          IF @Throttle IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @throttle = ' + CAST(@Throttle AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @desc = N''' + REPLACE(@Description,'''','''''') + ''''

          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @cryptlevel = ' + CASE
          WHEN @EncryptionAlgorithm = 'RC2_40' THEN '0'
          WHEN @EncryptionAlgorithm = 'RC2_56' THEN '1'
          WHEN @EncryptionAlgorithm = 'RC2_112' THEN '2'
          WHEN @EncryptionAlgorithm = 'RC2_128' THEN '3'
          WHEN @EncryptionAlgorithm = '3DES_168' THEN '4'
          WHEN @EncryptionAlgorithm = 'RC4_128' THEN '5'
          WHEN @EncryptionAlgorithm = 'AES_128' THEN '6'
          WHEN @EncryptionAlgorithm = 'AES_192' THEN '7'
          WHEN @EncryptionAlgorithm = 'AES_256' THEN '8'
          END

          IF @EncryptionKey IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @encryptionkey = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''
          SET @CurrentCommand02 = @CurrentCommand02 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error performing LiteSpeed backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLBACKUP'
        BEGIN
          SET @CurrentCommandType02 = 'sqlbackup'

          SELECT @CurrentCommand02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabaseName)
          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabaseName)
          END

          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ' READ_WRITE_FILEGROUPS'

          SET @CurrentCommand02 = @CurrentCommand02 + ' TO'

          SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'
          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'
          IF @CopyOnly = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'
          IF @CompressionLevel IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', COMPRESSION = ' + CAST(@CompressionLevel AS nvarchar)
          IF @Threads IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', THREADCOUNT = ' + CAST(@Threads AS nvarchar)
          IF @MaxTransferSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description,'''','''''') + ''''

          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', KEYSIZE = ' + CASE
          WHEN @EncryptionAlgorithm = 'AES_128' THEN '128'
          WHEN @EncryptionAlgorithm = 'AES_256' THEN '256'
          END

          IF @EncryptionKey IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', PASSWORD = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''
          SET @CurrentCommand02 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.sqlbackup N''-SQL "' + REPLACE(@CurrentCommand02,'''','''''') + '"''' + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error performing SQLBackup backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLSAFE'
        BEGIN
          SET @CurrentCommandType02 = 'xp_ss_backup'

          SET @CurrentCommand02 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_ss_backup @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''

          SELECT @CurrentCommand02 = @CurrentCommand02 + ', ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) = 1 THEN '@filename' ELSE '@backupfile' END + ' = N''' + REPLACE(CurrentFilePath,'''','''''') + ''''
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ', @backuptype = ' + CASE WHEN @CurrentBackupType = 'FULL' THEN '''Full''' WHEN @CurrentBackupType = 'DIFF' THEN '''Differential''' WHEN @CurrentBackupType = 'LOG' THEN '''Log''' END
          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', @readwritefilegroups = 1'
          SET @CurrentCommand02 = @CurrentCommand02 + ', @checksum = ' + CASE WHEN @CheckSum = 'Y' THEN '1' WHEN @CheckSum = 'N' THEN '0' END
          SET @CurrentCommand02 = @CurrentCommand02 + ', @copyonly = ' + CASE WHEN @CopyOnly = 'Y' THEN '1' WHEN @CopyOnly = 'N' THEN '0' END
          IF @CompressionLevel IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @compressionlevel = ' + CAST(@CompressionLevel AS nvarchar)
          IF @Threads IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @threads = ' + CAST(@Threads AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @desc = N''' + REPLACE(@Description,'''','''''') + ''''

          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @encryptiontype = N''' + CASE
          WHEN @EncryptionAlgorithm = 'AES_128' THEN 'AES128'
          WHEN @EncryptionAlgorithm = 'AES_256' THEN 'AES256'
          END + ''''

          IF @EncryptionKey IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @encryptedbackuppassword = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''
          SET @CurrentCommand02 = @CurrentCommand02 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error performing SQLsafe backup.'', 16, 1)'
        END

        EXECUTE @CurrentCommandOutput02 = [dbo].[CommandExecute] @Command = @CurrentCommand02, @CommandType = @CurrentCommandType02, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput02 = @Error
        IF @CurrentCommandOutput02 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput02
      END

      -- Verify the backup
      IF @CurrentCommandOutput02 = 0 AND @Verify = 'Y'
      BEGIN
        IF @BackupSoftware IS NULL
        BEGIN
          SET @CurrentCommandType03 = 'RESTORE_VERIFYONLY'

          SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

          SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand03 = @CurrentCommand03 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand03 = @CurrentCommand03 + 'NO_CHECKSUM'
        END

        IF @BackupSoftware = 'LITESPEED'
        BEGIN
          SET @CurrentCommandType03 = 'xp_restore_verifyonly'

          SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_restore_verifyonly'

          SELECT @CurrentCommand03 = @CurrentCommand03 + ' @filename = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ', @with = '''
          IF @CheckSum = 'Y' SET @CurrentCommand03 = @CurrentCommand03 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand03 = @CurrentCommand03 + 'NO_CHECKSUM'
          SET @CurrentCommand03 = @CurrentCommand03 + ''''
          IF @EncryptionKey IS NOT NULL SET @CurrentCommand03 = @CurrentCommand03 + ', @encryptionkey = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''

          SET @CurrentCommand03 = @CurrentCommand03 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error verifying LiteSpeed backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLBACKUP'
        BEGIN
          SET @CurrentCommandType03 = 'sqlbackup'

          SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

          SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand03 = @CurrentCommand03 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand03 = @CurrentCommand03 + 'NO_CHECKSUM'
          IF @EncryptionKey IS NOT NULL SET @CurrentCommand03 = @CurrentCommand03 + ', PASSWORD = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''

          SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.sqlbackup N''-SQL "' + REPLACE(@CurrentCommand03,'''','''''') + '"''' + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error verifying SQLBackup backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLSAFE'
        BEGIN
          SET @CurrentCommandType03 = 'xp_ss_verify'

          SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_ss_verify @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''

          SELECT @CurrentCommand03 = @CurrentCommand03 + ', ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) = 1 THEN '@filename' ELSE '@backupfile' END + ' = N''' + REPLACE(CurrentFilePath,'''','''''') + ''''
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error verifying SQLsafe backup.'', 16, 1)'
        END

        EXECUTE @CurrentCommandOutput03 = [dbo].[CommandExecute] @Command = @CurrentCommand03, @CommandType = @CurrentCommandType03, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput03 = @Error
        IF @CurrentCommandOutput03 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput03
      END

      INSERT INTO @CurrentCleanupDates (CleanupDate)
      SELECT DATEADD(hh,-(@CleanupTime),GETDATE())

      IF EXISTS(SELECT * FROM @CurrentCleanupDates WHERE CleanupDate IS NULL)
      BEGIN
        SET @CurrentCleanupDate = NULL
      END
      ELSE
      BEGIN
        SELECT @CurrentCleanupDate = MIN(CleanupDate)
        FROM @CurrentCleanupDates
      END

      -- Delete old backup files
      IF ((@CurrentCommandOutput02 = 0 AND @Verify = 'N' AND @CurrentCleanupDate IS NOT NULL)
      OR (@CurrentCommandOutput02 = 0 AND @Verify = 'Y' AND @CurrentCommandOutput03 = 0 AND @CurrentCleanupDate IS NOT NULL))
      AND @CurrentBackupType = @BackupType
      BEGIN
        WHILE EXISTS (SELECT * FROM @CurrentDirectories WHERE CleanupCompleted = 0)
        BEGIN
          SELECT TOP 1 @CurrentDirectoryID = ID,
                       @CurrentDirectoryPath = DirectoryPath
          FROM @CurrentDirectories
          WHERE CleanupCompleted = 0
          ORDER BY ID ASC

          IF @BackupSoftware IS NULL
          BEGIN
            SET @CurrentCommandType04 = 'xp_delete_file'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_delete_file 0, N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + @CurrentFileExtension + ''', ''' + CONVERT(nvarchar(19),@CurrentCleanupDate,126) + ''' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting files.'', 16, 1)'
          END

          IF @BackupSoftware = 'LITESPEED'
          BEGIN
            SET @CurrentCommandType04 = 'xp_slssqlmaint'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_slssqlmaint N''-MAINTDEL -DELFOLDER "' + REPLACE(@CurrentDirectoryPath,'''','''''') + '" -DELEXTENSION "' + @CurrentFileExtension + '" -DELUNIT "' + CAST(DATEDIFF(mi,@CurrentCleanupDate,GETDATE()) + 1 AS nvarchar) + '" -DELUNITTYPE "minutes" -DELUSEAGE'' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting LiteSpeed backup files.'', 16, 1)'
          END

          IF @BackupSoftware = 'SQLBACKUP'
          BEGIN
            SET @CurrentCommandType04 = 'sqbutility'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.sqbutility 1032, N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''', N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + CASE WHEN @CurrentBackupType = 'FULL' THEN 'D' WHEN @CurrentBackupType = 'DIFF' THEN 'I' WHEN @CurrentBackupType = 'LOG' THEN 'L' END + ''', ''' + CAST(DATEDIFF(hh,@CurrentCleanupDate,GETDATE()) + 1 AS nvarchar) + 'h'', ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL') + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting SQLBackup backup files.'', 16, 1)'
          END

          IF @BackupSoftware = 'SQLSAFE'
          BEGIN
            SET @CurrentCommandType04 = 'xp_ss_delete'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_ss_delete @filename = N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + '\*.' + @CurrentFileExtension + ''', @age = ''' + CAST(DATEDIFF(mi,@CurrentCleanupDate,GETDATE()) + 1 AS nvarchar) + 'Minutes'' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting SQLsafe backup files.'', 16, 1)'
          END

          EXECUTE @CurrentCommandOutput04 = [dbo].[CommandExecute] @Command = @CurrentCommand04, @CommandType = @CurrentCommandType04, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
          SET @Error = @@ERROR
          IF @Error &lt;&gt; 0 SET @CurrentCommandOutput04 = @Error
          IF @CurrentCommandOutput04 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput04

          UPDATE @CurrentDirectories
          SET CleanupCompleted = 1,
              CleanupOutput = @CurrentCommandOutput04
          WHERE ID = @CurrentDirectoryID

          SET @CurrentDirectoryID = NULL
          SET @CurrentDirectoryPath = NULL

          SET @CurrentCommand04 = NULL

          SET @CurrentCommandOutput04 = NULL

          SET @CurrentCommandType04 = NULL
        END
      END
    END

    -- Update that the database is completed
    UPDATE @tmpDatabases
    SET Completed = 1
    WHERE Selected = 1
    AND Completed = 0
    AND ID = @CurrentDBID

    -- Clear variables
    SET @CurrentDBID = NULL
    SET @CurrentDatabaseID = NULL
    SET @CurrentDatabaseName = NULL
    SET @CurrentBackupType = NULL
    SET @CurrentFileExtension = NULL
    SET @CurrentFileNumber = NULL
    SET @CurrentDifferentialBaseLSN = NULL
    SET @CurrentDifferentialBaseIsSnapshot = NULL
    SET @CurrentLogLSN = NULL
    SET @CurrentLatestBackup = NULL
    SET @CurrentDatabaseNameFS = NULL
    SET @CurrentDate = NULL
    SET @CurrentCleanupDate = NULL
    SET @CurrentIsDatabaseAccessible = NULL
    SET @CurrentAvailabilityGroup = NULL
    SET @CurrentAvailabilityGroupRole = NULL
    SET @CurrentAvailabilityGroupBackupPreference = NULL
    SET @CurrentIsPreferredBackupReplica = NULL
    SET @CurrentDatabaseMirroringRole = NULL
    SET @CurrentLogShippingRole = NULL

    SET @CurrentCommand02 = NULL
    SET @CurrentCommand03 = NULL

    SET @CurrentCommandOutput02 = NULL
    SET @CurrentCommandOutput03 = NULL

    SET @CurrentCommandType02 = NULL
    SET @CurrentCommandType03 = NULL

    DELETE FROM @CurrentDirectories
    DELETE FROM @CurrentFiles
    DELETE FROM @CurrentCleanupDates

  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  Logging:
  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120)
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DatabaseIntegrityCheck]

@Databases nvarchar(max),
@CheckCommands nvarchar(max) = 'CHECKDB',
@PhysicalOnly nvarchar(max) = 'N',
@NoIndex nvarchar(max) = 'N',
@ExtendedLogicalChecks nvarchar(max) = 'N',
@TabLock nvarchar(max) = 'N',
@FileGroups nvarchar(max) = NULL,
@Objects nvarchar(max) = NULL,
@LockTimeout int = NULL,
@LogToTable nvarchar(max) = 'N',
@Execute nvarchar(max) = 'Y'

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @DatabaseMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)

  DECLARE @Version numeric(18,10)
  DECLARE @AmazonRDS bit

  DECLARE @Cluster nvarchar(max)

  DECLARE @CurrentDBID int
  DECLARE @CurrentDatabaseID int
  DECLARE @CurrentDatabaseName nvarchar(max)
  DECLARE @CurrentIsDatabaseAccessible bit
  DECLARE @CurrentAvailabilityGroup nvarchar(max)
  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)
  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)
  DECLARE @CurrentLogShippingRole nvarchar(max)

  DECLARE @CurrentFGID int
  DECLARE @CurrentFileGroupID int
  DECLARE @CurrentFileGroupName nvarchar(max)
  DECLARE @CurrentFileGroupExists bit

  DECLARE @CurrentOID int
  DECLARE @CurrentSchemaID int
  DECLARE @CurrentSchemaName nvarchar(max)
  DECLARE @CurrentObjectID int
  DECLARE @CurrentObjectName nvarchar(max)
  DECLARE @CurrentObjectType nvarchar(max)
  DECLARE @CurrentObjectExists bit

  DECLARE @CurrentCommand01 nvarchar(max)
  DECLARE @CurrentCommand02 nvarchar(max)
  DECLARE @CurrentCommand03 nvarchar(max)
  DECLARE @CurrentCommand04 nvarchar(max)
  DECLARE @CurrentCommand05 nvarchar(max)
  DECLARE @CurrentCommand06 nvarchar(max)
  DECLARE @CurrentCommand07 nvarchar(max)
  DECLARE @CurrentCommand08 nvarchar(max)
  DECLARE @CurrentCommand09 nvarchar(max)

  DECLARE @CurrentCommandOutput01 int
  DECLARE @CurrentCommandOutput04 int
  DECLARE @CurrentCommandOutput05 int
  DECLARE @CurrentCommandOutput08 int
  DECLARE @CurrentCommandOutput09 int

  DECLARE @CurrentCommandType01 nvarchar(max)
  DECLARE @CurrentCommandType04 nvarchar(max)
  DECLARE @CurrentCommandType05 nvarchar(max)
  DECLARE @CurrentCommandType08 nvarchar(max)
  DECLARE @CurrentCommandType09 nvarchar(max)

  DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))

  DECLARE @tmpFileGroups TABLE (ID int IDENTITY,
                                FileGroupID int,
                                FileGroupName nvarchar(max),
                                Selected bit,
                                Completed bit,
                                PRIMARY KEY(Selected, Completed, ID))

  DECLARE @tmpObjects TABLE (ID int IDENTITY,
                             SchemaID int,
                             SchemaName nvarchar(max),
                             ObjectID int,
                             ObjectName nvarchar(max),
                             ObjectType nvarchar(max),
                             Selected bit,
                             Completed bit,
                             PRIMARY KEY(Selected, Completed, ID))

  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)

  DECLARE @SelectedFileGroups TABLE (DatabaseName nvarchar(max),
                                     FileGroupName nvarchar(max),
                                     Selected bit)

  DECLARE @SelectedObjects TABLE (DatabaseName nvarchar(max),
                                  SchemaName nvarchar(max),
                                  ObjectName nvarchar(max),
                                  Selected bit)

  DECLARE @SelectedCheckCommands TABLE (CheckCommand nvarchar(max))

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  SET @AmazonRDS = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (SELECT QUOTENAME(schemas.name) FROM sys.schemas schemas INNER JOIN sys.objects objects ON schemas.[schema_id] = objects.[schema_id] WHERE [object_id] = @@PROCID) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CheckCommands = ' + ISNULL('''' + REPLACE(@CheckCommands,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @PhysicalOnly = ' + ISNULL('''' + REPLACE(@PhysicalOnly,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @NoIndex = ' + ISNULL('''' + REPLACE(@NoIndex,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @ExtendedLogicalChecks = ' + ISNULL('''' + REPLACE(@ExtendedLogicalChecks,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @TabLock = ' + ISNULL('''' + REPLACE(@TabLock,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FileGroups = ' + ISNULL('''' + REPLACE(@FileGroups,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Objects = ' + ISNULL('''' + REPLACE(@Objects,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @LockTimeout = ' + ISNULL(CAST(@LockTimeout AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL') + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Source: http://ola.hallengren.com' + CHAR(13) + CHAR(10)
  SET @StartMessage = REPLACE(@StartMessage,'%','%%') + ' '
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute is missing. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND (OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@LogToTable%' OR OBJECT_DEFINITION(objects.[object_id]) LIKE '%LOCK_TIMEOUT%'))
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute needs to be updated. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Select databases                                                                           //--
  ----------------------------------------------------------------------------------------------------

  SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition &lt; LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)

  INSERT INTO @tmpDatabases (DatabaseName, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] &lt;&gt; 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Select filegroups                                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET @FileGroups = REPLACE(@FileGroups, ', ', ',');

  WITH FileGroups1 (StartPosition, EndPosition, FileGroupItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FileGroups, 1), 0), LEN(@FileGroups) + 1) AS EndPosition,
         SUBSTRING(@FileGroups, 1, ISNULL(NULLIF(CHARINDEX(',', @FileGroups, 1), 0), LEN(@FileGroups) + 1) - 1) AS FileGroupItem
  WHERE @FileGroups IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FileGroups, EndPosition + 1), 0), LEN(@FileGroups) + 1) AS EndPosition,
         SUBSTRING(@FileGroups, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FileGroups, EndPosition + 1), 0), LEN(@FileGroups) + 1) - EndPosition - 1) AS FileGroupItem
  FROM FileGroups1
  WHERE EndPosition &lt; LEN(@FileGroups) + 1
  ),
  FileGroups2 (FileGroupItem, Selected) AS
  (
  SELECT CASE WHEN FileGroupItem LIKE '-%' THEN RIGHT(FileGroupItem,LEN(FileGroupItem) - 1) ELSE FileGroupItem END AS FileGroupItem,
         CASE WHEN FileGroupItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM FileGroups1
  ),
  FileGroups3 (FileGroupItem, Selected) AS
  (
  SELECT CASE WHEN FileGroupItem = 'ALL_FILEGROUPS' THEN '%.%' ELSE FileGroupItem END AS FileGroupItem,
         Selected
  FROM FileGroups2
  ),
  FileGroups4 (DatabaseName, FileGroupName, Selected) AS
  (
  SELECT CASE WHEN PARSENAME(FileGroupItem,4) IS NULL AND PARSENAME(FileGroupItem,3) IS NULL THEN PARSENAME(FileGroupItem,2) ELSE NULL END AS DatabaseName,
         CASE WHEN PARSENAME(FileGroupItem,4) IS NULL AND PARSENAME(FileGroupItem,3) IS NULL THEN PARSENAME(FileGroupItem,1) ELSE NULL END AS FileGroupName,
         Selected
  FROM FileGroups3
  )
  INSERT INTO @SelectedFileGroups (DatabaseName, FileGroupName, Selected)
  SELECT DatabaseName, FileGroupName, Selected
  FROM FileGroups4
  OPTION (MAXRECURSION 0)

  ----------------------------------------------------------------------------------------------------
  --// Select objects                                                                             //--
  ----------------------------------------------------------------------------------------------------

  SET @Objects = REPLACE(@Objects, ', ', ',');

  WITH Objects1 (StartPosition, EndPosition, ObjectItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Objects, 1), 0), LEN(@Objects) + 1) AS EndPosition,
         SUBSTRING(@Objects, 1, ISNULL(NULLIF(CHARINDEX(',', @Objects, 1), 0), LEN(@Objects) + 1) - 1) AS ObjectItem
  WHERE @Objects IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Objects, EndPosition + 1), 0), LEN(@Objects) + 1) AS EndPosition,
         SUBSTRING(@Objects, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Objects, EndPosition + 1), 0), LEN(@Objects) + 1) - EndPosition - 1) AS ObjectItem
  FROM Objects1
  WHERE EndPosition &lt; LEN(@Objects) + 1
  ),
  Objects2 (ObjectItem, Selected) AS
  (
  SELECT CASE WHEN ObjectItem LIKE '-%' THEN RIGHT(ObjectItem,LEN(ObjectItem) - 1) ELSE ObjectItem END AS ObjectItem,
         CASE WHEN ObjectItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Objects1
  ),
  Objects3 (ObjectItem, Selected) AS
  (
  SELECT CASE WHEN ObjectItem = 'ALL_OBJECTS' THEN '%.%.%' ELSE ObjectItem END AS ObjectItem,
         Selected
  FROM Objects2
  ),
  Objects4 (DatabaseName, SchemaName, ObjectName, Selected) AS
  (
  SELECT CASE WHEN PARSENAME(ObjectItem,4) IS NULL THEN PARSENAME(ObjectItem,3) ELSE NULL END AS DatabaseName,
         CASE WHEN PARSENAME(ObjectItem,4) IS NULL THEN PARSENAME(ObjectItem,2) ELSE NULL END AS SchemaName,
         CASE WHEN PARSENAME(ObjectItem,4) IS NULL THEN PARSENAME(ObjectItem,1) ELSE NULL END AS ObjectName,
         Selected
  FROM Objects3
  )
  INSERT INTO @SelectedObjects (DatabaseName, SchemaName, ObjectName, Selected)
  SELECT DatabaseName, SchemaName, ObjectName, Selected
  FROM Objects4
  OPTION (MAXRECURSION 0);

  ----------------------------------------------------------------------------------------------------
  --// Select check commands                                                                      //--
  ----------------------------------------------------------------------------------------------------

  WITH CheckCommands (StartPosition, EndPosition, CheckCommand) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, 1), 0), LEN(@CheckCommands) + 1) AS EndPosition,
         SUBSTRING(@CheckCommands, 1, ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, 1), 0), LEN(@CheckCommands) + 1) - 1) AS CheckCommand
  WHERE @CheckCommands IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, EndPosition + 1), 0), LEN(@CheckCommands) + 1) AS EndPosition,
         SUBSTRING(@CheckCommands, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, EndPosition + 1), 0), LEN(@CheckCommands) + 1) - EndPosition - 1) AS CheckCommand
  FROM CheckCommands
  WHERE EndPosition &lt; LEN(@CheckCommands) + 1
  )
  INSERT INTO @SelectedCheckCommands (CheckCommand)
  SELECT CheckCommand
  FROM CheckCommands
  OPTION (MAXRECURSION 0)

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand NOT IN('CHECKDB','CHECKFILEGROUP','CHECKALLOC','CHECKTABLE','CHECKCATALOG')) OR EXISTS (SELECT * FROM @SelectedCheckCommands GROUP BY CheckCommand HAVING COUNT(*) &gt; 1) OR NOT EXISTS (SELECT * FROM @SelectedCheckCommands) OR (EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKDB')) AND EXISTS (SELECT CheckCommand FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKFILEGROUP','CHECKALLOC','CHECKTABLE','CHECKCATALOG'))) OR (EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKFILEGROUP')) AND EXISTS (SELECT CheckCommand FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKALLOC','CHECKTABLE')))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CheckCommands is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PhysicalOnly NOT IN ('Y','N') OR @PhysicalOnly IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PhysicalOnly is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @NoIndex NOT IN ('Y','N') OR @NoIndex IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @NoIndex is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @ExtendedLogicalChecks NOT IN ('Y','N') OR @ExtendedLogicalChecks IS NULL OR (@ExtendedLogicalChecks = 'Y' AND NOT @Version &gt;= 10) OR (@PhysicalOnly = 'Y' AND @ExtendedLogicalChecks = 'Y')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @ExtendedLogicalChecks is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @TabLock NOT IN ('Y','N') OR @TabLock IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @TabLock is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS(SELECT * FROM @SelectedFileGroups WHERE DatabaseName IS NULL OR FileGroupName IS NULL) OR (@FileGroups IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedFileGroups)) OR (@FileGroups IS NOT NULL AND NOT EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKFILEGROUP'))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FileGroups is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS(SELECT * FROM @SelectedObjects WHERE DatabaseName IS NULL OR SchemaName IS NULL OR ObjectName IS NULL) OR (@Objects IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedObjects)) OR (@Objects IS NOT NULL AND NOT EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKTABLE'))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Objects is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LockTimeout &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LockTimeout is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ErrorMessage = 'The documentation is available at http://ola.hallengren.com/sql-server-integrity-check.html.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Check Availability Group cluster name                                                      //--
  ----------------------------------------------------------------------------------------------------

  IF @Version &gt;= 11
  BEGIN
    SELECT @Cluster = cluster_name
    FROM sys.dm_hadr_cluster
  END

  ----------------------------------------------------------------------------------------------------
  --// Execute commands                                                                           //--
  ----------------------------------------------------------------------------------------------------

  WHILE EXISTS (SELECT * FROM @tmpDatabases WHERE Selected = 1 AND Completed = 0)
  BEGIN

    SELECT TOP 1 @CurrentDBID = ID,
                 @CurrentDatabaseName = DatabaseName
    FROM @tmpDatabases
    WHERE Selected = 1
    AND Completed = 0
    ORDER BY ID ASC

    SET @CurrentDatabaseID = DB_ID(@CurrentDatabaseName)

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = @CurrentDatabaseID AND database_guid IS NOT NULL)
      BEGIN
        SET @CurrentIsDatabaseAccessible = 1
      END
      ELSE
      BEGIN
        SET @CurrentIsDatabaseAccessible = 0
      END
    END
    ELSE
    BEGIN
      SET @CurrentIsDatabaseAccessible = 0
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL
    BEGIN
      SELECT @CurrentAvailabilityGroup = availability_groups.name,
             @CurrentAvailabilityGroupRole = dm_hadr_availability_replica_states.role_desc
      FROM sys.databases databases
      INNER JOIN sys.availability_databases_cluster availability_databases_cluster ON databases.group_database_id = availability_databases_cluster.group_database_id
      INNER JOIN sys.availability_groups availability_groups ON availability_databases_cluster.group_id = availability_groups.group_id
      INNER JOIN sys.dm_hadr_availability_replica_states dm_hadr_availability_replica_states ON availability_groups.group_id = dm_hadr_availability_replica_states.group_id AND databases.replica_id = dm_hadr_availability_replica_states.replica_id
      WHERE databases.name = @CurrentDatabaseName
    END

    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)
    FROM sys.database_mirroring
    WHERE database_id = @CurrentDatabaseID

    IF @AmazonRDS = 0
    BEGIN
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'PRIMARY'
      END
      ELSE
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'SECONDARY'
      END
    END

    -- Set database message
    SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabaseName) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE WHEN DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') AS nvarchar) + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group: ' + @CurrentAvailabilityGroup + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group role: ' + @CurrentAvailabilityGroupRole + CHAR(13) + CHAR(10)
    IF @CurrentDatabaseMirroringRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Database mirroring role: ' + @CurrentDatabaseMirroringRole + CHAR(13) + CHAR(10)
    IF @CurrentLogShippingRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Log shipping role: ' + @CurrentLogShippingRole + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = REPLACE(@DatabaseMessage,'%','%%') + ' '
    RAISERROR(@DatabaseMessage,10,1) WITH NOWAIT

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    AND NOT (DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)
    BEGIN

      -- Check database
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKDB')
      BEGIN
        SET @CurrentCommandType01 = 'DBCC_CHECKDB'

        SET @CurrentCommand01 = ''
        IF @LockTimeout IS NOT NULL SET @CurrentCommand01 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
        SET @CurrentCommand01 = @CurrentCommand01 + 'DBCC CHECKDB (' + QUOTENAME(@CurrentDatabaseName)
        IF @NoIndex = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', NOINDEX'
        SET @CurrentCommand01 = @CurrentCommand01 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
        IF @PhysicalOnly = 'N' SET @CurrentCommand01 = @CurrentCommand01 + ', DATA_PURITY'
        IF @PhysicalOnly = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', PHYSICAL_ONLY'
        IF @ExtendedLogicalChecks = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', EXTENDED_LOGICAL_CHECKS'
        IF @TabLock = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', TABLOCK'

        EXECUTE @CurrentCommandOutput01 = [dbo].[CommandExecute] @Command = @CurrentCommand01, @CommandType = @CurrentCommandType01, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput01 = @Error
        IF @CurrentCommandOutput01 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput01
      END

      -- Check filegroups
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKFILEGROUP')
      BEGIN
        SET @CurrentCommand02 = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT data_space_id AS FileGroupID, name AS FileGroupName, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ORDER BY CASE WHEN filegroups.name = ''PRIMARY'' THEN 1 ELSE 0 END DESC, filegroups.name ASC'

        INSERT INTO @tmpFileGroups (FileGroupID, FileGroupName, Selected, Completed)
        EXECUTE sp_executesql @statement = @CurrentCommand02
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @ReturnCode = @Error

        IF @FileGroups IS NULL
        BEGIN
          UPDATE tmpFileGroups
          SET tmpFileGroups.Selected = 1
          FROM @tmpFileGroups tmpFileGroups
        END
        ELSE
        BEGIN
          UPDATE tmpFileGroups
          SET tmpFileGroups.Selected = SelectedFileGroups.Selected
          FROM @tmpFileGroups tmpFileGroups
          INNER JOIN @SelectedFileGroups SelectedFileGroups
          ON @CurrentDatabaseName LIKE REPLACE(SelectedFileGroups.DatabaseName,'_','[_]') AND tmpFileGroups.FileGroupName LIKE REPLACE(SelectedFileGroups.FileGroupName,'_','[_]')
          WHERE SelectedFileGroups.Selected = 1

          UPDATE tmpFileGroups
          SET tmpFileGroups.Selected = SelectedFileGroups.Selected
          FROM @tmpFileGroups tmpFileGroups
          INNER JOIN @SelectedFileGroups SelectedFileGroups
          ON @CurrentDatabaseName LIKE REPLACE(SelectedFileGroups.DatabaseName,'_','[_]') AND tmpFileGroups.FileGroupName LIKE REPLACE(SelectedFileGroups.FileGroupName,'_','[_]')
          WHERE SelectedFileGroups.Selected = 0
        END

        WHILE EXISTS (SELECT * FROM @tmpFileGroups WHERE Selected = 1 AND Completed = 0)
        BEGIN
          SELECT TOP 1 @CurrentFGID = ID,
                       @CurrentFileGroupID = FileGroupID,
                       @CurrentFileGroupName = FileGroupName
          FROM @tmpFileGroups
          WHERE Selected = 1
          AND Completed = 0
          ORDER BY ID ASC

          -- Does the filegroup exist?
          SET @CurrentCommand03 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand03 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand03 = @CurrentCommand03 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups WHERE filegroups.data_space_id = @ParamFileGroupID AND filegroups.[name] = @ParamFileGroupName) BEGIN SET @ParamFileGroupExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand03, @params = N'@ParamFileGroupID int, @ParamFileGroupName sysname, @ParamFileGroupExists bit OUTPUT', @ParamFileGroupID = @CurrentFileGroupID, @ParamFileGroupName = @CurrentFileGroupName, @ParamFileGroupExists = @CurrentFileGroupExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentFileGroupExists IS NULL SET @CurrentFileGroupExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The file group ' + QUOTENAME(@CurrentFileGroupName) + ' in the database ' + QUOTENAME(@CurrentDatabaseName) + ' is locked. It could not be checked if the filegroup exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
          END

          IF @CurrentFileGroupExists = 1
          BEGIN
            SET @CurrentCommandType04 = 'DBCC_CHECKFILEGROUP'

            SET @CurrentCommand04 = ''
            IF @LockTimeout IS NOT NULL SET @CurrentCommand04 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
            SET @CurrentCommand04 = @CurrentCommand04 + 'USE ' + QUOTENAME(@CurrentDatabaseName) + '; DBCC CHECKFILEGROUP (' + QUOTENAME(@CurrentFileGroupName)
            IF @NoIndex = 'Y' SET @CurrentCommand04 = @CurrentCommand04 + ', NOINDEX'
            SET @CurrentCommand04 = @CurrentCommand04 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
            IF @PhysicalOnly = 'Y' SET @CurrentCommand04 = @CurrentCommand04 + ', PHYSICAL_ONLY'
            IF @TabLock = 'Y' SET @CurrentCommand04 = @CurrentCommand04 + ', TABLOCK'

            EXECUTE @CurrentCommandOutput04 = [dbo].[CommandExecute] @Command = @CurrentCommand04, @CommandType = @CurrentCommandType04, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
            SET @Error = @@ERROR
            IF @Error &lt;&gt; 0 SET @CurrentCommandOutput04 = @Error
            IF @CurrentCommandOutput04 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput04
          END

          UPDATE @tmpFileGroups
          SET Completed = 1
          WHERE Selected = 1
          AND Completed = 0
          AND ID = @CurrentFGID

          SET @CurrentFGID = NULL
          SET @CurrentFileGroupID = NULL
          SET @CurrentFileGroupName = NULL
          SET @CurrentFileGroupExists = NULL

          SET @CurrentCommand03 = NULL
          SET @CurrentCommand04 = NULL

          SET @CurrentCommandOutput04 = NULL

          SET @CurrentCommandType04 = NULL
        END
      END

      -- Check disk space allocation structures
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKALLOC')
      BEGIN
        SET @CurrentCommandType05 = 'DBCC_CHECKALLOC'

        SET @CurrentCommand05 = ''
        IF @LockTimeout IS NOT NULL SET @CurrentCommand05 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
        SET @CurrentCommand05 = @CurrentCommand05 + 'DBCC CHECKALLOC (' + QUOTENAME(@CurrentDatabaseName)
        SET @CurrentCommand05 = @CurrentCommand05 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
        IF @TabLock = 'Y' SET @CurrentCommand05 = @CurrentCommand05 + ', TABLOCK'

        EXECUTE @CurrentCommandOutput05 = [dbo].[CommandExecute] @Command = @CurrentCommand05, @CommandType = @CurrentCommandType05, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput05 = @Error
        IF @CurrentCommandOutput05 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput05
      END

      -- Check objects
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKTABLE')
      BEGIN
        SET @CurrentCommand06 = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.schema_id = schemas.schema_id WHERE objects.[type] IN(''U'',''V'') AND EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.object_id = objects.object_id) ORDER BY schemas.name ASC, objects.name ASC'

        INSERT INTO @tmpObjects (SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, Selected, Completed)
        EXECUTE sp_executesql @statement = @CurrentCommand06
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @ReturnCode = @Error

        IF @Objects IS NULL
        BEGIN
          UPDATE tmpObjects
          SET tmpObjects.Selected = 1
          FROM @tmpObjects tmpObjects
        END
        ELSE
        BEGIN
          UPDATE tmpObjects
          SET tmpObjects.Selected = SelectedObjects.Selected
          FROM @tmpObjects tmpObjects
          INNER JOIN @SelectedObjects SelectedObjects
          ON @CurrentDatabaseName LIKE REPLACE(SelectedObjects.DatabaseName,'_','[_]') AND tmpObjects.SchemaName LIKE REPLACE(SelectedObjects.SchemaName,'_','[_]') AND tmpObjects.ObjectName LIKE REPLACE(SelectedObjects.ObjectName,'_','[_]')
          WHERE SelectedObjects.Selected = 1

          UPDATE tmpObjects
          SET tmpObjects.Selected = SelectedObjects.Selected
          FROM @tmpObjects tmpObjects
          INNER JOIN @SelectedObjects SelectedObjects
          ON @CurrentDatabaseName LIKE REPLACE(SelectedObjects.DatabaseName,'_','[_]') AND tmpObjects.SchemaName LIKE REPLACE(SelectedObjects.SchemaName,'_','[_]') AND tmpObjects.ObjectName LIKE REPLACE(SelectedObjects.ObjectName,'_','[_]')
          WHERE SelectedObjects.Selected = 0
        END

        WHILE EXISTS (SELECT * FROM @tmpObjects WHERE Selected = 1 AND Completed = 0)
        BEGIN
          SELECT TOP 1 @CurrentOID = ID,
                       @CurrentSchemaID = SchemaID,
                       @CurrentSchemaName = SchemaName,
                       @CurrentObjectID = ObjectID,
                       @CurrentObjectName = ObjectName,
                       @CurrentObjectType = ObjectType
          FROM @tmpObjects
          WHERE Selected = 1
          AND Completed = 0
          ORDER BY ID ASC

          -- Does the object exist?
          SET @CurrentCommand07 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand07 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand07 = @CurrentCommand07 + 'IF EXISTS(SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.schema_id = schemas.schema_id WHERE objects.[type] IN(''U'',''V'') AND EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.object_id = objects.object_id) AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType) BEGIN SET @ParamObjectExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand07, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamObjectExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamObjectExists = @CurrentObjectExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentObjectExists IS NULL SET @CurrentObjectExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the object exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
          END

          IF @CurrentObjectExists = 1
          BEGIN
            SET @CurrentCommandType08 = 'DBCC_CHECKTABLE'

            SET @CurrentCommand08 = ''
            IF @LockTimeout IS NOT NULL SET @CurrentCommand08 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
            SET @CurrentCommand08 = @CurrentCommand08 + 'DBCC CHECKTABLE (''' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ''''
            IF @NoIndex = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', NOINDEX'
            SET @CurrentCommand08 = @CurrentCommand08 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
            IF @PhysicalOnly = 'N' SET @CurrentCommand08 = @CurrentCommand08 + ', DATA_PURITY'
            IF @PhysicalOnly = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', PHYSICAL_ONLY'
            IF @ExtendedLogicalChecks = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', EXTENDED_LOGICAL_CHECKS'
            IF @TabLock = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', TABLOCK'

            EXECUTE @CurrentCommandOutput08 = [dbo].[CommandExecute] @Command = @CurrentCommand08, @CommandType = @CurrentCommandType08, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @LogToTable = @LogToTable, @Execute = @Execute
            SET @Error = @@ERROR
            IF @Error &lt;&gt; 0 SET @CurrentCommandOutput08 = @Error
            IF @CurrentCommandOutput08 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput08
          END

          UPDATE @tmpObjects
          SET Completed = 1
          WHERE Selected = 1
          AND Completed = 0
          AND ID = @CurrentOID

          SET @CurrentOID = NULL
          SET @CurrentSchemaID = NULL
          SET @CurrentSchemaName = NULL
          SET @CurrentObjectID = NULL
          SET @CurrentObjectName = NULL
          SET @CurrentObjectType = NULL
          SET @CurrentObjectExists = NULL

          SET @CurrentCommand07 = NULL
          SET @CurrentCommand08 = NULL

          SET @CurrentCommandOutput08 = NULL

          SET @CurrentCommandType08 = NULL
        END
      END

      -- Check catalog
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKCATALOG')
      BEGIN
        SET @CurrentCommandType09 = 'DBCC_CHECKCATALOG'

        SET @CurrentCommand09 = ''
        IF @LockTimeout IS NOT NULL SET @CurrentCommand09 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
        SET @CurrentCommand09 = @CurrentCommand09 + 'DBCC CHECKCATALOG (' + QUOTENAME(@CurrentDatabaseName)
        SET @CurrentCommand09 = @CurrentCommand09 + ') WITH NO_INFOMSGS'

        EXECUTE @CurrentCommandOutput09 = [dbo].[CommandExecute] @Command = @CurrentCommand09, @CommandType = @CurrentCommandType09, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput09 = @Error
        IF @CurrentCommandOutput09 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput09
      END

    END

    -- Update that the database is completed
    UPDATE @tmpDatabases
    SET Completed = 1
    WHERE Selected = 1
    AND Completed = 0
    AND ID = @CurrentDBID

    -- Clear variables
    SET @CurrentDBID = NULL
    SET @CurrentDatabaseID = NULL
    SET @CurrentDatabaseName = NULL
    SET @CurrentIsDatabaseAccessible = NULL
    SET @CurrentAvailabilityGroup = NULL
    SET @CurrentAvailabilityGroupRole = NULL
    SET @CurrentDatabaseMirroringRole = NULL
    SET @CurrentLogShippingRole = NULL

    SET @CurrentCommand01 = NULL
    SET @CurrentCommand02 = NULL
    SET @CurrentCommand05 = NULL
    SET @CurrentCommand06 = NULL
    SET @CurrentCommand09 = NULL

    SET @CurrentCommandOutput01 = NULL
    SET @CurrentCommandOutput05 = NULL
    SET @CurrentCommandOutput09 = NULL

    SET @CurrentCommandType01 = NULL
    SET @CurrentCommandType05 = NULL
    SET @CurrentCommandType09 = NULL

    DELETE FROM @tmpFileGroups
    DELETE FROM @tmpObjects

  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  Logging:
  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120)
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IndexOptimize]

@Databases nvarchar(max),
@FragmentationLow nvarchar(max) = NULL,
@FragmentationMedium nvarchar(max) = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh nvarchar(max) = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 int = 5,
@FragmentationLevel2 int = 30,
@PageCountLevel int = 1000,
@SortInTempdb nvarchar(max) = 'N',
@MaxDOP int = NULL,
@FillFactor int = NULL,
@PadIndex nvarchar(max) = NULL,
@LOBCompaction nvarchar(max) = 'Y',
@UpdateStatistics nvarchar(max) = NULL,
@OnlyModifiedStatistics nvarchar(max) = 'N',
@StatisticsSample int = NULL,
@StatisticsResample nvarchar(max) = 'N',
@PartitionLevel nvarchar(max) = 'Y',
@MSShippedObjects nvarchar(max) = 'N',
@Indexes nvarchar(max) = NULL,
@TimeLimit int = NULL,
@Delay int = NULL,
@LockTimeout int = NULL,
@LogToTable nvarchar(max) = 'N',
@Execute nvarchar(max) = 'Y'

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  SET ARITHABORT ON

  SET NUMERIC_ROUNDABORT OFF

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @DatabaseMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)

  DECLARE @Version numeric(18,10)
  DECLARE @AmazonRDS bit

  DECLARE @Cluster nvarchar(max)

  DECLARE @StartTime datetime

  DECLARE @CurrentDBID int
  DECLARE @CurrentDatabaseID int
  DECLARE @CurrentDatabaseName nvarchar(max)
  DECLARE @CurrentIsDatabaseAccessible bit
  DECLARE @CurrentAvailabilityGroup nvarchar(max)
  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)
  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)
  DECLARE @CurrentLogShippingRole nvarchar(max)

  DECLARE @CurrentCommand01 nvarchar(max)
  DECLARE @CurrentCommand02 nvarchar(max)
  DECLARE @CurrentCommand03 nvarchar(max)
  DECLARE @CurrentCommand04 nvarchar(max)
  DECLARE @CurrentCommand05 nvarchar(max)
  DECLARE @CurrentCommand06 nvarchar(max)
  DECLARE @CurrentCommand07 nvarchar(max)
  DECLARE @CurrentCommand08 nvarchar(max)
  DECLARE @CurrentCommand09 nvarchar(max)
  DECLARE @CurrentCommand10 nvarchar(max)
  DECLARE @CurrentCommand11 nvarchar(max)
  DECLARE @CurrentCommand12 nvarchar(max)
  DECLARE @CurrentCommand13 nvarchar(max)
  DECLARE @CurrentCommand14 nvarchar(max)

  DECLARE @CurrentCommandOutput13 int
  DECLARE @CurrentCommandOutput14 int

  DECLARE @CurrentCommandType13 nvarchar(max)
  DECLARE @CurrentCommandType14 nvarchar(max)

  DECLARE @CurrentIxID int
  DECLARE @CurrentSchemaID int
  DECLARE @CurrentSchemaName nvarchar(max)
  DECLARE @CurrentObjectID int
  DECLARE @CurrentObjectName nvarchar(max)
  DECLARE @CurrentObjectType nvarchar(max)
  DECLARE @CurrentIndexID int
  DECLARE @CurrentIndexName nvarchar(max)
  DECLARE @CurrentIndexType int
  DECLARE @CurrentStatisticsID int
  DECLARE @CurrentStatisticsName nvarchar(max)
  DECLARE @CurrentPartitionID bigint
  DECLARE @CurrentPartitionNumber int
  DECLARE @CurrentPartitionCount int
  DECLARE @CurrentIsPartition bit
  DECLARE @CurrentIndexExists bit
  DECLARE @CurrentStatisticsExists bit
  DECLARE @CurrentIsImageText bit
  DECLARE @CurrentIsNewLOB bit
  DECLARE @CurrentIsFileStream bit
  DECLARE @CurrentIsColumnStore bit
  DECLARE @CurrentAllowPageLocks bit
  DECLARE @CurrentNoRecompute bit
  DECLARE @CurrentStatisticsModified bit
  DECLARE @CurrentOnReadOnlyFileGroup bit
  DECLARE @CurrentFragmentationLevel float
  DECLARE @CurrentPageCount bigint
  DECLARE @CurrentFragmentationGroup nvarchar(max)
  DECLARE @CurrentAction nvarchar(max)
  DECLARE @CurrentMaxDOP int
  DECLARE @CurrentUpdateStatistics nvarchar(max)
  DECLARE @CurrentComment nvarchar(max)
  DECLARE @CurrentExtendedInfo xml
  DECLARE @CurrentDelay datetime

  DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))

  DECLARE @tmpIndexesStatistics TABLE (ID int IDENTITY,
                                       SchemaID int,
                                       SchemaName nvarchar(max),
                                       ObjectID int,
                                       ObjectName nvarchar(max),
                                       ObjectType nvarchar(max),
                                       IndexID int,
                                       IndexName nvarchar(max),
                                       IndexType int,
                                       StatisticsID int,
                                       StatisticsName nvarchar(max),
                                       PartitionID bigint,
                                       PartitionNumber int,
                                       PartitionCount int,
                                       Selected bit,
                                       Completed bit,
                                       PRIMARY KEY(Selected, Completed, ID))

  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)

  DECLARE @SelectedIndexes TABLE (DatabaseName nvarchar(max),
                                  SchemaName nvarchar(max),
                                  ObjectName nvarchar(max),
                                  IndexName nvarchar(max),
                                  Selected bit)

  DECLARE @Actions TABLE ([Action] nvarchar(max))

  INSERT INTO @Actions([Action]) VALUES('INDEX_REBUILD_ONLINE')
  INSERT INTO @Actions([Action]) VALUES('INDEX_REBUILD_OFFLINE')
  INSERT INTO @Actions([Action]) VALUES('INDEX_REORGANIZE')

  DECLARE @ActionsPreferred TABLE (FragmentationGroup nvarchar(max),
                                   [Priority] int,
                                   [Action] nvarchar(max))

  DECLARE @CurrentActionsAllowed TABLE ([Action] nvarchar(max))

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  SET @AmazonRDS = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartTime = CONVERT(datetime,CONVERT(nvarchar,GETDATE(),120),120)

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTime,120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (SELECT QUOTENAME(schemas.name) FROM sys.schemas schemas INNER JOIN sys.objects objects ON schemas.[schema_id] = objects.[schema_id] WHERE [object_id] = @@PROCID) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationLow = ' + ISNULL('''' + REPLACE(@FragmentationLow,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationMedium = ' + ISNULL('''' + REPLACE(@FragmentationMedium,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationHigh = ' + ISNULL('''' + REPLACE(@FragmentationHigh,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationLevel1 = ' + ISNULL(CAST(@FragmentationLevel1 AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationLevel2 = ' + ISNULL(CAST(@FragmentationLevel2 AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @PageCountLevel = ' + ISNULL(CAST(@PageCountLevel AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @SortInTempdb = ' + ISNULL('''' + REPLACE(@SortInTempdb,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @MaxDOP = ' + ISNULL(CAST(@MaxDOP AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @FillFactor = ' + ISNULL(CAST(@FillFactor AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @PadIndex = ' + ISNULL('''' + REPLACE(@PadIndex,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @LOBCompaction = ' + ISNULL('''' + REPLACE(@LOBCompaction,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @UpdateStatistics = ' + ISNULL('''' + REPLACE(@UpdateStatistics,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @OnlyModifiedStatistics = ' + ISNULL('''' + REPLACE(@OnlyModifiedStatistics,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @StatisticsSample = ' + ISNULL(CAST(@StatisticsSample AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @StatisticsResample = ' + ISNULL('''' + REPLACE(@StatisticsResample,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @PartitionLevel = ' + ISNULL('''' + REPLACE(@PartitionLevel,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @MSShippedObjects = ' + ISNULL('''' + REPLACE(@MSShippedObjects,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Indexes = ' + ISNULL('''' + REPLACE(@Indexes,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @TimeLimit = ' + ISNULL(CAST(@TimeLimit AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Delay = ' + ISNULL(CAST(@Delay AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @LockTimeout = ' + ISNULL(CAST(@LockTimeout AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL') + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Source: http://ola.hallengren.com' + CHAR(13) + CHAR(10)
  SET @StartMessage = REPLACE(@StartMessage,'%','%%') + ' '
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute is missing. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND (OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@LogToTable%' OR OBJECT_DEFINITION(objects.[object_id]) LIKE '%LOCK_TIMEOUT%'))
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute needs to be updated. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Select databases                                                                           //--
  ----------------------------------------------------------------------------------------------------

  SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition &lt; LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)

  INSERT INTO @tmpDatabases (DatabaseName, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] &lt;&gt; 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Select indexes                                                                             //--
  ----------------------------------------------------------------------------------------------------

  SET @Indexes = REPLACE(@Indexes, ', ', ',');

  WITH Indexes1 (StartPosition, EndPosition, IndexItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Indexes, 1), 0), LEN(@Indexes) + 1) AS EndPosition,
         SUBSTRING(@Indexes, 1, ISNULL(NULLIF(CHARINDEX(',', @Indexes, 1), 0), LEN(@Indexes) + 1) - 1) AS IndexItem
  WHERE @Indexes IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Indexes, EndPosition + 1), 0), LEN(@Indexes) + 1) AS EndPosition,
         SUBSTRING(@Indexes, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Indexes, EndPosition + 1), 0), LEN(@Indexes) + 1) - EndPosition - 1) AS IndexItem
  FROM Indexes1
  WHERE EndPosition &lt; LEN(@Indexes) + 1
  ),
  Indexes2 (IndexItem, Selected) AS
  (
  SELECT CASE WHEN IndexItem LIKE '-%' THEN RIGHT(IndexItem,LEN(IndexItem) - 1) ELSE IndexItem END AS IndexItem,
         CASE WHEN IndexItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Indexes1
  ),
  Indexes3 (IndexItem, Selected) AS
  (
  SELECT CASE WHEN IndexItem = 'ALL_INDEXES' THEN '%.%.%.%' ELSE IndexItem END AS IndexItem,
         Selected
  FROM Indexes2
  ),
  Indexes4 (DatabaseName, SchemaName, ObjectName, IndexName, Selected) AS
  (
  SELECT CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,3) ELSE PARSENAME(IndexItem,4) END AS DatabaseName,
         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,2) ELSE PARSENAME(IndexItem,3) END AS SchemaName,
         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,1) ELSE PARSENAME(IndexItem,2) END AS ObjectName,
         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN '%' ELSE PARSENAME(IndexItem,1) END AS IndexName,
         Selected
  FROM Indexes3
  )
  INSERT INTO @SelectedIndexes (DatabaseName, SchemaName, ObjectName, IndexName, Selected)
  SELECT DatabaseName, SchemaName, ObjectName, IndexName, Selected
  FROM Indexes4
  OPTION (MAXRECURSION 0);

  ----------------------------------------------------------------------------------------------------
  --// Select actions                                                                             //--
  ----------------------------------------------------------------------------------------------------

  WITH FragmentationLow (StartPosition, EndPosition, [Action]) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, 1), 0), LEN(@FragmentationLow) + 1) AS EndPosition,
         SUBSTRING(@FragmentationLow, 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, 1), 0), LEN(@FragmentationLow) + 1) - 1) AS [Action]
  WHERE @FragmentationLow IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, EndPosition + 1), 0), LEN(@FragmentationLow) + 1) AS EndPosition,
         SUBSTRING(@FragmentationLow, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, EndPosition + 1), 0), LEN(@FragmentationLow) + 1) - EndPosition - 1) AS [Action]
  FROM FragmentationLow
  WHERE EndPosition &lt; LEN(@FragmentationLow) + 1
  )
  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])
  SELECT 'Low' AS FragmentationGroup,
         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],
         [Action]
  FROM FragmentationLow
  OPTION (MAXRECURSION 0);

  WITH FragmentationMedium (StartPosition, EndPosition, [Action]) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, 1), 0), LEN(@FragmentationMedium) + 1) AS EndPosition,
         SUBSTRING(@FragmentationMedium, 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, 1), 0), LEN(@FragmentationMedium) + 1) - 1) AS [Action]
  WHERE @FragmentationMedium IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, EndPosition + 1), 0), LEN(@FragmentationMedium) + 1) AS EndPosition,
         SUBSTRING(@FragmentationMedium, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, EndPosition + 1), 0), LEN(@FragmentationMedium) + 1) - EndPosition - 1) AS [Action]
  FROM FragmentationMedium
  WHERE EndPosition &lt; LEN(@FragmentationMedium) + 1
  )
  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])
  SELECT 'Medium' AS FragmentationGroup,
         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],
         [Action]
  FROM FragmentationMedium
  OPTION (MAXRECURSION 0);

  WITH FragmentationHigh (StartPosition, EndPosition, [Action]) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, 1), 0), LEN(@FragmentationHigh) + 1) AS EndPosition,
         SUBSTRING(@FragmentationHigh, 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, 1), 0), LEN(@FragmentationHigh) + 1) - 1) AS [Action]
  WHERE @FragmentationHigh IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, EndPosition + 1), 0), LEN(@FragmentationHigh) + 1) AS EndPosition,
         SUBSTRING(@FragmentationHigh, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, EndPosition + 1), 0), LEN(@FragmentationHigh) + 1) - EndPosition - 1) AS [Action]
  FROM FragmentationHigh
  WHERE EndPosition &lt; LEN(@FragmentationHigh) + 1
  )
  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])
  SELECT 'High' AS FragmentationGroup,
         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],
         [Action]
  FROM FragmentationHigh
  OPTION (MAXRECURSION 0)

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'Low' AND [Action] NOT IN(SELECT * FROM @Actions))
  OR EXISTS(SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'Low' GROUP BY [Action] HAVING COUNT(*) &gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationLow is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'Medium' AND [Action] NOT IN(SELECT * FROM @Actions))
  OR EXISTS(SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'Medium' GROUP BY [Action] HAVING COUNT(*) &gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationMedium is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'High' AND [Action] NOT IN(SELECT * FROM @Actions))
  OR EXISTS(SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'High' GROUP BY [Action] HAVING COUNT(*) &gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationHigh is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @FragmentationLevel1 &lt;= 0 OR @FragmentationLevel1 &gt;= 100 OR @FragmentationLevel1 &gt;= @FragmentationLevel2 OR @FragmentationLevel1 IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationLevel1 is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @FragmentationLevel2 &lt;= 0 OR @FragmentationLevel2 &gt;= 100 OR @FragmentationLevel2 &lt;= @FragmentationLevel1 OR @FragmentationLevel2 IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationLevel2 is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PageCountLevel &lt; 0 OR @PageCountLevel IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PageCountLevel is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @SortInTempdb NOT IN('Y','N') OR @SortInTempdb IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @SortInTempdb is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @MaxDOP &lt; 0 OR @MaxDOP &gt; 64 OR @MaxDOP &gt; (SELECT cpu_count FROM sys.dm_os_sys_info) OR (@MaxDOP &gt; 1 AND SERVERPROPERTY('EngineEdition') &lt;&gt; 3)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @MaxDOP is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @FillFactor &lt;= 0 OR @FillFactor &gt; 100
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FillFactor is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PadIndex NOT IN('Y','N')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PadIndex is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LOBCompaction NOT IN('Y','N') OR @LOBCompaction IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LOBCompaction is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @UpdateStatistics NOT IN('ALL','COLUMNS','INDEX')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @UpdateStatistics is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @OnlyModifiedStatistics NOT IN('Y','N') OR @OnlyModifiedStatistics IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @OnlyModifiedStatistics is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @StatisticsSample &lt;= 0 OR @StatisticsSample  &gt; 100
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @StatisticsSample is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @StatisticsResample NOT IN('Y','N') OR @StatisticsResample IS NULL OR (@StatisticsResample = 'Y' AND @StatisticsSample IS NOT NULL)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @StatisticsResample is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PartitionLevel NOT IN('Y','N') OR @PartitionLevel IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PartitionLevel is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @MSShippedObjects NOT IN('Y','N') OR @MSShippedObjects IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @MSShippedObjects is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS(SELECT * FROM @SelectedIndexes WHERE DatabaseName IS NULL OR SchemaName IS NULL OR ObjectName IS NULL OR IndexName IS NULL) OR (@Indexes IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedIndexes))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Indexes is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @TimeLimit &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @TimeLimit is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Delay &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Delay is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LockTimeout &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LockTimeout is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ErrorMessage = 'The documentation is available at http://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Check Availability Group cluster name                                                      //--
  ----------------------------------------------------------------------------------------------------

  IF @Version &gt;= 11
  BEGIN
    SELECT @Cluster = cluster_name
    FROM sys.dm_hadr_cluster
  END

  ----------------------------------------------------------------------------------------------------
  --// Execute commands                                                                           //--
  ----------------------------------------------------------------------------------------------------

  WHILE EXISTS (SELECT * FROM @tmpDatabases WHERE Selected = 1 AND Completed = 0)
  BEGIN

    SELECT TOP 1 @CurrentDBID = ID,
                 @CurrentDatabaseName = DatabaseName
    FROM @tmpDatabases
    WHERE Selected = 1
    AND Completed = 0
    ORDER BY ID ASC

    SET @CurrentDatabaseID = DB_ID(@CurrentDatabaseName)

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = @CurrentDatabaseID AND database_guid IS NOT NULL)
      BEGIN
        SET @CurrentIsDatabaseAccessible = 1
      END
      ELSE
      BEGIN
        SET @CurrentIsDatabaseAccessible = 0
      END
    END
    ELSE
    BEGIN
      SET @CurrentIsDatabaseAccessible = 0
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL
    BEGIN
      SELECT @CurrentAvailabilityGroup = availability_groups.name,
             @CurrentAvailabilityGroupRole = dm_hadr_availability_replica_states.role_desc
      FROM sys.databases databases
      INNER JOIN sys.availability_databases_cluster availability_databases_cluster ON databases.group_database_id = availability_databases_cluster.group_database_id
      INNER JOIN sys.availability_groups availability_groups ON availability_databases_cluster.group_id = availability_groups.group_id
      INNER JOIN sys.dm_hadr_availability_replica_states dm_hadr_availability_replica_states ON availability_groups.group_id = dm_hadr_availability_replica_states.group_id AND databases.replica_id = dm_hadr_availability_replica_states.replica_id
      WHERE databases.name = @CurrentDatabaseName
    END

    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)
    FROM sys.database_mirroring
    WHERE database_id = @CurrentDatabaseID

    IF @AmazonRDS = 0
    BEGIN
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'PRIMARY'
      END
      ELSE
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'SECONDARY'
      END
    END

    -- Set database message
    SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabaseName) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE WHEN DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') AS nvarchar) + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group: ' + @CurrentAvailabilityGroup + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group role: ' + @CurrentAvailabilityGroupRole + CHAR(13) + CHAR(10)
    IF @CurrentDatabaseMirroringRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Database mirroring role: ' + @CurrentDatabaseMirroringRole + CHAR(13) + CHAR(10)
    IF @CurrentLogShippingRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Log shipping role: ' + @CurrentLogShippingRole + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = REPLACE(@DatabaseMessage,'%','%%') + ' '
    RAISERROR(@DatabaseMessage,10,1) WITH NOWAIT

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    AND NOT (DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)
    AND DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') = 'READ_WRITE'
    BEGIN

      -- Select indexes in the current database
      IF (EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IS NOT NULL) AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)
      BEGIN
        SET @CurrentCommand01 = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, IndexID, IndexName, IndexType, StatisticsID, StatisticsName, PartitionID, PartitionNumber, PartitionCount, Selected, Completed FROM ('

        IF EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IN('ALL','INDEX')
        BEGIN
          SET @CurrentCommand01 = @CurrentCommand01 + 'SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, indexes.index_id AS IndexID, indexes.[name] AS IndexName, indexes.[type] AS IndexType, stats.stats_id AS StatisticsID, stats.name AS StatisticsName'
          IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', partitions.partition_id AS PartitionID, partitions.partition_number AS PartitionNumber, IndexPartitions.partition_count AS PartitionCount'
          IF @PartitionLevel = 'N' SET @CurrentCommand01 = @CurrentCommand01 + ', NULL AS PartitionID, NULL AS PartitionNumber, NULL AS PartitionCount'
          SET @CurrentCommand01 = @CurrentCommand01 + ', 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] LEFT OUTER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats ON indexes.[object_id] = stats.[object_id] AND indexes.[index_id] = stats.[stats_id]'
          IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ' LEFT OUTER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.partitions partitions ON indexes.[object_id] = partitions.[object_id] AND indexes.index_id = partitions.index_id LEFT OUTER JOIN (SELECT partitions.[object_id], partitions.index_id, COUNT(*) AS partition_count FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.partitions partitions GROUP BY partitions.[object_id], partitions.index_id) IndexPartitions ON partitions.[object_id] = IndexPartitions.[object_id] AND partitions.[index_id] = IndexPartitions.[index_id]'
          IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ' LEFT OUTER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.dm_db_partition_stats dm_db_partition_stats ON indexes.[object_id] = dm_db_partition_stats.[object_id] AND indexes.[index_id] = dm_db_partition_stats.[index_id] AND partitions.partition_id = dm_db_partition_stats.partition_id'
          IF @PartitionLevel = 'N' SET @CurrentCommand01 = @CurrentCommand01 + ' LEFT OUTER JOIN (SELECT dm_db_partition_stats.[object_id], dm_db_partition_stats.[index_id], SUM(dm_db_partition_stats.in_row_data_page_count) AS in_row_data_page_count FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.dm_db_partition_stats dm_db_partition_stats GROUP BY dm_db_partition_stats.[object_id], dm_db_partition_stats.[index_id]) dm_db_partition_stats ON indexes.[object_id] = dm_db_partition_stats.[object_id] AND indexes.[index_id] = dm_db_partition_stats.[index_id]'
          SET @CurrentCommand01 = @CurrentCommand01 + ' WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND indexes.[type] IN(1,2,3,4) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0'
          IF (@UpdateStatistics NOT IN('ALL','INDEX') OR @UpdateStatistics IS NULL) AND @PageCountLevel &gt; 0 SET @CurrentCommand01 = @CurrentCommand01 + ' AND (dm_db_partition_stats.in_row_data_page_count &gt;= @ParamPageCountLevel OR dm_db_partition_stats.in_row_data_page_count IS NULL)'
          IF NOT EXISTS(SELECT * FROM @ActionsPreferred) SET @CurrentCommand01 = @CurrentCommand01 + ' AND stats.stats_id IS NOT NULL'
        END

        IF (EXISTS(SELECT * FROM @ActionsPreferred) AND @UpdateStatistics = 'COLUMNS') OR @UpdateStatistics = 'ALL' SET @CurrentCommand01 = @CurrentCommand01 + ' UNION '

        IF @UpdateStatistics IN('ALL','COLUMNS') SET @CurrentCommand01 = @CurrentCommand01 + 'SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, NULL AS IndexID, NULL AS IndexName, NULL AS IndexType, stats.stats_id AS StatisticsID, stats.name AS StatisticsName, NULL AS PartitionID, NULL AS PartitionNumber, NULL AS PartitionCount, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON stats.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND NOT EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.[object_id] = stats.[object_id] AND indexes.index_id = stats.stats_id)'

        SET @CurrentCommand01 = @CurrentCommand01 + ') IndexesStatistics ORDER BY SchemaName ASC, ObjectName ASC'
        IF (EXISTS(SELECT * FROM @ActionsPreferred) AND @UpdateStatistics = 'COLUMNS') OR @UpdateStatistics = 'ALL' SET @CurrentCommand01 = @CurrentCommand01 + ', CASE WHEN IndexType IS NULL THEN 1 ELSE 0 END ASC'
        IF EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IN('ALL','INDEX') SET @CurrentCommand01 = @CurrentCommand01 + ', IndexType ASC, IndexName ASC'
        IF @UpdateStatistics IN('ALL','COLUMNS') SET @CurrentCommand01 = @CurrentCommand01 + ', StatisticsName ASC'
        IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', PartitionNumber ASC'

        INSERT INTO @tmpIndexesStatistics (SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, IndexID, IndexName, IndexType, StatisticsID, StatisticsName, PartitionID, PartitionNumber, PartitionCount, Selected, Completed)
        EXECUTE sp_executesql @statement = @CurrentCommand01, @params = N'@ParamPageCountLevel int', @ParamPageCountLevel = @PageCountLevel
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0
        BEGIN
          SET @ReturnCode = @Error
        END
      END

      IF @Indexes IS NULL
      BEGIN
        UPDATE tmpIndexesStatistics
        SET tmpIndexesStatistics.Selected = 1
        FROM @tmpIndexesStatistics tmpIndexesStatistics
      END
      ELSE
      BEGIN
        UPDATE tmpIndexesStatistics
        SET tmpIndexesStatistics.Selected = SelectedIndexes.Selected
        FROM @tmpIndexesStatistics tmpIndexesStatistics
        INNER JOIN @SelectedIndexes SelectedIndexes
        ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')
        WHERE SelectedIndexes.Selected = 1

        UPDATE tmpIndexesStatistics
        SET tmpIndexesStatistics.Selected = SelectedIndexes.Selected
        FROM @tmpIndexesStatistics tmpIndexesStatistics
        INNER JOIN @SelectedIndexes SelectedIndexes
        ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')
        WHERE SelectedIndexes.Selected = 0
      END

      WHILE EXISTS (SELECT * FROM @tmpIndexesStatistics WHERE Selected = 1 AND Completed = 0 AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL))
      BEGIN

        SELECT TOP 1 @CurrentIxID = ID,
                     @CurrentSchemaID = SchemaID,
                     @CurrentSchemaName = SchemaName,
                     @CurrentObjectID = ObjectID,
                     @CurrentObjectName = ObjectName,
                     @CurrentObjectType = ObjectType,
                     @CurrentIndexID = IndexID,
                     @CurrentIndexName = IndexName,
                     @CurrentIndexType = IndexType,
                     @CurrentStatisticsID = StatisticsID,
                     @CurrentStatisticsName = StatisticsName,
                     @CurrentPartitionID = PartitionID,
                     @CurrentPartitionNumber = PartitionNumber,
                     @CurrentPartitionCount = PartitionCount
        FROM @tmpIndexesStatistics
        WHERE Selected = 1
        AND Completed = 0
        ORDER BY ID ASC

        -- Is the index a partition?
        IF @CurrentPartitionNumber IS NULL OR @CurrentPartitionCount = 1 BEGIN SET @CurrentIsPartition = 0 END ELSE BEGIN SET @CurrentIsPartition = 1 END

        -- Does the index exist?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand02 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand02 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          IF @CurrentIsPartition = 0 SET @CurrentCommand02 = @CurrentCommand02 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND indexes.[type] IN(1,2,3,4) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0 AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND indexes.index_id = @ParamIndexID AND indexes.[name] = @ParamIndexName AND indexes.[type] = @ParamIndexType) BEGIN SET @ParamIndexExists = 1 END'
          IF @CurrentIsPartition = 1 SET @CurrentCommand02 = @CurrentCommand02 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.partitions partitions ON indexes.[object_id] = partitions.[object_id] AND indexes.index_id = partitions.index_id WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND indexes.[type] IN(1,2,3,4) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0 AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND indexes.index_id = @ParamIndexID AND indexes.[name] = @ParamIndexName AND indexes.[type] = @ParamIndexType AND partitions.partition_id = @ParamPartitionID AND partitions.partition_number = @ParamPartitionNumber) BEGIN SET @ParamIndexExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand02, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamIndexID int, @ParamIndexName sysname, @ParamIndexType int, @ParamPartitionID bigint, @ParamPartitionNumber int, @ParamIndexExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamIndexID = @CurrentIndexID, @ParamIndexName = @CurrentIndexName, @ParamIndexType = @CurrentIndexType, @ParamPartitionID = @CurrentPartitionID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamIndexExists = @CurrentIndexExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIndexExists IS NULL SET @CurrentIndexExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
          IF @CurrentIndexExists = 0 GOTO NoAction
        END

        -- Does the statistics exist?
        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL
        BEGIN
          SET @CurrentCommand03 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand03 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand03 = @CurrentCommand03 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON stats.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND stats.stats_id = @ParamStatisticsID AND stats.[name] = @ParamStatisticsName) BEGIN SET @ParamStatisticsExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand03, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamStatisticsID int, @ParamStatisticsName sysname, @ParamStatisticsExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamStatisticsID = @CurrentStatisticsID, @ParamStatisticsName = @CurrentStatisticsName, @ParamStatisticsExists = @CurrentStatisticsExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentStatisticsExists IS NULL SET @CurrentStatisticsExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the statistics exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
          IF @CurrentStatisticsExists = 0 GOTO NoAction
        END

        -- Is one of the columns in the index an image, text or ntext data type?
        IF @CurrentIndexID IS NOT NULL AND @CurrentIndexType = 1 AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand04 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand04 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand04 = @CurrentCommand04 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.types types ON columns.system_type_id = types.user_type_id WHERE columns.[object_id] = @ParamObjectID AND types.name IN(''image'',''text'',''ntext'')) BEGIN SET @ParamIsImageText = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand04, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamIsImageText bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamIsImageText = @CurrentIsImageText OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsImageText IS NULL SET @CurrentIsImageText = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index contains any image, text, or ntext data types.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is one of the columns in the index an xml, varchar(max), nvarchar(max), varbinary(max) or large CLR data type?
        IF @CurrentIndexID IS NOT NULL AND @CurrentIndexType IN(1,2) AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand05 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand05 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          IF @CurrentIndexType = 1 SET @CurrentCommand05 = @CurrentCommand05 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.types types ON columns.system_type_id = types.user_type_id OR (columns.user_type_id = types.user_type_id AND types.is_assembly_type = 1) WHERE columns.[object_id] = @ParamObjectID AND (types.name IN(''xml'') OR (types.name IN(''varchar'',''nvarchar'',''varbinary'') AND columns.max_length = -1) OR (types.is_assembly_type = 1 AND columns.max_length = -1))) BEGIN SET @ParamIsNewLOB = 1 END'
          IF @CurrentIndexType = 2 SET @CurrentCommand05 = @CurrentCommand05 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.index_columns index_columns INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns ON index_columns.[object_id] = columns.[object_id] AND index_columns.column_id = columns.column_id INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.types types ON columns.system_type_id = types.user_type_id OR (columns.user_type_id = types.user_type_id AND types.is_assembly_type = 1) WHERE index_columns.[object_id] = @ParamObjectID AND index_columns.index_id = @ParamIndexID AND (types.[name] IN(''xml'') OR (types.[name] IN(''varchar'',''nvarchar'',''varbinary'') AND columns.max_length = -1) OR (types.is_assembly_type = 1 AND columns.max_length = -1))) BEGIN SET @ParamIsNewLOB = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand05, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamIsNewLOB bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamIsNewLOB = @CurrentIsNewLOB OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsNewLOB IS NULL SET @CurrentIsNewLOB = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index contains any xml, varchar(max), nvarchar(max), varbinary(max), or large CLR data types.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is one of the columns in the index a file stream column?
        IF @CurrentIndexID IS NOT NULL AND @CurrentIndexType = 1 AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand06 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand06 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand06 = @CurrentCommand06 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns WHERE columns.[object_id] = @ParamObjectID  AND columns.is_filestream = 1) BEGIN SET @ParamIsFileStream = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand06, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamIsFileStream bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamIsFileStream = @CurrentIsFileStream OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsFileStream IS NULL SET @CurrentIsFileStream = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index contains any file stream columns.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is there a columnstore index on the table?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred) AND @Version &gt;= 11
        BEGIN
          SET @CurrentCommand07 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand07 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand07 = @CurrentCommand07 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.[object_id] = @ParamObjectID AND [type] = 6) BEGIN SET @ParamIsColumnStore = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand07, @params = N'@ParamObjectID int, @ParamIsColumnStore bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIsColumnStore = @CurrentIsColumnStore OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsColumnStore IS NULL SET @CurrentIsColumnStore = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if there is a columnstore index on the table.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is Allow_Page_Locks set to On?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand08 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand08 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand08 = @CurrentCommand08 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.[object_id] = @ParamObjectID AND indexes.[index_id] = @ParamIndexID AND indexes.[allow_page_locks] = 1) BEGIN SET @ParamAllowPageLocks = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand08, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamAllowPageLocks bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamAllowPageLocks = @CurrentAllowPageLocks OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentAllowPageLocks IS NULL SET @CurrentAllowPageLocks = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if page locking is enabled on the index.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is No_Recompute set to On?
        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL
        BEGIN
          SET @CurrentCommand09 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand09 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand09 = @CurrentCommand09 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats WHERE stats.[object_id] = @ParamObjectID AND stats.[stats_id] = @ParamStatisticsID AND stats.[no_recompute] = 1) BEGIN SET @ParamNoRecompute = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand09, @params = N'@ParamObjectID int, @ParamStatisticsID int, @ParamNoRecompute bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamStatisticsID = @CurrentStatisticsID, @ParamNoRecompute = @CurrentNoRecompute OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentNoRecompute IS NULL SET @CurrentNoRecompute = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if automatic statistics update is enabled.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Has the data in the statistics been modified since the statistics was last updated?
        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL AND @OnlyModifiedStatistics = 'Y'
        BEGIN
          SET @CurrentCommand10 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand10 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          IF (@Version &gt;= 10.504000 AND @Version &lt; 11) OR @Version &gt;= 11.03000
          BEGIN
            SET @CurrentCommand10 = @CurrentCommand10 + 'USE ' + QUOTENAME(@CurrentDatabaseName) + '; IF EXISTS(SELECT * FROM sys.dm_db_stats_properties (@ParamObjectID, @ParamStatisticsID) WHERE modification_counter &gt; 0) BEGIN SET @ParamStatisticsModified = 1 END'
          END
          ELSE
          BEGIN
            SET @CurrentCommand10 = @CurrentCommand10 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.sysindexes sysindexes WHERE sysindexes.[id] = @ParamObjectID AND sysindexes.[indid] = @ParamStatisticsID AND sysindexes.[rowmodctr] &lt;&gt; 0) BEGIN SET @ParamStatisticsModified = 1 END'
          END

          EXECUTE sp_executesql @statement = @CurrentCommand10, @params = N'@ParamObjectID int, @ParamStatisticsID int, @ParamStatisticsModified bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamStatisticsID = @CurrentStatisticsID, @ParamStatisticsModified = @CurrentStatisticsModified OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentStatisticsModified IS NULL SET @CurrentStatisticsModified = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if any rows has been modified since the most recent statistics update.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is the index on a read-only filegroup?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand11 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand11 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand11 = @CurrentCommand11 + 'IF EXISTS(SELECT * FROM (SELECT filegroups.data_space_id FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.destination_data_spaces destination_data_spaces ON indexes.data_space_id = destination_data_spaces.partition_scheme_id INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ON destination_data_spaces.data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND indexes.[object_id] = @ParamObjectID AND indexes.[index_id] = @ParamIndexID'
          IF @CurrentIsPartition = 1 SET @CurrentCommand11 = @CurrentCommand11 + ' AND destination_data_spaces.destination_id = @ParamPartitionNumber'
          SET @CurrentCommand11 = @CurrentCommand11 + ' UNION SELECT filegroups.data_space_id FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ON indexes.data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND indexes.[object_id] = @ParamObjectID AND indexes.[index_id] = @ParamIndexID'
          IF @CurrentIndexType = 1 SET @CurrentCommand11 = @CurrentCommand11 + ' UNION SELECT filegroups.data_space_id FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.tables tables INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ON tables.lob_data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND tables.[object_id] = @ParamObjectID'
          SET @CurrentCommand11 = @CurrentCommand11 + ') ReadOnlyFileGroups) BEGIN SET @ParamOnReadOnlyFileGroup = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand11, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamPartitionNumber int, @ParamOnReadOnlyFileGroup bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamOnReadOnlyFileGroup = @CurrentOnReadOnlyFileGroup OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentOnReadOnlyFileGroup IS NULL SET @CurrentOnReadOnlyFileGroup = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index is on a read-only filegroup.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is the index fragmented?
        IF @CurrentIndexID IS NOT NULL
        AND @CurrentOnReadOnlyFileGroup = 0
        AND EXISTS(SELECT * FROM @ActionsPreferred)
        AND (EXISTS(SELECT [Priority], [Action], COUNT(*) FROM @ActionsPreferred GROUP BY [Priority], [Action] HAVING COUNT(*) &lt;&gt; 3) OR @PageCountLevel &gt; 0)
        BEGIN
          SET @CurrentCommand12 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand12 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand12 = @CurrentCommand12 + 'SELECT @ParamFragmentationLevel = MAX(avg_fragmentation_in_percent), @ParamPageCount = SUM(page_count) FROM sys.dm_db_index_physical_stats(@ParamDatabaseID, @ParamObjectID, @ParamIndexID, @ParamPartitionNumber, ''LIMITED'') WHERE alloc_unit_type_desc = ''IN_ROW_DATA'' AND index_level = 0'

          EXECUTE sp_executesql @statement = @CurrentCommand12, @params = N'@ParamDatabaseID int, @ParamObjectID int, @ParamIndexID int, @ParamPartitionNumber int, @ParamFragmentationLevel float OUTPUT, @ParamPageCount bigint OUTPUT', @ParamDatabaseID = @CurrentDatabaseID, @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamFragmentationLevel = @CurrentFragmentationLevel OUTPUT, @ParamPageCount = @CurrentPageCount OUTPUT
          SET @Error = @@ERROR
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. The size and fragmentation of the index could not be checked.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Select fragmentation group
        IF @CurrentIndexID IS NOT NULL AND @CurrentOnReadOnlyFileGroup = 0 AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentFragmentationGroup = CASE
          WHEN @CurrentFragmentationLevel &gt;= @FragmentationLevel2 THEN 'High'
          WHEN @CurrentFragmentationLevel &gt;= @FragmentationLevel1 AND @CurrentFragmentationLevel &lt; @FragmentationLevel2 THEN 'Medium'
          WHEN @CurrentFragmentationLevel &lt; @FragmentationLevel1 THEN 'Low'
          END
        END

        -- Which actions are allowed?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          IF @CurrentOnReadOnlyFileGroup = 0 AND @CurrentAllowPageLocks = 1
          BEGIN
            INSERT INTO @CurrentActionsAllowed ([Action])
            VALUES ('INDEX_REORGANIZE')
          END
          IF @CurrentOnReadOnlyFileGroup = 0
          BEGIN
            INSERT INTO @CurrentActionsAllowed ([Action])
            VALUES ('INDEX_REBUILD_OFFLINE')
          END
          IF @CurrentOnReadOnlyFileGroup = 0
          AND (@CurrentIsPartition = 0 OR @Version &gt;= 12)
          AND ((@CurrentIndexType = 1 AND @CurrentIsImageText = 0 AND @CurrentIsNewLOB = 0)
          OR (@CurrentIndexType = 2 AND @CurrentIsNewLOB = 0)
          OR (@CurrentIndexType = 1 AND @CurrentIsImageText = 0 AND @CurrentIsFileStream = 0 AND @Version &gt;= 11)
          OR (@CurrentIndexType = 2 AND @Version &gt;= 11))
          AND (@CurrentIsColumnStore = 0 OR @Version &lt; 11)
          AND SERVERPROPERTY('EngineEdition') = 3
          BEGIN
            INSERT INTO @CurrentActionsAllowed ([Action])
            VALUES ('INDEX_REBUILD_ONLINE')
          END
        END

        -- Decide action
        IF @CurrentIndexID IS NOT NULL
        AND EXISTS(SELECT * FROM @ActionsPreferred)
        AND (@CurrentPageCount &gt;= @PageCountLevel OR @PageCountLevel = 0)
        BEGIN
          IF EXISTS(SELECT [Priority], [Action], COUNT(*) FROM @ActionsPreferred GROUP BY [Priority], [Action] HAVING COUNT(*) &lt;&gt; 3)
          BEGIN
            SELECT @CurrentAction = [Action]
            FROM @ActionsPreferred
            WHERE FragmentationGroup = @CurrentFragmentationGroup
            AND [Priority] = (SELECT MIN([Priority])
                              FROM @ActionsPreferred
                              WHERE FragmentationGroup = @CurrentFragmentationGroup
                              AND [Action] IN (SELECT [Action] FROM @CurrentActionsAllowed))
          END
          ELSE
          BEGIN
            SELECT @CurrentAction = [Action]
            FROM @ActionsPreferred
            WHERE [Priority] = (SELECT MIN([Priority])
                                FROM @ActionsPreferred
                                WHERE [Action] IN (SELECT [Action] FROM @CurrentActionsAllowed))
          END
        END

        -- Workaround for limitation in SQL Server, http://support.microsoft.com/kb/2292737
        IF @CurrentIndexID IS NOT NULL
        BEGIN
          SET @CurrentMaxDOP = @MaxDOP
          IF @CurrentAction = 'INDEX_REBUILD_ONLINE' AND @CurrentAllowPageLocks = 0
          BEGIN
            SET @CurrentMaxDOP = 1
          END
        END

        -- Update statistics?
        IF @CurrentStatisticsID IS NOT NULL
        AND (@UpdateStatistics = 'ALL' OR (@UpdateStatistics = 'INDEX' AND @CurrentIndexID IS NOT NULL) OR (@UpdateStatistics = 'COLUMNS' AND @CurrentIndexID IS NULL))
        AND (@CurrentStatisticsModified = 1 OR @OnlyModifiedStatistics = 'N')
        AND ((@CurrentIsPartition = 0 AND (@CurrentAction NOT IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') OR @CurrentAction IS NULL)) OR (@CurrentIsPartition = 1 AND @CurrentPartitionNumber = @CurrentPartitionCount))
        BEGIN
          SET @CurrentUpdateStatistics = 'Y'
        END
        ELSE
        BEGIN
          SET @CurrentUpdateStatistics = 'N'
        END

        -- Create comment
        IF @CurrentIndexID IS NOT NULL
        BEGIN
          SET @CurrentComment = 'ObjectType: ' + CASE WHEN @CurrentObjectType = 'U' THEN 'Table' WHEN @CurrentObjectType = 'V' THEN 'View' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'IndexType: ' + CASE WHEN @CurrentIndexType = 1 THEN 'Clustered' WHEN @CurrentIndexType = 2 THEN 'NonClustered' WHEN @CurrentIndexType = 3 THEN 'XML' WHEN @CurrentIndexType = 4 THEN 'Spatial' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'ImageText: ' + CASE WHEN @CurrentIsImageText = 1 THEN 'Yes' WHEN @CurrentIsImageText = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'NewLOB: ' + CASE WHEN @CurrentIsNewLOB = 1 THEN 'Yes' WHEN @CurrentIsNewLOB = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'FileStream: ' + CASE WHEN @CurrentIsFileStream = 1 THEN 'Yes' WHEN @CurrentIsFileStream = 0 THEN 'No' ELSE 'N/A' END + ', '
          IF @Version &gt;= 11 SET @CurrentComment = @CurrentComment + 'ColumnStore: ' + CASE WHEN @CurrentIsColumnStore = 1 THEN 'Yes' WHEN @CurrentIsColumnStore = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'AllowPageLocks: ' + CASE WHEN @CurrentAllowPageLocks = 1 THEN 'Yes' WHEN @CurrentAllowPageLocks = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'PageCount: ' + ISNULL(CAST(@CurrentPageCount AS nvarchar),'N/A') + ', '
          SET @CurrentComment = @CurrentComment + 'Fragmentation: ' + ISNULL(CAST(@CurrentFragmentationLevel AS nvarchar),'N/A')
        END

        IF @CurrentIndexID IS NOT NULL AND (@CurrentPageCount IS NOT NULL OR @CurrentFragmentationLevel IS NOT NULL)
        BEGIN
        SET @CurrentExtendedInfo = (SELECT *
                                    FROM (SELECT CAST(@CurrentPageCount AS nvarchar) AS [PageCount],
                                                 CAST(@CurrentFragmentationLevel AS nvarchar) AS Fragmentation
                                    ) ExtendedInfo FOR XML AUTO, ELEMENTS)
        END

        IF @CurrentIndexID IS NOT NULL AND @CurrentAction IS NOT NULL AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)
        BEGIN
          SET @CurrentCommandType13 = 'ALTER_INDEX'

          SET @CurrentCommand13 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand13 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand13 = @CurrentCommand13 + 'ALTER INDEX ' + QUOTENAME(@CurrentIndexName) + ' ON ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName)

          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE')
          BEGIN
            SET @CurrentCommand13 = @CurrentCommand13 + ' REBUILD'
            IF @CurrentIsPartition = 1 SET @CurrentCommand13 = @CurrentCommand13 + ' PARTITION = ' + CAST(@CurrentPartitionNumber AS nvarchar)
            SET @CurrentCommand13 = @CurrentCommand13 + ' WITH ('
            IF @SortInTempdb = 'Y' SET @CurrentCommand13 = @CurrentCommand13 + 'SORT_IN_TEMPDB = ON'
            IF @SortInTempdb = 'N' SET @CurrentCommand13 = @CurrentCommand13 + 'SORT_IN_TEMPDB = OFF'
            IF @CurrentAction = 'INDEX_REBUILD_ONLINE' AND (@CurrentIsPartition = 0 OR @Version &gt;= 12) SET @CurrentCommand13 = @CurrentCommand13 + ', ONLINE = ON'
            IF @CurrentAction = 'INDEX_REBUILD_OFFLINE' AND (@CurrentIsPartition = 0 OR @Version &gt;= 12) SET @CurrentCommand13 = @CurrentCommand13 + ', ONLINE = OFF'
            IF @CurrentMaxDOP IS NOT NULL SET @CurrentCommand13 = @CurrentCommand13 + ', MAXDOP = ' + CAST(@CurrentMaxDOP AS nvarchar)
            IF @FillFactor IS NOT NULL AND @CurrentIsPartition = 0 SET @CurrentCommand13 = @CurrentCommand13 + ', FILLFACTOR = ' + CAST(@FillFactor AS nvarchar)
            IF @PadIndex = 'Y' AND @CurrentIsPartition = 0 SET @CurrentCommand13 = @CurrentCommand13 + ', PAD_INDEX = ON'
            IF @PadIndex = 'N' AND @CurrentIsPartition = 0 SET @CurrentCommand13 = @CurrentCommand13 + ', PAD_INDEX = OFF'
            SET @CurrentCommand13 = @CurrentCommand13 + ')'
          END

          IF @CurrentAction IN('INDEX_REORGANIZE')
          BEGIN
            SET @CurrentCommand13 = @CurrentCommand13 + ' REORGANIZE'
            IF @CurrentIsPartition = 1 SET @CurrentCommand13 = @CurrentCommand13 + ' PARTITION = ' + CAST(@CurrentPartitionNumber AS nvarchar)
            SET @CurrentCommand13 = @CurrentCommand13 + ' WITH ('
            IF @LOBCompaction = 'Y' SET @CurrentCommand13 = @CurrentCommand13 + 'LOB_COMPACTION = ON'
            IF @LOBCompaction = 'N' SET @CurrentCommand13 = @CurrentCommand13 + 'LOB_COMPACTION = OFF'
            SET @CurrentCommand13 = @CurrentCommand13 + ')'
          END

          EXECUTE @CurrentCommandOutput13 = [dbo].[CommandExecute] @Command = @CurrentCommand13, @CommandType = @CurrentCommandType13, @Mode = 2, @Comment = @CurrentComment, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @IndexName = @CurrentIndexName, @IndexType = @CurrentIndexType, @PartitionNumber = @CurrentPartitionNumber, @ExtendedInfo = @CurrentExtendedInfo, @LogToTable = @LogToTable, @Execute = @Execute
          SET @Error = @@ERROR
          IF @Error &lt;&gt; 0 SET @CurrentCommandOutput13 = @Error
          IF @CurrentCommandOutput13 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput13

          IF @Delay &gt; 0
          BEGIN
            SET @CurrentDelay = DATEADD(ss,@Delay,'1900-01-01')
            WAITFOR DELAY @CurrentDelay
          END
        END

        IF @CurrentStatisticsID IS NOT NULL AND @CurrentUpdateStatistics = 'Y' AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)
        BEGIN
          SET @CurrentCommandType14 = 'UPDATE_STATISTICS'

          SET @CurrentCommand14 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand14 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand14 = @CurrentCommand14 + 'UPDATE STATISTICS ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' ' + QUOTENAME(@CurrentStatisticsName)
          IF @StatisticsSample IS NOT NULL OR @StatisticsResample = 'Y' OR @CurrentNoRecompute = 1 SET @CurrentCommand14 = @CurrentCommand14 + ' WITH'
          IF @StatisticsSample = 100 SET @CurrentCommand14 = @CurrentCommand14 + ' FULLSCAN'
          IF @StatisticsSample IS NOT NULL AND @StatisticsSample &lt;&gt; 100 SET @CurrentCommand14 = @CurrentCommand14 + ' SAMPLE ' + CAST(@StatisticsSample AS nvarchar) + ' PERCENT'
          IF @StatisticsResample = 'Y' SET @CurrentCommand14 = @CurrentCommand14 + ' RESAMPLE'
          IF (@StatisticsSample IS NOT NULL OR @StatisticsResample = 'Y') AND @CurrentNoRecompute = 1 SET @CurrentCommand14 = @CurrentCommand14 + ','
          IF @CurrentNoRecompute = 1 SET @CurrentCommand14 = @CurrentCommand14 + ' NORECOMPUTE'

          EXECUTE @CurrentCommandOutput14 = [dbo].[CommandExecute] @Command = @CurrentCommand14, @CommandType = @CurrentCommandType14, @Mode = 2, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @IndexName = @CurrentIndexName, @IndexType = @CurrentIndexType, @StatisticsName = @CurrentStatisticsName, @LogToTable = @LogToTable, @Execute = @Execute
          SET @Error = @@ERROR
          IF @Error &lt;&gt; 0 SET @CurrentCommandOutput14 = @Error
          IF @CurrentCommandOutput14 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput14
        END

        NoAction:

        -- Update that the index is completed
        UPDATE @tmpIndexesStatistics
        SET Completed = 1
        WHERE Selected = 1
        AND Completed = 0
        AND ID = @CurrentIxID

        -- Clear variables
        SET @CurrentCommand02 = NULL
        SET @CurrentCommand03 = NULL
        SET @CurrentCommand04 = NULL
        SET @CurrentCommand05 = NULL
        SET @CurrentCommand06 = NULL
        SET @CurrentCommand07 = NULL
        SET @CurrentCommand08 = NULL
        SET @CurrentCommand09 = NULL
        SET @CurrentCommand10 = NULL
        SET @CurrentCommand11 = NULL
        SET @CurrentCommand12 = NULL
        SET @CurrentCommand13 = NULL
        SET @CurrentCommand14 = NULL

        SET @CurrentCommandOutput13 = NULL
        SET @CurrentCommandOutput14 = NULL

        SET @CurrentCommandType13 = NULL
        SET @CurrentCommandType14 = NULL

        SET @CurrentIxID = NULL
        SET @CurrentSchemaID = NULL
        SET @CurrentSchemaName = NULL
        SET @CurrentObjectID = NULL
        SET @CurrentObjectName = NULL
        SET @CurrentObjectType = NULL
        SET @CurrentIndexID = NULL
        SET @CurrentIndexName = NULL
        SET @CurrentIndexType = NULL
        SET @CurrentStatisticsID = NULL
        SET @CurrentStatisticsName = NULL
        SET @CurrentPartitionID = NULL
        SET @CurrentPartitionNumber = NULL
        SET @CurrentPartitionCount = NULL
        SET @CurrentIsPartition = NULL
        SET @CurrentIndexExists = NULL
        SET @CurrentStatisticsExists = NULL
        SET @CurrentIsImageText = NULL
        SET @CurrentIsNewLOB = NULL
        SET @CurrentIsFileStream = NULL
        SET @CurrentIsColumnStore = NULL
        SET @CurrentAllowPageLocks = NULL
        SET @CurrentNoRecompute = NULL
        SET @CurrentStatisticsModified = NULL
        SET @CurrentOnReadOnlyFileGroup = NULL
        SET @CurrentFragmentationLevel = NULL
        SET @CurrentPageCount = NULL
        SET @CurrentFragmentationGroup = NULL
        SET @CurrentAction = NULL
        SET @CurrentMaxDOP = NULL
        SET @CurrentUpdateStatistics = NULL
        SET @CurrentComment = NULL
        SET @CurrentExtendedInfo = NULL

        DELETE FROM @CurrentActionsAllowed

      END

    END

    -- Update that the database is completed
    UPDATE @tmpDatabases
    SET Completed = 1
    WHERE Selected = 1
    AND Completed = 0
    AND ID = @CurrentDBID

    -- Clear variables
    SET @CurrentDBID = NULL
    SET @CurrentDatabaseID = NULL
    SET @CurrentDatabaseName = NULL
    SET @CurrentIsDatabaseAccessible = NULL
    SET @CurrentAvailabilityGroup = NULL
    SET @CurrentAvailabilityGroupRole = NULL
    SET @CurrentDatabaseMirroringRole = NULL
    SET @CurrentLogShippingRole = NULL

    SET @CurrentCommand01 = NULL

    DELETE FROM @tmpIndexesStatistics

  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  Logging:
  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120)
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO

IF (SELECT CAST([Value] AS int) FROM #Config WHERE Name = 'Error') = 0
AND (SELECT [Value] FROM #Config WHERE Name = 'CreateJobs') = 'Y'
AND SERVERPROPERTY('EngineEdition') &lt;&gt; 4
BEGIN

  DECLARE @BackupDirectory nvarchar(max)
  DECLARE @OutputFileDirectory nvarchar(max)
  DECLARE @LogToTable nvarchar(max)
  DECLARE @DatabaseName nvarchar(max)

  DECLARE @Version numeric(18,10)

  DECLARE @TokenServer nvarchar(max)
  DECLARE @TokenJobID nvarchar(max)
  DECLARE @TokenStepID nvarchar(max)
  DECLARE @TokenDate nvarchar(max)
  DECLARE @TokenTime nvarchar(max)

  DECLARE @JobDescription nvarchar(max)
  DECLARE @JobCategory nvarchar(max)
  DECLARE @JobOwner nvarchar(max)

  DECLARE @JobName01 nvarchar(max)
  DECLARE @JobName02 nvarchar(max)
  DECLARE @JobName03 nvarchar(max)
  DECLARE @JobName04 nvarchar(max)
  DECLARE @JobName05 nvarchar(max)
  DECLARE @JobName06 nvarchar(max)
  DECLARE @JobName07 nvarchar(max)
  DECLARE @JobName08 nvarchar(max)
  DECLARE @JobName09 nvarchar(max)
  DECLARE @JobName10 nvarchar(max)
  DECLARE @JobName11 nvarchar(max)

  DECLARE @JobCommand01 nvarchar(max)
  DECLARE @JobCommand02 nvarchar(max)
  DECLARE @JobCommand03 nvarchar(max)
  DECLARE @JobCommand04 nvarchar(max)
  DECLARE @JobCommand05 nvarchar(max)
  DECLARE @JobCommand06 nvarchar(max)
  DECLARE @JobCommand07 nvarchar(max)
  DECLARE @JobCommand08 nvarchar(max)
  DECLARE @JobCommand09 nvarchar(max)
  DECLARE @JobCommand10 nvarchar(max)
  DECLARE @JobCommand11 nvarchar(max)

  DECLARE @OutputFile01 nvarchar(max)
  DECLARE @OutputFile02 nvarchar(max)
  DECLARE @OutputFile03 nvarchar(max)
  DECLARE @OutputFile04 nvarchar(max)
  DECLARE @OutputFile05 nvarchar(max)
  DECLARE @OutputFile06 nvarchar(max)
  DECLARE @OutputFile07 nvarchar(max)
  DECLARE @OutputFile08 nvarchar(max)
  DECLARE @OutputFile09 nvarchar(max)
  DECLARE @OutputFile10 nvarchar(max)
  DECLARE @OutputFile11 nvarchar(max)

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  IF @Version &gt;= 9.002047
  BEGIN
    SET @TokenServer = '$' + '(ESCAPE_SQUOTE(SRVR))'
    SET @TokenJobID = '$' + '(ESCAPE_SQUOTE(JOBID))'
    SET @TokenStepID = '$' + '(ESCAPE_SQUOTE(STEPID))'
    SET @TokenDate = '$' + '(ESCAPE_SQUOTE(STRTDT))'
    SET @TokenTime = '$' + '(ESCAPE_SQUOTE(STRTTM))'
  END
  ELSE
  BEGIN
    SET @TokenServer = '$' + '(SRVR)'
    SET @TokenJobID = '$' + '(JOBID)'
    SET @TokenStepID = '$' + '(STEPID)'
    SET @TokenDate = '$' + '(STRTDT)'
    SET @TokenTime = '$' + '(STRTTM)'
  END

  SELECT @BackupDirectory = Value
  FROM #Config
  WHERE [Name] = 'BackupDirectory'

  SELECT @OutputFileDirectory = Value
  FROM #Config
  WHERE [Name] = 'OutputFileDirectory'

  SELECT @LogToTable = Value
  FROM #Config
  WHERE [Name] = 'LogToTable'

  SELECT @DatabaseName = Value
  FROM #Config
  WHERE [Name] = 'DatabaseName'

  SET @JobDescription = 'Source: http://ola.hallengren.com'
  SET @JobCategory = 'Database Maintenance'
  SET @JobOwner = SUSER_SNAME(0x01)

  SET @JobName01 = 'DatabaseBackup - SYSTEM_DATABASES - FULL'
  SET @JobCommand01 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''SYSTEM_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''FULL'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile01 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile01) &gt; 200 SET @OutputFile01 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile01) &gt; 200 SET @OutputFile01 = NULL

  SET @JobName02 = 'DatabaseBackup - USER_DATABASES - DIFF'
  SET @JobCommand02 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''USER_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''DIFF'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile02 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile02) &gt; 200 SET @OutputFile02 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile02) &gt; 200 SET @OutputFile02 = NULL

  SET @JobName03 = 'DatabaseBackup - USER_DATABASES - FULL'
  SET @JobCommand03 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''USER_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''FULL'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile03 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile03) &gt; 200 SET @OutputFile03 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile03) &gt; 200 SET @OutputFile03 = NULL

  SET @JobName04 = 'DatabaseBackup - USER_DATABASES - LOG'
  SET @JobCommand04 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''USER_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''LOG'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile04 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile04) &gt; 200 SET @OutputFile04 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile04) &gt; 200 SET @OutputFile04 = NULL

  SET @JobName05 = 'DatabaseIntegrityCheck - SYSTEM_DATABASES'
  SET @JobCommand05 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseIntegrityCheck] @Databases = ''SYSTEM_DATABASES''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile05 = @OutputFileDirectory + '\' + 'DatabaseIntegrityCheck_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile05) &gt; 200 SET @OutputFile05 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile05) &gt; 200 SET @OutputFile05 = NULL

  SET @JobName06 = 'DatabaseIntegrityCheck - USER_DATABASES'
  SET @JobCommand06 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseIntegrityCheck] @Databases = ''USER_DATABASES''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile06 = @OutputFileDirectory + '\' + 'DatabaseIntegrityCheck_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile06) &gt; 200 SET @OutputFile06 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile06) &gt; 200 SET @OutputFile06 = NULL

  SET @JobName07 = 'IndexOptimize - USER_DATABASES'
  SET @JobCommand07 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[IndexOptimize] @Databases = ''USER_DATABASES''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile07 = @OutputFileDirectory + '\' + 'IndexOptimize_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile07) &gt; 200 SET @OutputFile07 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile07) &gt; 200 SET @OutputFile07 = NULL

  SET @JobName08 = 'sp_delete_backuphistory'
  SET @JobCommand08 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + 'msdb' + ' -Q "DECLARE @CleanupDate datetime SET @CleanupDate = DATEADD(dd,-30,GETDATE()) EXECUTE dbo.sp_delete_backuphistory @oldest_date = @CleanupDate" -b'
  SET @OutputFile08 = @OutputFileDirectory + '\' + 'sp_delete_backuphistory_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile08) &gt; 200 SET @OutputFile08 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile08) &gt; 200 SET @OutputFile08 = NULL

  SET @JobName09 = 'sp_purge_jobhistory'
  SET @JobCommand09 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + 'msdb' + ' -Q "DECLARE @CleanupDate datetime SET @CleanupDate = DATEADD(dd,-30,GETDATE()) EXECUTE dbo.sp_purge_jobhistory @oldest_date = @CleanupDate" -b'
  SET @OutputFile09 = @OutputFileDirectory + '\' + 'sp_purge_jobhistory_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile09) &gt; 200 SET @OutputFile09 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile09) &gt; 200 SET @OutputFile09 = NULL

  SET @JobName10 = 'Output File Cleanup'
  SET @JobCommand10 = 'cmd /q /c "For /F "tokens=1 delims=" %v In (''ForFiles /P "' + @OutputFileDirectory + '" /m *_*_*_*.txt /d -30 2^&gt;^&amp;1'') do if EXIST "' + @OutputFileDirectory + '"\%v echo del "' + @OutputFileDirectory + '"\%v&amp; del "' + @OutputFileDirectory + '"\%v"'
  SET @OutputFile10 = @OutputFileDirectory + '\' + 'OutputFileCleanup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile10) &gt; 200 SET @OutputFile10 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile10) &gt; 200 SET @OutputFile10 = NULL

  SET @JobName11 = 'CommandLog Cleanup'
  SET @JobCommand11 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "DELETE FROM [dbo].[CommandLog] WHERE StartTime &lt; DATEADD(dd,-30,GETDATE())" -b'
  SET @OutputFile11 = @OutputFileDirectory + '\' + 'CommandLogCleanup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile11) &gt; 200 SET @OutputFile11 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile11) &gt; 200 SET @OutputFile11 = NULL

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName01)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName01, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName01, @step_name = @JobName01, @subsystem = 'CMDEXEC', @command = @JobCommand01, @output_file_name = @OutputFile01
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName01
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName02)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName02, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName02, @step_name = @JobName02, @subsystem = 'CMDEXEC', @command = @JobCommand02, @output_file_name = @OutputFile02
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName02
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName03)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName03, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName03, @step_name = @JobName03, @subsystem = 'CMDEXEC', @command = @JobCommand03, @output_file_name = @OutputFile03
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName03
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName04)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName04, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName04, @step_name = @JobName04, @subsystem = 'CMDEXEC', @command = @JobCommand04, @output_file_name = @OutputFile04
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName04
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName05)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName05, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName05, @step_name = @JobName05, @subsystem = 'CMDEXEC', @command = @JobCommand05, @output_file_name = @OutputFile05
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName05
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName06)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName06, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName06, @step_name = @JobName06, @subsystem = 'CMDEXEC', @command = @JobCommand06, @output_file_name = @OutputFile06
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName06
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName07)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName07, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName07, @step_name = @JobName07, @subsystem = 'CMDEXEC', @command = @JobCommand07, @output_file_name = @OutputFile07
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName07
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName08)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName08, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName08, @step_name = @JobName08, @subsystem = 'CMDEXEC', @command = @JobCommand08, @output_file_name = @OutputFile08
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName08
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName09)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName09, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName09, @step_name = @JobName09, @subsystem = 'CMDEXEC', @command = @JobCommand09, @output_file_name = @OutputFile09
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName09
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName10)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName10, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName10, @step_name = @JobName10, @subsystem = 'CMDEXEC', @command = @JobCommand10, @output_file_name = @OutputFile10
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName10
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName11)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName11, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName11, @step_name = @JobName11, @subsystem = 'CMDEXEC', @command = @JobCommand11, @output_file_name = @OutputFile11
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName11
  END

END
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MaintenancePlan</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ola_hallengren_USAGE_Backup</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MaintenancePlan</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ola_hallengren_USAGE_Backup</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Examples
A. Back up all user databases, using checksums and compression; verify the backup; and delete old backup files

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@Verify = 'Y',
@Compress = 'Y',
@CheckSum = 'Y',
@CleanupTime = 24
B. Back up all user databases to a network share, and verify the backup

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = '\\Server1\Backup',
@BackupType = 'FULL',
@Verify = 'Y'
C. Back up all user databases across four network shares, and verify the backup

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = '\\Server1\Backup, \\Server2\Backup, \\Server3\Backup, \\Server4\Backup',
@BackupType = 'FULL',
@Verify = 'Y',
@NumberOfFiles = 4
D.Back up all user databases to 64 files, using checksums and compression and setting the buffer count and the maximum transfer size

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@Compress = 'Y',
@CheckSum = 'Y',
@BufferCount = 50,
@MaxTransferSize = 4194304,
@NumberOfFiles = 64
E. Back up read/write filegroups of all user databases

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@ReadWriteFileGroups = 'Y'
F. Back up the transaction log of all user databases, using the option to change the backup type if a log backup cannot be performed

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'LOG',
@ChangeBackupType = 'Y'
G. Back up all user databases, using compression, encryption, and NetVault LiteSpeed for SQL Server, and limiting the CPU usage to 10 percent

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@BackupSoftware = 'LITESPEED',
@Compress = 'Y',
@Encrypt = 'Y',
@EncryptionAlgorithm = 'AES_256',
@EncryptionKey = 'MyPassword',
@Throttle = 10
H. Back up all user databases, using compression, encryption, and Red Gate SQL Backup

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@BackupSoftware = 'SQLBACKUP',
@Compress = 'Y',
@Encrypt = 'Y',
@EncryptionAlgorithm = 'AES_256',
@EncryptionKey = 'MyPassword'
I. Back up all user databases, using compression, encryption, and Idera SQL safe backup

EXECUTE dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@BackupSoftware = 'SQLSAFE',
@Compress = 'Y',
@Encrypt = 'Y',
@EncryptionAlgorithm = 'AES_256',
@EncryptionKey = '8tPyzp4i1uF/ydAN1DqevdXDeVoryWRL'
Execution

Execute the stored procedures from SQL Server Agent CmdExec jobs, using sqlcmd and the -b option. Pass the parameters to the stored procedures by name:

sqlcmd -E -S $(ESCAPE_SQUOTE(SRVR)) -d master -Q "EXECUTE dbo.DatabaseBackup @Databases = 'USER_DATABASES', @Directory = 'C:\Backup', @BackupType = 'FULL'" -b

Use SQL Server Agent output files to ensure that you always have a full set of information, in case of an error.

You can use the MaintenanceSolution.sql script to install the SQL Server Maintenance Solution. Then the sqlcmd commands and the output files will be configured for you.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MaintenancePlan</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ola_hallengren_USAGE_Index_and_Statistics_Maintenance</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MaintenancePlan</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ola_hallengren_USAGE_Index_and_Statistics_Maintenance</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Examples
A. Rebuild or reorganize all indexes with fragmentation on all user databases

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30
B. Rebuild or reorganize all indexes with fragmentation and update modified statistics on all user databases

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@UpdateStatistics = 'ALL',
@OnlyModifiedStatistics = 'Y'
C. Update statistics on all user databases

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = NULL,
@FragmentationHigh = NULL,
@UpdateStatistics = 'ALL'
D. Update modified statistics on all user databases

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = NULL,
@FragmentationHigh = NULL,
@UpdateStatistics = 'ALL',
@OnlyModifiedStatistics = 'Y'
E. Rebuild or reorganize all indexes with fragmentation on all user databases, performing sort operations in tempdb and using all available CPUs

EXECUTE dbo.IndexOptimize @Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@SortInTempdb = 'Y',
@MaxDOP = 0
F. Rebuild or reorganize all indexes with fragmentation on all user databases, using the option to maintain partitioned indexes on the partition level

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@PartitionLevel = 'Y'
G. Rebuild or reorganize all indexes with fragmentation on all user databases, with a time limit so that no commands are executed after 3600 seconds

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@TimeLimit = 3600
H. Rebuild or reorganize all indexes with fragmentation on the table Production.Product in the database AdventureWorks

EXECUTE dbo.IndexOptimize
@Databases = 'AdventureWorks',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@Indexes = 'AdventureWorks.Production.Product'
I. Rebuild or reorganize all indexes with fragmentation except indexes on the table Production.Product in the database AdventureWorks

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@Indexes = 'ALL_INDEXES, -AdventureWorks.Production.Product'
J. Rebuild or reorganize all indexes with fragmentation on all user databases and log the results to a table

EXECUTE dbo.IndexOptimize
@Databases = 'USER_DATABASES',
@FragmentationLow = NULL,
@FragmentationMedium = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 = 5,
@FragmentationLevel2 = 30,
@LogToTable = 'Y'
Execution

Execute the stored procedures from SQL Server Agent CmdExec jobs, using sqlcmd and the -b option. Pass the parameters to the stored procedures by name:

sqlcmd -E -S $(ESCAPE_SQUOTE(SRVR)) -d master -Q "EXECUTE dbo.IndexOptimize @Databases = 'USER_DATABASES'" -b

Use SQL Server Agent output files to ensure that you always have a full set of information, in case of an error.

You can use the MaintenanceSolution.sql script to install the SQL Server Maintenance Solution. Then the sqlcmd commands and the output files will be configured for you.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>ORACLE SQL</Language>
        <Public>false</Public>
        <Name>about_ORACLE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>ORACLE SQL</Language>
          <Public>false</Public>
          <Name>about_ORACLE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_ORACLE
/*

Make sure to type the table_name in uppercase, 
	as Oracle stores all table names in uppercase.
	
Free Tools:
	SQL*Plus 
	Oracle SQL Developer (query, reports and PL/SQL)
	Oracle SQL Developer Data Modeler
	Oracle SQL Developer Command Line SQLcl 4.2
	


default user: System

SYSTEM : This is the user account that you log in with to perform all administrative functions other than starting up and shutting down the database.

SYS	   : There is typically no reason to log in as user SYS.
			SYSDBA is a system privilege that is assigned only to user SYS.
				It enables SYS to perform high-level administrative tasks such as starting up and shutting down the database.
				If you want to log in as SYS with the SQL Command Line (SQL*Plus), you must connect to the database "AS SYSDBA." */
		&gt; connect sys/password as sysdba			
/* Operating System Authentication

If you log in to the Oracle Database XE host computer with a user name 
	that is in a special operating system user group, 
	you are then permitted to connect to the database with the SYSDBA privilege. 
	An administrator who is authenticated through OS authentication 
	does not need to know the SYS or SYSTEM account password.
OS authentication is needed because there must be a way to identify administrative users 
	even if the database is shut down. 
	A user authenticated in this way can then start up the database
ORA_DBA: OS users who are members of Windows Operating system user group 'ORA_DBA' have SYSDBA priviledge 
	it is automatically created when you install Oracle Database XE. 
	Upon installation on the Windows platform, the user performing the installation 
		is automatically added to the ORA_DBA group.
		
There are three ways to log in to Oracle Database Express Edition (Oracle Database XE) 
	to perform administrative tasks:
		
	Log in as user SYSTEM
	Log in as a user who has been granted the DBA role
	Log in and connect to the database as SYSDBA
	
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>apostrophe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>apostrophe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--to set the string equal to "Driver's License", use a double apostrophe

--SSRS puts a double apostrophe where it finds a single apostrophe
-- So then in the SP you have to replace the double qoute with a single qoute
DECLARE @LICENSE_TYPE nvarchar(100)		-- FROM: prj_0006_SP_0012_LIST_LicenseTypes 
SET @LICENSE_TYPE =  'Driver''s License Standard'  

PRINT '1) before @LICENSE_TYPE: [' + coalesce(@LICENSE_TYPE, '{NULL}')	 + ']' 
SET @LICENSE_TYPE = Replace(@LICENSE_TYPE, '', ')			--QUOTENAME(@LICENSE_TYPE, '')  --QUOTENAME(@LICENSE_TYPE, ''''')	
PRINT '2) after @LICENSE_TYPE: [' + coalesce(@LICENSE_TYPE, '{NULL}')	 + ']'





--==============================================================================================
--1] added a replace function like this in TSQL?:  

REPLACE(@SearchString, '''', '')

-- it changed double apostrophe to single apostrophe and then the data was returned properly.

---------

--built-in SQL functions (like replace) is that they too require you to double up your single quotes.
--So to replace ' with '' in code you'd do this:

Replace(@strip, '''', '''''')

--SSRS
--==============================================================================================

--2] change the expression for the function in SSRS:

--http://www.dbafire.com/2016/02/16/ssrs-report-is-double-escaping-parameters-apostrophies/
--	Feed it a string like
--	‘Our DBA’s forever’ and when it passed that as a parameter it would end up like this:
--	‘Our DBA””s forever’
--	Somehow SSRS itself was taking the string being passed through and deciding that it should add not one, but three extra apostrophes.


-- By default you will see this in the Parameters section of the dataset:
--Double-Click on the DataSet, that has the parameter in question (in the DataSets folder, of the Report Data panel)
--	=&gt; properties =&gt; Parameters {in left panel} =&gt; {then click the expression button to the right of the parameter) 
-- and you should see something like this: 

=Parameters!SearchString.Value

--change it to the following expression:

=Join(Parameters!SearchString.Value, ",")

-----------------------

/*
 Say you're querying the database from a .NET application, then you'd use the SqlParameter class 
 to feed the SqlCommand parameters for the query and all of this single quote business 
 will be taken care of automatically. 
 This is usually the preferred method as SQL parameters will also help prevent SQL injection attacks.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Bitwise_AND_&amp;</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Bitwise_AND_&amp;</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Bitwise operations are commonly used so you can pass one number, 
--And then compare that number to see if various codes are set. 

--if the @TablesToDeleteFrom  is 1, then 1 &amp; 1 returns 1 since the @TablesToDeleteFrom contains a 1. 
--If you instead try 2 &amp; 1, it will return a 0 because there is no 1 in it. 
--If you did 3 &amp; 1 though, you would get a 1 for @TablesToDeleteFrom  &amp; 1 As well As @TablesToDeleteFrom &amp; 2 since 3 contains both a 1 And a 2. 
--Notice the next selection does exactly this, 
-- tests 



--For example:

    -- Delete from Membership table if (@TablesToDeleteFrom &amp; 1) is set
    IF ((@TablesToDeleteFrom &amp; 1) &lt;&gt; 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM dbo.aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode &lt;&gt; 0 )
            GOTO Cleanup

        IF (@RowCount &lt;&gt; 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom &amp; 2) is set
    IF ((@TablesToDeleteFrom &amp; 2) &lt;&gt; 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode &lt;&gt; 0 )
            GOTO Cleanup

        IF (@RowCount &lt;&gt; 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom &amp; 4) is set
    IF ((@TablesToDeleteFrom &amp; 4) &lt;&gt; 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode &lt;&gt; 0 )
            GOTO Cleanup

        IF (@RowCount &lt;&gt; 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom &amp; 8) is set
    IF ((@TablesToDeleteFrom &amp; 8) &lt;&gt; 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode &lt;&gt; 0 )
            GOTO Cleanup

        IF (@RowCount &lt;&gt; 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom &amp; 1,2,4 &amp; 8) are all set
    IF ((@TablesToDeleteFrom &amp; 1) &lt;&gt; 0 AND
        (@TablesToDeleteFrom &amp; 2) &lt;&gt; 0 AND
        (@TablesToDeleteFrom &amp; 4) &lt;&gt; 0 AND
        (@TablesToDeleteFrom &amp; 8) &lt;&gt; 0 AND
        (EXISTS (SELECT UserId FROM dbo.aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM dbo.aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode &lt;&gt; 0 )
            GOTO Cleanup

        IF (@RowCount &lt;&gt; 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>run_SQL_scripts_from_SSMS_and_sqlcmd</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>run_SQL_scripts_from_SSMS_and_sqlcmd</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--Try this if you are trying to execute a .sql file in SSMS:

:r C:\Scripts\Script1.sql				--Your filepath and file name should NOT have spaces in them for this to work
:r C:\Scripts\Script2.sql
:r C:\Scripts\Script3.sql

--Using :r in SSMS requires turning on SQLCMD mode: Query menu -&gt; SQLCMD Mode.
--With SQLCMD scripting enabled, scripts will be color coded. 
--The color coding for Transact-SQL keywords will remain the same. SQLCMD commands are presented with a shaded background.
--:r imports and executes a file. 


--You can also do it through sqlcmd (which I believe is more common):

sqlcmd -S serverName\instanceName -i C:\Scripts\Script1.sql

https://msdn.microsoft.com/en-us/library/ms174187(v=sql.105).aspx
--Supported SQLCMD Syntax
--The Database Engine Query Editor supports the following SQLCMD script keywords:
[!!:]GO[count]
!! &lt;command&gt;
:exit(statement)
:Quit
:r &lt;filename&gt;
:setvar &lt;var&gt; &lt;value&gt;
:connect server[\instance] [-l login_timeout] [-U user [-P password]]
:on error [ignore|exit]
:error &lt;filename&gt;|stderr|stdout
:out &lt;filename&gt;|stderr|stdout

--or both 
:error 
--and 
:out
-- stderr and stdout send output to the messages tab.

/*
The following example uses a sqlcmd statement to create an output file called testoutput.txt, 
executes two Transact-SQL SELECT statements along with one operating system command 
(to print out the current directory). 
The resultant file contains the message output from the DIR statement, 
followed by the results output from the Transact-SQL statements.
*/

:out C:\testoutput.txt
SELECT @@VERSION As 'Server Version'
!!DIR
!!:GO
SELECT @@SERVERNAME AS 'Server Name'
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SERVER_query_from_another_server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SERVER_query_from_another_server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>



-- https://stackoverflow.com/questions/1144051/selecting-data-from-two-different-servers-in-sql-server

SELECT
        *
FROM
        [SERVER2NAME].[THEDB].[THEOWNER].[THETABLE]
        
--==========================================
Querying across 2 different databases is a distributed query. Here is a list of some techniques plus the pros and cons:

Linked servers: 
	Provide access to a wider variety of data sources than SQL Server replication provides
Linked servers: 
	Connect with data sources that replication does not support or which require ad hoc access
Linked servers: 
	Perform better than OPENDATASOURCE or OPENROWSET
OPENDATASOURCE and OPENROWSET functions: 
	Convenient for retrieving data from data sources on an ad hoc basis. OPENROWSET has BULK facilities as well that may/may not require a format file which might be fiddley
OPENQUERY: 
	Does not support variables
--All are T-SQL solutions. Relatively easy to implement and set up
--All are dependent on connection between source and destionation which might affect performance and scalability

--=============================================================
SELECT * FROM OPENROWSET('SQLNCLI', 'Server=YOUR SERVER;Trusted_Connection=yes;','SELECT * FROM Table1') AS a
UNION
SELECT * FROM OPENROWSET('SQLNCLI', 'Server=ANOTHER SERVER;Trusted_Connection=yes;','SELECT * FROM Table1') AS a


--===================================================================

-- using SQL Server Authentication with data provider SQLOLEDB . 
--I am just posting here a code snippet for one table is in the current sever database where the code is running and another in other server '192.166.41.123'

SELECT TOP 2 *
FROM 
		dbo.tblHamdoonSoft tbl1
		INNER JOIN 
		OPENDATASOURCE (
				'SQLOLEDB'
				,'Data Source=192.166.41.123;User ID=sa;Password=hamdoonsoft'
				).[TestDatabase].[dbo].[tblHamdoonSoft1] tbl2
		ON tbl1.id = tbl2.id</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Install_any_software_without_administrative_Priviledges</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Install_any_software_without_administrative_Priviledges</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.quora.com/How-does-Chrome-get-installed-without-administrators-privileges
https://www.mmo-champion.com/threads/2188073-Bypass-administrator-rights-with-quot-Runasinvoker-quot

Open notepad or any text editor.
Type set __COMPAT_LAYER=RunAsInvoker &amp;&amp; start %1
Save This file as .bat extension.
Make sure you have written name of file in double quotes i.e.” somename.bat” and also select ALL files at bottom.
Now Drag the setup to be installed to this file.
Whoops!! It works….</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_HelloWorld___HomeController_and_Viewer_and_Controller_MINIMUM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_HelloWorld___HomeController_and_Viewer_and_Controller_MINIMUM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!--

Right click on the 'Models' folder =&gt; Add =&gt; Class =&gt; name it "HomeModel.cs"  {the suffix 'Model' is by his convention}

  --&gt;
  
  
 
.............Model: HomeModel.cs ................................


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace HelloWorld.Models
	{
	public class HomeModel
		{
		public string Message3 { get; set; }			// &lt;== Added this property


		}
	}
	
.............Index: Index.cshtml ................................

	
@model HelloWorld.Models.HomeModel			
@{
    ViewBag.Title = "Index";
}

&lt;!-- Note the (at)model Attribute at the top. like a Page directive, with intellisense.  --&gt;

&lt;h2&gt;@Model.Message3&lt;/h2&gt;			//&lt;=== can see this property in Intellisense


..............Controller: HomeController.cs ........................

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Web;
using System.Web.Mvc;
using HelloWorld.Models;	//&lt;== in order to use and see class: HomeModel

namespace HelloWorld.Controllers
	{
	public class HomeController : Controller
		{


		public ActionResult Index()
		{
			var model = new HomeModel();
			model.Message3 = "Hello, World!";


			return View(model);		//pass the 'model' into the view
			}

		}
	}



................Route: RouteConfig.cs ................................

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace HelloWorld
	{
	public class RouteConfig
		{
		public static void RegisterRoutes(RouteCollection routes)
			{
			routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
			//			routes.MapPageRoute(routeName: "Home", routeUrl: "", defaults: new { controller = "Home", action = "Index" });
			routes.MapRoute(name: "Home", url: "", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional });
			//This says that I need to create a controller called "Home" with an action called "Index"

			//routes.MapRoute(
			//    name: "Default",
			//    url: "{controller}/{action}/{id}",
			//    defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
			//);
			}
		}
	}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_HelloWorld___HomeController_and_Viewer_and_Controller_with_Parm_from_Route</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_HelloWorld___HomeController_and_Viewer_and_Controller_with_Parm_from_Route</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- bring in the parm from the route, to the controller, and shows up as a URL
--&gt;

................Controller: HomeController.cs ..................................

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Web;
using System.Web.Mvc;
using HelloWorld.Models;	//&lt;== in order to use and see class: HomeModel

namespace HelloWorld.Controllers
	{
	public class HomeController : Controller
		{


		public ActionResult Index(string lang)		//add in a parm: lang, like the attribute in the route
		{
			var model = new HomeModel();

			if (lang == "spanish")
			{
			model.Message3 = "Hola, Wey!";			//This is what you see for the URL: http://localhost:53845/spanish
			}
			else
			{
			model.Message3 = "Hello, World!";		//This is what you see for the URL: http://localhost:53845/
			}
			


			return View(model);		//pass the 'model' into the view
			}

		}
	}
	
	
................Route: RouteConfig.cs ..................................


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace HelloWorld
	{
	public class RouteConfig
		{
		public static void RegisterRoutes(RouteCollection routes)
			{
			routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
			//			routes.MapPageRoute(routeName: "Home", routeUrl: "", defaults: new { controller = "Home", action = "Index" });

			// dynamic part of URL the language: {lang}, added attribute into the new controller parm
			// So for the URL http://localhost:53845/spanish it will show one thing, and for the URL: http://localhost:53845/ it will show the default
			routes.MapRoute(name: "Home", url: "{lang}", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional, lang="english" });


			//static URL: none
			//routes.MapRoute(name: "Home", url: "", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional });


			//This says that I need to create a controller called "Home" with an action called "Index"

			//routes.MapRoute(
			//    name: "Default",
			//    url: "{controller}/{action}/{id}",
			//    defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
			//);
			}
		}
	}
	
	................View: Index.cshtml ..................................
	
@model HelloWorld.Models.HomeModel			
@{
    ViewBag.Title = "Index";
}

&lt;!-- Note the (at)model Attribute at the top. like a Page directive, with intellisense.  --&gt;

&lt;h2&gt;@Model.Message3&lt;/h2&gt;	

	
	................Model: HomeModel.cs ..................................
	

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace HelloWorld.Models
	{
	public class HomeModel
		{
		public string Message3 { get; set; }


		}
	}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>about_MVC_General</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>about_MVC_General</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_MVC_General

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
2010:	start from the internet version of the MVC 4 (in VS 2010)
-----

Using VS 2013 Express:
        -----
File =&gt; New Project (Cntrl-Shft-n) =&gt; ASP.NET Web Application  (.NET Framework 4.5)
Select a Template: 
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Conventions:
===========
- Controllers are named such that they end with "Controller" (e.g ProductController)
- Controllers live in folder: Controllers
- Views live in folder: Views
- Views named according to controller (e.g. the view for the Product controller would live in Views/Product)
- Each view is named for an Action in the Controller
	--So for a an 'Edit' action it would be in: Views/Product/Edit.cshtml 

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
The default page for a website, without specifying a page, is Views\Home\Index.cshtml
The html file from that page is placed between other code when it is sent to the user:

	.layout - top
	Index.cshtml				{this is placed where '@RenderBody()' shows up in the markup}
	.layout - footer
 
 The 'layout' is located in: Views\Shared\_Layout.cshtml
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Model
====
This is the Data, and Data Classes

View
====
This is the HTML, i.e. what is being presented to the viewer, like a screen to present to the viewer
The 'view' on the server, is not the same as the 'view' on the browser

Controller
==========
takes the data from the 'model', and feeds it appropriately to the 'view'
or maps the data to the view
Tells th View what to display, can but should not control the HTML


To add a page in the website, just add an ActionResult 
	(e.g. UnderConstruction) to HomeController.cs, with 'return View():' in it.
Then right-click on the name of the ActionResult (e.g. UnderConstruction) =&gt; Add View
'ViewBag' allows us to pass data between the 'controller' and a 'view'

Two controllers are created by default:
a) HomeController.cs
		The default actions that return a view:
			ActionResult Index()
			ActionResult About()
			ActionResult Contact()

b) AccountController.cs


The SERVER takes the 'model', 'view' and the 'controller, combine their info, and create an HTML page to send to the browser
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_Misc</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>HTMLHelper</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_Misc</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>HTMLHelper</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

&lt;!-- See the Html.Hidden snippet for some good notes 

Every method in HtmlHelper class has a twin with For suffix.
	Html.Hidden takes a string as an argument that you must provide 
	but Html.HiddenFor takes an Expression 
	that if you view is a strongly typed view you can benefit from this 
	and feed that method a lambda expression like this:
--&gt;
o=&gt;o.SomeProperty 

&lt;!-- nstead of "SomeProperty" in the case of using Html.Hidden method.

The Html.Hidden create a hidden input But you have to specific the name and all the attribute 
	that you want to give to that field and the value, 
	while the Html.HiddenFor create a hidden input for the object tat you pass to it, 
	they look like this:
 --&gt;
Html.Hidden("yourProprety",model.yourProprety);

Html.HiddenFor(m =&gt; m.yourProperty)

&lt;!--In this case the output is the same! --&gt;

=======================================================

Html.Hidden('name', 'value') 
&lt;!-- creates a hidden tag with name = 'name' and value = 'value' --&gt;

Html.HiddenFor(x =&gt; x.nameProp) 
&lt;!-- creates a hidden tag with a name = 'nameProp' and value = x.nameProp.

 So you can use Html.Hidden, but if you get the name wrong,
 or if you change the property name in the model, 
 the auto binding will fail when you submit the form. But by using a type checked expression, 
 you'll get code completion, 
 and when you change the property name, 
 you will get a compile time error. 
 And then you are guaranteed to have the correct name in the form.--&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_Partial_VIEWs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Generate_id_attributes_based_on_Model_value_and_Index</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_Partial_VIEWs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Generate_id_attributes_based_on_Model_value_and_Index</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!--
Uses a Knockout ViewModel:

From Parent-Child example of MVC and Knockout

1] salesorderviewmodel.js
2] /views/Sales/Create.cshtml
3] /Views/Shared/_EditSalesOrder.cshtm
4] /ViewModels/SalesOrderViewModel.cs
5] /Controllers/SalesController.cs

There is a loop in the partial view, that graps info from the client side Knockout ViewModel
To generate Markup elements

--&gt;



=====================================================================================
===salesorderviewmodel.js============================================================
=====================================================================================
var ObjectState = {
    Unchanged: 0,
    Added: 1,
    Modified: 2,
    Deleted: 3
};



//==============================================================================
//  Mapping
//==============================================================================

//We have to tell KO how to map the children (Items)
var salesOrderItemMapping = {
    'SalesOrderItems': {                                                            //A) The mapping is for the collection 'SalesOrderItems' inside the SalesOrderViewModel
        key: function (salesOrderItem) {                                            // the The PK (i.e key) For each  Child (i.e. Parm-1 salesOrderItem) 
            return ko.utils.unwrapObservable(salesOrderItem.SalesOrderItemId);      // is 'salesOrderItem.SalesOrderItemId' (i.e. Parm-2)
        },                                                                          //'unwrapObservable' either unwraps an observable, or passes them through if they are a property
        create: function (options) {                                                //B) Tell KO what it has to do for each SalesOrderItem that it needs to create
            return new SalesOrderItemViewModel(options.data);                       //   In this case, it has to create a new 'SalesOrderItemViewModel', using the input data
        }                                                                           //   NOTE: that the 'data' is a property of the 'options' object
    }                                                                               //          The 'options' argument used to call to the Create callback
};                                                                                  //          is a Javascript object containing the members 'data' and 'parent'
//                                                                                              is the parent object, or array to which the child belongs


//==============================================================================
//  CHILD : Client-Side View Model
//==============================================================================

SalesOrderItemViewModel = function (data) {
    var self = this;
    ko.mapping.fromJS(data, salesOrderItemMapping, self);

    //CHILD - Added
    self.flagSalesOrderItemAsEdited = function () {
        if (self.ObjectState() != ObjectState.Added) {
            self.ObjectState(ObjectState.Modified);
        }

        return true;
    },
    //---------START---------------------------Calculated Value-----------------
        self.ExtendedPrice = ko.computed(function () {
            return (self.Quantity() * self.UnitPrice()).toFixed(2);
        });
    //---------END -----------------------------Calculated Value-----------------


}; // END SalesOrderItemViewModel

//==============================================================================
//  PARENT : Client-Side View Model
//==============================================================================

SalesOrderViewModel = function (data) {
    var self = this;
    ko.mapping.fromJS(data, salesOrderItemMapping, self);


    //SAVE the Parent
    self.save = function () {
        $.ajax({
            //------------------------------------------------------------------
            url: "/Sales/Save/", //  The Server-side URL we are going to call
            type: "POST", //  The form action (GET/POST)
            data: ko.toJSON(self, dataConverter), //  The data in JSon format
            contentType: "application/json",
            success: function (data) { //  This handles whatever comes back as the POST, inside the anonymous object
                if (data.salesOrderViewModel != null) //      so we have to navigate into the object, and map it only if it contains a 'salesOrderViewModel'
                    ko.mapping.fromJS(data.salesOrderViewModel, {}, self); //  PROBLEM: as it is, it does not redirect, but just shows the record again, and if you click 'save' button then it would save another copy of the record.

                //If this is set then redirect
                if (data.newLocation != null)
                    window.location = data.newLocation;
            },
            //Handle errors When the client-side Save fumction calls the server-side Controller Action but there is an error in the Controller
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (XMLHttpRequest.status == 400) {                         //400 is a normal response
                    $('#MessageToClient').text(XMLHttpRequest.responseText);
                }
                else {
                    $('#MessageToClient').text('The web server had an error.');
                }
            }

            //------------------------------------------------------------------
        });
    },

    //EDITED
    self.flagSalesOrderAsEdited = function () {
        //alert("flagged!"); //&lt;= just to show that the function fires
        if (self.ObjectState() != ObjectState.Added) {
            self.ObjectState(ObjectState.Modified);
        }

        return true;
    },

    //DEFAULT child record to add
    self.addSalesOrderItem = function () {
        var salesOrderItem = new SalesOrderItemViewModel({ SalesOrderItemId: 0, ProductCode: "", Quantity: 1, UnitPrice: 0, ObjectState: ObjectState.Added });
        self.SalesOrderItems.push(salesOrderItem);
    },

    //---------START---------------------------Calculated Value-----------------
    self.Total = ko.computed(function () {
        var total = 0;
        //Iterate over the child records, 'arrayForEach' is like 'foreach' in C#
        ko.utils.arrayForEach(self.SalesOrderItems(), function (salesOrderItem) {
            total += parseFloat(salesOrderItem.ExtendedPrice());    //parseFloat : parses a string and returns a floating number or a NAN (if it won't parse)
        });
        return total.toFixed(2);    //toFixed: converts a number into a string, keeping on the number of decimals specified in the Parm
    }),
    //---------END -----------------------------Calculated Value-----------------



    //DELETE the child from the Parent's collection
    self.deleteSalesOrderItem = function (salesOrderItem) {

        self.SalesOrderItems.remove(this);  //Remove the child from it's collection

        //      if &gt; 0 then it's PK exists and it is in the Database 
        //      if it's index is in 'SalesOrderItemsToDelete' it is already marked for deletion, otherwise it is -1
        if (salesOrderItem.SalesOrderItemId() &gt; 0 &amp;&amp; self.SalesOrderItemsToDelete.indexOf(salesOrderItem.SalesOrderItemId()) == -1)
            //So if the child exists in the database, and if it is is not already in the collection "SalesOrderItemsToDelete"
            //  Then push it into the collection to delete (i.e. 'SalesOrderItemsToDelete')
            self.SalesOrderItemsToDelete.push(salesOrderItem.SalesOrderItemId());
    };



};//End SalesOrderViewModel - PARENT


//==============================================================================
// JQuery Validation for client-side salesOrderViewModel
//==============================================================================


$("form").validate({
    submitHandler: function() {
        salesOrderViewModel.save();
    },
    //Validation Rules
    rules: {
        CustomerName: {
//Parent Field
            required: true,
            maxlength: 30
        },
        PONumber: {
//Parent Field
            maxlength: 10
        },
        ProductCode: {
//child field
            required: true,
            maxlength: 15,
            alphaonly: true
        },
        Quantity: {
//child field
            required: true,
            digits: true,
            range: [1, 1000000]
        },
        UnitPrice: {
//child field
            required: true,
            number: true,
            range: [0, 100000]
        }
    },
    //Custom Messages
    messages: {
        CustomerName: {
            required: "You cannot create a sales order unless you supply the customer's name.",
            maxlength: "Customer names must be 30 characters or shorter."
        },
        ProductCode: {
            alphaonly: "Product codes consist of letters only."
        }
    },

    tooltip_options: {
        CustomerName: {
            placement: 'right'
        },
        PONumber: {
            placement: 'right'
        }
    }
});    //                                                                                          The 'jquery.validate.js' should not be touched, instead
//}).checkForm = function () {																	//OVER-WRITE the bad function 'checkForm' from the JQuery Library

//    this.prepareForm();
//    for (var i = 0, elements = (this.currentElements = this.elements()) ; elements[i]; i++) {
//        if (this.findByName(elements[i].name).length != undefined &amp;&amp; this.findByName(elements[i].name).length &gt; 1) {
//            for (var cnt = 0; cnt &lt; this.findByName(elements[i].name).length; cnt++) {
//                this.check(this.findByName(elements[i].name)[cnt]);
//            }
//        } else {
//            this.check(elements[i]);
//        }
//    }
//    return this.valid();


//};



//==========================================================

//this.prepareForm();
//for (var i = 0, elements = (this.currentElements = this.elements()) ; elements[i]; i++) {
//    var checkingElements = this.findByName(elements[i].name).not(this.settings.ignore);
//    if (checkingElements.length !== undefined &amp;&amp; checkingElements.length &gt; 1) {
//        for (var cnt = 0; cnt &lt; checkingElements.length; cnt++) {
//            this.check(checkingElements[cnt]);
//        }
//    } else {
//        this.check(elements[i]);
//    }
//}
//return this.valid();




//}).checkForm = function () {																	//OVER-WRITE the bad function 'checkForm' from the JQuery Library

//    this.prepareForm();
//    for (var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++) {
//        if (this.findByName(elements[i].name).length != undefined &amp;&amp; this.findByName(elements[i].name).length &gt; 1) {
//            for (var count = 0; count &lt; this.findByName(elements[i].name).length; count++) {
//                this.check(this.findByName(elements[i].name)[count]);
//            }
//        } else {
//            this.check(elements[i]);
//        }
//    }
//    return this.valid();



//};
//=========================================================

//For converting RowVersion field from the client-side to a base 64 encoded value for the Server-side
var dataConverter = function (key, value) {
    if (key === 'RowVersion' &amp;&amp; Array.isArray(value)) {
        var str = String.fromCharCode.apply(null, value);
        return btoa(str);
    }

    return value;
};



// Custom JQuery Validation function - only allow alpha charactersm, using Regular Expression, apply to the 'ProductCode' in the rules section.
//  Recieves the 'value' being tested, and test it against the alpha characters

$.validator.addMethod("alphaonly",
    function (value) {
        return /^[A-Za-z]+$/.test(value);
    }


);



=====================================================================================
=======/views/Sales/Create.cshtml====================================================
=====================================================================================

@using System.Web.Script.Serialization
@model SolutionName.Web.ViewModels.SalesOrderViewModel

@{
    ViewBag.Title = "Create a Sales Order";
}

@{ string data = new JavaScriptSerializer().Serialize(Model);}

@section scripts{
    &lt;script src="~/Scripts/knockout-3.2.0.js"&gt;&lt;/script&gt;
    &lt;script src="~/Scripts/knockout.mapping-latest.js"&gt;&lt;/script&gt;

    &lt;script src="~/Scripts/jquery.validate.js"&gt;&lt;/script&gt;
    &lt;script src="~/Scripts/jquery-validate.bootstrap-tooltip.js"&gt;&lt;/script&gt;


    &lt;script src="~/Scripts/salesorderviewmodel.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript"&gt;
        var salesOrderViewModel = new SalesOrderViewModel(@Html.Raw(data));
        ko.applyBindings(salesOrderViewModel);


        $.validator.prototype.checkForm = function () {
                this.prepareForm();
                for (var i = 0, elements = (this.currentElements = this.elements()) ; elements[i]; i++) {
                    if (this.findByName(elements[i].name).length != undefined &amp;&amp; this.findByName(elements[i].name).length &gt; 1) {
                        for (var cnt = 0; cnt &lt; this.findByName(elements[i].name).length; cnt++) {
                            this.check(this.findByName(elements[i].name)[cnt]);
                        }
                    } else {
                        this.check(elements[i]);
                    }
                }
                return this.valid();
        }




    &lt;/script&gt;
}

@Html.Partial("_EditSalesOrder")
=====================================================================================
======/Views/Shared/_EditSalesOrder.cshtml===========================================
=====================================================================================
&lt;h2&gt;@ViewBag.Title&lt;/h2&gt;

&lt;p id="MessageToClient" data-bind="text: MessageToClient"&gt;&lt;/p&gt;

&lt;form&gt;
    &lt;div class="form-group"&gt;
        &lt;label class="control-label" for="CustomerName"&gt;Customer Name:&lt;/label&gt;
        &lt;input class="form-control"  name="CustomerName" id="CustomerName" data-bind="value: CustomerName, event: {change: flagSalesOrderAsEdited}" /&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label class="control-label" for="PONumber"&gt;P.O. Number:&lt;/label&gt;
        &lt;input class="form-control" name="PONumber" id="PONumber" data-bind="value: PONumber, event: {change: flagSalesOrderAsEdited}" /&gt;
    &lt;/div&gt;

        &lt;table class="table table-striped"&gt;
            &lt;tr&gt;
                &lt;th&gt;Product Code&lt;/th&gt;
                &lt;th class="text-right"&gt;Quantity&lt;/th&gt;
                &lt;th class="text-right"&gt;Unit Price&lt;/th&gt;
                &lt;th class="text-right"&gt;Extended&lt;/th&gt;
                &lt;th&gt;&lt;button class="btn btn-info btn-xs" data-bind="click: addSalesOrderItem"&gt;Add&lt;/button&gt;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tbody data-bind="foreach: SalesOrderItems"&gt;
                &lt;tr&gt;
                    &lt;td class="form-group"&gt;&lt;input name="ProductCode" class="form-control input-sm" data-bind="attr: {'id': 'ProductCode_' + $index()}, value: ProductCode, event: {change: flagSalesOrderItemAsEdited}, hasfocus: true" /&gt;&lt;/td&gt;
                    &lt;td class="form-group"&gt;&lt;input name="Quantity" class="form-control input-sm text-right" data-bind="attr: {'id': 'Quantity_' + $index()}, value: Quantity, event: {change: flagSalesOrderItemAsEdited}" /&gt;&lt;/td&gt;
                    &lt;td class="form-group"&gt;&lt;input name="UnitPrice" class="form-control input-sm text-right" data-bind="attr: {'id': 'UnitPrice_' + $index()}, value: UnitPrice, event: {change: flagSalesOrderItemAsEdited}" /&gt;&lt;/td&gt;
                    &lt;td class="form-group"&gt;&lt;span class="form-control text-right" data-bind="text: ExtendedPrice"&gt;&lt;/span&gt;&lt;/td&gt;
                    &lt;td class="form-group"&gt;&lt;button class="btn btn-danger btn-xs" data-bind="click: $parent.deleteSalesOrderItem"&gt;Delete&lt;/button&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td class="form-group"&gt;&lt;span class="form-control text-right"&gt;Total&lt;/span&gt;&lt;/td&gt;
                &lt;td class="form-group"&gt;&lt;span class="form-control text-right" data-bind="text: Total"&gt;&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;

    &lt;p&gt;&lt;button class="btn btn-primary" type="submit"&gt;Save&lt;/button&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a class="btn btn-default btn-sm" href="/"&gt;&amp;laquo; Back to List&lt;/a&gt;&lt;/p&gt;


&lt;/form&gt;

=====================================================================================
=====/ViewModels/SalesOrderViewModel.cs==============================================
=====================================================================================

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using SolutionName.Model;

namespace SolutionName.Web.ViewModels
	{
	public class SalesOrderViewModel : IObjectWithState
		{
		public SalesOrderViewModel()
			{		//Knockout mapping will see the collections that are created in the constructor
			SalesOrderItems = new List&lt;SalesOrderItemViewModel&gt;();
			SalesOrderItemsToDelete = new List&lt;int&gt;();
			}

		//copy in the properties from the MODEL/SalesOrder.cs
		public int SalesOrderId { get; set; }

		[Required(ErrorMessage = "Server: You cannot create a sales order unless you supply the customer's name.")]
		[StringLength(30, ErrorMessage = "Server: Customer names must be 30 characters or shorter.")]
		[CheckScore(3.14)]
		public string CustomerName { get; set; }

		[StringLength(10, ErrorMessage = "Server: PO numbers must be 10 characters or shorter.")]
		public string PONumber { get; set; }

		public byte[] RowVersion { get; set; }

		//Just in the ViewModel
		public string MessageToClient { get; set; }

		//Client-side communication
		public ObjectState ObjectState { get; set; }
		public List&lt;int&gt; SalesOrderItemsToDelete { get; set; }

		//NAV
		public List&lt;SalesOrderItemViewModel&gt; SalesOrderItems { get; set; }

		}
	}
	
=====================================================================================
=====/Controllers/SalesController.cs=================================================
=====================================================================================

 using System;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using SolutionName.DataLayer;
using SolutionName.Model;
using SolutionName.Web.ViewModels;
using Helpers = SolutionName.Web.ViewModels.Helpers;

namespace SolutionName.Web.Controllers
	{
	public class SalesController : Controller
		{
		private SalesContext _salesContext; // = new SalesContext();       //was "db"

		public SalesController()
			{
			_salesContext = new SalesContext();
			}

		// GET: Sales
		public ActionResult Index()
			{
			return View(_salesContext.SalesOrders.ToList());
			}

		// GET: Sales/Details/5
		public ActionResult Details(int? id)
			{
			if (id == null)
				{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
				}
			SalesOrder salesOrder = _salesContext.SalesOrders.Find(id);
			if (salesOrder == null)
				{
				return HttpNotFound();
				}
			//-----------------------------------------------------------requires: using SolutionName.Web.ViewModels;
			// use the static Helper method
			SalesOrderViewModel salesOrderViewModel = Helpers.CreateSalesOrderViewModelFromSalesOrder(salesOrder);
			salesOrderViewModel.MessageToClient = "I originated from the viewmodel, rather than the model.";
			//WAS this, but instead return the ViewModel: 
			//                                              return View(salesOrder);
			return View(salesOrderViewModel);
			//Then change the input model for the view from 'salesOrder' to 'salesOrderViewModel', since it contains the same fields, plus some
			//------------------------------------------------------------

			}

		// GET: Sales/Create
		public ActionResult Create()
			{
			SalesOrderViewModel salesOrderViewModel = new SalesOrderViewModel();
			salesOrderViewModel.ObjectState = ObjectState.Added;                //&lt;===============
			return View(salesOrderViewModel);
			}

		// GET: Sales/Edit/5
		public ActionResult Edit(int? id)
			{
			if (id == null)
				{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
				}
			SalesOrder salesOrder = _salesContext.SalesOrders.Find(id);
			if (salesOrder == null)
				{
				return HttpNotFound();
				}

			// use the static Helper method
			SalesOrderViewModel salesOrderViewModel = Helpers.CreateSalesOrderViewModelFromSalesOrder(salesOrder);
			//To let the Client know that this message is from the Edit Method
			// lets you watch as data is edited, sent to the Server for update behind the scenes, and the result is repopulated back in the client
			salesOrderViewModel.MessageToClient = string.Format("The original value of Customer Name is {0}.", salesOrderViewModel.CustomerName);

			//Now ObjectState is set to unchanged in the Helper

			//Change the defaul Model being returned from 'salesOrder' to 'salesOrderViewModel', but also have to modify the view to accept that model
			return View(salesOrderViewModel);
			}

		// GET: Sales/Delete/5
		public ActionResult Delete(int? id)
			{
			if (id == null)
				{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
				}
			SalesOrder salesOrder = _salesContext.SalesOrders.Find(id);
			if (salesOrder == null)
				{
				return HttpNotFound();
				}
			//========copied in and modified from EDIT ==============================
			// use the static Helper method
			SalesOrderViewModel salesOrderViewModel = Helpers.CreateSalesOrderViewModelFromSalesOrder(salesOrder);
			salesOrderViewModel.MessageToClient = string.Format("You are about to delete the SalesOrder for: {0}.", salesOrderViewModel.CustomerName);
			//Now ObjectState is set to Deleted in the Helper
			//=========================================================================

			salesOrderViewModel.ObjectState = ObjectState.Deleted;

			//change to 'salesOrderViewModel' from the original created by the wizard (i.e. 'salesOrder'), and then in the view
			return View(salesOrderViewModel);
			}

		protected override void Dispose(bool disposing)
			{
			if (disposing)
				{
				_salesContext.Dispose();
				}
			base.Dispose(disposing);
			}
		
		[HandleModelStateExceptionAttribute]
		public JsonResult Save(SalesOrderViewModel salesOrderViewModel)
			{
			//This method recieves the JSon formatted object posted to it, and automatically tries to de-serialize it into a 'SalesOrderViewModel'
			//Since the properties match between them, it works 'perfectly', and the result is a server-side SalesOrderViewModel containing
			//  the client-side viewmodel's properties.

			if (!ModelState.IsValid)	
				{
				throw new ModelStateException(ModelState);
				}


			//Create and Populate the Properties for Server-side object from the values of the client-side object.
			SalesOrder salesOrder = Helpers.CreateSalesOrderFromSalesOrderViewModel(salesOrderViewModel);
			//Now ObjectState is set in the Helper 

			//At first we added it to the context, and Save Changes to push the changes to the persisted DB
			// but we modified that to 'Attach' it
			_salesContext.SalesOrders.Attach(salesOrder);

			//After attaching, but before ApplyingStateChanges:-------------------------------------------------------------

			//When deleting an entire sales order (Parent) THEN iterate over and delete all the children
			if (salesOrder.ObjectState == ObjectState.Deleted)
				{
				//Interate over the children
				foreach (SalesOrderItemViewModel salesOrderItemViewModel in salesOrderViewModel.SalesOrderItems)
					{
					SalesOrderItem salesOrderItem = _salesContext.SalesOrderItems.Find(salesOrderItemViewModel.SalesOrderItemId);
					//If the child is no longer there, mark it deleted
					if (salesOrderItem != null)
						salesOrderItem.ObjectState = ObjectState.Deleted;
					}
				}
			// Otherwize we are not deleting the Parent, and we are just checking the children to delete them if necessary
			else
				{
				foreach (int salesOrderItemId in salesOrderViewModel.SalesOrderItemsToDelete)
					{
					SalesOrderItem salesOrderItem = _salesContext.SalesOrderItems.Find(salesOrderItemId);
					if (salesOrderItem != null)
						salesOrderItem.ObjectState = ObjectState.Deleted;
					}
				}
			//---------------------------------------------------------------------------------------------------------------


			//  so if ObjectState is modified, it will set the Entity state to the corresponding 'Modified' state
			_salesContext.ApplyStateChanges();

			//Store message in the string
			// and since it is a conditional assignment we have to declare it before the Try/Catch construct
			string messageToClient = string.Empty;
			 

			try
				{
				_salesContext.SaveChanges();
				}
			catch (DbUpdateConcurrencyException)
				{
				messageToClient = "Someone else have modified this sales order since you retrieved it.  Your changes have not been applied.  What you see now are the current values in the database.";
				}

			catch (Exception ex)
				{
				throw new ModelStateException(ex);
				}

			if (salesOrder.ObjectState == ObjectState.Deleted)  //Then return an anonymous JSon object with the target URL
				return Json(new { newLocation = "/Sales/Index/" });

			//Store message in the string
			//This is a path that won't always execute so we put in a conditional to populate it only if it is empty.
			if (messageToClient.Trim().Length == 0)
			{
				messageToClient = ViewModels.Helpers.GetMessageToClient(salesOrderViewModel.ObjectState, salesOrder.CustomerName);
			}
			//Before we dispose of the Context, let's save a copy of it in the SalesOrderViewModel first, so we can retrieve the PK (SalesOrderID) when we go to fetch
			//	the refreshed record from the Server, particulary in the case of a concurrency exception.

			salesOrderViewModel.SalesOrderId = salesOrder.SalesOrderId;
			//Then dispose of the Sales Context
			_salesContext.Dispose();
			//Create a new one
			_salesContext = new SalesContext();
			//THEN re-retrieve the SalesOrder (parent) from the DB, and its related children it its most current state
			salesOrder = _salesContext.SalesOrders.Find(salesOrderViewModel.SalesOrderId);


			//When the SalesOrder was inserted into the database, it was assigned an ID, and the Context was auto-synched with the ID
			// now it has to be communicated back to the client, via the 'salesOrderViewModel'
			// b/c  if you were to create, and then save it, it would remain on the screen, and if you then edited it, and saved it again
			//  you would get an error b/c the ID would not be in synch (it would be zero in the client) unless you relay it back to the client.
			//Since the salesOrder is attached (see above) to the context, and the context is in synch with the database, we can grab it from the salesOrder
			//  and pass it back down to the client.

			//REFRESH the SalesOrderViewModel
			salesOrderViewModel = ViewModels.Helpers.CreateSalesOrderViewModelFromSalesOrder(salesOrder);
			//Now ObjectState is set to unchanged in the Helper

			//Add the string back 
			salesOrderViewModel.MessageToClient = messageToClient;

			//We know we need to return a JSon Formatted Result b/c the Save action is a 'JsonResult'
			// We could just send back: 'salesOrderViewModel', but this will be generalized, and sometimes we don't send back a viewmodel
			//  an example is if we are in the Delete Action, it would not make sense to stay in the Delete View, after deleting the record.
			//  instead we would want to redirect somewhere else, and that is best determined by server logic, we would want to send 
			//  the redirect from the server to the client. That means the client-side 'save' function has to accept more than just a 'salesOrderViewModel'
			//  It would also have to accept a string containing the Redirect URL
			//  So, to be flexible enough for all our needs,  we will send back an anonymous object, that contains whatever we need to send to the client
			//      then let the client inspect the contents to determine what to do.
			return Json(new { salesOrderViewModel });
			}
		}
	}

	
	
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_Partial_VIEWs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>PartialView_Parameters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_Partial_VIEWs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>PartialView_Parameters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- http://stackoverflow.com/questions/20799658/how-can-i-pass-parameters-to-a-partial-view-in-mvc-4 --&gt;

&lt;!--Your question is hard to understand, but if I'm getting the gist, 
you simply have some value in your main view that you want to access in a partial being rendered in that view.

If you just render a partial with just the partial name:--&gt;

@Html.Partial("_SomePartial")

&lt;!--It will actually pass your model as an implicit parameter, the same as if you were to call:--&gt;

@Html.Partial("_SomePartial", Model)

&lt;!--Now, in order for your partial to actually be able to use this, 
though, it too needs to have a defined model, for example:--&gt;

@model Namespace.To.Your.Model

@Html.Action("MemberProfile", "Member", new { id = Model.Id })

&lt;!--Alternatively, 
if you're dealing with a value that's not on your view's model
 (it's in the ViewBag or a value generated in the view itself somehow, then you can pass a ViewDataDictionary--&gt;

@Html.Partial("_SomePartial", new ViewDataDictionary { { "id", someInteger } });

&lt;!--And then:--&gt;

@Html.Action("MemberProfile", "Member", new { id = ViewData["id"] })

&lt;!--As with the model, Razor will implicitly pass your partial the view's ViewData by default, 
so if you had ViewBag.Id in your view, then you can reference the same thing in your partial.--&gt;

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_VIEWs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>about_MVC_VIEWs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_VIEWs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>about_MVC_VIEWs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_MVC_VIEWs

Typical calls to the View from the controller:
return View(model);
return null;

Controllers pass data to Views
Two ways to pass data:
	ViewBag
	TypeSafe object
	
Views should not manipulate Data
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
Logic in the View uses Razor Syntax	

Traditional webform syntax (before Razor)
-----------------------------------------
&lt;% foreach var item in items) {%&gt;
	&lt;span&gt; Item &lt;%:item.Name %&gt;.
	&lt;/span&gt; &lt;% } %&gt;
	
{
	uses &lt;% to enter code
	uses %&gt; when exiting code
}
	
Razor Syntax
-------------
@foreach (var item items) {
	&lt;span&gt;Item @item.Name &lt;/span&gt;
}

{
	uses @ to enter code
	and it automatically figures out when you are exiting code, and entering markup.
} 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Change_WiFi_Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Change_WiFi_Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#'Though you can’t actually make changes to the network profiles themselves, 
#'    you can export a desired profile, 
#'    make changes to the XML file, 
#'    and then import the profile back onto the same machine or another one.

'Export a wireless network profile: 
netsh wlan export profile name=[profile name]

'e.g. Export profile of Remote machine
psexec \\lt-103368 -u "administrator" -p "JPHSA@Work" netsh wlan export profile name="JPHSA" folder="\\win10vm\All_Share\WiFi\" key=clear


'Delete a wireless profile: 
netsh wlan delete profile name=[profile name]

'Import a network profile:
netsh wlan add profile filename=[path_and_filename.xml] interface=[interface_name]
---------------------------------------------------------------------------------
https://stackoverflow.com/questions/35232162/add-wifi-profile-with-password-in-windows-programmatically


#'I found a way to add a wifi profile.
#'
#'At first you export an existing wifi profile:
#'
&gt; netsh wlan export profile name="WifiNetwork" folder="C:\path\" key=clear
#'Than you get a XML file with the following style:


&lt;?xml version="1.0"?&gt;
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
&lt;name&gt;WifiNetwork&lt;/name&gt;
&lt;SSIDConfig&gt;
    &lt;SSID&gt;
        &lt;hex&gt;123456789ABCDEF&lt;/hex&gt;
        &lt;name&gt;WifiNetwork&lt;/name&gt;
    &lt;/SSID&gt;
&lt;/SSIDConfig&gt;
&lt;connectionType&gt;ESS&lt;/connectionType&gt;
&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
&lt;MSM&gt;
    &lt;security&gt;
        &lt;authEncryption&gt;
            &lt;authentication&gt;WPA2PSK&lt;/authentication&gt;
            &lt;encryption&gt;AES&lt;/encryption&gt;
            &lt;useOneX&gt;false&lt;/useOneX&gt;
        &lt;/authEncryption&gt;
        &lt;sharedKey&gt;
            &lt;keyType&gt;passPhrase&lt;/keyType&gt;
            &lt;protected&gt;false&lt;/protected&gt;
            &lt;keyMaterial&gt;Password123&lt;/keyMaterial&gt;
        &lt;/sharedKey&gt;
    &lt;/security&gt;
&lt;/MSM&gt;

--------------sample from JPHSA LT-103368 --------------------

&lt;?xml version="1.0"?&gt;
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
	&lt;name&gt;JPHSA&lt;/name&gt;
	&lt;SSIDConfig&gt;
		&lt;SSID&gt;
			&lt;hex&gt;4A50485341&lt;/hex&gt;
			&lt;name&gt;JPHSA&lt;/name&gt;
		&lt;/SSID&gt;
		&lt;nonBroadcast&gt;false&lt;/nonBroadcast&gt;
	&lt;/SSIDConfig&gt;
	&lt;connectionType&gt;ESS&lt;/connectionType&gt;
	&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
	&lt;MSM&gt;
		&lt;security&gt;
			&lt;authEncryption&gt;
				&lt;authentication&gt;WPA2PSK&lt;/authentication&gt;
				&lt;encryption&gt;AES&lt;/encryption&gt;
				&lt;useOneX&gt;false&lt;/useOneX&gt;
			&lt;/authEncryption&gt;
			&lt;sharedKey&gt;
				&lt;keyType&gt;passPhrase&lt;/keyType&gt;
				&lt;protected&gt;false&lt;/protected&gt;
				&lt;keyMaterial&gt;100%True&lt;/keyMaterial&gt;
			&lt;/sharedKey&gt;
		&lt;/security&gt;
	&lt;/MSM&gt;
&lt;/WLANProfile&gt;


---------------------------------------------------------------

#'Than you can modify this file and import it to add this wifi with this command:

netsh wlan add profile filename="C:\path\WifiNetwork.xml"

#'Check your profiles with:

netsh wlan show profile</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>NETSH_display_WiFi_Saved_Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>NETSH_display_WiFi_Saved_Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'http://blog.jocha.se/tech/display-all-saved-wifi-passwords

Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine


(netsh wlan show profiles) | 
    Select-String "\:(.+)$" | 
    %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | 
    %{(netsh wlan show profile name="$name" key=clear)}  | 
    Select-String "Key Content\W+\:(.+)$" | 
    %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | 
    %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | 
    Format-Table -AutoSize 
    
    
'To see the profile (and password)
&gt;netsh wlan show profile name="JPHSA" key=clear
    
    
'To delete a profile    
&gt; netsh wlan delete profile name='JPHSA'    

'Show the list of wireless profiles: 
netsh wlan show profiles

'Retrieve the stored key (WPA, WEP, etc) of a profile: 
netsh wlan show profiles name=[profile name] key=clear

'Delete a wireless profile: 
netsh wlan delete profile name=[profile name]

'Set a network’s priority: 
netsh wlan set profileorder name=[profile name]interface=[interface_name] priority=1

'Stop automatically connecting to a network: 
netsh wlan set profileparameter name=[profile name] connectionmode=manual</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSEXEC_run_on_remote_computer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSEXEC_run_on_remote_computer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'display password on remote PC for Wifi JPHSA
&gt; psexec \\lt-103368 netsh wlan show profile name="JPHSA" key=clear

'Show WIFI profiles on remote PC
&gt;psexec \\lt-103368 netsh wlan show profiles
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSEXEC_run_script_on_Multiple_Computers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSEXEC_run_script_on_Multiple_Computers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' I have written up a quick batch that allows me to run a utility remotely 
#' on computers over the network one at a time but 
#'I was looking to alter it so that the batch file could process a list of computers 
#'rather than one at a time.


#' I know PSEXEC is able to process a list 
#'    but I can't seem to figure it out on my own 
#'
#'Again, the batch I have attached works fine, 
#'    but it only works with the computername listed.  
#'I need to figure out how to get it to work pulling from a list instead.  
#'    Anyone have any experience with this utility?

-----------------------Example in question-------------------------
@echo off
 
c:
cd\
 
net use \\COMPUTERNAME\c$ /user:"domain\username"
 
copy /y file.exe \\COMPUTERNAME\c$\file.exe
 
"c:\pstools\psexec.exe" \\COMPUTERNAME -i -w c:\ c:\file.exe
 
net use \\COMPUTERNAME\c$ /delete /y

--------------------------------------------------------------------

#'Idea 1:  {There may be an issue with this}
-----------
FOR /F %1 IN (c:\pathToFile\computers.txt) do c:\PathToBatchScript\script.bat (%1)


#'Idea 2:  {There may be an issue with this}
-----------
#'The "File.exe" will have to be in the same location on your system for the copy to work.  
#'Make sure that the folder where psexec is at as well as the location of your file 
#'are in the %System Path% and you should have no issues with this.
#'This example paths to a .csv, but a .txt will work just as well.

@echo off
 
psexec @C:\TEMP\list.csv -u MyDomain\Username -c c:\file.exe

#' Idea 3:
------------
#'In order to process a list of computers like "bizz1", "bizz2", "bizz3" ... "bizzN", you may proceed like this: 
#'In the current folder, create a plain text file, holding all the computer names, 1 per line. 
#'Name the file e.g. "complist.txt".
#'
#'launch psexec like this:

psexec @complist.txt -u admin -p passwd -e remote_command_to_be_executed 

#' To do all the computers in a domain
-----------
#'1. You need to prefix cmd.exe /c to the echo command.
#'
#'2. You need to escape the percent characters in %COMPUTERNAME%, 
#'    else %COMPUTERNAME% will hold your local computername instead of the remote computernames, 
#'    i.e. it needs to read ^%COMPUTERNAME^%.
#'
#'3. You must make sure that the share name \\server\ points to a folder to which all remote  machines have write access, 
#'        else the remote machines will not be able to append their names to the output file \\server\wks.txt. 
#'        More likely a valid share name would look like this: \\server\sharedfolder 
#'        and the output file name would look like \\server\sharedfolder\wks.txt.
#'
#'4. The pipe sign &gt;&gt; needs to be escaped, too, 
#'    like %computername%, because it needs to be passed to each remote machine. 
#'    The local machine has been detached (-d) after all and will never get any output from any remote machine. 
#'    So the piping part needs to read ^&gt;&gt; \\server\wks.txt.
#'
#'So the resulting command line would look like this:

&gt; psexec \\* -u admin -p password -d cmd.exe echo ^%COMPUTERNAME^% ^&gt;&gt; \\server\wks.txt</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSEXEC_Sysinternals_NETSH_for_multipleComputers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSEXEC_Sysinternals_NETSH_for_multipleComputers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.serverwatch.com/server-tutorials/using-netsh-to-manage-remote-servers-and-workstations.html

#'Netsh lacks an easy way to simultaneously manage multiple remote machines. 
#'Though you could get creative with the built-in remote functionality, 
#'    like incorporating multiple remote addresses in batch files and other scripts, 
#'    you might have better luck pursuing other options.
#'
#'For instance, 
#'    utilizing the PsExec utility from Windows Sysinternals allows you to push out Netsh (or any other commands) 
#'    to multiple machines at once.
#'
#'Once you download PsExec, 
#'    open a Command Prompt to the folder containing it and try the following command to access the CLI of a remote machine:
#'
#'psexec \\hostname -u domain\admin -p password cmd
#'
#'If the remote machine is Windows Vista or higher, 
#'    you may need to use the -h option to have the process run with the account's elevated token.
#'
#'Once you've established that you can gain remote access, 
#'    you can also run netsh commands directly, for instance:
#'
psexec \\hostname -u domain\admin -p password cmd.exe /c netsh.exe interface ip show config
#'
#'If an interactive CLI isn't needed — 
#'    for example, if you're running a command that doesn't provide output — 
#'        consider adding the psexec -d option. 
#'        This option tells it not to wait for the process to terminate. 
#'    On the other hand, 
#'        if you'd like the program to be interactive on the desktop of the remote machine, 
#'        consider the -i option.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Remote</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Remote</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.serverwatch.com/server-tutorials/using-netsh-to-manage-remote-servers-and-workstations.html
-------------------------------------------------------------------
#'If you run into connectivity issues with remote machines, 
#'    ensure the Remote Registry service is running on the remote computer. 
#'If it is not, then Windows may display a "Network Path Not Found" error message. 
#'    Additionally, verify File and Printer Sharing for Microsoft Networks is enabled in the network connection properties of the remote machine. 
#'As always, ensure there aren't any firewalls blocking the traffic.
#'
#'If connectivity issues persist, try the following Registry edit:
#'
#'Open RegEdit on the remote machine and navigate to
#'
 
#'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
#'Add a new DWORD value called 

    "LocalAccountTokenFilterPolicy," 
#'if it doesn't already exist, and ensure its value is set to 
    "1"
#'Reboot the remote machine.
-------------------------------------------------------------------


'Open a Command Prompt and enter the following command 
'to access the Netsh CLI on a remote machine:

netsh -r hostname -u domain\admin -p password

'Once you've established that you can gain remote access, 
'you can also run netsh commands directly. For instance, here's how to obtain the IP configuration:

netsh -r hostname -u domain\admin -p password interface ip show config

'For the -r option, you can also use the IP address or FQDN 
' in addition to the host name of remote machines.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WIFI_profile_Add</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WIFI_profile_Add</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/35232162/add-wifi-profile-with-password-in-windows-programmatically

'At first you export an existing wifi profile:

netsh wlan export profile name="WifiNetwork" folder="C:\path\" key=clear

'e.g. Remote
psexec \\lt-103368 -u "administrator" -p "JPHSA@Work" netsh wlan export profile name="JPHSA" folder="\\win10vm\All_Share\WiFi\" key=clear


'Than you get a XML file with the following style:

&lt;?xml version="1.0"?&gt;
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
&lt;name&gt;WifiNetwork&lt;/name&gt;
&lt;SSIDConfig&gt;
    &lt;SSID&gt;
        &lt;hex&gt;123456789ABCDEF&lt;/hex&gt;
        &lt;name&gt;WifiNetwork&lt;/name&gt;
    &lt;/SSID&gt;
&lt;/SSIDConfig&gt;
&lt;connectionType&gt;ESS&lt;/connectionType&gt;
&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
&lt;MSM&gt;
    &lt;security&gt;
        &lt;authEncryption&gt;
            &lt;authentication&gt;WPA2PSK&lt;/authentication&gt;
            &lt;encryption&gt;AES&lt;/encryption&gt;
            &lt;useOneX&gt;false&lt;/useOneX&gt;
        &lt;/authEncryption&gt;
        &lt;sharedKey&gt;
            &lt;keyType&gt;passPhrase&lt;/keyType&gt;
            &lt;protected&gt;false&lt;/protected&gt;
            &lt;keyMaterial&gt;Password123&lt;/keyMaterial&gt;
        &lt;/sharedKey&gt;
    &lt;/security&gt;
&lt;/MSM&gt;

'Than you can modify this file and import it to add this wifi with this command:

netsh wlan add profile filename="C:\path\WifiNetwork.xml"

'Check your profiles with:

netsh wlan show profile</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Numeric</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Divide_INT_and_get_FLOATing</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Numeric</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Divide_INT_and_get_FLOATing</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT CAST(MyIntField1 AS float) / CAST(MyIntField2 AS float)


SELECT ROUND(CAST(1 AS float) / CAST(3 AS float), 2) 

SELECT 1.0*MyInt1/MyInt2


select 1 * 1.0 / 3
This is helpful when you pass integers as params.
select x * 1.0 / y


--It's not necessary to cast both of them. Result datatype for a division is always the greater one. Thus the solution must be:
SELECT CAST(1 AS float) / 3</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>OPENDATASOURCE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SQLOLEDB_example_from_remoteServer_IP</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>OPENDATASOURCE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SQLOLEDB_example_from_remoteServer_IP</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/1144051/selecting-data-from-two-different-servers-in-sql-server
-- using SQL Server Authentication with data provider SQLOLEDB . 
--I am just posting here a code snippet for one table is in the current sever database where the code is running and another in other server '192.166.41.123'

SELECT TOP 2 *
FROM 
		dbo.tblHamdoonSoft tbl1
		INNER JOIN 
		OPENDATASOURCE (
				'SQLOLEDB'
				,'Data Source=192.166.41.123;User ID=sa;Password=hamdoonsoft'
				).[TestDatabase].[dbo].[tblHamdoonSoft1] tbl2
		ON tbl1.id = tbl2.id</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>OPENROWSET</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_OPENROWSET</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>OPENROWSET</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_OPENROWSET</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_OPENROWSET

--If you are getting any error, you need to enable ad hoc distributed queries by executing following query.

sp_configure 'Show Advanced Options', 1
GO
RECONFIGURE
GO
sp_configure 'Ad Hoc Distributed Queries', 1
GO
RECONFIGURE
GO


--Includes all connection information that is required to access remote data from an OLE DB data source. 
--This method is an alternative to accessing tables in a linked server and is a one-time, 
--	ad hoc method of connecting and accessing remote data by using OLE DB. 
--The OPENROWSET function can be referenced in the FROM clause of a query as if it were a table name. 
--The OPENROWSET function can also be referenced as the target table of an INSERT, UPDATE, or DELETE statement, 
--	subject to the capabilities of the OLE DB provider. 
--Although the query might return multiple result sets, OPENROWSET returns only the first on

-- OPENROWSET also supports bulk operations through a built-in 
--	BULK provider that enables data from a file to be read and returned as a rowset.

OPENROWSET   
( { 'provider_name' , { 'datasource' ; 'user_id' ; 'password'   
   | 'provider_string' }   
   , {   [ catalog. ] [ schema. ] object   
       | 'query'   
     }   
   | BULK 'data_file' ,   
       { FORMATFILE = 'format_file_path' [ &lt;bulk_options&gt; ]  
       | SINGLE_BLOB | SINGLE_CLOB | SINGLE_NCLOB }  
} )   
  
OPENROWSET can be used to access remote data from OLE DB data sources only when 
--the DisallowAdhocAccess registry option is explicitly set to 0 for the specified provider, 
--and the Ad Hoc Distributed Queries advanced configuration option is enabled. 
--When these options are not set, the default behavior does not allow for ad hoc access.
  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWER_BI</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Context_Transition</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWER_BI</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Context_Transition</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>A context transition involves a row context being converted to, or replaced by, a filter context,
	caused by the CALCULATE statement being used in an iterator. 
	
A context transition is invoked whenever CALCULATE exedutes in a row context (e.g. within an Iterator, a calculated column, or in a Measure?)	

When CALCULATE is used within an ITERATOR, the row Context is completely removed before evaluating the expression, and any 
	current rows contexts are invalidated. This includes any nested iterations.
	
A context transition creates a filter context out of a row context. And the filter context contains EVERY column in the table.
	And the filter filters the entire model. This means that a context transition happening on one table could impact related
	tables in your model.
The resulting filter context uses all columns in your table, but they are  hidden. DAX adds them automatically.	
If your table has duplicate rows, the resulting filter context will contain not just one row but ever row containing the duplicate rows.
Context transitioning is a very expensive operation. Say you have a table with 10 columns and 2 million rows, you will be creating
	2 million filters containing 10 columns of data.
Since a calculated column automatically generates a row	context, this applies to calculated columns as well.
	
a PK, or ID will prevent duplicate rows, and dropping an ID or PK will save space, 
	but you shouldn't do that if you have duplicate rows b/c then Row Context Transition 
	will mean you might count rows multiple times


NOTE for CALCULATE
------------------
WITHOUT a filter parameter, the Row Context is passed in as a Filter context, so the expression parameter is evaluated
 on each row, under the row context
WITH a filter parameter, all the external filters (and Row Context) are replaced by the filter parameter.
	
	
	
Here is an example: CALCULATE inside an ITERATOR, and CALCULATE has no Filter parameter
==================
est Table Measure = 
    SUMX(
        'Test Table',
        CALCULATE(								&lt;===== This CALCULATE has no Filter Parameter, so the row context is passed in as a Filter Context
            SUM( 'Test Table'[Net Price] )			//If your table has duplicate rows, the resulting filter context will contain not just one row but ever row containing the duplicate rows.	
        )
    )
	
	
	

So this MEASURE would have an ERRIOR, The iterator creates a row context, b/ the CALCULATE Removes it.
--------------------------
Total Sales Interator WRONG = SUMX(
									'Sales',
									CALCULATE('Sales'[ItemTotal]		&lt;==message would be: cannot find name "Item Total"
																		&lt;== or a Single value for column "Item Total" in table 'Sales' cannot be determined
								  )
NOTE: CALCULATE adds as filter arguments, all the columns of the current row it's processing, and then proceeds to 
				find all the rows in the table that match the current filter it just created for the current row.
				

				
				
====================================================================================================================================

for CALCULATED COLUMN:
=============================================================
Context Transition is the process of forcing row context into filter context
	•
	By default, calculated columns understand row context but not filter context
	•
	To create filter context at the row level, you can use CALCULATE
	
If we add a calculated column to calculate the sum of the quantity_sold column, we get the same 'total' on each row since
there is no filter context, and we can’t determine a unique value per row

WRONG Sum of Quantity =
						SUM(
							'Table'[quantity_sold]
							) 



To solve this, we can generate filter context at the row level , using CALCULATE with SUMX:

Sum of Quantity =
					CALCULATE(
								SUM(
									'Table'[quantity_sold]
									) 
							  )
							  
							  
for MEASURES:
=============================================================

FIRST, the formula that was WRONG for a calculated column, works fine for a measure, which does have a filter context
b/c the MEASURE revises the FILTER context on each row to reflect the Row Context on that row.


OK FOR A MEASURE Sum of Quantity =
						SUM(
							'Table'[quantity_sold]
							) 


As a measure , DAX automatically evaluates that formula as if there is a CALCULATE &amp;
SUM in the  formula, to create the filter context needed to produce the correct values
So it treats it like this, with a 'filter' that is actually the Row Context:

		Sum of Quantity =
						CALCULATE(
									SUM(
										'Table'[quantity_sold]
										) 
								  )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWER_BI</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Stored_Procedure_Create_and_Populate_PARMs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWER_BI</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Stored_Procedure_Create_and_Populate_PARMs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>P:\0007_PowerBI_Reports\Parameters_in_SP.txt

https://www.c-sharpcorner.com/article/execute-sql-server-stored-procedure-with-user-parameter-in-power-bi/

Step 1 - Create Manage Parameter in Power BI Desktop
============================================
1] Open Power BI Desktop =&gt; Home tab =&gt; “Edit Queries” {in ribbon}

2] Click on “Manage Parameters” {icon in Ribbon} =&gt; “New Parameter” {from drop-down}
 
3] It will open a popup to create a new parameter. Select “New”.
	It will ask for the following information.
		Name = Name of the parameter (e.g. pSTART_DATE
		Description = Description of Parameter {whatever}
		[x] Required
		Type = Datatype of a parameter (e.g. Date)
		Suggested value {select 'Any Value'}
		Current value {provide a sample value e.g. 1/1/2020}
	[OK]

	{repeat for other parameters}
 
Step 2 - Load (Execute Stored Procedure)
=============================================

1] “Home” {menu}  =&gt;“New source” {ribbon}
 
2] Select “Databases”, select “SQL Server Database”.
 
3] Fill in the required fields and in command window use the below line to execute the procedure.

Server:  
	DHRUVIN\SQLEXPRESS
Database: 
	WMS_201
Data Connectivity mode: 
	(x) Import
SQL Statement:  
	EXEC [RiskMngt].[Reporting].[sp_getEmpshiftDetails] '2015-06-23','2015-06-25'  

[x] Include relationship columns
[x] Navigate using full hierarchy  { I think you can use this if you want to browse to a SP}
 
It will preview the data. Click on “Load” =&gt; {view sample of data} =&gt; [ok]

Step 3 - Change Query in Advance Editor
============================================

1. =&gt; Edit Queries =&gt; Select the Query =&gt; Home {Menu} =&gt;  “Advanced Editor” {Ribbon}
 
ORIGINAL text in Advanced Editor}
-----------------------------------------------------------------------------
let
 
   Source = Sql.Database("cbtsql04", "DL4", [Query="EXEC  [RiskMngt].[Reporting].[P_0042_TASK_004_SP_01__TIER_unweighted_byApplicationDate] @START_DATE = '2020-01-01', @END_DATE = '2020-06-01'", HierarchicalNavigation=true]),

    #"Renamed Columns" = Table.RenameColumns(Source,{{"ApplicationDate_YYYY_MM_WK", "YYYY_MM_WK"}, {"tier", "TIER"}, {"TIER_by_YYYY_MM_WK", "TIER_count_by_YYYY_MM_WK"}})

in
    #"Renamed Columns"
-----------------------------------------------------------------------------
Replace the existing query with a new query.
a} Declare Parameter
b] Pass Parameter to Procedure

{NEWin Advanced Editor}
-----------------------------------------------------------------------------
let    
    
SQLSource = (pSTART_DATE as date, pEND_DATE as date) =&gt; 

let
    Source = Sql.Database("cbtsql04", "DL4", [Query="EXEC  [RiskMngt].[Reporting].[P_0042_TASK_004_SP_01__TIER_unweighted_byApplicationDate] @START_DATE = ' "&amp; Date.ToText(pSTART_DATE) &amp; " ', @END_DATE = ' " &amp; Date.ToText(pEND_DATE)&amp;" '", HierarchicalNavigation=true]),
 
    #"Renamed Columns" = Table.RenameColumns(Source,{{"ApplicationDate_YYYY_MM_WK", "YYYY_MM_WK"}, {"tier", "TIER"}, {"TIER_by_YYYY_MM_WK", "TIER_count_by_YYYY_MM_WK"}})

in
    Source

in
    SQLSource
-----------------------------------------------------------------------------


Step 4 - Invoke Result
==============================================
 
1. Select Query and enter the start date and end date. Click “Invoke”.
 	{populate the two parms}
	[Invoke]
 
2. It will show a warning like this. Click “Edit Permission”.
 
 
3. It will show a warning to run the query in Native Mode. Click “Run”.
 
4. It will load all the data.
 

 
5. Click “Close and Apply”.
 

 
Our data has been added to a Model.


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWER_BI</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Stored_Procedure_get_data_from_SP_01</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWER_BI</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Stored_Procedure_get_data_from_SP_01</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Stored_Procedure_get_data_from_SP_01


https://intellipaat.com/community/3763/how-to-use-sql-server-stored-procedures-in-microsoft-powerbi

In order to execute stored procedure in Power BI:

Go to SQL Server “right-click” on stored procedure and select “Execute”. 
	After execution of your cod, a new query window opens up which was responsible for execution. 
	Copy that Query.

Go to Power BI Query Editor, Click on New Source and select SQL Server. 
	After giving the server and database, click on "Advanced Options", paste the query in the "SQL Statement" . 
	Navigate using full hierarchy  and click ok.

e.g.
EXEC  [RiskMngt].[Reporting].[P_0042_TASK_004_SP_01__TIER_unweighted_byApplicationDate] @START_DATE = '2020-01-01', @END_DATE = '2020-06-01'

You will see data for the parameters you passed in Stored procedures only.

Remember that this works on "Import Query" option.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWER_BI</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Stored_Procedure_get_data_from_SP_02</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWER_BI</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Stored_Procedure_get_data_from_SP_02</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Stored_Procedure_get_data_from_SP_02

	
Execute SQL Server Stored Procedure With User Parameter In Power BI
https://www.c-sharpcorner.com/article/execute-sql-server-stored-procedure-with-user-parameter-in-power-bi/


Step 1 - Create Manage Parameter in Power BI Desktop
---------------------------------------------------------

1] Open Power BI Desktop and from Home tab, select “Edit Queries”.
2] Click on “Manage Parameters” and select “New Parameter”.
3] It will open a popup to create a new parameter. Select “New”.

	It will ask for the following information.
	
		Name = Name of the parameter
		Description = Description of Parameter
		Required checkbox
		Type = Datatype of a parameter
		Suggested value  {select "anny Value"
		Current value
		
	e.g. vStartDate, and vEndDate
		
		
		Name: vEndDate
		Description: ...
		[x] Required
		Type: Any
		Suggested Values: Any Value
		Current Value: 6/25/2015
		
		
Step 2 - Load (Execute Stored Procedure)
----------------------------------------------------------
1] Now, from “Home”, select “New source”
2] Select “Databases”, select “SQL Server Database”.
3] Fill in the required fields .
	Server:...
	Database: ...
	(x) Import
	SQL statement(optional, requires database)
		EXEC sp_getEmpshiftDetails '2015-06-23','2015-06-25'  
	[x] Include Relationship Columns		
4]It will preview the data. Click on “Load”.


Step 3 - Change Query in Advance Editor
-------------------------------------------------------------
1]  Select Query and click on “Advanced Editor”.
	Replace the existing query with a new query.
	Declare Parameter
	Pass Parameter to Procedure
	---------------------------
		let    
		    
		SQLSource = (vStartDate as date, vEndDate as date) =&gt;    
		    
		let    
		    
		Source = Sql.Database("DHRUVIN\SQLEXPRESS", "WMS_201", [Query="EXEC sp_getEmpshiftDetails '"&amp; Date.ToText(vStartDate) &amp; "','" &amp; Date.ToText(vEndDate)&amp;"' #(lf)#(lf)#(lf) #(lf)"])    
		    
		in    
		    
		Source    
		    
		in    
		    
		SQLSource  	
	---------------------------



Step 4 - Invoke Result
-------------------------------------------------------------
1] Select Query and enter the start date and end date. Click “Invoke”.
2] It will show a warning like this. Click “Edit Permission”.
3] It will show a warning to run the query in Native Mode. Click “Run”.
4] It will load all the data.
5] Click “Close and Apply”.


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Add_User_to_AD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Add_User_to_AD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>param($FirstName,$MiddleInitial,$LastName,$Location = 'OU=Corporate Users',$Title)

## Not the best use of storing the password clear text
## Google on using stored secure strings on the file system as a way to get around this
$DefaultPassword = 'p@$$w0rd12'
$DomainDn = (Get-AdDomain).DistinguishedName
$DefaultGroup = 'Gigantic Corporation Inter-Intra Synergy Group'

$Username = "$($FirstName.SubString(0,1))$LastName"
## Check if an existing user already has the first intial/last name username taken
try    {
        if (Get-ADUser $Username) {
                                    ## If so, check to see if the first initial/middle initial/last name is taken.
                                    $Username = "$($FirstName.SubString(0,1))$MiddleInitial$LastName"
                                    if (Get-AdUser $Username) {
                                                                    Write-Warning "No acceptable username schema could be created"
                                                                    return
                                                                }
                                    }
        } 
catch   {

        }

#'Hash Table with all the parms I will need for the New-AdUser method
$NewUserParams = @{
    'UserPrincipalName' = $Username
    'Name' = $Username
    'GivenName' = $FirstName
    'Surname' = $LastName
    'Title' = $Title
    'SamAccountName' = $Username
    'AccountPassword' = (ConvertTo-SecureString $DefaultPassword -AsPlainText -Force)
    'Enabled' = $true
    'Initials' = $MiddleInitial
    'Path' = "$Location,$DomainDn"       #'&lt;=== Creates a fully distinguished name
    'ChangePasswordAtLogon' = $true
}

New-AdUser @NewUserParams                #'&lt;==== Pass a whole hash table of parms to the method
Add-ADGroupMember -Identity $DefaultGroup -Members $Username</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>CONSTANTS_used_in_AD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>CONSTANTS_used_in_AD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Here is a list of the Constants used in VBScript, WSH, Windows, and Active Directory\ADSI.
http://www.kouti.com/samplescripts/AllConstants.vbs.txt

The script example below provides how constants are used in PowerShell.
-------------------------------------------------------------------------
Set-Variable -name ADS_UF_ACCOUNTDISABLE -value 2 -option constant
$objUser = [ADSI]“LDAP://CN=FirstName LastName,OU=TestOUUsers,OU=TestOU,DC=MyDomain,DC=msft”
$objUser.put(“userAccountControl”,$ADS_UF_ACCOUNTDISABLE)

$objUser.setInfo()

---------------------------------------------------------------------

In the file, when you see a value given as &amp;H…. it means hexadecimal.
' -------------------------------------------------------------------------
'       Related to the book Inside Active Directory, ISBN 0-201-61621-1
'       Copyright (C) 2002 by Sakari Kouti
'       Version: November 16, 2001
'       (see http://www.kouti.com)
' You have a royalty-free right to use, modify, reproduce and distribute
' this script (and/or any modified version) in any way you find useful,
' provided that you agree that Addison-Wesley or Sakari Kouti has no
' warranty, obligations or liability for the script. If you modify
' the script, you must retain this copyright notice.
' -------------------------------------------------------------------------

' ===============================================================
' See CH10-10 IncludeExample.wsf for an example of how to include
' this file in your script.
' ===============================================================

' This file includes all the constant defitions that are used in the
' script samples of the Inside Active Directory book, as well as some
' other constant defitions. The constants represent the following
' categories:
' - VBScript
' - WSH
' - Windows
' - Active Directory/ADSI

' ---------------------------------------------------------------
' Category: VBScript
' ---------------------------------------------------------------

'Error codes
Const E_VBS_OBJECT_REQUIRED = 424
'For more error codes, see VBScript help

'OpenTextFile method options
Const ForReading = 1

' ---------------------------------------------------------------
' Category: WSH
' ---------------------------------------------------------------

'WshShell Run method options
Const WAIT_ON_RETURN = True
Const HIDE_WINDOW = 0
'For more options, see WSH help

' ---------------------------------------------------------------
' Category: Windows
' ---------------------------------------------------------------

'NTFS ACE options

'NTFS ACE options: AccessMask
Const FILE_READ_DATA            = &amp;H1     'file &amp; pipe
Const FILE_LIST_DIRECTORY       = &amp;H1     'folder
Const FILE_WRITE_DATA           = &amp;H2     'file &amp; pipe
Const FILE_ADD_FILE             = &amp;H2     'folder
Const FILE_APPEND_DATA          = &amp;H4     'file
Const FILE_ADD_SUBDIRECTORY     = &amp;H4     'folder
Const FILE_CREATE_PIPE_INSTANCE = &amp;H4     'named pipe
Const FILE_READ_EA              = &amp;H8     'file &amp; folder
Const FILE_WRITE_EA             = &amp;H10    'file &amp; folder
Const FILE_EXECUTE              = &amp;H20    'file
Const FILE_TRAVERSE             = &amp;H20    'folder
Const FILE_DELETE_CHILD         = &amp;H40    'folder
Const FILE_READ_ATTRIBUTES      = &amp;H80    'all
Const FILE_WRITE_ATTRIBUTES     = &amp;H100   'all
Const DELETE                    = &amp;H10000
Const READ_CONTROL              = &amp;H20000
Const WRITE_DAC                 = &amp;H40000
Const WRITE_OWNER               = &amp;H80000
Const SYNCHRONIZE               = &amp;H100000
Const ACCESS_SYSTEM_SECURITY    = &amp;H1000000
Const GENERIC_ALL               = &amp;H10000000
Const GENERIC_EXECUTE           = &amp;H20000000
Const GENERIC_WRITE             = &amp;H40000000
Const GENERIC_READ              = &amp;H80000000

Const FULL_CONTROL              = &amp;H1F01FF  '14 permissions
Const MODIFY                    = &amp;H1301BF  '11 permissions

'NTFS ACE options: ACE flags
Const OBJECT_INHERIT_ACE                = &amp;H1
Const CONTAINER_INHERIT_ACE             = &amp;H2
Const NO_PROPAGATE_INHERIT_ACE          = &amp;H4
Const INHERIT_ONLY_ACE                  = &amp;H8
Const INHERITED_ACE                     = &amp;H10
Const SUCCESSFUL_ACCESS_ACE_FLAG        = &amp;H40
Const FAILED_ACCESS_ACE_FLAG            = &amp;H80

'NTFS ACE options: ACE types
Const ACCESS_ALLOWED_ACE_TYPE           = &amp;H0
Const ACCESS_DENIED_ACE_TYPE            = &amp;H1
Const SYSTEM_AUDIT_ACE_TYPE             = &amp;H2
Const SYSTEM_ALARM_ACE_TYPE             = &amp;H3
Const ACCESS_ALLOWED_COMPOUND_ACE_TYPE  = &amp;H4
Const ACCESS_ALLOWED_OBJECT_ACE_TYPE    = &amp;H5
Const ACCESS_DENIED_OBJECT_ACE_TYPE     = &amp;H6
Const SYSTEM_AUDIT_OBJECT_ACE_TYPE      = &amp;H7
Const SYSTEM_ALARM_OBJECT_ACE_TYPE      = &amp;H8

'NTFS ACE options: Flags
Const ADS_OBJECT_TYPE_PRESENT           = &amp;H1
Const ADS_INHERITED_OBJECT_TYPE_PRESENT = &amp;H2

' ---------------------------------------------------------------
' Category: Active Directory/ADSI
' ---------------------------------------------------------------

'Security descriptor control flags
Const ADS_SD_CONTROL_SE_OWNER_DEFAULTED       = &amp;H0001
Const ADS_SD_CONTROL_SE_GROUP_DEFAULTED       = &amp;H0002
Const ADS_SD_CONTROL_SE_DACL_PRESENT          = &amp;H0004
Const ADS_SD_CONTROL_SE_DACL_DEFAULTED        = &amp;H0008
Const ADS_SD_CONTROL_SE_SACL_PRESENT          = &amp;H0010
Const ADS_SD_CONTROL_SE_SACL_DEFAULTED        = &amp;H0020
Const ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ = &amp;H0100
Const ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ = &amp;H0200
Const ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED   = &amp;H0400
Const ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED   = &amp;H0800
Const ADS_SD_CONTROL_SE_DACL_PROTECTED        = &amp;H1000
Const ADS_SD_CONTROL_SE_SACL_PROTECTED        = &amp;H2000
Const ADS_SD_CONTROL_SE_SELF_RELATIVE         = &amp;H8000
  
'AD ACE options

'AD ACE options: AccessMask
Const ADS_RIGHT_DS_CREATE_CHILD        = &amp;H1
Const ADS_RIGHT_DS_DELETE_CHILD        = &amp;H2
Const ADS_RIGHT_ACTRL_DS_LIST          = &amp;H4
Const ADS_RIGHT_DS_SELF                = &amp;H8
Const ADS_RIGHT_DS_READ_PROP           = &amp;H10
Const ADS_RIGHT_DS_WRITE_PROP          = &amp;H20
Const ADS_RIGHT_DS_DELETE_TREE         = &amp;H40
Const ADS_RIGHT_DS_LIST_OBJECT         = &amp;H80
Const ADS_RIGHT_DS_CONTROL_ACCESS      = &amp;H100
Const ADS_RIGHT_DELETE                 = &amp;H10000
Const ADS_RIGHT_READ_CONTROL           = &amp;H20000
Const ADS_RIGHT_WRITE_DAC              = &amp;H40000
Const ADS_RIGHT_WRITE_OWNER            = &amp;H80000
Const ADS_RIGHT_SYNCHRONIZE            = &amp;H100000
Const ADS_RIGHT_ACCESS_SYSTEM_SECURITY = &amp;H1000000
Const ADS_RIGHT_GENERIC_ALL            = &amp;H10000000
Const ADS_RIGHT_GENERIC_EXECUTE        = &amp;H20000000
Const ADS_RIGHT_GENERIC_WRITE          = &amp;H40000000
Const ADS_RIGHT_GENERIC_READ           = &amp;H80000000

Const ADS_RIGHT_FULL_CONTROL           = &amp;HF01FF

'AD ACE options: ACE flags
Const ADS_ACEFLAG_INHERIT_ACE              = &amp;H2
Const ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE = &amp;H4
Const ADS_ACEFLAG_INHERIT_ONLY_ACE         = &amp;H8
Const ADS_ACEFLAG_INHERITED_ACE            = &amp;H10
Const ADS_ACEFLAG_SUCCESSFUL_ACCESS        = &amp;H40
Const ADS_ACEFLAG_FAILED_ACCESS            = &amp;H80

'AD ACE options: ACE types
Const ADS_ACETYPE_ACCESS_ALLOWED           = 0
Const ADS_ACETYPE_ACCESS_DENIED            = &amp;H1
Const ADS_ACETYPE_SYSTEM_AUDIT             = &amp;H2
Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT    = &amp;H5
Const ADS_ACETYPE_ACCESS_DENIED_OBJECT     = &amp;H6
Const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT      = &amp;H7

'AD ACE options: Flags
Const ADS_FLAG_OBJECT_TYPE_PRESENT           = &amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;H2

'Some schemaIDGUIDs
Const SCHEMAIDGUID_USER         = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_GROUP        = "{BF967A9C-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_COMPUTER     = "{BF967A86-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_CONTACT      = "{5CB41ED0-0E4C-11D0-A286-00AA003049E2}"
Const SCHEMAIDGUID_OU           = "{BF967AA5-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_PRINTER      = "{BF967AA8-0DE6-11D0-A285-00AA003049E2}"

'Some extended rights
Const GUID_ACCOUNT_RESTRICTIONS = "{4C164200-20C0-11D0-A768-00AA006E0529}"
Const GUID_VALIDATED_SPN        = "{F3A64788-5306-11D1-A9C5-0000F80367C1}"
Const GUID_VALIDATED_DNSHOST    = "{72E39547-7B18-11D1-ADEF-00C04FD8D5CD}"
Const GUID_RESET_PASSWORD       = "{00299570-246D-11D0-A768-00AA006E0529}"

'ADs Types
Const ADSTYPE_INVALID                = 0
Const ADSTYPE_DN_STRING              = 1
Const ADSTYPE_CASE_EXACT_STRING      = 2
Const ADSTYPE_CASE_IGNORE_STRING     = 3
Const ADSTYPE_PRINTABLE_STRING       = 4
Const ADSTYPE_NUMERIC_STRING         = 5
Const ADSTYPE_BOOLEAN                = 6
Const ADSTYPE_INTEGER                = 7
Const ADSTYPE_OCTET_STRING           = 8
Const ADSTYPE_UTC_TIME               = 9
Const ADSTYPE_LARGE_INTEGER          = 10
Const ADSTYPE_PROV_SPECIFIC          = 11
Const ADSTYPE_OBJECT_CLASS           = 12
Const ADSTYPE_CASEIGNORE_LIST        = 13
Const ADSTYPE_OCTET_LIST             = 14
Const ADSTYPE_PATH                   = 15
Const ADSTYPE_POSTALADDRESS          = 16
Const ADSTYPE_TIMESTAMP              = 17
Const ADSTYPE_BACKLINK               = 18
Const ADSTYPE_TYPEDNAME              = 19
Const ADSTYPE_HOLD                   = 20
Const ADSTYPE_NETADDRESS             = 21
Const ADSTYPE_REPLICAPOINTER         = 22
Const ADSTYPE_FAXNUMBER              = 23
Const ADSTYPE_EMAIL                  = 24
Const ADSTYPE_NT_SECURITY_DESCRIPTOR = 25
Const ADSTYPE_UNKNOWN                = 26
Const ADSTYPE_DN_WITH_BINARY         = 27
Const ADSTYPE_DN_WITH_STRING         = 28
  
'Error codes
Const E_ADS_PROPERTY_NOT_FOUND        = &amp;H8000500D
Const ERROR_OBJECT_ALREADY_EXISTS     = &amp;H80071392
Const ERROR_DS_NO_ATTRIBUTE_OR_VALUE  = &amp;H8007200A
Const ERROR_DS_NO_SUCH_OBJECT         = &amp;H80072030
Const ERROR_DS_UNWILLING_TO_PERFORM   = &amp;H80072035

'Schema searchFlags
Const ATTR_INDEXED                    = &amp;H1
Const ATTR_INDEXED_OVER_CONT_AND_ATTR = &amp;H2
Const ATTR_PART_OF_ANR_SET            = &amp;H4
Const ATTR_SURVIVE_DELETION           = &amp;H8
Const ATTR_COPY_WITH_USER             = &amp;H10

'Schema systemFlags
Const ATTR_NOT_REPLICATED             = &amp;H1
Const ATTR_IS_CONSTRUCTED             = &amp;H4
Const ATTR_IS_BASE_SCHEMA             = &amp;H10

'User account options
Const UF_SCRIPT                          = &amp;H0001
Const UF_ACCOUNTDISABLE                  = &amp;H0002
Const UF_HOMEDIR_REQUIRED                = &amp;H0008
Const UF_LOCKOUT                         = &amp;H0010
Const UF_PASSWD_NOTREQD                  = &amp;H0020
Const UF_PASSWD_CANT_CHANGE              = &amp;H0040
Const UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = &amp;H0080
Const UF_DONT_EXPIRE_PASSWD              = &amp;H10000
Const UF_MNS_LOGON_ACCOUNT               = &amp;H20000
Const UF_SMARTCARD_REQUIRED              = &amp;H40000
Const UF_TRUSTED_FOR_DELEGATION          = &amp;H80000
Const UF_NOT_DELEGATED                   = &amp;H100000
Const UF_USE_DES_KEY_ONLY                = &amp;H200000
Const UF_DONT_REQUIRE_PREAUTH            = &amp;H400000

Const UF_TEMP_DUPLICATE_ACCOUNT          = &amp;H0100 'local account
Const UF_NORMAL_ACCOUNT                  = &amp;H0200 'global account
Const UF_INTERDOMAIN_TRUST_ACCOUNT       = &amp;H0800 'incoming trust
Const UF_WORKSTATION_TRUST_ACCOUNT       = &amp;H1000 'ws or ms comp
Const UF_SERVER_TRUST_ACCOUNT            = &amp;H2000 'dc computer

'Group scopes and types
Const ADS_GROUP_TYPE_GLOBAL_GROUP        = &amp;H2
Const ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP  = &amp;H4
Const ADS_GROUP_TYPE_LOCAL_GROUP         = &amp;H4
Const ADS_GROUP_TYPE_UNIVERSAL_GROUP     = &amp;H8
Const ADS_GROUP_TYPE_SECURITY_ENABLED    = &amp;H80000000

'Well-known GUIDs
Const GUID_USERS_CONTAINER               = "a9d1ca15768811d1aded00c04fd8d5cd"
Const GUID_COMPUTRS_CONTAINER            = "aa312825768811d1aded00c04fd8d5cd"
Const GUID_SYSTEMS_CONTAINER             = "ab1d30f3768811d1aded00c04fd8d5cd"
Const GUID_DOMAIN_CONTROLLERS_CONTAINER  = "a361b2ffffd211d1aa4b00c04fd7d83a"
Const GUID_INFRASTRUCTURE_CONTAINER      = "2fbac1870ade11d297c400c04fd8d5cd"
Const GUID_DELETED_OBJECTS_CONTAINER     = "18e2ea80684f11d2b9aa00c04f79f805"
Const GUID_LOSTANDFOUND_CONTAINER        = "ab8153b7768811d1aded00c04fd8d5cd"

'Service status codes
Const ADS_SERVICE_STOPPED                = 1
Const ADS_SERVICE_START_PENDING          = 2
Const ADS_SERVICE_STOP_PENDING           = 3
Const ADS_SERVICE_RUNNING                = 4
Const ADS_SERVICE_CONTINUE_PENDING       = 5
Const ADS_SERVICE_PAUSE_PENDING          = 6
Const ADS_SERVICE_PAUSED                 = 7
Const ADS_SERVICE_ERROR                  = 8

'OpenDSObject authentication mode
Const ADS_SECURE_AUTHENTICATION          = &amp;H1
Const ADS_USE_ENCRYPTION                 = &amp;H2
Const ADS_USE_SSL                        = &amp;H2
Const ADS_READONLY_SERVER                = &amp;H4
Const ADS_PROMPT_CREDENTIALS             = &amp;H8
Const ADS_NO_AUTHENTICATION              = &amp;H10
Const ADS_FAST_BIND                      = &amp;H20
Const ADS_USE_SIGNING                    = &amp;H40
Const ADS_USE_SEALING                    = &amp;H80
Const ADS_USE_DELEGATION                 = &amp;H100
Const ADS_SERVER_BIND                    = &amp;H200

'ADO/LDAP referral chasing options
Const ADS_CHASE_REFERRALS_NEVER          = 0
Const ADS_CHASE_REFERRALS_SUBORDINATE    = &amp;H20
Const ADS_CHASE_REFERRALS_EXTERNAL       = &amp;H40
Const ADS_CHASE_REFERRALS_ALWAYS         = &amp;H60  '&amp;H20 + &amp;H40

'ADO/LDAP search scope options
Const ADS_SCOPE_BASE                     = 0
Const ADS_SCOPE_ONELEVEL                 = 1
Const ADS_SCOPE_SUBTREE                  = 2

'PutEx modes
Const ADS_PROPERTY_CLEAR                 = 1
Const ADS_PROPERTY_UPDATE                = 2
Const ADS_PROPERTY_APPEND                = 3
Const ADS_PROPERTY_DELETE                = 4

'IADsNameTranslate name types
Const ADS_NAME_TYPE_1779                    = 1
Const ADS_NAME_TYPE_CANONICAL               = 2
Const ADS_NAME_TYPE_NT4                     = 3
Const ADS_NAME_TYPE_DISPLAY                 = 4
Const ADS_NAME_TYPE_DOMAIN_SIMPLE           = 5
Const ADS_NAME_TYPE_ENTERPRISE_SIMPLE       = 6
Const ADS_NAME_TYPE_GUID                    = 7
Const ADS_NAME_TYPE_UNKNOWN                 = 8
Const ADS_NAME_TYPE_USER_PRINCIPAL_NAME     = 9
Const ADS_NAME_TYPE_CANONICAL_EX            = 10
Const ADS_NAME_TYPE_SERVICE_PRINCPAL_NAME   = 11
Const ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Create_newADUser.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Create_newADUser.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'create a temporary user in Active Directory
#'This requires the ActiveDirectory PowerShell module from RSAT

Param(
    [Parameter(Mandatory, HelpMessage = "Enter the user name like 'Al Fredo'")]
    [String]$Name,
    [string]$Title,
    [string]$Description,
    [string]$Department
)

Write-Host "Creating temporary AD Account for $Name." -ForegroundColor Cyan
#'split the name into first and last name
$first = $name.split(' ')[0]
$last = $name.split(' ')[1]

#'create the samaccountname
if ($last.Length -gt 13) {
    $accountname = "$($first[0])$($last.Substring(0,13))"		#'In case the name is too long
}
else {
    $accountname = "$($first[0])$last"   
}
$upn = "$accountname@company.pri"

#'create a password
#'use these characters as the source
#'no o(scar) or l(arry) characters to avoid confusing with zero and one.
$seed = "abcdefghijkmnpqrstuvwxyz0192837465)!(@*#'&amp;$^"
#'get 9 random characters
$random9 = $seed.ToCharArray() | get-random -count 9
#'join back to a string
$randomstring = $random9 -join ""

#'this is a regular expression pattern to match on any character from a to z
[regex]$rx = "[a-z]"
#'get the first matching alphabet character
$firstalpha = $rx.match($randomstring).value
#'replace the first alphabet character with its upper case version
$plaintext = $randomstring.Replace($firstalpha, $firstalpha.toUpper())

#'convert the password to a secure string for the New-ADUser cmdlet
$password = ConvertTo-SecureString -String $plaintext -AsPlainText -Force

#'define a hashtable of parameter values to splat to New-ADUser
$new = @{
    DisplayName           = $Name
    GivenName             = $first
    Surname               = $last
    Name                  = $accountName
    samaccountname        = $accountName
    UserPrincipalName     = $upn
    enabled               = $True
    AccountExpirationDate = (Get-Date).AddDays(180).Date			#' 180 day temp user
    AccountPassword       = $password
    path                  = "OU=Employees,DC=company,DC=pri"
    Title                 = $Title
    Department            = $Department
    Description           = $Description
    ErrorAction           = "Stop"
}

Try {
    New-ADUser @new
    Write-Host "Created user $accountname that expires $($new.AccountExpirationDate). Password is $plaintext." -ForegroundColor Green
}
Catch {
    $wsh = new-object -com wscript.shell
    $msg = "Failed to create user $Name. $($_.exception.message)"
    #'display a popup warning and force user to click ok
    $wsh.Popup($msg, -1, "New User", 0 + 48)
}
Finally {
    Write-Host "Finished $($myinvocation.MyCommand)" -ForegroundColor Cyan
}


&lt;#'
demo usage

$p = @{
    Name = "Matilda Fuzziwick" 
    Title = "Shipping Clerk" 
    Department = "Sales"
    Description = "Seasonal hire"
}
 
.\Create-newADUser.ps1 @p
 
get-aduser mfuzziwick -Properties title,department,description

#'try to create the user again

#'reset demo
 get-aduser mfuzziwick | remove-aduser -confirm:$false

#'&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Find_Accounts_With_Expired_Passwords</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Find_Accounts_With_Expired_Passwords</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This did not give me results, but You have to read the article:
https://mcpmag.com/articles/2015/04/30/3-ways-to-keep-active-directory-clean.aspx


$InactiveDays = 30
$MaxPasswordAge = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge.Days


Search-AdAccount -PasswordExpired -UsersOnly | Where-Object {((Get-Date) - (Get-AdUser -Filter "samAccountName -eq $_.SamAccountName").PasswordLastSet) -lt ($MaxPasswordAge + $InactiveDays)}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>LockedOut_Expiring_Disabled_InActive_Expired_NeverExpires</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>LockedOut_Expiring_Disabled_InActive_Expired_NeverExpires</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&gt; Search-ADAccount -AccountDisabled
&gt; Search-ADAccount -AccountExpired
&gt; Search-ADAccount -AccountExpiring
&gt; Search-ADAccount -AccountInactive
&gt; Search-ADAccount -LockedOut
&gt; Search-ADAccount -PasswordExpired
&gt; Search-ADAccount -PasswordNeverExpires</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Modify_User</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Modify_User</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' Uses $Attributes Hashtable for the various properties that you want to 

param ([string]$Username, [hashtable]$Attributes)

    try {
            ## Attempt to find the username
            $UserAccount = Get-AdUser -Identity $Username
            if (!$UserAccount) {
	                                ## If the username isn't found throw an error and exit
	                                Write-Error "The username '$Username' does not exist"
	                                return
                                }
        } 
  catch {

        }

## The $Attributes parameter will contain only the parameters for the Set-AdUser cmdlet other than
## Password.  If the password is in $Attributes it needs to be treated differently, i.e. need to use:Set-ADAccountPassword, then delete it from $Attributes .
if ($Attributes.ContainsKey('Password')) {
	                                            $UserAccount | Set-ADAccountPassword -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $Attributes.Password -Force)
	                                            ## Remove the password key because we'll be passing this hashtable directly to Set-AdUser later
	                                            $Attributes.Remove('Password')
                                          }

$UserAccount | Set-AdUser @Attributes


#' USAGE ======================================================================================================
#' the parameter names (i.e. Hash Table Keys) must be spelled just like the Parameters of the method be called
#' e.g. 'givenName' and 'surname' keys in the Hashtable are the same as the PARMs of Set-AdUser  

&gt; .\Set-MyAdUser.ps1 -Username rsmith -Attributes @{givenName = "Trudy"; surname = 'smithley'}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Search_AD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Search_AD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Save the code below as FindUser.ps1

$User = Read-Host “Enter the Users’ Logon Name”
$Search = New-Object DirectoryServices.DirectorySearcher([ADSI]“”)
$Search.filter = “(&amp;(objectClass=user)(sAMAccountName=$User))”
$Search.Findall()
=======================================================================
'a report of all AD accounts with the password set “Not to Expire.”
'Save code as PassNotExp.ps1

$Search = New-Object DirectoryServices.DirectorySearcher([ADSI]“”)
$Search.filter = “(&amp;(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=65536))”
$results = $Search.Findall()
Foreach($result in $results){
$User = $result.GetDirectoryEntry()
$user.DistinguishedName
}

'What if you wanted to pull the Logon Names? Just make the following change
'	 to the last line in the script – $user.sAMAccountName

=======================================================================
' get a list of all users in a specific OU.

'If you wanted to search not only the Disabled Account OU but any sub OUs 
'	you would modify the search scope as follows:
$Search.SearchScopt = “SubTree”
---------------------------------------------------------------
$ADsPath = [ADSI]“LDAP://OU=Disabled Accounts,DC=MyDomain,DC=Msft”
$Search = New-Object DirectoryServices.DirectorySearcher($ADsPath)
$Search.filter = “(objectClass=user)”
$Search.PageSize = 1000
$Search.SearchScope = “OneLevel” $results = $Search.Findall()
Foreach($result in $results){
$User = $result.GetDirectoryEntry()
$user.DistinguishedName
}
=======================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>User_Attributes</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>User_Attributes</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Import-Module activedirectory
New-PSDrive -PSProvider activedirectory -Name theUsers -Root "AD:\CN=Users,DC=jphsa,DC=org"
Set-Location theUsers:
PS:CN=Users&gt;Get-ADUser ggarson -Properties * | Select-Object -First 1  | Select *

'OUTPUT
===================

AccountExpirationDate                : 
accountExpires                       : 9223372036854775807
AccountLockoutTime                   : 
AccountNotDelegated                  : False
adminCount                           : 1
AllowReversiblePasswordEncryption    : False
AuthenticationPolicy                 : {}
AuthenticationPolicySilo             : {}
BadLogonCount                        : 0
badPasswordTime                      : 131733782693735230
badPwdCount                          : 0
CannotChangePassword                 : False
CanonicalName                        : jphsa.org/Users/Glenn Garson
Certificates                         : {}
City                                 : 
CN                                   : Glenn Garson
codePage                             : 0
Company                              : JPHSA
CompoundIdentitySupported            : {False}
Country                              : 
countryCode                          : 0
Created                              : 12/19/2016 8:38:16 AM
createTimeStamp                      : 12/19/2016 8:38:16 AM
Deleted                              : 
Department                           : ADMIN - IT
Description                          : 12/19/2016
DisplayName                          : Glenn Garson
DistinguishedName                    : CN=Glenn Garson,CN=Users,DC=jphsa,DC=org
Division                             : 
DoesNotRequirePreAuth                : False
dSCorePropagationData                : {6/5/2018 1:58:26 AM, 6/1/2018 1:51:18 PM, 6/1/2018 9:28:57 AM, 6/1/2018 8:36:38 AM...}
EmailAddress                         : ggarson@jphsa.org
EmployeeID                           : 309645
EmployeeNumber                       : 
Enabled                              : True
Fax                                  : 
GivenName                            : Glenn
HomeDirectory                        : \\jphsa.org\shared\Users\ggarson
HomedirRequired                      : False
HomeDrive                            : H:
homeMDB                              : CN=EB EX13 Mailbox Database,CN=Databases,CN=Exchange Administrative Group 
                                       (FYDIBOHF23SPDLT),CN=Administrative Groups,CN=JPHSA,CN=Microsoft 
                                       Exchange,CN=Services,CN=Configuration,DC=jphsa,DC=org
HomePage                             : 
HomePhone                            : 
Initials                             : 
instanceType                         : 4
isDeleted                            : 
KerberosEncryptionType               : {None}
LastBadPasswordAttempt               : 6/13/2018 10:44:29 AM
LastKnownParent                      : 
lastLogoff                           : 0
lastLogon                            : 131751002617905998
LastLogonDate                        : 7/3/2018 11:37:37 AM
lastLogonTimestamp                   : 131751094573927303
legacyExchangeDN                     : /o=JPHSA/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Recipients/cn=Glenn Garson442
LockedOut                            : False
lockoutTime                          : 0
logonCount                           : 25838
LogonWorkstations                    : 
mail                                 : ggarson@jphsa.org
mailNickname                         : ggarson
Manager                              : CN=Gary Lamprecht,CN=Users,DC=jphsa,DC=org
mDBUseDefaults                       : True
MemberOf                             : {CN=jphsa411Secure_Admin,OU=Groups,DC=jphsa,DC=org, CN=Recipient Management Customized,OU=Microsoft 
                                       Exchange Security Groups,DC=jphsa,DC=org, CN=SQL_SERVER_Alerts,OU=Email Distribution 
                                       Groups,DC=jphsa,DC=org, CN=Managed Availability Servers,OU=Microsoft Exchange Security 
                                       Groups,DC=jphsa,DC=org...}
MNSLogonAccount                      : False
MobilePhone                          : 
Modified                             : 7/3/2018 11:37:48 AM
modifyTimeStamp                      : 7/3/2018 11:37:48 AM
msDS-SupportedEncryptionTypes        : 0
msDS-User-Account-Control-Computed   : 0
msExchDelegateListBL                 : {CN=JPHSA-IT,OU=Room Scheduling,DC=jphsa,DC=org}
msExchHomeServerName                 : /o=JPHSA/ou=Exchange Administrative Group (FYDIBOHF23SPDLT)/cn=Configuration/cn=Servers/cn=WBEXCH1
msExchMailboxGuid                    : {156, 211, 243, 3...}
msExchMailboxSecurityDescriptor      : System.DirectoryServices.ActiveDirectorySecurity
msExchMobileMailboxFlags             : 1
msExchPoliciesIncluded               : {ad4d4934-ef44-4faa-9487-102d017d1d23, {26491cfc-9e50-4857-861b-0cb8df22b5d7}}
msExchRBACPolicyLink                 : CN=Default Role Assignment Policy,CN=Policies,CN=RBAC,CN=JPHSA,CN=Microsoft 
                                       Exchange,CN=Services,CN=Configuration,DC=jphsa,DC=org
msExchRecipientDisplayType           : 1073741824
msExchRecipientTypeDetails           : 1
msExchShadowMailNickname             : ggarson
msExchShadowProxyAddresses           : {SMTP:ggarson@jphsa.org, X400:C=US;A= ;P=JPHSA;O=Exchange;S=Garson;G=Glenn;}
msExchTextMessagingState             : {302120705, 16842751}
msExchUMDtmfMap                      : {reversedPhone:0521932405, emailAddress:4427766, lastNameFirstName:42776645366, 
                                       firstNameLastName:45366427766}
msExchUserAccountControl             : 0
msExchUserCulture                    : en-US
msExchVersion                        : 88218628259840
msExchWhenMailboxCreated             : 12/19/2016 9:11:51 AM
Name                                 : Glenn Garson
nTSecurityDescriptor                 : System.DirectoryServices.ActiveDirectorySecurity
ObjectCategory                       : CN=Person,CN=Schema,CN=Configuration,DC=jphsa,DC=org
ObjectClass                          : user
ObjectGUID                           : a74a1229-fd6b-40cb-b69d-27198807911b
objectSid                            : S-1-5-21-3427687756-3683169169-49774839-12106
Office                               : IT - EB
OfficePhone                          : 5042391250
Organization                         : 
OtherName                            : 
PasswordExpired                      : False
PasswordLastSet                      : 6/20/2018 3:12:13 PM
PasswordNeverExpires                 : False
PasswordNotRequired                  : False
physicalDeliveryOfficeName           : IT - EB
POBox                                : 
PostalCode                           : 
PrimaryGroup                         : CN=Domain Users,OU=Groups,DC=jphsa,DC=org
primaryGroupID                       : 513
PrincipalsAllowedToDelegateToAccount : {}
ProfilePath                          : 
ProtectedFromAccidentalDeletion      : False
proxyAddresses                       : {SMTP:ggarson@jphsa.org, X400:C=US;A= ;P=JPHSA;O=Exchange;S=Garson;G=Glenn;}
publicDelegatesBL                    : {CN=JPHSA-IT,OU=Room Scheduling,DC=jphsa,DC=org, CN=IT Calendar,OU=Room Scheduling,DC=jphsa,DC=org}
pwdLastSet                           : 131739991334792846
SamAccountName                       : ggarson
sAMAccountType                       : 805306368
ScriptPath                           : logonIT.bat
sDRightsEffective                    : 15
ServicePrincipalNames                : {}
showInAddressBook                    : {CN=All Users,CN=All Address Lists,CN=Address Lists Container,CN=JPHSA,CN=Microsoft 
                                       Exchange,CN=Services,CN=Configuration,DC=jphsa,DC=org, CN=Default Global Address List,CN=All Global 
                                       Address Lists,CN=Address Lists Container,CN=JPHSA,CN=Microsoft 
                                       Exchange,CN=Services,CN=Configuration,DC=jphsa,DC=org}
SID                                  : S-1-5-21-3427687756-3683169169-49774839-12106
SIDHistory                           : {}
SmartcardLogonRequired               : False
sn                                   : Garson
State                                : 
StreetAddress                        : 
Surname                              : Garson
telephoneNumber                      : 5042391250
textEncodedORAddress                 : X400:C=US;A= ;P=JPHSA;O=Exchange;S=Garson;G=Glenn;
Title                                : IT Technical Support Specialist II
TrustedForDelegation                 : False
TrustedToAuthForDelegation           : False
UseDESKeyOnly                        : False
userAccountControl                   : 512
userCertificate                      : {}
UserPrincipalName                    : ggarson@jphsa.org
uSNChanged                           : 20008229
uSNCreated                           : 1325114
whenChanged                          : 7/3/2018 11:37:48 AM
whenCreated                          : 12/19/2016 8:38:16 AM
PropertyNames                        : {AccountExpirationDate, accountExpires, AccountLockoutTime, AccountNotDelegated...}
AddedProperties                      : {}
RemovedProperties                    : {}
ModifiedProperties                   : {}
PropertyCount                        : 137</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>userAccountControl_field_in_AD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>userAccountControl_field_in_AD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://powershelltutorial.net/ActiveDirectory/

'The User Account Control attribute requires an integer data type
'you can see it in the Attribute Editor tab of the User's properties

Ads Constant								Hex Value	Decimal Value
ADS_UF_SCRIPT								0x0001	1
ADS_UF_ACCOUNTDISABLE						0x0002	2
ADS_UF_HOMEDIR_REQUIRED						0x0008	8
ADS_UF_LOCKOUT								0x0010	16
ADS_UF_PASSWD_NOTREQD						0x0020	32
ADS_UF_PASSWD_CANT_CHANGE					0x0040	64
ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED		0x0080	128
ADS_UF_TEMP_DUPLICATE_ACCOUNT				0x0100	256
ADS_UF_NORMAL_ACCOUNT						0x0200	512
ADS_UF_INTERDOMAIN_TRUST_ACCOUNT			0x0800	2048
ADS_UF_WORKSTATION_TRUST_ACCOUNT			0x1000	4096
ADS_UF_SERVER_TRUST_ACCOUNT					0x2000	8192
ADS_UF_DONT_EXPIRE_PASSWD					0x10000	65536
ADS_UF_MNS_LOGON_ACCOUNT					0x20000	131072
ADS_UF_SMARTCARD_REQUIRED					0x40000	262144
ADS_UF_TRUSTED_FOR_DELEGATION				0x80000	524288
ADS_UF_NOT_DELEGATED						0x100000	1048576
ADS_UF_USE_DES_KEY_ONLY						0x200000	2097152
ADS_UF_DONT_REQUIRE_PREAUTH					0x400000	4194304
ADS_UF_PASSWORD_EXPIRED						0x800000	8388608
ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION	0x1000000	16777216

example user with value 546

#'So the value of 546 represents an answer to an equation. 
#'It is the decimal values (Flags) added together that gives us the value for the attribute. 
#'
#' 
#'I’ve introduced a term called a Constant. 
#'A constant is a variable with one major difference.
 
#' A variable’s value can be changed where a Constant’s value always stays the same throughout the script. 
#'
#'Using the Decimal Value column in the table let’s look at what type of Control has been set on FirstName’s Account. 
#'By process of elimination we figure the puzzle out like this:
#'
#'1. Looking at FirstName’s control value of 546, 
#'    what is the highest attribute number we can start with? 
#'    Should be 512… correct? So we know this is a NORMAL_ACCOUNT (basically a user account). 
#'    Subtract 512 from 546 and we have 34 left over.
#'
#'2. With 34 left over, what is the next attribute number we can apply? 
#'    Should be PASSWD_NOTREQD which has a decimal value of 32. 
#'    Subtract 32 from 34 and we should have a value of 2 left over.
#'
#'3. What’s the next value that is assigned? ACCOUNTDISABLE has a decimal value of 2. 
#'    Subtract 2 from 2 and we have no value left over.
#'
#'So, according to the userAccountControl attribute; 
#'    FirstName LastName is a Normal account that doesn’t require a password and is currently disabled.

'Just by looking at the ACCOUNTDISABLE flag, 
'	it should be apparent that we can enable the account by removing a decimal value of 2 
'	from the current userAccountControl attribute. 

$objUser = [ADSI]“LDAP://CN=FirstName LastName,OU=TestOUUsers,OU=TestOU,DC=MyDomain,DC=msft”
$objUser.put(“userAccountControl”, 544)
$objUser.SetInfo()

#'Important: The userAccessControl attribute holds only one integer, 
#'    which is the sum of all the integer values for each Control Flag 
#'    that you wish to set. Keep this in mind when changing this attribute. 
#'Let’s say you have a user account with the attribute set to 8388608 (Password Expired). 
#'    Your boss has asked that you disable the account but he also wants to make sure 
#'    the password stays expired should someone at the help desk get duped into re-enabling the account. 
#'In this case you would want to set the userAccessControl attribute to 8388610. 
#'Can you see why changing the attribute to a value of just 2 would be an issue? 
#'If you disabled the account using the value of 2 (ACCOUNTDISABLE) you have removed the value of 8388608
#'     and now the Password is not expired. 
#'Hope that makes sense… You can get into a lot of trouble setting attributes, so be careful and thorough.
#'


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_CIM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>discovering_Class_Methods</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_CIM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>discovering_Class_Methods</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'ASSUMING:  -Namespace root/cimv2


#'This gets a list of processes
&gt;Get-CimInstance Win32_process

#'This gets the CimClass Methods for the process "Win32_process"
(Get-CimInstance -ClassName Win32_process -Filter "name = 'powershell_ise.exe'").CimClass.CimClassMethods 

================================

&gt;Get-CimInstance Win32_Service
'OUTPUT
-----------
#'ProcessId Name                               StartMode State   Status ExitCode
#'--------- ----                               --------- -----   ------ --------
#'0         AeLookupSvc                        Manual    Stopped OK     0       
#'0         ALG                                Manual    Stopped OK     1077    
#'884       AMD External Events Utility        Auto      Running OK     0       
#'0         AppIDSvc                           Manual    Stopped OK     1077    
#'0         Appinfo                            Manual    Stopped OK     1077    
#'0         AppMgmt                            Manual    Stopped OK     1077    
#'0         aspnet_state                       Disabled  Stopped OK     1077    
#'316       AudioEndpointBuilder               Auto      Running OK     0       
#'992       AudioSrv                           Auto      Running OK     0       
#'0         AxInstSV                           Manual    Stopped OK     1077    
#'0         BDESVC                             Manual    Stopped OK     1077    
#'1512      BFE                                Auto      Running OK     0       
#'356       BITS                               Manual    Running OK     0       
#'356       Browser                            Manual    Running OK     0       
#'0         bthserv                            Disabled  Stopped OK     1077    
#'356       CertPropSvc                        Manual    Running OK     0       
#'0         clr_optimization_v2.0.50727_32     Disabled  Stopped OK     1077    
#'0         clr_optimization_v2.0.50727_64     Disabled  Stopped OK     1077    
#'

'This pulls out the BITS instance:
&gt;Get-CimInstance -ClassName Win32_Service |  Where-Object -Property name -EQ BITS
'OUTPUT
----------
'ProcessId Name StartMode State   Status ExitCode
'--------- ---- --------- -----   ------ --------
'356       BITS Manual    Running OK     0    

'Now to see the methods:
&gt;(Get-CimInstance -ClassName Win32_Service |  Where-Object -Property name -EQ BITS).CimClass.CimClassMethods
'OUTPUT
-------
#'Name                  ReturnType Parameters                                                      Qualifiers                         
#'----                  ---------- ----------                                                      ----------                         
#'StartService              UInt32 {}                                                              {MappingStrings, ValueMap}         
#'StopService               UInt32 {}                                                              {MappingStrings, ValueMap}         
#'PauseService              UInt32 {}                                                              {MappingStrings, ValueMap}         
#'ResumeService             UInt32 {}                                                              {MappingStrings, ValueMap}         
#'InterrogateService        UInt32 {}                                                              {MappingStrings, ValueMap}         
#'UserControlService        UInt32 {ControlCode}                                                   {MappingStrings, ValueMap}         
#'Create                    UInt32 {DesktopInteract, DisplayName, ErrorControl, LoadOrderGroup...} {MappingStrings, Static, ValueMap} 
#'Change                    UInt32 {DesktopInteract, DisplayName, ErrorControl, LoadOrderGroup...} {MappingStrings, ValueMap}         
#'ChangeStartMode           UInt32 {StartMode}                                                     {MappingStrings, ValueMap}         
#'Delete                    UInt32 {}                                                              {MappingStrings, ValueMap}         
#'GetSecurityDescriptor     UInt32 {Descriptor}                                                    {implemented, Privileges, ValueMap}
#'SetSecurityDescriptor     UInt32 {Descriptor}                                                    {implemented, Privileges, ValueMap}
#'

'Then this expands the 'Parameters' Property of the 'change' ,method:
&gt;(Get-CimInstance -ClassName Win32_Service |  Where-Object -Property name -EQ BITS).CimClass.CimClassMethods | Where-Object -Property name -EQ Change | select -ExpandProperty Parameters
'OUTPUT
--------
#'Name                           CimType Qualifiers                         ReferenceClassName
#'----                           ------- ----------                         ------------------
#'DesktopInteract                Boolean {ID, In, MappingStrings}                             
#'DisplayName                     String {ID, In, MappingStrings}                             
#'ErrorControl                     UInt8 {ID, In, MappingStrings}                             
#'LoadOrderGroup                  String {ID, In, MappingStrings}                             
#'LoadOrderGroupDependencies StringArray {ID, In, MappingStrings}                             
#'PathName                        String {ID, In, MappingStrings}                             
#'ServiceDependencies        StringArray {ID, In, MappingStrings}                             
#'ServiceType                      UInt8 {BitMap, ID, In, MappingStrings}                     
#'StartMode                       String {ID, In, MappingStrings, ValueMap}                   
#'StartName                       String {ID, In, MappingStrings}                             
#'StartPassword                   String {ID, In, MappingStrings}                             
#'



</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>add_alias_and_scriptBloc_to_an_Object</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>add_alias_and_scriptBloc_to_an_Object</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#' see Demo 2 (i.e. Create_Object_adding_one_Member_at_time  )

#'This adds a script, as a property, to the object

#' Demo 3 -- Add alias for one of the properties
#'-----------------------------------------------------------------------------#'
Clear-Host
Add-Member -InputObject $myObject `
           -MemberType AliasProperty `                #' &lt;=== This is an alias for a previously created property
           -Name 'Description' `					  #' So the value in the 'Name' property (i.e. "Description") 
           -Value 'Comment' `						  #'	will reference the property named in the 'Value' property (i.e. "Comment)
           -PassThru                                  #' This will let you use it in later piped step
"Comment......: $($myObject.Comment)"				  #' &lt;==== So you can use either 'Comment' or 'Description' and it will return the same value
"Description..: $($myObject.Description)"



#' Demo 3 -- Add script block to object
#'  where '$this' refers to the current instance of your object
Clear-Host
$block = { 
           $fqn = $this.Schema + '.' + $this.Table 				#'&lt;=== fqn stands for Fully Qualified Name
           return $fqn
         }

Add-Member -InputObject $myObject `
           -MemberType ScriptMethod `					#' b/c we are adding a 'script'
           -Name 'FullyQualifiedName' `
           -Value $block `								#' Here we are adding the block that was populated above
           -PassThru

#' Parenthesis are very important, without it will just display the function properties and some info, but WITH the parenthesis it EXECUTES the function
$myObject.FullyQualifiedName()  
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Crreate_Object_adding_one_Member_at_time</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Crreate_Object_adding_one_Member_at_time</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'-----------------------------------------------------------------------------#'
#' Demo 2 -- Create a new object by adding properties one at a time (to SINGLE or MULTIPLE objects)
#' In the previous demo a property hash table was used to generate the object
#' Behind the scenes it does the equivalent of what this function does
#'-----------------------------------------------------------------------------#'
function Create-Object ($Schema, $Table, $Comment)
{
  #' Start by creating an EMPTY generic object of type PSObject
  $object = New-Object –TypeName psobject     

  #' SIMPLE syntac
  #' {as an Argument to a method (i.e. Add-Member) , this works for creation of ONE object}
  #' after creating it, then add the FIRST Member
  #' Add-Member by passing in input object 
  Add-Member -InputObject $object `
             –MemberType NoteProperty `			#'&lt;=== This is generic property
             –Name Schema `						#'&lt;=== this is the name of the property
             –Value $Schema						#'&lt;=== This is the value of the property


  #' ALTERNATE syntax, pipe the object as an input to Add-Member 
  #' {Pipe the object as input into the Method, could work for a COLLECTION of objects}
  #' Thus you could add a property to ALL the members of a collection  
  #' NOTE that with this syntax, 'object' could itself be a collection of objects
  #
  $object | Add-Member –MemberType NoteProperty `
                       –Name Table `
                       –Value $Table

  #' SECOND Member
  $object | Add-Member -MemberType NoteProperty `
                       -Name Comment `
                       -Value $Comment

  return $object
}

#'USAGE:

#'Create a new object
$myObject = Create-Object -Schema "MySchema" -Table "MyTable" -Comment "MyComment"
$myObject							 #' &lt;=== This will echo back the three properties, and their values

#' Display in text. Note because it is an object need to wrap in $() to access a property
"My Schema = $($myObject.Schema)"

$myObject.Schema = "New Schema"      #'&lt;=== update the property w/ a new value
$myObject.Comment = "New Comment"    #'&lt;=== update the property w/ a new value
$myObject							 #' &lt;=== This will echo back the three properties, and their values</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Default_Properties</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Default_Properties</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>I am not sure exactly what the "Default" properties does, except make it harder to see all the properties
See the last two lines, for what you now have to do to see ALL properties


#'-----------------------------------------------------------------------------#'
#' Demo 6 -- Set default properties
#' Thus display just the most important properties, when you type just the object.
#'-----------------------------------------------------------------------------#'
Clear-Host

#' When just running the object, it displays all properties
$myObject

#' If you have a lot, this can get overwhelming. Instead you can define a
#' default set to display.

#' Define the property names in an ARRAY.
$defaultProperties = 'Schema', 'Table', 'Comment', 'Author'

#' Create a PROPERTY SET object, 
#'   using 'New-Object'and 'PSPropertySet', 
#'   and pass in the array 
$defaultPropertiesSet `
  = New-Object System.Management.Automation.PSPropertySet(`
      ‘DefaultDisplayPropertySet’ `                            #' &lt;===  This is the type we want to create, so it is the 1st Parm.
      ,[string[]]$defaultProperties `                          #' &lt;===  Here you give it the object holding the array
      )

#' Create a PS Member Info object from the previous property set object
$members `
  = [System.Management.Automation.PSMemberInfo[]]@($defaultPropertiesSet)    #' &lt;===  Here you give it the set that was just created

#' Now add to the object
$myObject | Add-Member MemberSet PSStandardMembers $members            #' Now add a MemberSet of the type: PSStandardMembers

#' Now the object will just display the default list in standard output
$myObject

#' Little easier to read in a list
$myObject | Format-List

#' To display ALL PROPERTIES, pipe through format-list with wild card for property
$myObject | Format-List -Property *
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>ENUM___requires_v5_PowerShell</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>ENUM___requires_v5_PowerShell</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'ENUM___requires_v5_PowerShell



#'region Enum

#'-----------------------------------------------------------------------------#'
#' Show Enums in PS
#'   gives you intellisense when using the enum
#'   and to see if a dynamic value is a valid value for the enum
#'-----------------------------------------------------------------------------#'

#' Define the valid values for the enum
Enum MyTwitters
{
  Pluralsight
  ArcaneCode
  N4IXT
}

#' Note when typing the last : will trigger intellisense!
#' Note that the enum is in Square Brackets
$tweet = [MyTwitters]::ArcaneCode
$tweet

#' See if they picked something valid
[enum]::IsDefined(([MyTwitters]), $tweet)         #' This will return "True"

#' Set it to something invalid and see if it passes as an enum
$tweet = 'Invalid'
[enum]::IsDefined(([MyTwitters]), $tweet)

#'endregion Enum
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>GET_SET_scriptBlock_for_Logic_when_providing_or_returning_Values</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>GET_SET_scriptBlock_for_Logic_when_providing_or_returning_Values</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#'-----------------------------------------------------------------------------#'
#' Demo 5 -- Script Property
#'-----------------------------------------------------------------------------#'
#' These are analogues to properties in C#', with a Getter and Setter function
#' They are good for introducing some logic into the GET/SET method, HOWEVER they can be bypassed by the user.
Clear-Host

#' Add a property we can work with
Add-Member -InputObject $myObject `
           –MemberType NoteProperty `
           –Name AuthorName `                  #' name of the property being added
           –Value 'No Author Name'             #' initial value

#'============================================= These are the 2 script blocks that are then used 


#' This defines the GET for this property, i.e. how to RETURN the property by writing a script to do it, 
#'    rather than just setting the property value

#' "getBlock" is an arbitrary name for this script block
$getBlock = { return $this.AuthorName }

#' This defines the SET, i.e. how to GIVE the value to the object, Adding a simple check for the name
#' "setBlock" is an arbitrary name for this script block
$setBlock = { 
              param ( [string]$author )
                            
              if($author.Length -eq 0)
              { $author = 'Robert C. Cain, MVP' }
              
              $this.AuthorName = $author
            }

#'=============================================

#' Now add the custom Get/Set ScriptProperty to the member   #'&lt;=== Note this is a PROPERTY (i.e. scriptPROPERTY)
Add-Member -InputObject $myObject `
           -MemberType ScriptProperty `          #' &lt;==== Here is where you tell it that you are adding a SCRIPTBLOCK to the property
           -Name Author `                        #' &lt;==== The name of the Property, that has the two script blocks
           -Value $getBlock `                    #' &lt;==== Give the object the first script
           -SecondValue $setBlock                #' &lt;==== Give the object the second script

#'=============================================

#' Demo its use when passing as value
$myObject.Author = 'ArcaneCode'                       #'&lt;========== This will just set the value
"`$myObject.Author now equals $($myObject.Author )"

#' Now pass in nothing to see the setter functionality kicking in
$myObject.Author = ''
$myObject.Author                   #'&lt;============= This uses the logic in the Setter, and returns: 'Robert C. Cain, MVP'

#' Unfortunately the original property is still available (i.e. you can not hide it from the user), and thus
#' the custom get/set can be bypassed
$myObject.AuthorName = 'Evil Author'
$myObject.Author                       #' Author reflects value of AuthorName
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Classes_and_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>scriptBlock_with_Parms</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Classes_and_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>scriptBlock_with_Parms</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'This adds a script, as a property, to the object

#'-----------------------------------------------------------------------------#'
#' Demo 4 -- Script block with parameters
#'-----------------------------------------------------------------------------#'
Clear-Host
$block = { 
           param ($DatabaseName)
           $dqn = "$DatabaseName.$($this.Schema).$($this.Table)"
           return $dqn
         }

Add-Member -InputObject $myObject `
           -MemberType ScriptMethod `                   #'&lt;=== Note this is a METHOD (i.e. scriptMETHOD)
           -Name 'DatabaseQualifiedName' `              #' &lt;=== This is the Name of the method that implements the Script Block
           -Value $block `
           -PassThru

#' Parens are very important, without it will just display the function
$myObject.DatabaseQualifiedName('MyDBName')  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_info</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Profile_function_toRemoveLocalUserProfile</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_info</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Profile_function_toRemoveLocalUserProfile</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://gallery.technet.microsoft.com/scriptcenter/Remove-UserProfile-Remove-96e27a3b

#'This script contains a function (Remove-UserProfile) which is used to remove user profiles, 
#'    and additional contents of the C:\Users directory (if specified) on a local computer.  
#' Parameters exist to "Exclude" one or more user profiles from being removed, 
#'    remove only profiles "Before" a date when they have not been accessed, 
#'    and to invoke a "DirectoryCleanup" to remove additional files/folders (i.e. non-profiles) within the C:\Users directory.  
#'    Per profile, the profile object itself and all associated registry keys are removed 
#'        if the profile meets the criteria defined via the cmdlet's parameters.
#'
#'This cmdlet requires adminisrative privileges to run effectively. 
#'    Furthermore, this cmdlet is not intended to be used on Virtual Desktop Infrastructure (VDI) environments 
#'    or others which utilize persistent storage on alternate disks, 
#'    or any configurations which utilize another directory other than C:\Users to store user profiles.  
#'This cmdlet is designed to function with PowerShell versions 2 and above.

'USAGE
-------
#'Remove all non-active and non-system designated user profiles from the local computer. 
Remove-UserProfile 
 
#'Remove all non-active and non-system designated user profiles not used within the past month, displaying verbose output as well. 
Remove-UserProfile -Before (Get-Date).AddMonths(-1) -Verbose 
 
#'Remove all non-active and non-system designated user profiles except "labadmin" and "desktopuser", and remove additional non-profile files/folders within C:\Users as well. 
Remove-UserProfile -Exclude @("labadmin", "desktopuser") -DirectoryCleanup 
 
#'Invoke Remove-UserProfile on a Remote Computer 
$scriptBlock = { 
    function Remove-UserProfile 
    { 
        ... 
    } 
 
    Remove-UserProfile 
} 
 
Invoke-Command -ComputerName "GWS-F20" -ScriptBlock $scriptBlock 
 
#'Invoke Remove-UserProfile on Many Remote Computers, Passing in Arguments 
#'This Example Utilizes Windows Workflow Foundation Technology, Available in PowerShell V3 and Above 
$scriptBlock = { 
    function Remove-UserProfile 
    { 
        ... 
    } 
 
    Remove-UserProfile -Exclude $args 
} 
 
$compArray = @() 
Get-Content -Path "\\path\to\computers.txt" | ForEach-Object { $compArray += $_ } 
 
$excludedList = @("labadmin", "desktopuser") 
 
Invoke-Command -ComputerName $compArray -ScriptBlock $scriptBlock -ArgumentList $excludedList -ThrottleLimit 50

==================================================================================================================

#PowerShell Script Containing Function Used to Remove User Profiles &amp; Additional Remnants of C:\Users Directory
#Developer: Andrew Saraceni (saraceni@wharton.upenn.edu)
#Date: 12/22/14

#Requires -Version 2.0

function Remove-UserProfile
{
    &lt;#
    .SYNOPSIS
    Removes user profiles and additional contents of the C:\Users 
    directory if specified.
    .DESCRIPTION
    Gathers a list of profiles to be removed from the local computer, 
    passing on exceptions noted via the Exclude parameter and/or 
    profiles newer than the date specified via the Before parameter.  
    If desired, additional files and folders within C:\Users can also 
    be removed via use of the DirectoryCleanup parameter.

    Once gathered, miscellaneous items are first removed from the 
    C:\Users directory if specified, followed by the profile objects 
    themselves and all associated registry keys per profile.  A listing 
    of current items within the C:\Users directory is returned 
    following the profile removal process.
    .PARAMETER Exclude
    Specifies one or more profile names to exclude from the removal 
    process.
    .PARAMETER Before
    Specifies a date from which to remove profiles before that haven't 
    been accessed since that date.
    .PARAMETER DirectoryCleanup
    Removes additional files/folders (i.e. non-profiles) within the 
    C:\Users directory.
    .EXAMPLE
    Remove-UserProfile
    Remove all non-active and non-system designated user profiles 
    from the local computer.
    .EXAMPLE
    Remove-UserProfile -Before (Get-Date).AddMonths(-1) -Verbose
    Remove all non-active and non-system designated user profiles 
    not used within the past month, displaying verbose output as well.
    .EXAMPLE
    Remove-UserProfile -Exclude @("labadmin", "desktopuser") -DirectoryCleanup
    Remove all non-active and non-system designated user profiles 
    except "labadmin" and "desktopuser", and remove additional 
    non-profile files/folders within C:\Users as well.
    .NOTES
    Even when not specifying the Exclude parameter, the following 
    profiles are not removed when utilizing this cmdlet:
    C:\Windows\ServiceProfiles\NetworkService 
    C:\Windows\ServiceProfiles\LocalService 
    C:\Windows\system32\config\systemprofile 
    C:\Users\Public
    C:\Users\Default

    Aside from the original profile directory (within C:\Users) 
    itself, the following registry items are also cleared upon 
    profile removal via WMI:
    "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\{SID of User}"
    "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileGuid\{GUID}" SidString = {SID of User}
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\{SID of User}"

    Additionally, any currently loaded/in use profiles will not be 
    removed.  Regarding miscellaneous non-profile items, hidden items 
    are not enumerated or removed from C:\Users during this process.

    This cmdlet requires adminisrative privileges to run effectively.
      
    This cmdlet is not intended to be used on Virtual Desktop 
    Infrastructure (VDI) environments or others which utilize 
    persistent storage on alternate disks, or any configurations 
    which utilize another directory other than C:\Users to store 
    user profiles.
    #&gt;
    
    [CmdletBinding()]
    param(
        [Parameter(Position=0,Mandatory=$false)]
        [String[]]$Exclude,
        [Parameter(Position=1,Mandatory=$false)]
        [DateTime]$Before,
        [Parameter(Position=2,Mandatory=$false)]
        [Switch]$DirectoryCleanup
    )

    Write-Verbose "Gathering List of Profiles on $env:COMPUTERNAME to Remove..."

    $userProfileFilter = "Loaded = 'False' AND Special = 'False'"
    $cleanupExclusions = @("Public", "Default")

    if ($Exclude)
    {
        foreach ($exclusion in $Exclude)
        {
            $userProfileFilter += "AND NOT LocalPath LIKE '%$exclusion'"
            $cleanupExclusions += $exclusion
        }
    }

    if ($Before)
    {
        $userProfileFilter += "AND LastUseTime &lt; '$Before'"

        $keepUserProfileFilter = "Special = 'False' AND LastUseTime &gt;= '$Before'"
        $profilesToKeep = Get-WmiObject -Class Win32_UserProfile -Filter $keepUserProfileFilter -ErrorAction Stop

        foreach ($profileToKeep in $profilesToKeep)
        {
            try
            {
                $userSID = New-Object -TypeName System.Security.Principal.SecurityIdentifier($($profileToKeep.SID))
                $userName = $userSID.Translate([System.Security.Principal.NTAccount])
                
                $keepUserName = $userName.Value -replace ".*\\", ""
                $cleanupExclusions += $keepUserName
            }
            catch [System.Security.Principal.IdentityNotMappedException]
            {
                Write-Warning "Cannot Translate SID to UserName - Not Adding Value to Exceptions List"
            }
        }
    }

    $profilesToDelete = Get-WmiObject -Class Win32_UserProfile -Filter $userProfileFilter -ErrorAction Stop

    if ($DirectoryCleanup)
    {
        $usersChildItem = Get-ChildItem -Path "C:\Users" -Exclude $cleanupExclusions

        foreach ($usersChild in $usersChildItem)
        {
            if ($profilesToDelete.LocalPath -notcontains $usersChild.FullName)
            {    
                try
                {
                    Write-Verbose "Additional Directory Cleanup - Removing $($usersChild.Name) on $env:COMPUTERNAME..."
                    
                    Remove-Item -Path $($usersChild.FullName) -Recurse -Force -ErrorAction Stop
                }
                catch [System.InvalidOperationException]
                {
                    Write-Verbose "Skipping Removal of $($usersChild.Name) on $env:COMPUTERNAME as Item is Currently In Use..."
                }
            }
        }
    }

    foreach ($profileToDelete in $profilesToDelete)
    {
        Write-Verbose "Removing Profile $($profileToDelete.LocalPath) &amp; Associated Registry Keys on $env:COMPUTERNAME..."
                
        Remove-WmiObject -InputObject $profileToDelete -ErrorAction Stop
    }

    $finalChildItem = Get-ChildItem -Path "C:\Users" | Select-Object -Property Name, FullName, LastWriteTime
                
    return $finalChildItem
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_local</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>administrator_local_enable_and_setPassword</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_local</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>administrator_local_enable_and_setPassword</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>net user "Administrator" /active:no
net user "Administrator" /active:yes
net user administrator &lt;Password&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_local</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Computer_RemoveFromDomain</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_local</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Computer_RemoveFromDomain</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#'Example 1: Remove the local computer from its domain
Remove-Computer -UnjoinDomaincredential Domain01\Admin01 -PassThru -Verbose -Restart</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_local</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>RenameComputer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_local</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>RenameComputer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#'Example 1: Rename the local computer
Rename-Computer -NewName "Server044" -DomainCredential Domain01\Admin01 -Restart

#'Example 2: Rename a remote computer
Rename-Computer -ComputerName "Srv01" -NewName "Server001" -LocalCredential Srv01\Admin01 -DomainCredential Domain01\Admin01 -Force -PassThru -Restart

=====================================================
$LocalCred = Get-Credential

#'Rename the computer to the old name. Assume it is not in the Domain Yet.
Rename-Computer -ComputerName $theOriginalComputerName -NewName $theNewComputerName -LocalCredential $LocalCred  -Force -PassThru -Restart

#' WAIT FOR IT TO RESTART
=====================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_local</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>User_remove_local</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_local</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>User_remove_local</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Remove-LocalUser -Name "nopassword"

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_Reboot_Restart</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Restart_Remote_Computers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_Reboot_Restart</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Restart_Remote_Computers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://community.spiceworks.com/topic/1981643-remote-restart-from-txt-file-listing-computers
'https://mcpmag.com/articles/2012/04/10/how-to-restart-computers-remotely-via-powershell.aspx

$YourFile = Get-Content 'C:\users\joe\desktop\computers.txt'

foreach ($computer in $YourFile)
{

Restart-Computer -ComputerName $computer -force

}










https://mcpmag.com/articles/2012/04/10/how-to-restart-computers-remotely-via-powershell.aspx
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/restart-computer?view=powershell-5.1
'you could shut down a list of computers:
&gt; restart-computer "server01","server02","server03" -whatif

'Because the cmdlet is using WMI objects and methods under the hood you can specify alternate credentials, either a saved credential object or a user name:
&gt; restart-computer (get-content c:\work\computers.txt) -credential "mycompany\administrator"
'I'll get prompted for the password, but then this credential will be used for every computer in the list.

'The Restart-Computer cmdlet will fail, if a logon session is detected. 
'PowerShell will raise an exception. However, you can force a reboot using -- what else? -- 
'the -force parameter. Be aware this will force applications to close 
'with the potential loss of unsaved work.
--------------------------------------------
'Another option for rebooting or even logging off 

&gt; Get-WmiObject win32_operatingsystem -ComputerName Quark | Invoke-WMIMethod -name Win32Shutdown
--------------------------------------------
'The Win32Shutdown method can accept parameters. 
'The default is 0 which means do a simple logoff. But if the user has open files 
'or if the default method fails, you can always resort to a forceful logoff:

&gt; Get-WmiObject win32_operatingsystem -ComputerName Quark | Invoke-WMIMethod -name Win32Shutdown -ArgumentList @(4)
--------------------------------------------
'Restart several computers including the local computer
Restart-Computer -ComputerName "Server01", "Server02", "localhost"

--------------------------------------------
'Restart computers as a background job

'The first command uses the *AsJob* parameter to run the command as a background job. 
'The command stores the resulting job object in the $j variable.
&gt; $j = Restart-Computer -ComputerName "Server01", "Server02" -AsJob

'The second command uses a pipeline operator to send the job object in $j to the Receive-Job cmdlet, 
'which gets the job results. The command stores the results in the $Results variable.
&gt; $Results = $j | Receive-Job

'The third command displays the result stores in the $Results variable.Because *AsJob* creates the job 
'on the local computer and automatically returns the results to the local computer, 
'you can run **Receive-Job** as a local command.
PS C:\&gt; $Results
--------------------------------------------

' Restart a remote computer
&gt;Restart-Computer -ComputerName "Server01" -Impersonation Anonymous -Authentication PacketIntegrity

-------------------------------------------

'Force restart of all computers from a list

'The first command uses the Get-Content cmdlet to get a list of computers in the domain 
'	from the Domain01.txt file. It stores the list in the $s variable.
PS C:\&gt; $s = Get-Content Domain01.txt

'The second command gets the credentials of a domain administrator and stores them in the $c variable.
PS C:\&gt; $c = Get-Credential Domain01\Admin01

'The third command restarts the computers. 
'It uses the *ComputerName* parameter to submit the list of computers in the $s variable, 
'the *Force* parameter to force an immediate restart, 
'and the *Credential* parameter to submit the credentials saved in the $c variable. It also uses the *ThrottleLimit* parameter to limit the command to 10 concurrent connections.
PS C:\&gt; Restart-Computer -ComputerName $s -Force -ThrottleLimit 10 -Credential $c


--------------------------------------------------

'Restart a computer by using WSMan, instead of DCOM, which is the default.
&gt;Restart-Computer -ComputerName "Server01" -Protocol WSMan -WSManAuthentication Kerberos</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_Remote_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Post_image_steps_for_new_Win10_computers.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_Remote_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Post_image_steps_for_new_Win10_computers.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'Post_image_steps_for_new_Win10_computers.ps1

Set-Location C:\DATA\PowerShellScripts

$theOriginalComputerName = 'DESKTOP-c0ebkmo'
$theNewComputerName = 'IT-0997'

#' for the username use the format: jphsa01\ggarson
$DomanCred = Get-Credential -Credential jphsa01\ggarson

#' for the username use the format: $theOriginalComputerName\administrator
#'$LocalCred_OrigComputer = Get-Credential
$LocalCred_OrigComputer = Get-Credential -Credential $theOriginalComputerName\administrator

#' for the username use the format: $theNewComputerName\administrator
#'$LocalCred_NewComputer = Get-Credential
$LocalCred_NewComputer = Get-Credential -Credential $theNewComputerName\administrator
#'=============================================================================================================================

#' 0] Test connection
Test-Connection -ComputerName $theOriginalComputerName -Count 1

#' 1] Set Administrator password, 
#'    note "pspasswd" from SysInternals is in the PATH, assume that the account (U.whatever, P.abc) already exists, and is an Administrator on the computr.

#'pspasswd64 -accepteula

#'Set the password
pspasswd64 \\$theOriginalComputerName Administrator “JPHSA@Work” -u whatever -p abc123

#'Enable the Administrator
psexec \\$theOriginalComputerName -s  -u whatever -p abc123  -h -d net user "Administrator" /active:yes

#' confirm

#-=============================================Confirm that both the Administrator and whatever are administrators of the computer

psexec \\$theOriginalComputerName  -s net localgroup administrators
#'psexec \\$theOriginalComputerName  -u whatever -p abc123 -s  net localgroup administrators


#'===============================================

#' 2a] Remove the old computer from the Domain

Remove-ADComputer -Identity $theNewComputerName -Credential $DomanCred

#' 2b] RUN: SynchronizeActiveDirectoryOnAll_DC.ps1

.\SynchronizeActiveDirectoryOnAll_DC.ps1

#' 3a] Rename the computer to the old name. Assume it is not in the Domain Yet.

Rename-Computer -ComputerName $theOriginalComputerName -NewName $theNewComputerName -LocalCredential $LocalCred_OrigComputer  -Force -PassThru -Restart

#' WAIT FOR IT TO RESTART

#' 3b] run: SynchronizeActiveDirectoryOnAll_DC.ps1
.\SynchronizeActiveDirectoryOnAll_DC.ps1

#' 4a] Add the computer to the Domain

Add-Computer -ComputerName $theNewComputerName -LocalCredential $LocalCred_NewComputer –DomainName jphsa.org –Credential $DomanCred -restart -Force

#' 4b] run: SynchronizeActiveDirectoryOnAll_DC.ps1
.\SynchronizeActiveDirectoryOnAll_DC.ps1

#' 4c] Move the computer object to the correct OU

#' WAIT FOR IT TO RESTART

#' 5] Remove the original user: whatever

Invoke-Command -ComputerName $theNewComputerName  -ScriptBlock {Remove-LocalUser -Name "whatever"}

#' confirm

#'=============================================Confirm that  Administrator is and administrator of the computer, and that whatever is gone

psexec \\$theNewComputerName  -s  net localgroup administrators


#'===============================================


#'====Activate the Windows License {enter PSSession}


Enter-PSSession –ComputerName $theNewComputerName

    $key = 'PNXMC-RQGXT-KRPDY-9YY9T-8TYPF'
    slmgr -ipk $key

    powercfg.exe /hibernate off

    Set-TimeZone -Name "Central Standard Time"

Exit-PSSession
#'==========================================

Invoke-Command -ComputerName $theNewComputerName -FilePath C:\DATA\PowerShellScripts\00_AcrobatReader_MakeDefaultForNewUserProfiles_inWin10.ps1

Invoke-Command -ComputerName $theNewComputerName -FilePath C:\DATA\PowerShellScripts\000_IE_ratherThan_Edge_MakeDefaultForNewUserProfiles_inWin10.ps1
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DEBUG_ERROR_TroubleShooting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>$ErrorActionPreference</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DEBUG_ERROR_TroubleShooting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>$ErrorActionPreference</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$ErrorActionPreference

'Possible Values
-----------------
Continue
SilentlyContinue
Stop
Inquire

'Sets the error behaviour for the current scope - applies to all commands run within that scope

'Can change within the shell, a script, a function, etc.

'All cmdlets accept the -ErrorAction parameter

'Alias is -EA

'Overrides the $ErrorActionPreference got that cmdlet

'Most terminating errors will only terminate the current cmdlet, the script can keep running

' "-EA Stop" or $ErrorActionPreference="Stop"  will terminate the current scope, passing the error the calling scope
'											   which will stop the entire script


--------------------------------------------------------------
$ErrorActionPreference = "Continue"
$contents = Get-Content c:\nonExistantFile.txt	#' -ea "silentlycontinue"
Write-Host "Another command" -ForegroundColor green</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DEBUG_ERROR_TroubleShooting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Trap{}</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DEBUG_ERROR_TroubleShooting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Trap{}</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Do whatever you want with the error inside the trap

'Trap must be defined before the error occurs

'Use $error[0] to access the error that caused the trap

'Break: Exit and pass the error to the calling scope
'Continue: Continue with the next line in the current scope


trap
	{
	Write-Host "Trapped" -ForegroundColor yellow
	#'continue
	}
	
$ErrorActionPreference = "Continue"
$contents = Get-Content c:\nonExistantFile.txt	#' -ea "stop"
Write-Host "Another command in the script" -ForegroundColor green</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DISM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>DefaultAppAssociations </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DISM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>DefaultAppAssociations </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'The following default application association servicing options are available for a running operating system.

DISM.exe /Online [/Export-DefaultAppAssociations | /Get-DefaultAppAssociations | Import-DefaultAppAssociations | Remove-DefaultAppAssociations]


'Option							Description
-----------------				----------------------------------------------------------------------------------
/Get-Help						When used immediately after a default application association servicing command-line option, information about the option and the arguments is displayed. Additional topics might become available when an image is specified.
	
/?								Examples:	
								Dism /image:C:\test\offline /Import-DefaultAppAssociations /?	
								Dism /online /Get-DefaultAppAssociations /?
					
'Exports the default application associations from a running operating system to an .xml file.
/Export-DefaultAppAssociations:&lt;path_to_export_file&gt;
	
								Example:	
								Dism.exe /Online /Export-DefaultAppAssociations:C:\AppAssoc.xml

'Displays the list of default application associations that have been set in the specified Windows image. 
'You can use this option to verify that default application associations were successfully imported to the image.	
/Get-DefaultAppAssociations

								Examples:	
								Dism.exe /Image:C:\test\offline /Get-DefaultAppAssociations	
								Dism.exe /Online /Get-DefaultAppAssociations

'Imports a set of default application associations to a specified Windows image from an .xml file. 
'The default application associations will be applied for each user during their first logon.	
/Import-DefaultAppAssociations:&lt;path_to_xml_file&gt;
	
								Examples:	
								Dism.exe /Image:C:\test\offline /Import-DefaultAppAssociations:C:\AppAssoc.xml	
								Dism.exe /Online /Import-DefaultAppAssociations:C:\AppAssoc.xml
							
'Removes the default application associations from the specified Windows image.	
/Remove-DefaultAppAssociations

								Examples:	
								Dism.exe /Image:C:\test\offline /Remove-DefaultAppAssociations	
								Dism.exe /Online /Remove-DefaultAppAssociations
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DISM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>DefaultAppAssociations_USAGE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DISM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>DefaultAppAssociations_USAGE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'SetPDFDefault_AdobeAcrobatDC.ps1

#' Create a copy of the original Default Associations:
dism /online /Export-DefaultAppAssociations:"C:\Junk\MyDefaultAppAssociations_ORIG.xml"


#' Change the association for .pdf files, and Create a copy of the PDF Default Associations:
dism /online /Export-DefaultAppAssociations:"C:\Junk\MyDefaultAppAssociations_PDF_modified.xml"


#' Import the modified Associations
dism /online /Import-DefaultAppAssociations:"%UserProfile%\Desktop\MyDefaultAppAssociations.xml"



 &lt;Association Identifier=".pdf" ProgId="AcroExch.Document" ApplicationName="Adobe Acrobat 9.0" /&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_eMail</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>SendEmail</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_eMail</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>SendEmail</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://powershelltutorial.net/SysAdmin/

#'* ======================
#'* Alert Me Script
#'* ======================
#'* Create Email Function
#'* ======================


function sendEmail {
[System.Reflection.Assembly]::LoadWithPartialName("System.Net")
[System.Reflection.Assembly]::LoadWithPartialName("System.Net.Mail")
[System.Reflection.Assembly]::LoadWithPartialName("System.Net.Mail.MailMessage")
#'* Create new .NET object and assign to variable
$mail = New-Object System.Net.Mail.MailMessage

#'* Sender Address
$mail.From =  New-Object System.Net.Mail.MailAddress("XXXX@gmail.com");


#'* Recipient Address
$mail.To.Add("XXX@XXXX.com");

#'* Message Subject
$mail.Subject = "Place Subject of email here";

#'* Message Body
$mail.Body = "Place body content here";

#'* Connect to your mail server
$smtp = New-Object System.Net.Mail.SmtpClient("smtp.gmail.com");
$smtp.Port = "587";


#'* Uncomment line below if authentication is required
$smtp.Credentials = New-Object System.Net.NetworkCredential("XXXXX@gmail.com", "password");

#'* Send Email
$smtp.EnableSsl = "true";
$smtp.Send($mail);
}

#'* =====================
#'* Script Body
#'* =====================

#'* Connect to file. You can connect to a local file or a remote file via UNC.
#'* In this example I connect to a remote share
$File = Get-ChildItem "E:\Xyz\File.log"

#'* Check File size and take action based on condition.
$filesizelimit = 100
#KB
If ($File.Length -gt $filesizelimit * 1000) 
#If condition is TRUE call sendEmail function
{
sendEmail
}

#'* If condition is FALSE script does nothing</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>File_Manipulation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>File_Manipulation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Renaming Existing Items (Rename-Item)
'To change the name of a file or folder, use the Rename-Item cmdlet. 
'The following command changes the name of the file1.txt file to fileOne.txt.

PS&gt; Rename-Item -Path C:\temp\New.Directory\file1.txt fileOne.txt

'Moving Items (Move-Item)
&gt; Move-Item -Path C:\temp\New.Directory -Destination C:\ -PassThru

'Deleting Items (Remove-Item)
Remove-Item C:\New.Directory

Confirm
The item at C:\temp\New.Directory has children and the -recurse parameter was not
specified. If you continue, all children will be removed with the item. Are you
 sure you want to continue?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is "Y"):

'Because Yes is the default response, to delete the folder and its files, press the Enter key. 
'	To remove the folder without confirming, use the -Recurse parameter.

&gt; Remove-Item C:\temp\New.Directory -Recurse

'Executing Items (Invoke-Item)
'	Windows PowerShell uses the Invoke-Item cmdlet to perform a default action for a file or folder. 
'	This default action is determined by the default application handler in the registry; 
'	the effect is the same as if you double-click the item in File Explorer.

&gt; Invoke-Item C:\WINDOWS
'An Explorer window that is located in C:\Windows appears, just as if you had double-clicked the C:\Windows folder.

&gt; Invoke-Item C:\boot.ini
'If the .ini file type is associated with Notepad, the boot.ini file opens in Notepad.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FileSize_monitorSize_sendEmail</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FileSize_monitorSize_sendEmail</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>FileSize_monitorSize_sendEmail


#'* ======================
#'* Alert Me Script
#'* ======================
#'* Create Email Function
#'* ======================


function sendEmail {
	[System.Reflection.Assembly]::LoadWithPartialName("System.Net")
	[System.Reflection.Assembly]::LoadWithPartialName("System.Net.Mail")
	[System.Reflection.Assembly]::LoadWithPartialName("System.Net.Mail.MailMessage")
	#'* Create new .NET object and assign to variable
	$mail = New-Object System.Net.Mail.MailMessage
	
	#'* Sender Address
	$mail.From =  New-Object System.Net.Mail.MailAddress("XXXX@gmail.com");
	
	
	#'* Recipient Address
	$mail.To.Add("XXX@XXXX.com");
	
	#'* Message Subject
	$mail.Subject = "Place Subject of email here";
	
	#'* Message Body
	$mail.Body = "Place body content here";
	
	#'* Connect to your mail server
	$smtp = New-Object System.Net.Mail.SmtpClient("smtp.gmail.com");
	$smtp.Port = "587";
	
	
	#'* Uncomment line below if authentication is required
	$smtp.Credentials = New-Object System.Net.NetworkCredential("XXXXX@gmail.com", "password");
	
	#'* Send Email
	$smtp.EnableSsl = "true";
	$smtp.Send($mail);
}

#'* =====================
#'* Script Body
#'* =====================

#'* Connect to file. You can connect to a local file or a remote file via UNC.
#'* In this example I connect to a remote share
$File = Get-ChildItem "E:\Xyz\File.log"

#'* Check File size and take action based on condition.
$filesizelimit = 100
#KB
If ($File.Length -gt $filesizelimit * 1000) 
#If condition is TRUE call sendEmail function
{
sendEmail
}

#'* If condition is FALSE script does nothing</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FOLDERS_Blocked_Inheritance</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FOLDERS_Blocked_Inheritance</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://www.petri.com/identify-folders-with-blocked-inheritance-using-powershell
'AreAccessRulesProtected is a boolean property. If the value is true, then inheritance has been disabled. 
cls
dir 'C:\Program Files' -Directory | get-acl | 
Select @{Name="Path";Expression={Convert-Path $_.Path}},AreAccessRulesProtected |
Format-table -AutoSize
#' If the value is true, then inheritance has been disabled

--------------

'Because the AreAccessRulesProtected property is a boolean, you don’t need to use the –eq operator, 
'	so it’s a simple matter to filter out folders that have blocked inheiritance
dir c:\work -Directory -recurse | get-acl | 
Where {$_.AreAccessRulesProtected} | 
Select @{Name="Path";Expression={Convert-Path $_.Path}},AreAccessRulesProtected |
format-table -AutoSize
'These are the folders under C:\Work that have inheritance disabled.
'If I want to find folders that have inheritance enabled, then I can use the –NOT operator in my filter.

-----------------
'This on the other had is the folders w/ blocked inheritance:
cls
dir 'C:\Program Files' -Directory -recurse | get-acl | 
Where  {-not $_.AreAccessRulesProtected} | 
Select @{Name="Path";Expression={Convert-Path $_.Path}},AreAccessRulesProtected |
format-table -AutoSize


====================================================
'Let’s say you want to re-enable inheritance once you’ve identified folders with blocked inheritance. The following outlines a simple way to do so.

'First, we need the access control list for a folder.
&gt;$acl = get-acl c:\work\demo2
'To modify, we can use the SetAccessRuleProtection() method, which takes a few parameters.

------------
'This will let you see the overloads
$acl.SetAccessRuleProtection.OverloadDefinitions
-----------

'The parameter values are both boolean. 
'The second parameter indicates if you want to save existing rules, and I generally do.

&gt;$acl.SetAccessRuleProtection($False,$True)

'All I’ve done is set the property on the ACL object. It hasn’t been applied to the folder. 
'To accomplish that, I need to use Set-ACL.

&gt;set-acl -Path c:\work\demo2 -AclObject $acl

==============================================================
'To make life easier, I have a function called Set-Inheritance.

#requires -version 3.0
 
Function Set-Inheritance {
 
[cmdletbinding(SupportsShouldProcess)]
 
	Param(
		[Parameter(Position=0,Mandatory,HelpMessage="Enter the file or folder path",
		 ValueFromPipeline=$True,ValueFromPipelineByPropertyName)]
	[ValidateNotNullOrEmpty()]
	[Alias("PSPath")]
	[string]$Path,
	[switch]$NoInherit,
	[switch]$NoPreserve,
	[switch]$Passthru
)

'With this function, I can easily reset inheritance with a one-line command:
&gt;dir c:\work -Directory -recurse | get-acl | Where {$_.AreAccessRulesProtected} | set-inheritance -whatif

'If I intentionally want to disable or block inheritance, I can do that as well.
&gt;Set-Inheritance C:\work\demo1 -NoInherit

'Be careful about using the –NoPreserve parameter with my function. If you use it all existing permissions will be wiped out</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FOLDERS_that_do_not_inherit_permissions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FOLDERS_that_do_not_inherit_permissions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

=========================
https://stackoverflow.com/questions/25126877/getting-names-of-folders-that-do-not-inherit-permissions

'CMD
&gt;DIR "C:\temp" -directory -recurse | GET-ACL | where {$_.Access.IsInherited -eq $false}

'POWERSHELL:
'The concept is: if a folder has at least 1 inherited access rule, 
'	then inheritance is enabled, 
'	if it has 0 inherited rules, inheritance is disabled.
&gt; Get-ChildItem C:\temp -recurse | Select @{Name='Path';Expression={$_.FullName}},@{Name='InheritedCount';Expression={(Get-Acl $_.FullName | Select -ExpandProperty Access | Where { $_.IsInherited }).Count}} | Where { $_.InheritedCount -eq 0 } | Select Path

=================================================================

'	You can use Add-Member to add the path as a property on each ACE object:
'	I also wrapped Get-Acl in a try block because it throws terminating errors.
dir c:\temp -Directory -Recurse | ForEach-Object {
    $Path = $_.FullName
    try {
        Get-Acl $Path | 
            select -ExpandProperty Access | 
            where { $_.IsInherited -eq $false } | 
            Add-Member -MemberType NoteProperty -Name Path -Value $Path -PassThru
    }
    catch {
        Write-Error $_
    }
}

================================================================
#'https://www.experts-exchange.com/questions/28395713/How-to-enumerate-which-folders-are-not-inheriting-permissions-from-parent-folder.html

NOTE: the output did not make sense, it only listed the subfolders, not sub-sub folders
	  and the output did not match what I was observing in the permissions

#requires -version 3

$Path = "c:\temp"
$Folders = Get-ChildItem $Path -Directory -Recurse
$statuses = @()

Foreach ($Folder in $Folders)
{
    $ACLs = Get-Acl -Path $Folder.fullname | ForEach-Object { $_.Access }
    Foreach ($ACL in $ACLs)
    {
        if (!($ACL.IsInherited))
        {
                $status = [ordered]@{ 
                FolderPath = $Folder.Fullname;
                IsInherited = $ACL.IsInherited;
                InheritanceFlags = $ACL.InheritanceFlags;
                PropagationFlags = $ACL.PropagationFlags }
            $statuses += (New-Object -TypeName PSObject -Property $status)
            break;
        }
        
    }
}
$statuses | Export-Csv -Path c:\temp\report.csv -Encoding ASCII -NoTypeInformation </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get-Location_Set-Location_-PassThru</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get-Location_Set-Location_-PassThru</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'For example, Windows PowerShell typically starts in the user's home directory.

&gt; Get-Location

Path                                                                                                                                                                                           
----                                                                                                                                                                                           
C:\Users\glenng

==========================================


&gt; Set-Location -Path C:\Windows


========================================

'The -PassThru parameter can be used with many Set commands in Windows PowerShell 
'	to return information about the result in cases in which there is no default output.


==========================================
'Paths relative to your current location
'For example, if you are in the C:\Windows folder, a period (.)represents C:\Windows 
'	and double periods (..) represent C:. 
'	You can change from your current location to the root of the C: drive by typing:
PS&gt; Set-Location -Path .. -PassThru

===========================================

'You can type Set-Location or use any of the built-in Windows PowerShell aliases for Set-Location (cd, chdir, sl). For example:

cd -Path C:\Windows
chdir -Path .. -PassThru
sl -Path HKLM:\SOFTWARE -PassThru

==========================================

'Saving and Recalling Recent Locations (Push-Location and Pop-Location)

'The Push-Location cmdlet in Windows PowerShell creates a ordered history (a "stack") of directory paths where you have been, 
'	and you can step back through the history of directory paths by using the complementary Pop-Location cmdlet.

'To push the current location onto the stack, and then move to the Local Settings folder, type:

 PS&gt; Push-Location -Path "Local Settings"

'You can then push the Local Settings location onto the stack and and move to the Temp folder by typing:

PS&gt; Push-Location -Path Temp

'You can verify that you changed directories by entering the Get-Location command:

PS&gt; Get-Location

Path
----
C:\Documents and Settings\PowerUser\Local Settings\Temp


'You can then pop back into the most recently visited directory by entering the Pop-Location command, 
'	and verify the change by entering the Get-Location command:
PS&gt; Pop-Location
PS&gt; Get-Location

Path
----
C:\Documents and Settings\me\Local Settings

===================================================
NETWORK PATHS

'You can also use the Location cmdlets with network paths. 
'If you have a server named FS01 with an share named Public, you can change your location by typing

Set-Location \\FS01\Public
'or
Push-Location \\FS01\Public</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>LIST_Files_in_Folders_and_SubFolders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>LIST_Files_in_Folders_and_SubFolders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'LIST_Files_in_Folders_and_SubFolders

 'Get all the PDF files in the folder/subfolders of  "D:\xplr" and write as .csv to: "C:\JUNK\directory.csv"
 Get-ChildItem -Path D:\xplr -Include *.pdf -Recurse | Export-Csv -Force -NoTypeInformation C:\JUNK\directory.csv

'Just a list of files and folders in a folder:, but not subfolders
Get-ChildItem -Path E:\music

'This would be the command to see only the directories at the E:\Music level:
Get-ChildItem -Path E:\music –Directory

'To see only the files at this level, I change it to use the –File switch:
Get-ChildItem -Path E:\music –File

'When I use the –Recurse switch, I can see the folders in addition to the files inside each of the folders.
' but it is not clean like a database, but rather formatted and broken up by folder
Get-ChildItem -Path E:\music\Santana –Recurse

'This sorts it, BUT still not right for a database, b/c it is formatted, and broken up by folders
Get-ChildItem -Path E:\music\Santana -Recurse -File | sort length –Descending

'tems that are normally invisible in File Explorer or Cmd.exe are not displayed in the output of a Get-ChildItem command. 
'	To display hidden items, use the Force parameter of Get-ChildItem. For example:
Get-ChildItem -Path C:\Windows -Force

'To find all files that begin with the letter x in the Windows directory, type:
 Get-ChildItem -Path C:\Windows\x*
 
'To find all files whose names begin with x or z, type:
Get-ChildItem -Path C:\Windows\[xz]*

'You can omit files that have any of these numbers in their names by using the Exclude parameter with the pattern *[9516]*:
Get-ChildItem -Path C:\WINDOWS\System32\w*32*.dll -Exclude *[9516]*

'To specify a recursive search for files whose names match a special pattern, use the -Include parameter.
&gt; Get-ChildItem -Path C:\Windows -Include *.dll -Recurse -Exclude [a-y]*.dll

'This one-line command will invoke Windows PowerShell to write a directory listing to a CSV file, 
'which is easy to use in spreadsheets and database programs. 
'It recurses subfolders, and it includes the following information: 
'			full file name, creation time, last modified time, file size, and owner (last modified by).


powershell "Get-ChildItem -Recurse c:\directory\to\scan\ | ForEach-Object {$_ | add-member -name "Owner" -membertype noteproperty -value (get-acl $_.fullname).owner -passthru} | Sort-Object fullname | Select FullName,CreationTime,LastWriteTime,Length,Owner | Export-Csv -Force -NoTypeInformation c:\folder\to\directory.csv"


'to limit to folders add 
	"| ?{ $_.PSIsContainer }" 
	'before 
	"| ForEach-Object" 		'(no quotation marks)
	
'this version uses relative paths (code not tested)
powershell "Get-ChildItem -Recurse . | ?{ $_.PSIsContainer } | ForEach-Object {$_ | add-member -name "Owner" -membertype noteproperty -value (get-acl $_.fullname).owner -passthru} | Sort-Object fullname | Select FullName,CreationTime,LastWriteTime,Length,Owner | Export-Csv -Force -NoTypeInformation .\directory.csv" 	

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Get-ChildItem -Recurse 'W:\Equipment Titles and Registrations' |
     ForEach-Object {$_ |
                            add-member -name "Owner" -membertype noteproperty -value (get-acl $_.fullname).Owner -passthru       
                    } |   
     ForEach-Object {$_ |
                            add-member -name "TheFileName" -membertype noteproperty -value  $_.name -passthru    
                    } |                                    
       Sort-Object fullname |
        Select FullName,CreationTime,LastWriteTime,Length,Owner,TheFileName |
         Export-Csv -Force -NoTypeInformation c:\directory.csv

'OUTPUT:============================================================================================================
FullName																CreationTime	LastWriteTime	Length	Owner					TheFileName
C:\Junk\Report Project1													11/6/2015 16:47	11/6/2015 16:47			BUILTIN\Administrators	Report Project1
C:\Junk\Report Project1\Report Project1									11/6/2015 16:47	11/6/2015 16:47			BUILTIN\Administrators	Report Project1
C:\Junk\Report Project1\Report Project1.sln								11/6/2015 16:47	11/6/2015 16:47	1342	BUILTIN\Administrators	Report Project1.sln
C:\Junk\Report Project1\Report Project1\Report Project1.rptproj			11/6/2015 16:47	2/6/2014 13:49	204		BUILTIN\Administrators	Report Project1.rptproj
C:\Junk\Report Project1\Report Project1\Report Project1.rptproj.user	11/6/2015 16:47	11/9/2015 7:45	1076	BUILTIN\Administrators	Report Project1.rptproj.user
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PowerShell_Drives_____fileSystem_registry_certificates</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PowerShell_Drives_____fileSystem_registry_certificates</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'A Windows PowerShell drive is a data store location that you can access like a file system drive in Windows PowerShell. 
'	The Windows PowerShell providers create some drives for you, such as the file system drives (including C: and D:), 
'	the registry drives (HKCU: and HKLM:), and the certificate drive (Cert:), and you can create your own Windows PowerShell drives. 
'	These drives are very useful, but they are available only within Windows PowerShell. 
'	You cannot access them by using other Windows tools, such as File Explorer or Cmd.exe.

'Windows PowerShell uses the noun, PSDrive, for commands that work with Windows PowerShell drives.

&gt; Get-PSDrive

Name           Used (GB)     Free (GB) Provider      Root                                                                                                                       CurrentLocation
----           ---------     --------- --------      ----                                                                                                                       ---------------
Alias                                  Alias                                                                                                                                                   
C                 164.15         58.39 FileSystem    C:\                                                                                                                                Windows
Cert                                   Certificate   \                                                                                                                                         
D                                      FileSystem    D:\                                                                                                                                       
E                                      FileSystem    E:\                                                                                                                                       
Env                                    Environment                                                                                                                                             
Function                               Function                                                                                                                                                
G                  47.69         76.80 FileSystem    \\BCC-CONTROL\PeopleTrak                                                                                                                  
HKCU                                   Registry      HKEY_CURRENT_USER                                                                                                                         
HKLM                                   Registry      HKEY_LOCAL_MACHINE                                                                                                                        
Q                  15.31        176.22 FileSystem    \\bcc-hcss\HCSS                                                                                                                           
S                 890.02        209.97 FileSystem    \\BCC-FS1\Divisions                                                                                                                       
T                 890.02        209.97 FileSystem    \\BCC-FS1\Applications                                                                                                                    
U                 890.02        209.97 FileSystem    \\BCC-FS1\Users\GlennG                                                                                                                    
V                 890.02        209.97 FileSystem    \\BCC-FS1\Reports                                                                                                                         
Variable                               Variable                                                                                                                                                
W                 890.02        209.97 FileSystem    \\BCC-FS1\Public                                                                                                                          
WSMan                                  WSMan                   

===========================================================================
'Adding New Windows PowerShell Drives (New-PSDrive)

'The New-PsDrive cmdlet adds the new drive only to the current Windows PowerShell session. 

'To create a new Windows PowerShell drive, you must supply three parameters:
'		A name for the drive (you can use any valid Windows PowerShell name)
'		The PSProvider (use "FileSystem" for file system locations and "Registry" for registry locations)
'		The root, that is, the path to the root of the new drive

'For example, you can create a drive named "Office" 
'	that is mapped to the folder that contains the Microsoft Office applications on your computer, such as 
'	C:\Program Files\Microsoft Office\OFFICE11.
'	To create the drive, type the following command:

&gt; New-PSDrive -Name Office -PSProvider FileSystem -Root "C:\Program Files\Microsoft Office\OFFICE11"

' To view and change items in the CurrentVersion registry key, you can create a Windows PowerShell drive that is rooted in that key by typing:

PS&gt; New-PSDrive -Name cvkey -PSProvider Registry -Root HKLM\Software\Microsoft\Windows\CurrentVersion

'You can then change location to the cvkey: drive as you would any other drive:
PS&gt; cd cvkey:
'or:
PS&gt; Set-Location cvkey: -PassThru

'If you close the Windows PowerShell window, the new drive is lost. 
'	To save a Windows PowerShell drive, use the Export-Console cmdlet to export the current Windows PowerShell session, 
'	and then use the PowerShell.exe PSConsoleFile parameter to import it. 
'	Or, add the new drive to your Windows PowerShell profile.

'For example, if you added the Office: Windows PowerShell drive, as shown in the New-PSDrive topic, you can delete it by typing:
&gt; Remove-PSDrive -Name Office</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Registry_Navigation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Registry_Navigation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'The same technique works on Windows PowerShell drives that are not file system drives, such as HKLM:. 
'	You can set your location to the HKLM\Software key in the registry by typing:

&gt; Set-Location -Path HKLM:\SOFTWARE -PassThru

Path
----
HKLM:\SOFTWARE

'You can then change the directory location to the parent directory, 
'	which is the root of the Windows PowerShell HKLM: drive, by using a relative path:

&gt; Set-Location -Path .. -PassThru

Path
----
HKLM:\</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Format_Commands_to_change_output_vie</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_Format_Commands_to_change_output_vie</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Format_Commands_to_change_output_vie</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_Format_Commands_to_change_output_vie</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_Format_Commands_to_change_output_view

'creates a pop-up window adjustable
whatever | Out-GridView

'At the end of the pipeline is a special comand: Out-Default
'	That cmdlet passes objects to 'Out-Host', which calls PowerShell's formatting system
'1] PowerShell checks configuration file for instructions
'	That file is: $pshome\DotNetTypes.format.ps1xml (in System32 folder)
'	Those files have the default layouts. You can customize those.
'	It also checs the types.ps1xml file for the default properties of any given type
'2]	If there are no defaults, then it follows some simple rules:
'	If no default then all properties are used.
'	If there are less than 5 properties it displays a table
'	If 5 or more, display a list
'	You can override the defaults with the Format cmdlets


'The Format cmdlets are 
'	Format-Wide
'	Format-List
'	Format-Table
'	Format-Custom

'Each cmdlet also uses the same parameter name, Property, to specify which properties you want to display. 
'	Because Format-Wide only shows a single property, its Property parameter only takes a single value, 
'	but the property parameters of Format-List and Format-Table will accept a list of property names.

'Example:
&gt; Get-Process -Name chrome

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName                                                                                                     
-------  ------    -----      ----- -----   ------     -- -----------                                                                                                     
    220      24    64112      52000   263    38.66   5404 chrome                                                                                                          
    165      20    34864      33988   207     0.45   6456 chrome                                                                                                          
    160      20    28312      30240   209     0.87   6668 chrome                                                                                                          
   1281      69    93976     115380   378    57.63   7036 chrome                                                                                                          
    205      23    42608      55556   243    16.11  24500 chrome                                                                                                          
    195      23    42492      49880   256     1.36  26212 chrome  
    
'The Format-Wide cmdlet, by default, displays only the default property of an object.    
&gt; Get-Process -Name chrome | Format-Wide

chrome                                                                                chrome                                                                              
chrome                                                                                chrome                                                                              
chrome                                                                                chrome       

'You can also specify a non-default property:
&gt; Get-Process -Name chrome | Format-Wide  -Property Id
5404                                                                                  6456                                                                                
6668                                                                                  7036                                                                                
24500                                                                                 26212

'With the Format-Wide cmdlet, you can only display a single property at a time. This makes it 
'useful for displaying simple lists that show only one element per line. To get a simple listing, set the value of the Column parameter to 1 

&gt; Get-Process -Name chrome | Format-Wide   -Column 1
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome  

'The Format-List cmdlet displays an object in the form of a listing, with each property labeled and displayed on a separate line:
&gt; Get-Process -Name chrome | Format-list
Id      : 5404
Handles : 220
CPU     : 39.1874512
Name    : chrome

Id      : 6456
Handles : 160
CPU     : 0.4524029
Name    : chrome

Id      : 6668
Handles : 160
CPU     : 0.8736056
Name    : chrome

Id      : 7036
Handles : 1274
CPU     : 59.1867794
Name    : chrome

Id      : 24500
Handles : 210
CPU     : 17.9713152
Name    : chrome

Id      : 26212
Handles : 195
CPU     : 1.3572087
Name    : chrome


'You can specify as many properties as you want:
&gt; Get-Process -Name chrome | Format-list -Property processname, id


ProcessName : chrome
Id          : 5404

ProcessName : chrome
Id          : 6456

ProcessName : chrome
Id          : 6668

ProcessName : chrome
Id          : 7036

ProcessName : chrome
Id          : 24500

ProcessName : chrome
Id          : 26212

'Getting Detailed Information by Using Format-List with Wildcards, This gives a huge list of properties
&gt; Get-Process -Name chrome | Format-list -Property *

'If you use the Format-Table cmdlet with no property names specified to format the output of the Get-Process command, 
'you get exactly the same output as you do without performing any formatting. 
'The reason is that processes are usually displayed in a tabular format, as are most Windows PowerShell objects.

&gt; Get-Process -Name chrome | Format-table

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName                                                                                                                          
-------  ------    -----      ----- -----   ------     -- -----------                                                                                                                          
    219      24    70044      60708   268    83.46   5404 chrome                                                                                                                               
    160      20    34756      34012   206     0.47   6456 chrome                                                                                                                               
    160      20    29432      31500   210     1.20   6668 chrome                                                                                                                               
   1313      69   105772     128120   394    84.60   7036 chrome                                                                                                                               
    204      23    42096      54180   242    20.51  24500 chrome                                                                                                                               
    195      23    42204      49748   256     1.40  26212 chrome  

'If you specify the AutoSize parameter when you run the Format-Table command,
' Windows PowerShell will calculate column widths based on the actual data you are going to display.
'The Format-Table cmdlet might still truncate data, but it will only do so at the end of the screen

&gt; Get-Process -Name chrome | Format-table  -Property Path,Name,Id,Company -AutoSize

Path                                                        Name      Id Company    
----                                                        ----      -- -------    
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  5404 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  6456 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  6668 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  7036 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome 24500 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome 26212 Google Inc.

'you can force lengthy Format-Table data to wrap within its display column by using the Wrap parameter
'An advantage of using the Wrap parameter by itself is that it does not slow down processing very much. 
'	If you perform a recursive file listing of a large directory system, 
'	it might take a very long time and use a lot of memory before displaying the first output items if you use AutoSize.

&gt; Get-Process -Name chrome | Format-table -wrap -Property Path,Name,Id,Company

'Another useful parameter for tabular output control is GroupBy. 
'	Longer tabular listings in particular may be hard to compare. The GroupBy parameter groups output based on a property value. 
'	For example, we can group processes by company for easier inspection, omitting the company value from the property listing:

&gt; Get-Process -Name chrome | Format-table -wrap -Property Path,Name,Id  -GroupBy Company




</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Format_Commands_to_change_output_vie</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Out-GridView</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Format_Commands_to_change_output_vie</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Out-GridView</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#-----------------------------------------------------------------------------#
# Out-GridView
#-----------------------------------------------------------------------------#
#region Out-GridView

	# With no params, just displays the results in the output panel
	Get-ChildItem | Out-GridView
	
	# Use -passthru to pipe the results to the next item
	# (without -PassThru nothing gets displayed)
	Get-ChildItem | Out-GridView -PassThru
	
	# Use output mode to determine way in which user 
	# can select output, single or mutliple
	Get-ChildItem | Out-GridView -OutputMode Single
	
	Get-ChildItem | Out-GridView -OutputMode Multiple
	
	# Can add useful titles to the display
	Get-ChildItem | Out-GridView -PassThru -Title "Hello World" 
	
	# You can send the output of the GridView to a variable,  note the output =&gt; 'ov'
	$ov = ""
	Get-ChildItem | Out-GridView -PassThru -OutVariable ov
	
	Clear-Host
	$ov     # Show the result
	
	# Works with -OutputMode too!
	Get-ChildItem | Out-GridView -OutputMode Single -OutVariable ov
	
	Clear-Host
	$ov
	
	# Cancel stops the flow. Run this twice, the second time hit cancel
	Get-ChildItem |
	  Out-GridView -OutputMode Single |
	  Format-Table -AutoSize 
	
	# Waiting around
	# Without wait, when launched from a command line 
	# the gridview won't wait. Open a CMD window then 
	# try these two commands.
	Powershell "Get-ChildItem | Out-GridView"
	Powershell "Get-ChildItem | Out-GridView -Wait" 
	
	
	# Gotcha: Don't try to use format-* before it
	# Yields an error b/c Out-GridView expects a collection of objects, BUT Format-Table sends a collection of TEXT
	Get-ChildItem |
	  Format-Table -Property Name,Length -AutoSize |
	  Out-GridView -PassThru
	
	# Instead use Select-Object, b/c this outputs objects
	Get-ChildItem |
	  Select-Object -Property Name, Length |
	  Out-GridView -PassThru

#endregion Out-GridView

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Advanced_Functions_PluralSight</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Advanced_Functions_PluralSight</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code># Advanced functions also allow parameters with extra helping hints
function Get-AValue ()
{
  [CmdletBinding()]                       # &lt;===== Needed to indicate this is an advanced function
  param (                                 # &lt;=====  Begin the parameter block

         [Parameter( Mandatory = $true,
                     HelpMessage = 'Please enter value one.'
                     )]
         [int] $one,                      # &lt;===== Strong typing is optional

         
         [Parameter( Mandatory = $false,
                     HelpMessage = 'Please enter value two.'
                     )]
         [int] $two = 42                  # &lt;===== Since this is optional, you can provide a default value

        )  # End the parameter block

  begin { }

  process { 
            return $one * $two
          }

  end { }

}

# Example 1 pass in values
Get-AValue -one 33 -two 42

# Example 2 pass in value for one, take default for two
Get-AValue -one 33 

# Example 3 no params, will prompt for one and take default for two
Get-AValue 

# Example 4, use a string for one (generates error)
Get-AValue -one "x"

#endregion Functions

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>HELP_for_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>HELP_for_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#-----------------------------------------------------------------------------#
# Adding Help to Your Functions
#-----------------------------------------------------------------------------#
#region Help

# Robust help built into PowerShell
Get-Help Get-ChildItem

# Help for your function?
function Get-ChildName ()
{
  Write-Output (Get-ChildItem | Select-Object "Name")
}
Clear-Host
Get-Help Get-ChildName


# Custom tags within a comment block that Get-Help will recognize
# Note that not all of them are required
# .SYNOPSIS - A brief description of the command
# .DESCRIPTION - Detailed command description
# .PARAMETER name - Include one description for each parameter
# .EXAMPLE - Detailed examples on how to use the command
# .INPUTS - What pipeline inputs are supported
# .OUTPUTS - What this funciton outputs
# .NOTES - Any misc notes you haven't put anywhere else
# .LINK - A link to the URL for more help. Use one .LINK tag per URL
# Use "Get-Help about_comment_based_help" for full list and details

function Get-ChildName ()
{
&lt;#                                                         # &lt;=== Here is where it starts
  .SYNOPSIS
  Returns a list of only the names for the child items in the current location.
  
  .DESCRIPTION
  This function is similar to Get-ChildItem, except that it returns only the name
  property. 
  
  .INPUTS
  None. 
  
  .OUTPUTS
  System.String. Sends a collection of strings out the pipeline. 
  
  .EXAMPLE
  Example 1 - Simple use
  Get-ChildName
  
  .EXAMPLE
  Example 2 - Passing to another object in the pipeline
  Get-ChildName | Where-Object {$_.Name -like "*.ps1"}

  .LINK
  Get-ChildItem 
  
#&gt;

  Write-Output (Get-ChildItem | Select-Object "Name")
  
}

Clear-Host
Get-Help Get-ChildName


Clear-Host
Get-Help Get-ChildName -full

#endregion Help</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PIPELINE_functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PIPELINE_functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Param  xxxx
[Parameter(ValueFromPipeline=$True)]

=====================================================
# It is possible to PIPELINE enable your functions
# These are referred to as ADVANCED functions
function Get-PSFiles ()
{
  # The begin block executes once at the start of the function for the RETURN VALUE (retval)
  begin  { $retval = "Here are some PowerShell files: `r`n" }    # `r`n = carriage return line feed

  # The process block is executed once for each object being
  # passed in from the pipe
  process { 
            if ($_.Name -like "*.ps1")
            { 
              $retval += "`t$($_.Name)`r`n"             #concatenate to the retval, TAB, and CRLF
              # Note this line could also be rendered as
              #$retval = $retval + "`t" + $_.Name + "`r`n" 
              # `t     Tab Character
              # `r     Carriage Return
              # `n     Line Feed
              # $( )   Tells PS to evaute the expression in () first then return it
              # $_     The current object being passed in the pipeline
              # .Name  The name property of the current object 
            }
          }
  
  # The end block executes once, after the rest of the function
  end { return $retval }          
}





Clear-Host
Set-Location "C:\PS\Beginning PowerShell Scripting for Developers\demo"
Get-ChildItem | Get-PSFiles




$output = Get-ChildItem | Get-PSFiles


$output.GetType()          #This would show as a single string, so can not be used as objects being passed into an array
                           # and you can not pipeline the individual objects

Clear-Host
$i = 0
foreach($f in $output)
{
  $i++
  "$i : $f"     #This would produce a line w/ a number for each item, but if you run this you get only one number
                # even though the line feeds would make it show up on different lines.
}

#==========================================================================================================
# To pipeline the output, push the output in the process area
function Get-PSFiles ()
{
  begin  { }    # &lt;=== empty

      process { 
                if ($_.Name -like "*.ps1")
                { 
                  $retval = "`tPowerShell file is $($_.Name)"
                  $retval  # This is the equivalent of: return $retval
                           # so some people use "return" but you can just call it, like this to return it
                           # In this case there is no CRLF, the $retval is just sent right back out
                }
              }
  
  end { }       # &lt;===  empty       
}

$output = Get-ChildItem | Get-PSFiles
$output.GetType()          # IN THIS CASE it will show that it is an ARRAY of objects, and no longer a single string

#NOW when you iterate you will get the counter with a new value on each line

Clear-Host
$i = 0
foreach($f in $output)
{
  $i++
  "$i : $f"
}


#HERE is a second piping function using "process"

function Write-SomeText ()
{
  # begin  { }            # &lt;== NOTE: These are commented out

  process { 
            $retval = "Here is the output: $($_)"          
            $retval
          }
  
  # end { }            # &lt;== NOTE: These are commented out          
}


Clear-Host
Set-Location "C:\PS\Beginning PowerShell Scripting for Developers\demo"
# NOW COMBINE BOTH OF THE PIPing functions
Get-ChildItem | Get-PSFiles | Write-SomeText



# Similar to original function but truly pipelined
"Here are some PowerShell files: `r`n"
Get-ChildItem | Get-PSFiles 


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Scope_Parms_ref_return</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Scope_Parms_ref_return</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
# Any changes to a paramater inside a function are scoped to that function
# So changes to the value of the param inside the function are lost once the function/scope ends
# Because when you pass in a PARM, the function makes a copy of it, and that is what is being used inside the function
function Set-NonRefVar($myparam)
{
  $myparam = 33
  "Inside function `$myparam = $myparam"
}

Clear-Host
$myparam = 42
"Prior to funciton `$myparam = $myparam"
Set-NonRefVar($myparam)
"After funciton `$myparam = $myparam"

#========[ref]===============================================================================================
# To change a value inside a funciton, use [ref]
# NOW changes inside the function's scope, are reflected in the scope outside the function when it ends
# Passing by reference simply requires a [ref] tag before the variable
# Note it turns it into an object, thus requiring the .Value syntax
function Set-RefVar([ref] $myparam)                 #1] have to put [ref] in the input parenthesis of the function definition
{
  $myparam.Value = 33
  "Inside function `$myparam = $($myparam.Value)"   #have to reference the variable's .Value property
                                                    #For the string interprolation, you have to use
                                                    # the parenthesis "$(...)" to force it to evaluate the expression
}

Clear-Host
$myparam = 42
"Prior to funciton `$myparam = $myparam"
Set-RefVar ([ref] $myparam) # Must add ref to call  #2] AND have to put [ref] when invoking the Function
"After function `$myparam = $myparam"

# NOTE: Altering the value of parameters is considered poor programming 
#       practiceand should be avoided. Instead use return.

#===========================================================================================================



function Get-AValue($one, $two)
{
  return $one * $two
}

Get-AValue 33 42

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

# Functions also support named parameters
# Simply put the name of the parameter with a -
$returnValue = Get-AValue -one 33 -two 42
"Returned value is $returnValue"

# With NAMED parameters, order is no longer important
# omit the "$" and instead use a dash "-"
$returnValue = Get-AValue -two 42 -one 33 
"Returned value is $returnValue"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Standard_Functions_PluralSight</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Standard_Functions_PluralSight</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#region Functions

$hw = {
        Clear-Host
        "Hello World"
      }
&amp; $hw         #"&amp;" to execute the script block in the variable


# Functions are basically script blocks with names.
function Write-HelloWorld()
{
  Clear-Host
  "Hello World"
}

# Running the above simply places the function in memory for us to use
# To use it, call it like you would a cmdlet
Write-HelloWorld



# When writing functions, use an approved verb
# Get a list of approved verbs
Get-Verb


# Parameters can be passed in by placing them in parenthesis
function Get-Fullname($firstName, $lastName)
{
  Write-Host ($firstName + " " + $lastName)
}

# Note when calling the function with parameters, do not use commas or ()
Get-Fullname "Arcane" "Code"

$myVar = "Arcane"

Get-Fullname $myVar "Code"

Get-Fullname $("Ar" + "cane") "Code"
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_HASH_table</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>HASH_Table_as_PARM_for_a_Method</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_HASH_table</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>HASH_Table_as_PARM_for_a_Method</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#'Hash Table with all the parms I will need for the New-AdUser method
$NewUserParams = @{
    'UserPrincipalName' = $Username
    'Name' = $Username
    'GivenName' = $FirstName
    'Surname' = $LastName
    'Title' = $Title
    'SamAccountName' = $Username
    'AccountPassword' = (ConvertTo-SecureString $DefaultPassword -AsPlainText -Force)
    'Enabled' = $true
    'Initials' = $MiddleInitial
    'Path' = "$Location,$DomainDn"       #'&lt;=== Creates a fully distinguished name
    'ChangePasswordAtLogon' = $true
}


#' USAGE ======================================================================================================
New-AdUser @NewUserParams                #'&lt;==== Pass a whole hash table of parms to the method


#' USAGE ======================================================================================================
#' the parameter names (i.e. Hash Table Keys) must be spelled just like the Parameters of the method be called
#' e.g. 'givenName' and 'surname' keys in the Hashtable are the same as the PARMs of Set-AdUser  

&gt; .\Set-MyAdUser.ps1 -Username rsmith -Attributes @{givenName = "Trudy"; surname = 'smithley'}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Logging__forSecurity</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>enable_Auditing_and_Logging</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Logging__forSecurity</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>enable_Auditing_and_Logging</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>enable_Auditing_and_Logging

Practical PowerShell Security: Enable Auditing and Logging with DSC
https://blogs.technet.microsoft.com/ashleymcglone/2017/03/29/practical-powershell-security-enable-auditing-and-logging-with-dsc/

#'Requirements
#'    We are assuming that the target system already has WMF 5.x installed or upgraded. Each of these enhancement will require the following settings:
#'
#'    Script block logging
#'        HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
#'            EnableScriptBlockLogging, 1
#'            EnableScriptBlockInvocationLogging, 1
#'        It may also be a good idea to increase the log size. The Microsoft-Windows-PowerShell/Operational log is 15MB by default.
#'    System-wide transcription
#'        Create a directory to hold transcripts
#'            Set permissions on the directory to prevent tampering. (I chose SDDL for the shortest code here.)
#'            Trim the transcript directory contents on an interval to avoid filling the drive (if local).
#'            We are going to use a local directory for now. Lee recommends pointing it to a share off-box.
#'        HKLM:\Software\Policies\Microsoft\Windows\PowerShell\Transcription
#'            EnableTranscripting, 1
#'            IncludeInvocationHeader,1
#'            OutputDirectory, [Path]
#'    Protected event logging (can be used together with Windows Event Forwarding)
#'        Requires Windows 10 or Windows Server 2016
#'        Requires a document encryption certificate
#'        HKLM:\Software\Policies\Microsoft\Windows\EventLog\ProtectedEventLogging
#'            EnableProtectedEventLogging, 1
#'            EncryptionCertificate, [Certificate]

Now that we have an outline of the settings required, we can move those into a DSC configuration. 
You can view the code on my GitHub account here: https://github.com/GoateePFE/BlogScripts/blob/master/PSSecDSC.ps1

That script does this:
#'Script Block Logging
#'    Two registry resources set the values.
#'    Then for good measure we use a script resource to increase the size of the PowerShell event log.
#'Transcription
#'    Three registry resources set the values.
#'    We need a file resource to create the directory to hold the transcript files.
#'    Then two script resources set the permissions on the directory and remove any old files. We probably could have used an external resource to set the directory permissions, but I want to keep this using in-box resources for simplicity. Keeping the transcript directory clean requires that you set the DSC Local Configuration Manager (LCM) to ApplyAndAutocorrect.
#'    NOTE: Remove the file and script resources if you send the transcripts to a remote UNC share path.
#'    NOTE: If you use a local path, have fun trying to read the transcript files. Also, the trim files script resource will likely generate warnings trying to clear old files.
#'Protected Event Logging
#'    I’m going to skip this one due to a couple reasons:
#'    Right now we do not have a way to request a certificate in a configuration, and then pass that data to another resource in the same configuration. Writing a custom resource for that wouldn’t be practical, because I’m trying to keep this to in-box DSC resources for now.
#'    Most customers already have an event collection tool (SIEM). If not, then explore the xWindowsEventForwarding resource module.
#'Fit and Finish
#'    Notice that the configuration has the following parameters:
#'    TranscriptPath – Directory where you want to put the transcript files. Can be local or UNC path.
#'    TranscriptDays – How many days of transcripts do you wish to retain?
#'    EventLogSizeInMB – Size to set for the PowerShell log to hold the additional content generated.
#'BONUS
#'    For completeness I threw in a configuration to disable the transcription and logging.
#'    I also threw in a couple lines to query the event logs for your new events.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Logging__forSecurity</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSSecDSC.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Logging__forSecurity</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSSecDSC.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://github.com/GoateePFE/BlogScripts/blob/master/PSSecDSC.ps1

That script does this:
#'Script Block Logging
#'    Two registry resources set the values.
#'    Then for good measure we use a script resource to increase the size of the PowerShell event log.
#'Transcription
#'    Three registry resources set the values.
#'    We need a file resource to create the directory to hold the transcript files.
#'    Then two script resources set the permissions on the directory and remove any old files. We probably could have used an external resource to set the directory permissions, but I want to keep this using in-box resources for simplicity. Keeping the transcript directory clean requires that you set the DSC Local Configuration Manager (LCM) to ApplyAndAutocorrect.
#'    NOTE: Remove the file and script resources if you send the transcripts to a remote UNC share path.
#'    NOTE: If you use a local path, have fun trying to read the transcript files. Also, the trim files script resource will likely generate warnings trying to clear old files.
#'Protected Event Logging
#'    I’m going to skip this one due to a couple reasons:
#'    Right now we do not have a way to request a certificate in a configuration, and then pass that data to another resource in the same configuration. Writing a custom resource for that wouldn’t be practical, because I’m trying to keep this to in-box DSC resources for now.
#'    Most customers already have an event collection tool (SIEM). If not, then explore the xWindowsEventForwarding resource module.
#'Fit and Finish
#'    Notice that the configuration has the following parameters:
#'    TranscriptPath – Directory where you want to put the transcript files. Can be local or UNC path.
#'    TranscriptDays – How many days of transcripts do you wish to retain?
#'    EventLogSizeInMB – Size to set for the PowerShell log to hold the additional content generated.
#'BONUS
#'    For completeness I threw in a configuration to disable the transcription and logging.
#'    I also threw in a couple lines to query the event logs for your new events.

==================================================================
&lt;##############################################################################
Ashley McGlone
Microsoft Premier Field Engineer
March 2017
http://aka.ms/GoateePFE
This is a sample DSC script for implementing the PowerShell logging and
transcription features described in Lee Holmes' white paper "PowerShell Loves the Blue Team".
https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team
For reference, here are the registry keys involved:
HKLM:\Software\Policies\Microsoft\Windows\PowerShell\Transcription
EnableTranscripting,1
OutputDirectory,[Path]
IncludeInvocationHeader,1
HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
EnableScriptBlockLogging,1
EnableScriptBlockInvocationLogging,1
(not implemented below)
HKLM:\Software\Policies\Microsoft\Windows\EventLog\ProtectedEventLogging
EnableProtectedEventLogging,1
EncryptionCertificate,[Certificate]
LEGAL DISCLAIMER
This Sample Code is provided for the purpose of illustration only and is not
intended to be used in a production environment.  THIS SAMPLE CODE AND ANY
RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.  We grant You a
nonexclusive, royalty-free right to use and modify the Sample Code and to
reproduce and distribute the object code form of the Sample Code, provided
that You agree: (i) to not use Our name, logo, or trademarks to market Your
software product in which the Sample Code is embedded; (ii) to include a valid
copyright notice on Your software product in which the Sample Code is embedded;
and (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and
against any claims or lawsuits, including attorneys’ fees, that arise or result
from the use or distribution of the Sample Code.
##########################################################################sdg#&gt;

Configuration EnablePowerShellLogging
{
Param(
    [string]
    $TranscriptPath = 'C:\PSTranscripts',
    [ValidateRange(1,365)]
    [int]
    $TranscriptDays = 14,
    [ValidateRange(1,1024)]
    [int]
    $EventLogSizeInMB = 50
)

    Import-DscResource -ModuleName PSDesiredStateConfiguration

    Node localhost
    {

        ### Script Block Logging ##############################################

        Registry ScriptBlockLogging
        {
            Key       = 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging'
            ValueName = 'EnableScriptBlockLogging'
            ValueData = 1
            ValueType = 'String'
            Ensure    = 'Present'
        }

        # Enable this setting to log start / stop events. Not usually recommended, as it causes
        # a significant impact on log volume
        &lt;#
        Registry ScriptBlockInvocationLogging
        {
            Key       = 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging'
            ValueName = 'EnableScriptBlockInvocationLogging'
            ValueData = 1
            ValueType = 'String'
            Ensure    = 'Present'
        }
        #&gt;

        Script PowerShellLogSize
        {
            GetScript = {
                Return @{
                    Result = Get-WinEvent -ListLog Microsoft-Windows-PowerShell/Operational | Out-String
                }
            }
            TestScript = {
                $Log = Get-WinEvent -ListLog Microsoft-Windows-PowerShell/Operational
                If ($Log.LogMode -ne 'Circular' -or $Log.MaximumSizeInBytes -lt ($using:EventLogSizeInMB * 1MB)) {
                    Write-Verbose 'Event log [Microsoft-Windows-PowerShell/Operational] is NOT in desired state.'
                    Return $false
                } Else {   
                    Write-Verbose 'Event log [Microsoft-Windows-PowerShell/Operational] is in desired state.'
                    Return $true
                }
            }
            SetScript = {
                Write-Verbose 'Applying settings to event log [Microsoft-Windows-PowerShell/Operational].'
                wevtutil set-log Microsoft-Windows-PowerShell/Operational /retention:false /maxsize:$($using:EventLogSizeInMB * 1MB)
            }
        }

        ### Transcription #####################################################

        ### Remove this resource if sending transcripts to a remote share.
        File TranscriptsDirectory
        {
            DestinationPath = $TranscriptPath
            Type            = 'Directory'
            Ensure          = 'Present'
        }

        ### Remove this resource if sending transcripts to a remote share.
        Script TranscriptsDirectoryPermissions
        {
            GetScript = {
                $acl = Get-Acl $using:TranscriptPath
                Return @{
                    Result = $acl.Sddl
                }
            }
            TestScript = {
                $acl = Get-Acl $using:TranscriptPath
                Write-Verbose "Transcript directory permissions: $($acl.Sddl)"
                If ($acl.Sddl -ne 'O:BAG:DUD:PAI(D;OICIIO;FA;;;CO)(A;OICI;0x100196;;;WD)(A;OICI;FA;;;BA)') {
                    Write-Verbose 'Transcript directory permissions are NOT in desired state.'
                    Return $false
                } Else {   
                    Write-Verbose 'Transcript directory permissions are in desired state.'
                    Return $true
                }
            }
            SetScript = {
                Write-Verbose 'Applying transcript directory permissions.'
                # Remove inherited permissions.
                # Allow Administrators full control.
                # Allow Everyone Write and ReadAttributes.
                # Deny CreatorOwner Full Control.
                $acl = Get-Acl $using:TranscriptPath
                $acl.SetSecurityDescriptorSddlForm('O:BAG:DUD:PAI(D;OICIIO;FA;;;CO)(A;OICI;0x100196;;;WD)(A;OICI;FA;;;BA)')
                $acl | Set-Acl $using:TranscriptPath -Verbose
            }
            DependsOn = '[File]TranscriptsDirectory'
        }

        ### Remove this resource if sending transcripts to a remote share.
        ### NOTE: This will generate errors due to permissions of the local transcript directory.
        Script TranscriptsDirectoryTrim
        {
            GetScript = {
                Return @{
                    Result = $using:TranscriptPath
                }
            }
            TestScript = {
                $ErrorActionPreference = 'Stop'
                Try {
                    $OldContent = Get-ChildItem $using:TranscriptPath -Recurse | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays($using:TranscriptDays * -1)}
                }
                Catch {
                    Write-Warning 'Access denied to some of the transcript files.'
                }
                If ($OldContent) {
                    Write-Verbose "Transcript directory contains content older than $($using:TranscriptDays) days."
                    Return $false
                } Else {   
                    Write-Verbose "Transcript directory DOES NOT contain content older than $($using:TranscriptDays) days."
                    Return $true
                }
            }
            SetScript = {
                $ErrorActionPreference = 'Stop'
                Try {
                    Get-ChildItem $using:TranscriptPath -Recurse | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays($using:TranscriptDays * -1)} | Remove-Item -Force -Confirm:$false -Verbose
                }
                Catch {
                    Write-Warning 'Access denied to some of the transcript files.'
                }
            }
            DependsOn = '[File]TranscriptsDirectory'
        }

        Registry Transcription
        {
            Key       = 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\Transcription'
            ValueName = 'EnableTranscripting'
            ValueData = 1
            ValueType = 'String'
            Ensure    = 'Present'
        }

        # Remove this setting to descrease transcript file size
        Registry TranscriptionInvocationHeader
        {
            Key       = 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\Transcription'
            ValueName = 'IncludeInvocationHeader'
            ValueData = 1
            ValueType = 'String'
            Ensure    = 'Present'
        }

        Registry TranscriptionPath
        {
            Key       = 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\Transcription'
            ValueName = 'OutputDirectory'
            ValueData = $TranscriptPath
            ValueType = 'String'
            Ensure    = 'Present'
        }

    }

}

cd c:\temp
EnablePowerShellLogging
Start-DscConfiguration -Path C:\temp\EnablePowerShellLogging -Wait -Verbose -Force

###############################################################################
break

Get-DscConfiguration

dir 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell' -Recurse

###############################################################################
break

Configuration DisablePowerShellLogging
{
Param(
    $Paths = @('HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging',`
    'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\Transcription')
)

    Import-DscResource -ModuleName PSDesiredStateConfiguration

    Node localhost
    {
        # Currently the registry resource does not support deleting an entire
        # key. So we will delete each key with a script resource.
        Script RemovePowerShellLogging
        {
            GetScript = {
                Return @{
                    Result = Get-Item -Path $Using:Paths -ErrorAction SilentlyContinue | Out-String
                }
            }
            TestScript = {
                If (Get-Item -Path $Using:Paths -ErrorAction SilentlyContinue) {
                    Write-Verbose "Registry keys for PowerShell logging and/or transcription found."
                    Return $false
                } Else {   
                    Write-Verbose "Registry keys for PowerShell logging and/or transcription NOT found."
                    Return $true
                }
            }
            SetScript = {
                Get-Item -Path $Using:Paths |
                    Remove-Item -Force -Confirm:$false -Verbose
            }
        }

    }

}

cd c:\temp
DisablePowerShellLogging
Start-DscConfiguration -Path C:\temp\DisablePowerShellLogging -Wait -Verbose -Force

break

dir 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell' -Recurse

###############################################################################
break

# Note that the PowerShell policy is cached when the ISE or Console is opened.
# Run these commands in a fresh session to see the effect.
"Catch me if you can"

# Commands run, notice the scriptblock ID
Get-WinEvent -FilterHashtable @{ ProviderName="Microsoft-Windows-PowerShell"; Id = 4104 } -MaxEvents 5 | ft Message -Wrap
Get-WinEvent -FilterHashtable @{ ProviderName="Microsoft-Windows-PowerShell"; Id = 4104 } -MaxEvents 5 | ? Message -like "*catch*" | ft Message -Wrap

# Commands started, notice the scriptblock ID
Get-WinEvent -FilterHashtable @{ ProviderName="Microsoft-Windows-PowerShell"; Id = 4105 } -MaxEvents 5 | ft TimeCreated,Message -Wrap

# Commands stopped, notice the scriptblock ID
Get-WinEvent -FilterHashtable @{ ProviderName="Microsoft-Windows-PowerShell"; Id = 4106 } -MaxEvents 5 | ft TimeCreated,Message -Wrap

# View the transcript output
# NOTE: Access denied if on a local path instead of UNC path
Get-ChildItem 'C:\PSTranscripts' -Recurse</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01_LogParser(IIS)=&gt;SQL__ScheduleTask</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01_LogParser(IIS)=&gt;SQL__ScheduleTask</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://support.software.dell.com/appassure/kb/144451



'1] Open Task Scheduler

	'Open Task Scheduler, create folder named "JPHSA" 
	' Right click the folder, and Create a new task "IIS_to_SQL_W3SVC1". Name it and set your security options.

		'GENERAL {Tag}
		--------------
			'Name: IIS_to_SQL_W3SVC1 
			'Location: \JPHSA
			'Author: JPHSA01\ggarson
			'Description: run LogParser, sets the Checkpoint, and moves new data to table on SQL Server. Runs under JPHSA01\IIS_SQL_DomainAdmin
			'When running the task, use the following user account
			'	JPHSA01\IIS_SQL_DomainAdmin
			'(x) Run whether user is logged on or not
			'[x] Run with highest privileges
			'Configure for: Windows Server 2012
			 
			 
	'Check "Run with highest privileges" as our scripts need to run as admin.  
	', 
	'enable the 'Run whether user is logged on or not' radio button.
'2] Triggers {tag}

	'Click on the Triggers tab and set your schedule or event that will trigger the running of your PowerShell script. 

		'Triggers {Tag}
		--------------
		'[New]
		' On a Schedule: Daily, at 5:30:00 am, Start on 3/24/2017
	
	
'3] Action {Tag}

	'Click on the Actions tab and click on New.
	'Action: Start a program
	'Program/script: Powershell.exe
	'You don't need to put a path as it should already be on your system.
	
		'Actions {Tag}
		--------------
		'Action: Start a program
		'Program/script: Powershell.exe
		'Add arguments: C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -NoLogo -NonInteractive -File "C:\DATA\PowerShellScripts\IIS_Log_W3SVC1_to_SQL_task_v0.ps1"
		
	'When I clicked [ok] it challenged me for the credentials of: JPHSA01\IIS_SQL_DomainAdmin
	p.iis_sql_23.56		
	'Message:
		This task requires that the user account specified has Log on as batch job rights.
		For more information about setting this policy, see the Task Security Context topic
		in Help	
	'To give the user rights:
			
'			Go to the Start menu
'			Run
'			Type secpol.msc
'			and press Enter
'			The Local Security Policy manager opens
'			Go to Security Settings - Local Policies - User Rights Assignment node
'			Double click Log on as a batch job on the right side
'			Click Add User or Group...
'			Select 'JPHSA01\IIS_SQL_DomainAdmin' and click OK
				
'4] Set Argument

	'First you need to set the ExecutionPolicy. You have two options here, you can set the ExecutionPolicy on the machine or you can do it on a per-script basis. 
	'	Read the PowerShell ExecutionPolicy link below as it talks about or you can issue the command:

	Get-Help About_execution_policies

	'To set the execution policy globally, you can issue this command from within PowerShell:

	Set-ExecutionPolicy Unrestricted

	'Or use one of the other settings available depending on your environment. 
	'In the context of this how-to, however, we want to set the execution policy on a per script basis and open up security for us to run the script. 
	'This security policy will only be in effect for the script we are running and not compromise security otherwise.
	'That means we use the following Argument:

	-ExecutionPolicy Bypass -File c:\temp\agent_repl.ps1

'5] Save and Test</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>HELP_adding_Help_to_your_function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>HELP_adding_Help_to_your_function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#-----------------------------------------------------------------------------#
# Adding Help to Your Functions
#-----------------------------------------------------------------------------#
#region Help

# Robust help built into PowerShell
Get-Help Get-ChildItem

# Help for your function?
function Get-ChildName ()
{
  Write-Output (Get-ChildItem | Select-Object "Name")
}
Clear-Host
Get-Help Get-ChildName


# Custom tags within a comment block that Get-Help will recognize
# Note that not all of them are required
# .SYNOPSIS - A brief description of the command
# .DESCRIPTION - Detailed command description
# .PARAMETER name - Include one description for each parameter
# .EXAMPLE - Detailed examples on how to use the command
# .INPUTS - What pipeline inputs are supported
# .OUTPUTS - What this funciton outputs
# .NOTES - Any misc notes you haven't put anywhere else
# .LINK - A link to the URL for more help. Use one .LINK tag per URL
# Use "Get-Help about_comment_based_help" for full list and details

function Get-ChildName ()
{
&lt;#
  .SYNOPSIS
  Returns a list of only the names for the child items in the current location.
  
  .DESCRIPTION
  This function is similar to Get-ChildItem, except that it returns only the name
  property. 
  
  .INPUTS
  None. 
  
  .OUTPUTS
  System.String. Sends a collection of strings out the pipeline. 
  
  .EXAMPLE
  Example 1 - Simple use
  Get-ChildName
  
  .EXAMPLE
  Example 2 - Passing to another object in the pipeline
  Get-ChildName | Where-Object {$_.Name -like "*.ps1"}

  .LINK
  Get-ChildItem 
  
#&gt;

  Write-Output (Get-ChildItem | Select-Object "Name")			#' &lt;=== This is the actual code for the function
  
}

Clear-Host
Get-Help Get-ChildName


Clear-Host
Get-Help Get-ChildName -full

#endregion Help</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>HELP</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>HELP</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'Example of getting help for 'Get-Command'
&gt; Get-Help Get-Command

&gt;Update-Help  {to get the updates}

#region Cmdlets

	# Get-Command - Retrieves a list of all system commands
	Get-Command
	
	# Can expand by searching for just a verb or noun
	Get-Command -verb "get"
	Get-Command -noun "service"
	
	# Get-Help can be used to explain a command 
	Get-Help Get-Command
	Get-Help Get-Command -examples		#show all the examples
	Get-Help Get-Command -detailed
	Get-Help Get-Command -full
	Get-Help Get-Command -Online   # PS 3 - VERY good for reading - This brings up default browser, and help on the command
	
	# Most commands can also be passed a -? paramter to get help
	Get-Command -?

#endregion Cmdlets



Get-Help 'cmdlet displays information
'The cmdlet has also an Aliases set in the shell by default as 'help' and 'man'. 

'We can also limit to what type of information we may want with the –Category parameter

  help -Category Cmdlet -Name *service*
  
  'One can select what parts of a help file we want to see by specifying the parameter for the level of information one wants

–Detailed 		'parameter is given it will show Parameter information and Examples.
–Full 			'parameter is given it will show a more detailed list of info for Parameters.
–Examples 		'parameter is given only examples are shown.
-full 			'option is used we get additional information on the parameters:

'Syntax

Required for required options or values ==&gt; they will not be enclosed in any bracket.
Options or values enclosed in [ ] are optional
Values are represent with the type they take between &lt; &gt;
Those values that can be lists are represented as &lt;type[ ]&gt; 
Those that have a predefined list of options it can take are represented as &lt; option1 | option2 | option3&gt;


'With PowerShell v3 the
 –ShowWindow 			'parameter was added to open a separate window that can be used as reference while one works construction a command
 
&gt; help about      	'This will list all conceptual topics.


Get-Verb 			'cmdlet to get the list of approved verbs for PowerShell. 

Get-Command 		'gets the commands from Windows PowerShell modules 

=======================================================================


' Using help optional parmameters and their values are shown in brackets
==========================================================================

' No mandatory params
(Get-Help -Name Get-Service -Detailed).syntax			'&lt;=== This requests help on the syntax

' Only Path is mandatory
(Get-Help -Name Get-Content -Detailed).syntax

'Get-Command to find Mandatory parameters in cmdlets
'Note can run this up to each period "." in the ISE to see what that part does
(Get-Command -Name 'Get-Content').Parameters.Path.Attributes

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Interating_over_Objects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Interating_over_Objects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'there are 2 methods for iterating thru objects and are often confused:

ForEach-Object cmdlet and its aliases foreach and %.

foreach( in ){} statement.

'As you can see the main reason for the confusion is that Foreach-Object has an alias of foreach which can be confused with the statement. 
'Each method will take a collection and process the objects in a Scriptblock but each behaves differently, 
'however and its use will vary case by case.

=======================================================================================================
'The ForEach-Object 
'	cmdlet takes a stream of objects from the pipeline 
'	and processes each and it uses less memory do to garbage control, 
'	as objects gets processed and they are passed thru the pipeline they get removed from memory. 
'	The cmdlet takes 4 main parameters:

Begin &lt;Script block&gt; 		'executed before processing all objects
Process &lt;Script block&gt; 		'executed per each object being processed
End &lt;Script block &gt; 		'to be executed after all objects have been processing all objects.
InputObject &lt;PSObject&gt; 		'to take actions against. Typically this is taken thru the pipeline.

'The ScriptBlocks parameters are also positional

PS C:\&gt; 1..5 | ForEach-Object { $Sum = 0 } { $Sum += $_ } { $Sum } 
15 


'To skip to the next object to be process in ForEach-Object the keyword Continue is used. 
'For exiting the loop inside of a ForEach-Object the break keyword is used.

C:\PS&gt; $Numbers = 4..7 
C:\PS&gt; 1..10 | foreach-object { if ($Numbers -contains $_) { continue }; $_ } 
1 
2 
3 


=======================================================================================================
'The foreach( in ){} statement 
'	places on each iteration an element of a collection in to memory first and then processes each. 
'	(Not good for extremely large collections on memory constrained systems). 
'	Since the collection being worked on is loaded in to memory it tends to be faster than the ForEach-Object cmdlet.

'To skip to the next object to be process in foreach statement the keyword continue is used. 
'	For exiting the loop inside of a foreach statement the break keyword is used.

'The foreach statement has a special variable called $foreach 
'	with 2 special methods that can be used: 
'	
'	$foreach.MoveNext() to skip to the next element in the collection 
'		and continue to process the next element in the collection.
'		Returns a Boolean true value that should be handled.
'	$foreach.Current to represent the current element being processed

PS &gt;foreach ($i in (1..10)){ 
&gt;&gt;    if ($i -gt 5){ 
&gt;&gt;        continue 
&gt;&gt;    } 
&gt;&gt;    $i 
&gt;&gt; } 
&gt;&gt;
1 
2 
3 
4 
5</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>LockRemoteWorkstation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>LockRemoteWorkstation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Function Lock-RemoteWorkstation 
{ 
param( 
$Computername, 
$Credential 
) 
    if(!(get-module taskscheduler)){Import-Module TaskScheduler} 
    New-task -ComputerName $Computername -credential:$Credential |  
    Add-TaskTrigger -In (New-TimeSpan -Seconds 30) | 
    Add-TaskAction -Script ` 
    {  
    $signature = @"  
    [DllImport("user32.dll", SetLastError = true)]  
    public static extern bool LockWorkStation();  
"@  
    $LockWorkStation = Add-Type -memberDefinition $signature -name "Win32LockWorkStation" -namespace Win32Functions -passthru  
    $LockWorkStation::LockWorkStation() | Out-Null 
    } | Register-ScheduledTask TestTask -ComputerName $Computername -credential:$Credential 
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Run_Script_From_File</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Run_Script_From_File</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#Type: Write-Host "Hello World:" in a notepad and save it as "Script1.ps1" in 
#								a directory called: "C:\Scripts"

Write-Host "Hello World:" -foregroundcolor:white -backgroundcolor:red



#'1] Call using the full path\filename------------------------------------------
&gt; Set-Location c:\Scripts
#To execute:
&gt; .\Script1.ps1 				#' the dot backslash says to run the script from the current folder
#Then hit enter

#'2] Call using .\ to reference the current location in the file system----------
#' On the other hand to run a script from another folder, use a dot and wrap the path\filename.ps1 in a single qoute:

&gt;. 'C:\PS\Beginning PowerShell Scripting for Developers\demo\bpsd-m06-do-something.ps1'

#'3] Store the script in a variable and execute the variable.-------------------
$doSomething = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\bpsd-m06-do-something.ps1'
&gt;. $doSomething



========================================================

'There are broadly three ways to run command-lets within PowerShell.

'1] Simple commands can be run from the /PowerShell / PowerCLI command prompt.
'2] A script file (extension of .ps1) can be created and called from the command line.  
'	The script can be as complex as you want and may include calling other COM objects 
'	and running applications in the background,
'	calling web services and so on.  
'	By default, PowerShell will not allow you to run scripts.  
'	Set the following command in your PowerShell session.

Set-ExecutionPolicy RemoteSigned

'3] There is a host of information on security and execution policies, 
'	but for us, working in an enclosed environment, this is fine.
'	Creating a module (a file with .psm1 extension), copying the module file to a set location (from one of the defined module paths), 
'	importing the module and then using functions provided within the module.  
'	Modules are for functions that provide generic functionality.

========================================================

 'I'm guessing this script isn't signed. Have you enabled execution of unsigned scripts using the 
 Set-ExecutionPolicy -ExecutionPolicy Unrestricted
 
 'Agreed. Pasting the script into PowerShell is a completely different thing from actually invoking the script file, as long as the execution policy is concerned.
 
 ========================================================
'call powershell.exe with:
 -ExecutionPolicy Bypass 
 'to override the restricted execution policy</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Selecting_Objects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Selecting_Objects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'The Select-Object cmdlets allows us to select from a collection of objects the ones we want when we specify the index position of the item. 
'Just like all programing languages we start our count with 0.

PS &gt; Get-Process | Sort-Object name -Descending | Select-Object -Index 0,1,2,3,4 

'The Select-Object cmdlets allows us to select from a collection of objects the ones we want when we specify the index position of the item. 
'	Just like all programing languages we start our count with 0.

PS &gt; Get-Process | Sort-Object name -Descending | Select-Object -Index 0,1,2,3,4 

'We can also use the range notation, 
'	this will return an array of number for the range and we can pass those to the index parameter.

PS &gt; Get-Process | Sort-Object name -Descending | Select-Object -Index (0..4)

'Select the first number of objects, the last number of objects or even skip a certain number.

PS &gt; Get-Process | Sort-Object name -Descending | Select-Object -first 5 

'The select-object cmdlets also allows us to create and rename an objects property, 
'	this is very useful when the property name is not to descriptive and when we are passing from one comdlet to another 
'	where the next cmdlet accepts and processes objects by Property Name. 
'	The way it works is that we create a hash with 2 values in it, 
'	one is Name which is the name we want for the property and the other is expressions 
'	which is a script block whose returning value will be set as the value of the property we named.

PS &gt; Get-Process | Select-Object -Property name,@{name = 'PID'; expression = {$_.id}} 				'&lt;== NOT CLEAR where the renameing is being done

'One thing that we have to be very careful with when using Select-Object 
'	is that when we select property names using it actually generates a new object 
'	of the same type with only those properties that we selected and strips out the rest. </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Network_subnet_IP_DNS_etc</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>GetComputerName_for_txt_list_and_export_to_CSV</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Network_subnet_IP_DNS_etc</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>GetComputerName_for_txt_list_and_export_to_CSV</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'Is there a way to have a script read a txt file that contains a list of IP address 
'and then returns the IP address and the computer name and formated like below:

IP ComputerName
10.1.1.1 MikesComputer
10.1.1.2 FranksDevBox

&gt;get-content IPAddresses.txt | ForEach-Object {
[System.Net.Dns]::GetHostbyAddress($_) |
Add-Member -Name IP -Value $_ -MemberType NoteProperty -PassThru
} | Select IP, HostName | Export-CSV IPandName.csv</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Object_CUSTOM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>CREATE_custom_Objects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Object_CUSTOM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>CREATE_custom_Objects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'https://technet.microsoft.com/en-us/library/hh750381.aspx


#'The Full-Form Way
======================
#'Assuming I have an object in the variable $os, and another in $bios, 
#' I could combine selected pieces of information from them like this:
--------------------
$object = New-Object –TypeNamePSObject
$object | Add-Member –MemberTypeNoteProperty –Name OSBuild –Value $os.BuildNumber
$object | Add-Member –MemberTypeNoteProperty –Name OSVersion –Value $os.Version
$object | Add-Member –MemberTypeNoteProperty –Name BIOSSerial –Value $bios.SerialNumber
Write-Output $object

#'PassThru: A Brief Shortcut
===========================
#'You can make that first approach a bit more concise by telling 
#'	Add-Member to put the object back into the pipeline:
#'When you end a line with a pipe character, 
#'    Windows PowerShell knows to go to the next physical line to look for the next command in the pipeline. 
#' Essentially, it’s a way of breaking up a long command into multiple physical lines. 
#' That trick, combined with the –PassThru switch, makes this a series of three distinct commands.
---------------------------
$object = New-Object –TypeNamePSObject
$object | Add-Member –MemberTypeNoteProperty –Name OSBuild –Value $os.BuildNumber –PassThru |
Add-Member –MemberTypeNoteProperty –Name OSVersion –Value $os.Version –PassThru |
Add-Member –MemberTypeNoteProperty –Name BIOSSerial –Value $bios.SerialNumber
Write-Output $object

#'Hashtable
========================
#'Using the New-Object feature is a more concise approach. 
#'This lets you create a hashtable (or associative array) that contains 
#'    the property names and values you want to add to the newly created object. 
#'These properties are each automatically created as a NoteProperty:
-------------------------
$properties = @{'OSBuild'=$os.BuildNumber;
                'OSVersion'=$os.version;
                'BIOSSerial'=$bios.SerialNumber}
$object = New-Object –TypeNamePSObject –Prop $properties
Write-Output $object

#'parenthetical expression to make it even shorter. However, 
#'	I think this makes it a bit more difficult to read:

$object = New-Object –TypeNamePSObject –Prop
(@{'OSBuild'=$os.BuildNumber;
                'OSVersion'=$os.version;
                'BIOSSerial'=$bios.SerialNumber})
Write-Output $object

#'Going a Bit Further
==========================
#'You’ll notice that in all these examples, 
#'    I save the custom object to a variable ($object) before writing it to the pipeline. 
#'The reason for this is simple. You might want to manipulate the object a bit more. 
#'For example, you might want to give your object a custom type name:
#'Doing this lets you create a custom default formatting layout for displaying your object.
----------------------------

$object.PSObject.TypeNames.Insert(0,'My.Custom.Name')


#'Less readable and harder to teach
====================================
#'assuming that my $os and $bios variables contain the raw objects I want to extract information from:
#'It’s basically generating custom properties using a syntax unique to that cmdlet (and shared by the Format cmdlets). 
----------------------------------

$os | Select-Object –Property @{n='OSVersion';e={$_.Version}},
@{n='OSBuild';e={$_.BuildNumber}},
@{n='BIOSSerial';e={$bios.SerialNumber}}

#'Another way:
======================================
#'You’re creating an empty hashtable, 
#'    then adding information by referring to properties that don’t exist. 
#'When you first try to access OSBuild, for example, 
#'    Windows PowerShell realizes that no such property exists in the $info object 
#'    (which was an empty hashtable). 
#'It implicitly creates the property and assigns your value. Crazy stuff—but it works.
-----------------------------------------

$info = @{}
$info.OSBuild=$os.BuildNumber
$info.OSVersion=$os.version
$info.BIOSSerial=$bios.SerialNumber
$object = New-Object –TypeNamePSObject –Prop $info
Write-Output $object</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Object_CUSTOM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSTypeName</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Object_CUSTOM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSTypeName</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
$myObject.PSObject.TypeNames.Insert(0,"My.Object")

'or

$myObject = [PSCustomObject]@{
    PSTypeName = 'My.Object'
    Name       = 'Kevin'
    Language   = 'Powershell'
    State      = 'Texas'
}


'Function Parameters
=====================
'You can now use these custom types for parameters in your functions and scripts. 
'You can have one function create these custom objects and then pass them into other functions.

param( [PSTypeName('My.Object')]$Data )

'Powershell will then require that the object be of the type you specified. 
'It will throw a validation error if the type does not match automatically 
	'to save you the step of testing for it in your code. 


'Function OutputType
====================
'You can also define an OutputType for your advanced functions.

function Get-MyObject
{
    [OutputType('My.Object')] 
    [CmdletBinding()]
        param
        (
            ...</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_1_j_Foreach_Object</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_1_j_Foreach_Object</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>% 			'is an alias for ForEach-Object
foreach 	'is an alias for ForEach-Object

#'	When you are piping input into ForEach, 
#'	it is the alias for ForEach-Object. 
#'	But when you place ForEach at the beginning of the line, 
#'	it is a Windows PowerShell statement.


'Note there are two distinct things:
'	The 'Foreach-Object' {cmdlet} with the alias: 'ForEach'
'	and there is the 'ForEach' enumerator. 
'	THEY ARE NOT THE SAME THING

$_ 'represents the current object in the pipeline

'Use a semi-colon (;) to seperate commands on the same line

' The 'Foreach-Object' {cmdlet} has three Parameters (similar structure to 'Advanced Functions' and 'Cmdlets'}
-Begin{}	'[optional] commands (script block) that run once before anything is processed
-Process{}	'commands that run once for each incoming object (This is the default script block)
			' This is the ONLY place where you can use "$_" to represent the current object
-End{}		'[optional] commands that run once after everything is processed

===========================================================================================
#' EXAMPLE
dir c:\DATA -Directory | 
foreach -begin { $h=@{} ; $results=@() } -process { 
$stat = dir $_.FullName -file -Recurse | Measure-Object -Property length -sum
$h.Path = $_.fullname
$h.Files = $stat.count
$h.TotalSize = $stat.sum
$results+=[pscustomobject]$h
} -end { 
$results 
}

'OR  (NOTE can not break line at the following "-begin" "-process", nor "-end"

dir c:\DATA -Directory | 			#'Get Each Directory
foreach -begin { $h=@{} ; 			#'BEFORE: Initialize an empty hash table
                 $results=@() 		#'		 Initialize an empty array
               } -process {  		
               						#'Get a directory of every directory that comes through the initial command
               						#	'	and Pipe it to 'Measure-Object'
                            $stat = dir $_.FullName -file -Recurse | Measure-Object -Property length -sum
                            $h.Path = $_.fullname
                            $h.Files = $stat.count
                            $h.TotalSize = $stat.sum
                            $results+=[pscustomobject]$h	#'Create a custom object, and add the custom object to the array
                           } -end { 	#'Write the results to the Pipeline after the middle section is done
                                        $results 
                                    }
===========================================================================================   
#'get a list of numbers                                 
&gt;1..10  #' sends the numbers 1 through 10 into the pipeline

&gt;1..10 | foreach-object -process {$_ * 2}
'OUTPUT
========
#'2
#'4
#'6
#'8
#'10
#'12
#'14
#'16
#'18
#'20

'OR without the word '-process', b/c the default scriptblock is the 'process' parameter of 'foreach'
&gt;1..10 | foreach  {$_ * 2}

#' This is equivalent:
&gt;1..10 | foreach {$PSItem *2}
===========================================================================================
#' back to the Get-Vegetable teaching example

&gt;Get-Vegetable | Get-Member
#' OUTPUT
=============================== NOTE the 'Peel' Method
#'   TypeName: Vegetable
#'
#'Name        MemberType Definition                    
#'----        ---------- ----------                    
#'Equals      Method     bool Equals(System.Object obj)
#'GetHashCode Method     int GetHashCode()             
#'GetType     Method     type GetType()                
#'Peel        Method     void Peel()  				&lt;=============                 
#'Prepare     Method     void Prepare(Status State)    
#'ToString    Method     string ToString()             
#'Color       Property   VegColor Color {get;set;}     
#'CookedState Property   Status CookedState {get;set;} 
#'Count       Property   int Count {get;set;}          
#'IsPeeled    Property   bool IsPeeled {get;set;}      
#'IsRoot      Property   bool IsRoot {get;set;}        
#'Name        Property   string Name {get;set;}        
#'UPC         Property   int UPC {get;set;}  

'#Initially when we Select the Root vegetables they are not Peeled
&gt;Get-Vegetable -RootOnly | Select Name,IsPeeled
'OUTPUT
========================
#'Name   IsPeeled
#'----   --------
#'carrot    False
#'radish    False
#'turnip    False
#'potato    False

'Now apply the 'Peel' method to each object in the pipeline:
&gt;Get-Vegetable -RootOnly | foreach {$_.peel() ; get-vegetable $_.name | Select name,ispeeled}
'OUTPUT
===============
#'Name   IsPeeled
#'----   --------
#'carrot     True
#'radish     True
#'turnip     True
#'potato     True
===========================================================================================
'While you can use 'foreach, sometimes you should find the appropriate method for those objects
#'1] So while you can do this:
&gt;get-service lanmanworkstation,winmgmt,vmicvss | foreach { $_.Pause()}
#' and then verify it worked
get-service lanmanworkstation,winmgmt,vmicvss

#' it is more of a Powershell strategy to look for cmdlets
get-command -noun service

'OUTPUT
==============
#'CommandType     Name                                               Version    Source                                                
#'-----------     ----                                               -------    ------                                                
#'Cmdlet          Get-Service                                        3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          New-Service                                        3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          Restart-Service                                    3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          Resume-Service                                     3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          Set-Service                                        3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          Start-Service                                      3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          Stop-Service                                       3.1.0.0    Microsoft.PowerShell.Management                       
#'Cmdlet          Suspend-Service                                    3.1.0.0    Microsoft.PowerShell.Management  


#' and then use the appropriate Method
get-service lanmanworkstation,winmgmt,vmicvss | Suspend-service -PassThru

===========================================================================================
#' This would get all the files in the directory 'c:\work' that are not already .zip or .exe files
#' and then create a zip file with their name, and zip them into it.
dir c:\work -file -Recurse | 
	where {$_.length -ge 500 -AND $_.extension -notmatch ".zip|.exe"} | Foreach { 
	$file = Join-Path -path $_.Directory -ChildPath "$($_.BaseName).zip"
	Compress-Archive -path $_.fullname -DestinationPath $file -CompressionLevel Optimal -Force
	}
   
   </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_1_l_Pipeline_Parameter_Binding</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_1_l_Pipeline_Parameter_Binding</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Example_1_l_Pipeline_Parameter_Binding

Pipeline_Parameter_Binding
=================================================================================================
'ByValue

'ByPropertyName

#'To examine the Parameters of a command you can use the "-Parameter" option of Help to get info about a particular parameter of the command

&gt;help Get-Service
'OUTPUT
====================
#'NAME
#'    Get-Service
#'    
#'SYNOPSIS
#'    Gets the services on a local or remote computer.
#'    
#'    
#'SYNTAX
#'    Get-Service [-ComputerName &lt;String[]&gt;] [-DependentServices] -DisplayName &lt;String[]&gt; [-Exclude &lt;String[]&gt;] [-Include &lt;String[]&gt;] [-RequiredServices] 
#'    [&lt;CommonParameters&gt;]
#'    
#'    Get-Service [-ComputerName &lt;String[]&gt;] [-DependentServices] [-Exclude &lt;String[]&gt;] [-Include &lt;String[]&gt;] [-InputObject &lt;ServiceController[]&gt;] [-RequiredServices] 
#'    [&lt;CommonParameters&gt;]
#'    
#'    Get-Service [[-Name] &lt;String[]&gt;] [-ComputerName &lt;String[]&gt;] [-DependentServices] [-Exclude &lt;String[]&gt;] [-Include &lt;String[]&gt;] [-RequiredServices] [&lt;CommonParameters&gt;]
#'    
#'...

'Then to get more info about one of the parameters (e.g. 'Computername'):
&gt;help Get-Service -Parameter Computername    '&lt;== This gets more info about that parm
'OUTPUT
=================
#'-ComputerName &lt;String[]&gt;
#'    Gets the services running on the specified computers. The default is the local computer.
#'    
#'    Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of a remote computer. To specify the local computer, type the computer name, a dot 
#'    (.), or localhost.
#'    
#'    This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-Service even if your computer is not configured to run 
#'    remote commands.
#'    
#'    Required?                    false
#'    Position?                    named
#'    Default value                None
#'    Accept pipeline input?       True (ByPropertyName)   &lt;=== Here you can see it by "ByPropertyName"
#'    Accept wildcard characters?  false#'
#'
=================================================================================================
&gt;help restart-service -Parameter name
#'-Name &lt;String[]&gt;
#'    Specifies the service names of the services to restart.
#'    
#'    Required?                    true
#'    Position?                    0
#'    Default value                None
#'    Accept pipeline input?       True (ByPropertyName, ByValue)		&lt;===== by both
#'    Accept wildcard characters?  false
#'

#' Feed list to cmdlet, use '-PassThru' to see results 
&gt;'bits','winrm' | restart-service -PassThru			&lt;=== NOTE the apostrophes, in the string, comment it out

'The same comandlet has another parameter that is just ByValue, 
'	AND it is a "&lt;ServiceController[]&gt;" object
&gt;help restart-service -Parameter inputobject
'OUTPUT
=========
#'-InputObject &lt;ServiceController[]&gt;
#'    Specifies ServiceController objects that represent the services to restart. Enter a variable that contains the objects, or type a command or expression that gets 
#'    the objects.
#'    
#'    Required?                    true
#'    Position?                    0
#'    Default value                None
#'    Accept pipeline input?       True (ByValue)
#'    Accept wildcard characters?  false
#'    

#'Note that the cmdlet "Get-Service" returns a "&lt;ServiceController[]&gt;" object

Get-Service winrm | Get-Member
'OUTPUT
=========
#'   TypeName: System.ServiceProcess.ServiceController
#'
#'Name                      MemberType    Definition                                                                                                                       
#'----                      ----------    ----------                                                                                                                       
#'Name                      AliasProperty Name = ServiceName                                                                                                               
#'RequiredServices          AliasProperty RequiredServices = ServicesDependedOn 
#'....

'So this works as well as using the names
&gt;get-service winrm | restart-service -PassThru</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Objects</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>foreach_vs_ForEach-Object</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Objects</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>foreach_vs_ForEach-Object</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
% 			'is an alias for ForEach-Object
foreach 	'is an alias for ForEach-Object

#'	When you are piping input into ForEach, 
#'		it is the alias for ForEach-Object. 
#'	But when you place ForEach at the beginning of the line, 
#'		it is a Windows PowerShell statement.

#'ForEach-Object is best used when sending data through the pipeline 
#'	because it will continue streaming the objects to the next command in the pipeline, 
#'	for example:

ForEach-Object -InputObject (1..1E4) { $_ } | Measure-Object

#'You cannot do the same thing with ForEach () {}
#'	because it will break the pipeline and throw error messages 
#'	if you attempt to send that output to another command.

ForEach ($i in (1..1E4)) { $i } | Measure-Object

#'You would have to save all of the output that is being process by ForEach 
#'	to a variable and then pipe it to another cmdlet, for example:

$Data = ForEach ($i in (1..1E4)) {$i}
$Data | Measure-Object

#'The fact that now we have totally broken the pipeline becomes more apparent after this. 
#'Not only do we have to stop the pipeline to begin processing the data, 
#'    we cannot even send that data to the pipeline from the statement 
#'    without first collecting the output into a variable and then sending it down the pipeline.


performance vs. memory consumption.
==================================

#'The ForEach statement loads all of the items up front into a collection 
#'	before processing them one at a time. 
#'ForEach-Object expects the items to be streamed via the pipeline, 
#'	thus lowering the memory requirements, but at the same time, taking a performance hit. 

#'ForEach is perfect if you have plenty of memory, want the best performance, 
#'    and do not care about passing the output to another command via the pipeline.

#'ForEach-Object (with its aliases % and ForEach) take input from the pipeline. 
#'    Although it is slower to process everything, 
#'    it gives you the benefit of Begin, Process, and End blocks. 
#'    In addition, it allows you to stream the objects to another command via the pipeline.
#'
#'


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ODBC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Modifying ODBC Settings with WMI and PowerShell</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ODBC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Modifying ODBC Settings with WMI and PowerShell</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.sqldataplatform.com/Blog/Post/9/Modifying-ODBC-Settings-with-WMI-and-PowerShell

#' This modifies an existing ODBC Setting

#'  The most important part of this script is the #Define Key to Modify section. 
#'  The $ValueName is the registry value you want to change, 
#'  in this case the "Server" value since we are moving databases to a new server. 
#'  The $Value is the new name of the server, for our example here it's SQLPROD1. 
#'  The $Key is the location of the registry key where you will change the ODBC values. 
#'  MYODBCNAME in the Key is the name of your DSN. 
#'  Create a new ODBC DSN connection and use the above script to modify it. 


#====================================================================================

#' Define Constants 

$HKEY_Local_Machine =2147483650 #This is the HKEY_Local_Machine well known value 

#' Get Class to call static methods on 

$regClass = [WMIClass]"ROOT\DEFAULT:StdRegProv" #WMIClass is a Type Accelerator 

#' Define key to modify 

$ValueName = "Server" #The registry value you want to change 

$Values = @('SQLPROD1') #SQLPROD1 is the name of the new server 

$Key = "SOFTWARE\odbc\odbc.ini\MYODBCNAME" #Location of the Key, MYODBCNAME is the DSN name. 

#' Create Value entry 

$results = $regClass.SetStringValue($HKEY_LOCAL_MACHINE, $Key, $ValueName, $Values) 

If ($results.Returnvalue -eq 0) {"Value Set"} 


#====================================================================================
#'  
#'  Now that we know how to change the ODBC on our local machine, 
#'  now we can change it on a remote PC. 
#'  This follows the same steps as our first script but now we need to add come credentials to authenticate to the target client machine. 
#'  Make sure the account you are using has elevated permissions on the remote machine. 

#Define credentials to connect to remote machine 

$Password = ConvertTo-SecureString "P@ssw0rD" -AsPlainText -Force 

$credential = New-Object System.Management.Automation.PSCredential "MyDomain\administrator", $Password 

# Define Constants 

$HKEY_Local_Machine =2147483650 #This is the HKEY_Local_Machine well known value 

# Get Class to call static methods on with credential - targets remote computername 

$regClass = get-wmiobject -list "StdRegProv" -namespace root\default -computername STL-W7User1 -credential $credential 

# Define key to modify 

$ValueName = "Server" #The registry value you want to change 

$Values = @('SQLPRD1') #Name of the new server 

$Key = "SOFTWARE\odbc\odbc.ini\MYODBCNAME" #MYODBCNAME is the DSN name. 

# Create Value entry 

$results = $regClass.SetStringValue($HKEY_LOCAL_MACHINE, $Key, $ValueName, $Values) 

If ($results.Returnvalue -eq 0) {"Value Set"} 

#'===============================================================================

#'  Here we have passed credentials to the remote machine so we can execute the script. 
#'  You will also notice the addition of –computername 
#'  under the #Define Constants section, 
#'  this is the target computer name STL-W7User1. 
#'  Setup a new ODBC on a remote PC and test again. 
#'  
#'  Now that we know how to change the ODBC connection for both local and remote PCs, 
#'  but how can we change it for more than a single remote PC, 
#'  for let's say 20 PC's? We are going to build an array, 
#'  a simple text file that has all the computer names you want to change the ODBC connection on. 
#'  After we build our array we will iterate through the array using foreach: 
#'  


#Define credentials to connect to remote machine 

$Password = ConvertTo-SecureString "P@ssw0rD" -AsPlainText -Force 

$credential = New-Object System.Management.Automation.PSCredential "MyDomain\administrator", $Password 

# Define Constants 

$HKEY_Local_Machine =2147483650 #This is the HKEY_Local_Machine well known value 

# Define array 

$strComputers = Get-Content -Path "C:\MyScripts\Computers.txt" 

# Get Class to call static methods on with credential – calls array 

$regClass = get-wmiobject -list "StdRegProv" -namespace root\default -computername $strComputers -credential $credential 

# Define key to modify 

$ValueName = "Server" #The registry value you want to change 

$Values = @('SQLPRD1') #Name of the new server 

$Key = "SOFTWARE\odbc\odbc.ini\MYODBCNAME" #MYODBCNAME is the DSN name. 

# Create Value entry 

Foreach ($objectName in $regClass) 

$results = $objectName.SetStringValue($HKEY_LOCAL_MACHINE, $Key, $ValueName, $Values) 

If ($results.Returnvalue -eq 0) {"Value Set"} 


#'  This script follows all the steps from the last script 
#'  but this time we are calling our text file to feed the computer names to build our array. 
#'  Under #Create Value Entry we use Foreach to iterate through the computer names, 
#'  this way all remote computers defined in your list will have their ODBC changed. 
#'  For the text file, I just created a simple txt file with each computer name in it. 
#'  I am calling the directory C:\MyScripts\ with the file name Computers.txt in the #Define Array section. 

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_OutPut</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Add-Content_and_Save-Content</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_OutPut</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Add-Content_and_Save-Content</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Add-Content : 'will create and append to files
Set-Content :  'will create and overwrite files.


$data | Add-Content -Path $Path
'and to read it back:
Get-Content -Path $Path



'This command adds the date to the end of the File1.log and File2.log files 
'	and then displays the date at the command line.
' The command uses the Get-Date cmdlet to get the date, 
'	and it uses the Value parameter to pass the date to Add-Content.
' The PassThru parameter passes an object representing the added content through the pipeline.
' Because there is no other cmdlet to receive the passed object, it is displayed at the command line.
&gt; Add-Content -Path "file1.log", "file2.log" -Value (Get-Date) -PassThru

#'This command adds "END" to all text files in the current directory, except for those with file names that begin with "help".
&gt; Add-Content -Path "*.txt" -Exclude "help*" -Value "END"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_OutPut</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Out-Gridview</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_OutPut</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Out-Gridview</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Graphical display, sortable

'This opens the graphical window
Get-Service | Out-GridView

'This returns the user selected object output to the pipeline, when the user selects the row and clicks [ok]
Get-Service | where status -eq 'running' | Out-GridView -PassThru
===================================================================================================
&gt;Get-Service | where status -eq 'running' | 
	Out-GridView -Title "Select services to restart" -PassThru |
	foreach { 
	Write-Host "Restarting $($_.DisplayName)" -ForegroundColor green
	$_ | Restart-Service -PassThru -Force
	}
'This will let you multi-select (using the Control key) services in the Grid-View pop-up window, 
'	and then when your selection returns to the pipeline it will RESTART each selected service and show colored results to the screen		
===================================================================================================

#' use Grid-view to select what gets stored into a variable:
$logs = Get-Eventlog -list | Select LogDisplayName | Out-Gridview -Title "Select one or more logs" -OutputMode Multiple

'OR let the user select what goes into three variables:
&gt;$logs = Get-Eventlog -list | Select LogDisplayName | Out-Gridview -Title "Select one or more logs" -OutputMode Multiple
&gt;$count = 1,10,25,50 | Out-GridView -Title "How many entries?" -OutputMode Single
&gt;$printer = Get-Printer | Select Name | Out-GridView -Title "Select a printer" -OutputMode Single

'Then use that User created selection: for the eventlogs that were chosen, and the count of records to return, send output to chosen printer
$logs | foreach {
					$_.LogDisplayName
					Get-Eventlog -LogName $_.LogDisplayName -Newest $count -EntryType Error |
					Select TimeGenerated,Source,Message | Format-List | 
					Out-Printer $printer.Name
				}
===================================================================================================				</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Parameters</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>simple examples</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Parameters</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>simple examples</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
------------------------------------------------------------------------------------------
#'ScriptWithParameter.ps1
#'get a breakdown of error sources in the System eventlog
#'NOTE: the DEFAULT values are given
Param(
    [string]$Log = "System",
    [string]$Computername = $env:COMPUTERNAME,
    [int32]$Newest = 500,
    [string]$ReportTitle = "Event Log Report",
    [Parameter(Mandatory,HelpMessage = "Enter the path for the HTML file.")]
    [string]$Path
)

#'get event log data and group it
$data = Get-Eventlog -logname $Log -EntryType Error -Newest $newest -ComputerName $Computername |
    Group-object -Property Source -NoElement 

#'create an HTML report
$footer = "&lt;h5&gt;&lt;i&gt;report run $(Get-Date)&lt;/i&gt;&lt;/h5&gt;"
$css = "http://jdhitsolutions.com/sample.css"
$precontent = "&lt;H1&gt;$Computername&lt;/H1&gt;&lt;H2&gt;Last $newest error sources from $Log&lt;/H2&gt;"

$data |Sort-Object -Property Count, Name -Descending |
    Select-Object Count, Name | 
    ConvertTo-Html -Title $ReportTitle -PreContent $precontent  -PostContent $footer -CssUri $css |
    Out-File $Path
-------------------------------------------------------------------------------------------





===================================================================

Param
(
    [parameter()]
    $ParameterName
)
-------------------------

'It is mandatory (required).
'It takes input from the pipeline.
'It takes an array of strings as input.
Param
(
    [parameter(Mandatory=$true,
    		   ValueFromPipeline=$true)]
    [String[]]
    $ComputerName
)

---------------------'Position

Param
(
    [parameter(Position=0)]
    [String[]]
    $ComputerName
)

-------------------'Parameter Set Name
'example 1
Param
(
    [parameter(Mandatory=$true,
    ParameterSetName="Computer")]
    [String[]]
    $ComputerName,

    [parameter(Mandatory=$true,
    ParameterSetName="User")]
    [String[]]
    $UserName,

    [parameter(Mandatory=$false)]
    [Switch]
    $Summary
)

'example 2
Param
(
    [parameter(Mandatory=$true,
    ParameterSetName="Computer")]
    [String[]]
    $ComputerName,

    [parameter(Mandatory=$true,
    ParameterSetName="User")]
    [String[]]
    $UserName,

    [parameter(Mandatory=$false, ParameterSetName="Computer")]
    [parameter(Mandatory=$true, ParameterSetName="User")]
    [Switch]
    $Summary
)

-------------------'ValueFromPipeline Argument
'declares a ComputerName parameter that is mandatory 
'	and accepts an object that is passed to the function from the pipeline.
Param
(
    [parameter(Mandatory=$true,
    ValueFromPipeline=$true)]
    [String[]]
    $ComputerName
)
-------------------'ValueFromPipelineByPropertyName Argument
'the parameter accepts input from a property of a pipeline object. 
'The object property must have the same name or alias as the parameter.
Param
(
    [parameter(Mandatory=$true,
    ValueFromPipelineByPropertyName=$true)]
    [String[]]
    $ComputerName
)

----------------'HelpMessage Argument
'a brief description of the parameter or its value. 
'Windows PowerShell displays this message in the prompt 
'	that appears when a mandatory parameter value is missing from a command. 

Param
(
    [parameter(mandatory=$true,
    HelpMessage="Enter one or more computer names separated by commas.")]
    [String[]]
    $ComputerName
)
----------------'Alias Attribute
' There is no limit to the number of aliases that you can assign to a parameter.
Param
(
    [parameter(Mandatory=$true)]
    [alias("CN","MachineName")]
    [String[]]
    $ComputerName
)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Parameters</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Switch_Parameter</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Parameters</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Switch_Parameter</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Switch parameters are parameters with no parameter value
-----------------------------------------------------------------------
'Switch parameters, in their general usage, are $false if you don't specify them on the command line, 
'	and are $true if you do specify them on the command line. 
'They don't take any arguments (again, in the general usage case):

function MyFunction([switch] $MySwitch) { }

MyFunction #' $MySwitch is $false

MyFunction -MySwitch #' $MySwitch is $true


-----------------------------------------------------------------------
'However, sometimes you do need to be able to pass in a specific value for the switch parameter, 
'	either because you're passing it on from one function to another (such as in a proxy function), 
'	or because you need to deliberately set a switch to $false (which is rare, 
'	but you'll sometimes see this with -Confirm:$false . 
'In this case, setting Confirm explicitly to false causes it to override 
'	the behavior of the $ConfirmPreference variable, which would otherwise be used.) 
'When you do need to pass an argument to a switch parameter, 
'	you need place a colon between the parameter and its argument, like so:

Param ([Switch]&lt;ParameterName&gt;)


-----------------------------------------------------------------------
'If you're using splatting with a hashtable, 
'	you can just assign a value of $true or $false to that key of the hashtable, 
'	and PowerShell knows what to do with it:
$params = @{ MySwitch = $true }

MyFunction @params


-----------------------------------------------------------------------

Param
(
    [parameter(Mandatory=$false)]
    [Switch]$&lt;ParameterName&gt;
)

---------------------------------------------------------------------------
Function Do-Something
	{
	param
		(
			[switch]$param1
		)
	}

Do-Something -param1
---------------------------------------------------------------------------
Function Do-Something
{
    [cmdletbinding()] 
     
    Param  
    (                 
         [Parameter(Mandatory=$false,  
         [switch]$Param1,

         [Parameter(Mandatory=$false, 
         [switch]$Param2,

         [Parameter(Mandatory=$false, 
         [switch]$Param3
    )   

	Begin {}
	
	End {}
}
---------------------------------------------------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Processes</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_Processes</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Processes</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_Processes</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_Processes



'Examples
'================
'Stop all instances of the Notepad process:

PS C:\&gt; stop-process -name notepad

'Stop process ID# 6464 and prompt before stopping the process (this will display the process name first):

PS C:\&gt; stop-process -id 6464 -confirm -passthru

'Display processes that were running on the computer, but are now stopped:

PS C:\&gt; get-process | where-object {$_.HasExited}


Start-Process 		'- Start one or more processes, optionally as a specific user.
Get-Process		 	'- Get a list of processes on a machine.
Start-Process 		'- Start one or more processes.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Processes</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Given_List_of_Software_kill_The_Associated_Processes</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Processes</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Given_List_of_Software_kill_The_Associated_Processes</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$softwarelist = 'chrome|firefox|iexplore|opera'
get-process |
    Where-Object {$_.ProcessName -match $softwarelist} |
    stop-process -force
    
    
'NOTE:  $softwarelist isn't an array, it is a string. To make an array, you'd have to split it, e.g. $softwarelist -split '|'    

'You can also pass multiple processes to Get-Process, e.g.

Get-Process -Name 'chrome','firefox','iexplore','opera' | Stop-Process -Force



========================================================================


' First, create an array of strings.

$array =  @("chrome","firefox","iexplore","opera")


'Next, loop through each item in your array, and stop the process.

foreach ($process in $array)
{
    Stop-Process -Name $process
}

===========================================================================
'This kills the user sessions of Eclipse on BCC-EXPLORER3

$process = "pxplus.exe"

Get-WmiObject Win32_Process -Namespace "root\cimv2"  -Filter "name = '$process'"  |  Select CommandLine,ProcessID  | Where-Object {$_.CommandLine -like "*id=T*"} | Foreach-Object {Stop-Process $_.ProcessID -Force} </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Processes</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Kill_first_PID_which_is_running_given_name_to_look_for</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Processes</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Kill_first_PID_which_is_running_given_name_to_look_for</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Get-Process | Where-Object { $_.Name -eq "myprocess" } | Select-Object -First 1 | Stop-Process

'Get-Process gets a list of all of the running processes
'Where-Object filters the list of processes to only those whose "Name" is equal to "myprocess"
'Select-Object the -First 1 selects the first entry from the list
'Stop-Process stops the process passed to it</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting___Sessions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>New-PSSession___for_repeated_interaction_with_remote_Computer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting___Sessions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>New-PSSession___for_repeated_interaction_with_remote_Computer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'New-PSSession___for_repeated_interaction_with_remote_Computer

#create a single session
&gt;$dc02 = New-PSSession -ComputerName chi-dc02 -Credential globomantics\administrator
'It will then challenge you for the password
&gt;$dc02


 'Example 1: Create a session on the local computer
    
    PS C:\&gt;$s = New-PSSession
    
 ' Example 2: Create a session on a remote computer
    
    PS C:\&gt;$Server01 = New-PSSession -ComputerName Server01
    
       
 'Then go into the existing session:
 &gt;Enter-PSSession $Server01 
 
 'when you are finnished, you can "exit", but if the variable is still alive, 
 '	then you can "Enter-PSSession" again</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting__Invoke-Command</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Invoke-Command_inside_a_function__THEN_use_it</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting__Invoke-Command</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Invoke-Command_inside_a_function__THEN_use_it</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This example has a bunch of commands to be run on a remote machine, inside a function whose PARM is the computername
The results are returned to the screen of the local Machine 

============================================================
http://power-shell.com/2015/powershell-scripts/get-curent-firewall-status-utilizing-netsh/

#' USAGE:
&gt;Get-FirewallState -HOSTNAME SERVER01

#' The function:

Function Get-FirewallState
{
	[CmdletBinding()]
	
	Param ([Parameter(Mandatory = $true)][string]$HOSTNAME)
$ErrorActionPreference = "Stop"
Try {
$FirewallBlock = {
				$content = netsh advfirewall show allprofiles
				If ($domprofile = $content | Select-String 'Domain Profile' -Context 2 | Out-String)
				{ $domainpro = ($domprofile.Substring($domprofile.Length - 9)).Trim()}
				Else { $domainpro = $null }
				If ($priprofile = $content | Select-String 'Private Profile' -Context 2 | Out-String)
				{ $privatepro = ($priprofile.Substring($priprofile.Length - 9)).Trim()}
				Else { $privatepro = $null }
				If ($pubprofile = $content | Select-String 'Public Profile' -Context 2 | Out-String)
				{ $publicpro = ($pubprofile.Substring($pubprofile.Length - 9)).Trim()}
				Else { $publicpro = $null }
				
				$FirewallObject = New-Object PSObject
				Add-Member -inputObject $FirewallObject -memberType NoteProperty -name "FirewallDomain" -value $domainpro
				Add-Member -inputObject $FirewallObject -memberType NoteProperty -name "FirewallPrivate" -value $privatepro
				Add-Member -inputObject $FirewallObject -memberType NoteProperty -name "FirewallPublic" -value $publicpro
				$FirewallObject
			}
 
Invoke-Command -computerName $HOSTNAME -command $FirewallBlock | Select-Object FirewallDomain, FirewallPrivate, FirewallPublic
 
}
Catch
		{
       Write-Host  ($_.Exception.Message -split ' For')[0] -ForegroundColor Red
        }
}
============================================================ another example
#'Invoke Remove-UserProfile on a Remote Computer 
$scriptBlock = { 
    function Remove-UserProfile 
    { 
        ... 
    } 
 
    Remove-UserProfile 
} 
 
Invoke-Command -ComputerName "GWS-F20" -ScriptBlock $scriptBlock 
============================================================ Multiple computers 
#'Invoke Remove-UserProfile on Many Remote Computers, Passing in Arguments 
#'This Example Utilizes Windows Workflow Foundation Technology, Available in PowerShell V3 and Above 
$scriptBlock = { 
    function Remove-UserProfile 
    { 
        ... 
    } 
 
    Remove-UserProfile -Exclude $args 
} 
 
$compArray = @() 
Get-Content -Path "\\path\to\computers.txt" | ForEach-Object { $compArray += $_ } 
 
$excludedList = @("labadmin", "desktopuser") 
 
Invoke-Command -ComputerName $compArray -ScriptBlock $scriptBlock -ArgumentList $excludedList -ThrottleLimit 50

==================================================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting__Invoke-Command</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Parameters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting__Invoke-Command</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Parameters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
=======================================================================================================
https://blogs.technet.microsoft.com/ralphkyttle/2015/06/04/powershell-passing-parameters-as-variables-using-remote-management-and-invoke-command/

Param
(
  [string]$remoteserver,
  [string]$eventloginput,
  [string]$numinput
)
$ScriptBlockContent =
{
$eventlog = $args[0]
$num = $args[1]
get-eventlog -logname $eventlog -newest $num
}

Invoke-Command -Computer $remoteserver -ScriptBlock $ScriptBlockContent -ArgumentList $eventloginput, $numinput
#End

=======================================================================================================
https://stackoverflow.com/questions/4225748/how-do-i-pass-named-parameters-with-invoke-command

'PROBLEM:
---------
'I have a script that I can run remotely via Invoke-Command

Invoke-Command -ComputerName (Get-Content C:\Scripts\Servers.txt) `
               -FilePath C:\Scripts\ArchiveEventLogs\ver5\ArchiveEventLogs.ps1
'As long as I use default parameters, it works fine. However, 
'the script has 2 named [switch] parameters (-Debug and -Clear)

'How can I pass the switched parameters via the Invoke-Command? I've tried the -ArgumentList
'	 but I'm getting errors so I must have the syntax wrong or something. Any help is greatly appreciated.

'Answer #1:
---------
'-ArgumentList is based on use with scriptblock commands, like:

Invoke-Command -Cn (gc Servers.txt) {param($Debug=$False, $Clear=$False) C:\Scripts\ArchiveEventLogs\ver5\ArchiveEventLogs.ps1 } -ArgumentList $False,$True

'When you call it with a -File it still passes the parameters like a dumb splatted array. 

a whole lot more in the post. Check it out</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting__Invoke-Command</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PASSWORD_invoke-command without manual entry of password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting__Invoke-Command</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PASSWORD_invoke-command without manual entry of password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://social.technet.microsoft.com/Forums/en-US/406abcc5-883b-425c-8489-002b0f9394d8/invokecommand-without-manual-entry-of-password?forum=winserverpowershell
https://blogs.technet.microsoft.com/robcost/2008/05/01/powershell-tip-storing-and-using-password-credentials/
-------------------------------------------
$Username = 'labuser'
$Password = 'labuser'
$pass = ConvertTo-SecureString -AsPlainText $Password -Force
$Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass

#'$Cred can now be passed as the credential to any command that takes a credential parameter. Hope this helps.
-------------------------------------------

#'Store the password in credential#
 
Read-host -assecurestring | convertfrom-securestring | out-file C:\cred.txt
$password = get-content C:\cred.txt | convertto-securestring
$credential = new-object -typename System.Management.Automation.PSCredential -argumentlist "myusername",$password
 
#'Use invoke-command to execute the operation#
 
Invoke-command –computername &lt;server name&gt; -credential $credential –scriptblock {get-service}
 
Reference:https://blogs.technet.microsoft.com/robcost/2008/05/01/powershell-tip-storing-and-using-password-credentials/

-----------------------------
$cred = Get-Credential</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting__Invoke-Command</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Remoting_Overview</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting__Invoke-Command</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Remoting_Overview</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Remoting_Overview

1-to-1 Remoting
===============

#'returns TRUE if enabled, FALSE if not enabled
[bool](Test-WSMan -ComputerName 'IT-0744' -ErrorAction SilentlyContinue) 

Enter-PSSession
-------------- 
'connects to a remote computer and gives you a commandline
'	prompt on that computer.
'While connected to a remote machine via Enter-PSSession, your prompt changes and
'	displays the name of the remote system in square brackets.
'All of your interactive keyboard input is sent to the
'	remote machine, and all results are marshaled back to you.

&gt;Enter-PSSession -ComputerName SERVER2

'Enter-PSSession is really meant for interactive use by a
'	human being, not for batch use by a script. If you wanted to send a command to a remote
'	computer, from within a script, Invoke-Command is the right way to do it.

1-to-Many Remoting
====================

Invoke-Command temporary session
--------------------------------
'With this technique, you specify one or more computer names and a command (or a
'	semicolon-separated list of commands); PowerShell sends the commands, via Remoting, to
'	the specified computers.
&gt;Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service }
'OR
&gt;Invoke-Command -computername DC01,CLIENT1 -filePath c:\Scripts\Task.ps1


Invoke-Command persistent session
--------------------------------
PS&gt; $Session = New-PSSession -ComputerName CLIENT1
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 }
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test }
'OUTPUT
-------
'1
PS&gt; Remove-PSSession -Session $Session

Sessions
========
'By default, only 10 simultaneous connections to a remote
'	machine are permitted.
#'When you run Enter-PSSession or Invoke-Command and use their -ComputerName
#'parameter, Remoting creates a connection (or session), does whatever you've asked it to,
#'and then closes the connection (in the case of an interactive session created with Enter-
#'PSSession, PowerShell knows you're done when you run Exit-PSSession).
#'There's some
#'overhead involved in that set-up and tear-down, and so PowerShell also offers the option of
#'creating a persistent connection - called a PSSession. 
#'You run New-PSSession to create a
#'new, persistent session. Then, rather than using -ComputerName with Enter-PSSession or
#'Invoke-Command, you use their -Session parameter and pass an existing, open PSSession
#'object. That lets the commands re-use the persistent connection you'd previously created.
#'When you use persistent sessions, on the other hand, re-connections are much faster, and
#'since you are keeping and reusing sessions, they will preserve state.



#'Powershell remoting sends a command, usually using WSMan, from Client to Server
#'	by default uses Port (the port can be modified):
#'							http:  5985
#'							https: 5986
#'							
#'	Server listens on those Ports, then passes the command to an EndPoint
#'		The EndPoint is a plugin, like a connection, in this case it is a Powershell instance
#'		The results are serialized and sent back to the Client
#'		


-------------------------------------------------------------------------------------------------------	
#'		There are several default session configurations	
		&gt;Get-PSSessionConfiguration
		
		'Pop-up response: WinRM service is not started currently. Running this command will start WinRM service.
-------------------------------------------------------------------------------------------------------
'To enable on a local machine, so that it can be the Server (i.e. so that it can recieve commands)
'	Must run elevated
'	Run once per machine

&gt;Enable-PSRemoting
	-'	Runs Set-WSManQuickConfig
	-'	Configures WinRM to AutoStart
	-'	Configures Firewall settings
	-'	Registers session configurations and listeners
	
'OR can use Group Policy	
	
'To disable remoting
&gt;Disable-PSRemoting</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting__Invoke-Command</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>return_value_from_Invoke-Command</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting__Invoke-Command</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>return_value_from_Invoke-Command</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'https://stackoverflow.com/questions/8549184/how-to-capture-the-return-value-of-a-scriptblock-invoked-with-powershells-invok

#' This looks promising

$script = {
    # Call exe and combine all output streams so nothing is missed
    $output = ping badhostname *&gt;&amp;1

    # Save lastexitcode right after call to exe completes
    $exitCode = $LASTEXITCODE

    # Return the output and the exitcode using a hashtable
    New-Object -TypeName PSCustomObject -Property @{Host=$env:computername; Output=$output; ExitCode=$exitCode}
}

# Capture the results from the remote computers
$results = Invoke-Command -ComputerName host1, host2 -ScriptBlock $script

$results | select Host, Output, ExitCode | Format-List

------------------------------------------------------------------------------------------------------

'https://stackoverflow.com/questions/1210942/catching-return-code-of-a-command-with-invoke-command-powershell-2

#'Remote script:

try {
    ... go do stuff ...
} catch {
    return 1
    exit
}
return 2
exit


#'Local script:

function RunRemote {
    param ([string]$remoteIp, [string]$localScriptName)
    $res = Invoke-Command -computername $remoteIp -UseSSL -Credential $mycreds -SessionOption $so -FilePath $localScriptName
    return $res
}

$status = RunRemote $ip_name ".\Scripts\myRemoteScript.ps1"
echo "Return status was $status"

#' $so, -UseSSL and $mycreds aren't needed if you're fully inside a trust group. This seems to work for me... good luck!
--------------------------------------------------------------------------------

'https://social.technet.microsoft.com/Forums/en-US/9a55ea6f-d20a-436a-924d-399d84962574/get-a-return-value-from-invokecommand?forum=winserverpowershell
$Result = Invoke-Command -ComputerName &lt;&lt;Server&gt;&gt; -ScriptBlock {

Import-Module SQLPS -DisableNameChecking

$DBState = Invoke-SQLCmd "Select state_desc from master.sys.databases where name = '&lt;&lt;DBName&gt;&gt;'" -ServerInstance "DMZWG1" -UserName sa -Password &lt;&lt;Password&gt;&gt;

Return $DBState # you shouldn't even need Return
}

$Result


------------------------------------------------------
#'Invoke-Command returns to you what is printed to the end of the pipeline.
#'If you want to return a variable you should Return &lt;variable&gt; like:

$ret = Invoke-Command -ScriptBlock { $var="test string"; return $var; }
#'where $ret contains now the value test string.
------------------------------------------------------ MULTIPLE values

#'When you got multiple variables you want to return, then you can join them into a single variable, e.g. like this:

$str1 = "test"
$str2 = "123"
$combinedObjs = New-Object PSObject -Property @{1 = $str1; 2 = $str2}

#'Now you can combine it all

$ret = Invoke-Command -ScriptBlock { 
  $str1 = "test";
  $str2 = "123";
  $combinedObjs =  @{val1 = $str1; val2 = $str2};
  Return $combinedObjs;
}

#'now $ret contains

Name                           Value
----                           -----
val1                           test
val2                           123

#'and you can access them by calling $ret.val1 or $ret.val2

--------------------------------------------------------------------------------
https://stackoverflow.com/questions/49361404/append-to-a-variable-from-invoke-command

#' Add some output to the very end of given scriptblock, e.g.

    @{  BodyContent = $BodyContent
        ErrorStat   = $ErrorStat
    }
#' If you use e.g.

$result = Invoke-Command -ScriptBlock { 

    ###  original script block body here

    @{  BodyContent = $BodyContent
        ErrorStat   = $ErrorStat
    }
}  -ComputerName $server -Credential $user -ErrorAction Stop

#' then you can check

$result.BodyContent
$result.ErrorStat
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting_CIM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>CIM_ErrorHandling_assumes_you_start_with_WSman_Protocol</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting_CIM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>CIM_ErrorHandling_assumes_you_start_with_WSman_Protocol</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'In this revision, we changed our New-CimSessionOption to use a variable for the protocol.
'We manually set this to “Wsman” to begin with, but in the event of a failure, we switch it to “Dcom.” 
' If it fails again, we set the protocol to “Stop,” which triggers an exit from our Do loop, 
'	and also take the opportunity to log the computer name, if we were asked to do so. 
'Writes error to Log	


function Set-TMServiceLogon {
&lt;#'
.SYNOPSIS
Sets service login name and password.
.DESCRIPTION
This command uses either CIM (default) or WMI to
set the service password, and optionally the logon
user name, for a service, which can be running on
one or more remote machines. You must run this command
as a user who has permission to peform this task,
remotely, on the computers involved.
.PARAMETER ServiceName
The name of the service. Query the Win32_Service class
to verify that you know the correct name.
.PARAMETER ComputerName
One or more computer names. Using IP addresses will
fail with CIM; they will work with WMI. CIM is always
attempted first. 
.PARAMETER NewPassword
A plain-text string of the new password.
.PARAMETER NewUser
Optional; the new logon user name, in DOMAIN\USER
format.
.PARAMETER ErrorLogFilePath
If provided, this is a path and filename of a text
file where failed computer names will be logged.
#'&gt;
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True,
                   ValueFromPipelineByPropertyName=$True)]
        [string]$ServiceName,

        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   ValueFromPipelineByPropertyName=$True)]
        [string[]]$ComputerName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [string]$NewPassword,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [string]$NewUser,

        [string]$ErrorLogFilePath
    )

BEGIN{}

PROCESS{
    ForEach ($computer in $ComputerName) {

        Do {
            Write-Verbose "Connect to $computer on WS-MAN"
            $protocol = "Wsman"

            Try {
                $option = New-CimSessionOption -Protocol $protocol
                $session = New-CimSession -SessionOption $option `
                                          -ComputerName $Computer `
                                          -ErrorAction Stop

                If ($PSBoundParameters.ContainsKey('NewUser')) {
                    $args = @{'StartName'=$NewUser
                              'StartPassword'=$NewPassword}
                } Else {
                    $args = @{'StartPassword'=$NewPassword}
                    Write-Warning "Not setting a new user name"
                }

                Write-Verbose "Setting $servicename on $computer"
                $params = @{'CimSession'=$session
                            'MethodName'='Change'
                            'Query'="SELECT * FROM Win32_Service " +
                                    "WHERE Name = '$ServiceName'"
                            'Arguments'=$args}
                $ret = Invoke-CimMethod @params

                switch ($ret.ReturnValue) {
                    0  { $status = "Success" }
                    22 { $status = "Invalid Account" }
                    Default { $status = "Failed: $($ret.ReturnValue)" }
                }

                $props = @{'ComputerName'=$computer
                           'Status'=$status}
                $obj = New-Object -TypeName PSObject -Property $props
                Write-Output $obj

                Write-Verbose "Closing connection to $computer"
                $session | Remove-CimSession
		$protocol = "Stop"
            } Catch {
                #' change protocol - if we've tried both
                #' and logging was specified, log the computer
                Switch ($protocol) {
                    'Wsman' { $protocol = 'Dcom' }
                    'Dcom'  { 
                        $protocol = 'Stop'

                        if ($PSBoundParameters.ContainsKey('ErrorLogFilePath')) {
                            Write-Warning "$computer failed; logged to $ErrorLogFilePath"
                            $computer | Out-File $ErrorLogFilePath -Append
                        } #' if logging
                     }            
                } #'switch

            } #' try/catch
        } Until ($protocol -eq 'Stop')
    } #'foreach
} #'PROCESS

END{} 

} #'function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting_CIM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_GetResultsFromContactingAComputer_showAsStatus</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting_CIM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_GetResultsFromContactingAComputer_showAsStatus</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Example_GetResultsFromContactingAComputer_showAsStatus

'it outputs an object for each computer it operates against. 
'	The output should include the computer name and a status 




===========================================================
function Set-TMServiceLogon {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True,                              #' &lt;=== Mandatory
                   ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string]$ServiceName,

        [Parameter(Mandatory=$True,                              #' &lt;=== Mandatory
                   ValueFromPipeline=$True,                      #' &lt;=== can accept pipeline input ByValue  (only one parm is allowed to do so?)
                   ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string[]]$ComputerName,

        [Parameter(Mandatory=$True,                              #' &lt;=== Mandatory
                   ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string]$NewPassword,

        [Parameter(ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string]$NewUser,

        [string]$ErrorLogFilePath
    )

BEGIN{}

PROCESS{
    ForEach ($computer in $ComputerName) {

        $option = New-CimSessionOption -Protocol Wsman
        $session = New-CimSession -SessionOption $option `
                                  -ComputerName $Computer

        If ($PSBoundParameters.ContainsKey('NewUser')) {           
            $args = @{'StartName'=$NewUser
                      'StartPassword'=$NewPassword}
        } Else {
            $args = @{'StartPassword'=$NewPassword}
        }

        $params = @{'CimSession'=$session                        #' Put the Parms into a HashTable
                    'MethodName'='Change'
                    'Query'="SELECT * FROM Win32_Service WHERE Name = '$ServiceName'"
                    'Arguments'=$args}
        $ret = Invoke-CimMethod @params                          #' Splat the HashTable as input to 'Invoke-CimMethod'
       
        #' Change Method (Win32_Service) status Codes: https://msdn.microsoft.com/en-us/library/aa384901.aspx
        
        switch ($ret.ReturnValue) {                              #' Get the Return Value
            0  { $status = "Success" }      
            22 { $status = "Invalid Account" }
            Default { $status = "Failed: $($ret.ReturnValue)" }
        }

        $props = @{'ComputerName'=$computer                      #' Build the output variable, with the Return Value and the Computer Name
                   'Status'=$status}
        $obj = New-Object -TypeName PSObject -Property $props    #' Package the output variable into a new object
        Write-Output $obj                                        #' Write the object to the screen

        $session | Remove-CimSession

    } #foreach
} #PROCESS

END{} 

} #function
===========================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get-UserSession</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get-UserSession</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#'FROM: https://gallery.technet.microsoft.com/scriptcenter/Get-UserSessions-Parse-b4c97837

#' To uset it:
#' &gt; Get-UserSession -ComputerName BCC-EXPLORER3


function Get-UserSession {
&lt;#  
.SYNOPSIS  
    Retrieves all user sessions from local or remote computers(s)

.DESCRIPTION
    Retrieves all user sessions from local or remote computer(s).
    
    Note:   Requires query.exe in order to run
    Note:   This works against Windows Vista and later systems provided the following registry value is in place
            HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\AllowRemoteRPC = 1
    Note:   If query.exe takes longer than 15 seconds to return, an error is thrown and the next computername is processed.  Suppress this with -erroraction silentlycontinue
    Note:   If $sessions is empty, we return a warning saying no users.  Suppress this with -warningaction silentlycontinue

.PARAMETER computername
    Name of computer(s) to run session query against
              
.parameter parseIdleTime
    Parse idle time into a timespan object

.parameter timeout
    Seconds to wait before ending query.exe process.  Helpful in situations where query.exe hangs due to the state of the remote system.
                    
.FUNCTIONALITY
    Computers

.EXAMPLE
    Get-usersession -computername "server1"

    Query all current user sessions on 'server1'

.EXAMPLE
    Get-UserSession -computername $servers -parseIdleTime | ?{$_.idletime -gt [timespan]"1:00"} | ft -AutoSize

    Query all servers in the array $servers, parse idle time, check for idle time greater than 1 hour.

.NOTES
    Thanks to Boe Prox for the ideas - http://learn-powershell.net/2010/11/01/quick-hit-find-currently-logged-on-users/

.LINK
    http://gallery.technet.microsoft.com/Get-UserSessions-Parse-b4c97837

#&gt; 
    [cmdletbinding()]
    Param(
        [Parameter(
            Position = 0,
            ValueFromPipeline = $True)]
        [string[]]$ComputerName = "localhost",

        [switch]$ParseIdleTime,

        [validaterange(0,120)]
        [int]$Timeout = 15
    )             
    Process
    {
        ForEach($computer in $ComputerName)
        {
        
            #start query.exe using .net and cmd /c.  We do this to avoid cases where query.exe hangs

                #build temp file to store results.  Loop until we see the file
                    Try
                    {
                        $Started = Get-Date
                        $tempFile = [System.IO.Path]::GetTempFileName()
                        
                        Do{
                            start-sleep -Milliseconds 300
                            
                            if( ((Get-Date) - $Started).totalseconds -gt 10)
                            {
                                Throw "Timed out waiting for temp file '$TempFile'"
                            }
                        }
                        Until(Test-Path -Path $tempfile)
                    }
                    Catch
                    {
                        Write-Error "Error for '$Computer': $_"
                        Continue
                    }

                #Record date.  Start process to run query in cmd.  I use starttime independently of process starttime due to a few issues we ran into
                    $Started = Get-Date
                    $p = Start-Process -FilePath C:\windows\system32\cmd.exe -ArgumentList "/c query user /server:$computer &gt; $tempfile" -WindowStyle hidden -passthru

                #we can't read in info or else it will freeze.  We cant run waitforexit until we read the standard output, or we run into issues...
                #handle timeouts on our own by watching hasexited
                    $stopprocessing = $false
                    do
                    {
                    
                        #check if process has exited
                            $hasExited = $p.HasExited
                
                        #check if there is still a record of the process
                            Try
                            {
                                $proc = Get-Process -id $p.id -ErrorAction stop
                            }
                            Catch
                            {
                                $proc = $null
                            }

                        #sleep a bit
                            start-sleep -seconds .5

                        #If we timed out and the process has not exited, kill the process
                            if( ( (Get-Date) - $Started ).totalseconds -gt $timeout -and -not $hasExited -and $proc)
                            {
                                $p.kill()
                                $stopprocessing = $true
                                Remove-Item $tempfile -force
                                Write-Error "$computer`: Query.exe took longer than $timeout seconds to execute"
                            }
                    }
                    until($hasexited -or $stopProcessing -or -not $proc)
                    
                    if($stopprocessing)
                    {
                        Continue
                    }

                    #if we are still processing, read the output!
                        try
                        {
                            $sessions = Get-Content $tempfile -ErrorAction stop
                            Remove-Item $tempfile -force
                        }
                        catch
                        {
                            Write-Error "Could not process results for '$computer' in '$tempfile': $_"
                            continue
                        }
        
            #handle no results
            if($sessions){

                1..($sessions.count - 1) | Foreach-Object {
            
                    #Start to build the custom object
                    $temp = "" | Select ComputerName, Username, SessionName, Id, State, IdleTime, LogonTime
                    $temp.ComputerName = $computer

                    #The output of query.exe is dynamic. 
                    #strings should be 82 chars by default, but could reach higher depending on idle time.
                    #we use arrays to handle the latter.

                    if($sessions[$_].length -gt 5){
                        
                        #if the length is normal, parse substrings
                        if($sessions[$_].length -le 82){
                           
                            $temp.Username = $sessions[$_].Substring(1,22).trim()
                            $temp.SessionName = $sessions[$_].Substring(23,19).trim()
                            $temp.Id = $sessions[$_].Substring(42,4).trim()
                            $temp.State = $sessions[$_].Substring(46,8).trim()
                            $temp.IdleTime = $sessions[$_].Substring(54,11).trim()
                            $logonTimeLength = $sessions[$_].length - 65
                            try{
                                $temp.LogonTime = Get-Date $sessions[$_].Substring(65,$logonTimeLength).trim() -ErrorAction stop
                            }
                            catch{
                                #Cleaning up code, investigate reason behind this.  Long way of saying $null....
                                $temp.LogonTime = $sessions[$_].Substring(65,$logonTimeLength).trim() | Out-Null
                            }

                        }
                        
                        #Otherwise, create array and parse
                        else{                                       
                            $array = $sessions[$_] -replace "\s+", " " -split " "
                            $temp.Username = $array[1]
                
                            #in some cases the array will be missing the session name.  array indices change
                            if($array.count -lt 9){
                                $temp.SessionName = ""
                                $temp.Id = $array[2]
                                $temp.State = $array[3]
                                $temp.IdleTime = $array[4]
                                try
                                {
                                    $temp.LogonTime = Get-Date $($array[5] + " " + $array[6] + " " + $array[7]) -ErrorAction stop
                                }
                                catch
                                {
                                    $temp.LogonTime = ($array[5] + " " + $array[6] + " " + $array[7]).trim()
                                }
                            }
                            else{
                                $temp.SessionName = $array[2]
                                $temp.Id = $array[3]
                                $temp.State = $array[4]
                                $temp.IdleTime = $array[5]
                                try
                                {
                                    $temp.LogonTime = Get-Date $($array[6] + " " + $array[7] + " " + $array[8]) -ErrorAction stop
                                }
                                catch
                                {
                                    $temp.LogonTime = ($array[6] + " " + $array[7] + " " + $array[8]).trim()
                                }
                            }
                        }

                        #if specified, parse idle time to timespan
                        if($parseIdleTime){
                            $string = $temp.idletime
                
                            #quick function to handle minutes or hours:minutes
                            function Convert-ShortIdle {
                                param($string)
                                if($string -match "\:"){
                                    [timespan]$string
                                }
                                else{
                                    New-TimeSpan -Minutes $string
                                }
                            }
                
                            #to the left of + is days
                            if($string -match "\+"){
                                $days = New-TimeSpan -days ($string -split "\+")[0]
                                $hourMin = Convert-ShortIdle ($string -split "\+")[1]
                                $temp.idletime = $days + $hourMin
                            }
                            #. means less than a minute
                            elseif($string -like "." -or $string -like "none"){
                                $temp.idletime = [timespan]"0:00"
                            }
                            #hours and minutes
                            else{
                                $temp.idletime = Convert-ShortIdle $string
                            }
                        }
                
                        #Output the result
                        $temp
                    }
                }
            }            
            else
            {
                Write-Warning "'$computer': No sessions found"
            }
        }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>How_To_from_PluralSight</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>How_To_from_PluralSight</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;#'-----------------------------------------------------------------------------
  Beginning PowerShell Scripting for Developers
  Simple script that will just 'Do Something'

  Author: Robert C. Cain | @ArcaneCode | arcanecode@gmail.com
          http://arcanecode.com
 
  This module is Copyright (c) 2015 Robert C. Cain. All rights reserved.
  The code herein is for demonstration purposes. No warranty or guarentee
  is implied or expressly granted. 
  This module may not be reproduced in whole or in part without the express
  written consent of the author. 
-----------------------------------------------------------------------------#&gt;


#'-----------------------------------------------------------------------------#'
#' A few definitions, the "remote" computer is the machine you want to remote
#' control from PowerShell. The "local" computer is the one you are using,
#' i.e. running PowerShell on. 
#'-----------------------------------------------------------------------------#'

#' First, you will need to enable remoting on the computer you want to control
#' ON the REMOTE COMPUTER, enter the command below. (-Force will run without
#' prompts)

Enable-PSRemoting -Force

#' If you are NOT running on a domain, for example doing this on a home
#' network, you will need to do a few other things. 
#' On both the remote computer and the local computer, run:
#' This tells it to trust ALL hosts (!!!!)

Set-Item wsman:\localhost\client\trustedhosts *

#' Instead of an *, you could specify the IP Addresses of the machines. 

#' You will then need to restart the Windows Remote Management service
#' on both computers.
Restart-Service WinRM

#' On the LOCAL computer you are using, you can test by using Test-WSMan
#' followed by the name of the remote computer. 
#' wsman
Test-WSMan ACSrv

#' Now execute a command on the remote system
#' The Script block could be stored in a variable
Invoke-Command -ComputerName BCC-EXPLORER3DB `
               -ScriptBlock { Get-ChildItem C:\ } `
               -Credential glenng
#' It immediately challenges me for my password, then it runs successfully


#' You can also open up a PowerShell window which will execute
#' on the remote computer
Enter-PSSession -ComputerName BCC-EXPLORER3 -Credential glenng

#' Now the console screen shows that it is actually on the remote server:
#' [BCC-EXPLORER3]: PS C:\Users\glenng\Documents&gt; 

#' To exit the remote server in the console window:
exit   'OR &gt; Exit-PSSession

#' In the PowerShell ISE there is an icon in the menu bar to launch a remote session
#' It will ask for the computer and my UserID, then challenge me for the password.
#' When it succeeds it will open a new tab in the ISE that is on the remote computer


#'-----------------------------------------------------------------------------#'
#' Fix for network connection profile public {this was not a problem for me at BCC}
#'-----------------------------------------------------------------------------#'
Get-NetConnectionProfile           #' I think this is not available in Windows 7

#' Temporarily Set to Private
Set-NetConnectionProfile `
  -InterfaceAlias 'vEthernet (HWired)' `
  -NetworkCategory Private

Set-NetConnectionProfile `
  -InterfaceAlias 'vEthernet (Internal Ethernet Port Windows Phone Emulator Internal Switch)' `
  -NetworkCategory Private


#' Put them back
Set-NetConnectionProfile `
  -InterfaceAlias 'vEthernet (HWired)' `
  -NetworkCategory Public

Set-NetConnectionProfile `
  -InterfaceAlias 'vEthernet (Internal Ethernet Port Windows Phone Emulator Internal Switch)' `
  -NetworkCategory Public
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSExec_PSRemoting__on_remote_computer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSExec_PSRemoting__on_remote_computer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>==========================================================================Powershell

psexec \\[computer name] -u [admin account name] -p [admin account password] -h -d powershell.exe "enable-psremoting -force"


psexec \\lt-1069 -u Administrator -p JPHSA@Work -h -d powershell.exe "enable-psremoting -force"


==========================================================================CMD
https://ss64.com/nt/psexec.html

'Internal commands (such as COPY, CD, DIR etc) are only available within the CMD shell. 
'To run these commands from PsExec you must call CMD /C and then pass the commands as parameters 
' see the examples below. 
 -s    =     Run remote process in the SYSTEM account (use with caution).

'Connect to workstation64 and list a directory:
------------------------------------------------
PSEXEC \\workstation64 -s cmd /c dir c:\work</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSEXEC</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSEXEC</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Parameter	Description
-a	Separate processors on which the application can run with commas where 1 is the lowest numbered CPU. For example, to run the application on CPU 2 and CPU 4, enter: "-a 2,4"
-c	Copy the specified executable to the remote system for execution. If you omit this option the application must be in the system path on the remote system.
-d	Don't wait for process to terminate (non-interactive).
-e	Does not load the specified account’s profile.
-f	Copy the specified program even if the file already exists on the remote system.
-i	Run the program so that it interacts with the desktop of the specified session on the remote system. If no session is specified the process runs in the console session.
-h	If the target system is Vista or higher, has the process run with the account's elevated token, if available.
-l	Run process as limited user (strips the Administrators group and allows only privileges assigned to the Users group). On Windows Vista the process runs with Low Integrity.
-n	Specifies timeout in seconds connecting to remote computers.
-p	Specifies optional password for user name. If you omit this you will be prompted to enter a hidden password.
-r	Specifies the name of the remote service to create or interact with.
-s	Run the remote process in the System account.
-u	Specifies optional user name for login to remote computer.
-v	Copy the specified file only if it has a higher version number or is newer on than the one on the remote system.
-w	Set the working directory of the process (relative to remote computer).
-x	Display the UI on the Winlogon secure desktop (local system only).
-priority	Specifies -low, -belownormal, -abovenormal, -high or -realtime to run the process at a different priority. Use -background to run at low memory and I/O priority on Vista.
computer	Direct PsExec to run the application on the remote computer or computers specified. If you omit the computer name, PsExec runs the application on the local system, and if you specify a wildcard (\\*), PsExec runs the command on all computers in the current domain.
@file	PsExec will execute the command on each of the computers listed in the file.
cmd	Name of application to execute.
arguments	Arguments to pass (note that file paths must be absolute paths on the target system).
-accepteula	This flag suppresses the display of the li
	
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSPASSWD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSPASSWD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Usage for local accounts:
  pspasswd [\\[computer[,computer,[,...]]|@file] [-u Username [-p Password]]] &lt;Account&gt; [NewPassword]
Usage for domain accounts:
  pspasswd &lt;Domain\Account&gt; [NewPassword]

     computer    Computer or computers on which the local account exists. If
                 you omit the computer name, the local computer is assumed.
                 If you specify a wildcard (\\*), PsPasswd runs the
                 command on all computers in the current domain or workgroup.
     @file       PsPasswd will change the password on the computers listed
                 in the file.
     -u          Specifies optional user name for login to remote computer.
     -p          Specifies optional password for user name. If you omit this
                 you will be prompted to enter a hidden password.
     -nobanner   Do not display the startup banner and copyright message.
     Domain      Specifies name of the domain of the target account.
     Account     Specifies name of the account for password change.
     NewPassword New password. If omitted a NULL password is applied.


'For a single computer:
pspasswd \\computer_name Local_administrator_account_name “New_Password” 

'For multiple computers:
pspasswd \\computer1_name,computer2_name,computer3_name Local_administrator_account_name “New_Password” 

'For all computers in the environment:
pspasswd \\* Local_administrator_account_name “New_Password” 

'For multiple computers using a text file containing the computer names:
pspasswd \\@file.txt Local_administrator_account_name “New_Password”

'Just to clarify the Sysinternal Tools attempt to use your current user profiles credentials 
'	to authenticate against the other Machines / Domain. 
'	If you are running as an admin you are fine.

'If however you are using a limited account when you open the tool 
'	you will need to specify a username and a password using the "-u" and "-p" switches. 
'	Using these DOES transmit your username and password in plain text.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Remoting_Overview</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Remoting_Overview</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1-to-1 Remoting
===============

#'returns TRUE if enabled, FALSE if not enabled
[bool](Test-WSMan -ComputerName 'IT-0744' -ErrorAction SilentlyContinue) 

Enter-PSSession
-------------- 
'connects to a remote computer and gives you a commandline
'	prompt on that computer.
'While connected to a remote machine via Enter-PSSession, your prompt changes and
'	displays the name of the remote system in square brackets.
'All of your interactive keyboard input is sent to the
'	remote machine, and all results are marshaled back to you.

&gt;Enter-PSSession -ComputerName SERVER2

'Enter-PSSession is really meant for interactive use by a
'	human being, not for batch use by a script. If you wanted to send a command to a remote
'	computer, from within a script, Invoke-Command is the right way to do it.

1-to-Many Remoting
====================

Invoke-Command temporary session
--------------------------------
'With this technique, you specify one or more computer names and a command (or a
'	semicolon-separated list of commands); PowerShell sends the commands, via Remoting, to
'	the specified computers.
&gt;Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service }
'OR
&gt;Invoke-Command -computername DC01,CLIENT1 -filePath c:\Scripts\Task.ps1


Invoke-Command persistent session
--------------------------------
PS&gt; $Session = New-PSSession -ComputerName CLIENT1
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 }
PS&gt; Invoke-Command -Session $Session -scriptBlock { $test }
'OUTPUT
-------
'1
PS&gt; Remove-PSSession -Session $Session

Sessions
========
'By default, only 10 simultaneous connections to a remote
'	machine are permitted.
#'When you run Enter-PSSession or Invoke-Command and use their -ComputerName
#'parameter, Remoting creates a connection (or session), does whatever you've asked it to,
#'and then closes the connection (in the case of an interactive session created with Enter-
#'PSSession, PowerShell knows you're done when you run Exit-PSSession).
#'There's some
#'overhead involved in that set-up and tear-down, and so PowerShell also offers the option of
#'creating a persistent connection - called a PSSession. 
#'You run New-PSSession to create a
#'new, persistent session. Then, rather than using -ComputerName with Enter-PSSession or
#'Invoke-Command, you use their -Session parameter and pass an existing, open PSSession
#'object. That lets the commands re-use the persistent connection you'd previously created.
#'When you use persistent sessions, on the other hand, re-connections are much faster, and
#'since you are keeping and reusing sessions, they will preserve state.



#'Powershell remoting sends a command, usually using WSMan, from Client to Server
#'	by default uses Port (the port can be modified):
#'							http:  5985
#'							https: 5986
#'							
#'	Server listens on those Ports, then passes the command to an EndPoint
#'		The EndPoint is a plugin, like a connection, in this case it is a Powershell instance
#'		The results are serialized and sent back to the Client
#'		


-------------------------------------------------------------------------------------------------------	
#'		There are several default session configurations	
		&gt;Get-PSSessionConfiguration
		
		'Pop-up response: WinRM service is not started currently. Running this command will start WinRM service.
-------------------------------------------------------------------------------------------------------
'To enable on a local machine, so that it can be the Server (i.e. so that it can recieve commands)
'	Must run elevated
'	Run once per machine

&gt;Enable-PSRemoting
	-'	Runs Set-WSManQuickConfig
	-'	Configures WinRM to AutoStart
	-'	Configures Firewall settings
	-'	Registers session configurations and listeners
	
'OR can use Group Policy	
	
'To disable remoting
&gt;Disable-PSRemoting</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WORKGROUP_machines</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WORKGROUP_machines</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://blogs.msdn.microsoft.com/wmi/2009/07/24/powershell-remoting-between-two-workgroup-machines/

The computer you’re sitting in front of is called the client machine, 
	while the computer you’re trying to remotely access is called the server machine.
	
First, configure the SERVER machine to allow access. 
---------------------------------------------------	
&gt;Enable-PSRemoting –force

If one of the network cards on your computer has the network connection type set to “Public” 
	then the required port won’t be opened in your firewall settings.
	
If you’d rather not change your network connection type, 
	you’ll have to manually configure your firewall to allow traffic through.	
	
Make sure that the password for your Administrator account is not empty!  
	If it is, you won’t be able to log in remotely.
	
Now you’ll need to configure your CLIENT machine. 
------------------------------------------------

 enable WinRM local access so that you can modify the proper settings. 
 To do this, start the WinRM service and enable the local account token filter policy 
 
 Both of the next 2 steps are unnecessary if 
 	you’ve already run the Enable-PSRemoting cmdlet on your client machine.
 
 &gt;Start-Service WinRM
 &gt;Set-ItemProperty –Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System –Name  LocalAccountTokenFilterPolicy –Value 1 –Type DWord
 
 next (on the SERVER)
 --------
 Now that WinRM local access is enabled, 
 	you’ll need to add the name of your server machine to the TrustedHosts setting in the WinRM configuration, 
 	which enables your client machine to connect to your server machine 
 	using an authentication mechanism that does not authenticate the server (like Kerberos does):

&gt;Set-Item WSMan:\localhost\Client\TrustedHosts –Value &lt;ServerMachineName&gt; -Force

This command replaces any previous value that was stored in TrustedHosts!  
	If there is an existing list of servers and you don’t want to remove then, 
	use the –Concatenate parameter:
	
&gt;Set-Item WSMan:\localhost\Client\TrustedHosts –Value &lt;ServerMachineName&gt; -Force -Concatenate

If you want to use your server machine’s IP address instead of its name, 
	you must specify explicit credentials when you connect.
	
------------------------------------------------
'From client (HOMETOWER) to server (HOME-LAPTOP)	
&gt;Test-WSMan home-laptop	
'OUTPUT
--------
#'wsmid           : http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd
#'ProtocolVersion : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd
#'ProductVendor   : Microsoft Corporation
#'ProductVersion  : OS: 0.0.0 SP: 0.0 Stack: 3.0#'
#'	

'INVOKE-COMMAND works	
&gt;Invoke-Command -ComputerName home-laptop -ScriptBlock { Get-ChildItem C:\ } -credential glenn
'OUTPUT
--------
#'
#'    Directory: C:\
#'
#'
#'Mode                LastWriteTime         Length Name                                                         PSComputerName                                             
#'----                -------------         ------ ----                                                         --------------                                             
#'d-----       12/18/2016   3:20 PM                DATA                                                         home-laptop                                                
#'d-----       12/18/2016   7:58 AM                Downloads                                                    home-laptop                                                
#'d-----        4/12/2016   1:36 AM                eSupport                                                     home-laptop                                                
#'d-----        7/16/2016   6:47 AM                PerfLogs                                                     home-laptop                                                
#'d-r---        8/29/2017   9:21 AM                Program Files                                                home-laptop                                                
#'d-r---        5/13/2017   4:48 PM                Program Files (x86)                                          home-laptop                                                
#'d-r---       12/18/2016   1:13 PM                Users                                                        home-laptop                                                
#'d-----        8/29/2017   5:50 PM                Windows                                                      home-laptop                                                
#'d-----        3/31/2017   5:49 AM                Windows.old                                                  home-laptop   
	
'BUT 'Get-CimInstance' fails from the client
&gt;Get-CimInstance –ClassName Win32_ComputerSystem –Computer HOME-LAPTOP -Verbose	
' Access is denied.	

'I can enter a session on the client (i.e. HOMETOWER) to the server:
&gt;Enter-PSSession -ComputerName home-laptop -Credential glenn
'Now we are actually on the server
'Then create an option variable
[home-laptop]: &gt; $CimOption = New-CimSessionOption -Protocol Dcom
'Then enter a CIM Session locally on the Server:
[home-laptop]: PS C:\Users\glenn\Documents&gt; $CimSession = New-CimSession  -SessionOption $CimOption
'and we can confirm we are on the Server:
&gt;Get-ChildItem C:\
'it returns the contents of the Server's C Drive
	
------------------------------------------------	
To check if the WinRM service is running:
               &gt;Get-Service WinRM

To check the version of WinRM that’s installed:
               &gt;Test-WSMan –Auth default

To check the remoting configuration for PowerShell:
               &gt;Get-PSSessionConfiguration

To verify that local WinRM access is working:
               &gt;New-PSSession

To check if the local account token filter policy is enabled (on Windows Vista and Windows Server 2008):
                &gt;Get-ItemProperty –Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System –Name LocalAccountTokenFilterPolicy*

To check if the network access policy “Sharing and security model for local accounts” is set to Classic (on Windows XP):
                Get-ItemProperty –Path HKLM:\System\CurrentControlSet\Control\Lsa –Name ForceGuest*

To check the WinRM listener settings:
               &gt;winrm enumerate winrm/config/listener

For additional help and troubleshooting steps:
                Get-Help about_remote_troubleshooting</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_RestorePoint</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_RestorePoint</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_RestorePoint</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_RestorePoint</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_RestorePoint

'As far as I know a restorepoint is a copy of the registry at a specific date and time. 
'Restoring it will set things back to those settings.


'The other critical point to know when using Checkpoint-Computer cmdlet 
'	is that you can only create a restore point with this cmdlet once every 24 hours. 

'The first thing you might need to do is enable system restore:

&gt; Enable-ComputerRestore -drive "c:\"

'To view existing restore points, use the Get-ComputerRestorePoint cmdlet:

&gt; Get-ComputerRestorePoint | Out-GridView

create one using the Checkpoint-Computer cmdlet:

&gt; Checkpoint-Computer -description "My first checkpoint" -restorepointtype "Modify_Settings"

&gt;Get-ComputerRestorePoint | format-list

'To restore:
&gt; Restore-Computer -RestorePoint 59  '( do the restore, which will automatically reboot the computer:)


APPLICATION_INSTALL  (The default restore point type is APPLICATION_INSTALL)
An application has been installed.

APPLICATION_UNINSTALL
An application has been uninstalled.

DEVICE_DRIVER_INSTALL
A device driver has been installed.

MODIFY_SETTINGS
An application has had features added or removed.

CANCELLED_OPERATION
An application needs to delete the restore point it created. For example, an application would use this flag when a user cancels an installation.



What exactly does System Restore restore and not restore?
==========================================================
Restored:

Registry (note: some current values will persist)
Profiles (local only—roaming user profiles not impacted by restore)
COM+ DB
WFP.dll cache
WMI DB
IIS Metabase
Files with extensions listed in the Monitored File Extensions list
Not Restored:

DRM settings
SAM hives (does not restore passwords)
WPA settings (Windows authentication information is not restored)
Contents of the My Documents folder(s)
Specific directories/files listed in the Monitored File Extensions list
Any file with an extension not listed in the Monitored File Extensions list
Items listed in both Filesnottobackup and KeysnottoRestore (HKLM-&gt;System-&gt;ControlSet001-&gt;Control-&gt;BackupRestore-&gt;Filesnottobackup and keysnottorestore)
User-created data stored in the user profile
Contents of redirected folders</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ScheduledTask</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Task_Scheduler</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ScheduledTask</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Task_Scheduler</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Task Scheduler

http://sharepoint-community.net/profiles/blogs/scheduling-powershell-scripts-and-psconsolefile

'Windows Task Scheduler only allows executable (.exe files) and batch (.bat) files to be run.  
'To run a PowerShell script, you need to call the PowerShell executable. 
'One way to do this is to use the following command;

C:\WINDOWS\system32\windowspowershell\v1.0\powershell.exe -PSConsoleFile “C:\sharepointsnapins.psc1” -NoExit –Command &lt;ps1_file&gt;

'The above must be on a single line and the command can either be a file or a simple command.

'I am also using a custom PowerShell Console file (psc1).  
'You can create one of these by using Export-Console and then add the required SharePoint snap-ins. 
'This makes it simpler than employing various checks in the script to ensure all snap-ins are loaded.


================================================================

EXAMPLE:
' put PowerShell.exe in Program/Script field in Task Properties 
' and use 
 -ExecutionPolicy Bypass -File C:\T\AppPoolActivation.ps1 as argument
 
 
 '	I tried your approach at the beginning to call the .ps1 directly from the task, 
'but it never succeed I think the problem is related to a policy that we can not run PowerShell scripts 

'You can bypass execution policy with from Task Manager too.
===============================================================

'I am trying to get a rather long Powershell script to run as a scheduled task.
'So I have a batch wrapper script which I call using my scheduled task 
'I need a way to kill the Powershell session once my Powershell script has done its thing. 
'I have tried using exit in the last line of my batch file but it doesn't kill the Powershell session.

'Use:
Stop-Process $pid 
'or 
kill $pid 
'at the end of your script. It will kill the power shell instance.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ScheduledTask</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>TaskSchedular_command</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ScheduledTask</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>TaskSchedular_command</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Instead of only using the path to your script in the task scheduler 
'	you should start Powershell with your script in the task scheduler, e.g.

C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -NoLogo -NonInteractive -File "C:\Path\To\Your\PS1File.ps1"

C:\WINDOWS\SysWOW64\WindowsPowerShell\v1.0\powershell.exe
C:\WINDOWS\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -NoLogo -ExecutionPolicy Bypass -NonInteractive -File “C:\DATA\PowerShellScript_LOGS\Kill_All_User_Sessions.ps1”
=========================================================================================================================
'set the execution policy of a specific invocation of PowerShell. This is what I usually do when executing PowerShell through a scheduled task:

powershell.exe -NoProfile -NoLogo -NonInteractive -ExecutionPolicy Bypass -File \\path\to\script.ps1


-NoProfile
'This ensures that you don't rely on anything in the user's PowerShell profile, and avoids the overhead of executing that additional code.

-NoLogo
'This mostly doesn't matter; maybe it does if you're capturing the output of your script. Mostly it makes me feel better.

-NonInteractive
'Ensures that your task won't wait indefinitely if something in your script unexpectedly prompts the user. 
'With this switch, the script will just exit instead; at least you'll have an error code instead of a hanging script.

-ExecutionPolicy Bypass
'You can use Unrestricted here or whichever execution policy you like. 
'This is probably the one you need the most.
=========================================================================================================================
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ScheduledTask</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Using Task Scheduler to automate PowerShell Scripts </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ScheduledTask</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Using Task Scheduler to automate PowerShell Scripts </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://support.software.dell.com/appassure/kb/144451

'EXAMPLE: for AppAssure Core

'1] Open Task Scheduler

	'Open Task Scheduler and Create a new task. Name it and set your security options.

		'GENERAL {Tag}
		--------------
			'Name: TEST_Write_Time_to_File 
			'Location: \
			'Author: BCC\glenng
			'When running the task, use the following user Account: BCC\glenng
			'(x) Run whether user is logged on or not
			'[x] Run with highest privileges
			'Configure for: Windows Server 2012 R2
			 
			 
	'Check "Run with highest privileges" as our scripts need to run as admin.  
	'If you want this script to run without your account signed into the AppAssure Core, 
	'enable the 'Run whether user is logged on or not' radio button.
'2] Set Triggers

	'Click on the Triggers tab and set your schedule or event that will trigger the running of your PowerShell script. 

		'Triggers {Tag}
		--------------
		'[New]
		' One time: xxxxx
	
	
'3] Create your Action

	'Click on the Actions tab and click on New.
	'Action: Start a program
	'Program/script: Powershell.exe
	'You don't need to put a path as it should already be on your system.
	
		'Actions {Tag}
		--------------
		'Action: Start a program
		'Program/script: Powershell.exe
		'Add arguments: C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -NoLogo -NonInteractive -File "C:\DATA\PowerShellScripts\WriteTimeToFile.ps1"
		
		
			
	
'4] Set Argument

	'First you need to set the ExecutionPolicy. You have two options here, you can set the ExecutionPolicy on the machine or you can do it on a per-script basis. 
	'	Read the PowerShell ExecutionPolicy link below as it talks about or you can issue the command:

	Get-Help About_execution_policies

	'To set the execution policy globally, you can issue this command from within PowerShell:

	Set-ExecutionPolicy Unrestricted

	'Or use one of the other settings available depending on your environment. 
	'In the context of this how-to, however, we want to set the execution policy on a per script basis and open up security for us to run the script. 
	'This security policy will only be in effect for the script we are running and not compromise security otherwise.
	'That means we use the following Argument:

	-ExecutionPolicy Bypass -File c:\temp\agent_repl.ps1

'5] Save and Test</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_scriptblock_CLASS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Create_METHOD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_scriptblock_CLASS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Create_METHOD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://blogs.technet.microsoft.com/heyscriptingguy/2013/05/22/variable-substitution-in-a-powershell-script-block/

'The problem with a script block
'If, on the other hand, I want to expand the value of a variable inside a script block, 
'it does not work. This is shown in the code that follows.

PS C:&gt; $a = "This is a string"

PS C:&gt; $a

This is a string

PS C:&gt; $b = {"The value of `$a is $a"}

PS C:&gt; $b

"The value of `$a is $a"

'Solving the problem with variable expansion in a script block
'The solution to expanding a variable inside a script block is to do two things. 
'First create the script block as an expanding string. This is shown here:

PS C:&gt; $a = "This is a string"

PS C:&gt; $a

'This is a string

PS C:&gt; $b = "The value of `$a is $a"

PS C:&gt; $b

'The value of $a is This is a string

'Now, I use the static Create method from the [scriptblock] class. 
'This will create a script block. To do this, 
'I use the [scriptblock] class and then call the Create method while passing the string contained in the $b variable. 
'This is shown here.

PS C:&gt; [scriptblock]::Create($b)

'The value of $a is This is a string

'I can confirm that it is in fact a script block by piping the results to the Get-Member cmdlet as shown here:

PS C:&gt; [scriptblock]::Create($b) | gm

'OUTPUT
--------------
   TypeName: System.Management.Automation.ScriptBlock
   ...
   
'Now, the cool thing about this is that I can also store the script block into another variable. This is shown here:

$sb = [scriptblock]::Create($b)

'After I have stored the script block into the variable, 
'I can also call any of the methods or properties of the script block. For example, here is the AST:

PS C:&gt; $sb.Ast

'OUTPUT
-------------- 

ParamBlock         :

BeginBlock         :

ProcessBlock       :

EndBlock           : The value of $a is This is a string

DynamicParamBlock  :

ScriptRequirements :

Extent             : The value of $a is This is a string

Parent             :</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Select</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Select-Object_to_build_output_from_function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Select</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Select-Object_to_build_output_from_function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>function Set-TMServiceLogon {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True,                              #' &lt;=== Mandatory
                   ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string]$ServiceName,

        [Parameter(Mandatory=$True,                              #' &lt;=== Mandatory
                   ValueFromPipeline=$True,                      #' &lt;=== can accept pipeline input ByValue  (only one parm is allowed to do so?)
                   ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string[]]$ComputerName,

        [Parameter(Mandatory=$True,                              #' &lt;=== Mandatory
                   ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string]$NewPassword,

        [Parameter(ValueFromPipelineByPropertyName=$True)]       #' &lt;=== can accept pipeline input ByPropertyName
        [string]$NewUser,

        [string]$ErrorLogFilePath
    )

BEGIN{}

PROCESS{


    ForEach ($computer in $ComputerName) {

        $option = New-CimSessionOption -Protocol Wsman
        $session = New-CimSession -SessionOption $option `
                                  -ComputerName $Computer

        If ($PSBoundParameters.ContainsKey('NewUser')) {
            $args = @{'StartName'=$NewUser
                      'StartPassword'=$NewPassword}
        } Else {
            $args = @{'StartPassword'=$NewPassword}
        }

        Invoke-CimMethod -ComputerName $computer `
                         -MethodName Change `
                         -Query "SELECT * FROM Win32_Service WHERE Name = '$ServiceName'" `
                         -Arguments $args |
        Select-Object -Property @{n='ComputerName';e={$computer}},         #' This is the output object presented to the user 
                                @{n='Result';e={$_.ReturnValue}}           #' n=name, e=Expression

        $session | Remove-CimSession

    } #foreach


} #PROCESS

END{} 

} #function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Services</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Service_objects__get_the_ones_that_are_STOPPED</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Services</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Service_objects__get_the_ones_that_are_STOPPED</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'1] First get the properties from just one service (e.g. bits)
&gt;get-service bits | select *
'OUTPUT
==============
#'Name                : bits
#'RequiredServices    : {RpcSs}
#'CanPauseAndContinue : False
#'CanShutdown         : False
#'CanStop             : False
#'DisplayName         : Background Intelligent Transfer Service
#'DependentServices   : {}
#'MachineName         : .
#'ServiceName         : bits
#'ServicesDependedOn  : {RpcSs}
#'ServiceHandle       : SafeServiceHandle
#'Status              : Stopped
#'ServiceType         : Win32ShareProcess
#'StartType           : Manual
#'Site                : 
#'Container           : 


&gt;get-service | where status -eq 'stopped'
'OUTPUT
============
#'
#'Status   Name               DisplayName                           
#'------   ----               -----------                           
#'Stopped  AJRouter           AllJoyn Router Service                
#'Stopped  ALG                Application Layer Gateway Service     
#'Stopped  AppIDSvc           Application Identity                  
#'Stopped  AppMgmt            Application Management                
#'Stopped  AppReadiness       App Readiness                         
#'Stopped  AppVClient         Microsoft App-V Client                
#'Stopped  AppXSvc            AppX Deployment Service (AppXSVC)     
#'Stopped  aspnet_state       ASP.NET State Service                 
#'Stopped  AxInstSV           ActiveX Installer (AxInstSV)          
#'Stopped  BDESVC             BitLocker Drive Encryption Service


===========================================================================
#' Get the automatically running services, that are not actually running
&gt;get-service | Where {$_.status -ne 'running' -AND $_.StartType -eq 'Automatic'}

#'This would start those stopped services:
&gt;get-service | Where {$_.status -ne 'running' -AND $_.StartType -eq 'Automatic'} | start-service -PassThru
#' Note: "start-service" would not send an object into the pipeline, so you wouldn't see anything, but "-PassThru" tells it to pass the object to the pipeline
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SQL_Move_Database</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_SQL_Move_Database</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SQL_Move_Database</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_SQL_Move_Database</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_SQL_Move_Database

references to check out:
https://www.mssqltips.com/sqlservertip/4654/migrate-sql-server-logins-with-powershell/
https://blog.netnerds.net/2016/06/its-2016-why-is-sp_help_revlogin-a-thing/
https://www.sqlmatters.com/Articles/Copying%20logins%20and%20passwords%20from%20one%20SQL%20Server%20to%20another.aspx
https://support.microsoft.com/en-us/help/918992/how-to-transfer-logins-and-passwords-between-instances-of-sql-server</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SQL</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Submit_Queries_from_AdventureWorks database</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SQL</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Submit_Queries_from_AdventureWorks database</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>## Get ProductIDs from AdventureWorks database
$sqlconnection = New-Object System.Data.SqlClient.SqlConnection
$sqlconnection.ConnectionString = "Data Source=PLURALSIGHT\SQL2014;Initial Catalog=AdventureWorks2014;User Id=aw_webuser;Password=12345;Application Name=AdventureWorks Online Ordering;Workstation ID=AWWEB01";
$sqlconnection.Open();

$productIDs = New-Object System.Collections.Generic.List``1[System.Int32]

$sqlcmd = $sqlconnection.CreateCommand();
$sqlcmd.CommandText = "SELECT ProductID FROM Production.Product;";
$dr = $sqlcmd.ExecuteReader();

while($dr.Read())
{
      $productIDs.Add($dr[0]);
}

$sqlconnection.Close();


## Get Names from AdventureWorks database
$Names = New-Object System.Collections.Generic.List``1[System.String]

$sqlconnection = New-Object System.Data.SqlClient.SqlConnection
$sqlconnection.ConnectionString = "Data Source=PLURALSIGHT\SQL2014;Initial Catalog=AdventureWorks2014;User Id=aw_webuser;Password=12345;Application Name=AdventureWorks Online Ordering;Workstation ID=AWWEB01";
$sqlconnection.Open();

$sqlcmd = $sqlconnection.CreateCommand();
$sqlcmd.CommandText = "SELECT FirstName +'|'+LastName FROM Person.Person;";
$dr = $sqlcmd.ExecuteReader();

while($dr.Read())
{
      $Names.Add($dr.GetString(0));
}

$sqlconnection.Close();


#Set the server to script from 
$ServerName = ".";

$Queries = Get-Content -Delimiter "------" -Path "C:\Pluralsight\XE\AdventureWorks BOL Workload.sql"



WHILE(1 -eq 1)
{
      $rem = $null
      $inputint = Get-Random;
      [Void][Math]::DivRem($inputint, 2, [ref]$rem);
      
      if($rem -eq 0)
      {
      
            $ProductID = Get-Random -InputObject $productIDs;

            $query = [String]::Format("SELECT [t].[TransactionID], [t].[TransactionDate], [p].[ProductID], [p].[Name]
            FROM [Production].[TransactionHistory] [t]
          JOIN [Production].[Product] [p] ON [t].ProductID = [p].ProductID
      WHERE [p].[ProductID]= {0};", $ProductID);

            #Get a server object which corresponds to the default instance 
            
            $sqlconnection = New-Object System.Data.SqlClient.SqlConnection
            $sqlconnection.ConnectionString = "Data Source=PLURALSIGHT\SQL2014;Initial Catalog=AdventureWorks2014;User Id=aw_webuser;Password=12345;Application Name=AdventureWorks Online Ordering;Workstation ID=AWWEB01";
            $sqlconnection.Open();
            
            $sqlcmd = $sqlconnection.CreateCommand();
            $sqlcmd.CommandText = $query 
            
            $sqlcmd.ExecuteNonQuery();
            
            $sqlconnection.Close();
            
            Start-Sleep -Milliseconds 100 
      }
      else
      {
            $name = Get-Random -InputObject $Names;
            $firstname = $Name.Split('|')[0];
            $lastname = $Name.Split('|')[0];
            
            
            $query = [String]::Format("SELECT [c].[CustomerID], [c].[AccountNumber], [p].[FirstName], [p].[LastName], [a].[AddressLine1], [a].[City] 
FROM [Person].[Person] [p]
    JOIN [Sales].[Customer] [c] ON [p].[BusinessEntityID] = [c].[PersonID]
    JOIN [Person].[BusinessEntityAddress] [ba] ON [ba].BusinessEntityID = [c].PersonID
    JOIN [Person].[Address] [a] ON [a].AddressID = [ba].AddressID
    WHERE [p].[FirstName] = '{0}' AND [p].[LastName] = '{1}';", $firstname, $lastname);

            #Get a server object which corresponds to the default instance 
            
            $sqlconnection = New-Object System.Data.SqlClient.SqlConnection
            $sqlconnection.ConnectionString = "Data Source=PLURALSIGHT\SQL2014;Initial Catalog=AdventureWorks2014;User Id=aw_webuser;Password=12345;Application Name=AdventureWorks Online Ordering;Workstation ID=AWWEB01";
            $sqlconnection.Open();
            
            $sqlcmd = $sqlconnection.CreateCommand();
            $sqlcmd.CommandText = $query 
            
            $sqlcmd.ExecuteNonQuery();
            
            $sqlconnection.Close();
            
            Start-Sleep -Milliseconds 1       
      }
      
}

# Set-executionpolicy unrestricted
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ToolKit</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01_AdAccountManagementAutomator.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ToolKit</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01_AdAccountManagementAutomator.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>function New-EmployeeOnboardUser {
	&lt;#
	.SYNOPSIS
		This function is part of the Active Directory Account Management Automator tool.  It is used to perform all routine
		tasks that must be done when onboarding a new employee user account.
	.EXAMPLE
		PS&gt; New-EmployeeOnboardUser -FirstName 'adam' -MiddleInitial D -LastName Bertram -Title 'Dr. Awesome'
	
		This example creates an AD username based on company standards into a company-standard OU and adds the user
		into the company-standard main user group.
	.PARAMETER FirstName
	 	The first name of the employee
	.PARAMETER MiddleInitial
		The middle initial of the employee
	.PARAMETER LastName
		The last name of the employee
	.PARAMETER Title
		The current job title of the employee
	#&gt;
	[CmdletBinding()]
	param (
		[string]$Firstname,
		[string]$MiddleInitial,
		[string]$LastName,
		[string]$Location = 'OU=Corporate Users',
		[string]$Title
	)
	process {
		## Not the best use of storing the password clear text
		## Google/Bing on using stored secure strings on the file system as a way to get around this
		$DefaultPassword = 'p@$$w0rd12'
		$DomainDn = (Get-AdDomain).DistinguishedName
		$DefaultGroup = 'Gigantic Corporation Inter-Intra Synergy Group'
			
		$Username = "$($FirstName.SubString(0, 1))$LastName"
		## Check if an existing user already has the first intial/last name username taken
		try {
            if (Get-ADUser $Username) {
				## If so, check to see if the first initial/middle initial/last name is taken.
				$Username = "$($FirstName.SubString(0, 1))$MiddleInitial$LastName"
				if (Get-AdUser $Username) {
					throw "No acceptable username schema could be created"
				}
			}
		} catch {
            Write-Error $_.Exception.Message
        }
		$NewUserParams = @{
            'UserPrincipalName' = $Username
            'Name' = $Username
            'GivenName' = $FirstName
            'Surname' = $LastName
            'Title' = $Title
            'SamAccountName' = $Username
            'AccountPassword' = (ConvertTo-SecureString $DefaultPassword -AsPlainText -Force)
            'Enabled' = $true
            'Initials' = $MiddleInitial
            'Path' = "$Location,$DomainDn"
            'ChangePasswordAtLogon' = $true
        }
			
		New-AdUser @NewUserParams
		Add-ADGroupMember $Username $DefaultGroup
        $Username
	}
}

function Set-MyAdUser {
	&lt;#
	.SYNOPSIS
		This function is part of the Active Directory Account Management Automator tool.  It is used to modify
		one or more Active Directory attributes on a single Active Directory user account.
	.EXAMPLE
		PS&gt; Set-MyAdUser -Username adam -Attributes @{'givenName' = 'bob'; 'DisplayName' = 'bobby bertram'; 'Title' = 'manager'}
	
		This example changes the givenName to bob, the display name to 'bobby bertram' and the title to 'manager' for the username 'adam'
	.PARAMETER Username
	 	An Active Directory username to modify
	.PARAMETER Attributes
		A hashtable with keys as Set-AdUser parameter values and values as Set-AdUser parameter argument values
	#&gt;
	[CmdletBinding()]
	param (
		[string]$Username,
		[hashtable]$Attributes
	)
	process {
		try {
			## Attempt to find the username
			$UserAccount = Get-AdUser -Identity $Username
			if (!$UserAccount) {
				## If the username isn't found throw an error and exit
				#Write-Error "The username '$Username' does not exist"
				throw "The username '$Username' does not exist"
			}
			
			## The $Attributes parameter will contain only the parameters for the Set-AdUser cmdlet other than
			## Password.  If this is in $Attributes it needs to be treated differently.
			if ($Attributes.ContainsKey('Password')) {
				$UserAccount | Set-ADAccountPassword -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $Attributes.Password -Force)
				## Remove the password key because we'll be passing this hashtable directly to Set-AdUser later
				$Attributes.Remove('Password')
			}
			
			$UserAccount | Set-AdUser @Attributes
		} catch {
			Write-Error $_.Exception.Message
		}
	}
}

function Set-MyAdComputer {
	&lt;#
	.SYNOPSIS
		This function is part of the Active Directory Account Management Automator tool.  It is used to modify
		one or more Active Directory attributes on a single Active Directory computer account.
	.EXAMPLE
		PS&gt; Set-MyAdComputer -Computername adampc -Attributes @{'Location' = 'Phoenix'; 'Description' = 'is a little problematic'}
	
		This example changes the location to Phoenix and the description of the AD computer adampc to 'is a little problematic'
	.PARAMETER Computername
	 	An Active Directory computer account to modify
	.PARAMETER Attributes
		A hashtable with keys as Set-AdComputer parameter values and values as Set-AdComputer parameter argument values
	#&gt;
	[CmdletBinding()]
	param (
		[string]$Computername,
		[hashtable]$Attributes
	)
	process {
		try {
			## Attempt to find the Computername
			$Computer = Get-AdComputer -Identity $Computername
			if (!$Computer) {
				## If the Computername isn't found throw an error and exit
				#Write-Error "The Computername '$Computername' does not exist"
				throw "The Computername '$Computername' does not exist"
			}
			
			## The $Attributes parameter will contain only the parameters for the Set-AdComputer cmdlet
			$Computer | Set-AdComputer @Attributes
		} catch {
			Write-Error $_.Exception.Message
		}
	}
}

function New-EmployeeOnboardComputer {
	&lt;#
	.SYNOPSIS
		This function is part of the Active Directory Account Management Automator tool.  It is used to perform all routine
		tasks that must be done when onboarding a new AD computer account.
	.EXAMPLE
		PS&gt; New-EmployeeOnboardComputer -FirstName 'adam' -MiddleInitial D -LastName Bertram -Title 'Dr. Awesome'
	
		This example creates an AD username based on company standards into a company-standard OU and adds the user
		into the company-standard main user group.
	.PARAMETER Computername
	 	The name of the computer to create in AD
	.PARAMETER Location
		The AD distinguishedname of the OU that the computer account will be created in
	#&gt;
	[CmdletBinding()]
	param (
		[string]$Computername,
		[string]$Location
	)
	process {
		try {
			if (Get-AdComputer $Computername) {
				#Write-Error "The computer name '$Computername' already exists"
				throw "The computer name '$Computername' already exists"
			}
			
			$DomainDn = (Get-AdDomain).DistinguishedName
			$DefaultOuPath = "$Location,$DomainDn"
			
			New-ADComputer -Name $Computername -Path $DefaultOuPath
		} catch {
			Write-Error $_.Exception.Message
		}
	}
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ToolKit</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>02_Get-InterestingEventsWithinTimeframe.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ToolKit</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>02_Get-InterestingEventsWithinTimeframe.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' This one puts it all together, and has a validation script block BEFORE it runs

&lt;#
.SYNOPSIS
    This script finds all Windows events in all event logs and all log files on a local or remote machine
    recorded within a specific timeframe		
.EXAMPLE
	PS&gt; Get-InterestingEventsWithinTimeframe.ps1 -Computername MYCOMPUTER -StartTimestamp '04-15-15 04:00' -EndTimestamp '04-15-15 08:00' -LogFileExtension 'log'

    This example finds all events and .log files on all drives on the remote computer MYCOMPUTER from April 15th, 2015 at 4AM to April 15th, 2015 at 8AM.
.PARAMETER Computername
    The computer name you'd like to search for text and event logs on.  This defaults to localhost.
.PARAMETER StartTimestamp
    The earliest last write time of a log file and earliest time generated on an event you'd like to find
.PARAMETER EndTimestamp
    The latest last write time of a log file and latest time generated on an event you'd like to find
.PARAMETER LogFileExtension
    When searching log files, this is file extension you will be limiting your search to. This defaults to 'log'
#&gt;
[CmdletBinding()]
param ( #' This 'ValidateScript' tests the assumption that the computer is on-line, the script block returns true if the computer is on, and false if not
    [ValidateScript({Test-Connection -ComputerName $_ -Quiet -Count 1})]     #' The "$_" represents the parameter argument that will be passed to it.
    [string]$Computername = 'localhost',
    [Parameter(Mandatory)]
    [datetime]$StartTimestamp,
    [Parameter(Mandatory)]
    [datetime]$EndTimestamp,
    [string]$LogFileExtension = 'log'
)
begin {                           #' The 'begin' block is where you place code that you want to run only once, regardless if whether the script is used in a pipeline or not
                                  #' This is also a place where you can put functions that will be used in the 'process' block
    . C:\LogInvestigator.ps1
}
process {
	try {
        #' Parameter Hash table
        $Params = @{
            'Computername' = $Computername
            'StartTimestamp' = $StartTimestamp
            'EndTimestamp' = $EndTimestamp
        }
        Get-WinEventWithin @Params
	    Get-TextLogEventWithin @Params -LogFileExtension $LogFileExtension
	} catch {
		Write-Error "$($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"
	}
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS_Server_2012</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get-WSUSServer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS_Server_2012</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get-WSUSServer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#'Every command other than this command has a parameter called –WsusServer, 
#'    which takes an object called Microsoft.UpdateServices.Administration.IUpdateServer. 
#'Trying to just use a string name for the server will fail. 
#'Instead, first get the object by calling Get-WSUSServer with the required parameters 
#'    and save this to a variable such as $wsusServer. 
#'With this, you can then work with the remote WSUS server using the other commands. 
#'Otherwise, if you are on the server locally or through remoting, 
#'    just continue to use the cmdlets without the –WsusServer parameter.
#'

'The command Get-WSUSServer will give you information about your WSUS server. By default, it will only show you the WSUS server name and nothing else.

'run on local workstation,
Get-WsusServer -Name EBWSUS -PortNumber 8530 | select *

'OUTPUT  
WebServiceUrl                    : http://EBWSUS:8530/ApiRemoting30/WebService.asmx
BypassApiRemoting                : False
IsServerLocal                    : False
Name                             : EBWSUS
Version                          : 6.3.9600.18838
IsConnectionSecureForApiRemoting : False
PortNumber                       : 8530
PreferredCulture                 : en
ServerName                       : EBWSUS
UseSecureConnection              : False
ServerProtocolVersion            : 1.8

'run on Server itself:
Get-WsusServer  | Select *

'OUTPUT
WebServiceUrl                    : http://EBWSUS:8530/ApiRemoting30/WebService.asmx
BypassApiRemoting                : False
IsServerLocal                    : True
Name                             : EBWSUS
Version                          : 6.3.9600.18838
IsConnectionSecureForApiRemoting : True
PortNumber                       : 8530
PreferredCulture                 : en
ServerName                       : EBWSUS
UseSecureConnection              : False
ServerProtocolVersion            : 1.8
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS_Server_2012</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WSUS_cleanup_and_eMail_Rport_WithStatus</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS_Server_2012</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WSUS_cleanup_and_eMail_Rport_WithStatus</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'WSUS_cleanup_and_eMail_Rport_WithStatus

http://blog.ctglobalservices.com/configuration-manager-sccm/kea/house-of-cardsthe-configmgr-software-update-point-and-wsus/

'1] Script
'2] Scheduled Task

'Modify this script with your SMTP information and save the script:
'1] Script

Invoke-CleanUPWSUSTASK.PS1
=========================================================================================================
Add-Type -Path "C:\Program Files\Update Services\API\Microsoft.UpdateServices.Administration.dll"
$UseSSL = $False
$PortNumber = 8530
$Server = "cm02"
$ReportLocation = "E:\Install\WSUS\wsus\WSUS_CleanUpTaskReport.html"
$SMTPServer = "smtp.viamonstra.com”
$SMTPPort = 25
$To = "Kent Agerlund &lt;kent.agerlund@viamonstra.com&gt;"
$From = "ConfigMgr &lt;configmgr@viamonstra.com&gt;"
$WSUSConnection = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer($Server,$UseSSL,$PortNumber)
#Clean Up Scope
$CleanupScopeObject = New-Object Microsoft.UpdateServices.Administration.CleanupScope
$CleanupScopeObject.CleanupObsoleteComputers = $True
$CleanupScopeObject.CleanupObsoleteUpdates = $True
$CleanupScopeObject.CleanupUnneededContentFiles = $True
$CleanupScopeObject.CompressUpdates = $True
$CleanupScopeObject.DeclineExpiredUpdates = $True
$CleanupScopeObject.DeclineSupersededUpdates = $True
$CleanupTASK = $WSUSConnection.GetCleanupManager()
$Results = $CleanupTASK.PerformCleanup($CleanupScopeObject)
$DObject = New-Object PSObject
$DObject | Add-Member -MemberType NoteProperty -Name "SupersededUpdatesDeclined" -Value $Results.SupersededUpdatesDeclined
$DObject | Add-Member -MemberType NoteProperty -Name "ExpiredUpdatesDeclined" -Value $Results.ExpiredUpdatesDeclined
$DObject | Add-Member -MemberType NoteProperty -Name "ObsoleteUpdatesDeleted" -Value $Results.ObsoleteUpdatesDeleted
$DObject | Add-Member -MemberType NoteProperty -Name "UpdatesCompressed" -Value $Results.UpdatesCompressed
$DObject | Add-Member -MemberType NoteProperty -Name "ObsoleteComputersDeleted" -Value $Results.ObsoleteComputersDeleted
$DObject | Add-Member -MemberType NoteProperty -Name "DiskSpaceFreed" -Value $Results.DiskSpaceFreed
#HTML style
$HeadStyle = "&lt;style&gt;"
$HeadStyle = $HeadStyle + "BODY{background-color:peachpuff;}"
$HeadStyle = $HeadStyle + "TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}"
$HeadStyle = $HeadStyle + "TH{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:thistle}"
$HeadStyle = $HeadStyle + "TD{border-width: 1px;padding: 0px;border-style: solid;border-color: black;background-color:palegoldenrod}"
$HeadStyle = $HeadStyle + "&lt;/style&gt;"
$Date = Get-Date
$DObject | ConvertTo-Html -Head $HeadStyle -Body "&lt;h2&gt;$($ENV:ComputerName) WSUS Report: $date&lt;/h2&gt;" | Out-File $ReportLocation -Force
Send-MailMessage -To $To -from $FROM -subject "WSUS Clean Up Report" -smtpServer $SMTPServer -Attachments $ReportLocation -Port $SMTPPort

"=========================================================================================================

'2] Create a scheduled task in Windows that will run the script once a week with a script like this (notice this is tested on Server 2012 R2). 
'	You need to modify the –File to the location of the PowerShell script you created above.

$A = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument ‘-ExecutionPolicy ByPass -File F:\Install\scripts\wsus\Invoke-CleanUPWSUSTASK.PS1’
$T = New-ScheduledTaskTrigger -WeeksInterval 1 -DaysOfWeek Sunday -At "01:00" -Weekly
Register-ScheduledTask -User "NT AUTHORITY\SYSTEM" -TaskName ‘WSUS Clean UP TASK’ -Trigger $T -Action $A</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>remotely_install_update</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>remotely_install_update</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


psexec \\server -c -s -u domain\administrator -p password \\share\path_to_wuinstall\WUInstall.exe /install


'or

wuauclt /r /detectnow /updatenow</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Start-WsusServerSync.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Start-WsusServerSync.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'https://gallery.technet.microsoft.com/scriptcenter/Synchronize-all-WSUS-00c899c2
#'Start-WsusServerSync.ps1

Param(
	$WsusServer = ([system.net.dns]::GetHostByName('localhost')).hostname,
	[switch]$Recursive,
	[bool]$TrialRun = $True,
	[int]$SleepTime = 60,
	[string]$SmtpServer = "smtp.company.com",
	[string]$From = "wsus@company.com",
	[string]$To = "wsus@company.com",
	[string]$Subject = "WSUS Server Synchronization.",
	[switch]$EmailLog
)
Begin
{	$script:CurrentErrorActionPreference = $ErrorActionPreference
	$script:Output = @()
	$script:ProcessedServers = @()
	$WsusAssembly = [reflection.assembly]::LoadWithPartialName("Microsoft.UpdateServices.Administration")
	If($WsusAssembly -eq $Null)
	{	throw "Loading Microsoft.UpdateServices.Administration failed. Are you running this on a machine with the WSUS 3.0 SP2 Administration Console installed? http://technet.microsoft.com/en-us/library/dd939875(v=ws.10).aspx"}

	$ErrorActionPreference = "SilentlyContinue"
	If($EmailLog)
	{	If($Recursive)
		{	$Table = @{Name="Parent Wsus Server";expression={$_.ParentWsusServer}},@{Name="Wsus Server";expression={$_.WsusServer}},@{Name="Port Number";expression={$_.PortNumber}},@{Name="Using SSL";expression={$_.UsingSSL}},@{Name="Version";expression={$_.Version}},@{Name="Start";expression={$_.Start}},@{Name="Finish";expression={$_.Finish}}
		}
		Else
		{	$Table = @{Name="Wsus Server";expression={$_.WsusServer}},@{Name="Port Number";expression={$_.PortNumber}},@{Name="Using SSL";expression={$_.UsingSSL}},@{Name="Version";expression={$_.Version}},@{Name="Start";expression={$_.Start}},@{Name="Finish";expression={$_.Finish}}
		}
		If($TrialRun -eq $False)
		{	$Table += @{Name="Categories";expression={$_.Categories}},@{Name="Updates";expression={$_.Updates}},@{Name="Approvals";expression={$_.Approvals}},@{Name="LastSyncResult";expression={$_.LastSyncResult}}
		}
		$Style = "&lt;Style&gt;BODY{font-size:12px;font-family:verdana,sans-serif;color:navy;font-weight:normal;}" + `
		"TABLE{border-width:1px;cellpadding=10;border-style:solid;border-color:navy;border-collapse:collapse;}" + `
		"TH{font-size:12px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}" + `
		"TD{font-size:10px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}&lt;/Style&gt;"
		Function SendEmailStatus($From, $To, $Subject, $SmtpServer, $BodyAsHtml, $Body)
		{	$SmtpMessage = New-Object System.Net.Mail.MailMessage $From, $To, $Subject, $Body
			$SmtpMessage.IsBodyHTML = $BodyAsHtml
			$SmtpClient = New-Object System.Net.Mail.SmtpClient $SmtpServer
			$SmtpClient.Send($SmtpMessage)
			If($? -eq $False){Write-Warning "$($Error[0].Exception.Message) | $($Error[0].Exception.GetBaseException().Message)"}
			$SmtpMessage.Dispose()
			rv SmtpClient
			rv SmtpMessage
		}
	}

	function Get-HKLMValue
	{	Param(
  		[string]$computername=".",
  		[string]$key = "SOFTWARE\Microsoft\Update Services\Server\Setup",
  		[string]$value,
  		[switch]$REG_SZ,
  		[switch]$REG_DWORD
  	)
		$HKLM = 2147483650
		$reg = [wmiclass]"\\$computername\root\default:StdRegprov"
		If($REG_SZ)
		{	$Result = $reg.GetStringValue($HKLM,$key,$value)
			If($Result.ReturnValue -eq 0){$Result.sValue}
		}
		If($REG_DWORD)
		{	$Result = $reg.GetDwordValue($HKLM,$key,$value)
			If($Result.ReturnValue -eq 0){$Result.uValue}
		}
	}

	function Start-Pause
	{	Param(
			[int]$SleepTime = 10,
			[int]$ID = 1,
			[int]$ParentID,
			[string]$Activity = "Just taking a quick breather after all that activity..."
		)
		for($x = 1 ; $x -le $SleepTime; $x++)
		{	If(!$ParentID)
			{	Write-progress -Activity $Activity -Status "Seconds Remaining: $($SleepTime-$x)" -PercentComplete ($x/$SleepTime*100) -ID $ID}
			Else	
			{	Write-progress -Activity $Activity -Status "Seconds Remaining: $($SleepTime-$x)" -PercentComplete ($x/$SleepTime*100) -ID $ID -ParentId $ParentID}
			Sleep 1
		}
		Write-progress -Activity $Activity -Status "Done sleeping..." -Completed -ID $ID
	}

	Function Sync-WsusServer
	{	Param(
			$WsusServer,
			$ParentWsusServer
		)
		Write-Progress -Activity "Processing server: $WsusServer" -Status "Started at $((get-date).DateTime)" -ID 2 -ParentID 1
		Write-Progress -Activity "Retrieving PortNumber value from the registry via StdRegprov ..." -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
		$PortNumber = Get-HKLMValue -Computername $WsusServer -value PortNumber -REG_DWORD
		Write-Progress -Activity "Retrieving UsingSSL value from the registry via StdRegprov ..." -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
		$UsingSSL = If((Get-HKLMValue -Computername $WsusServer -value UsingSSL -REG_DWORD) -eq 1){$True}Else{$False}
		If($UsingSSL)
		{ Write-Progress -Activity "Retrieving ServerCertificateName value from the registry via StdRegprov ..." -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
			$ServerCertificateName = Get-HKLMValue -Computername $WsusServer -value ServerCertificateName -REG_SZ
			If($ServerCertificateName){$WsusServer = $ServerCertificateName}
		}
		If($script:ProcessedServers -Contains $WsusServer)
		{	Write-Warning "$WsusServer appears to have already been processed. You may have a circular loop in your hierarchy."}
		Else
		{	$script:ProcessedServers += $WsusServer
			$Object = New-Object psobject
			If($Recursive)
			{	If(!$ParentWsusServer){$ParentWsusServer = "--"}
				$Object | Add-Member NoteProperty ParentWsusServer $ParentWsusServer
			}
			$Object | Add-Member NoteProperty WsusServer $WsusServer -PassThru | Add-Member NoteProperty PortNumber $PortNumber -PassThru | 
				Add-Member NoteProperty UsingSSL $UsingSSL -PassThru | Add-Member NoteProperty Version "" -PassThru |
				Add-Member NoteProperty Start (get-date).DateTime -PassThru | Add-Member NoteProperty Finish ""
			If($TrialRun -eq $False)
			{	$Object | Add-Member NoteProperty Categories "--" -PassThru | 
					Add-Member NoteProperty Updates "--" -PassThru | 
					Add-Member NoteProperty Approvals "--" -PassThru | 
					Add-Member NoteProperty LastSyncResult ""
			}
			Write-Progress -Activity "Connecting to UpdateServices AdminProxy..." -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
			$WsusServerAdminProxy = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer($WsusServer,$UsingSSL,$PortNumber)
			If ($? -eq $False)
			{	$Object.Version = $Error[0]
				Write-Warning "Failed to connect to $WsusServer $($Error[0])"
				$Object.Finish = (get-date).DateTime
				$Object
				If($EmailLog){$script:Output += $Object}
			}
			Else
			{	$Object.Version = $WsusServerAdminProxy.Version
				If($TrialRun -eq $False)
				{	Write-Progress -Activity "Connecting to the Subscription..." -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
					$Subscription = $WsusServerAdminProxy.GetSubscription();
					Write-Progress -Activity "Calling StartSynchronization on $WsusServer" -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
					$Subscription.StartSynchronization()
					$SynchronizationProgress = $Subscription.GetSynchronizationProgress()
					While ($SynchronizationProgress.Phase.ToString() -eq "NotProcessing")
					{	Start-Sleep -Milliseconds 100
						$SynchronizationProgress = $Subscription.GetSynchronizationProgress()
					}
					While ($SynchronizationProgress.Phase.ToString() -ne "NotProcessing")
					{	If($SynchronizationProgress.Phase.ToString() -eq "Categories")
						{$Object.Categories = $SynchronizationProgress.TotalItems}
						If($SynchronizationProgress.Phase.ToString() -eq "Updates")
						{	$Object.Updates = $SynchronizationProgress.TotalItems}
						If($SynchronizationProgress.Phase.ToString() -eq "Approvals")
						{$Object.Approvals = $SynchronizationProgress.TotalItems}
						Write-Progress -Activity "Synchronization Phase: $($SynchronizationProgress.Phase.ToString())" -Status "$($SynchronizationProgress.ProcessedItems) of $($SynchronizationProgress.TotalItems) items done..." -PercentComplete ($SynchronizationProgress.ProcessedItems*100/($SynchronizationProgress.TotalItems)) -ID 4 -ParentId 3
						$SynchronizationProgress = $Subscription.GetSynchronizationProgress()
					}
					$Object.LastSyncResult = $Subscription.GetLastSynchronizationInfo().Result
					Write-Progress -Activity "Synchronization Phase: $($SynchronizationProgress.Phase.ToString())" -Status "Complete." -ID 4 -ParentId 3 -Completed
				}
				$Object.Finish = (get-date).DateTime
				$Object
				If($EmailLog){$script:Output += $Object}
				If($Recursive -And $TrialRun -eq $False){Start-Pause -Activity "Processed $($script:ProcessedServers.Count) server(s). The script is pausing for $SleepTime seconds starting at $((get-date).DateTime)." -SleepTime $SleepTime -ID 3 -ParentID 2}
				If($Recursive)
				{	Write-Progress -Activity "Retrieving Downstream Servers on $WsusServer..." -Status "Started at $((get-date).DateTime)" -ID 3 -ParentID 2
					$WsusDownstreamServers = $WsusServerAdminProxy.GetDownstreamServers()
					If($WsusDownstreamServers){$WsusDownstreamServers | %{Sync-WsusServer -WsusServer $_.FullDomainName -ParentWsusServer $WsusServer}}
				}
			}
		}
	}
	Write-Progress -Activity "WSUS Server Synchronization." -Status "Started at $((get-date).DateTime)" -ID 1
}
Process
{	If($WsusServer)
	{	ForEach($Server in $WsusServer){Sync-WsusServer $Server}
	}
	Else
	{	Sync-WsusServer $_
	}
}
End
{	If($EmailLog){SendEmailStatus -From $From -To $To -Subject $Subject -SmtpServer $SmtpServer -BodyAsHtml $True -Body ($Output | Select $Table | ConvertTo-HTML -head $Style)}
	$ErrorActionPreference = $script:CurrentErrorActionPreference
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Sync_Last_Sync_dateTime</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Sync_Last_Sync_dateTime</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Manually: just click on "Synchronizations" node in Left pane of WSUS

How Can I Determine When the Last Patch From Windows Update was Applied?
------------------------------------------------------------------------
https://blogs.technet.microsoft.com/heyscriptingguy/2005/08/24/how-can-i-determine-when-the-last-patch-from-windows-update-was-applied/

'As you can see, in this script we pass QueryHistory two parameters: 0 and 1. 
'The 0 tells the script to begin its search with record 0 in the update history; 
'the 1 tells the script to stop its search after record 1.

==================================================================
#'GetLastSynchronizationTime.ps1

$Session = New-Object -ComObject Microsoft.Update.Session
    $Searcher = $Session.CreateUpdateSearcher()
    $LastUpdate = $Searcher.QueryHistory(0, 1) | Select-Object -ExpandProperty Date
    $LastUpdate
====================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WindowsUpdate_Module</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WindowsUpdate_Module</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'WindowsUpdate.psm1
#'https://github.com/adbertram/Random-PowerShell-Work/blob/master/Software%20Updates/WindowsUpdate.psm1

Set-StrictMode -Version Latest

function Get-WindowsUpdate {
	&lt;#
		.SYNOPSIS
			This function retrieves a list of Microsoft updates based on a number of different criteria for a remote
			computer. It will retrieve these updates over a PowerShell remoting session. It uses the update source set
			at the time of query. If it's set to WSUS, it will only return updates that are advertised to the computer
			by WSUS.
	
		.EXAMPLE
			PS&gt; Get-WindowsUpdate -ComputerName FOO
		.PARAMETER ComputerName
			 A mandatory string parameter representing the FQDN of a computer. This is only mandatory is Session is
			 not used.
		.PARAMETER Credential
			 A optoional pscredential parameter representing an alternate credential to connect to the remote computer.
		.PARAMETER Session
			 A mandatory PSSession parameter representing a PowerShell remoting session created with New-PSSession. This
			 is only mandatory if ComputerName is not used.
		
		.PARAMETER Installed
			 A optional boolean parameter set to either $true or $false depending on if you'd like to filter the resulting
			 updates on this criteria.
		.PARAMETER Hidden
			 A optional boolean parameter set to either $true or $false depending on if you'd like to filter the resulting
			 updates on this criteria.
		.PARAMETER Assigned
			A optional boolean parameter set to either $true or $false depending on if you'd like to filter the resulting
			updates on this criteria.
		.PARAMETER RebootRequired
			A optional boolean parameter set to either $true or $false depending on if you'd like to filter the resulting
			updates on this criteria.
	#&gt;
	[OutputType([System.Management.Automation.PSObject])]
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory, ParameterSetName = 'ByComputerName')]
		[ValidateNotNullOrEmpty()]
		[string]$ComputerName,

		[Parameter(ParameterSetName = 'ByComputerName')]
		[ValidateNotNullOrEmpty()]
		[pscredential]$Credential,

		[Parameter(Mandatory, ParameterSetName = 'BySession')]
		[ValidateNotNullOrEmpty()]
		[System.Management.Automation.Runspaces.PSSession]$Session,
        
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('MicrosoftUpdate')]
		[string]$Source,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('True', 'False')]
		[string]$Installed = 'False',

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('True', 'False')]
		[string]$Hidden,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('True', 'False')]
		[string]$Assigned,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('True', 'False')]
		[string]$RebootRequired
	)
	begin {
		$ErrorActionPreference = 'Stop'
		if (-not $Session) {
			$sessParams = @{
				ComputerName = $ComputerName
			}
			if ($PSBoundParameters.ContainsKey('Credential')) {
				$sessParams.Credential = $Credential
			}
			$Session = New-PSSession @sessParams
		}
	}
	process {
		try {
			$criteriaParams = @{}

			## Had to set these to string values because if they're boolean they will have a $false value even if
			## they aren't set.  I needed to check for a $null value.ided
			@('Installed', 'Hidden', 'Assigned', 'RebootRequired').where({ (Get-Variable -Name $_).Value }).foreach({
					$criteriaParams[$_] = if ((Get-Variable -Name $_).Value -eq 'True') {
						$true 
					} else {
						$false 
					}
				})
			$query = NewUpdateCriteriaQuery @criteriaParams
			Write-Verbose -Message "Using the update criteria query: [$($Query)]..."
			$searchParams = @{
				Session = $Session
				Query   = $query
			}
			if ($PSBoundParameters.ContainsKey('Source')) {
				$searchParams.Source = $Source
			}
			SearchWindowsUpdate @searchParams
		} catch {
			Write-Error $_.Exception.Message
		} finally {
			## Only clean up the session if it was generated from within this function. This is because updates
			## are stored in a variable to be used again by other functions, if necessary.
			if (($PSCmdlet.ParameterSetName -eq 'ByComputerName') -and (Test-Path Variable:\session)) {
				$session | Remove-PSSession
			}
		}
	}
}

function Install-WindowsUpdate {
	&lt;#
		.SYNOPSIS
			This function retrieves all updates that are targeted at a remote computer, download and installs any that it
			finds. Depending on how the remote computer's update source is set, it will either read WSUS or Microsoft Update
			for a compliancy report.
			Once found, it will download each update, install them and then read output to detect if a reboot is required
			or not.
	
		.EXAMPLE
			PS&gt; Install-WindowsUpdate -ComputerName FOO.domain.local
		.EXAMPLE
			PS&gt; Install-WindowsUpdate -ComputerName FOO.domain.local,FOO2.domain.local			
		
		.EXAMPLE
			PS&gt; Install-WindowsUpdate -ComputerName FOO.domain.local,FOO2.domain.local -ForceReboot
		.PARAMETER ComputerName
			 A mandatory string parameter representing one or more computer FQDNs.
		.PARAMETER Credential
			 A optional pscredential parameter representing an alternate credential to connect to the remote computer.
		
		.PARAMETER ForceReboot
			 An optional switch parameter to set if any updates on any computer targeted needs a reboot following update
			 install. By default, computers are NOT rebooted automatically. Use this switch to force a reboot.
		
		.PARAMETER AsJob
			 A optional switch parameter to set when activity needs to be sent to a background job. By default, this function 
			 waits for each computer to finish. However, if this parameter is used, it will start the process on each
			 computer and immediately return a background job object to then monitor yourself with Get-Job.
	#&gt;
	[OutputType([void])]
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[string[]]$ComputerName,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[pscredential]$Credential,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('MicrosoftUpdate')]
		[string]$Source,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[switch]$ForceReboot,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[switch]$AsJob
	)
	begin {
		$ErrorActionPreference = 'Stop'

		$scheduledTaskName = 'Windows Update Install'

	}
	process {
		try {
			$getParams = @{}
			if ($PSBoundParameters.ContainsKey('Credential')) {
				$getParams.Credential = $Credential
			}
			if ($PSBoundParameters.ContainsKey('Source')) {
				$getParams.Source = $Source
			}
			@($ComputerName).foreach({
					$getParams.ComputerName = $_
					if (-not (Get-WindowsUpdate @getParams)) {
						Write-Verbose -Message 'No updates needed to install. Skipping computer...'
					} else {
						$installProcess = {
							param($ComputerName, $TaskName, $Credential, $ForceReboot)
							$VerbosePreferences = 'Continue'
							try {
								$sessParams = @{ ComputerName = $ComputerName }
								if ($Credential) {
									$sessParams.Credential = $Credential
								}
							
								$session = New-PSSession @sessParams

								$scriptBlock = {
									$updateSession = New-Object -ComObject 'Microsoft.Update.Session'
									$objSearcher = $updateSession.CreateUpdateSearcher()
									if ($using:Source -eq 'MicrosoftUpdate') {
										$objSearcher.ServerSelection = 3
									}
									if ($updates = ($objSearcher.Search('IsInstalled=0'))) {
										$updates = $updates.Updates

										$downloader = $updateSession.CreateUpdateDownloader();
										$downloader.Updates = $updates;
										$downloadResult = $downloader.Download();
										if ($downloadResult.ResultCode -ne 2) {
											exit $downloadResult.ResultCode;
										}

										$installer = New-Object -ComObject Microsoft.Update.Installer;
										$installer.Updates = $updates;
										$installResult = $installer.Install();
										if ($installResult.RebootRequired) {
											exit 7;
										} else {
											$installResult.ResultCode
										}
									} else {
										exit 6;
									}
								}
							
								$taskParams = @{
									Session     = $session
									Name        = $TaskName
									Scriptblock = $scriptBlock
									PassThru    = $true
								}
								Write-Verbose -Message 'Creating scheduled task...'
								if (-not ($task = NewWindowsUpdateScheduledTask @taskParams)) {
									throw "Failed to create scheduled task."
								}

								Write-Verbose -Message "Starting scheduled task [$($task.TaskName)]..."

								$icmParams = @{
									Session      = $session
									ScriptBlock  = { Start-ScheduledTask -TaskName $args[0] }
									ArgumentList = $task.TaskName
									Verbose      = $true
								}
								Invoke-Command @icmParams
                                
								$waitParams = @{
									ComputerName = $_
								}
								if ($Credential) {
									$waitParams.Credential = $Credential
								}
								Wait-ScheduledTask @waitParams -Name $task.TaskName

								$installResult = GetWindowsUpdateInstallResult -Session $session

								if ($installResult -eq 'NoUpdatesNeeded') {
									Write-Verbose -Message "No updates to install"
								} elseif ($installResult -eq 'RebootRequired') {
									if ($ForceReboot) {
										Restart-Computer -ComputerName $ComputerName -Force -Wait;
									} else {
										Write-Warning "Reboot required but -ForceReboot was not used."
									}
								} else {
									throw "Updates failed. Reason: [$($installResult)]"
								}
							
							} catch {
								$PSCmdlet.ThrowTerminatingError($_)
							} finally {
								Remove-ScheduledTask @getParams -Name $TaskName
							}
						}

						$blockArgs = $_, $scheduledTaskName, $Credential, $ForceReboot.IsPresent
						if ($AsJob.IsPresent) {
							Start-Job -ScriptBlock $installProcess -Name "$_ - Windows Update Install" -ArgumentList $blockArgs
						} else {
							Invoke-Command -ScriptBlock $installProcess -ArgumentList $blockArgs
						}
					}
				})
		} catch {
			Write-Error $_.Exception.Message
		} finally {
			# Remove any sessions created. This is done when processes aren't invoked under a PS job
			$sessParams = @{
				ComputerName = $ComputerName
			}
			if ($PSBoundParameters.ContainsKey('Credential')) {
				$sessParams.Credential = $Credential
			}
			@(Get-PSSession @sessParams).foreach({
					Remove-PSSession -Session $_
				})
		}
	}
}

function GetWindowsUpdateInstallResult {
	[OutputType([string])]
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[System.Management.Automation.Runspaces.PSSession]$Session,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[string]$ScheduledTaskName = 'Windows Update Install'
	)

	$sb = { (Get-ScheduledTask -TaskName $args[0] | Get-ScheduledTaskInfo).LastTaskResult }
	$resultCode = Invoke-Command -Session $Session -ScriptBlock $sb -ArgumentList $ScheduledTaskName
	switch -exact ($resultCode) {
		0   {
			'Installed'
			break
		}
		1   {
			'InProgress'
			break
		}
		2   {
			'Installed'
			break
		}
		3   {
			'InstalledWithErrors'
			break
		}
		4   {
			'Failed'
			break
		}
		5   {
			'Aborted'
			break
		}
		6   {
			'NoUpdatesNeeded'
			break
		}
		7   {
			'RebootRequired'
			break
		}
		267009 {
			'TimedOut'
			break
		}
		default {
			"Unknown exit code [$($_)]"
		}
	}
}

function NewUpdateCriteriaQuery {
	[OutputType([string])]
	[CmdletBinding()]
	param
	(
		[Parameter()]
		[bool]$Installed,

		[Parameter()]
		[bool]$Hidden,

		[Parameter()]
		[bool]$Assigned,

		[Parameter()]
		[bool]$RebootRequired
	)

	$conversion = @{
		Installed      = 'IsInstalled'
		Hidden         = 'IsHidden'
		Assigned       = 'IsAssigned'
		RebootRequired = 'RebootRequired'
	}

	$queryElements = @()
	$PSBoundParameters.GetEnumerator().where({ $_.Key -in $conversion.Keys }).foreach({
			$queryElements += '{0}={1}' -f $conversion[$_.Key], [int]$_.Value
		})
	$queryElements -join ' and '
}

function SearchWindowsUpdate {
	[OutputType()]
	[CmdletBinding()]
	param
	(
		[Parameter()]
		[string]$Query,
        
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[string]$Source,

		[Parameter()]
		[System.Management.Automation.Runspaces.PSSession]$Session
	)

	$scriptBlock = {
		$objSession = New-Object -ComObject 'Microsoft.Update.Session'
		$objSearcher = $objSession.CreateUpdateSearcher()
		if ($using:Source -eq 'MicrosoftUpdate') {
			$objServiceManager = New-Object -ComObject "Microsoft.Update.ServiceManager"
			$objSearcher.ServerSelection = 3
			$objServiceManager.Services | Where-Object { $_.Name -eq 'Microsoft Update' } | Foreach {
				$objSearcher.ServiceID = $_.ServiceID
			}
		}
		if ($updates = ($objSearcher.Search($args[0]))) {
			$updates = $updates.Updates
			## Save the updates needed to the file system for other functions to pick them up to download/install later.
			$updates | Export-CliXml -Path "$env:TEMP\Updates.xml"
			$updates
		}
		
	}
	Invoke-Command -Session $Session -ScriptBlock $scriptBlock -ArgumentList $Query
}

function NewWindowsUpdateScheduledTask {
	[OutputType([void])]
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[System.Management.Automation.Runspaces.PSSession]$Session,

		[Parameter(Mandatory)]
		[string]$Name,

		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[scriptblock]$Scriptblock,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[pscredential]$Credential,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[switch]$PassThru
	)

	if (TestWindowsUpdateScheduledTask -Session $Session -Name $Name) {
		Write-Verbose -Message "A windows update install task already exists. Removing..."
		Remove-ScheduledTask -ComputerName $Session.ComputerName -Name $Name
	}

	$createStartSb = {
		$action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument $args[1]
		$principal = New-ScheduledTaskPrincipal -UserId $args[3] -LogonType Password
		$settings = New-ScheduledTaskSettingsSet -StartWhenAvailable -Hidden
		$task = New-ScheduledTask -Action $action -Settings $settings -Principal $principal
		$regTask = Register-ScheduledTask -InputObject $task -TaskName $args[0]
		if ($args[2].IsPresent) {
			$regTask
		}
	}

	$psArgs = '-NonInteractive -NoProfile -Command "{0}"' -f $Scriptblock.ToString()

	$icmParams = @{
		Session      = $Session
		ScriptBlock  = $createStartSb
		ArgumentList = $Name, $psArgs, $PassThru
	}
	if ($PSBoundParameters.ContainsKey('Credential')) {
		$icmParams.ArgumentList += $Credential.UserName	
	} else {
		$icmParams.ArgumentList += 'SYSTEM'
	}
	
	Invoke-Command @icmParams
	
}

function TestWindowsUpdateScheduledTask {
	[OutputType([bool])]
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[System.Management.Automation.Runspaces.PSSession]$Session,

		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[string]$Name
	)
	$testScriptBlock = {
		if (Get-ScheduledTask -TaskName $args[0] -ErrorAction Ignore) {
			$true
		} else {
			$false
		}
	}

	Invoke-Command -Session $Session -ScriptBlock $testScriptBlock -ArgumentList $Name
}

function Wait-WindowsUpdate {
	&lt;#
		.SYNOPSIS
			This function looks for any currently running background jobs that were created by Install-WindowsUpdate
			and continually waits for all of them to finish before returning control to the console.
	
		.EXAMPLE
			PS&gt; Wait-WindowsUpdate
		
		.PARAMETER Timeout
			 An optional integer parameter representing the amount of seconds to wait for the job to finish.
	
	#&gt;
	[OutputType([void])]
	[CmdletBinding()]
	param
	(
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[int]$Timeout = 3600
	)
	process {
		try {
			if ($updateJobs = (Get-Job -Name '*Windows Update Install*').where({ $_.State -eq 'Running'})) {
				$timer = Start-Timer
				while ((Microsoft.PowerShell.Core\Get-Job -Id $updateJobs.Id | Where-Object { $_.State -eq 'Running' }) -and ($timer.Elapsed.TotalSeconds -lt $Timeout)) {
					Write-Verbose -Message "Waiting for all Windows Update install background jobs to complete..."
					Start-Sleep -Seconds 3
				}
				Stop-Timer -Timer $timer
			}
		} catch {
			Write-Error $_.Exception.Message
		}
	}
}

function Remove-ScheduledTask {
	&lt;#
		.SYNOPSIS
			This function looks for a scheduled task on a remote system and, once found, removes it.
	
		.EXAMPLE
			PS&gt; Remove-ScheduledTask -ComputerName FOO -Name Task1
		
		.PARAMETER ComputerName
			 A mandatory string parameter representing a FQDN of a remote computer.
		.PARAMETER Name
			 A mandatory string parameter representing the name of the scheduled task. Scheduled tasks can be retrieved
			 by using the Get-ScheduledTask cmdlet.
		.PARAMETER Credential
			 Specifies a user account that has permission to perform this action. The default is the current user.
			 
			 Type a user name, such as 'User01' or 'Domain01\User01', or enter a variable that contains a PSCredential
			 object, such as one generated by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
	
	#&gt;
	[OutputType([void])]
	[CmdletBinding(SupportsShouldProcess)]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[string]$ComputerName,

		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[string]$Name,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[pscredential]$Credential	
	)
	begin {
		$ErrorActionPreference = 'Stop'
	}
	process {
		try {
			$icmParams = @{
				ComputerName = $ComputerName
				ArgumentList = $Name
			}
			if ($PSBoundParameters.ContainsKey('Credential')) {
				$icmParams.Credential = $Credential
			}
			
			$sb = { 
				if ($task = Get-ScheduledTask -TaskName $args[0] -ErrorAction Ignore) {
					$task | Unregister-ScheduledTask -Confirm:$false
				}
			}

			if ($PSCmdlet.ShouldProcess("Remove scheduled task [$($Name)] from [$($ComputerName)]", '----------------------')) {
				Invoke-Command @icmParams -ScriptBlock $sb	
			}
		} catch {
			Write-Error -Message $_.Exception.Message
		}
	}
}

function Wait-ScheduledTask {
	&lt;#
		.SYNOPSIS
			This function looks for a scheduled task on a remote system and, once found, checks to see if it's running.
			If so, it will wait until the task has completed and return control.
	
		.EXAMPLE
			PS&gt; Wait-ScheduledTask -ComputerName FOO -Name Task1 -Timeout 120
		
		.PARAMETER ComputerName
			 A mandatory string parameter representing a FQDN of a remote computer.
		.PARAMETER Name
			 A mandatory string parameter representing the name of the scheduled task. Scheduled tasks can be retrieved
			 by using the Get-ScheduledTask cmdlet.
		.PARAMETER Timeout
			 A optional integer parameter representing how long to wait for the scheduled task to complete. By default,
			 it will wait 3600 seconds.
		.PARAMETER Credential
			 Specifies a user account that has permission to perform this action. The default is the current user.
			 
			 Type a user name, such as 'User01' or 'Domain01\User01', or enter a variable that contains a PSCredential
			 object, such as one generated by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.
	
	#&gt;
	[OutputType([void])]
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[string]$ComputerName,

		[Parameter(Mandatory)]
		[ValidateNotNullOrEmpty()]
		[string]$Name,

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[int]$Timeout = 3600, ## seconds

		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[pscredential]$Credential
	)
	begin {
		$ErrorActionPreference = 'Stop'
	}
	process {
		try {
			$sessParams = @{
				ComputerName = $ComputerName
			}
			if ($PSBoundParameters.ContainsKey('Credential')) {
				$sessParams.Credential = $Credential
			}
			$session = New-PSSession @sessParams

			$scriptBlock = {
				$VerbosePreference = 'Continue'
				$timer = [Diagnostics.Stopwatch]::StartNew()
				while (((Get-ScheduledTask -TaskName $args[0]).State -ne 'Ready') -and ($timer.Elapsed.TotalSeconds -lt $args[1])) {
					Write-Verbose -Message "Waiting on scheduled task [$($args[0])]"
					Start-Sleep -Seconds 3
				}
				$timer.Stop()
				Write-Verbose -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on the task [$($args[0])]"
			}

			Invoke-Command -Session $session -ScriptBlock $scriptBlock -ArgumentList $Name, $Timeout
		} catch {
			Write-Error -Message $_.Exception.Message
		} finally {
			if (Test-Path Variable:\session) {
				$session | Remove-PSSession
			}
		}
	}
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Array_Example_get_Random_numbers_letters_Characters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Array_Example_get_Random_numbers_letters_Characters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'make a password
$alpha = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'
$num = 0..9
$char = '!,),@,(,*,/,$,&amp;,^,%,[,],&gt;,&lt;'
$arr = @()
$arr+= $alpha.split(',') | Get-Random -count 5
#make the first and last elements upper case
$arr[0] = $arr[0].toupper()
$arr[-1] = $arr[-1].toupper()         #'  &lt;==== Last member of the array
#$num is already an array
$arr += $num | Get-Random -count 2
#get 3 random characters
$arr += $char.split(',') | Get-Random -count 3
#randomize the array and join as a string 
($arr | Get-Random -Count $arr.count) -join ""

'OUTPUT (example)
---------
h@2^T(d0Jz</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>HashTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>HashTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#-----------------------------------------------------------------------------#
# Hash tables - use a text based key (rather than an integer in arrays) as the key
#               use squiggly brace {} ( rather than () as in Array)
#               prefix the brace with "@"
#               Use semicolon between the records  
#-----------------------------------------------------------------------------#

$hash = @{"Key"         = "Value"; 
          "PowerShell"  = "PowerShell.com"; 
          "Arcane Code" = "arcanecode.com"}
          
$hash                  # Display all values
$hash["PowerShell"]    # Get a single value from the key

$hash."Arcane Code"    # Get single value using object syntax, short-cut: period (.) followed by Key in quotes

# You can use variables as keys
$mykey = "PowerShell"
$hash.$mykey         # Using variable as a property
$hash.$($mykey)      # Evaluating as an expression, in this example this is the same as the previous line
$hash.$("Power" + "Shell")

# Adding and removing values
$hash                                     # Here's what's there to start
$hash["Pluralsight"] = "pluralsight.com"  # Add value using new key
$hash                                     # Show the additional row

$hash.Remove("Arcane Code")        # Remove by passing in key
$hash

# See if key exists
$hash.Contains("Pluralsight")      # Should be there =&gt; True
$hash.Contains("Arcane Code")      # Gone since we just removed it =&gt; False

# See if value exists
$hash.ContainsValue("PowerShell.com")  # Will be there  =&gt; True
$hash.ContainsValue("arcanecode.com")  # Not there since it was removed  =&gt; False

# List keys and values
$hash.Keys
$hash.Values

# Find if a key or value is present
$hash.Keys -contains "PowerShell"

$hash.Values -contains "PowerShell.com"


##
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>String_Calculations</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>String_Calculations</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code># Calculations can be passed in as the item to be formatted                 
"The 20% tip of a 33.33 dollar bill is {0} dollars" -f (33.33 * 0.20)       # The 20% tip of a 33.33 dollar bill is 6.666 dollars

"The 20% tip of a 33.33 dollar bill is {0:0.00} dollars" -f (33.33 * 0.20)  # The 20% tip of a 33.33 dollar bill is 6.67 dollars

##</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>String_numbers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>String_numbers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code># String Formatting - C# like syntax is supported
#   In C you'd use a static method (i.e. [string]) with a place holder (i.e. {0} )
[string]::Format("There are {0} items.", $items)

# Powershell shortcut { "-f" is an indicator that is requesting formatting}
# see: http://ss64.com/ps/syntax-f-operator.html for list
		:c	Currency format
		:e	Scientific (exp) notation
		:f	Fixed point
		:f5 = fix to 5 places
		:g	Most compact format, fixed or sci
		:g5 = 5 significant digits
		:n	Number (:nP precision=number of decimal places), includes culture separator for thousands 1,000.00
		:p	percentage
		:r	reversible precision
		:x	Hex format
		:hh
		:mm
		:ss	Convert a DateTime to a 2 digit Hour/minute/second
		"{0:hh}:{0:mm}"
		:ddd	Convert a DateTime to Day of the Week
# Place {0} {1} etc. into the string as placemarkers where you want the variables to appear, 
# immediately follow the string with the -f operator and then lastly, 
#  a list of comma separated variables which will be used to populate the placemarkers.
"There are {0} items." -f $items

"There are {0} items in the location {1}." -f $items, $loc

# You can repeat place holders
"There are {0} items in the location {1}. Wow, {0} is a lot of items!" -f $items, $loc

# Predefined formats - For Decimal Places
# N - Number
"N0 {0:N0} formatted" -f 12345678.119    # N0 12,345,678 formatted           {N0 =&gt; zero places}
"N1 {0:N1} formatted" -f 12345678.119    # N1 12,345,678.1 formatted         {N1 =&gt; one place}
"N2 {0:N2} formatted" -f 12345678.119    # N2 12,345,678.12 formatted        {N2 =&gt; two places}
"N2 {0:N9} formatted" -f 12345678.119    # N2 12,345,678.119000000 formatted {N9 =&gt; 9 places, fill w/ zero}
"N0 {0:N0} formatted"   -f 123.119       # N0 123 formatted                  {N0 =&gt; zero places}
"N0 {0,8:N0} formatted" -f 123.119       # N0      123 formatted             {N0 =&gt; 8 spaces preceding, zero places}

# C - Currency (uses local currency)
"C0 {0:C0} formatted" -f 12345678.1234   # C0 $12,345,678 formatted
"C1 {0:C1} formatted" -f 12345678.1234   # C1 $12,345,678.1 formatted
"C2 {0:C2} formatted" -f 12345678.1234   # C2 $12,345,678.12 formatted

# P - Percentage
"P0 {0:P0} formatted" -f 0.1234          # P0 12 % formatted
"P2 {0:P2} formatted" -f 0.1234          # P2 12.34 % formatted

# X - Hex
"X0 0x{0:X0} formatted" -f 1234          # X0 0x4D2 formatted
"X0 0x{0:X0} formatted" -f 0x4D2         # X0 0x4D2 formatted

# D - Decimal {for integers
"D0 {0:D0} formatted"   -f 12345678      # D0 12345678 formatted
"D8 {0:D8} formatted"   -f 123           # D8 00000123 formatted   {pads it with zeros in the front}
"D0 {0:D0} formatted"   -f 123           # D0      123 formatted
"D0 {0,8:D0} formatted" -f 123           # D0      123 formatted

# Note, decimal only supports INTs. It causes an error, when you use a non-decimal number:
"D0 {0:D0} formatted"   -f 123.1         


                                                                            
# Calculations can be passed in as the item to be formatted                 
"The 20% tip of a 33.33 dollar bill is {0} dollars" -f (33.33 * 0.20)       # The 20% tip of a 33.33 dollar bill is 6.666 dollars

"The 20% tip of a 33.33 dollar bill is {0:0.00} dollars" -f (33.33 * 0.20)  # The 20% tip of a 33.33 dollar bill is 6.67 dollars

##</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_WiFi_Wireless</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_WiFi_Wireless</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_WiFi_Wireless</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_WiFi_Wireless</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'about_POWERSHELL_WiFi_Wireless

'Some articles for automating Password changes without having to go to each machine:

https://stackoverflow.com/questions/35232162/add-wifi-profile-with-password-in-windows-programmatically
https://stackoverflow.com/questions/34935746/change-the-password-for-a-wi-fi-profile
https://stackoverflow.com/questions/21317611/change-wireless-network-security-key-cmd-or-vbscript
https://gist.github.com/robie2011/11428210

'Wireless Profile Samples
https://msdn.microsoft.com/en-us/library/windows/desktop/aa369853(v=vs.85).aspx

'GitHub to export wifi profiles
https://gist.github.com/dolmen/864551

other info
https://www.nowiressecurity.com/import-export-windows-network-settings
https://andernetwork.wordpress.com/2014/03/19/using-powershell-to-display-wireless-ssid-and-password/
http://blog.jocha.se/tech/display-all-saved-wifi-passwords
https://stackoverflow.com/questions/33874913/batch-powershell-to-backup-wlan-profiles-need-elevated-rights-not-admin
https://stackoverflow.com/questions/44424425/read-wifi-status-with-powershell
https://stackoverflow.com/questions/32760356/how-to-connect-to-a-wifi-in-powershell-knowing-the-ssid-and-password



'Show profiles
NETSH WLAN SHOW PROFILE</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_WMI</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>writable_WMI_Properties</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_WMI</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>writable_WMI_Properties</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://blogs.technet.microsoft.com/heyscriptingguy/2014/01/29/use-powershell-to-manipulate-information-with-cim/
-----------------------------------------------
After you’ve found a property that you want to change, the process of changing it looks like this:

Retrieve the CIM instance by using Get-CimInstance, and assign to a variable.
Change the desired property value.
Call Set-CimInstance, and pass it in the variable.

 Let’s take a look at how to create a CIM session, so that we can perform work against remote computers. To create a CIM session, we simply use the New-CimSession cmdlet:
 &gt;$CimSession = New-CimSession -ComputerName sql01;
 'Get a list of printers:
 Get-CimInstance -CimSession $CimSession -Class Win32_Printer;
 
 'When you have completed a CIM session, you can clean it up by using the Remove-CimSession cmdlet:

Remove-CimSession -CimSession $CimSession;
------------------------------------------------
$ClassList = Get-CimClass;

 

foreach ($CimClass in $ClassList) {

    foreach ($CimProperty in $CimClass.CimClassProperties) {

        if ($CimProperty.Qualifiers.Name -contains 'write') {

            [PSCustomObject]@{

                ClassName = $CimClass.CimClassName;

                PropertyName = $CimProperty.Name;

                Writable = $true;

                };

        };

    };

};
------------------------------------------------
'OUTPUT:
---------
ClassName                        PropertyName                   Writable
---------                        ------------                   --------
__Trustee                        Domain                             True
__Trustee                        Name                               True
__Trustee                        SID                                True
__Trustee                        SidLength                          True
__Trustee                        SIDString                          True
Win32_Trustee                    Domain                             True
Win32_Trustee                    Name                               True
Win32_Trustee                    SID                                True
Win32_Trustee                    SidLength                          True
Win32_Trustee                    SIDString                          True
__ACE                            AccessMask                         True
__ACE                            AceFlags                           True
__ACE                            AceType                            True
__ACE                            GuidInheritedObjectType            True
__ACE                            GuidObjectType                     True
__ACE                            Trustee                            True
Win32_ACE                        AccessMask                         True
Win32_ACE                        AceFlags                           True
Win32_ACE                        AceType                            True
Win32_ACE                        GuidInheritedObjectType            True
Win32_ACE                        GuidObjectType                     True
Win32_ACE                        Trustee                            True
__SecurityDescriptor             DACL                               True
__SecurityDescriptor             Group                              True
__SecurityDescriptor             Owner                              True
__SecurityDescriptor             SACL                               True
Win32_SecurityDescriptor         DACL                               True
Win32_SecurityDescriptor         Group                              True
Win32_SecurityDescriptor         Owner                              True
Win32_SecurityDescriptor         SACL                               True
Win32_PageFileSetting            InitialSize                        True
Win32_PageFileSetting            MaximumSize                        True
Win32_PageFileSetting            Name                               True
Win32_AutochkSetting             UserInputDelay                     True
Win32_QuotaSetting               DefaultLimit                       True
Win32_QuotaSetting               DefaultWarningLimit                True
Win32_QuotaSetting               ExceededNotification               True
Win32_QuotaSetting               State                              True
Win32_QuotaSetting               VolumePath                         True
Win32_QuotaSetting               WarningExceededNotification        True
Win32_WMISetting                 ASPScriptDefaultNamespace          True
Win32_WMISetting                 ASPScriptEnabled                   True
Win32_WMISetting                 AutoStartWin9X                     True
Win32_WMISetting                 BackupInterval                     True
Win32_WMISetting                 BackupLastTime                     True
Win32_WMISetting                 EnableAnonWin9xConnections         True
Win32_WMISetting                 EnableEvents                       True
Win32_WMISetting                 EnableStartupHeapPreallocation     True
Win32_WMISetting                 HighThresholdOnClientObjects       True
Win32_WMISetting                 HighThresholdOnEvents              True
Win32_WMISetting                 LoggingDirectory                   True
Win32_WMISetting                 LoggingLevel                       True
Win32_WMISetting                 LowThresholdOnClientObjects        True
Win32_WMISetting                 LowThresholdOnEvents               True
Win32_WMISetting                 MaxLogFileSize                     True
Win32_WMISetting                 MaxWaitOnClientObjects             True
Win32_WMISetting                 MaxWaitOnEvents                    True
Win32_OSRecoveryConfiguration    AutoReboot                         True
Win32_OSRecoveryConfiguration    DebugFilePath                      True
Win32_OSRecoveryConfiguration    DebugInfoType                      True
Win32_OSRecoveryConfiguration    ExpandedDebugFilePath              True
Win32_OSRecoveryConfiguration    ExpandedMiniDumpDirectory          True
Win32_OSRecoveryConfiguration    KernelDumpOnly                     True
Win32_OSRecoveryConfiguration    MiniDumpDirectory                  True
Win32_OSRecoveryConfiguration    OverwriteExistingDebugFile         True
Win32_OSRecoveryConfiguration    SendAdminAlert                     True
Win32_OSRecoveryConfiguration    WriteDebugInfo                     True
Win32_OSRecoveryConfiguration    WriteToSystemLog                   True
Win32_DCOMApplicationSetting     AuthenticationLevel                True
Win32_DCOMApplicationSetting     RemoteServerName                   True
Win32_DCOMApplicationSetting     UseSurrogate                       True
ScriptingStandardConsumerSetting MaximumScripts                     True
ScriptingStandardConsumerSetting Timeout                            True
Win32_UserProfile                RoamingPreference                  True
Win32_VolumeUserQuota            Limit                              True
Win32_VolumeUserQuota            WarningLimit                       True
Win32_ShadowStorage              MaxSpace                           True
CIM_System                       Roles                              True
CIM_ComputerSystem               Roles                              True
CIM_UnitaryComputerSystem        Roles                              True
Win32_ComputerSystem             Roles                              True
Win32_ComputerSystem             AutomaticManagedPagefile           True
Win32_ComputerSystem             AutomaticResetBootOption           True
Win32_ComputerSystem             CurrentTimeZone                    True
Win32_ComputerSystem             EnableDaylightSavingsTime          True
Win32_ComputerSystem             SystemStartupDelay                 True
Win32_ComputerSystem             SystemStartupOptions               True
Win32_ComputerSystem             SystemStartupSetting               True
Win32_ComputerSystem             Workgroup                          True
CIM_ApplicationSystem            Roles                              True
Win32_NTDomain                   Roles                              True
Win32_NetworkAdapter             NetConnectionID                    True
CIM_Printer                      ErrorInformation                   True
Win32_Printer                    ErrorInformation                   True
Win32_Printer                    Attributes                         True
Win32_Printer                    Comment                            True
Win32_Printer                    DefaultPriority                    True
Win32_Printer                    Direct                             True
Win32_Printer                    DoCompleteFirst                    True
Win32_Printer                    DriverName                         True
Win32_Printer                    EnableBIDI                         True
Win32_Printer                    EnableDevQueryPrint                True
Win32_Printer                    Hidden                             True
Win32_Printer                    KeepPrintedJobs                    True
Win32_Printer                    Local                              True
Win32_Printer                    Location                           True
Win32_Printer                    Network                            True
Win32_Printer                    Parameters                         True
Win32_Printer                    PortName                           True
Win32_Printer                    PrintJobDataType                   True
Win32_Printer                    PrintProcessor                     True
Win32_Printer                    Priority                           True
Win32_Printer                    Published                          True
Win32_Printer                    Queued                             True
Win32_Printer                    RawOnly                            True
Win32_Printer                    SeparatorFile                      True
Win32_Printer                    Shared                             True
Win32_Printer                    ShareName                          True
Win32_Printer                    StartTime                          True
Win32_Printer                    UntilTime                          True
Win32_Printer                    WorkOffline                        True
Win32_Volume                     DriveLetter                        True
Win32_Volume                     IndexingEnabled                    True
Win32_Volume                     Label                              True
Win32_LogicalDisk                VolumeName                         True
Win32_MappedLogicalDisk          VolumeName                         True
Win32_DfsNode                    Description                        True
Win32_DfsNode                    Timeout                            True
Win32_UserAccount                Disabled                           True
Win32_UserAccount                FullName                           True
Win32_UserAccount                Lockout                            True
Win32_UserAccount                PasswordChangeable                 True
Win32_UserAccount                PasswordExpires                    True
Win32_UserAccount                PasswordRequired                   True
Win32_BaseService                State                              True
Win32_SystemDriver               State                              True
Win32_Service                    State                              True
Win32_TerminalService            State                              True
Win32_PrinterDriver              FilePath                           True
Win32_PrinterDriver              InfName                            True
Win32_PrinterDriver              SupportedPlatform                  True
Win32_PrinterDriver              Version                            True
Win32_Environment                Name                               True
Win32_Environment                VariableValue                      True
Win32_IP4RouteTable              Destination                        True
Win32_IP4RouteTable              InterfaceIndex                     True
Win32_IP4RouteTable              Mask                               True
Win32_IP4RouteTable              Metric1                            True
Win32_IP4RouteTable              Metric2                            True
Win32_IP4RouteTable              Metric3                            True
Win32_IP4RouteTable              Metric4                            True
Win32_IP4RouteTable              Metric5                            True
Win32_IP4RouteTable              NextHop                            True
Win32_IP4RouteTable              Type                               True
Win32_OperatingSystem            Description                        True
Win32_OperatingSystem            ForegroundApplicationBoost         True
Win32_NTEventlogFile             MaxFileSize                        True
Win32_NTEventlogFile             OverwriteOutDated                  True
Win32_IP4PersistedRouteTable     Destination                        True
Win32_IP4PersistedRouteTable     Mask                               True
Win32_IP4PersistedRouteTable     Metric1                            True
Win32_IP4PersistedRouteTable     NextHop                            True
Win32_Registry                   ProposedSize                       True
Win32_ProcessStartup             CreateFlags                        True
Win32_ProcessStartup             EnvironmentVariables               True
Win32_ProcessStartup             ErrorMode                          True
Win32_ProcessStartup             FillAttribute                      True
Win32_ProcessStartup             PriorityClass                      True
Win32_ProcessStartup             ShowWindow                         True
Win32_ProcessStartup             Title                              True
Win32_ProcessStartup             WinstationDesktop                  True
Win32_ProcessStartup             X                                  True
Win32_ProcessStartup             XCountChars                        True
Win32_ProcessStartup             XSize                              True
Win32_ProcessStartup             Y                                  True
Win32_ProcessStartup             YCountChars                        True
Win32_ProcessStartup             YSize                              True
Win32_DiskQuota                  Limit                              True
Win32_DiskQuota                  WarningLimit                       True</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PowerShell</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>DeterminingGroup_AD_Membership</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PowerShell</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>DeterminingGroup_AD_Membership</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'From: http://www.telnetport25.com/2008/03/quick-tip-determining-group-ad-membership-using-powershell/


The function requires two parameters:

    An Active Directory Account Name (in the samAccountName format)
    The name of a security group

Therefore the syntax of the function is such: “get-groupMembership ” – 
so an example of the command in use is: get-groupMembership “andy.grogan” “Domain Admins” 
If the function derives that the account passed is a member of the group passed – the function will return 1,
 however is the account if NOT a member of the group passed the function will return 0. 
 I have provided a down-loadable copy of the file here (which also includes some demo syntax on how the return values are presented):

////////////////////////////////////////////////////////////////////
$strName = $env:username

function get-GroupMembership($DNName,$cGroup){
	
	$strFilter = "(&amp;(objectCategory=User)(samAccountName=$strName))"

	$objSearcher = New-Object System.DirectoryServices.DirectorySearcher
	$objSearcher.Filter = $strFilter

	$objPath = $objSearcher.FindOne()
	$objUser = $objPath.GetDirectoryEntry()
	$DN = $objUser.distinguishedName
		
	$strGrpFilter = "(&amp;(objectCategory=group)(name=$cGroup))"
	$objGrpSearcher = New-Object System.DirectoryServices.DirectorySearcher
	$objGrpSearcher.Filter = $strGrpFilter
	
	$objGrpPath = $objGrpSearcher.FindOne()
	
	If (!($objGrpPath -eq $Null)){
		
		$objGrp = $objGrpPath.GetDirectoryEntry()
		
		$grpDN = $objGrp.distinguishedName
		$ADVal = [ADSI]"LDAP://$DN"
	
		if ($ADVal.memberOf.Value -eq $grpDN){
			$returnVal = 1
			return $returnVal = 1
		}else{
			$returnVal = 0
			return $returnVal = 0
	
		}
	
	}else{
			$returnVal = 0
			return $returnVal = 0
	
	}
		
}

$result = get-groupMembership $strName "Administrators"
////////////////////////////////////////////////////////////////////</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PyCharm_Data</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>READ_and_PLOT_from_csv</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PyCharm_Data</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>READ_and_PLOT_from_csv</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>READ_and_PLOT_from_csv

Effective Data Science with PyCharm
https://www.youtube.com/watch?v=46RjXawJQgg

#by putting the following symbol on a line: #%%, 
# then 
	View =&gt; Scientific Mode
#the code is broken into individually executable cells
#%%

[Cntrl]-[Enter] #to execute a cell

-------------------------------------------------------------------READ

#When the .csv file is in the project folder (e.g. /data/titanic.csv)
#Use View =&gt; Scientific Mode to run cells, and show it the way this video does

from pathlib import Path
import pandas as pd

#create a data Frame
titanic_df = pd.read_csv(Path().joinpath('data','titanic.csv'))

#When you click on the titanic_df object in the variable list window, it will display

#to get a sample of the original dataframe:
sample_titanic=titanic_df.sample(10) 
 

#To see the number of NULLs in each column of the dataframe:
sum_null=titanic_df.isnull().sum()

-------------------------------------------------------------------PLOT survival based on Sex

#%%
import seaborn as sns
from matplotlib import pyplot as plt

sns.countplot(x='Survived',hue='Sex',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell

-------------------------------------------------------------------PLOT survival based on Passenger class
sns.countplot(x='Survived',hue='Pclas',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PyCharm_ODBC</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>PyODBC</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PyCharm_ODBC</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>PyODBC</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
# pyodbc is an open source Python module that makes accessing ODBC databases simple. 
# It implements the DB API 2.0specification but is packed with even more Pythonic convenience.


https://youtrack.jetbrains.com/issue/PY-31701

#'There are two way to resolve your issue:
#'
#'1. Create new project interpreter and install package PYODBC
#'    Run PyCharm and open created by you python project
#'    Open project interpreter setting:

	 File-&gt;Settings-&gt;Project:theProjName -&gt;Project Interpreter
	 
	 click the plus (+) on the right side of the right pane
	 
	 search for 'PYODBC' 
	 
	 [Install Package]
	 
#
'        * If : Click on icon Setting from right side of project interpreter value add and then choose type of suitable interpreter type
#'    If project interpreter is already added and you can see list of installed package - you can manage packages.
#'    For install new package:
#'        Click on icon "cross" from right side of list of installed packages
#'        In opened window use search bar for search needed package: in our case it's PYODBC
#'        Choose needed package and click on button install and wait when package will be installed
#'2. Try to find python interpreter where you installed package PYODBC
#'    Open cmd
#'    And determine where installed python interpreter using the following command: where python
#'    There is big chance that you installed the package for this interpreter
#'    Add found interpreter as project interpreter in PyCharm

==================================================================================================================================== supposedly these work

https://stackoverflow.com/questions/33725862/connecting-to-microsoft-sql-server-using-python?rq=1

import pyodbc 
cnxn = pyodbc.connect("Driver={SQL Server Native Client 11.0};"
                      "Server=server_name;"
                      "Database=db_name;"
                      "Trusted_Connection=yes;")


cursor = cnxn.cursor()
cursor.execute('SELECT * FROM Table')

for row in cursor:
    print('row = %r' % (row,))

------------------------------------------------------------------ create a dataframe

import pypyodbc 
import pandas as pd

cnxn = pypyodbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=server_name;"
                        "Database=db_name;"
                        "uid=User;pwd=password")
df = pd.read_sql_query('select * from table', cnxn)

--------------------------------------------------------------------------
38

#'In data source connections between a client and server there are two general types: 
#'    ODBC which uses a DRIVER 
#'    and 
#'    OLEDB which uses a PROVIDER.
#'
#'You are using a provider, SQLOLEDB, but specifying it as a driver. 
#'As far as I know, neither the pyodbc nor pypyodbc modules support Window OLEDB connections. 
#'However, the adodbapi does which uses the Microsoft ADO as an underlying component.
#'
#'Below are both approaches for your connection parameters. 
#'Also, I string format your variables as your concatenation did not properly break quotes within string. 
#'You'll notice I double the curly braces since it is needed in connection string and string.format() also uses it.

# PROVIDER
import adodbapi
conn = adodbapi.connect("PROVIDER=SQLOLEDB;Data Source={0};Database={1}; \
       trusted_connection=yes;UID={2};PWD={3};".format(ServerName,MSQLDatabase,username,password))
cursor = conn.cursor()

# DRIVER
import pyodbc
conn = pyodbc.connect("DRIVER={{SQL Server}};SERVER={0}; database={1}; \
       trusted_connection=yes;UID={2};PWD={3}".format(ServerName,MSQLDatabase,username,password))
cursor = conn.cursor()

# Although I had to get rid of the .format(...) and put the variables in the proper places. What was the format meant to do? 
#'You need to install adodbapi to use OLEDB connection. 
#'And string format is the recommended way to pass variables into a string rather than using the + operator. 
#'The curly braces with numbers are placeholders which format() fills in accordingly. You can even pass in lists and tuples using format(). 
#'Your original code did not break string and variables by quotes, so + was considered part of string

#'While this answer is great and helped me to get the issue resolved. 
#'whoever is trying to do it remember you may get an exception if you set trusted connection= yes and enter the UID/pwd in the same connection string. 
#'This is a either/or combination &amp; when you use trusted connection your NT/system credential is used for authentication even if you are explicitly mentioning UID/PWD.

-------------------------------------------------------------------------


#Following Python code worked for me. To check the ODBC connection, I first created a 4 line C# console application as listed below.

Python Code

import pandas as pd
import pyodbc 
cnxn = pyodbc.connect("Driver={SQL Server};Server=serverName;UID=UserName;PWD=Password;Database=RCO_DW;")
df = pd.read_sql_query('select TOP 10 * from dbo.Table WHERE Patient_Key &gt; 1000', cnxn)
df.head()


#Calling a Stored Procedure

 dfProcResult = pd.read_sql_query('exec dbo.usp_GetPatientProfile ?', cnxn, params=['MyParam'] )


--------------------------------------------------------------------------------------------------------

#To use sql server authentication I used following code.

import pyodbc

conn = pyodbc.connect('Driver={SQL Server};Server='+servername+  ';UID='+userid+';PWD='+password+';Database='+databasename) 
cursor1 = conn.cursor()
cursor1.execute("SELECT 1 AS DATA")


====================================================================================================================================

http://mvsourcecode.com/python-how-to-connect-to-microsoft-database-using-odbc-driver-pycharm/

import pyodbc

#original
connString = 'Trusted_Connection=no;DRIVER={ODBC Driver 17 for SQL Server};SERVER=.\\SQLEXPRESS01;PORT=1433;DATABASE=test;UID=USER1;PWD=Password;'
# I tried this but it did not work either
connString = 'Trusted_Connection=yes;DRIVER=SQL Server Native Client RDA 11.0;SERVER=cbtsql04;DATABASE=RiskMngt;UID=USER1;PWD=Password;'

try:
    cn = pyodbc.connect(connString)
    print('You are connected to db ')

except Exception as e:
    print('Error connecting to databse: ', str(e))

finally:
    cn.close()
    print('Connection closed')
====================================================================================================================================
https://stackoverflow.com/questions/30848799/connecting-to-odbc-using-pyodbc
#I've read all the faq pages from the python odbc library as well as other examples and managed to connect to the DSN, 
#using the following code:

cnxn = pyodbc.connect("DSN=DSNNAME")
cursor = cnxn.cursor()
cursor.tables()
rows = cursor.fetchall()
for row in rows:
    print row.table_name
    
#I managed to solve my issue. My code did not really change.

cnxn = pyodbc.connect("DSN=BCTHEAT")
cursor = cnxn.cursor()
cursor.execute("select * from acr.Table_one_hh")
row = cursor.fetchall()    

====================================================================================================================================

https://stackoverflow.com/questions/24387688/pyodbc-odbc-connection-not-working?rq=1

access_database_file = 'C:\\Users\\davisr\\My Documents\\TEMP\\Comp_Model_Db_Testing.mdb'       
ODBC_CONN_STR = 'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=%s;' %access_database_file–  user23208211 min ago  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PyCharm_ODBC</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>pytds</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PyCharm_ODBC</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>pytds</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/33725862/connecting-to-microsoft-sql-server-using-python?rq=1

Try using pytds, it works throughout more complexity environment than pyodbc and more easier to setup.

I made it work on Ubuntu 18.04

Ref: https://github.com/denisenkom/pytds

Example code in documentation:
import pytds
with pytds.connect('server', 'database', 'user', 'password') as conn:
    with conn.cursor() as cur:
        cur.execute("select 1")
        cur.fetchall()</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_API_Requests</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>about_API_types</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_API_Requests</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>about_API_types</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'REST is a type of API. Not all APIs are REST, but all REST services are APIs.
#	Although REST can be used on nearly any protocol, they take advantage of HTTP when used for web APIs. 

#'RESTful APIs were designed to take advantage of existing protocols. 
#'While REST - or Representational State Transfer - can be used over nearly any protocol, 


#'API 
#'    is a very broad term. 
#'    Generally it's how one piece of code talks to another. 
#'    In web development API often refers to the way in which we retrieve information from an online service. 
#'    The API documentation will give you a list of URLs, query parameters and other information on how to make a request from the API, 
#'        and inform you what sort of response will be given for each query.
#'
#'REST 
#'    is a set of rules/standards/guidelines for how to build a web API. 
#'    Since there are many ways to do so, having an agreed upon system of structuring an API saves time in making decisions when building one, 
#'        and saves time in understanding how to use one.

#'Other popular API paradigms include SOAP and GraphQL.

#'REST 
#'    mostly just refers to using the HTTP protocol the way it was intended. 
#'    Use the GET HTTP method on a URL to retrieve information, 
#'        possibly in different formats based on HTTP Accept headers. 
#'    Use the POST HTTP method to create new items on the server,
#'    PUT to edit existing items, 
#'    DELETE to delete them. 
#'    Make the API idempotent, i.e. repeating the same query with the same information should yield the same result. 
#'    Structure your URLs in a hierarchical manner etc.
#'

#'REST 
#'    just is a guiding principle how to use URLs and the HTTP protocol to structure an API. 
#'    It says nothing about return formats, which may just as well be JSON.
#'
#'That is opposed to, for example, APIs that send binary or XML messages to a designated port, not using differences in HTTP methods or URLs at all.

#'REST 
#'    basically is a style of web architecture that governs the behavior of clients and servers. 
#'While API is a more general set of protocols and is deployed over the software to help it interact with some other software. 
#'REST is only geared towards web applications. 
#'    And mostly deals with HTTP requests and responses. 
#'    This makes it practically usable by any programming language and easy to test.
#'

#'Web API is basically an open-source framework that is used to write HTTP APIs. 
#'Developers can build Web API using a vast array of technologies such as .NET, and Java, among others. Web API can be RESTful or not.
#'
#'SOAP (Simple Access Protocol) is a standard messaging or communication protocol system 
#'    that allows processes that utilize various operating systems such as Windows and Linux to interact and communicate through HTTP and its XML. 
#'    SOAP APIs are designed with the capability to create, update, recover and delete records such as passwords, leads, accounts, and custom objects. 
#'    While Web API in the time of Web 1.0 was synonymous with SOAP-based web services, today in Web 2.0, the term SOAP is edging towards REST-style web resources.

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_API_Requests</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>requests__basic_general_usage</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_API_Requests</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>requests__basic_general_usage</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

================================================================================================
Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More
https://www.youtube.com/watch?v=tb8gHvYlCFs

#'GET
#'    Pass Values in query string only (i.e. the URL)
#'    Special characters must be escaped
#'    Limited amount of data
#'POST
#'    Pass Values in query string and body
#'    No need to escape special characters if passed in body
#'    Can pass large amounts of data, including images, in body
 
#USE POST, rather than GET, e.g. when posting a form to a website 

import requests

theURL = 'https://xkcd.com/353/'

theResponse = requests.get(theURL)

print(theResponse)
#OUTPUT
#-------------------------------
#&lt;Response [200]&gt;

#To just get the 200 code:
print(theResponse.status_code)

#OUTPUT   (200s are success, 300s are redirects, 400 are client errors, 500s are server errors)
#-------------------------------
#200

#To just find out if the page is ok:
print(theResponse.ok)
#OUTPUT
#-------------------------------
# True

print(dir(theResponse))
#OUTPUT: the list of attributes and methods that we can access in the response
#-----------------------------
# ['__attrs__', '__bool__', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__',
# '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__',
# '__le__', '__lt__', '__module__', '__ne__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__',
# '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_content', '_content_consumed', '_next',
# 'apparent_encoding', 'close', 'connection', 'content', 'cookies', 'elapsed', 'encoding', 'headers', 'history', 'is_permanent_redirect',
# 'is_redirect', 'iter_content', 'iter_lines', 'json', 'links', 'next', 'ok', 'raise_for_status', 'raw', 'reason', 'request', 'status_code', 'text', 'url']

print(help(theResponse))    #This outputs a much more detailed list of the attributes and methods with documenation of them

print(theResponse.text)      #This outputs the raw HTML from the page in UNICODE

======================================================== IMAGE file to disk
#-------------------------------------------------------------------------------------
#suppose you have the URL for a .png image: https://imgs.xkcd.com/comics/python.png

theURL2 = 'https://imgs.xkcd.com/comics/python.png'
theResponse2 = requests.get(theURL2)
print(theResponse2.text)        #This will print out the bytes from the image
#---------------------------------------------------------------------------------
# To download the image, in bytes, to a file

theURL3 = 'https://imgs.xkcd.com/comics/python.png'
theResponse3 = requests.get(theURL3)
with open('comic.png', 'wb') as f:    #This will save the file to the same path as the Python module,  wb = write bytes to file
    f.write(theResponse3.content)


seperator = ','
print(str(theResponse2.headers).replace(seperator, '\n'))

# OUTPUT
#==============================================
# {'Connection': 'keep-alive'
#  'Content-Length': '90835'
#  'Server': 'nginx'
#  'Content-Type': 'image/png'
#  'Last-Modified': 'Mon
#  01 Feb 2010 13:07:49 GMT'
#  'ETag': '"4b66d225-162d3"'
#  'Expires': 'Sat
#  02 Jan 2021 15:06:51 GMT'
#  'Cache-Control': 'max-age=300'
#  'Accept-Ranges': 'bytes'
#  'Date': 'Sat
#  02 Jan 2021 15:24:54 GMT'
#  'Via': '1.1 varnish'
#  'Age': '191'
#  'X-Served-By': 'cache-dfw18653-DFW'
#  'X-Cache': 'HIT'
#  'X-Cache-Hits': '1'
#  'X-Timer': 'S1609601095.806954
# VS0
# VE1'}

========================================================
#Create a dictionary of parms and parm values
payload = {'page': 2, 'count': 25}
theURL4 = 'https://httpbin.org/get'
#Use the payload dictionary of parm values to get a response
theResponse4 = requests.get(theURL4, params=payload)
print(theResponse4.text)    #this prints out the raw HTML from the resonse

#OUTPUT
#=============================
# {
#   "args": {
#     "count": "25",
#     "page": "2"
#   },
#   "headers": {
#     "Accept": "*/*",
#     "Accept-Encoding": "gzip, deflate",
#     "Host": "httpbin.org",
#     "User-Agent": "python-requests/2.25.1",
#     "X-Amzn-Trace-Id": "Root=1-5ff09264-2e5467c96e74386c086dc95b"
#   },
#   "origin": "68.105.48.3",
#   "url": "https://httpbin.org/get?page=2&amp;count=25"
# }

#-------------------------------------------------------------------------------------


print(theResponse4.url)     #This asks for the URL that was requested

#OUTPUT, which shows that the correct URL parms were fed into the API, rather than having to manually put them into the URL
#=============================
# https://httpbin.org/get?page=2&amp;count=25

======================================================================== FORM

#USE POST, rather than GET, e.g. when posting a form to a website

payload5 = {'username': 'glenn', 'password': 'test'}
theURL5 = 'https://httpbin.org/post'
theResponse5 = requests.post(theURL5, data=payload5)    # &lt;==== use 'post', and 'data'
# print(theResponse5.text)


#OUTPUT
#===================================================
# {
#   "args": {},                                   &lt;====There were no Args
#   "data": "",
#   "files": {},
#   "form": {
#     "password": "test",                          &lt;===== Here is the data that was posted
#     "username": "glenn"
#   },
#   "headers": {
#     "Accept": "*/*",
#     "Accept-Encoding": "gzip, deflate",
#     "Content-Length": "28",
#     "Content-Type": "application/x-www-form-urlencoded",
#     "Host": "httpbin.org",
#     "User-Agent": "python-requests/2.25.1",
#     "X-Amzn-Trace-Id": "Root=1-5ff095d0-6dcb98e647bf2e1b47bf9748"
#   },
#   "json": null,
#   "origin": "68.105.48.3",
#   "url": "https://httpbin.org/post"
# }

========================================================JSON
# print(theResponse5.json())
print(str(theResponse5.json()).replace(',', '\n'))

#OUTPUT
#=======================================================
# {'args': {}
#  'data': ''
#  'files': {}
#  'form': {'password': 'test'
#  'username': 'glenn'}
#  'headers': {'Accept': '*/*'
#  'Accept-Encoding': 'gzip
#  deflate'
#  'Content-Length': '28'
#  'Content-Type': 'application/x-www-form-urlencoded'
#  'Host': 'httpbin.org'
#  'User-Agent': 'python-requests/2.25.1'
#  'X-Amzn-Trace-Id': 'Root=1-5ff0994e-3ad0108c561bef7f2120d6af'}
#  'json': None
#  'origin': '68.105.48.3'
#  'url': 'https://httpbin.org/post'}

#Put the JSON response directly into a dictionanary:

response_dict = theResponse5.json()

#and then access just the 'form' key from the dictionary

print(response_dict['form'])
#OUTPUT
# =================================
#{'password': 'test', 'username': 'glenn'}


========================================================TIMEOUT
#The 'timeout' parameter can be used to avoid tying up the code while it waits endlessly
#This URL creates a 6 second timeout on the server
theURL6 = 'https://httpbin.org/delay/6'
#Using the parm value of '3' means that the read operation will timeout before the server times out.
#This just demonstrates the client side timeout parm
theResponse6 = requests.get(theURL6,timeout=3)
# OUTPUT
#============================
#generates a lot of error messages, but the error messages include:
#"socket.timeout: The read operation timed out"
#and
#requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='httpbin.org', port=443): Read timed out. (read timeout=3)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_API_Requests</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>requests_Authentication</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_API_Requests</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>requests_Authentication</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://requests.readthedocs.io/en/master/user/authentication/

Basic Authentication

#Making requests with HTTP Basic Auth is very simple:

from requests.auth import HTTPBasicAuth
requests.get('https://api.github.com/user', auth=HTTPBasicAuth('user', 'pass'))
#OUTPUT
#=========================
#&lt;Response [200]&gt;		#when successful


#In fact, HTTP Basic Auth is so common that Requests provides a handy shorthand for using it:

requests.get('https://api.github.com/user', auth=('user', 'pass'))
#OUTPUT
#=========================
#&lt;Response [200]&gt;

#Providing the credentials in a tuple like this is exactly the same as the HTTPBasicAuth example above.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_API_stocks</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>AlphaAdvantageAPI_Install_Usage</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_API_stocks</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>AlphaAdvantageAPI_Install_Usage</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>AlphaAdvantageAPI_Install_Usage

# install with pandas support, from inside Pycharm at the terminal
&gt; pip3 install alpha_vantage pandas


# To get data from the API, simply import the library and call the object with your API key. 
# Next, get ready for some awesome, free, realtime finance data. 
# Your API key may also be stored in the environment variable ALPHAVANTAGE_API_KEY.

from alpha_vantage.timeseries import TimeSeries
ts = TimeSeries(key='YOUR_API_KEY')
# Get json object with the intraday data and another with  the call's metadata
data, meta_data = ts.get_intraday('GOOGL')

# You may also get a key from rapidAPI. Use your rapidAPI key for the key variable, and set rapidapi=True

ts = TimeSeries(key='YOUR_API_KEY',rapidapi=True)

# Internally there is a retries counter, that can be used to minimize connection errors 
#     (in case that the API is not able to respond in time), 
#     the default is set to 5 but can be increased or decreased whenever needed.

ts = TimeSeries(key='YOUR_API_KEY',retries='YOUR_RETRIES')

# The library supports giving its results as json dictionaries (default), 
#     pandas dataframe (if installed) or csv, 
#     simply pass the parameter 
        output_format='pandas' 
#     to change the format of the output for all the API calls in the given class. 
# Please note that some API calls do not support the csv format 
#     (namely ForeignExchange, SectorPerformances and TechIndicators) 
#     because the API endpoint does not support the format on their calls either.

ts = TimeSeries(key='YOUR_API_KEY',output_format='pandas')

The pandas data frame given by the call, 
    can have either a date string indexing 
    or an integer indexing (by default the indexing is 'date'), 
    depending on your needs, you can use both.

 # For the default date string index behavior
ts = TimeSeries(key='YOUR_API_KEY',output_format='pandas', indexing_type='date')
# For the default integer index behavior
ts = TimeSeries(key='YOUR_API_KEY',output_format='pandas', indexing_type='integer')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Class_Object</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>OOP_01_Class_Instance</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Class_Object</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>OOP_01_Class_Instance</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#OOP_01_Class_Instance

# Python Object Oriented Programming by Joe Marini course example
# Basic class definitions


# TODO: create a basic class
class Book:
    # initializer function, not necessarily constructor, b/c it is already created when this function is called
    # first parm (i.e. 'self', is the object handle)
    def __init__(self,title):
        self.title = title


#pass    #pass is a null operation — when it is executed, nothing happens.


# TODO: create instances of the class
b1 = Book("Brave new world")
b2 = Book("War and piece")


# TODO: print the class and property
print(b1)
print(b1.title)


#OUTPUT
=====================================================
&lt;__main__.Book object at 0x0000026A597191C0&gt;
Brave new world</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Class_Object</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>OOP_11_Object_Equality_and_Comparison</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Class_Object</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>OOP_11_Object_Equality_and_Comparison</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#OOP_11_Object_Equality_and_Comparison

# by default objects don't know how to compare themselves to each other
# so use the equality and comparison methods

# Python Object Oriented Programming by Joe Marini course example
# simple equality (i.e. '==' is  just a test of equal location in memory}



class Book:
    def __init__(self, title, author, price):
        super().__init__()
        self.title = title
        self.author = author
        self.price = price

    # the __eq__ method checks for equality between two objects
    def __eq__(self, value):            # &lt;== OVERRIDE
        if not isinstance(value, Book):     #Take the value passed and compare it to the Book class
            raise ValueError("Can't compare book to non-book type")
        return (self.title == value.title and
                self.author == value.author and
                self.price == value.price)

    # the __ge__ establishes &gt;= relationship with another obj, defined by the developer's code
    def __ge__(self, value):            # &lt;== OVERRIDE
        if not isinstance(value, Book):
            raise ValueError("Can't compare book to non-book type")
        return self.price &gt;= value.price

    # the __lt__ establishes &lt;= relationship with another obj, defined by the developer's code
    def __lt__(self, value):            # &lt;== OVERRIDE
        if not isinstance(value, Book):
            raise ValueError("Can't compare book to non-book type")
        return self.price &lt; value.price


b1 = Book("War and Peace", "Leo Tolstoy", 39.95)
b2 = Book("The Catcher in the Rye", "JD Salinger", 29.95)
b3 = Book("War and Peace", "Leo Tolstoy", 39.95)
b4 = Book("To Kill a Mockingbird", "Harper Lee", 24.95)

# Check for equality using code in __eq__ if it is defined, otherwise compare location in memory
print(b1 == b3)
print(b1 == b2)
# print(b1 == 42)

# Check for greater and lesser value
print(b2 &gt;= b1)
print(b2 &lt; b1)
print(b3 &gt;= b2)

# Now we can sort them
books = [b1, b3, b2, b4]
books.sort()                    # The built in 'sort' function uses the '__lt__' method to evaluate
print([book.title for book in books])
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Class_Object</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>OOP_6_Abstract_Base_Class_after_abstracting</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Class_Object</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>OOP_6_Abstract_Base_Class_after_abstracting</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#OOP_6_Abstract_Base_Class_after_abstracting

# 1] You don't want consumers of your base class to be able to create instances of the base class itself.
# Because it's just intended to be a blueprint.
# 2] second, you want to enforce the constraint that there are certain methods in the base class that subclasses have to implement.
#   And this is where abstract base classes become really useful.

from abc import ABC, abstractmethod

class GraphicShape(ABC):    # 1st make the base class inherit from ABC, where ABC=Abstract Base Classs
    def __init__(self):
        super().__init__()

    # add the @abstractmethod decorator to indicate that this method is an abstract method,
    #   so each sub-class has to override this method
    #   If a sub-class runs without an override then it will get an error:
    #       TypeError: Can't instantiate abstract class GraphicShape with abstract methods calcArea
    #             or:   Can't instantiate abstract class Circle with abstract methods calcArea
    @abstractmethod
    def calcArea(self):
        pass
        # empty, i.e. there is no implementation of this, but we want classes that derive from it to implment this method


class Circle(GraphicShape):
    def __init__(self, radius):
        self.radius = radius

    def calcArea(self):
        return 3.14 * (self.radius ** 2)

class Square(GraphicShape):
    def __init__(self, side):
        self.side = side

    def calcArea(self):
        return self.side * self.side

# g = GraphicShape()        #This won't work anymore b/c the class is abstract

c = Circle(10)
print(c.calcArea())
s = Square(12)
print(s.calcArea())
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Class_Object</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>OOP_6_Abstract_Base_Class_before_abstracting</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Class_Object</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>OOP_6_Abstract_Base_Class_before_abstracting</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#OOP_6_Abstract_Base_Class_before_abstracting

class GraphicShape:			#want to make this abstract
    def __init__(self):
        super().__init__()

    def calcArea(self):		#want all subclasses to override this method
        pass


class Circle(GraphicShape):
    def __init__(self, radius):
        self.radius = radius


class Square(GraphicShape):
    def __init__(self, side):
        self.side = side


g = GraphicShape()

c = Circle(10)
print(c.calcArea())
s = Square(12)
print(s.calcArea())
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Class_Object</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>OOP_8_Interfaces</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Class_Object</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>OOP_8_Interfaces</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code># abstract base class, and multiple inheritance
#   let Python implement 'Interfaces'

from abc import ABC, abstractmethod

class JSONify(ABC):     # &lt;===== this acts like an interface
    @abstractmethod     # &lt;===== classes that inherit from JSONify will have to implement 'toJSON' method
    def toJSON(self):
        pass


class GraphicShape(ABC):
    def __init__(self):
        super().__init__()

    @abstractmethod
    def calcArea(self):
        pass

#By adding JSONify abstract class as a 'parm' of this class:
#   This means that the Circle method has to override
#       and impliment the toJson Method in it's base class JSONify
#       otherwise it will throw an error: Can't instatiate class Circle with abstract method toJSON
class Circle(GraphicShape,JSONify):	# &lt;==== Multiple inheritance
    def __init__(self, radius):
        self.radius = radius

    def calcArea(self):
        return 3.14 * (self.radius ** 2)

    #must add this method b/c Circle implements JSONify, which has @abstractmethod 'toJSON'
    def toJSON(self):
        return f"{{\" Circle\" : {str(self.calcArea())} }}"



c = Circle(10)
print(c.calcArea())
print(c.toJSON())</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_DATA_read_and_plot</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>from_CSV</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_DATA_read_and_plot</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>from_CSV</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>READ_and_PLOT_from_csv

Effective Data Science with PyCharm
https://www.youtube.com/watch?v=46RjXawJQgg

#by putting the following symbol on a line: #%%, 
# then 
	View =&gt; Scientific Mode
#the code is broken into individually executable cells
#%%

[Cntrl]-[Enter] #to execute a cell

-------------------------------------------------------------------READ

#When the .csv file is in the project folder (e.g. /data/titanic.csv)
#Use View =&gt; Scientific Mode to run cells, and show it the way this video does

from pathlib import Path
import pandas as pd

#create a data Frame
titanic_df = pd.read_csv(Path().joinpath('data','titanic.csv'))

#When you click on the titanic_df object in the variable list window, it will display

#to get a sample of the original dataframe:
sample_titanic=titanic_df.sample(10) 
 

#To see the number of NULLs in each column of the dataframe:
sum_null=titanic_df.isnull().sum()

-------------------------------------------------------------------PLOT survival based on Sex

#%%
import seaborn as sns
from matplotlib import pyplot as plt

sns.countplot(x='Survived',hue='Sex',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell

-------------------------------------------------------------------PLOT survival based on Passenger class
sns.countplot(x='Survived',hue='Pclas',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_DataTypes</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>COLLECTION_List_for_items_in_list</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_DataTypes</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>COLLECTION_List_for_items_in_list</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>for n in [1,2,3,4,5]:
    if n &lt; 5:
        continue
    print("...." + str(n))

#OUTPUT
----------------------
#....5

=================================

for n in [1,2,3,4,5, 6,7]:
    if n == 5:
        break
    print("...." + str(n))
    
#OUTPUT
----------------------
#....1
#....2
#....3
#....4

==============================================================
import keyword

for  item in keyword.kwlist:
    print(item)
    
#OUTPUT
----------------------
# False
# None
# True
# __peg_parser__
# and
# as
# assert
# async
# await
# break
# class
# continue
# def
# del
# elif
# else
# except
# finally
# for
# from
# global
# if
# import
# in
# is
# lambda
# nonlocal
# not
# or
# pass
# raise
# return
# try
# while
# with
# yield</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Functions</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>**kwargs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Functions</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>**kwargs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#Key word arguments

#'The special syntax **kwargs in function definitions in python is used to pass a keyworded, 
#'    variable-length argument list. 
#'We use the name kwargs with the double star. 
#'    The reason is because the double star allows us to pass through keyword arguments (and any number of them).
#'
#'A keyword argument is where you provide a name to the variable as you pass it into the function.
#'One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. 
#'That is why when we iterate over the kwargs there doesn’t seem to be any order in which they were printed out.

def main():
    kitten(Buffy = 'meow', Zilla = 'grr', Angel = 'rawr')
    print("------------------")
    x = dict(Buffy = 'meow', Zilla = 'grr', Angel = 'rawr')	#x is a dictionary
    kitten(**x)

def kitten(**kwargs):
    if len(kwargs):
        for k in kwargs:
            print('Kitten {} says {}'.format(k, kwargs[k]))
    else: print('Meow.')

if __name__ == '__main__': main()
#OUTPUT
Kitten Buffy says meow
Kitten Zilla says grr
Kitten Angel says rawr
------------------
Kitten Buffy says meow
Kitten Zilla says grr
Kitten Angel says rawr

#-------------------------------------------------------
# Python program to illustrate   
# *kargs for variable number of keyword arguments 
  
def myFun(**kwargs):  
    for key, value in kwargs.items(): 
        print ("%s == %s" %(key, value)) 
  
# Driver code 
myFun(first ='Geeks', mid ='for', last='Geeks')   

#OUTPUT
last == Geeks
mid == for
first == Geeks

#---------------------------------------------------------------------------

# Python program to illustrate  **kargs for  
# variable number of keyword arguments with 
# one extra argument. 
  
def myFun(arg1, **kwargs):  
    for key, value in kwargs.items(): 
        print ("%s == %s" %(key, value)) 
  
# Driver code 
myFun("Hi", first ='Geeks', mid ='for', last='Geeks')   

#OUTPUT
last == Geeks
mid == for
first == Geeks

#---------------------Using *args and **kwargs to call a function----------------


def myFun(arg1, arg2, arg3): 
    print("arg1:", arg1) 
    print("arg2:", arg2) 
    print("arg3:", arg3) 
      
# Now we can use *args or **kwargs to 
# pass arguments to this function :  
args = ("Geeks", "for", "Geeks") 
myFun(*args) 
  
kwargs = {"arg1" : "Geeks", "arg2" : "for", "arg3" : "Geeks"} 
myFun(**kwargs) 

#OUTPUT
arg1: Geeks
arg2: for
arg3: Geeks
arg1: Geeks
arg2: for
arg3: Geeks</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Functions</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>about_PYTHON_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Functions</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>about_PYTHON_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_PYTHON_Functions

https://docs.python.org/2/library/functions.html#super

All funcctions return a value, even if it is 'None'


#In Python a function is defined using the def keyword:
# Functions return a value, even if it is 'None'

Parameter 
#	is the variable listed inside the parentheses in the function definition.

Argument 
#	is the value that are sent to the function when it is called.
#Arguments are specified after the function name, inside the parentheses. 
#	You can add as many arguments as you want, just separate them with a comma.

def myFunction(n):
    print(n)
    return n * 2

#To call a function, use the function name followed by parenthesis:
myFunction(47)
 

Arbitrary Arguments, *args
#	If you do not know how many arguments that will be passed into your function, 
#	add a * before the parameter name in the function definition.

Keyword Arguments
#	You can also send arguments with the key = value syntax.

def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")


#Arbitrary Keyword Arguments, **kwargs
#------------------------------------------------------
#If you do not know how many keyword arguments that will be passed into your function, 
#	add two asterisk: ** before the parameter name in the function definition.
#This way the function will receive a dictionary of arguments, and can access the items accordingly:

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")

#OUTPUT
His last name is Refsnes
#------------------------------------------------------

#DEFAULT Value
def myFunction(n=1):
    print(n)

#Tocall a function without specifying the argument, it will use the default
myFunction()
#------------------------------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Functions</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>callByValueAndReference_for_ImmutableAndMutableObjects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Functions</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>callByValueAndReference_for_ImmutableAndMutableObjects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#Call by Value for Immutable, but call by reference when Value is Mutable
#The function operates on a copy of the variable, so the value is passed, b/ not the object

# passing an Immutable object===================================== then a copy is passed 

def main():
    x=5
    print(id(x))    #print before it is passed into the function
    kitten(x)   # 5 goes into the function
    print(f'in main: x is {x}')

def kitten(a):  # 5 comes into the function, and is put into variable 'a'
    print(id(a))  #print before it is modified, the object ID is the same as the calling function
    a=3         #  while in the function the a is modified, but the higher scope object x is not affected
    print(id(a))  #print after it is modified, the object ID is NOT the same as the calling function
    print('Meow')
    print(a)

    
#OUTPUT
9079136   #&lt;===  Same Immutable object 
9079136   #&lt;===  Same Immutable object
9079072	  #&lt;===  Until a new Immutable object (i.e. integer is assigned)
Meow
3
in main: x is 5    # &lt;====== they are not the same, b/c the value was changed in the second function
#-------------------------------------------------------------------------
# passing an Mutable object===================================== then a reference to the object is passed 

def main():
    x=[5]
    print(id(x))    #print before it is passed into the function
    kitten(x)   # 5 goes into the function
    print(f'in main: x is {x}')

def kitten(a):  # 5 comes into the function, and is put into variable 'a'
    print(id(a))  #print before it is modified, the object ID is the same as the calling function
    a[0]=3         #  while in the function the a is modified, but the higher scope object x is not affected
    print(id(a))  #print after it is modified, the object ID is NOT the same as the calling function
    print('Meow')
    print(a)

    
#OUTPUT
139627035041992   #&lt;===  Same mutable object at all stages
139627035041992   #&lt;===  Same mutable object at all stages
139627035041992   #&lt;===  Same mutable object at all stages
Meow
[3]
in main: x is [3]   # &lt;====== Now they are the same, b/c the reference was passed and so when it was changed
                    #         in the second function, it was also changed in the first function
#-------------------------------------------------------------------------

#When you assign a mutable: you are assigning a reference to the mutable object:
x = [5]
y=x			# &lt;=== assigning a mutable to y
y[0] = 3
	
print(id(x))  #same object ID
print(id(y))  #same object ID 
print(x)	# x will give the same value, as y
print(y)	# b/c y is using the reference to x
    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Functions</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>decorator_EXAMPLE_1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Functions</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>decorator_EXAMPLE_1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#This wraps the function 'say_whee' in another function that checks the time

def not_during_the_night(func):
    def wrapper():
        if 7 &lt;= datetime.now().hour &lt; 22:
            func()
        else:
            pass  # Hush, the neighbors are asleep
    return wrapper

def say_whee():
    print("Whee!")

say_whee = not_during_the_night(say_whee)

say_whee()

#OUTPUT
Whee!   #during the right hours</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Functions</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>function_as_a_parameter_of_a_Function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Functions</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>function_as_a_parameter_of_a_Function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#function_as_a_parameter_of_a_Function

#==============================================================#####################################
import math

def whatever(func):
    print("The function " + func.__name__ + " was passed to whatever")
    res = 0
    for x in [1, 2, 2.5]:
        res += func(x)
    return res

print(whatever(math.sin))
print(whatever(math.cos))
#OUTPUT
The function sin was passed to whatever
2.3492405557375347
The function cos was passed to whatever
-0.6769881462259364

#==============================================================#####################################
def g():
    print("Hi, it's me 'g'")
    print("Thanks for calling me")
    
def f(func):
    print("Hi, it's me 'f'")
    print("I will call 'func' now")
    func()
          
f(g)		#&lt;======= function g as a parameter of f
#OUTPUT:
Hi, it's me 'f'
I will call 'func' now
Hi, it's me 'g'
Thanks for calling me
#==============================================================#####################################
#'You may not be satisfied with the output. 
#'    'f' should write that it calls 'g' and not 'func'. 
#'Of course, we need to know what the 'real' name of func is. 
#'For this purpos, we can use the attribute __name__, as it contains this name:

def g():
    print("3] Hi, it's me 'g'")
    print("4] Thanks for calling me")


def f(func):
    print("1] Hi, it's me 'f'")
    print("2] I will call 'func' now")
    func()
    print("5] func's real name is " + func.__name__)

print("0] START--------------------------------------------")
f(g)
print("999] END--------------------------------------------")

#OUTPUT========================================================

0] START--------------------------------------------
1] Hi, it's me 'f'
2] I will call 'func' now
3] Hi, it's me 'g'
4] Thanks for calling me
5] func's real name is g
999] END--------------------------------------------
#==============================================================#####################################</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Functions</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>MAIN_function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Functions</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>MAIN_function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#__name__   is the name of the current module
#           if this file had been included, using an import statement
#           , then this would be running as a module, and the name of the module 
#             would be where you see the string: '__main__'
#           Since this was not brought in using an 'import' statement but rather is 
#           running as the MAIN program, the string '__main__' is a special value which
#           means this is the MAIN program   


def main():
    kitten()	# &lt;==  This would  not work without the last statement b/c 'kitten()' is not defined yet 
    kittenWithArguments('hat', 'cat', 'bat') #&lt;== Must pass in 3 arguments, since it is defined w/ 3 Parameters
    kittenWithAnOptionalArgument('hat', 'cat') #&lt;== Must pass in 2 arguments, b/c the third parm is optional
                                               #    The optional parameters, must come after the required parms
    
    
def kitten():
    print('Meow.')

def kittenWithArguments(a, b, c ):
    print(a, b, c)
    
def kittenWithAnOptionalArgument(a, b, c='whatever' ):
    print(a, b, c)    

if __name__ == '__main__': main()</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_logic_loops_Conditionals</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>SWITCH_example_refactoring</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_logic_loops_Conditionals</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>SWITCH_example_refactoring</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#Basic strategy; Map to a dictionary of callables


================================================================================== v0: clumsy
"""Kafka - the adventure game you cannot win."""


def play():

    position = (0, 0)
    alive = True

    while position:

        #LOOP #1
        #================================================================
        if position == (0, 0):
            print("You are in a maze of twisty passages, all alike.")
        elif position == (1, 0):
            print("You are on a road in a dark forest. To the north you can see a tower.")
        elif position == (1, 1):
            print("There is a tall tower here, with no obvious door. A path leads east.")
        else:
            print("There is nothing here.")

        command = input()

        # LOOP #2
        # ================================================================
        i, j = position
        if command == "N":
            position = (i, j + 1)
        elif command == "E":
            position = (i + 1, j)
        elif command == "S":
            position = (i, j - 1)
        elif command == "W":
            position = (i - 1, j)
        elif command == "L":
            pass
        elif command == "Q":
            position = None
        else:
            print("I don't understand")

    print("Game over")

if __name__ == '__main__':
    play()
================================================================================== v1 
# Map to a dictionary of callables
# clumsy version allows changing  position in 5  places, modify this  to  only  allow  changing  position in one place

# Since 'Print'  is a function, it  can be used in a  lambda
# replace 1st IF-ELIF-ELSE w/ dictionary of Lambda functions 
# replace 2nd IF-ELIF-ELSE w/ dictionary of function calls 

"""Kafka - the adventure game you cannot win."""


def go_north(position):
    i, j = position
    new_position = (i, j + 1)
    return new_position


def go_east(position):
    i, j = position
    new_position = (i + 1, j)
    return new_position


def go_south(position):
    i, j = position
    new_position = (i, j - 1)
    return new_position


def go_west(position):
    i, j = position
    new_position = (i - 1, j)
    return new_position


def look(position):
    return position


def quit_game(position):
    return None


def play():

    position = (0, 0)
    alive = True

    #LOOP #1
    #================================================================
	# replace 1st IF-ELIF-ELSE w/ dictionary of Lambda functions; split into the look-up, and the function call
    while position:

        locations = {
            (0, 0): lambda: print("You are in a maze of twisty passages, all alike."),
            (1, 0): lambda: print("You are on a road in a dark forest. To the north you can see a tower."),
            (1, 1): lambda: print("There is a tall tower here, with no obvious door. A path leads east."),
        }

        try:
            location_action = locations[position]		# &lt;== Part 1: the look-up of "location_action"
        except KeyError:
            print("There is nothing here.")
        else:
            location_action()							# &lt;== Part 2: call to "location_action"


        #LOOP #2
        #================================================================

		# replace 2nd IF-ELIF-ELSE w/ dictionary of function calls; split into the look-up, and the call
        command = input("? ")

        actions = {
            "N": go_north,
            "E": go_east,
            "W": go_west,
            "S": go_south,
            "L": look,
            "Q": quit_game,
        }

        try:
            command_action = actions[command]		# &lt;== Part 1: the look-up of "command_action"
        except KeyError:
            print("I don't understand")
        else:
            position = command_action(position)		# &lt;== Part 2: call to "command_action"

    print("Game over")

if __name__ == '__main__':
    play()


================================================================================== v2
#Replace both IF-ELIF-ELSE loops w/ dictionary of function calls 

"""Kafka - the adventure game you cannot win."""


def go_north(position):
    i, j = position
    new_position = (i, j + 1)
    return new_position


def go_east(position):
    i, j = position
    new_position = (i + 1, j)
    return new_position


def go_south(position):
    i, j = position
    new_position = (i, j - 1)
    return new_position


def go_west(position):
    i, j = position
    new_position = (i - 1, j)
    return new_position


def look(position):
    return position


def quit_game(position):
    return None


def labyrinth(position, alive):
    print("You are in a maze of twisty passages, all alike.")
    return position, alive


def dark_forest_road(position, alive):
    print("You are on a road in a dark forest. To the north you can see a tower.")
    return position, alive


def tall_tower(position, alive):
    print("There is a tall tower here, with no obvious door. A path leads east.")
    return position, alive


def rabbit_hole(position, alive):
    print("You fall down a rabbit hole into a labyrinth.")
    return (0, 0), alive


def play():

    position = (0, 0)
    alive = True


    #LOOP #1
    #================================================================
    while position:

        locations = {
            (0, 0): labyrinth,
            (1, 0): dark_forest_road,
            (1, 1): tall_tower,
            (2, 1): rabbit_hole,
        }

        try:
            location_action = locations[position]
        except KeyError:
            print("There is nothing here.")
        else:
            position, alive = location_action(position, alive)

        command = input("? ")

        #LOOP #2
        #================================================================
        actions = {
            "N": go_north,
            "E": go_east,
            "W": go_west,
            "S": go_south,
            "L": look,
            "Q": quit_game,
        }

        try:
            command_action = actions[command]
        except KeyError:
            print("I don't understand")
        else:
            position = command_action(position)

    print("Game over")

if __name__ == '__main__':
    play()


================================================================================== v3
#This final version adds a Dead, and Quit to get out of the WHILE loop
"""Kafka - the adventure game you cannot win."""


def go_north(position):
    i, j = position
    new_position = (i, j + 1)
    return new_position


def go_east(position):
    i, j = position
    new_position = (i + 1, j)
    return new_position


def go_south(position):
    i, j = position
    new_position = (i, j - 1)
    return new_position


def go_west(position):
    i, j = position
    new_position = (i - 1, j)
    return new_position


def look(position):
    return position


def quit_game(position):
    return None


def labyrinth(position, alive):
    print("You are in a maze of twisty passages, all alike.")
    return position, alive


def dark_forest_road(position, alive):
    print("You are on a road in a dark forest. To the north you can see a tower.")
    return position, alive


def tall_tower(position, alive):
    print("There is a tall tower here, with no obvious door. A path leads east.")
    return position, alive


def rabbit_hole(position, alive):
    print("You fall down a rabbit hole into a labyrinth.")
    return (0, 0), alive


def lava_pit(position, alive):
    print("You fall into a lava pit.")
    return position, False


def play():

    position = (0, 0)
    alive = True

    while position:

        locations = {
            (0, 0): labyrinth,
            (1, 0): dark_forest_road,
            (1, 1): tall_tower,
            (2, 1): rabbit_hole,
            (1, 2): lava_pit,
        }

        try:
            location_action = locations[position]
        except KeyError:
            print("There is nothing here.")
        else:
            position, alive = location_action(position, alive)

        if not alive:
            print("You're dead!")
            break

        command = input("? ")

        actions = {
            "N": go_north,
            "E": go_east,
            "W": go_west,
            "S": go_south,
            "L": look,
            "Q": quit_game,
        }

        try:
            command_action = actions[command]
        except KeyError:
            print("I don't understand")
        else:
            position = command_action(position)

    else:  # nobreak
        print("You have chosen to leave the game.")

    print("Game over")

if __name__ == '__main__':
    play()



================================================================================== v4
================================================================================== v5


================================================================================== v0
================================================================================== v0
================================================================================== v0
================================================================================== v0</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_matplotlib</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>from_levels_and_colors___Discrete_and_Continuos_Colorbar</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_matplotlib</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>from_levels_and_colors___Discrete_and_Continuos_Colorbar</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors

#The colormap defines colors for already scaled data. The norm scales the data to a 0-1 range.
#By default, a Normalize instance will be created that scales between the min and max of the data or the vmin and vmax kwargs, if they are supplied.

#=============================================================================================
#Note that this creates a discrete colormap.

data1 = 3 * np.random.random((10, 10))
data2 = 5 * np.random.random((10, 10))

levels = [0, 1, 2, 3, 4, 5]
colors = ['red', 'brown', 'yellow', 'green', 'blue']
cmap, norm = matplotlib.colors.from_levels_and_colors(levels, colors)

fig, axes = plt.subplots(ncols=2)
for ax, dat in zip(axes, [data1, data2]):
    im = ax.imshow(dat, cmap=cmap, norm=norm, interpolation='none')
    fig.colorbar(im, ax=ax, orientation='horizontal')
plt.show()

#=============================================================================================
#If we wanted to use a continuous colormap instead,
#   we can either specify the same vmin and vmax arguments
#   or create our own Normalize instance and pass it in as the norm argument for all images.

#Also, there's a similar function to create a continuous colormap from a list of colors:

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

data1 = 3 * np.random.random((10, 10))
data2 = 5 * np.random.random((10, 10))

colors = ['red', 'brown', 'yellow', 'green', 'blue']
cmap = LinearSegmentedColormap.from_list('name', colors)
norm = plt.Normalize(0, 5)

fig, axes = plt.subplots(ncols=2)
for ax, dat in zip(axes, [data1, data2]):
    im = ax.imshow(dat, cmap=cmap, norm=norm, interpolation='none')
    fig.colorbar(im, ax=ax, orientation='horizontal')
plt.show()</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_matplotlib</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>ScatterPlot_color_based_on__if_elif_else</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_matplotlib</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>ScatterPlot_color_based_on__if_elif_else</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
import matplotlib.pyplot as plt

x=['A','B','B','C','A','B']
y=[15,30,25,18,22,13]

# Function to map the colors as a list from the input list of x variables
def pltcolor(lst):
    cols=[]
    for l in lst:       #This builds up the list by interating through the input list
        if l=='A':
            cols.append('red')
        elif l=='B':
            cols.append('blue')
        else:
            cols.append('green')
    return cols
# Create the colors list using the function above


cols=pltcolor(x)        # x is the input list

print(cols)

plt.scatter(x=x,y=y,s=500,c=cols) #Pass on the list created by the function here
plt.grid(True)
plt.show()</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Packages</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>pip_options</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Packages</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>pip_options</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Options

-r, --requirement &lt;file&gt;
Install from the given requirements file. This option can be used multiple times.

-c, --constraint &lt;file&gt;
Constrain versions using the given constraints file. This option can be used multiple times.

--no-deps
Don’t install package dependencies.

--pre
Include pre-release and development versions. By default, pip only finds stable versions.

-e, --editable &lt;path/url&gt;
Install a project in editable mode (i.e. setuptools “develop mode”) from a local project path or a VCS url.

-t, --target &lt;dir&gt;
Install packages into &lt;dir&gt;. By default this will not replace existing files/folders in &lt;dir&gt;. Use --upgrade to replace existing packages in &lt;dir&gt; with new versions.

--platform &lt;platform&gt;
Only use wheels compatible with &lt;platform&gt;. Defaults to the platform of the running system. Use this option multiple times to specify multiple platforms supported by the target interpreter.

--python-version &lt;python_version&gt;
The Python interpreter version to use for wheel and “Requires-Python” compatibility checks. Defaults to a version derived from the running interpreter. The version can be specified using up to three dot-separated integers (e.g. “3” for 3.0.0, “3.7” for 3.7.0, or “3.7.3”). A major-minor version can also be given as a string without dots (e.g. “37” for 3.7.0).

--implementation &lt;implementation&gt;
Only use wheels compatible with Python implementation &lt;implementation&gt;, e.g. ‘pp’, ‘jy’, ‘cp’, or ‘ip’. If not specified, then the current interpreter implementation is used. Use ‘py’ to force implementation-agnostic wheels.

--abi &lt;abi&gt;
Only use wheels compatible with Python abi &lt;abi&gt;, e.g. ‘pypy_41’. If not specified, then the current interpreter abi tag is used. Use this option multiple times to specify multiple abis supported by the target interpreter. Generally you will need to specify --implementation, --platform, and --python-version when using this option.

--user
Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%Python on Windows. (See the Python documentation for site.USER_BASE for full details.)

--root &lt;dir&gt;
Install everything relative to this alternate root directory.

--prefix &lt;dir&gt;
Installation prefix where lib, bin and other top-level folders are placed

--src &lt;dir&gt;
Directory to check out editable projects into. The default in a virtualenv is “&lt;venv path&gt;/src”. The default for global installs is “&lt;current dir&gt;/src”.

-U, --upgrade
Upgrade all specified packages to the newest available version. The handling of dependencies depends on the upgrade-strategy used.

--upgrade-strategy &lt;upgrade_strategy&gt;
Determines how dependency upgrading should be handled [default: only-if-needed]. “eager” - dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s). “only-if-needed” - are upgraded only when they do not satisfy the requirements of the upgraded package(s).

--force-reinstall
Reinstall all packages even if they are already up-to-date.

-I, --ignore-installed
Ignore the installed packages, overwriting them. This can break your system if the existing package is of a different version or was installed with a different package manager!

--ignore-requires-python
Ignore the Requires-Python information.

--no-build-isolation
Disable isolation when building a modern source distribution. Build dependencies specified by PEP 518 must be already installed if this option is used.

--use-pep517
Use PEP 517 for building source distributions (use --no-use-pep517 to force legacy behaviour).

--install-option &lt;options&gt;
Extra arguments to be supplied to the setup.py install command (use like --install-option=”--install-scripts=/usr/local/bin”). Use multiple --install-option options to pass multiple options to setup.py install. If you are using an option with a directory path, be sure to use absolute path.

--global-option &lt;options&gt;
Extra global options to be supplied to the setup.py call before the install command.

--compile
Compile Python source files to bytecode

--no-compile
Do not compile Python source files to bytecode

--no-warn-script-location
Do not warn when installing scripts outside PATH

--no-warn-conflicts
Do not warn about broken dependencies

--no-binary &lt;format_control&gt;
Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either “:all:” to disable all binary packages, “:none:” to empty the set (notice the colons), or one or more package names with commas between them (no colons). Note that some packages are tricky to compile and may fail to install when this option is used on them.

--only-binary &lt;format_control&gt;
Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either “:all:” to disable all source packages, “:none:” to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.

--prefer-binary
Prefer older binary packages over newer source packages.

--require-hashes
Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.

--progress-bar &lt;progress_bar&gt;
Specify type of progress to be displayed [off|on|ascii|pretty|emoji] (default: on)

--no-clean
Don’t clean up build directories.


-i, --index-url &lt;url&gt;
Base URL of the Python Package Index (default https://pypi.org/simple). This should point to a repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same format.

--extra-index-url &lt;url&gt;
Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as --index-url.

--no-index
Ignore package index (only looking at --find-links URLs instead).

-f, --find-links &lt;url&gt;
If a URL or path to an html file, then parse for links to archives such as sdist (.tar.gz) or wheel (.whl) files. If a local path or file:// URL that’s a directory, then look for archives in the directory listing. Links to VCS project URLs are not supported.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Pandas_DataFrame</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>Concatenate_syntax</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Pandas_DataFrame</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>Concatenate_syntax</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#Concatenate_syntax
https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#merge-join-concatenate-and-compare
pd.concat(
    objs,
    axis=0,
    join="outer",
    ignore_index=False,
    keys=None,
    levels=None,
    names=None,
    verify_integrity=False,
    copy=True,
)
objs 
#   a sequence or mapping of Series or DataFrame objects. If a dict is passed, the sorted keys will be used as the keys argument, 
#   unless it is passed, in which case the values will be selected (see below). 
#   Any None objects will be dropped silently unless they are all None in which case a ValueError will be raised.
axis 
#   {0, 1, …}, default 0. The axis to concatenate along.
join
#   {‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). 
#   Outer for union and inner for intersection.
#	join='outer'. This is the default option as it results in zero information loss.
ignore_index
#   boolean, default False. If True, do not use the index values on the concatenation axis. 
#   The resulting axis will be labeled 0, …, n - 1. This is useful if you are concatenating objects 
#   where the concatenation axis does not have meaningful indexing information. Note the index values on the other axes are still respected in the join.
keys
#   sequence, default None. Construct hierarchical index using the passed keys as the outermost level. 
#   If multiple levels passed, should contain tuples.
levels
#   list of sequences, default None. Specific levels (unique values) to use for constructing a MultiIndex. 
#   Otherwise they will be inferred from the keys.
names
#   list, default None. Names for the levels in the resulting hierarchical index.
verify_integrity
#   boolean, default False. Check whether the new concatenated axis contains duplicates. 
#   This can be very expensive relative to the actual data concatenation.
copy
#   boolean, default True. If False, do not copy data unnecessarily.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Pandas_DataFrame</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>Concatentate_Series_and_DataFrames</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Pandas_DataFrame</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>Concatentate_Series_and_DataFrames</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>import pandas as pd
# Hierarchical Index:  https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical

#A useful shortcut to concat() are the append() instance methods on Series and DataFrame.
# These methods actually predated concat. They concatenate along axis=0, namely the index:

df1 = pd.DataFrame(
    {
        "A": ["A0", "A1", "A2", "A3"],          # &lt;===== each row here, is a columnn in the dataframe
        "B": ["B0", "B1", "B2", "B3"],
        "C": ["C0", "C1", "C2", "C3"],
        "D": ["D0", "D1", "D2", "D3"],
    },
    index=[0, 1, 2, 3],                         # &lt;===== each index is a row 'header' in the dataframe
)

print('---------------- df1 ----------------------')
print(df1)

df2 = pd.DataFrame(
    {
        "A": ["A4", "A5", "A6", "A7"],
        "B": ["B4", "B5", "B6", "B7"],
        "C": ["C4", "C5", "C6", "C7"],
        "D": ["D4", "D5", "D6", "D7"],
    },
    index=[4, 5, 6, 7],
)

print('---------------- df2 ----------------------')
print(df2)

df3 = pd.DataFrame(
    {
        "A": ["A8", "A9", "A10", "A11"],
        "B": ["B8", "B9", "B10", "B11"],
        "C": ["C8", "C9", "C10", "C11"],
        "D": ["D8", "D9", "D10", "D11"],
    },
    index=[8, 9, 10, 11],
)

print('---------------- df3 ----------------------')
print(df3)


df4 = pd.DataFrame(
    {
        "B": ["B2", "B3", "B6", "B7"],
        "D": ["D2", "D3", "D6", "D7"],
        "F": ["F2", "F3", "F6", "F7"],
    },
    index=[2, 3, 6, 7],
)
print('---------------- df4 ----------------------')
print(df4)


s1 = pd.Series(["X0", "X1", "X2", "X3"], name="X")
print('---------------- s1 ----------------------')
print('---------------- s1 = pd.Series(["X0", "X1", "X2", "X3"], name="X")  ----------------------')
print('---------------- s1 is a Series  ----------------------')
print(s1)

s2 = pd.Series(["_0", "_1", "_2", "_3"])
print('---------------- s2 ----------------------')
print('---------------- s2 = pd.Series(["_0", "_1", "_2", "_3"])  ----------------------')
print('---------------- s2 is an un-named Series  ----------------------')
print(s1)
# ========================================================= DEFAULT: OUTER JOIN

result = pd.concat([df1, s1], axis=1)
print('---------------- result = pd.concat([df1, s1], axis=1)  ----------------------')
print('---------------- first 4 columns are df1, then, last column is the series s1  ----------------------')
print(result)

result = pd.concat([df1, s2, s2, s2], axis=1)
print('---------------- result = pd.concat([df1, s2, s2, s2], axis=1)  ----------------------')
print('---------------- concatenate dataframe and three copies of un-named series  ----------------------')
print(result)


result = pd.concat([df1, s1], axis=1, ignore_index=True)
print('---------------- result = pd.concat([df1, s1], axis=1, ignore_index=True)  ----------------------')
print('---------------- Passing ignore_index=True will drop all name references  ----------------------')
print('---------------- last three columns are not there  ----------------------')
print(result)

===========================================================================================

---------------- df1 ----------------------
    A   B   C   D
0  A0  B0  C0  D0
1  A1  B1  C1  D1
2  A2  B2  C2  D2
3  A3  B3  C3  D3
---------------- df2 ----------------------
    A   B   C   D
4  A4  B4  C4  D4
5  A5  B5  C5  D5
6  A6  B6  C6  D6
7  A7  B7  C7  D7
---------------- df3 ----------------------
      A    B    C    D
8    A8   B8   C8   D8
9    A9   B9   C9   D9
10  A10  B10  C10  D10
11  A11  B11  C11  D11
---------------- df4 ----------------------
    B   D   F
2  B2  D2  F2
3  B3  D3  F3
6  B6  D6  F6
7  B7  D7  F7
---------------- s1 ----------------------
---------------- s1 = pd.Series(["X0", "X1", "X2", "X3"], name="X")  ----------------------
---------------- s1 is a Series  ----------------------
0    X0
1    X1
2    X2
3    X3
Name: X, dtype: object
---------------- s2 ----------------------
---------------- s2 = pd.Series(["_0", "_1", "_2", "_3"])  ----------------------
---------------- s2 is an un-named Series  ----------------------
0    X0
1    X1
2    X2
3    X3
Name: X, dtype: object
---------------- result = pd.concat([df1, s1], axis=1)  ----------------------
---------------- first 4 columns are df1, then, last column is the series s1  ----------------------
    A   B   C   D   X
0  A0  B0  C0  D0  X0
1  A1  B1  C1  D1  X1
2  A2  B2  C2  D2  X2
3  A3  B3  C3  D3  X3
---------------- result = pd.concat([df1, s2, s2, s2], axis=1)  ----------------------
---------------- concatenate dataframe and three copies of un-named series  ----------------------
    A   B   C   D   0   1   2
0  A0  B0  C0  D0  _0  _0  _0
1  A1  B1  C1  D1  _1  _1  _1
2  A2  B2  C2  D2  _2  _2  _2
3  A3  B3  C3  D3  _3  _3  _3
---------------- result = pd.concat([df1, s1], axis=1, ignore_index=True)  ----------------------
---------------- Passing ignore_index=True will drop all name references  ----------------------
    0   1   2   3   4
0  A0  B0  C0  D0  X0
1  A1  B1  C1  D1  X1
2  A2  B2  C2  D2  X2
3  A3  B3  C3  D3  X3

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Pandas_DataFrame</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>CSV_Import_Then_Append_to_a_List</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Pandas_DataFrame</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>CSV_Import_Then_Append_to_a_List</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>import csv

# outputs a list [] of strings for each line
with open('ParentTeacher.csv') as csf_file:
    csv_reader = csv.reader(csf_file)
    for line in csv_reader:
        # print(line)
        pass

# Move the csv into one list:
with open('ParentTeacher.csv') as csf_file:
    csv_reader2 = csv.reader(csf_file)

    blank_list = []

    for line in csv_reader2:
        # append each line to the blank_list
        blank_list.append(line)

        # print(blank_list)  # Outputs one long list of Lists from each line, nested in the outer list.

#This prints the first item in the outer list which is the list from the first line that it read in.
print(blank_list[0])
#This prints the first item in the list from the first line that it read in.
print(blank_list[0][0])
#This prints the first 3 items in the list from the first line that it read in. NOTE: 0:3 means from item[0] to item[2], not including 3rd item
print(blank_list[0][0:3])

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Pandas_DataFrame</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>NaN_Drop</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Pandas_DataFrame</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>NaN_Drop</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>DataFrame Documenation: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html

#DROP missing values
#-------------------
DataFrame.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)

#============== parms for dropna
Parameters
axis
		{0 or ‘index’, 1 or ‘columns’}, default 0
		Determine if rows or columns which contain missing values are removed.
		
		0, or ‘index’ : Drop rows which contain missing values.
		
		1, or ‘columns’ : Drop columns which contain missing value.
		
		Changed in version 1.0.0: Pass tuple or list to drop on multiple axes. Only a single axis is allowed.
		
how
		{‘any’, ‘all’}, default ‘any’
		Determine if row or column is removed from DataFrame, when we have at least one NA or all NA.
		
		‘any’ : If any NA values are present, drop that row or column.
		
		‘all’ : If all values are NA, drop that row or column.
		
thresh
		int, optional
		Require that many non-NA values.
	
subset
		array-like, optional
		Labels along other axis to consider, e.g. if you are dropping rows these would be a list of columns to include.
		
inplace
		bool, default False
		If True, do operation inplace and return None.
================examples===========https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html
df
       name        toy       born
0    Alfred        NaN        NaT
1    Batman  Batmobile 1940-04-25
2  Catwoman   Bullwhip        NaT


#Drop the rows where at least one element is missing.
df.dropna()
#Drop the columns where at least one element is missing.
df.dropna(axis='columns')
#Drop the rows where all elements are missing.
df.dropna(how='all')
#Keep only the rows with at least 2 non-NA values.
df.dropna(subset=['name', 'toy'])
#Keep the DataFrame with valid entries in the same variable.
df.dropna(inplace=True)
		
===========see also =======================================

DataFrame.isna
	Indicate missing values.
DataFrame.notna
	Indicate existing (non-missing) values.
DataFrame.fillna
	Replace missing values.
Series.dropna
	Drop missing values.
Index.dropna
	Drop missing indices.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Pandas_DataFrame</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>SQL_GroupedBy</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Pandas_DataFrame</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>SQL_GroupedBy</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>import pandas as pd
import numpy as np

url = (
    "https://raw.github.com/pandas-dev/pandas/master/pandas/tests/io/data/csv/tips.csv"
)

result = tips = pd.read_csv(url)
print('---------------- result = tips = pd.read_csv(url) ----------------------')
print(result)


result = tips.groupby("sex").size()
print('---------------- result = tips.groupby("sex").size() ----------------------')
print('------SQL: SELECT sex, count(*) FROM tips GROUP BY sex;----------------------')
print('------Notice that in the pandas code we used size() and not count(). --------')
print('------This is because count() applies the function to each column, returning the number of not null records within each. --------')
print(result)

result = tips.groupby("sex")["total_bill"].count()
print('---------------- result = tips.groupby("sex")["total_bill"].count() ----------------------')
print('------SQL: SELECT sex, count(*) FROM tips GROUP BY sex;----------------------')
print('------Alternatively, we could have applied the count() method to an individual column: --------')
print(result)

result = tips.groupby("day").agg({"tip": np.mean, "day": np.size})
print('---------------- result = tips.groupby("day").agg({"tip": np.mean, "day": np.size}) ----------------------')
print('------Multiple functions can also be applied at once. ----------------------')
print('------For instance, say we’d like to see how tip amount differs by day of the week --------')
print('------agg() allows you to pass a dictionary to your grouped DataFrame, indicating which functions to apply to specific columns. --------')
print(result)


result = tips.groupby(["smoker", "day"]).agg({"tip": [np.size, np.mean]})
print('---------------- result = tips.groupby(["smoker", "day"]).agg({"tip": [np.size, np.mean]}) ----------------------')
print('------Grouping by more than one column is done by passing a list of columns to the groupby() method. ----------------------')
print(result)

======================================================

C:\DATA\Python_Projects\Panda_from_Youtube\thePythonProject\venv\Scripts\python.exe C:\DATA\Python_Projects\Panda_from_Youtube\thePythonProject\main.py
---------------- result = tips = pd.read_csv(url) ----------------------
     total_bill   tip     sex smoker   day    time  size
0         16.99  1.01  Female     No   Sun  Dinner     2
1         10.34  1.66    Male     No   Sun  Dinner     3
2         21.01  3.50    Male     No   Sun  Dinner     3
3         23.68  3.31    Male     No   Sun  Dinner     2
4         24.59  3.61  Female     No   Sun  Dinner     4
..          ...   ...     ...    ...   ...     ...   ...
239       29.03  5.92    Male     No   Sat  Dinner     3
240       27.18  2.00  Female    Yes   Sat  Dinner     2
241       22.67  2.00    Male    Yes   Sat  Dinner     2
242       17.82  1.75    Male     No   Sat  Dinner     2
243       18.78  3.00  Female     No  Thur  Dinner     2

[244 rows x 7 columns]
---------------- result = tips.groupby("sex").size() ----------------------
------SQL: SELECT sex, count(*) FROM tips GROUP BY sex;----------------------
------Notice that in the pandas code we used size() and not count(). --------
------This is because count() applies the function to each column, returning the number of not null records within each. --------
sex
Female     87
Male      157
dtype: int64
---------------- result = tips.groupby("sex")["total_bill"].count() ----------------------
------SQL: SELECT sex, count(*) FROM tips GROUP BY sex;----------------------
------Alternatively, we could have applied the count() method to an individual column: --------
sex
Female     87
Male      157
Name: total_bill, dtype: int64
---------------- result = tips.groupby("day").agg({"tip": np.mean, "day": np.size}) ----------------------
------Multiple functions can also be applied at once. ----------------------
------For instance, say we’d like to see how tip amount differs by day of the week --------
------agg() allows you to pass a dictionary to your grouped DataFrame, indicating which functions to apply to specific columns. --------
           tip  day
day                
Fri   2.734737   19
Sat   2.993103   87
Sun   3.255132   76
Thur  2.771452   62
---------------- result = tips.groupby(["smoker", "day"]).agg({"tip": [np.size, np.mean]}) ----------------------
------Grouping by more than one column is done by passing a list of columns to the groupby() method. ----------------------
              tip          
             size      mean
smoker day                 
No     Fri    4.0  2.812500
       Sat   45.0  3.102889
       Sun   57.0  3.167895
       Thur  45.0  2.673778
Yes    Fri   15.0  2.714000
       Sat   42.0  2.875476
       Sun   19.0  3.516842
       Thur  17.0  3.030000

Process finished with exit code 0
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_SQL_MachineLearningServer</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Install_the_PythonSharedComponents_for_MachneLearning_revoscalePY</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_SQL_MachineLearningServer</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Install_the_PythonSharedComponents_for_MachneLearning_revoscalePY</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This could have been done when installing the SQL server by choosing the 
	"Shared Features" =&gt; Machine Learning Standalone and Python on the "Feature Selection" window
	
Here it is using the command line on the workstation


1] Mount the SQL install CD
2] Open a command line in the root of the CD:
&gt;setup.exe /QUIET /ACTION="Install" /IAcceptSQLServerLicenseTerms="True" /IAcceptPythonLicenseTerms="True" /FEATURES=SQL_SHARED_AA,SQL_SHARED_MPY

You can see results in the 'Summary.txt' file in this folder on the server:
C:\Program Files\Microsoft SQL Server\150\Setup Bootstrap\Log\

In that folder you can check in the newest folder (e.g. 20210207_145341) and there is a summary file (e.g. Summary_DESKTOP-GFV53FA_20210207_145341.txt)
Look for 'passed' in the 2nd line:

		Overall summary:
 		 Final result:                  Passed
 		 
 It should have installed the Python.exe in here:
 C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQL_2019_DEV\PYTHON_SERVICES
 
 for PyCharm the default interpreter is: 
 	Python 3.9
 	C:\Program Files\Python39\Python.exe
 Change it to:
 	C:\Program Files\Microsoft\ML Server\PYTHON_SERVER
 	or
 	C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQL_2019_DEV\PYTHON_SERVICES
 	
 You can now import revoscalepy, microsoftml, or azureml-model-management-sdk modules.

You can also choose Tools &gt; Python Console to open an interactive window.	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RowVersion_TimeStamp</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>RowVersion_PARM_As_NVARCHAR(128)</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RowVersion_TimeStamp</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>RowVersion_PARM_As_NVARCHAR(128)</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
-- From: http://www.sqlservercentral.com/Forums/Topic1080271-391-1.aspx

--I have a problem related to to passing in and out a pair of ROWVERSION values from an Execute SQL Task in SSIS.

--I have build a Stored Procedure that when called with a "@lastrowversion binary(8)" parameter will internally 
--set "@activerowversion binary(8) OUTPUT" to MIN_ACTIVE_ROWVERSION() for the current database and return 
--a resultset containing changed rows from a specific table together with the current active row version for the database.


--The stored procedure works without any problems when called from SSMS (SQL Server Management Studio) 
--but when I try to perform the same query in an Execute SQL Task in SSIS I get errors.


////////////////////////This works for SSMS and SSIS////////////////////


CREATE PROCEDURE [dbo].[udsp_Export_Unica_KundeKontaktHist]
	@remotedbname [sysname],
	@lastrowversionhexstr [nvarchar](128),
	@activerowversionhexstr [nvarchar](128) OUTPUT
WITH EXECUTE AS CALLER
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	BEGIN TRY	-- Error handling
	
	---- Prepare and begin named transaction
	DECLARE @procName [sysname] = OBJECT_NAME(@@PROCID);

	BEGIN TRANSACTION @procName;

	--Convert recorded row version from hex string to binary(8)
	DECLARE @lastrowversion binary(8);
	DECLARE @sql_hextovarbin nvarchar(1024)= 'SET @rowid = CAST(CAST(' + @lastrowversionhexstr + ' as bigint) as binary(8))';
	DECLARE @parmdef_hextovarbin nvarchar(512) = '@rowid binary(8) OUTPUT';
	
	EXEC sp_executesql
		 @sql_hextovarbin
		,@parmdef_hextovarbin
		,@rowid = @lastrowversion OUTPUT
	;

	--It's important to capture min_active_rowversion() into a variable, because
	--it could change while the query is running, which could lead to lost
	--updates.
	DECLARE @activerowversion binary(8);
	DECLARE @sp_executesql nvarchar(1024) = @remotedbname + '.sys.sp_executesql';
	DECLARE @sql nvarchar(1024) = N'SELECT @rowid = MIN_ACTIVE_ROWVERSION()';	-- connect to Unica database to get active rowversion
	DECLARE @parmdefinition nvarchar(512) = '@rowid binary(8) OUTPUT';

	-- get current row version for Unica database - we use it to avoid concurrency issues for rows changed during snapshot
	EXEC @sp_executesql
		 @sql
		,@parmdefinition
		,@rowid = @activerowversion OUTPUT
	;
	
	SELECT
                 [CustomerID] 
                 ,[ContactDate]
                 ,[ContactType]
        FROM [ContactHistory]   -- view in local database with underlying tables in remote database
        WHERE
                (ContactTimestamp &gt;= @lastrowversion AND ContactTimestamp &lt; @activerowversion)   -- changed rows since last snapshot, but NOT during snapshot
        ORDER BY
                 [CustomerID]
                ,[ContactDate]
        ;
	
	-- convert captured active row version to hex string using undocumented fsystem function for easier parameter handling in SSIS
	SELECT @activerowversionhexstr = master.sys.fn_varbintohexstr(@activerowversion);
	
	COMMIT TRANSACTION @procName;

	END TRY
	BEGIN CATCH;
		-- On error rollback any changes
		IF @@TRANCOUNT &gt; 0
			ROLLBACK TRANSACTION @procName;

		DECLARE @ErrorMessage NVARCHAR(4000)
		DECLARE @ErrorSeverity INT
		DECLARE @ErrorState INT

		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();

		-- Use RAISERROR inside the CATCH block to return error
		-- information about the original error that caused
		-- execution to jump to the CATCH block.
		RAISERROR (@ErrorMessage, -- Message text.
				@ErrorSeverity, -- Severity.
				@ErrorState -- State.
				);
	END CATCH;
END
GO











//////////////This works for SSMS////////////////////////

CREATE PROCEDURE [dbo].[udsp_Export_Unica_KundeResponsHist]
	@remotedbname [sysname],
	@lastrowversion [binary](8),
	@activerowversion [binary](8) OUTPUT
WITH EXECUTE AS CALLER
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	BEGIN TRY	-- Error handling
	
	-- Prepare and begin named transaction
	DECLARE @procName [sysname] = OBJECT_NAME(@@PROCID);

	BEGIN TRANSACTION @procName;

	--It's important to capture min_active_rowversion() into a variable, because
	--it could change while the query is running, which could lead to lost
	--updates.
	DECLARE @sql nvarchar(1024) = N'USE ' + @remotedbname + '; SELECT @rowid = MIN_ACTIVE_ROWVERSION()';	-- connect to Unica database to get active rowversion
	DECLARE @parmdefinition nvarchar(512) = '@rowid binary(8) OUTPUT';

	-- get current row version for remote database - we use it to avoid concurrency issues for rows changed during snapshot
	EXEC sp_executesql
		 @sql
		,@parmdefinition
		,@rowid = @activerowversion OUTPUT
	;

	SELECT
		 [CustomerID] 
		 ,[ContactDate]
		 ,[ContactType]
	FROM [ContactHistory]	-- view in local database with underlying tables in remote database
	WHERE
		ContactTimestamp &gt;= @lastrowversion AND ContactTimestamp &lt; @activerowversion)	-- changed rows since last snapshot, but NOT during snapshot
	ORDER BY
		 [CustomerID]
		,[ContactDate]
	;

	COMMIT TRANSACTION @procName;

	END TRY
	BEGIN CATCH;
		-- On error rollback any changes
		IF @@TRANCOUNT &gt; 0
			ROLLBACK TRANSACTION @procName;

		DECLARE @ErrorMessage NVARCHAR(4000);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;

		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();

		-- Use RAISERROR inside the CATCH block to return error
		-- information about the original error that caused
		-- execution to jump to the CATCH block.
		RAISERROR (@ErrorMessage, -- Message text.
				@ErrorSeverity, -- Severity.
				@ErrorState -- State.
				);
	END CATCH;
END
GO
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>R</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CreatePredictiveModel</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>R</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CreatePredictiveModel</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CreatePredictiveModel

-- from: https://docs.microsoft.com/en-us/sql/advanced-analytics/tutorials/rtsql-create-a-predictive-model-r?view=sql-server-2017#create-a-table-for-storing-the-model
use junk
go

--=Many datasets, small and large, are included with the R runtime. 
--To get a list of datasets installed with R, type library(help="datasets") from an R command prompt.

CREATE TABLE CarSpeed ([speed] int not null, [distance] int not null)
INSERT INTO CarSpeed
EXEC sp_execute_external_script
        @language = N'R'
        , @script = N'car_speed &lt;- cars;'
        , @input_data_1 = N''
        , @output_data_1_name = N'car_speed'

--Create a regression model
-------------------------------
--describes the relationship between the dependent variable speed and the independent variable distance


--To actually build the model, you define the formula inside your R code, and pass the data as an input parameter.
DROP PROCEDURE IF EXISTS generate_linear_model;
GO
CREATE PROCEDURE generate_linear_model
AS
BEGIN
    EXEC sp_execute_external_script
    @language = N'R'
    , @script = N'lrmodel &lt;- rxLinMod(formula = distance ~ speed, data = CarsData);
        trained_model &lt;- data.frame(payload = as.raw(serialize(lrmodel, connection=NULL)));'
    , @input_data_1 = N'SELECT [speed], [distance] FROM CarSpeed'
    , @input_data_1_name = N'CarsData'
    , @output_data_1_name = N'trained_model'
    WITH RESULT SETS ((model varbinary(max)));
END;
GO

--The first argument to rxLinMod is the formula parameter, which defines distance as dependent on speed.
--The input data is stored in the variable CarsData, 
--	which is populated by the SQL query. 
--If you don't assign a specific name to your input data, the default variable name would be InputDataSet.

--Create a table for storing the model
----------------------------------------
--Next, store the model so you can retrain or use it for prediction. 
--The output of an R package that creates a model is usually a binary object. 
--Therefore, the table where you store the model must provide a column of varbinary type.

CREATE TABLE stopping_distance_models (
    model_name varchar(30) not null default('default model') primary key,
    model varbinary(max) not null);

--Save the model
----------------------
--To save the model, run the following Transact-SQL statement to call the stored procedure, generate the model, and save it to a table.

INSERT INTO stopping_distance_models (model)
EXEC generate_linear_model;

--Note that if you run this code a second time, you get this error:
--Violation of PRIMARY KEY constraint...Cannot insert duplicate key in object dbo.stopping_distance_models

--One option for avoiding this error is to update the name for each new model. 
--For example, you could change the name to something more descriptive, 
--	and include the model type, the day you created it, and so forth.

UPDATE stopping_distance_models
SET model_name = 'rxLinMod ' + format(getdate(), 'yyyy.MM.HH.mm', 'en-gb')
WHERE model_name = 'default model'

--suppose you want to train a model but immediately view a table of coefficients from the model. 
--You could create the table of coefficients as the main result set, and output the trained model in a SQL variable. 
--You could immediately re-use the model by calling the variable, or you could save the model to a table as shown here.

DECLARE @model varbinary(max), @modelname varchar(30)
EXEC sp_execute_external_script
    @language = N'R'
    , @script = N'
        speedmodel &lt;- rxLinMod(distance ~ speed, CarsData)
        modelbin &lt;- serialize(speedmodel, NULL)
        OutputDataSet &lt;- data.frame(coefficients(speedmodel));'
    , @input_data_1 = N'SELECT [speed], [distance] FROM CarSpeed'
    , @input_data_1_name = N'CarsData'
    , @params = N'@modelbin varbinary(max) OUTPUT'
    , @modelbin = @model OUTPUT
    WITH RESULT SETS (([Coefficient] float not null));

-- Save the generated model
INSERT INTO [dbo].[stopping_distance_models] (model_name, model)
VALUES ('latest model', @model)

--Remember these rules for working with SQL parameters and R variables in sp_execute_external_script:

--1] All SQL parameters mapped to R script must be listed by name in the @params argument.
--2] To output one of these parameters, add the OUTPUT keyword in the @params list.
--3] After listing the mapped parameters, provide the mapping, line by line, 
--	of SQL parameters to R variables, immediately after the @params list.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>R</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>HelloWorld</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>R</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>HelloWorld</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

--FROM: https://docs.microsoft.com/en-us/sql/advanced-analytics/tutorials/rtsql-using-r-code-in-transact-sql-quickstart?view=sql-server-2017

EXEC sp_execute_external_script
  @language =N'R',
  @script=N'OutputDataSet&lt;-InputDataSet',
  @input_data_1 =N'SELECT 1 AS hello'
  WITH RESULT SETS (([Hello World] int));
GO

--Inputs to this stored procedure include:

@language			-- parameter defines the language extension to call, in this case, R.

@script				--	parameter defines the commands passed to the R runtime. 
					--	Your entire R script must be enclosed in this argument, as Unicode text. 
					--	You could also add the text to a variable of type nvarchar and then call the variable.
					
@input_data_1		--	is data returned by the query, passed to the R runtime, 
					--	which returns the data to SQL Server as a data frame.
					
WITH RESULT SETS	--	clause defines the schema of the returned data table for SQL Server, 
					--	adding "Hello World" as the column name, int for the data type.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>R</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Input_from_SQL_and_Output_to_SQL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>R</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Input_from_SQL_and_Output_to_SQL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Input_from_SQL_and_Output_to_SQL 

https://docs.microsoft.com/en-us/sql/advanced-analytics/tutorials/rtsql-working-with-inputs-and-outputs?view=sql-server-2017
//////////////////////////////////////////////////////////////////////
--Remember these requirements!
--================================

--1] Variable names must follow the rules for valid SQL identifiers.
--2] The order of the parameters is important. 
--	You must specify the required parameters @input_data_1 and @output_data_1 first, 
--	in order to use the optional parameters @input_data_1_name and @output_data_1_name.
--3] Only one input dataset can be passed as a parameter, 
--		and you can return only one dataset. 
--	However, you can call other datasets from inside your R code 
--		and you can return outputs of other types in addition to the dataset. 
--	You can also add the OUTPUT keyword to any parameter to have it returned with the results. 

--4] The WITH RESULT SETS statement defines the schema for the data, 
--		for the benefit of SQL Server.	
--	You need to provide SQL compatible data types for each column you return from R. 
--	You can use the schema definition to provide new column names too; 
--	you need not use the column names from the R data.frame. 
--	In some cases, this clause is optional; try omitting it and see what happen  
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--When you want to run R code in SQL Server, you must wrap R script in a stored procedure. 
--You can write one, or pass R script to sp_execute_external_script. 
--This system stored procedure is used to start the R runtime in the context of SQL Server, 
--	which passes data to R, manages R user sessions securely, and returns any results to the clien
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--Create some simple test data
-------------------------------
CREATE TABLE RTestData ([col1] int not null) ON [PRIMARY]
INSERT INTO RTestData   VALUES (1);
INSERT INTO RTestData   VALUES (10);
INSERT INTO RTestData   VALUES (100) ;
GO


--Query the data
--------------
SELECT * FROM RTestData

--Get the same data using R script
------------------------------------

EXECUTE sp_execute_external_script
      @language = N'R'
    , @script = N' OutputDataSet &lt;- InputDataSet;'
    , @input_data_1 = N' SELECT *  FROM RTestData;'
    WITH RESULT SETS (([NewColName] int NOT NULL));
    
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--The preceding example used the default input and output variable names, 
--	InputDataSet and OutputDataSet. 
--To define the input data associated with InputDatSet, 
--	you use the @input_data_1 variable.    

--In this example, 
--	the names of the output and input variables for the stored procedure have been changed to 
--	SQL_Out and SQL_I
//////////////////////////////////////////////////////////////////////
R is case-sensitive! -- Will get errors if case is not the same
-- EXECUTE statement failed because its WITH RESULT SETS clause specified 1 result set(s), 
--			but the statement only sent 0 result set(s) at run time


 -- We're showing you this error because you can expect to see it often when testing new R code. 
 -- It means that the R script ran successfully, 
	--but SQL Server received no data, or received wrong or unexpected da
//////////////////////////////////////////////////////////////////////

EXECUTE sp_execute_external_script
  @language = N'R'
  , @script = N' SQL_Out &lt;- SQL_In;'
  , @input_data_1 = N' SELECT 12 as Col;'
  , @input_data_1_name  = N'SQL_In'
  , @output_data_1_name =  N'SQL_Out'
  WITH RESULT SETS (([NewColName] int NOT NULL));
  

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||Another example

USE AdventureWorksDW2016_EXT
GO

--Develop the select statement in SQL -----------------------------------------------
SELECT ReportingDate
		, CAST(ModelRegion as varchar(50)) as ProductSeries
		, Amount
FROM [AdventureWorksDW2016_EXT].[dbo].[vTimeSeries]
WHERE [ModelRegion] = 'M200 Europe'
ORDER BY ReportingDate ASC

--Then use the select statement as input to the R-----------------------------------
EXECUTE sp_execute_external_script
       @language = N'R'
      , @script = N' str(InputDataSet);
      OutputDataSet &lt;- InputDataSet;'
      , @input_data_1 = N'
							   SELECT ReportingDate
									 , CAST(ModelRegion as varchar(50)) as ProductSeries
									 , Amount
							   FROM [AdventureWorksDW2016_EXT].[dbo].[vTimeSeries]
							   WHERE [ModelRegion] = ''M200 Europe''					--&lt;== string with double single apostrophes
							   ORDER BY ReportingDate ASC ;'
--WITH RESULT SETS undefined;															--&lt;=== without specifying the output columns
 WITH RESULT SETS (([dateCol] date, [strCol] varchar(50), [numCol] numeric(18,2)  ));	--&lt;===  specifying the output columns	
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>02_Install_MySQL_for_RubyOnRails_Windows</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>02_Install_MySQL_for_RubyOnRails_Windows</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>02_Install_MySQL_for_RubyOnRails_Windows
----------------------------------------

Password: Abcd@1234

#OVERVIEW
Three Steps:
1] use installer from http://dev.mysql.com
2] set a default MySQL password
3] Install MySQL Ruby Gem

STOPPED at 1:22 of MySQL video: https://www.lynda.com/Ruby-Rails-tutorials/MySQL/500550/564217-4.html?autoplay=true

1] use installer from http://dev.mysql.com
	http://dev.mysql.com/downloads/mysql
	{choose the MSI installer, on 9/24/2018 it is: MySQL Installer 8.0.12}
	I select the one for when you have an internet connection
	{Used old account:
						Oracle MySQL Web Account
						Web Address is user name:
						glenng@barriere.com
						password:
						Abcde12345
						Name:
						BCC Developer
						Phone number
						800.234.5376
	}
	Install Notes:
		w-1: License
		w-2: Setup Type: (x) Server Only is all that is needed, BUT i selected: (x) Custom
			- MySQL Server 8.0.12
			- MySQL for Visual Studio 1.2.8 - x86
			- MySQL Utilities 1.6.5 - x86
			- MySQL Shell 8.0.12 - X64
			- MySQL Connectors
				Connector/ODBC 8.0.12 - X64
				Connector/NET 8.0.12 - X86
			- Samples and Examples 8.0.12 - X86
	 	w-3 Confirm and Install
	 	w-4 Product Configuration
	 	w-5	Group Replication: Left defaults
	 	w-6	Type and Networking: Left defaults {TCP/IP Port 3306
	 	w-7 Authentication Method: (x) Use legacy Authentication(retain MySQL 5.x Compatibility)
	 	w-8 Accounts and Roles: Password: Abcd@1234
	 	w-9 Windows Service:  MySQL80 {default}, UNCHECKED: [ ]Start the MySQL Server at System Startup
	 	w-10 Apply Configuration
	 	w-11 Product Configuration	
	 	w-12 Connect to Server
	 			User: root
	 			Password: Abcd@1234 {used the password from before, clicked [Check] it succeeded} 	
	 	w-13 Apply Configuration  {I think this did the Samples and Examples}			
	 	
2] #to confirm installation. CD in the CMD window to this address: C:\Program Files\MySQL\MySQL Server 8.0\bin
	&gt; mysql --version
	#OUTPUT
	------------------			
	mysql  Ver 8.0.12 for Win64 on x86_64 (MySQL Community Server - GPL)
3]# To run MySQL (with the CMD at the path: C:\Program Files\MySQL\MySQL Server 8.0\bin)
	&gt; mysql -u root -p  #This will challenge us for the password (i.e. Abcd@1234)
	mysql&gt; quit to exit
	&gt;
	#Then I added the path "C:\Program Files\MySQL\MySQL Server 8.0\bin" to the environmental path</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>04_Create_RubyOnRails_Project_Windows</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>04_Create_RubyOnRails_Project_Windows</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#In this example, Use folder: C:\DATA\Ruby (on vm_WIN_10_DEV)

Create the empty project
=========================
1] CMD
#	CD to the folder for all the projects: C:\DATA\Ruby
#	Project Name: demo_project, and create the configuration files for working with MySQL
#		by default it would use the sqllite database, but that could be changed later
	&gt; rails new demo_project -d mysql	
2] open the Atom IDE =&gt; File {menu} =&gt; Open Folder
	{chose the folder} C:\DATA\Ruby\demo_project
	{the MVC components live in the "app" folder

Configure the Database, and create the user 
=========================
# use the MySQL command line

# by convention use the same name as the project, as you use for the MySQL database (Stupid idea)
# then append "_development", which is the 'Environment'
# Generally there are 3 environments: development, test, production
--------------------------------------------------------------------------------------------
#create a local user w/ limited access for this database and this Ruby on Rails project, 
#	with password "demo_project_password"  visible, as text
3] #from the MySQL command window

	&gt;CREATE DATABASE demo_project_development;							#create the database
	&gt;create user demo_project_user;										#create the user
	&gt;ALTER USER demo_project_user IDENTIFIED BY 'project_password';		#set the user's password
	&gt;GRANT ALL ON demo_project_development.* TO 'demo_project_user';	#Grant user all privileges on the database
	#then you can quit the MySQL command line
	
	&gt;show databases; 		#to confirm that the database is there
--------------------------------------------------------------------------------------------

4] Configure some things for the project, go into the project using Atom
	=&gt; Config {folder} =&gt; database.yml {file}
	====================================================ORIG
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: root
	  password:
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: demo_project_development	
	====================================================Change it to:
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: demo_project_user
	  password: project_password
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: demo_project_development
	====================================================
	{then save the changes} 	
	
5] #To test that the username and password are working, just run the following command. If it succeeds, that proves that it is 
	#connecting with the credentials	
	#from command line, in the project folder
	&gt;rails db:schema:dump
	#IF there are no Errors, then it is working
	# and you should also see the file: "demo_project {folder} =&gt; db {folder} =&gt; schema.rb {file}
	
6] #Tell Puma to boot up and run the project so that it can respond to HTTP requests
	CMD: CD to the project folder
	&gt; rails server
	#OUTPUT
	#-----------------------------
	C:\DATA\Ruby\demo_project&gt;rails server
	=&gt; Booting Puma
	=&gt; Rails 5.2.1 application starting in development
	=&gt; Run `rails server -h` for more startup options
	*** SIGUSR2 not implemented, signal based restart unavailable!
	*** SIGUSR1 not implemented, signal based restart unavailable!
	*** SIGHUP not implemented, signal based logs reopening unavailable!
	Puma starting in single mode...
	* Version 3.12.0 (ruby 2.5.1-p57), codename: Llamas in Pajamas
	* Min threads: 5, max threads: 5
	* Environment: development
	* Listening on tcp://0.0.0.0:3000
	Use Ctrl-C to stop
	#-------------------------------------------------------------
	#should now be able to browse to it: http://localhost:3000</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_a_Intro</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_a_Intro</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>05_RubyOnRails_EssentialTraining_Lynda.Com_a_Intro
--------------------------------------------------

This Example will be the "simple_cms" project

1]  In folder: C:\DATA\Ruby\ {on vm_WIN_10_DEV}

	#For exercises copy the author's "simple_cms" project folder into my folder. 
	# The author's folder must contain the script: "simple_cms_development.sql" in the 'db' folder

2] When I get to the point where I need to Create database for the project:
--------------------------------------------------------------------------------------------
#create a local user w/ limited access for this database and this Ruby on Rails project, 
#	with password "simple_cms_password"  visible, as text
2a] #from the MySQL command window

	&gt;CREATE DATABASE simple_cms_development;							#create the database
	&gt;create user simple_cms_user;										#create the user
	&gt;ALTER USER simple_cms_user IDENTIFIED BY 'simple_cms_user_password';		#set the user's password
	&gt;GRANT ALL ON simple_cms_development.* TO 'simple_cms_user';	#Grant user all privileges on the database
	#then you can quit the MySQL command line
--------------------------------------------------------------------------------------------
2b] #from CMD use author's script to import the data
	&gt;mysql -u simple_cms_user -p simple_cms_development &lt; db/simple_cms_development.sql
	#NOTE: first edit the script to change the name of the user and the password
	
3] #The first project will not have a database, so just create the project, with the option to use MySQL rather than sqlLite.
	#in CMD cd into the parent folder: C:\DATA\Ruby\
	&gt;rails new simple_cms -d mysql

4] #cd into the new directory: C:\DATA\Ruby\simple_cms
	#start Atom, and have it load the current directory
	&gt; atom .</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_b_MySQL_script_for_creatingTheData</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_b_MySQL_script_for_creatingTheData</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- simple_cms_development.sql
-- MySQL dump 10.13  Distrib 5.7.13, for osx10.11 (x86_64)
--
-- Host: localhost    Database: simple_cms_development
-- ------------------------------------------------------
-- Server version	5.7.13

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `admin_users`
--

DROP TABLE IF EXISTS `admin_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `admin_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(25) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `email` varchar(100) NOT NULL DEFAULT '',
  `username` varchar(25) DEFAULT NULL,
  `hashed_password` varchar(40) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_admin_users_on_username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin_users`
--

LOCK TABLES `admin_users` WRITE;
/*!40000 ALTER TABLE `admin_users` DISABLE KEYS */;
INSERT INTO `admin_users` VALUES (1,'Kevin','Skoglund','','kskoglund',NULL,'2016-07-13 18:45:19','2016-07-13 18:45:19');
/*!40000 ALTER TABLE `admin_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `admin_users_pages`
--

DROP TABLE IF EXISTS `admin_users_pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `admin_users_pages` (
  `admin_user_id` int(11) DEFAULT NULL,
  `page_id` int(11) DEFAULT NULL,
  KEY `index_admin_users_pages_on_admin_user_id_and_page_id` (`admin_user_id`,`page_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin_users_pages`
--

LOCK TABLES `admin_users_pages` WRITE;
/*!40000 ALTER TABLE `admin_users_pages` DISABLE KEYS */;
INSERT INTO `admin_users_pages` VALUES (1,2);
/*!40000 ALTER TABLE `admin_users_pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ar_internal_metadata`
--

DROP TABLE IF EXISTS `ar_internal_metadata`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ar_internal_metadata` (
  `key` varchar(255) NOT NULL,
  `value` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ar_internal_metadata`
--

LOCK TABLES `ar_internal_metadata` WRITE;
/*!40000 ALTER TABLE `ar_internal_metadata` DISABLE KEYS */;
INSERT INTO `ar_internal_metadata` VALUES ('environment','development','2016-07-12 16:46:38','2016-07-12 16:46:38');
/*!40000 ALTER TABLE `ar_internal_metadata` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `subject_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `permalink` varchar(255) DEFAULT NULL,
  `position` int(11) DEFAULT NULL,
  `visible` tinyint(1) DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_pages_on_subject_id` (`subject_id`),
  KEY `index_pages_on_permalink` (`permalink`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
INSERT INTO `pages` VALUES (1,1,'First Page','first',1,0,'2016-07-13 17:53:59','2016-07-13 17:53:59'),(2,NULL,'Second Page','second',2,0,'2016-07-13 17:55:04','2016-07-13 17:55:04');
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) NOT NULL,
  PRIMARY KEY (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20160712162630'),('20160712163345'),('20160712171148'),('20160712182008'),('20160712182014'),('20160712182019'),('20160713184040'),('20160713192536');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `section_edits`
--

DROP TABLE IF EXISTS `section_edits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `section_edits` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_user_id` int(11) DEFAULT NULL,
  `section_id` int(11) DEFAULT NULL,
  `summary` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_section_edits_on_admin_user_id_and_section_id` (`admin_user_id`,`section_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `section_edits`
--

LOCK TABLES `section_edits` WRITE;
/*!40000 ALTER TABLE `section_edits` DISABLE KEYS */;
INSERT INTO `section_edits` VALUES (1,1,1,'Test edit','2016-07-13 19:32:41','2016-07-13 19:32:41');
/*!40000 ALTER TABLE `section_edits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sections`
--

DROP TABLE IF EXISTS `sections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sections` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `page_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `position` int(11) DEFAULT NULL,
  `visible` tinyint(1) DEFAULT '0',
  `content_type` varchar(255) DEFAULT NULL,
  `content` text,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_sections_on_page_id` (`page_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sections`
--

LOCK TABLES `sections` WRITE;
/*!40000 ALTER TABLE `sections` DISABLE KEYS */;
INSERT INTO `sections` VALUES (1,NULL,'Section One',1,0,NULL,NULL,'2016-07-13 19:29:35','2016-07-13 19:29:35');
/*!40000 ALTER TABLE `sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `subjects`
--

DROP TABLE IF EXISTS `subjects`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `subjects` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `position` int(11) DEFAULT NULL,
  `visible` tinyint(1) DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `subjects`
--

LOCK TABLES `subjects` WRITE;
/*!40000 ALTER TABLE `subjects` DISABLE KEYS */;
INSERT INTO `subjects` VALUES (1,'Initial Subject',1,1,'2016-07-12 20:26:16','2016-07-12 20:33:43'),(2,'Next Subject',2,1,'2016-07-12 20:28:15','2016-07-12 20:35:02'),(4,'Third Subject',3,0,'2016-07-12 21:00:10','2016-07-12 21:00:10');
/*!40000 ALTER TABLE `subjects` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-07-13 15:35:15
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_C_Configure_a_Project</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_C_Configure_a_Project</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>05_RubyOnRails_EssentialTraining_Lynda.Com_c_Configure_a_Project
-----------------------------------------------------------------
chap 2 exercise 02_03

#File: Gemfile
---------------
# Once you make any changes in the file and save it, you need to 'bundle' it
# from CMD, located at root of project:
&gt; bundle install
# any time you make changes to the file, you have to repeat this command

#File: config/application.rb
----------------------------
#Usually you will not modify the file, rather you would modify the  config/environments/*, and config/initializers

#Even if a Rails project does not use a database, it has to have one configured before it can get up and running

1] #So start up MySQL from the CMD:
	&gt; mysql -u root -p  #This will challenge us for the password (i.e. Abcd@1234)
	
--------------------------------------------------------------------------------------------
#create a local user w/ limited access for this database and this Ruby on Rails project, 
#	with password "simple_cms_password"  visible, as text
2a] #from the MySQL command window

	#NOTE to show users:
		&gt;select host, user from mysql.user;


	&gt;CREATE DATABASE simple_cms_development;							#create the database
	&gt;create user simple_cms_user;										#create the user
	&gt;ALTER USER simple_cms_user IDENTIFIED BY 'simple_cms_user_password';		#set the user's password
	&gt;GRANT ALL ON simple_cms_development.* TO 'simple_cms_user';	#Grant user all privileges on the database
	#and the Test database for the test project
	&gt;CREATE DATABASE simple_cms_test;							#create the database
	&gt;GRANT ALL ON simple_cms_test.* TO 'simple_cms_user';	#Grant user all privileges on the database
	
	#Exit out of the MySQL application
	&gt;quit
--------------------------------------------------------------------------------------------
	
3] #Configure some things for the project, go into the project using Atom
	=&gt; Config {folder} =&gt; database.yml {file}
	====================================================ORIG
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: root
	  password:
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: simple_cms_development	
	====================================================Change it to:
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: simple_cms_user
	  password: simple_cms_user_password
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: simple_cms_development
	====================================================
	{then save the changes} 
	
4] #To test that the username and password are working, just run the following command. If it succeeds, that proves that it is 
	#connecting with the credentials	
	#from command line, in the project folder
	&gt;rails db:schema:dump
	#IF there are no Errors, then it is working 
	#	if there was an error check to make the username/password is correct
	# and you should also see the file: "demo_project {folder} =&gt; db {folder} =&gt; schema.rb {file}
	
5] #Tell Puma to boot up and run the project so that it can respond to HTTP requests
	CMD: CD to the project folder
	&gt; rails server
	#OUTPUT
	#-----------------------------
	C:\DATA\Ruby\simple_cms&gt;rails server
	=&gt; Booting Puma
	=&gt; Rails 5.2.1 application starting in development
	=&gt; Run `rails server -h` for more startup options
	*** SIGUSR2 not implemented, signal based restart unavailable!
	*** SIGUSR1 not implemented, signal based restart unavailable!
	*** SIGHUP not implemented, signal based logs reopening unavailable!
	Puma starting in single mode...
	* Version 3.12.0 (ruby 2.5.1-p57), codename: Llamas in Pajamas
	* Min threads: 5, max threads: 5
	* Environment: development
	* Listening on tcp://0.0.0.0:3000
	Use Ctrl-C to stop
	#-------------------------------------------------------------
	#should now be able to browse to it: http://localhost:3000

	Cntrl-C 	#{To stop the web server}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SCHEMA_Organization</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Schema_Logins_Users_Tables_Revert_</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SCHEMA_Organization</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Schema_Logins_Users_Tables_Revert_</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>	--You don't need to GRANT table creation permission to the logins if you don't want to,
	--you can instead just use a higher level account an do 
	--CREATE TABLE S1.Test(...). I just find it easier to do it this way so that 
	--I don't have to qualify everything all the time. After I create things then
	--I can just REVOKE the permission.



--//Make sure we're using the correct credentials, this undoes any calls to EXECUTE AS ...
REVERT
GO

--//Switch to the master database
USE MASTER
GO

--//Create our test database
CREATE DATABASE Tester
GO

--//Swtich to the test database
USE Tester
GO

--//CREATE two logins, T1 and T2
CREATE LOGIN T1 WITH PASSWORD = 'T1'
CREATE USER T1 WITH DEFAULT_SCHEMA = S1

CREATE LOGIN T2 WITH PASSWORD = 'T2'
CREATE USER T2 WITH DEFAULT_SCHEMA = S2
GO

--//Give them permission to create tables
GRANT CREATE TABLE to T1
GRANT CREATE TABLE to T2
GO

--//Create two schemas, S1 and S2
CREATE SCHEMA S1 AUTHORIZATION T1
GO
CREATE SCHEMA S2 AUTHORIZATION T2
GO

--//Switch context to the T1 user
EXECUTE AS USER = 'T1'
GO

--//Create our table
CREATE TABLE Test
(
Col1 varChar(255)
)
GO

--//Insert some data
INSERT INTO Test VALUES ('This is from schema 1')
GO

--//Displays schema 1
SELECT * FROM Test

--//Switch back to the currently logged in user
REVERT
GO

--//Switch context to the T2 user
EXECUTE AS USER = 'T2'
GO

--//Create our table
CREATE TABLE Test
(
Col1 varChar(255)
)
GO

--//Insert some data
INSERT INTO Test VALUES ('This is from schema 2')
GO

--//Displays schema 2
SELECT * FROM Test
GO

--//Switch back to the currently logged in user
REVERT
GO

--//As the main user now select from both tables by schema-prefix
SELECT * FROM S1.Test
UNION
SELECT * FROM S2.Test


--//Cleanup everything that we just made
DROP TABLE S1.Test
DROP TABLE S2.Test

DROP SCHEMA S1
DROP SCHEMA S2

DROP LOGIN T1
DROP LOGIN T2
GO

USE MASTER
GO

DROP DATABASE Tester
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SCHEMA_Security</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SCHEMA_ROLE_PERMISSIONS_Login_User</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SCHEMA_Security</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SCHEMA_ROLE_PERMISSIONS_Login_User</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--This object protection does not apply to users who are members of the sysadmin server role. 
--A member of the sysadmin server role has permission to undertake any activity within a SQL Server instanc


-- For example:
--The DESIGN TEAM wants to maintain the integrity of the database tables but allow the DEVELOPERS to create other database objects such 
--as stored procedures and views to suit the application.

--The database application tables (securables) are created in a schema. 
--This will allow access to the tables to be controlled by permissions. The schema could be the dbo schema or any other.

--A second schema is created—called, say, [Developer_Schema]. The Developer_Schema will be the schema in which the developers 
--will create all additional application related objects such as stored procedures, views, and functions.

--Lastly, a database role called something like [Developer_Role] is created. Security principals (developers) are added to Developer_Role. 
--Developer_Role is granted SELECT, REFERENCES, INSERT, UPDATE, DELETE, and (optionally) VIEW DEFINTION permissions on the dbo schema. 
--Developer_Role is not granted ALTER or CONTROL permissions on the dbo schema. Developer_Role is granted ALTER and CONTROL permissions on Developer_Schema. 
--This explicit set of permissions will allow the developer to perform any action on the database tables with the exception of altering or dropping the table in any way. 
--The developers (principals) are configured with a default schema of Developer_Schema, allowing them to create objects in the Developer_Schema by default.

--Lastly, the required permissions are assigned to Database_Role at a database level, 
--for example, CREATE TABLE or DROP TABLE permissions. This is done using the GRANT statement.



--create a test database
CREATE DATABASE [SecurityTest]
GO
USE SecurityTest
GO
CREATE TABLE [dbo].[table1](
       [pkcol] [int] IDENTITY(1,1) NOT NULL,
       [col1] [int] NULL,
PRIMARY KEY CLUSTERED ([pkcol])
)
GO
--create test user login
CREATE LOGIN [User1] WITH PASSWORD=N'p@55w0rd'
GO
--create user in test database
CREATE USER [User1] FOR LOGIN [User1] WITH DEFAULT_SCHEMA=[Developer_Schema]
GO
--create role
CREATE ROLE [Developer_Role] AUTHORIZATION [dbo]
GO
--create schema
CREATE SCHEMA [Developer_Schema] AUTHORIZATION [User1]
GO
--apply permissions to schemas
GRANT ALTER ON SCHEMA::[Developer_Schema] TO [Developer_Role]
GO
GRANT CONTROL ON SCHEMA::[Developer_Schema] TO [Developer_Role]
GO
GRANT SELECT ON SCHEMA::[Developer_Schema] TO [Developer_Role]
GO
GRANT DELETE ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT INSERT ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT SELECT ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT UPDATE ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT REFERENCES ON SCHEMA::[dbo] TO [Developer_Role]
GO
--ensure role membership is correct
EXEC sp_addrolemember N'Developer_Role ', N'User1'
GO
--allow users to create tables in Developer_Schema
GRANT CREATE TABLE TO [Developer_Role]
GO
--Allow user to connect to database
GRANT CONNECT TO [User1]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_COMPLEX</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SELECT_HeaderRecords_where_they_have_ANY_Detail_Records</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_COMPLEX</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SELECT_HeaderRecords_where_they_have_ANY_Detail_Records</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>SELECT 
		[Header].[CustomerID] AS [CustomerID], 
		[Header].[NameStyle] AS [NameStyle], 
		[Header].[Title] AS [Title], 
		[Header].[FirstName] AS [FirstName], 
		[Header].[MiddleName] AS [MiddleName], 
		[Header].[LastName] AS [LastName], 
		[Header].[Suffix] AS [Suffix], 
		[Header].[CompanyName] AS [CompanyName], 
		[Header].[SalesPerson] AS [SalesPerson], 
		[Header].[EmailAddress] AS [EmailAddress], 
		[Header].[Phone] AS [Phone], 
		[Header].[PasswordHash] AS [PasswordHash], 
		[Header].[PasswordSalt] AS [PasswordSalt], 
		[Header].[rowguid] AS [rowguid], 
		[Header].[ModifiedDate] AS [ModifiedDate]

FROM [SalesLT].[Customer] AS [Header]

WHERE  EXISTS (SELECT 1 AS [C1]
				FROM [SalesLT].[SalesOrderHeader] AS [Detail]
				WHERE [Header].[CustomerID] = [Detail].[CustomerID]
			  )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_OVER</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_SELECT_OVER</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_OVER</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_SELECT_OVER</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_SELECT_OVER

/*

The purpose of the OVER clause is to define the window over which the function will be applied. 
The default functionality "OVER ()"  is to define the window for the entire table,
 		the result is the same as if you had used an aggregation function without a GROUP BY clause.
Some of what makes OVER unique includes the fact different windows can be specified in a single SELECT statement



OVER
==============================================================================
OVER allows you to get aggregate information without using a GROUP BY. 
	In other words, you can retrieve detail rows, and get aggregate data alongside it.
	For example, this query:
*/
SELECT 
		SUM(Cost) OVER () AS Cost
		, OrderNum
FROM Orders

--Will return something like this:

Cost  OrderNum
10.00 345
10.00 346
10.00 347
10.00 348

--Quick translation:
/*
SUM(cost) – get me the sum of the COST column
OVER – for the set of rows….
() – …that encompasses the entire result set.


OVER(PARTITION BY)
==============================================================================
OVER, as used in our previous example, exposes the entire resultset to the aggregation…”Cost” was the sum of all [Cost]  in the resultset.  
We can break up that resultset into partitions with the use of PARTITION BY:
*/
SELECT SUM(Cost) OVER (PARTITION BY CustomerNo) AS Cost
, OrderNum
, CustomerNo
FROM Orders

/*
My partition is by CustomerNo – each “window” of a single customer’s orders will be treated separately from each other “window”….
I’ll get the sum of cost for Customer 1, and then the sum for Customer 2:
*/
Cost  OrderNum   CustomerNo
8.00 345        1
8.00 346        1
8.00 347        1
2.00 348        2
/*
The translation here is:

SUM(cost) – get me the sum of the COST column
OVER – for the set of rows….
(PARTITION BY CustomerNo) – …that have the same CustomerNo.









Determines the partitioning and ordering of the rowset before the associated window function is applied.



PARTITION BY
	Divides the result set into partitions. 
	The window function is applied to each partition separately and computation restarts for each partition.
value_expression
	Specifies the column by which the rowset produced by the corresponding FROM clause is partitioned. 
	value_expression can only refer to columns made available by the FROM clause.
	value_expression cannot refer to expressions or aliases in the select list. 
	value_expression can be a column expression, scalar subquery, scalar function, or user-defined variable.
&lt;ORDER BY Clause&gt;
	Specifies the order to apply the ranking window function. For more information, see ORDER BY Clause (Transact-SQL).
	
Window functions are defined in the ISO SQL standard. SQL Server provides ranking and aggregate window functions. 
	A window is a user-specified set of rows. 
	A window function computes a value for each row in a result set derived from the window.
More than one ranking or aggregate window function can be used in a single query with a single FROM clause. 
	However, the OVER clause for each function can differ in partitioning and also ordering. 
	The OVER clause cannot be used with the CHECKSUM aggregate function.	
	
	
*/	
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SOMEE.COM</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MVC4 site publish to Somee</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SOMEE.COM</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MVC4 site publish to Somee</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://stackoverflow.com/questions/23139910/mvc4-site-publish-to-somee

As @Ehsan Sajjad said there was a problem with the FTP. Site path is required in Somee.

Here is the way to configure the publish tool under the connection section:

Publish method: FTP
Server: ftp://[YOUR USERNAME].somee.com
Site path: /www.[YOUR USERNAME].somee.com/ 
Passive mode: Checked 
User name: [YOUR USERNAME] 
Password: [YOUR PASSWORD] 

You may try other alternative to upload your files, please just download Filezilla tools and then please upload it to your root folder


========================================================================================

Publish method: FTP
Server:  ftp://domain.somee.com						{ FiveHappiness.somee.com }
Site path: Protected.domain.somee.com
Passive mode: Checked 
User name: [YOUR USERNAME] 
Password: [YOUR PASSWORD] 

As I publish above and i succeeded..
======================================================================================

or site path: www. your domain.somee.com –  Tarık Eren Tan Nov 1 '14 at 23:53
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQL_SECURITY</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>AccessAndPrivilegeLevel_WindowsUsers_Groups_Logins</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQL_SECURITY</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>AccessAndPrivilegeLevel_WindowsUsers_Groups_Logins</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
/////////// 1] all//////////////////////////////////////////////////////

SELECT  CONVERT(char(100), SERVERPROPERTY('ServerName')) AS Servername,
        sid,
        status,
        createdate,
        updatedate,
        accdate,
        totcpu,
        totio,
        spacelimit,
        timelimit,
        resultlimit,
        name,
        dbname,
        password,
        language,
        denylogin,
        hasaccess,
        isntname,
        isntgroup,
        isntuser,
        sysadmin,
        securityadmin,
        serveradmin,
        setupadmin,
        processadmin,
        diskadmin,
        dbcreator,
        bulkadmin,
        loginname
FROM    master..syslogins

////////2] Just sysadmins //////////////////////////////////////////////

--This query returns the name of each login that has
--sysadmin privileges, indicates
--whether the login is a Windows user (isntuser), or a Windows Group (isntgroup
-- and shows the date the login was created. Table 7.1 shows some
-- sample results. 


SELECT  loginname,
        sysadmin,
        isntuser,
        isntgroup,
        createdate
FROM    master..syslogins
WHERE sysadmin = 1 


////////3] Built in


exec xp_logininfo</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQL_SECURITY</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Execute_as_Owner</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQL_SECURITY</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Execute_as_Owner</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--from: http://clay.lenharts.net/blog/2008/01/24/sql-server-security-with-execute-as-owner/

/*
The general idea is to create your stored procedure with the EXECUTE AS OWNER modifier. 
Any user who has the permissions to execute the stored procedure,
	runs the stored procedure under the Database’s dbo user 
	(which means it can do anything in the database, 
		but nothing at the server-level nor on other databases). 
	If you only allow your Logins to execute stored procedures 
		(and not touch the tables directly), 
	then you’ve effectively limited the Logins to code you’ve written. 
	If you don’t write any DELETE statements, then Logins can’t delete anything.
	
This is better than Roles, 
	because Roles are very coarse in comparison.
With Roles, you may have to give a User INSERT permissions on table. 
Instead with EXECUTE AS OWNER you can write a stored procedure 
	that checks the data exactly the way you want in the body of the stored procedure. 
This is much more fine grained way of handling permissions.	

From beginning to end, this is what you do:

Create a Login:
*/
CREATE LOGIN [MyLogin] WITH PASSWORD=N'Password',
DEFAULT_DATABASE=[master], CHECK_EXPIRATION=OFF, CHECK_POLICY=ON;

--Create its User in the database:

CREATE USER [MyUser] FOR LOGIN [MyLogin];

--I prefer to use schemas to identify “public” stored procedures. So create a schema:

CREATE SCHEMA [public] AUTHORIZATION [dbo];

--Give your new user EXECUTE permissions on anything in the public schema: (We will put the new stored procedure in this schema):

GRANT EXECUTE ON SCHEMA::[public] TO [MyUser];

--Create your stored procedure:

CREATE PROCEDURE [public].[MyStoredProc]
(
@Param1 int
)
WITH EXECUTE AS OWNER   -- This "EXECUTE AS" modifier on the stored procedure is key!
AS
BEGIN
SET NOCOUNT ON;

-- do something

END

/*
When your stored procedure runs, it can do anything in the database, 
	including calling other stored procedures.
It is an easy way to segregate public stored procedures from private ones. 
This gives you encapsulation, which is a good thing (see section 5.3 in Code Complete about the benefits of encapsulation).
*/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQLCMD</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Nomenclature_and_Syntax</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQLCMD</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Nomenclature_and_Syntax</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.simple-talk.com/sql/sql-tools/sql-server-sqlcmd-basics/

see BAT section of DOSBATCH language
/*
a colon (:) precedes the sqlcmd directives. 
The colon is required for most of these commands. 
For a few of them, however, such as quit and exit, you can omit the colon. 

each sqlcmd directive must run on its own line
*/
--WINDOWS COMMAND
\\\\\\\\\\\\\\\\\
--This one begins with double exclamation points (!!):
:!!if exist C:\DataFiles\PersonData.txt del C:\DataFiles\PersonData.txt
--The exclamation points let you run a Windows operating system command, such as those you’d run directly at a command prompt.

--CONNECT
\\\\\\\\\\\\
The second line in our example uses the connect command to specify a connection to a SQL Server instance:

:connect localhost\sqlsrv2012

/*
Although this example is specific to a local SQL Server instance, 
	you can connect to any available instance for which you’ve been granted access. 
If that instance is the default one, you need only provide the server name. 
In addition, when you specify the server and, optionally, the instance name, 
sqlcmd uses Windows authentication to connect to SQL Server with your current account. 
However, you can also specify a username and password when connecting to an instance. 
To specify a username, add the -U switch followed by the username. 
To include a password, add the -P switch followed by the password. 
If you enter the username option without the password option, you’ll be prompted for a password.	*/

--OUT
\\\\\\\\\\\\

:out C:\DataFiles\PersonData.txt

/*
The command specifies that all query results should be redirected to an output file, in this case, the PersonData.txt file. 
If the file already exists when you run this commend, the file will be truncated. 
For this reason, you might not need to run a Windows command to first delete the file	*/

--interactive
\\\\\\\\\\\\\

/*
To work in interactive mode, open a command prompt window and enter sqlcmd at the command prompt. 
The prompt’s drive letter will be replaced by a 1, which represents the first line where you start entering your commands. 
The lines are numbered sequentially until all the commands are submitted, and then the numbering starts again.
*/

--When you use sqlcmd to switch to interactive mode, the utility establishes a connection to the default instance of SQL Server. 
-- If your system includes only named instances or you want to connect to a specific instance, 
-- you must specify the instance by adding the -S switch and instance name, as shown in the following command:

sqlcmd -S .\sqlsrv2012

-- In this case, I’ve used a period to represent the local computer, and I’m connecting to an instance named SqlSrv2012. 
--But you can connect to any accessible instance.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQLCMD</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Parameters_for_SQLCMD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQLCMD</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Parameters_for_SQLCMD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility?view=sql-server-2017
   -a packet_size  
   -A (dedicated administrator connection)  
   -b (terminate batch job if there is an error)  
   -c batch_terminator  
   -C (trust the server certificate)  
   -d db_name  
   -e (echo input)  
   -E (use trusted connection)  
   -f codepage | i:codepage[,o:codepage] | o:codepage[,i:codepage] 
   -g (enable column encryption) 
   -G (use Azure Active Directory for authentication)
   -h rows_per_header  
   -H workstation_name  
   -i input_file  
   -I (enable quoted identifiers)  --&lt;============== Need this for error: "INSERT failed because the following SET options have incorrect settings: 'QUOTED_IDENTIFIER'."
   -j (Print raw error messages)
   -k[1 | 2] (remove or replace control characters)  
   -K application_intent  
   -l login_timeout  								
   -L[c] (list servers, optional clean output)  
   -m error_level  
   -M multisubnet_failover  
   -N (encrypt connection)  
   -o output_file  
   -p[1] (print statistics, optional colon format)  
   -P password  
   -q "cmdline query"  
   -Q "cmdline query" (and exit)  
   -r[0 | 1] (msgs to stderr)  
   -R (use client regional settings)  
   -s col_separator  
   -S [protocol:]server[instance_name][,port]  
   -t query_timeout  
   -u (unicode output file)  
   -U login_id  
   -v var = "value"  
   -V error_severity_level  
   -w column_width  
   -W (remove trailing spaces)  
   -x (disable variable substitution)  
   -X[1] (disable commands, startup script, environment variables, optional exit)  
   -y variable_length_type_display_width  
   -Y fixed_length_type_display_width  
   -z new_password   
   -Z new_password (and exit)  
   -? (usage) </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQLCMD</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>ReadMe_SQLCMD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQLCMD</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>ReadMe_SQLCMD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>ReadMe_SQLCMD

open cmd 
C:\Users\ggarson&gt;

C:\Users\ggarson&gt; sqlcmd -S SQL-SERVER\PRODUCTION
1&gt; 

///////////////////////////////////


{this does a CHECKDB and outputs the results to a text file
C:\Users\ggarson&gt; sqlcmd -S SQL-SERVER\PRODUCTION -Q"DBCC CHECKDB (master) WITH ALL_ERRORMSGS, NO_INFOMSGS" -oC:\errorlist.txt


///////////////////////////////////

sqlcmd {switches are case senstive}
   -a packet_size
   -A (dedicated administrator connection)
   -b (terminate batch job if there is an error)
   -c batch_terminator
   -C (trust the server certificate)
   -d db_name	{this is the default to use for our commands}
   -e (echo input)
   -E (use trusted connection)
   -f codepage | i:codepage[,o:codepage] | o:codepage[,i:codepage]
   -h rows_per_header
   -H workstation_name	{name of the machine that has the instance of SQL Server on it}
   -i input_file
   -I (enable quoted identifiers)
   -k[1 | 2] (remove or replace control characters)
   -K application_intent
   -l login_timeout
   -L[c] (list servers, optional clean output)
   -m error_level
   -M multisubnet_failover
   -N (encrypt connection)
   -o output_file
   -p[1] (print statistics, optional colon format)
   -P password
   -q "cmdline query"
   -Q "cmdline query" (and exit)
   -r[0 | 1] (msgs to stderr)
   -R (use client regional settings)
   -s col_separator
   -S [protocol:]server[\instance_name][,port]	{this is the particular instance on the Hostname machine, e.g. dot (.) for local, 
   			you don't need this switch for a default instance}
   -t query_timeout
   -u (unicode output file)
   -U login_id
   -v var = "value"
   -V error_severity_level
   -w column_width
   -W (remove trailing spaces)
   -x (disable variable substitution)
   -X[1] (disable commands, startup script, environment variables and optional exit)
   -y variable_length_type_display_width
   -Y fixed_length_type_display_width
   -z new_password 
   -Z new_password (and exit)

   -? (usage)
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQL</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Xml data type is not supported in distributed queries</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQL</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Xml data type is not supported in distributed queries</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>ERROR: 

Msg 9514, Level 16, State 1, Procedure prj_0021_REP_002_SpotHeavyLightOperators, Line 67
Xml data type is not supported in distributed queries. Remote object 'B2WTIMESHEET\B2WONE.BUILD2WIN.dbo.BusinessUnit' has xml column(s).





Solution #1: Since I don't need the xml fields, I am creating a view 


=================================================================
https://social.msdn.microsoft.com/Forums/sqlserver/en-US/d53699b9-a949-44a5-9630-9570f38b127b/xml-data-type-is-not-supported-in-distributed-queries-remote-object-openrowset-has-xml-columns?forum=sqlxml

1. You cannot use a table or view that contains xml or clr type as 4-part name in your query
2. You need to cast the column to either nvarchar(max) or varbinary(max) or other appropriate type to use
3. If you have a table that has xml type for example then you need to create a view that contains all 
columns other than xml and query it instead. Or you can issue a pass-through query using OPEN QUERY with the appropriate columns only.

Here is a work around:

SELECT

      Cast(a.XML_Data as XML) as XML_Data

FROM

      OPENQUERY([LINKED SERVER NAME HERE],'

          SELECT

            Cast(XML_Data as Varchar) as XML_Data
         FROM
            [DATABASE NAME].[SCHEMA].[TABLE NAME]'
) a


Basically, the data is queried on the remote server, converts the XML data to a varchar, 
sends the data to the requesting server and then reconverts it back to XML.

=================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSIS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>FTP</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSIS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>FTP</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>The control that they give you works for FTP, however not for SFTP. 

When I used the FTP to a local Sharepoint server it hung up, but when I checked 'Passive' in the Connection manager it worked.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSIS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Problems_and_Solutions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSIS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Problems_and_Solutions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> From: http://pragmaticworks.com/LearningCenter/Resources/CheatSheets/SSISExpressionCheatSheet.aspx
 
 
Loop over a list of files &amp; load each one 	
--------------------------------------
		Tasks Required: Foreach Loop, Data Flow Task
		
		Solution: Configure the Foreach Loop to loop over any particular directory of files. The loop should be configured to output to a given variable. Map the given variable to a connection manager by using expressions.
		
Conditionally executing tasks 	
--------------------------------------
		Solution: Double-click the precedence constraint and set the Evaluation property to Expression and Constraint. Type the condition that you want to evaluate in the Expression box.

Pass in variables when scheduling or running a package 	
--------------------------------------

		Solution: Use the /SET command in the DTExec command line or change the Property tab in the Package Execution Utility to have the property path like: \Package.Variables[User::VariableName].Properties[Value]

Move and rename the file at the same time 	
--------------------------------------
		Tasks Required: File System Task

		Solution: Set the File System task to rename the file and point to the directory you'd like to move the file to. This enables you to rename and move the file in the same step.

Loop over an array of data in a table &amp; perform a set of tasks for each row 	
 --------------------------------------
		Tasks Required: Execute SQL Task, Foreach Loop

		Solution: Use an Execute SQL Task to load the array and send the data into an object variable. Loop over the variable in a Foreach Loop by use an ADO Enumerator.

Perform an incremental load of data 	
--------------------------------------
		Tasks Required: 2 Execute SQL Tasks, Data Flow Task

		Solution: Have the 1st Execute SQL Task retrieve a date from a control table of when the target table was last loaded and place that into a variable. In the Data Flow Task, create a date range on your query using the variable. Then, update the control table using a 2nd Execute SQL Task to specify when the table was last updated.
		
Perform a conditional update &amp; insert 	
--------------------------------------
		Components Required: Data Flow Task, Conditional Split, Lookup Transform or Merge Join, OLE DB Command Transform
		
		Solution: Use the lookup Transform or Merge Join to detemine if the row exists on the destination and ignore a failed match. If the row yields blank on the key, then you know the row should be inserted into the target (by Conditional Split). Otherwise, the row is a duplicate or an update. Determine if the row is an update by comparing the source value to the target value in the Conditional Split. The update can be done by an OLE DB Command Transform or by loading the data into a staging table.
		
Replace blanks with NULL values 	
--------------------------------------
		Derived Column Transform in the Data Flow:
		
		TRIM(ColumnName)=="" ? (DT_STR, 4, 1252)NULL(DT_STR, 4, 1252) : ColumnName

Remove any non-numeric data from a column 	
--------------------------------------
		Script Transform in the Data Flow Task with the code as follows (VB 2008):
		
		Imports System.Text.RegularExpressions
		
		Public Overrides Sub Input()_ProcessInputRows(ByVal Row As Input()Buffer)
		
		     If Row.ColumnName_IsNull = False Or Row.ColumnName = "" Then
		           Dim pattern As String = String.Empty
		           Dim r As Regex = Nothing
		           pattern = "[^0-9]"
		           r = New Regex(pattern, RegexOptions.Compiled)
		           Row.ColumnName = Regex.Replace(Row.ColumnName, pattern, "")
		      End If
		
		End Sub

Convert text to proper case
(ex. 1st letter in each word is uppercase) 	
--------------------------------------
		Script Transform with the line of partial code as follows:
		
		Row.OutputName = StrConv(Row.InputName, VBStrConv.ProperCase)

Build dynamic SQL statement 	
--------------------------------------
		Expression on the SQLStatementSource property of Execute SQL Task:
		
		"SELECT Column From " + @[User::TableName] +WHERE
		DateFilterColumn = '" + (DT_WSTR,4)YEAR(@
		[User::DateTimeVar]) + RIGHT("0" + (DT_WSTR,2)MONTH(@
		[User::DateTimeVar]),2) + RIGHT("0" + (DT_WSTR,2)DAY(@
		[User::DateTimeVar]),2) + "'"

Calculate beginning of the previous month 	
--------------------------------------
		Expression on Derived Column Transform:
		
		(DT_DATE) (DT_DBDATE)DATEADD("dd" , -1*(DAY(GETDATE()) -1), DATEADD("month", -1, GETDATE())) </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Download all RDL files from Report Server in one go.</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Download all RDL files from Report Server in one go.</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.sqlservercentral.com/blogs/juggling_with_sql/2013/08/07/ssrs-download-all-rdl-files-from-report-server-in-one-go/


/*
Implementation
SSRS uses SQL Server to store it’s details as a backend and the Catalog table 
	is used to store the report file in binary form. 
The below script simply pulls the report definition from the Catalog table &amp; uses BCP utility 
	to export the same at a pre-defined path as a .rdl file.
To use the BCP utility from TSQL, we need to execute  
	“xp_cmdshell” command; it is disabled by default. 
	So, first you need to execute the below script to enable it 
*/	

-- Allow advanced options to be changed.
EXEC sp_configure 'show advanced options', 1
GO
 
-- Update the currently configured value for advanced options.
RECONFIGURE
GO
 
-- Enable xp_cmdshell
EXEC sp_configure 'xp_cmdshell', 1
GO
 
-- Update the currently configured value for xp_cmdshell
RECONFIGURE
GO
 
-- Disallow further advanced options to be changed.
EXEC sp_configure 'show advanced options', 0
GO
 
-- Update the currently configured value for advanced options.
RECONFIGURE
GO

--Once successfully executed, the below script with the required changes could be executed to download the files -

--Replace NULL with keywords of the ReportManager's Report Path, 
--if reports from any specific path are to be downloaded
DECLARE @FilterReportPath AS VARCHAR(500) = NULL 
 
--Replace NULL with the keyword matching the Report File Name,
--if any specific reports are to be downloaded
DECLARE @FilterReportName AS VARCHAR(500) = NULL
 
--Replace this path with the Server Location where you want the
--reports to be downloaded..
DECLARE @OutputPath AS VARCHAR(500) = 'D:\Reports\Download\'
 
--Used to prepare the dynamic query
DECLARE @TSQL AS NVARCHAR(MAX)
 
--Reset the OutputPath separator.
SET @OutputPath = REPLACE(@OutputPath,'\','/')
 
--Simple validation of OutputPath; this can be changed as per ones need.
IF LTRIM(RTRIM(ISNULL(@OutputPath,''))) = ''
BEGIN
  SELECT 'Invalid Output Path'
END
ELSE
BEGIN
   --Prepare the query for download.
   /*
   Please note the following points -
   1. The BCP command could be modified as per ones need. E.g. Providing UserName/Password, etc.
   2. Please update the SSRS Report Database name. Currently, it is set to default - [ReportServer]
   3. The BCP does not create missing Directories. So, additional logic could be implemented to handle that.
   4. SSRS stores the XML items (Report RDL and Data Source definitions) using the UTF-8 encoding. 
      It just so happens that UTF-8 Unicode strings do not NEED to have a BOM and in fact ideally would not have one. 
      However, you will see some report items in your SSRS that begin with a specific sequence of bytes (0xEFBBBF). 
      That sequence is the UTF-8 Byte Order Mark. It’s character representation is the following three characters, “ï»¿”. 
      While it is supported, it can cause problems with the conversion to XML, so it is removed.
   */
   SET @TSQL = STUFF((SELECT
                      ';EXEC master..xp_cmdshell ''bcp " ' +
                      ' SELECT ' +
                      ' CONVERT(VARCHAR(MAX), ' +
                      '       CASE ' +
                      '         WHEN LEFT(C.Content,3) = 0xEFBBBF THEN STUFF(C.Content,1,3,'''''''') '+
                      '         ELSE C.Content '+
                      '       END) ' +
                      ' FROM ' +
                      ' [ReportServer].[dbo].[Catalog] CL ' +
                      ' CROSS APPLY (SELECT CONVERT(VARBINARY(MAX),CL.Content) Content) C ' +
                      ' WHERE ' +
                      ' CL.ItemID = ''''' + CONVERT(VARCHAR(MAX), CL.ItemID) + ''''' " queryout "' + @OutputPath + '' + CL.Name + '.rdl" ' + '-T -c -x'''
                    FROM
                      [ReportServer].[dbo].[Catalog] CL
                    WHERE
                      CL.[Type] = 2 --Report
                      AND '/' + CL.[Path] + '/' LIKE COALESCE('%/%' + @FilterReportPath + '%/%', '/' + CL.[Path] + '/')
                      AND CL.Name LIKE COALESCE('%' + @FilterReportName + '%', CL.Name)
                    FOR XML PATH('')), 1,1,'')
  
  --SELECT @TSQL
  
  --Execute the Dynamic Query
  EXEC SP_EXECUTESQL @TSQL
END</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SSRS_Table_info</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SSRS_Table_info</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
from: http://sornanara.blogspot.com/2011/05/ssrs-reportserver-database-tables.html 
Part I, II, II
/*
Let us take a look at below 3 tables.

                                              1. Catalog
                                              2. DataSource
                                              3. DataSets

Catalog

Stores the master data about all the objects related to SSRS listed below 
  
1 = Folder
2 = Report (.rdl)
3 = .XML 
4 = Link Report 
5 = Data Source (.rds) 
6 = Model 
8 = Shared Dataset
9 = Report Part 

This is the base master table where all the objects related to the SSRS is stored.

Some important fields
Parentid   - Under which object this object is present.
Type         - Type of the object as metioned above.
Content    - Has the report xml stored in varbinary format.
Properties - Has the XML with the properties of the object.
Parameter - Has the XML with parameters used in the reports.

  
DataSource
Stores the list of shared and embedded data sources available.

Some important fields
ItemId - Reference to the catalog table
Link     - Reference to the Report to which this datasource is linked.

  
DataSets
Stores the list of the shared datasets available. 

Some important fields
ItemId - Reference to the catalog table.
LinkId  - Reference to the Report to which this datasource is linked.
Name   - DataSet Name in the report.

Sample usage queries

1. To View the Report code in XML format from content field in Catalog Table
*/

SELECT  Name,Convert(XML,(Convert(VARBINARY(MAX),Content))) AS ReportXML
  FROM  ReportServer.dbo.Catalog
 WHERE  Content IS NOT NULL
   AND  [Type] = 2 -- For Report objects alone
   
--2. Get the Report's Created/Modified User and Created/Modified Dates.

SELECT Name
      ,CreatedBy = U.UserName
      ,CreationDate = C.CreationDate
      ,ModifiedBy = UM.UserName
      ,ModifiedDate
  FROM Reportserver.dbo.Catalog C
  JOIN Reportserver.dbo.Users U
    ON C.CreatedByID = U.UserID
  JOIN Reportserver.dbo.Users UM
    ON c.ModifiedByID = UM.UserID
 WHERE Name = 'ReportName'

--3. Get the List of Report Parameters for the given Report

SELECT  Name = Paravalue.value('Name[1]', 'VARCHAR(250)')
       ,Type = Paravalue.value('Type[1]', 'VARCHAR(250)')
       ,Nullable = Paravalue.value('Nullable[1]', 'VARCHAR(250)')
       ,AllowBlank = Paravalue.value('AllowBlank[1]', 'VARCHAR(250)')
       ,MultiValue = Paravalue.value('MultiValue[1]', 'VARCHAR(250)')
       ,UsedInQuery = Paravalue.value('UsedInQuery[1]', 'VARCHAR(250)')
       ,Prompt = Paravalue.value('Prompt[1]', 'VARCHAR(250)')
       ,DynamicPrompt = Paravalue.value('DynamicPrompt[1]', 'VARCHAR(250)')
       ,PromptUser = Paravalue.value('PromptUser[1]', 'VARCHAR(250)')
       ,State = Paravalue.value('State[1]', 'VARCHAR(250)')
 FROM (
     SELECT C.Name,CONVERT(XML,C.Parameter) AS ParameterXML
       FROM  ReportServer.dbo.Catalog C
      WHERE  C.Content is not null
        AND  C.Type  = 2
        AND  C.Name  =  'ReportName'
    ) a
CROSS APPLY ParameterXML.nodes('//Parameters/Parameter') p ( Paravalue )

--4. Get the Data Sources used in the Report
--Note : The XML Schema used here is for SQL 2011. You need to change it to make it work for other versions. To see the schema use the first query in the samples list.

WITH XMLNAMESPACES ( DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition', 'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner' AS rd )
SELECT  ReportName     = name
       ,DataSourceName   = x.value('(@Name)[1]', 'VARCHAR(250)')
       ,DataProvider   = x.value('(ConnectionProperties/DataProvider)[1]','VARCHAR(250)')
       ,ConnectionString = x.value('(ConnectionProperties/ConnectString)[1]','VARCHAR(250)')
  FROM (  SELECT C.Name,CONVERT(XML,CONVERT(VARBINARY(MAX),C.Content)) AS reportXML
           FROM  ReportServer.dbo.Catalog C
          WHERE  C.Content is not null
            AND  C.Type  = 2
      AND  C.Name  = 'ReportName'
        ) a
  CROSS APPLY reportXML.nodes('/Report/DataSources/DataSource') r ( x )
 ORDER BY name ;

--5. Get the Data Sets used in the Report.
--Note : The XML Schema used here is for SQL 2011. You need to change it to make it work for other versions. To see the schema use the first query in the samples list.

WITH XMLNAMESPACES ( DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition', 'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner' AS rd )
SELECT  ReportName    = name
       ,DataSetName    = x.value('(@Name)[1]', 'VARCHAR(250)')
       ,DataSourceName  = x.value('(Query/DataSourceName)[1]','VARCHAR(250)')
       ,CommandText    = x.value('(Query/CommandText)[1]','VARCHAR(250)')
       ,Fields      = df.value('(@Name)[1]','VARCHAR(250)')
       ,DataField    = df.value('(DataField)[1]','VARCHAR(250)')
       ,DataType    = df.value('(rd:TypeName)[1]','VARCHAR(250)')
  FROM (  SELECT C.Name,CONVERT(XML,CONVERT(VARBINARY(MAX),C.Content)) AS reportXML
           FROM  ReportServer.dbo.Catalog C
          WHERE  C.Content is not null
            AND  C.Type = 2
         AND  C.Name = 'ReportName'
     ) a
  CROSS APPLY reportXML.nodes('/Report/DataSets/DataSet') r ( x )
  CROSS APPLY x.nodes('Fields/Field') f(df)
ORDER BY name
--6. Get the list of Data Sources used by Reports using DataSources Table.

SELECT D.Name
       ,'Using Report '
      = CASE
        WHEN D.Name IS NOT NULL THEN  C.Name
        ELSE 'Shared Data Source'
        END
      ,'IsSharedDataSource' = CLink.Name
     FROM DataSource D
     JOIN Catalog C
     ON D.ItemID = C.ItemID
LEFT JOIN Catalog CLink
     ON Clink.ItemID = D.Link
  WHERE C.Name = 'ReportName'   

/*  
Today let us look into the below tables

1. Subscription
2. Schedule
3. ReportSchedule
4. ActiveSubscription
5. Notifications
6. Event
7. Batch

Subscription

This table stores the subscriptions created by the user.

Some important fields

Description           - Name or detail of the subscription
Laststatus             - Last status of message of the subscription
Eventype              - Event type which has used the subscription
Parameters           - XML value with the parameters used while running the subscription
DeliveryExtension - The extension to which the report is delivered

Schedule

Stores the details of the schedules like shared schedules , TimedSubscription , ReportHistorySchedule

Some important fields

Name                    - Schedule Name
StartDate              - Schedule StartDate
NextRunTime       - Next run time for the schedule
LastRunTime        - Last Run time of the schedule
Endate                 - The end date for the schedule
State                    - State of the Subscription. If state &gt; 2 , the subscription is expired i.e, endate has crossed.
RecurrenceType   - Stores the recurrencetype of the schedule
                              1 - Once
                              2 - Hourly 
                              4 - Daily / Weekly
                              6 - Monthly
EventType           - Stores the eventtype 
                              SharedSchedule - Shared schedule
                              TimedSubscription - Schedule created within the subscription
                              RefreshCache - Schedule created for refreshing the cache.

ReportSchedule

Stores the mapping between Schedule , Report &amp; Subscription.

ActiveSubscriptions

Stores the subscription notification consolidated results.

Notifications

Stores the notification sent by the subscriptions.

Event

Internal Table. When the scheduled time comes for a scheduler , the SQL Server Agent generates an event by executing the scheduled job. The job inserts a row in the Event table of the ReportServer database. This row serves as an event for the Scheduling and Delivery Processor. The event record will be deleted after the process.

Batch

Internal Table. One event will be assigned as batches and processed. The batch record also will be deleted after process.

Sample usage queries

1. Get the Schedule List with type and Recurrence	*/

SELECT Name
    ,StartDate
    ,EndDate
    ,NextRunTime
    ,LastRunTime
    ,LastRunStatus
    ,RecurrenceType = CASE RecurrenceType
            WHEN  1 THEN 'Once'
            WHEN  2 THEN 'Hourly '
            WHEN  4 THEN 'Daily / Weekly'
            WHEN  6 THEN 'Monthly'
            End
   ,EventType
FROM Schedule

--2. Query to get the list of Subscription and it's schedule for a given report

SELECT Reportname = c.Name
      ,SubscriptionDesc=su.Description
      ,Subscriptiontype=su.EventType
      ,su.LastStatus
      ,su.LastRunTime
      ,su.Parameters
      ,Schedulename=sch.Name
      ,sch.Type
      ,sch.EventType
  FROM Subscriptions su
  JOIN Catalog c
    ON su.Report_OID = c.ItemID
  JOIN ReportSchedule rsc
    ON rsc.ReportID = c.ItemID
   AND rsc.SubscriptionID = su.SubscriptionID
  JOIN Schedule Sch
    ON rsc.ScheduleID = sch.ScheduleID
 WHERE c.Name = '@ReportName'

--3. Query to get the notification details sent for the given report

SELECT C.Name
      ,S.Description
      ,N.NotificationEntered
      ,A.TotalNotifications
      ,A.TotalSuccesses
      ,A.TotalFailures
  FROM Notifications N
  JOIN ActiveSubscriptions A
    ON N.SubscriptionID = A.SubscriptionID
   AND N.ActivationID = A.ActiveID
  JOIN Catalog C
    ON C.ItemID = N.ReportID
  JOIN Subscriptions S
    ON S.SubscriptionID = N.SubscriptionID
 WHERE c.Name = '@ReportName'  
 
 /*
 SSRS - Reportserver Database Tables Explored - Part 3
Today let us take look into the security related below tables

1. Users
2. Policies
3. Roles
4. PolicyRole
5. CachePolicy
6. SecData
7. ModelItemPolicy 
  
Users 

Stores the list of users 

Some important fields
Usertype - Stores User type 
                 0 – system defined
                 1 – User Defined

Policies

Stores a one policy per userdefined object created. If policy flag is 1 , that is system defined policy for the system administrators.

The policyId created will be mapped to each userdefined object in catalog table.

Roles

Stores the Roles related to the Reports. Presently available roles are

Browser	May view folders, reports and subscribe to reports.
Content Manager	May manage content in the Report Server. This includes folders, reports and resources.
Model Item Browser	Allows users to view model items in a particular model.
My Reports	May publish reports and linked reports; manage folders, reports and resources in a users My Reports folder.
Publisher	May publish reports and linked reports to the Report Server.
Report
Builder	May view report definitions.
System Administrator	View and modify system role assignments, system role definitions, system properties,and shared schedules.
System User	View system properties, shared schedules, and allow use of Report Builder or other clients that execute report definitions.

PolicyRole

This stores the mapping between the User , Role and policy of a catalog object.

CachePolicy

Stores the cache details in processing options section of reports. If you select donot cache option no records will be inserted in this table.

SecData

Stores the total permission for the reports and other objects in XML format .

ModelItemPolicy

This table stores the data of the access provided at the modelitem level in ModelItemSecurity tab under the Manage model.

Sample usage queries

1. Get the users and their roles mapped for the reports	*/

SELECT c.name,
       u.username,
       u.authtype,
       r.rolename,
       r.DESCRIPTION
 FROM users u
 JOIN policyuserrole pur
   ON u.userid = pur.userid
 JOIN policies p
   ON p.policyid = pur.policyid
 JOIN roles r
   ON r.roleid = pur.roleid
 JOIN catalog c
   ON c.policyid = p.policyid
WHERE c.TYPE = 2 -- For Reports Only
ORDER BY name,username 

--2. Get the Cache Policy for the Reports

SELECT c.name,
       cp.cacheexpiration,
       cp.expirationflags
 FROM  cachepolicy cp
 JOIN  catalog c
   ON  c.itemid = cp.reportid

--3. Get the Security Details XML from SecData Table

 SELECT c.name,
       CONVERT(XML, sec.xmldescription)
  FROM catalog c
  JOIN secdata sec
    ON c.policyid = sec.policyid
 WHERE c.TYPE = 2 

--4. Get the Model Item's User and Role

SELECT c.name,
       mip.modelitemid,
       u.username,
       r.rolename
  FROM catalog c
  JOIN modelitempolicy mip
    ON c.itemid = mip.catalogitemid
  JOIN policies p
    ON p.policyid = mip.policyid
  JOIN policyuserrole pur
    ON p.policyid = pur.policyid
  JOIN users u
    ON u.userid = pur.userid
  JOIN roles r
    ON r.roleid = pur.roleid 
    
/*
SSRS - Reportserver Database Tables Explored - Part 4
In this post of this series let us take a look into the below tables

1.SnapshotData
2.History
3.ExecutionLogStorage
4.ModelDrill
5.ModelPerspective

SnapshotData

Stores the configuration of the snapshot for the report.

History

Has the history of snapshot of reports with the parameters and other details.

ExecutionLogStorage

Has the execution log for each and every report launched in the reporting server. This table data is help full for performance tuning the report.
Some Important Fields
Parameters	Parameters passed for the report
TimeStart	Start time
TimeEnd	End time
TimeDataRetrieval	Total Reporting time = Timeprocessing + TimeRendering
TimeProcessing	Time taken to retrieve the data from database
TimeRendering	Time taken for rendering the report
Status	Status success or failure

ModelDrill

Stores the details of the custom click through report configured for the model items. This can be set up on ModelsàManage à Click through.

ModelPerspective

Stores the name and the perspectives list created with in the model. A perspective can be created in BIDS by rightclick on Model àNew à Perspective. 

This is similar to SSAS perspective to group the attributes. 

Sample usage queries 
  
1. Get the details of the history pf the snapshot with report name and schedule used to create the snapshot */


SELECT c.name,
       h.snapshotdate,
       s.DESCRIPTION,
       s.effectiveparams,
       s.queryparams,
       sc.name,
       sc.nextruntime
  FROM history h
  JOIN snapshotdata s
    ON h.snapshotdataid = s.snapshotdataid
  JOIN catalog c
    ON c.itemid = h.reportid
  JOIN reportschedule rs
    ON rs.reportid = h.reportid
  JOIN schedule sc
    ON sc.scheduleid = rs.scheduleid
 WHERE rs.reportaction = 2 -- Create schedule

--2. Get the execution details of a given report with the details like User executing the report , Execution time etc

SELECT c.name,
       CASE e.requesttype
       WHEN 1 THEN 'Subscription'
       WHEN 0 THEN 'Report Launch'
       ELSE ''
       END,
       e.*
  FROM executionlog e
  JOIN catalog c
    ON e.reportid = c.itemid
 WHERE c.name = N'@Reportname'     
/*
SSRS - Reportserver Database Tables Explored - Part 5 (Final)
In this last post of this series let us look into the below tables.All the below tables are SSRS internal tables which used by the Report Server to stores values needed for it's execution and other operations 

1.ConfigurationInfo
2.RunningJobs
3.Keys
4.UpgradeInfo
5.ServerUpgradeHistory
6.DBUpgradeHistory
7.ChunkData
8.ChunkSegmentMapping
9.Segment
10.SegmentedChunk
11.ServerParametersInstance
12.SubscriptionsBeingDeleted

ConfigurationInfo

Has server level configuration info like “EnableRemoteErrors” . If this set to true it will give detailed error from SSRS. This table can be manually updated.

RunningJobs

Internal Table : This stores the jobs currently which is associated with scheduling , snapshot etc

Keys

Internal Table. Has the details about the installation , symmetric encryption key and scale out option keys.

UpgradeInfo

Internal Table. Has the items and status for the items to be taken care during the server upgrade.

ServerUpgradeHistory

Internal Table. Has the details of the previous server version and current server versions in case of upgrades.

DBUpgradeHistory

Internal Table. Has the Database upgrade history for the DB upgrade.

ChunkData

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

ChunkSegmentMapping

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

Segment

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

SegmentedChunk

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

ServerParametersInstance

Internal Table.

SubscriptionsBeingDeleted

Internal Table.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>HyperLink_to_OPEN_another_URL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>HyperLink_to_OPEN_another_URL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Good overview
https://acmeware.com/blog/24-data-repository/165-new-blog-urls-in-reporting-services-1
and
https://acmeware.com/blog/24-data-repository/173-using-urls-in-reporting-services-2

some issues from 2020
https://forums.ivanti.com/s/question/0D54O00006XJFVA/ssrs-open-url-in-new-tab?language=en_US

https://stackoverflow.com/questions/55051278/open-ssrs-action-urls-in-a-new-tab-window
I found that to use the snippet javascript:void etc... the report needed to be deployed to the ReportServer first.

https://stackoverflow.com/questions/65360159/add-target-window-tab-to-tablix-action-url
 URL defined in my query,

////////////////////////////////////////////////////////////////////////////////////////////////
2013:   https://stackoverflow.com/questions/18003013/open-ssrs-url-in-new-window/20102487
////////////////////////////////////////////////////////////////////////////////////////////////

Here is what I had used; it will open the ChildReport in a new tab,
 with a parameter voucher_id and its value passed from a dataset.
 
="javascript:void window.open(" &amp;"'"&amp; Globals!ReportServerUrl &amp;"/Pages/ReportViewer.aspx?"&amp;Globals!ReportFolder &amp;"/JournalVoucher&amp;voucher_id="&amp;Fields!account_voucher_id.Value &amp;" ','_blank')"
////////////////////////////////////////////////////////////////////////////////////////////////

="javascript:void(window.open('https://na5.salesforce.com/" &amp; Fields!id.Value &amp; "'))"

="javascript:void(window.open('https://na5.salesforce.com/" &amp; Fields!id.Value &amp; "','_blank'))"

/////////////////////////////////////////////////////////////////////////////////////////////

You can also add multiple javascript commands (but no functions) in the same action expression. 
Below is one of my most complicated SSRS Go-to-URL Action commands:

The key is to make sure that any and all necessary single quotes required by javascript show up inside a string (i.e., "'").

="Javascript:" 
    &amp; IIF(left(Fields!Name.Value,11)="RESTRICTED-", 
        "alert('Restricted!'); ","") &amp; IIF(Fields!Name_Alert.Value = 1, "alert('Alternate Alert!'); ","") 
    &amp; "void(window.open('" 
    &amp; Globals!ReportServerUrl 
    &amp; "/Pages/ReportViewer.aspx?%2fJPD%2fPO_Dashboard%2fJuvenile_Profile&amp;rs:Command=Render" 
    &amp; "&amp;rc:Parameters=true" 
    &amp; "&amp;Emp_Number=" 
    &amp; Parameters!Param1.Value 
    &amp; “&amp;ID=" &amp; Fields!ID.Value &amp; "'));"
    
ANOTHER PERSON SAID:
Tested it, worked only in Chrome for me.
And third, it's a mess to put it together.

There's a far easier &amp; better solution:
Add &amp;rc:LinkTarget=_blank to your report access URL, like:  (and it will open in a new window tab.)

https://your-domain.com/ReportServer/Pages/ReportViewer.aspx?%2fJPD%2fPO_Dashboard%2fJuvenile_Profile&amp;rs:Command=Render&amp;rc:LinkTarget=_blank   

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Hyperlink_to_subreport_with_PARM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Hyperlink_to_subreport_with_PARM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


https://docs.microsoft.com/en-us/sql/reporting-services/pass-a-report-parameter-within-a-url?redirectedfrom=MSDN&amp;view=sql-server-ver15


------------------------------------------------------------------------------------------------------------------
Report parameters are case-sensitive and utilize the following special characters:

Any space characters in the URL string 
	are replaced with the characters "%20," according to URL encoding standards.
A space character in the parameter portion 
	of the URL is replaced with a plus character (+).
A semicolon in any portion of the string 
	is replaced with the characters "%3A."
Browsers should automatically perform the proper URL encoding. You do not have to encode any of the characters manually.
------------------------------------------------------------------------------------------------------------------

 To set a report parameter within a URL, use the following syntax:
 
	parameter=value  
	
For example, to specify two parameters, "ReportMonth" and "ReportYear", defined in a report, use the following URL for a native mode report server:	

	https://myrshost/ReportServer?/AdventureWorks 2008R2/Employee_Sales_Summary_2008R2&amp;ReportMonth=3&amp;ReportYear=2008
	
-------------------------------------------------------------------	
To pass a null value for a parameter, use the following syntax:

parameter  
:isnull=true  

For example:

SalesOrderNumber:isnull=true

-------------------------------------------------------------------
To pass a Boolean value, use 0 for false and 1 for true. 
To pass a Float value, include the decimal separator of the server locale

-------------------------------------------------------------------
Additional Examples

1] Ex. 1

Folder name of "SQL Server User Education Team" includes spaces and therefore the "+" replaces each space.

Report name of "team project report" includes spaces and therefore the "+" replaces each space.

Passes two parameters of "teamgrouping2" with a value of "xgroup" and "teamgrouping1" with a value of "ygroup".

LIKE THIS:

https://myserver/Reportserver?/SQL+Server+User+Education+Team/_ContentTeams/folder123/team+project+report&amp;teamgrouping2=xgroup&amp;teamgrouping1=ygroup

-------------------------------------------------------------------

2] Ex. 2

The following URL example includes a multi-value parameter "OrderID. The format for a Multi-Value parameter is to repeat the parameter name for each value.

https://myserver/Reportserver?/SQL+Server+User+Education+Team/_ContentTeams/folder123/team+project+report&amp;teamgrouping2=xgroup&amp;teamgrouping1=ygroup&amp;OrderID=747&amp;OrderID=787&amp;OrderID=12

-------------------------------------------------------------------

3] Ex. 3

The following URL example passes a single parameter of SellStartDate with a value of "7/1/2005", for a native mode report server.

https://myserver/ReportServer/Pages/ReportViewer.aspx?%2fProduct_and_Sales_Report_AdventureWorks&amp;SellStartDate=7/1/2005





















</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MultipleValueParameter</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MultipleValueParameter</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Two versions:
1] Original from article
2] my working version
=========================

Getting Multi-Value params to work with Stored Procedures
This is no great secret. But anyway, here it is again:

1. The stored procedure for the report should declare any multi-value parameters as type nvarchar(max).

2. In the Report Designer, your parameter should have the 'Allow multiple values' option ticked (obviously). {Look in the Parameters folder}
Also, it helps to set the Data type to 'Text' even if its actually an integer or something, 
because we're going to have to treat it as text later on in the Stored Procedure.

 3. In the DataSet that calls the stored procedure, go to the Parameters tab:

4. For each parameter that needs to be a multi-value one, press the Fx button and change the default:

=Parameters!TerritoryMulti.Value

to

=Join(Parameters!xxxxxx.Value, ",")							{where xxxxxx is the parameter name}

This will just string the multi-values together into a comma separated string.

5. In the database, you need a function that can split comma-separated values back out into a table format. There are lots of variations of this sort of function around, here's the one I use:

CREATE FUNCTION [dbo].[ufnSplit]
   (@RepParam nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 

6. The query inside the stored procedure that uses the multi-value parameter should use it like this:

WHERE 
sometable.TerritoryID in (select Item from dbo.ufnSplit(@TerritoryMulti,','))

... that is, it uses ufnSplit to split the passed values out into a table, and then selects from that table and uses 'in' to check for membership.


==============================================================================================
This is also in the SQL section, for the function 'fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters'
Here are those notes:
=====================

--I used this function for a multivalue parameter report in  SSRS 

--SUMMARY: 
/*
a) Let a user pick one or more values for a particular Parm.
b) Use an Expression in the 'Value' of a Parameter that concatenates the multiple values into one string
c) Feed the multi-value string to the Stored Procedure
d) Then have a function that un-packs the substrings into seperate pieces, with commas between each piece
e) Then use that comma-seperated string of multiple values in an 'IN' statement of a WHERE clause in the 
	Stored Proc that gets the data for the DataSet of the SSRS Report



use a function that returns a table, of substrings, given a Large string made up of of Concatenated sub-strings



*/
--1] In the SSRS dataset properties, pass the multi-value param to the stored procedure as a comma-delimited string

-- for the Dataset, in the SSRS Report, right click =&gt; Properties =&gt; Parameters (e.g. for Parm '@BU'), for the Parm 'Value' 
--		use this expression:
								=JOIN(Parameters!BU.Value,",")

--2] Create this function in SQL Server to be used by the stored procedure that provides the data to the report

CREATE FUNCTION [dbo].[fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters]
   (@ConcatenatedSubStrings nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@ConcatenatedSubStrings)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@ConcatenatedSubStrings,@chrind - 1)
      ELSE
        SELECT @Piece = @ConcatenatedSubStrings
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @ConcatenatedSubStrings = RIGHT(@ConcatenatedSubStrings,LEN(@ConcatenatedSubStrings) - @chrind)
      IF LEN(@ConcatenatedSubStrings) = 0 BREAK
    END
  RETURN
  END 
  
 --3] Then in the Stored procedure, for the Dataset, you can call the function 
  
--======= How to Use the function in the Stored Proc for the report:=========================================================================================
SELECT *
FROM SomeTable
WHERE
	(BU_Name IN (select Item from dbofn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters(@BU,','))	)	
--===================================================================================================================  
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Subscription_eMail_Delivery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Subscription_eMail_Delivery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://msdn.microsoft.com/en-us/library/ms345234(v=sql.105).aspx
https://msdn.microsoft.com/en-us/library/ms159155(v=sql.105).aspx
will need to RDP to the server to set email up, and will need permissions set on SMTP server to allow


1] Set up an SMTP server for Relay

	Authentication: Basic Authentication (or what BCC does)
		Requires:
			UserName
			Password
		[x] TLS Encryption
		outbound Port: 25
		Need from Server
			DNS Name and SmartHost (Your SMTP Server name’s IP or Name).
			
2] Configure the Reporting Services Configuration Manager

	Email Settings
	Sender's Email Address
	Current SMTP Delivery Method {greyed out: Use SMTP Server}
	SMTP Server {IP Address}: </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Subscription_Errors_and_Issues</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Subscription_Errors_and_Issues</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

ERROR:  "Subscriptions cannot be created because the credentials used to run the report are not stored, or if a linked report, the link is no longer valid"
======================================================================================================
REF
http://stackoverflow.com/questions/6019764/problem-creating-ssrs-report-subscriptions

Are you using a shared data source? Is it using Windows integrated security? 
	If so, can you change it to use a service account made just to run these reports?
	You may need to view these properties by viewing the data source itself.

If it is a custom data source is the option "Credentials supplied by the user running the report" selected? 
	If so, can you change it to "Credentials stored securely in the report server"?

Either way, if you want to set up a subscription, 
	I have made it work by providing credentials in the data source rather than have the user input them.
	
What the error does not make clear is, in order to be able to subscribe to a report not only must the data source be set to 
	"Credentials stored securely in the report server" 
	you must also not select the option "Impersonate the authenticated user after a connection has been made to the data source".	
	
I would suggest setting up a service account if you are going to go this route rather than using the sa password.  
	... creating a service account - something like serviceReportViewer 
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Subscriptions_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Subscriptions_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
SQL Server Agent must be running for subscriptions to work

Data sources need the credentials stored with the report, so if it is configured for 'Windows Integrated Security'
either set it to use a service account made just to run these reports, and store the credentials securely 
in the report server, or give it the credentials of a user and store the credentials securely 
in the report server.


Standard subscriptions 
======================
are created and managed by individual users. 
A standard subscription consists of static values that cannot be varied during subscription processing. 
For each standard subscription, there is exactly one set of report presentation options, delivery options, and report parameters.

Data-driven subscriptions 
=========================
get subscription information at run time by querying an external data source that provides values used to specify a recipient, 
report parameters, or application format. 
Report server administrators typically create and manage these subscriptions.



Security policy requirements for stored credentials
=======================================================
ref: https://msdn.microsoft.com/en-us/library/ms159736.aspx
It is required that the account you use for stored credentials, 
is configured for one of the following security policies on the report server. 
It is recommended you select the policy with the minimum level of permissions you require for your environment.
	Allow log on locally. For more information, see Allow log on locally.
	Log on as a batch job. For more information, see Log on as a batch job.
	For general information on policies, see Edit security settings on a Group Policy object.

NOTE: I did get it to accept this strategy, when then let me set up a subscription, HOWEVER, this is NOT a best Practice
	- I set: [x] Use as Windows credentials when connecting to the data source. 
	- I used my Windows User ID:  BCC\glenng and my password.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Subscriptions_Stored_Credentials</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Subscriptions_Stored_Credentials</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://msdn.microsoft.com/en-us/library/ms160330(v=sql.105).aspx

Credentials are stored in reversible encryption in the report server database. 
You can specify one set of stored credentials for each data source used in a report. 
The credentials you provide retrieve the same data for every user who runs the report.

Stored credentials are required if you want to support subscriptions, 
	or schedule report history generation or report snapshot refreshes. 
When a report runs as a background process, 
	the report server is the agent that executes the report. 
Because there is no user context in place,
	the report server must get credential information from the report server database 
	in order to connect to a data source.

The user name and password that you specify can be Windows credentials or a database login. 
	If you specify Windows credentials, the report server passes the credentials to Windows 
	for subsequent authentication. 
	Otherwise, the credentials are passed to the database server for authentication.

How to Grant "Allow log on locally" Permissions to Domain User Accounts
------------------------------------------------------------------------
If you use stored credentials to connect to an external data source, 
	the Windows domain user account must have permission to log on locally. 
	This permission allows the report server to impersonate the user 
	on the report server and send the request to the external data source as that impersonated user.

To grant this permission, do the following:
	1] On the report server computer, in Administrative Tools, open Local Security Policy.
	2] Under Security Settings, expand Local Policies, and then click User Rights Assignment.
	3] In the details pane, right-click Allow log on locally and then right-click Properties.
	4] Click Add User or Group.
	5] Click Locations, specify a domain or other location that you want to search, and then click OK.
	6] Enter the Windows account for which you want to allow interactive login, and then click OK.
	7] In the Allow log on locally Properties dialog box, click OK.
	8] Verify that the account you selected does not also have deny permissions:
		a. Right-click Deny log on locally and then right-click Properties.
		b. If the account is listed, select it and then click Remove.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ALL_select_checkBox_in_SSRS__SSRS_Steps</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ALL_select_checkBox_in_SSRS__SSRS_Steps</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

/*
Getting Multi-Value params to work with Stored Procedures
========================================================

1. The stored procedure for the report should declare any multi-value parameters as type nvarchar(max).

2. In the Report Designer, your parameter should have the 'Allow multiple values' option ticked (obviously). 
	Also, it helps to set the Data type to 'Text' even if its actually an integer or something, 
	because we're going to have to treat it as text later on in the Stored Procedure.
	
3. In the DataSet that calls the stored procedure, go to the Parameters tab:

4. For each parameter that needs to be a multi-value one, press the Fx button and change the default:	*/
		=Parameters!BU.Value
--to
		=JOIN(Parameters!BU.Value,",")
/*
	This will just string the multi-values together into a comma separated string.
	
5. In the database, you need a function that can split comma-separated values back out into a table format. 
	There are lots of variations of this sort of function around, see snippet for the SQL_FUNCTION
	
6. The query inside the stored procedure that uses the multi-value parameter should use it like this:	*/

		WHERE 
		(BU_Name IN (select Item from dbo.prj_0013_FN_401_unSplit(@BU,','))	) 
/*
	... that is, it uses prj_0013_FN_401_unSplit to split the passed values out into a table, 
		and then selects from that table and uses 'in' to check for membership.
		
7. IF you want to select all by default, then for the Parameter =&gt; "default value", and list the SP that has all
	the values for the drop-down
		(x) Get Values from a query 
		DataSet: name of the SP with all the drop-down Values
		Value Field: The name of the field used in the label for the drop-down		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Optional_Parameter_for_SP</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Optional_Parameter_for_SP</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://sqlstudies.com/2019/07/29/optional-vs-required-parameters-in-stored-procedures/
--If you are executing a stored procedure with a bunch of parameters 
--	it can be a bit of a pain if you have to pass a value in for each of them. 
--Fortunately, it’s pretty easy to make some parameters required and others optional. 


--The first three parameters are required and the next three aren’t. 
--You’ll notice that any valid value is fine even NULL.
CREATE PROCEDURE LotsOfParams (@Param1 INT, @Param2 INT, @Param3 INT, 
            @Param4 INT=NULL, @Param5 INT=0, @Param6 INT=5)
AS
PRINT 1;
GO

--These work:
--===========================================
EXEC LotsOfParams 1, 2, 3;
EXEC LotsOfParams 1, 2, 3, 4;
EXEC LotsOfParams @Param1 = 1, @Param3 = 2, @Param2 = 3;


--These don’t:
--===========================================
EXEC LotsOfParams 1, 2;
EXEC LotsOfParams @Param4 = 1, @Param5 = 2;
EXEC LotsOfParams 1, @Param4 = 1, @Param5 = 2;


--If you don’t specify the parameter names then they are strictly in the defined order. 
--		(@Param1, @Param2, etc)
--If you do specify parameter names then it doesn’t matter what order you put them in.

--Regardless of what order you put the parameters in, and if they are named or not, 
--	all of the required parameters must be ther

/////////////////////////////////////////////////////////////////////////////////////////////



--You simply give them a default valu

https://stackoverflow.com/questions/1810638/optional-parameters-in-sql-server-stored-proc

CREATE PROCEDURE MyProcName
    @Parameter1 INT = 1,
    @Parameter2 VARCHAR (100) = 'StringValue',
    @Parameter3 VARCHAR (100) = NULL				
AS

/* check for the NULL / default value (indicating nothing was passed */
if (@Parameter3 IS NULL)
BEGIN
    /* whatever code you desire for a missing parameter*/
    INSERT INTO ........
END

/* and use it in the query as so*/
SELECT *
FROM Table
WHERE Column = @Parameter</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>STANDARD_Update_with_RowVersion_check_for_Change</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>STANDARD_Update_with_RowVersion_check_for_Change</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] SP
2] TEST

//////////////////////////////////////SP

-- prj_8011_SP_057_UPDATE_EmployeePosition_given_T29PK.sql
-----------------------------------------

/* This SP will:

  		1] Check for existence of T29_PK in Table T29		
  		IF the record is found the SP will
  		2] Update the record in T29
  			
  			
	************************************************************************************
	NOTE: 
		Return 0 =&gt; The record did not exist or it was changed.
		Return 1 =&gt; The record was updated
		Return 2 =&gt; There was an error while trying to update the  Record.
	Uses: 
	Created: 4/4/2014
	By: glenn garson
	************************************************************************************

*/

SET NOCOUNT ON
Use DB2_CRM
go



alter PROCEDURE prj_8011_SP_057_UPDATE_EmployeePosition_given_T29PK(
	@iT29_PK AS  INT,
	@ORIGINAL_T29_RowVersion as rowversion,
------	

	@NEW_Position_Prefix AS nvarchar(25),
	@NEW_Position_Role_e37 AS smallint,
	@NEW_Position_Character_Separator AS nvarchar(25),
	@NEW_Position_Descriptor AS nvarchar(25),
	@NEW_Position_Region_e38 AS smallint,
	@NEW_Position_Override AS nvarchar(255),
	@NEW_Position_Suffix AS nvarchar(25),
	@NEW_Position_Credentials AS nvarchar(25),
	@NEW_Position_Alternate_1 AS nvarchar(255),
	@NEW_Position_Alternate_2 AS nvarchar(max),
	@NEW_CMIS_Access_e39 AS nvarchar(100),
	@NEW_CMIS_Role_e40 AS nvarchar(100),
	@NEW_bUse_Credentials AS bit,
	@NEW_bReverseOrder AS bit,
	@NEW_T29_Note AS nvarchar(max)


----

-- Dropped the old stuff

------
	)
	
	AS
	
-- START DEBUGGING SECTION -------------------	
			PRINT '0) Input @iT29_PK: [' + 	 CAST(@iT29_PK AS varchar(5)) + ']'	
			--PRINT @ORIGINAL_T29_RowVersion
			--PRINT '1) Input @@ORIGINAL_T29_RowVersion: [' + 	 @ORIGINAL_T29_RowVersion + ']'
			--PRINT '2) Input @@ORIGINAL_T29_RowVersion: [' + 	 CAST(@ORIGINAL_T29_RowVersion AS varchar(25)) + ']'	
			--PRINT '======================================================================================'
			--PRINT '1) Input @NEW_iLNK03_FK: [' + CAST(@NEW_iLNK03_FK as varchar(5)) + ']' 
			--PRINT '2) Input @NEW_iT15_FK: [' + CAST(@NEW_iT15_FK as varchar(5)) + ']' 
			--PRINT '3) Input @NEW_EMR_Notes: [' + @NEW_EMR_Notes	 + ']' 
			--PRINT '4) Input @NEW_b_EMR_UserID_Password_Active: [' +  SUBSTRING('FalseTrue', @NEW_b_EMR_UserID_Password_Active * 5 + 1, 5) + ']' 			
			--PRINT '5) Input @NEW_b_Installed_On_CCWNC_Equipment: [' +  SUBSTRING('FalseTrue', @NEW_b_Installed_On_CCWNC_Equipment * 5 + 1, 5) + ']' 			
			--PRINT '6) Input @NEW_b_Remote: [' +  SUBSTRING('FalseTrue', @NEW_b_Remote * 5 + 1, 5) + ']' 
			--PRINT '7) Input @NEW_b_Onsite_Only: [' +  SUBSTRING('FalseTrue', @NEW_b_Onsite_Only * 5 + 1, 5) + ']' 	
			--PRINT '======================================================================================'
			--PRINT '1) Input @OLD_iLNK03_FK: [' + CAST(@OLD_iLNK03_FK as varchar(5)) + ']' 
			--PRINT '2) Input @OLD_iT15_FK: [' + CAST(@OLD_iT15_FK as varchar(5)) + ']' 
			--PRINT '3) Input @OLD_EMR_Notes: [' + @OLD_EMR_Notes	 + ']' 
			--PRINT '4) Input @OLD_b_EMR_UserID_Password_Active: [' +  SUBSTRING('FalseTrue', @OLD_b_EMR_UserID_Password_Active * 5 + 1, 5) + ']' 			
			--PRINT '5) Input @OLD_b_Installed_On_CCWNC_Equipment: [' +  SUBSTRING('FalseTrue', @OLD_b_Installed_On_CCWNC_Equipment * 5 + 1, 5) + ']' 			
			--PRINT '6) Input @OLD_b_Remote: [' +  SUBSTRING('FalseTrue', @OLD_b_Remote * 5 + 1, 5) + ']' 
			--PRINT '7) Input @OLD_b_Onsite_Only: [' +  SUBSTRING('FalseTrue', @OLD_b_Onsite_Only * 5 + 1, 5) + ']' 		
			
-- END DEBUGGING SECTION -------------------	


-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Declare variables used internally in the Stored Procedure, and set intial values:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	--DECLARE @CONTINUE BIT	

   
	--SELECT @CONTINUE = 0	-- 1 means continue  0 means finished i.e. failed



---- START TRANSACTION ----------------------------------------------------------			
--BEGIN TRANSACTION Transaction_ONE


-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  		--1] Check for existence of T29_PK in Table T29
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

SELECT * 
FROM [T29_Employee_Positions]
WHERE	(
			([T29_PK]=@iT29_PK)
			AND
			([T29_RowVersion]=@ORIGINAL_T29_RowVersion)
		)
		
	IF @@ROWCOUNT &lt;&gt; 1
		BEGIN
			PRINT 'Darn It! The  record does not appear to exist in T29, or it has been modified'
			RETURN 0	-- Return the zero, b/c the record did not exist or it was changed.
		END
	ELSE
		BEGIN
			PRINT 'OK! The record exists in T29, and has not been changed, so go ahead and update'
			
			UPDATE [T29_Employee_Positions]
			SET 

			  [Position_Prefix] = @NEW_Position_Prefix
			  ,[Position_Role_e37] = @NEW_Position_Role_e37
			  ,[Position_Character_Separator] = @NEW_Position_Character_Separator
			  ,[Position_Descriptor] = @NEW_Position_Descriptor
			  ,[Position_Region_e38] = @NEW_Position_Region_e38
			  ,[Position_Override] = @NEW_Position_Override
			  ,[Position_Suffix] = @NEW_Position_Suffix
			  ,[Position_Credentials] = @NEW_Position_Credentials
			  ,[Position_Alternate_1] = @NEW_Position_Alternate_1
			  ,[Position_Alternate_2] = @NEW_Position_Alternate_2
			  ,[CMIS_Access_e39] = @NEW_CMIS_Access_e39
			  ,[CMIS_Role_e40] = @NEW_CMIS_Role_e40
			  ,[bUse_Credentials] = @NEW_bUse_Credentials
			  ,[bReverseOrder] = @NEW_bReverseOrder
			  ,[T29_Note] = @NEW_T29_Note
				
			WHERE	(
						([T29_PK]=@iT29_PK)
						AND
						([T29_RowVersion]=@ORIGINAL_T29_RowVersion)
					)	
		END
			
		IF @@ROWCOUNT = 1 AND (@@ERROR = 0)
			BEGIN

				PRINT 'The record was updated where PK for the updated record is: ' + CAST(@iT29_PK as varchar(5))
				RETURN 1	-- Return one, b/c the record did was updated
			END		
		ELSE	
			BEGIN
				PRINT 'Woops! There was an error while trying to update the  Record. '	
				RETURN 2

			END	

//////////////////////////////////////TEST

-- prj_8011_SP_057_UPDATE_EmployeePosition_given_T29PK_TEST.sql

USE DB2_CRM
go

DECLARE @return_status int

--DECLARE @bigint_RowVersion  BIGINT
--SET @bigint_RowVersion =CONVERT(bigint,'0x0000000000060377')

DECLARE @TheRowVersion  rowversion
SET @TheRowVersion = 0x0000000000060373


EXEC  @return_status =  prj_8011_SP_057_UPDATE_EmployeePosition_given_T29PK
						@iT29_PK=1 ,
						@ORIGINAL_T29_RowVersion = @TheRowVersion,
					------	
						@NEW_Position_Prefix = 'test',
						@NEW_Position_Role_e37 = 99,
						@NEW_Position_Character_Separator = 'test',
						@NEW_Position_Descriptor = 'test',
						@NEW_Position_Region_e38 = 99,
						@NEW_Position_Override = 'test',
						@NEW_Position_Suffix = 'test',
						@NEW_Position_Credentials = 'test',
						@NEW_Position_Alternate_1 = 'test',
						@NEW_Position_Alternate_2 = 'test',
						@NEW_CMIS_Access_e39 = 99,
						@NEW_CMIS_Role_e40 = 99,
						@NEW_bUse_Credentials = 1,
						@NEW_bReverseOrder = 1,
						@NEW_T29_Note = 'test'
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>STANDARD_Update</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>STANDARD_Update</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- prj_8015_SP_922_UPDATE_EMR_Access_Record_Given_T04PK.sql
-----------------------------------------

/* This SP will:

  		1] Check for existence of T04_PK in Table T04		
  		IF the record is found the SP will
  		2] Update the record in T04
  			
  			
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 10/22/2012
	By: glenn garson
	************************************************************************************

*/

SET NOCOUNT ON
Use DB2_CRM
go



create PROCEDURE prj_8015_SP_922_UPDATE_EMR_Access_Record_Given_T04PK(
	@iT04_PK AS  INT,
------	

	@NEW_iLNK03_FK AS  int,
	@NEW_iT15_FK AS  int,
	@NEW_EMR_Notes AS  nvarchar(max),
	@NEW_b_EMR_UserID_Password_Active AS  bit,
	@NEW_b_Installed_On_CCWNC_Equipment AS  bit,
	@NEW_b_Remote AS  bit,
	@NEW_b_Onsite_Only AS  bit,

----

	@OLD_iLNK03_FK AS  int,
	@OLD_iT15_FK AS  int,
	@OLD_EMR_Notes AS  nvarchar(max),
	@OLD_b_EMR_UserID_Password_Active AS  bit,
	@OLD_b_Installed_On_CCWNC_Equipment AS  bit,
	@OLD_b_Remote AS  bit,
	@OLD_b_Onsite_Only AS  bit

------
	)
	
	AS
	
-- START DEBUGGING SECTION -------------------	
			PRINT '0) Input @iT04_PK: [' + 	 CAST(@iT04_PK AS varchar(5)) + ']'	
			PRINT '======================================================================================'
			PRINT '1) Input @NEW_iLNK03_FK: [' + CAST(@NEW_iLNK03_FK as varchar(5)) + ']' 
			PRINT '2) Input @NEW_iT15_FK: [' + CAST(@NEW_iT15_FK as varchar(5)) + ']' 
			PRINT '3) Input @NEW_EMR_Notes: [' + @NEW_EMR_Notes	 + ']' 
			PRINT '4) Input @NEW_b_EMR_UserID_Password_Active: [' +  SUBSTRING('FalseTrue', @NEW_b_EMR_UserID_Password_Active * 5 + 1, 5) + ']' 			
			PRINT '5) Input @NEW_b_Installed_On_CCWNC_Equipment: [' +  SUBSTRING('FalseTrue', @NEW_b_Installed_On_CCWNC_Equipment * 5 + 1, 5) + ']' 			
			PRINT '6) Input @NEW_b_Remote: [' +  SUBSTRING('FalseTrue', @NEW_b_Remote * 5 + 1, 5) + ']' 
			PRINT '7) Input @NEW_b_Onsite_Only: [' +  SUBSTRING('FalseTrue', @NEW_b_Onsite_Only * 5 + 1, 5) + ']' 	
			PRINT '======================================================================================'
			PRINT '1) Input @OLD_iLNK03_FK: [' + CAST(@OLD_iLNK03_FK as varchar(5)) + ']' 
			PRINT '2) Input @OLD_iT15_FK: [' + CAST(@OLD_iT15_FK as varchar(5)) + ']' 
			PRINT '3) Input @OLD_EMR_Notes: [' + @OLD_EMR_Notes	 + ']' 
			PRINT '4) Input @OLD_b_EMR_UserID_Password_Active: [' +  SUBSTRING('FalseTrue', @OLD_b_EMR_UserID_Password_Active * 5 + 1, 5) + ']' 			
			PRINT '5) Input @OLD_b_Installed_On_CCWNC_Equipment: [' +  SUBSTRING('FalseTrue', @OLD_b_Installed_On_CCWNC_Equipment * 5 + 1, 5) + ']' 			
			PRINT '6) Input @OLD_b_Remote: [' +  SUBSTRING('FalseTrue', @OLD_b_Remote * 5 + 1, 5) + ']' 
			PRINT '7) Input @OLD_b_Onsite_Only: [' +  SUBSTRING('FalseTrue', @OLD_b_Onsite_Only * 5 + 1, 5) + ']' 		
			
-- END DEBUGGING SECTION -------------------	


-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Declare variables used internally in the Stored Procedure, and set intial values:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	DECLARE @CONTINUE BIT	

   
	SELECT @CONTINUE = 0	-- 1 means continue  0 means finished i.e. failed


-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  		--1] Check for existence of T04_PK in Table T8
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

SELECT * 
FROM [T04_EMR_Access_Inventory]
WHERE	(
			([T04_PK]=@iT04_PK)
		)
		
		IF @@ROWCOUNT &lt;&gt; 1
			BEGIN
				SELECT @CONTINUE = 0
				PRINT 'Darn It! The EMR_Access record does not appear to exist in T04'
				RETURN 0	-- Done, just return the zero.
			END
		ELSE
			BEGIN
				SELECT @CONTINUE = 1
				PRINT 'OK! The EMR_Access record already exists in T04'
			END
			


			


		-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  				--4] Updates the non-employee info in T04
		-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
		UPDATE [T04_EMR_Access_Inventory]
		SET 

			 [LNK03_FK]=@NEW_iLNK03_FK
			,[T15_FK]=@NEW_iT15_FK
			,[EMR_Notes]=@NEW_EMR_Notes
			,[b_EMR_UserID_Password_Active]=@NEW_b_EMR_UserID_Password_Active
			,[b_Installed_On_CCWNC_Equipment]=@NEW_b_Installed_On_CCWNC_Equipment
			,[b_Remote]=@NEW_b_Remote
			,[b_Onsite_Only]=@NEW_b_Onsite_Only
			
		WHERE
			--REQUIRED
			[T15_FK] = @OLD_iT15_FK
			AND
			--REQUIRED
			T04_PK = @iT04_PK

		

			
			IF @@ROWCOUNT = 1
				BEGIN
					SELECT @CONTINUE = 1
					PRINT 'The record was updated where PK for the updated EMR_Access record is: ' + CAST(@iT04_PK as varchar(5))
				END		
			ELSE	
				BEGIN
					PRINT 'Woops! There was an error while trying to update the EMR_Access Record. '	
					SELECT @CONTINUE = 0

				END	


-- END TRANSACTION ----------------------------------------------------------	

IF @CONTINUE = 1
	BEGIN
		RETURN 1
	END
ELSE
	BEGIN
		RETURN 0	--Failed, or the appropriate records were not found
END				</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedure_as_Input__TempTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedure_as_Input__TempTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>How to Share Data between Stored Procedures
http://www.sommarskog.se/share_data.html  has an exhaustive overview of the problem

/*
Sharing a Temp Table
======================
Introduction
The method itself is as simple as this:	*/

CREATE PROCEDURE called_procedure @par1 int,
                                  @par2 bit,
                                  ... AS
   ...
   INSERT/UPDATE/DELETE #tmp
go
CREATE PROCEDURE caller AS
   DECLARE ...
   CREATE TABLE #mytemp (col1 int     NOT NULL,
                         col2 char(5) NULL,
                        ...)
   ...
   EXEC called_procedure @par1, @par2 ...
   SELECT * FROM #mytemp
go

/*
In this example, caller creates the temp table, and called_procedure fills it in, that is, the table is output-only. 
A different scenario is that caller fills the table with input data whereupon called_procedure performs some general computation, 
	and the caller uses the result from that computation for some purpose. 
That is, the table is used for both input and output. 
Yet a scenario is that the caller prepares the temp table with data,
	 and the callee first performs checks to verify that a number of business rules are not violated, 
	 and then goes on to update one or more tables. This would be an input-only scenario.

Changing Existing Code
Say that you have this procedure:
*/
CREATE PROCEDURE SalesByStore @storeid varchar(30) AS
   SELECT t.title, s.qty
   FROM   sales s
   JOIN   titles t ON t.title_id = s.title_id
   WHERE  s.stor_id = @storeid

--You want to reuse this result set in a second procedure that returns only titles that have sold above a certain quantity. 
--How would you achieve this by sharing a temp table without affect existing clients? 
--The solution is to move the meat of the procedure into a sub-procedure, and make the original procedure a wrapper on the original like this:

CREATE PROCEDURE SalesByStore_core @storeid varchar(30) AS
   INSERT #SalesByStore (title, qty)
      SELECT t.title, s.qty
      FROM   sales s
      JOIN   titles t ON t.title_id = s.title_id
      WHERE  s.stor_id = @storeid
go
CREATE PROCEDURE SalesByStore @storeid varchar(30) AS
   CREATE TABLE #SalesByStore(title varchar(80) NOT NULL PRIMARY KEY,
                              qty   smallint    NOT NULL)
   EXEC SalesByStore_core @storeid
   SELECT * FROM #SalesByStore
go
CREATE PROCEDURE BigSalesByStore @storeid varchar(30),
                                 @qty     smallint AS
   CREATE TABLE #SalesByStore(title varchar(80) NOT NULL PRIMARY KEY,
                              qty   smallint    NOT NULL)
   EXEC SalesByStore_core @storeid
   SELECT * FROM #SalesByStore WHERE qty &gt;= @qty
go
EXEC SalesByStore '7131'
EXEC BigSalesByStore '7131', 25
go
DROP PROCEDURE SalesByStore, BigSalesByStore, SalesByStore_core
/*
Just like in the example with the multi-statement function, I have defined a primary key for the temp table, 
	and exactly for the same reasons. 
Speaking of best practices, some readers may wonder about the use of SELECT * here. 
I think using SELECT * from a temp table created in the same procedure is OK,
	particularly if the purpose is to return all columns in the temp table. 
(In difference to using SELECT * from a table created elsewhere, 
	and which may be altered without your knowledge.)

While this solution is straightforward, 
	you may feel uneasy by the fact that the CREATE TABLE statement for the temp table appears in two places, 
	and there is a third procedure that depends on the definition. 
Here is a solution which is a little more convoluted that to some extent alleviates the situation:
*/
CREATE PROCEDURE SalesByStore_core @storeid       varchar(30),
                                   @wantresultset bit = 0 AS
   IF object_id('tempdb..#SalesByStore') IS  NULL 
   BEGIN
      CREATE TABLE #SalesByStore(title varchar(80) NOT NULL PRIMARY KEY,
                                 qty   smallint    NOT NULL)
   END

   INSERT #SalesByStore (title, qty)
      SELECT t.title, s.qty
      FROM   sales s
      JOIN   titles t ON t.title_id = s.title_id
      WHERE  s.stor_id = @storeid
      
   IF @wantresultset = 1
      SELECT * FROM #SalesByStore
go
CREATE PROCEDURE SalesByStore @storeid varchar(30) AS
   EXEC SalesByStore_core @storeid, 1
go

/*
I've moved the CREATE TABLE statement for the wrapper into the core procedure, 
	which only creates the temp table only if it does not already exist. 
The wrapper now consists of a single EXEC statement and passes the parameter @wantresultset as 1 
	to instruct the core procedure to produce the result set.
Since this parameter has a default of 0, BigSalesByStore can be left unaffected.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>STRINGS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>REPLACE_characters_in_a_variable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>STRINGS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>REPLACE_characters_in_a_variable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

/*
One useful trick in SQL is the ability use @var = function(...) to assign a value. 
If you have multiple records in your record set, your var is assigned multiple times with side-effects:
*/

declare @badStrings table (item varchar(50))

INSERT INTO @badStrings(item)
SELECT '&gt;' UNION ALL
SELECT '&lt;' UNION ALL
SELECT '(' UNION ALL
SELECT ')' UNION ALL
SELECT '!' UNION ALL
SELECT '?' UNION ALL
SELECT '@'

declare @testString varchar(100), @newString varchar(100)

set @teststring = 'Juliet ro&gt;&lt;0zs my s0x()rz!!?!one!@!@!@!'
set @newString = @testString

SELECT @newString = Replace(@newString, item, '') FROM @badStrings

select @newString -- returns 'Juliet ro0zs my s0xrzone'


--You can make the function more dynamic by passing in a comma-separated list of strings to replace, using a split function 
(sqlteam.com/forums/topic.asp?TOPIC_ID=50648)
--to convert the list into a table, then returning the replaced string.

\\\\\\\\\\\\\\\\\\\\\\CTE version:-- Uses a recursive CTE, and then recursive REPLACE of @teststring

DECLARE @badStrings VARCHAR(100)
DECLARE @teststring VARCHAR(100)

SET @badStrings = '&gt;&lt;()!?@'
SET @teststring = 'Juliet ro&gt;&lt;0zs my s0x()rz!!?!one!@!@!@!'

;WITH CTE AS
(
  SELECT SUBSTRING(@badStrings, 1, 1) AS [String], 1 AS [Start], 1 AS [Counter]
  UNION ALL
  SELECT SUBSTRING(@badStrings, [Start] + 1, 1) AS [String], [Start] + 1, [Counter] + 1 
  FROM CTE 
  WHERE [Counter] &lt; LEN(@badStrings)
)

SELECT @teststring = REPLACE(@teststring, CTE.[String], '') FROM CTE

SELECT @teststring
Juliet ro0zs my s0xrzone
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>STRINGS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StringFunctions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>STRINGS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StringFunctions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://msdn.microsoft.com/en-us/library/ms181984%28v=sql.105%29.aspx


ASCII
	

NCHAR
	

SOUNDEX

CHAR
	

PATINDEX : Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.
	=&gt; PATINDEX ( '%pattern%' , expression )
	========================================================================
	USE AdventureWorks2008R2;
	GO
	SELECT PATINDEX('%ensure%',DocumentSummary)
	FROM Production.Document
	WHERE DocumentNode = 0x7B40;
	GO
	=====wildcard==================================================================
	USE AdventureWorks2008R2;
	GO
	SELECT PATINDEX('%en_ure%', DocumentSummary)
	FROM Production.Document
	WHERE DocumentNode = 0x7B40;
	GO	
	======collate ==================================================================
	USE tempdb;
	GO
	SELECT PATINDEX ( '%ein%', 'Das ist ein Test'  COLLATE Latin1_General_BIN) ;
	GO
	==========variables to specify a pattern======================================
	USE AdventureWorks2008R2; 
	GO
	DECLARE @MyValue varchar(10) = 'safety'; 
	
	SELECT PATINDEX('%' + @MyValue + '%', DocumentSummary) 
	FROM Production.Document
	WHERE DocumentNode = 0x7B40;
	========================================================================

SPACE

CHARINDEX : Searches expression2 for expression1 and returns its starting position if found. The search starts at start_location. Zero (0) if not found
	=&gt; CHARINDEX ( expression1 ,expression2 [ , start_location ] ) 
	============================================================
	DECLARE @document varchar(64)

	SELECT @document = 'Reflectors are vital safety' +
	                   ' components of your bicycle.'
	SELECT CHARINDEX('bicycle', @document)
	GO
	=============================================================
	The following example uses the optional start_location parameter to start looking for vital in the fifth character of the DocumentSummary column.
	DECLARE @document varchar(64)
	
	SELECT @document = 'Reflectors are vital safety' +
	                   ' components of your bicycle.'
	SELECT CHARINDEX('vital', @document, 5)
	GO
	=============================================================
	--The following example performs a case insensitive search for the string 'TEST' in 'Das jst ein Test'.
	USE tempdb;
	GO
	SELECT CHARINDEX ( 'Test',
	       'Das ist ein Test'
	       COLLATE Latin1_General_CI_AS)
	GO
	
	============================================================
	--The following example performs a case sensitive search for the string 'Test' in 'Das jst ein Test'.

	USE tempdb;
	GO
	SELECT CHARINDEX ( 'Test',
	       'Das ist ein Test'
	       COLLATE Latin1_General_CS_AS)
	
	=================================================================
QUOTENAME
	

STR : Returns character data converted from numeric data.
	=&gt; STR ( float_expression [ , length [ , decimal ] ] )

DIFFERENCE
	

REPLACE : Replaces all occurrences of a specified string value with another string value
		Returns nvarchar if one of the input arguments is of the nvarchar data type; otherwise, REPLACE returns varchar.
		Returns NULL if any one of the arguments is NULL
		REPLACE ( string_expression , string_pattern , string_replacement )
======================================================================================================================

		--The following example replaces the string cde in abcdefghi with xxx.
		SELECT REPLACE('abcdefghicde','cde','xxx');
		GO
		--Here is the result set.
		------------
		abxxxfghixxx
		
		--The following example uses the COLLATE function.
		SELECT REPLACE('This is a Test'  COLLATE Latin1_General_BIN,
		'Test', 'desk' );
		GO
		--Here is the result set.
		------------
		This is a desk

		--Clean up URL
		REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(255),el2.Parameters),'%20','_'), '%2F', '/'),'%3A', ':'),'&amp;', ' and ') as Parm
======================================================================================================================	

STUFF

LEFT	: Returns the left part of a character string with the specified number of characters.
		LEFT ( character_expression , integer_expression )
		character_expression = character_expression can be of any data type, except text or ntext, 
								that can be implicitly converted to varchar or nvarchar. Otherwise, 
								use the CAST function to explicitly convert character_expression.
		integer_expression = Is a positive integer that specifies how many characters of the character_expression will be returned.
========================================================================================		
		SELECT LEFT(Name, 5) 
		FROM Production.Product
		ORDER BY ProductID;
		GO
========================================================================================
REPLICATE
	

SUBSTRING : Returns part of a character, binary, text, or image expression. 
	    =&gt;		SUBSTRING ( value_expression , start_expression , length_expression )
========================================================================================
--Here is how to display the second, third, and fourth characters of the string constant abcdef.
SELECT x = SUBSTRING('abcdef', 2, 3);

ERROR: --&gt; Invalid length parameter passed to the LEFT or SUBSTRING function
			http://www.sql-server-helper.com/error-messages/msg-537.aspx
			
			DECLARE @FullName    VARCHAR(50)
			DECLARE @Length      INT
			
			SET @FullName = 'Pluto'
			SET @Length = CHARINDEX(' ', @FullName)
			
			SELECT SUBSTRING(@FullName, 1, 
			                 CASE WHEN @Length - 1 &lt; 0 					--&lt;=======  CASE statement when zero
			                      THEN LEN(@FullName) 
			                      ELSE @Length - 1 END) AS [FirstName]			

========================================================================================
LEN
	

REVERSE
	

UNICODE

LOWER
	

RIGHT
	--Returns the right part of a character string with the specified number of characters.
	RIGHT ( character_expression , integer_expression ) 

UPPER

LTRIM
	

RTRIM
	

 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>STRINGS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>STUFF</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>STRINGS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>STUFF</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/21623593/what-is-the-meaning-of-select-for-xml-path-1-1


-- How does this example work
declare @t table
(
    Id int,
    Name varchar(10)
)
insert into @t
select 1,'a' union all
select 1,'b' union all
select 2,'c' union all
select 2,'d' 

--select * from @t

select ID,
stuff(
(
    select ','+ [Name] from @t where Id = t.Id for XML path('')
),1,1,'') 
from (select  ID from @t )t
--from (select distinct ID from @t )t

--OUTPUT from @t
Id	Name
1	a
1	b
2	c
2	d


--Final Output: without DISTINCT:
ID	(No column name)
1	a,b
1	a,b
2	c,d
2	c,d

--Final Output: DISTINCT
1	a,b
2	c,d


--The ('') in for xml path is used to remove wrapper node, that is being automatically created. 
--Otherwise it would look like:
 &lt;row&gt;,a,b,c,d&lt;/row&gt;.

SELECT ',' + ColumnName ... FOR XML PATH('')
--generates a set of comma separated values, based on combining multiple rows of data from the ColumnName column. 
--It will produce a value like ,abc,def,ghi,jkl.

STUFF(...,1,1,'')
--Is then used to remove the leading comma that the previous trick generated, see STUFF for details about its parameters.

--(Strangely, a lot of people tend to refer to this method of generating a comma separated set of values as "the STUFF method" 
--despite the STUFF only being responsible for a final bit of trimming)



--=======================================================================Question
https://stackoverflow.com/questions/31211506/how-stuff-and-for-xml-path-work-in-sql-server
-- I just need the explanation how it works or is there any other or short way to do this.
Table is:

+----+------+
| Id | Name |
+----+------+    
| 1  | aaa  |
| 1  | bbb  |
| 1  | ccc  |
| 1  | ddd  |
| 1  | eee  |
+----+------+
Required output:

+----+---------------------+
| Id |        abc          |
+----+---------------------+ 
|  1 | aaa,bbb,ccc,ddd,eee |
+----+---------------------+
Query:

SELECT ID, 
    abc = STUFF(
                 (SELECT ',' + name FROM temp1 FOR XML PATH ('')), 1, 1, ''
               ) 
FROM temp1 GROUP BY id

--=======================================================================answer 1

1. Get XML element string with FOR XML
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--Adding FOR XML PATH to the end of a query allows you to output the results of the query as XML elements, 
--with the element name contained in the PATH argument. For example, if we were to run the following statement:

SELECT ',' + name 
              FROM temp1
              FOR XML PATH ('')
By passing in a blank string (FOR XML PATH('')), we get the following instead:

,aaa,bbb,ccc,ddd,eee

2. Remove leading comma with STUFF
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--The STUFF statement literally "stuffs” one string into another, replacing characters within the first string. 
--We, however, are using it simply to remove the first character of the resultant list of values.

SELECT abc = STUFF((
            SELECT ',' + NAME
            FROM temp1
            FOR XML PATH('')
            ), 1, 1, '')
FROM temp1

The parameters of STUFF are:
..............................
-The string to be “stuffed” (in our case the full list of name with a leading comma)
-The location to start deleting and inserting characters (1, we’re stuffing into a blank string)
-The number of characters to delete (1, being the leading comma)

So we end up with:

aaa,bbb,ccc,ddd,eee

3. Join on id to get full list
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Next we just join this on the list of id in the temp table, to get a list of IDs with name:

SELECT ID,  abc = STUFF(
             (SELECT ',' + name 
              FROM temp1 t1
              WHERE t1.id = t2.id
              FOR XML PATH (''))
             , 1, 1, '') from temp1 t2
group by id;

--And we have our result:

-----------------------------------
| Id        | Name                |
|---------------------------------|
| 1         | aaa,bbb,ccc,ddd,eee |
-----------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table_Valued_Parameters</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_Table_Valued_Parameters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table_Valued_Parameters</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_Table_Valued_Parameters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Table_Valued_Parameters


--Table-Valued Parameters provides option for the Client Applications to pass multiple rows of Data to Stored Procedure.
--Prior to this, if we were needed to pass multiple rows of Data from client application to Sql Server, 
--	then we use to model the input data as xml and pass it to the stored procedure 
--	and in Stored Procedure convert this xml to a table variable/temporary table.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table_Valued_Parameters</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Call_SP_with_TableValuedParm_from_SQL_and_from_C#</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table_Valued_Parameters</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Call_SP_with_TableValuedParm_from_SQL_and_from_C#</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Call_SP_with_TableValuedParm_From_C#

/*
1] Table-Valued User Defined Data Type
=======================================
First we need to Create a User Defined Table Type which can be reused in multiple stored procedures as input table parameter data type.
*/

CREATE TYPE dbo.CustomerTableType AS TABLE
( 
 [CustomerID] INT,
 [Name]  VARCHAR(50)
)
GO

/*
1a] EXECUTE Permission ON Table Type User Defined Type:
===================================================
Eventhough we have Execute permission on the Stored Procedure, 
	we still need to give Execute permission on the Table Type User Defined Type. 
	Below is the syntax for granting execute persmission on the Table Type User Defined Type
*/

GRANT EXECUTE ON TYPE::dbo.CustomerTableType TO UserName


/*
2] Stored Procedure with Table-Valued input Parameter
=====================================================
Now let us create a simple stored procedure which takes CustomerType User Definde Table Type which we have created previously
*/
CREATE PROCEDURE dbo.GetCustomerDetails
(
 @Customers AS dbo.CustomerTableType READONLY
)
AS
BEGIN
 SET NOCOUNT ON

 SELECT *
 FROM @Customers
END

/*
3] Using Stored Procedure With Table Valued Parameter in Sql Server
===================================================================
*/

Declare @CustomerDetails As dbo.CustomerTableType
Insert Into @CustomerDetails 
Values
		 (1,'Basavaraj'),
         (2,'Monty'),
         (3,'Shashank') 

Exec dbo.GetCustomerDetails @CustomerDetails
GO
/*
Result:
CustomerID   Name
----------- ------------
1           Basavaraj
2           Monty
3           Shashank

/*
4] Calling Stored Procedure with Table Valued Parameter from C# Code
=====================================================================
Below is a sample C# Code example 
	which calls the GetCustomerDetails Stored Procedure 
	with Table-Valued Parameter which is created in the previous section.

*/

using System;
using System.Data;
using System.Data.SqlClient;
namespace TableValuedParameter
{
    class Program
    {
        static void Main(string[] args)
        {
            //Create and open a connection object
            SqlConnection conn = new SqlConnection(
               "ENTER A VALID CONNECTION STRING");
            conn.Open();

            //Create a command object specify the stored procedure
            SqlCommand cmd = new SqlCommand("dbo.GetCustomerDetails", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            //PrePare the rows of Data to be Passed to the Stored Procedure            
            DataTable dataTable = new DataTable("Customer");
            dataTable.Columns.Add("Id", typeof(Int32));
            dataTable.Columns.Add("Name", typeof(string));
            dataTable.Rows.Add(1, "Basavaraj");
            dataTable.Rows.Add(2, "Monty");
            dataTable.Rows.Add(3, "Shashank");
            //Add the Table-Valued Parameter value to the Command Object            
            SqlParameter param = new SqlParameter("@Customers", dataTable);
            param.SqlDbType = SqlDbType.Structured;           
            cmd.Parameters.Add(param);
            // Execute the command
            SqlDataReader rdr = cmd.ExecuteReader();
            // iterate through results, printing each record to the console
            while (rdr.Read())
            {
                Console.WriteLine("Employee ID: {0} Name: {1}"
                                            ,rdr["CustomerID"],rdr["Name"]);
            }
            conn.Close();
            rdr.Close();
            Console.ReadKey();
        }
    }
}

Result Seen on the console: 
Employee ID: 1 Name: Basavaraj
Employee ID: 2 Name: Monty
Employee ID: 3 Name: Shashank
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Add_Contraints_ForABunchOfTables</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Add_Contraints_ForABunchOfTables</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- 1] Add Constraints
-- 2] Delete Constraints

///////////////////////////

-- prj_8015_Add_Constraints_v0.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 9/18/2012
	By: glenn garson
	************************************************************************************
*/

USE [DB2_CRM]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Foreign Keys:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

-- START T15 -------------------

ALTER TABLE [dbo].[T15_CCWNC_Employee_SecurityPortal] 
ADD CONSTRAINT T15_FK_T9 FOREIGN KEY (T9_FK) 
    REFERENCES [dbo].[T9_CCWNC_Employees] (T9_PK) 
ON DELETE CASCADE
GO
    
    
-- START T02 ------------------- 

ALTER TABLE [dbo].[T02_PC_Laptop_Inventory] 
ADD CONSTRAINT T02_FK_T15 FOREIGN KEY (T15_FK) 
    REFERENCES [dbo].[T15_CCWNC_Employee_SecurityPortal] (T15_PK)        
    
-- START T13 ------------------- 

ALTER TABLE [dbo].[T13_Phone_AirCards] 
ADD CONSTRAINT T13_FK_T15 FOREIGN KEY (T15_FK) 
    REFERENCES [dbo].[T15_CCWNC_Employee_SecurityPortal] (T15_PK)    
    
ALTER TABLE [dbo].[T13_Phone_AirCards] ADD CONSTRAINT T13_UniqueMobilePhoneNumber UNIQUE CLUSTERED
    (MobilePhoneNumber) ON [PRIMARY]       
    
-- START T16 -------------------

ALTER TABLE [dbo].[T16_Software_Usage] 
ADD CONSTRAINT T16_FK_L002 FOREIGN KEY (L002_FK) 
    REFERENCES [dbo].[L002_Software_LIST] (L002_PK)      
      
ALTER TABLE [dbo].[T16_Software_Usage] 
ADD CONSTRAINT T16_FK_T02 FOREIGN KEY (T02_FK) 
    REFERENCES [dbo].[T02_PC_Laptop_Inventory] (T02_PK)  
    
-- START T03 -------------------

ALTER TABLE [dbo].[T03_Licensed_Software_Inventory] 
ADD CONSTRAINT T03_FK_L002 FOREIGN KEY (L002_FK) 
    REFERENCES [dbo].[L002_Software_LIST] (L002_PK)      
      
ALTER TABLE [dbo].[T03_Licensed_Software_Inventory] 
ADD CONSTRAINT T03_FK_T02 FOREIGN KEY (T02_FK) 
    REFERENCES [dbo].[T02_PC_Laptop_Inventory] (T02_PK)  
    
    

--[L002_Software_LIST] -----------------------------------------------------------------------------------

ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [SoftWareManufacturer_e19]
GO

ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [SoftwareType_e20]
GO

ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [b_OwnedOrInstalledByOtherInstitution]
GO

ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [b_Requires_CCWNC_LicensePurchase]
GO

ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [b_UseThroughBrowser]
GO       

ALTER TABLE [dbo].[L002_Software_LIST] ADD CONSTRAINT L002_Unique_SoftwareTitle UNIQUE CLUSTERED
	(SoftwareTitle) ON [PRIMARY]

-- [LNK03_T1_Practice_L002_EMR]  ----------------------------------------------------------------------------     


ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR]  WITH CHECK ADD  CONSTRAINT [LNK03_FK_L002] FOREIGN KEY([L002_FK])
REFERENCES [dbo].[L002_Software_LIST] ([L002_PK])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR] CHECK CONSTRAINT [LNK03_FK_L002]
GO

ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR]  WITH CHECK ADD  CONSTRAINT [LNK03_FK_T1] FOREIGN KEY([T1_FK])
REFERENCES [dbo].[T1_Practice] ([T1_PK])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR] CHECK CONSTRAINT [LNK03_FK_T1]
GO 

ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR] ADD CONSTRAINT
LNK03_UNIQUE_T1FK_L002FK UNIQUE CLUSTERED
(
T1_FK,
L002_FK
) ON [PRIMARY]
go
---[T04_EMR_Access_Inventory]  -------------------------------------------------------------------------------

ALTER TABLE [dbo].[T04_EMR_Access_Inventory]  WITH CHECK ADD  CONSTRAINT [T04_FK_LNK03] FOREIGN KEY([LNK03_FK])
REFERENCES [dbo].[LNK03_T1_Practice_L002_EMR] ([LNK03_PK])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[T04_EMR_Access_Inventory] CHECK CONSTRAINT [T04_FK_LNK03]
GO

ALTER TABLE [dbo].[T04_EMR_Access_Inventory]  WITH CHECK ADD  CONSTRAINT [T04_FK_T15] FOREIGN KEY([T15_FK])
REFERENCES [dbo].[T15_CCWNC_Employee_SecurityPortal] ([T15_PK])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[T04_EMR_Access_Inventory] CHECK CONSTRAINT [T04_FK_T15]
GO

ALTER TABLE [DB2_CRM].[dbo].[T04_EMR_Access_Inventory] ADD CONSTRAINT
UNIQUE_LNK03FK_T15FK UNIQUE CLUSTERED
(
LNK03_FK,
T15_FK
) ON [PRIMARY]

go


ALTER TABLE [dbo].[T04_EMR_Access_Inventory] ADD  DEFAULT ((1)) FOR [b_EMR_UserID_Password_Active]
GO

ALTER TABLE [dbo].[T04_EMR_Access_Inventory] ADD  DEFAULT ((1)) FOR [b_Installed_On_CCWNC_Equipment]
GO

---

-- START T21_EmployeeTrainings -------------------

ALTER TABLE [dbo].[T21_EmployeeTrainings] 
ADD CONSTRAINT T21_FK_T15 FOREIGN KEY (T15_FK) 
    REFERENCES [dbo].[T15_CCWNC_Employee_SecurityPortal] (T15_PK) 
    ON DELETE CASCADE
GO

ALTER TABLE [dbo].[T21_EmployeeTrainings] CHECK CONSTRAINT [T21_FK_T15]
GO


ALTER TABLE [dbo].[T21_EmployeeTrainings] 
ADD CONSTRAINT T21_FK_T20 FOREIGN KEY (T20_FK) 
    REFERENCES [dbo].[T20_Trainings] (T20_PK) 
    ON DELETE CASCADE
GO

ALTER TABLE [dbo].[T21_EmployeeTrainings] CHECK CONSTRAINT [T21_FK_T20]
GO

///////////////////////////</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DELETE_ContraintsForABunchOfTables</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DELETE_ContraintsForABunchOfTables</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- prj_8015_Delete_Constraints_v0.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 9/18/2012
	By: glenn garson
	************************************************************************************
*/

USE [DB2_CRM]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- 0] Foreign Keys:
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

-- START T15 -------------------

ALTER TABLE [dbo].[T15_CCWNC_Employee_SecurityPortal] DROP CONSTRAINT T15_FK_T9 
    

-- START T02 ------------------- 

ALTER TABLE [dbo].[T02_PC_Laptop_Inventory] DROP CONSTRAINT T02_FK_T15 
   
    
-- START T13 ------------------- 

ALTER TABLE [dbo].[T13_Phone_AirCards] DROP CONSTRAINT T13_FK_T15 
   
ALTER TABLE [dbo].[T13_Phone_AirCards] DROP CONSTRAINT T13_UniqueMobilePhoneNumber 
-- START T16 -------------------

ALTER TABLE [dbo].[T16_Software_Usage] DROP CONSTRAINT T16_FK_L002 

      
ALTER TABLE [dbo].[T16_Software_Usage] DROP CONSTRAINT T16_FK_T02 

    
-- START T03 -------------------

ALTER TABLE [dbo].[T03_Licensed_Software_Inventory] DROP CONSTRAINT T03_FK_L002 

      
ALTER TABLE [dbo].[T03_Licensed_Software_Inventory] DROP CONSTRAINT T03_FK_T02

-- START LNK03 -------------------    

ALTER TABLE [dbo].[LNK03_T1_Practice_EMR_L002] DROP CONSTRAINT LNK03_FK_T1   

ALTER TABLE [dbo].[LNK03_T1_Practice_EMR_L002] DROP CONSTRAINT LNK03_FK_L002    
  
GO	

--[L002_Software_LIST] -----------------------------------------------------------------------------------

--ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [SoftWareManufacturer_e19]
--GO

--ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [SoftwareType_e20]
--GO

--ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [b_OwnedOrInstalledByOtherInstitution]
--GO

--ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [b_Requires_CCWNC_LicensePurchase]
--GO

--ALTER TABLE [dbo].[L002_Software_LIST] ADD  DEFAULT ((0)) FOR [b_UseThroughBrowser]
--GO  

--ALTER TABLE [dbo].[L002_Software_LIST] ADD CONSTRAINT L002_Unique_SoftwareTitle UNIQUE CLUSTERED
--	(SoftwareTitle) ON [PRIMARY]
	
--go
     
-- [LNK03_T1_Practice_L002_EMR]  ----------------------------------------------------------------------------     


ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR]  DROP  CONSTRAINT [LNK03_FK_L002] 

GO

ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR]  DROP CONSTRAINT [LNK03_FK_T1] 
GO

ALTER TABLE [dbo].[LNK03_T1_Practice_L002_EMR] DROP CONSTRAINT [LNK03_UNIQUE_T1FK_L002FK] 

---[T04_EMR_Access_Inventory]  -------------------------------------------------------------------------------

ALTER TABLE [dbo].[T04_EMR_Access_Inventory]  DROP  CONSTRAINT [T04_FK_LNK03] 


ALTER TABLE [dbo].[T04_EMR_Access_Inventory]  DROP  CONSTRAINT [UNIQUE_LNK03FK_T15FK] 
GO



ALTER TABLE [dbo].[T12_NotEmployees] DROP CONSTRAINT "UNIQUE_NAME_T12" 
go

--ALTER TABLE [dbo].[T04_EMR_Access_Inventory] ADD  DEFAULT ((1)) FOR [b_EMR_UserID_Password_Active]
--GO

--ALTER TABLE [dbo].[T04_EMR_Access_Inventory] ADD  DEFAULT ((1)) FOR [b_Installed_On_CCWNC_Equipment]
--GO

---[T21_EmployeeTrainings]  -------------------------------------------------------------------------------

ALTER TABLE [dbo].[T21_EmployeeTrainings]  DROP  CONSTRAINT [T21_FK_T15]            </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>DROP_Constraints_FK_PK_Unique</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>DROP_Constraints_FK_PK_Unique</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--WELL that stuff DID NOT work, so I found the sys View and wrote my own:
 IF EXISTS (SELECT * 
  FROM [prj_0043_subprj_08].[sys].[foreign_keys]
   WHERE [name]= N'FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK'
   --AND parent_object_id = OBJECT_ID(N'dbo.Request')
)
	BEGIN
		print 'The FK constraint exists, and the parent object is Request'
		-- ALTER TABLE [dbo].[Request]  DROP CONSTRAINT [FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK]
	END
ELSE
	BEGIN
		print 'NOPE'
		-- ALTER TABLE [dbo].[Request]  DROP CONSTRAINT [FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK]
	END

-- or if you specify the DAtabase, then you don't need it in the FROM statement
use prj_0043_subprj_08
go

 IF EXISTS (SELECT * 
  FROM [sys].[foreign_keys]
   WHERE [name]= N'FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK'
   --AND parent_object_id = OBJECT_ID(N'dbo.Request')
)
	BEGIN
		print 'The FK constraint exists, and the parent object is Request'
		-- ALTER TABLE [dbo].[Request]  DROP CONSTRAINT [FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK]
	END
ELSE
	BEGIN
		print 'NOPE'
		-- ALTER TABLE [dbo].[Request]  DROP CONSTRAINT [FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK]
	END











--http://stackoverflow.com/questions/482885/how-do-i-drop-a-foreign-key-constraint-only-if-it-exists-in-sql-server

IF (OBJECT_ID('FK_ConstraintName', 'F') IS NOT NULL)
BEGIN
    ALTER TABLE dbo.TableName DROP CONSTRAINT FK_ConstraintName
END

--EXAMPLE;
-------------

IF (OBJECT_ID('FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK', 'F') IS NOT NULL)
BEGIN
    ALTER TABLE dbo.Request DROP CONSTRAINT [FK_dbo.Request_dbo.vw_EmployeeEmail_T9_FK]
END





/*
If you need to drop another type of constraint, these are the applicable codes to pass into the OBJECT_ID() function in the second parameter position:

C = CHECK constraint
D = DEFAULT (constraint or stand-alone)
F = FOREIGN KEY constraint
PK = PRIMARY KEY constraint
UQ = UNIQUE constraint

You can also use OBJECT_ID without the second parameter.

Full List of types here:

Object type:

    AF = Aggregate function (CLR)
    C = CHECK constraint
    D = DEFAULT (constraint or stand-alone)
    F = FOREIGN KEY constraint
    FN = SQL scalar function
    FS = Assembly (CLR) scalar-function
    FT = Assembly (CLR) table-valued function
    IF = SQL inline table-valued function
    IT = Internal table
    P = SQL Stored Procedure
    PC = Assembly (CLR) stored-procedure
    PG = Plan guide
    PK = PRIMARY KEY constraint
    R = Rule (old-style, stand-alone)
    RF = Replication-filter-procedure
    S = System base table
    SN = Synonym
    SO = Sequence object

Applies to: SQL Server 2012 through SQL Server 2014.

    SQ = Service queue
    TA = Assembly (CLR) DML trigger
    TF = SQL table-valued-function
    TR = SQL DML trigger
    TT = Table type
    U = Table (user-defined)
    UQ = UNIQUE constraint
    V = View
    X = Extended stored procedure
    
 
Full list of types here:  https://technet.microsoft.com/en-us/library/ms190324.aspx


*/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TRIGGER</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Insert_Update_Example</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TRIGGER</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Insert_Update_Example</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--P:\p_0020_PasswordsDB\SQL\0_CreateTable\Create_Table_T002_Passwords_ALL_v2.sql

USE [d1_IT]
GO

/****** Object:  Table [dbo].[T002_Passwords_ALL]    Script Date: 2/21/2017 1:42:22 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[T002_Passwords_ALL](
	[Audience_Me_IT] [nvarchar](255) NULL,
	[Audience_e01] [int] NULL,
	[UserType_OS_SQL_Application] [nvarchar](255) NULL,
	[UserType_e02] [int] NULL,
	[UserName] [nvarchar](255) NULL,
	[password] [nvarchar](255) NULL,
	[Application] [nvarchar](255) NULL,
	[OS_user_type] [nvarchar](255) NULL,
	[OS_User_Type_e03] [int] NULL,
	[Computer_for_UserName] [nvarchar](255) NULL,
	[Notes] [nvarchar](255) NULL,
	[T002_PK] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [T002_Passwords_ALL_$_T002_PK] PRIMARY KEY CLUSTERED 
(
	[T002_PK] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[T002_Passwords_ALL]  WITH CHECK ADD  CONSTRAINT [T002_Passwords_ALL_$_Audience_e01_$enum$_T002_enum_01_Value] FOREIGN KEY([Audience_e01])
REFERENCES [dbo].[T002_enum_01] ([T002_enum_01_Value])
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] CHECK CONSTRAINT [T002_Passwords_ALL_$_Audience_e01_$enum$_T002_enum_01_Value]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL]  WITH CHECK ADD  CONSTRAINT [T002_Passwords_ALL_$_OS_User_Type_e03_$enum$_T002_enum_03_Value] FOREIGN KEY([OS_User_Type_e03])
REFERENCES [dbo].[T002_enum_03] ([T002_enum_03_Value])
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] CHECK CONSTRAINT [T002_Passwords_ALL_$_OS_User_Type_e03_$enum$_T002_enum_03_Value]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL]  WITH CHECK ADD  CONSTRAINT [T002_Passwords_ALL_$_UserType_e02_$enum$_T002_enum_02_Value] FOREIGN KEY([UserType_e02])
REFERENCES [dbo].[T002_enum_02] ([T002_enum_02_Value])
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] CHECK CONSTRAINT [T002_Passwords_ALL_$_UserType_e02_$enum$_T002_enum_02_Value]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] ADD  DEFAULT ((2)) FOR [Audience_e01]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] ADD  DEFAULT ((0)) FOR [UserType_e02]
GO

ALTER TABLE [dbo].[T002_Passwords_ALL] ADD  DEFAULT ((4)) FOR [OS_User_Type_e03]
GO


ALTER TABLE [d1_IT].[dbo].[T002_Passwords_ALL]
ADD  
			CreateRecord_dateTime datetime,
			CreateRecord_name sysname,
			UpdateRecord_dateTime datetime,
			UpdateRecord_name sysname;

create trigger TRG_001_recordChanged_T002 on [d1_IT].[dbo].T002_Passwords_ALL
for update
as
begin

    -- nothing to do?
    if (@@rowcount = 0)
      return;

    update d
    set 
       d.UpdateRecord_dateTime = getdate(),
       d.UpdateRecord_name = (coalesce(suser_sname(),'?'))
    from
       [d1_IT].[dbo].T002_Passwords_ALL d join inserted i 
    on 
       d.T002_PK = i.T002_PK;

end
go

-- insert/update dates
alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_ins_date] default (getdate()) for CreateRecord_dateTime;
alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_upd_date] default (getdate()) for UpdateRecord_dateTime;

 insert/update names
alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_ins_name] default (coalesce(suser_sname(),'?')) for CreateRecord_name;

alter table [d1_IT].[dbo].[T002_Passwords_ALL]
    add constraint [df_upd_name] default (coalesce(suser_sname(),'?')) for UpdateRecord_name;
go</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_Blocked_Process_Report___about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_Blocked_Process_Report___about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--By default in SQL Server, the deadlock detector wakes up every 5 seconds to check if your queries are in a “deadly embrace”. 
--You can turn on an option that asks SQL Server to use this resource to check for long term blocking, and issue a report.

--WARNING: You should only configure the blocked process report to be issued for values of five seconds or higher. 
--Microsoft warns that if you set this from 1-4, you could cause the deadlock detector to run continuously and kill your performance.

--To use the Blocked Process Report, you need to configure a trace that looks for the “Blocked Process Report”  
--event under “Errors and Warnings”. We recommend using a server side trace

--Step 1: Turn on the blocked process report. This will look for any blocking taking 20 seconds or longer.

--Make sure you don't have any pending changes
SELECT *
FROM sys.configurations
WHERE value &lt;&gt; value_in_use;
GO
exec sp_configure 'show advanced options', 1;
GO
RECONFIGURE
GO
exec sp_configure 'blocked process threshold (s)', 20;
GO
RECONFIGURE
GO

--To check on the settings:

exec sp_configure 'blocked process threshold (s)';

--Step 2: Set up a trace to capture the blocked process report. Run it as a server side trace.

--	It should contain one event: Errors and Warnings -&gt; Blocked Process Report.
--	It needs just two columns: Text, spid
--This sample server side trace will run for five minutes and automatically stop. You must change the path to a valid directory SQL Server has permission to write to.

-- I tried to set up a trace:
-------------------------------
--I picked the 'Blank' template from the New Trace Window =&gt; 
--	The 6th item down is "Errors and Warnings" =&gt;
--	Opened up that and picked "Blocked Process Report"


--This sample server side trace will run for five minutes and automatically stop. You must change the path to a valid directory SQL Server has permission to write to.
--NOTE: I had to give local account "NT Service\MSSQLSERVER" 'Modify' permission to the folder, otherwise it threw a 'denied access' error
--=================================================================================================
-- Created by: SQL Server 2012  Profiler
-- Create a Queue
declare @rc int
declare @TraceID int
declare @maxfilesize bigint
declare @DateTime datetime
---------Added a function here:
set @DateTime = DATEADD(mi,5,getdate());  /* Run for five minutes */
set @maxfilesize = 5
-- Please replace the text InsertFileNameHere, with an appropriate
-- filename prefixed by a path, e.g., c:\MyFolder\MyTrace. The .trc extension
-- will be appended to the filename automatically. If you are writing from
-- remote server to local drive, please use UNC path and make sure server has
-- write access to your network share
-----------Set my filename here:
exec @rc = sp_trace_create @TraceID output, 0, N'C:\JUNK\Trace001.trc', @maxfilesize, @Datetime
if (@rc != 0) goto error
-- Client side File and Table cannot be scripted
-- Set the events
declare @on bit
set @on = 1
exec sp_trace_setevent @TraceID, 137, 1, @on
exec sp_trace_setevent @TraceID, 137, 12, @on
-- Set the Filters
declare @intfilter int
declare @bigintfilter bigint
-- Set the trace status to start
exec sp_trace_setstatus @TraceID, 1
-- display trace id for future references
select TraceID=@TraceID
goto finish
error:
select ErrorCode=@rc
finish:
go
--=================================================================================================

-- Look at running traces and get the trace id:

SELECT * from sys.traces;
GO

--Stop a trace, if needed
--Plug in the correct traceid from the query above
EXEC sp_trace_setstatus @traceid =2, @status = 0;
GO
EXEC sp_trace_setstatus @traceid =2, @status = 2;
GO

--=================================================================================================
http://michaeljswart.com/2011/04/a-new-way-to-examine-blocked-process-reports/
-- Downloaded and saved the sp_blocked_process_report_viewer.sql script

--SYNTAX:
sp_blocked_process_report_viewer [@Trace = ] 'TraceFileOrTable'
    [ , [ @Type = ] 'TraceType' ]

--Arguments
--[@Trace = ] ‘TraceFileOrTable’

--Is the name of the trace table or trace file that holds the blocked process reports
--[@Trace = ] ‘TraceType’

--Is the type of file referenced by TraceFileOrTable. Values can be TABLE, FILE or XMLFILE. The default is FILE

--In this sample we use the free blocked process report viewer by Michael J Swart.

exec dbo.sp_blocked_process_report_viewer
  @Trace='C:\JUNK\Trace001.trc';
GO

--=================================================================================================
--CLEANUP
--Make sure your trace is gone
SELECT * from sys.traces;
GO
--Turn off the blocked process report when you're not using it.
--Make sure you don't have any pending changes
SELECT *
FROM sys.configurations
WHERE value &lt;&gt; value_in_use;
GO
exec sp_configure 'blocked process threshold (s)', 0;
GO
RECONFIGURE
GO
exec sp_configure 'blocked process threshold (s)';
GO

////////////////////////////--To Demonstrate a Blocked Process:
http://www.sqlpassion.at/archive/2011/12/01/the-blocked-process-report/

--To demonstrate the Blocked Process Report, 
--I’m just creating a new transaction inside the AdventureWorks2008R2 database through an UPDATE statement:


BEGIN TRANSACTION

UPDATE Person.Person
SET Title = 'Mr'
WHERE BusinessEntityID = 1

BEGIN TRANSACTION
 
--After the execution of this statement, 
--the query has now acquired an Exclusive Lock (X) on the record where the column BusinessEntityID is equal to 1. 
--In a second session I’m now trying to read the same record.
--During the reading SQL Server tries to acquire a Shared Lock (S) which leads to a blocking scenario:

SELECT * FROM Person.Person
WHERE BusinessEntityID = 1
GO
 
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_Blitz____script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_Blitz____script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>IF OBJECT_ID('dbo.sp_Blitz') IS NULL
  EXEC ('CREATE PROCEDURE dbo.sp_Blitz AS RETURN 0;')
GO

ALTER PROCEDURE [dbo].[sp_Blitz]
    @Help TINYINT = 0 ,
    @CheckUserDatabaseObjects TINYINT = 1 ,
    @CheckProcedureCache TINYINT = 0 ,
    @OutputType VARCHAR(20) = 'TABLE' ,
    @OutputProcedureCache TINYINT = 0 ,
    @CheckProcedureCacheFilter VARCHAR(10) = NULL ,
    @CheckServerInfo TINYINT = 0 ,
    @SkipChecksServer NVARCHAR(256) = NULL ,
    @SkipChecksDatabase NVARCHAR(256) = NULL ,
    @SkipChecksSchema NVARCHAR(256) = NULL ,
    @SkipChecksTable NVARCHAR(256) = NULL ,
    @IgnorePrioritiesBelow INT = NULL ,
    @IgnorePrioritiesAbove INT = NULL ,
    @OutputServerName NVARCHAR(256) = NULL ,
    @OutputDatabaseName NVARCHAR(256) = NULL ,
    @OutputSchemaName NVARCHAR(256) = NULL ,
    @OutputTableName NVARCHAR(256) = NULL ,
    @OutputXMLasNVARCHAR TINYINT = 0 ,
    @EmailRecipients VARCHAR(MAX) = NULL ,
    @EmailProfile sysname = NULL ,
    @SummaryMode TINYINT = 0 ,
    @BringThePain TINYINT = 0 ,
    @VersionDate DATETIME = NULL OUTPUT
AS
    SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET @VersionDate = '20161210';
	SET @OutputType = UPPER(@OutputType);

	IF @Help = 1 PRINT '
	/*
	sp_Blitz from http://FirstResponderKit.org
	
	This script checks the health of your SQL Server and gives you a prioritized
	to-do list of the most urgent things you should consider fixing.

	To learn more, visit http://FirstResponderKit.org where you can download new
	versions for free, watch training videos on how it works, get more info on
	the findings, contribute your own code, and more.

	Known limitations of this version:
	 - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.
	 - If a database name has a question mark in it, some tests will fail. Gotta
	   love that unsupported sp_MSforeachdb.
	 - If you have offline databases, sp_Blitz fails the first time you run it,
	   but does work the second time. (Hoo, boy, this will be fun to debug.)
      - @OutputServerName will output QueryPlans as NVARCHAR(MAX) since Microsoft
	    has refused to support XML columns in Linked Server queries. The bug is now
		16 years old! *~ \o/ ~*

	Unknown limitations of this version:
	 - None.  (If we knew them, they would be known. Duh.)

     Changes - for the full list of improvements and fixes in this version, see:
     https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/


	Parameter explanations:

	@CheckUserDatabaseObjects	1=review user databases for triggers, heaps, etc. Takes more time for more databases and objects.
	@CheckServerInfo			1=show server info like CPUs, memory, virtualization
	@CheckProcedureCache		1=top 20-50 resource-intensive cache plans and analyze them for common performance issues.
	@OutputProcedureCache		1=output the top 20-50 resource-intensive plans even if they did not trigger an alarm
	@CheckProcedureCacheFilter	''CPU'' | ''Reads'' | ''Duration'' | ''ExecCount''
	@OutputType					''TABLE''=table | ''COUNT''=row with number found | ''MARKDOWN''=bulleted list | ''SCHEMA''=version and field list | ''NONE'' = none
	@IgnorePrioritiesBelow		50=ignore priorities below 50
	@IgnorePrioritiesAbove		50=ignore priorities above 50
	For the rest of the parameters, see http://www.brentozar.com/blitz/documentation for details.

    MIT License

	Copyright (c) 2016 Brent Ozar Unlimited

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.


	*/'
	ELSE IF @OutputType = 'SCHEMA'
	BEGIN
		SELECT FieldList = '[Priority] TINYINT, [FindingsGroup] VARCHAR(50), [Finding] VARCHAR(200), [DatabaseName] NVARCHAR(128), [URL] VARCHAR(200), [Details] NVARCHAR(4000), [QueryPlan] NVARCHAR(MAX), [QueryPlanFiltered] NVARCHAR(MAX), [CheckID] INT'

	END
	ELSE /* IF @OutputType = 'SCHEMA' */
	BEGIN

		/*
		We start by creating #BlitzResults. It's a temp table that will store all of
		the results from our checks. Throughout the rest of this stored procedure,
		we're running a series of checks looking for dangerous things inside the SQL
		Server. When we find a problem, we insert rows into #BlitzResults. At the
		end, we return these results to the end user.

		#BlitzResults has a CheckID field, but there's no Check table. As we do
		checks, we insert data into this table, and we manually put in the CheckID.
		For a list of checks, visit http://FirstResponderKit.org.
		*/
		DECLARE @StringToExecute NVARCHAR(4000)
			,@curr_tracefilename NVARCHAR(500)
			,@base_tracefilename NVARCHAR(500)
			,@indx int
			,@query_result_separator CHAR(1)
			,@EmailSubject NVARCHAR(255)
			,@EmailBody NVARCHAR(MAX)
			,@EmailAttachmentFilename NVARCHAR(255)
			,@ProductVersion NVARCHAR(128)
			,@ProductVersionMajor DECIMAL(10,2)
			,@ProductVersionMinor DECIMAL(10,2)
			,@CurrentName NVARCHAR(128)
			,@CurrentDefaultValue NVARCHAR(200)
			,@CurrentCheckID INT
			,@CurrentPriority INT
			,@CurrentFinding VARCHAR(200)
			,@CurrentURL VARCHAR(200)
			,@CurrentDetails NVARCHAR(4000)
			,@MsSinceWaitsCleared DECIMAL(38,0)
			,@CpuMsSinceWaitsCleared DECIMAL(38,0)
			,@ResultText NVARCHAR(MAX)
			,@crlf NVARCHAR(2)
			,@Processors int
			,@NUMANodes int
			,@MinServerMemory bigint
			,@MaxServerMemory bigint
			,@ColumnStoreIndexesInUse bit;


		SET @crlf = NCHAR(13) + NCHAR(10);
		SET @ResultText = 'sp_Blitz Results: ' + @crlf;
		
		IF OBJECT_ID('tempdb..#BlitzResults') IS NOT NULL
			DROP TABLE #BlitzResults;
		CREATE TABLE #BlitzResults
			(
			  ID INT IDENTITY(1, 1) ,
			  CheckID INT ,
			  DatabaseName NVARCHAR(128) ,
			  Priority TINYINT ,
			  FindingsGroup VARCHAR(50) ,
			  Finding VARCHAR(200) ,
			  URL VARCHAR(200) ,
			  Details NVARCHAR(4000) ,
			  QueryPlan [XML] NULL ,
			  QueryPlanFiltered [NVARCHAR](MAX) NULL
			);

		IF OBJECT_ID('tempdb..#TemporaryDatabaseResults') IS NOT NULL
			DROP TABLE #TemporaryDatabaseResults;
		CREATE TABLE #TemporaryDatabaseResults
			(
			  DatabaseName NVARCHAR(128) ,
			  Finding NVARCHAR(128)
			);

		/*
		You can build your own table with a list of checks to skip. For example, you
		might have some databases that you don't care about, or some checks you don't
		want to run. Then, when you run sp_Blitz, you can specify these parameters:
		@SkipChecksDatabase = 'DBAtools',
		@SkipChecksSchema = 'dbo',
		@SkipChecksTable = 'BlitzChecksToSkip'
		Pass in the database, schema, and table that contains the list of checks you
		want to skip. This part of the code checks those parameters, gets the list,
		and then saves those in a temp table. As we run each check, we'll see if we
		need to skip it.

		Really anal-retentive users will note that the @SkipChecksServer parameter is
		not used. YET. We added that parameter in so that we could avoid changing the
		stored proc's surface area (interface) later.
		*/
		IF OBJECT_ID('tempdb..#SkipChecks') IS NOT NULL
			DROP TABLE #SkipChecks;
		CREATE TABLE #SkipChecks
			(
			  DatabaseName NVARCHAR(128) ,
			  CheckID INT ,
			  ServerName NVARCHAR(128)
			);
		CREATE CLUSTERED INDEX IX_CheckID_DatabaseName ON #SkipChecks(CheckID, DatabaseName);

		IF @SkipChecksTable IS NOT NULL
			AND @SkipChecksSchema IS NOT NULL
			AND @SkipChecksDatabase IS NOT NULL
			BEGIN
				SET @StringToExecute = 'INSERT INTO #SkipChecks(DatabaseName, CheckID, ServerName )
				SELECT DISTINCT DatabaseName, CheckID, ServerName
				FROM ' + QUOTENAME(@SkipChecksDatabase) + '.' + QUOTENAME(@SkipChecksSchema) + '.' + QUOTENAME(@SkipChecksTable)
					+ ' WHERE ServerName IS NULL OR ServerName = SERVERPROPERTY(''ServerName'');'
				EXEC(@StringToExecute)
			END

		IF NOT EXISTS ( SELECT  1
							FROM    #SkipChecks
							WHERE   DatabaseName IS NULL AND CheckID = 106 )
							AND (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1
			BEGIN
					select @curr_tracefilename = [path] from sys.traces where is_default = 1 ;
					set @curr_tracefilename = reverse(@curr_tracefilename);
					select @indx = patindex('%\%', @curr_tracefilename) ;
					set @curr_tracefilename = reverse(@curr_tracefilename) ;
					set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + '\log.trc' ;
			END

		/* If the server has any databases on Antiques Roadshow, skip the checks that would break due to CTEs. */
		IF @CheckUserDatabaseObjects = 1 AND EXISTS(SELECT * FROM sys.databases WHERE compatibility_level &lt; 90)
		BEGIN
			SET @CheckUserDatabaseObjects = 0;
			PRINT 'Databases with compatibility level &lt; 90 found, so setting @CheckUserDatabaseObjects = 0.';
			PRINT 'The database-level checks rely on CTEs, which are not supported in SQL 2000 compat level databases.';
			PRINT 'Get with the cool kids and switch to a current compatibility level, Grandpa. To find the problems, run:';
			PRINT 'SELECT * FROM sys.databases WHERE compatibility_level &lt; 90;';
		END


			/* If the server is Amazon RDS, skip checks that it doesn't allow */
		IF LEFT(CAST(SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'
		   AND LEFT(CAST(SERVERPROPERTY('MachineName') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'
		   AND LEFT(CAST(SERVERPROPERTY('ServerName') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'
			BEGIN
						INSERT INTO #SkipChecks (CheckID) VALUES (6);
						INSERT INTO #SkipChecks (CheckID) VALUES (29);
						INSERT INTO #SkipChecks (CheckID) VALUES (30);
						INSERT INTO #SkipChecks (CheckID) VALUES (31);
						INSERT INTO #SkipChecks (CheckID) VALUES (40); /* TempDB only has one data file */
						INSERT INTO #SkipChecks (CheckID) VALUES (57);
						INSERT INTO #SkipChecks (CheckID) VALUES (59);
						INSERT INTO #SkipChecks (CheckID) VALUES (61);
						INSERT INTO #SkipChecks (CheckID) VALUES (62);
						INSERT INTO #SkipChecks (CheckID) VALUES (68);
						INSERT INTO #SkipChecks (CheckID) VALUES (69);
						INSERT INTO #SkipChecks (CheckID) VALUES (73);
						INSERT INTO #SkipChecks (CheckID) VALUES (79);
						INSERT INTO #SkipChecks (CheckID) VALUES (92);
						INSERT INTO #SkipChecks (CheckID) VALUES (94);
						INSERT INTO #SkipChecks (CheckID) VALUES (96);
						INSERT INTO #SkipChecks (CheckID) VALUES (98);
						INSERT INTO #SkipChecks (CheckID) VALUES (100); /* Remote DAC disabled */
						INSERT INTO #SkipChecks (CheckID) VALUES (123);
						INSERT INTO #SkipChecks (CheckID) VALUES (177);
						INSERT INTO #SkipChecks (CheckID) VALUES (180); /* 180/181 are maintenance plans */
						INSERT INTO #SkipChecks (CheckID) VALUES (181);
			END /* Amazon RDS skipped checks */



		/*
		That's the end of the SkipChecks stuff.
		The next several tables are used by various checks later.
		*/
		IF OBJECT_ID('tempdb..#ConfigurationDefaults') IS NOT NULL
			DROP TABLE #ConfigurationDefaults;
		CREATE TABLE #ConfigurationDefaults
			(
			  name NVARCHAR(128) ,
			  DefaultValue BIGINT,
			  CheckID INT
			);

        IF OBJECT_ID ('tempdb..#Recompile') IS NOT NULL 
            DROP TABLE #Recompile; 
        CREATE TABLE #Recompile( 
            DBName varchar(200), 
            ProcName varchar(300), 
            RecompileFlag varchar(1),
            SPSchema varchar(50)
        );

		IF OBJECT_ID('tempdb..#DatabaseDefaults') IS NOT NULL
			DROP TABLE #DatabaseDefaults;
		CREATE TABLE #DatabaseDefaults
			(
				name NVARCHAR(128) ,
				DefaultValue NVARCHAR(200),
				CheckID INT,
		        Priority INT,
		        Finding VARCHAR(200),
		        URL VARCHAR(200),
		        Details NVARCHAR(4000)
			);

		IF OBJECT_ID('tempdb..#DatabaseScopedConfigurationDefaults') IS NOT NULL
			DROP TABLE #DatabaseScopedConfigurationDefaults;
		CREATE TABLE #DatabaseScopedConfigurationDefaults
			(ID INT IDENTITY(1,1), configuration_id INT, [name] NVARCHAR(60), default_value sql_variant, default_value_for_secondary sql_variant, CheckID INT, );



		IF OBJECT_ID('tempdb..#DBCCs') IS NOT NULL
			DROP TABLE #DBCCs;
		CREATE TABLE #DBCCs
			(
			  ID INT IDENTITY(1, 1)
					 PRIMARY KEY ,
			  ParentObject VARCHAR(255) ,
			  Object VARCHAR(255) ,
			  Field VARCHAR(255) ,
			  Value VARCHAR(255) ,
			  DbName NVARCHAR(128) NULL
			)


		IF OBJECT_ID('tempdb..#LogInfo2012') IS NOT NULL
			DROP TABLE #LogInfo2012;
		CREATE TABLE #LogInfo2012
			(
			  recoveryunitid INT ,
			  FileID SMALLINT ,
			  FileSize BIGINT ,
			  StartOffset BIGINT ,
			  FSeqNo BIGINT ,
			  [Status] TINYINT ,
			  Parity TINYINT ,
			  CreateLSN NUMERIC(38)
			);

		IF OBJECT_ID('tempdb..#LogInfo') IS NOT NULL
			DROP TABLE #LogInfo;
		CREATE TABLE #LogInfo
			(
			  FileID SMALLINT ,
			  FileSize BIGINT ,
			  StartOffset BIGINT ,
			  FSeqNo BIGINT ,
			  [Status] TINYINT ,
			  Parity TINYINT ,
			  CreateLSN NUMERIC(38)
			);

		IF OBJECT_ID('tempdb..#partdb') IS NOT NULL
			DROP TABLE #partdb;
		CREATE TABLE #partdb
			(
			  dbname NVARCHAR(128) ,
			  objectname NVARCHAR(200) ,
			  type_desc NVARCHAR(128)
			)

		IF OBJECT_ID('tempdb..#TraceStatus') IS NOT NULL
			DROP TABLE #TraceStatus;
		CREATE TABLE #TraceStatus
			(
			  TraceFlag VARCHAR(10) ,
			  status BIT ,
			  Global BIT ,
			  Session BIT
			);

		IF OBJECT_ID('tempdb..#driveInfo') IS NOT NULL
			DROP TABLE #driveInfo;
		CREATE TABLE #driveInfo
			(
			  drive NVARCHAR ,
			  SIZE DECIMAL(18, 2)
			)


		IF OBJECT_ID('tempdb..#dm_exec_query_stats') IS NOT NULL
			DROP TABLE #dm_exec_query_stats;
		CREATE TABLE #dm_exec_query_stats
			(
			  [id] [int] NOT NULL
						 IDENTITY(1, 1) ,
			  [sql_handle] [varbinary](64) NOT NULL ,
			  [statement_start_offset] [int] NOT NULL ,
			  [statement_end_offset] [int] NOT NULL ,
			  [plan_generation_num] [bigint] NOT NULL ,
			  [plan_handle] [varbinary](64) NOT NULL ,
			  [creation_time] [datetime] NOT NULL ,
			  [last_execution_time] [datetime] NOT NULL ,
			  [execution_count] [bigint] NOT NULL ,
			  [total_worker_time] [bigint] NOT NULL ,
			  [last_worker_time] [bigint] NOT NULL ,
			  [min_worker_time] [bigint] NOT NULL ,
			  [max_worker_time] [bigint] NOT NULL ,
			  [total_physical_reads] [bigint] NOT NULL ,
			  [last_physical_reads] [bigint] NOT NULL ,
			  [min_physical_reads] [bigint] NOT NULL ,
			  [max_physical_reads] [bigint] NOT NULL ,
			  [total_logical_writes] [bigint] NOT NULL ,
			  [last_logical_writes] [bigint] NOT NULL ,
			  [min_logical_writes] [bigint] NOT NULL ,
			  [max_logical_writes] [bigint] NOT NULL ,
			  [total_logical_reads] [bigint] NOT NULL ,
			  [last_logical_reads] [bigint] NOT NULL ,
			  [min_logical_reads] [bigint] NOT NULL ,
			  [max_logical_reads] [bigint] NOT NULL ,
			  [total_clr_time] [bigint] NOT NULL ,
			  [last_clr_time] [bigint] NOT NULL ,
			  [min_clr_time] [bigint] NOT NULL ,
			  [max_clr_time] [bigint] NOT NULL ,
			  [total_elapsed_time] [bigint] NOT NULL ,
			  [last_elapsed_time] [bigint] NOT NULL ,
			  [min_elapsed_time] [bigint] NOT NULL ,
			  [max_elapsed_time] [bigint] NOT NULL ,
			  [query_hash] [binary](8) NULL ,
			  [query_plan_hash] [binary](8) NULL ,
			  [query_plan] [xml] NULL ,
			  [query_plan_filtered] [nvarchar](MAX) NULL ,
			  [text] [nvarchar](MAX) COLLATE SQL_Latin1_General_CP1_CI_AS
									 NULL ,
			  [text_filtered] [nvarchar](MAX) COLLATE SQL_Latin1_General_CP1_CI_AS
											  NULL
			)

		IF OBJECT_ID('tempdb..#ErrorLog') IS NOT NULL
			DROP TABLE #ErrorLog;
		CREATE TABLE #ErrorLog
			(
			  LogDate DATETIME ,
			  ProcessInfo NVARCHAR(20) ,
			  [Text] NVARCHAR(1000) 
			);

		IF OBJECT_ID('tempdb..#IgnorableWaits') IS NOT NULL
			DROP TABLE #IgnorableWaits;
		CREATE TABLE #IgnorableWaits (wait_type NVARCHAR(60));
		INSERT INTO #IgnorableWaits VALUES ('BROKER_EVENTHANDLER');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_RECEIVE_WAITFOR');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_TASK_STOP');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_TO_FLUSH');
		INSERT INTO #IgnorableWaits VALUES ('BROKER_TRANSMITTER');
		INSERT INTO #IgnorableWaits VALUES ('CHECKPOINT_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('CLR_AUTO_EVENT');
		INSERT INTO #IgnorableWaits VALUES ('CLR_MANUAL_EVENT');
		INSERT INTO #IgnorableWaits VALUES ('CLR_SEMAPHORE');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_DBM_EVENT');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_DBM_MUTEX');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_EVENTS_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRROR_WORKER_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('DBMIRRORING_CMD');
		INSERT INTO #IgnorableWaits VALUES ('DIRTY_PAGE_POLL');
		INSERT INTO #IgnorableWaits VALUES ('DISPATCHER_QUEUE_SEMAPHORE');
		INSERT INTO #IgnorableWaits VALUES ('FT_IFTS_SCHEDULER_IDLE_WAIT');
		INSERT INTO #IgnorableWaits VALUES ('FT_IFTSHC_MUTEX');
		INSERT INTO #IgnorableWaits VALUES ('HADR_CLUSAPI_CALL');
		INSERT INTO #IgnorableWaits VALUES ('HADR_FILESTREAM_IOMGR_IOCOMPLETION');
		INSERT INTO #IgnorableWaits VALUES ('HADR_LOGCAPTURE_WAIT');
		INSERT INTO #IgnorableWaits VALUES ('HADR_NOTIFICATION_DEQUEUE');
		INSERT INTO #IgnorableWaits VALUES ('HADR_TIMER_TASK');
		INSERT INTO #IgnorableWaits VALUES ('HADR_WORK_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('LAZYWRITER_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('LOGMGR_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('ONDEMAND_TASK_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('PREEMPTIVE_HADR_LEASE_MECHANISM');
		INSERT INTO #IgnorableWaits VALUES ('PREEMPTIVE_SP_SERVER_DIAGNOSTICS');
		INSERT INTO #IgnorableWaits VALUES ('QDS_ASYNC_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('QDS_PERSIST_TASK_MAIN_LOOP_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('QDS_SHUTDOWN_QUEUE');
		INSERT INTO #IgnorableWaits VALUES ('REDO_THREAD_PENDING_WORK');
		INSERT INTO #IgnorableWaits VALUES ('REQUEST_FOR_DEADLOCK_SEARCH');
		INSERT INTO #IgnorableWaits VALUES ('SLEEP_SYSTEMTASK');
		INSERT INTO #IgnorableWaits VALUES ('SLEEP_TASK');
		INSERT INTO #IgnorableWaits VALUES ('SP_SERVER_DIAGNOSTICS_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('SQLTRACE_BUFFER_FLUSH');
		INSERT INTO #IgnorableWaits VALUES ('SQLTRACE_INCREMENTAL_FLUSH_SLEEP');
		INSERT INTO #IgnorableWaits VALUES ('UCS_SESSION_REGISTRATION');
		INSERT INTO #IgnorableWaits VALUES ('WAIT_XTP_OFFLINE_CKPT_NEW_LOG');
		INSERT INTO #IgnorableWaits VALUES ('WAITFOR');
		INSERT INTO #IgnorableWaits VALUES ('XE_DISPATCHER_WAIT');
		INSERT INTO #IgnorableWaits VALUES ('XE_LIVE_TARGET_TVF');
		INSERT INTO #IgnorableWaits VALUES ('XE_TIMER_EVENT');


        /* Used for the default trace checks. */
        DECLARE @TracePath NVARCHAR(256);
        SELECT @TracePath=CAST(value as NVARCHAR(256))
            FROM sys.fn_trace_getinfo(1)
            WHERE traceid=1 AND property=2;
        
        SELECT @MsSinceWaitsCleared = DATEDIFF(MINUTE, create_date, CURRENT_TIMESTAMP) * 60000.0
            FROM    sys.databases
            WHERE   name='tempdb';

		/* Have they cleared wait stats? Using a 10% fudge factor */
		IF @MsSinceWaitsCleared * .9 &gt; (SELECT wait_time_ms FROM sys.dm_os_wait_stats WHERE wait_type = 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP')
			BEGIN
				SET @MsSinceWaitsCleared = (SELECT wait_time_ms FROM sys.dm_os_wait_stats WHERE wait_type = 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP')
				INSERT  INTO #BlitzResults
						( CheckID ,
							Priority ,
							FindingsGroup ,
							Finding ,
							URL ,
							Details
						)
					VALUES( 185,
								240,
								'Wait Stats',
								'Wait Stats Have Been Cleared',
								'http://BrentOzar.com/go/waits',
								'Someone ran DBCC SQLPERF to clear sys.dm_os_wait_stats at approximately: ' + CONVERT(NVARCHAR(100), DATEADD(ms, (-1 * @MsSinceWaitsCleared), GETDATE()), 120))
			END

		/* @CpuMsSinceWaitsCleared is used for waits stats calculations */
		SELECT @CpuMsSinceWaitsCleared = @MsSinceWaitsCleared * scheduler_count
			FROM sys.dm_os_sys_info;


		/* If we're outputting CSV or Markdown, don't bother checking the plan cache because we cannot export plans. */
		IF @OutputType = 'CSV' OR @OutputType = 'MARKDOWN'
			SET @CheckProcedureCache = 0;

		/* If we're posting a question on Stack, include background info on the server */
		IF @OutputType = 'MARKDOWN'
			SET @CheckServerInfo = 1;


		/* Only run CheckUserDatabaseObjects if there are less than 50 databases. */
		IF @BringThePain = 0 AND 50 &lt;= (SELECT COUNT(*) FROM sys.databases) AND @CheckUserDatabaseObjects = 1
			BEGIN
			SET @CheckUserDatabaseObjects = 0;
			PRINT 'Running sp_Blitz @CheckUserDatabaseObjects = 1 on a server with 50+ databases may cause temporary insanity for the server and/or user.';
			PRINT 'If you''re sure you want to do this, run again with the parameter @BringThePain = 1.';
			END

		/* Sanitize our inputs */
		SELECT
			@OutputServerName = QUOTENAME(@OutputServerName),
			@OutputDatabaseName = QUOTENAME(@OutputDatabaseName),
			@OutputSchemaName = QUOTENAME(@OutputSchemaName),
			@OutputTableName = QUOTENAME(@OutputTableName)

		/* Get the major and minor build numbers */
		SET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));
		SELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1,CHARINDEX('.', @ProductVersion) + 1 ),
			@ProductVersionMinor = PARSENAME(CONVERT(varchar(32), @ProductVersion), 2)
		
		/*
		Whew! we're finally done with the setup, and we can start doing checks.
		First, let's make sure we're actually supposed to do checks on this server.
		The user could have passed in a SkipChecks table that specified to skip ALL
		checks on this server, so let's check for that:
		*/
		IF ( ( SERVERPROPERTY('ServerName') NOT IN ( SELECT ServerName
													 FROM   #SkipChecks
													 WHERE  DatabaseName IS NULL
															AND CheckID IS NULL ) )
			 OR ( @SkipChecksTable IS NULL )
		   )
			BEGIN

				/*
				Our very first check! We'll put more comments in this one just to
				explain exactly how it works. First, we check to see if we're
				supposed to skip CheckID 1 (that's the check we're working on.)
				*/
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 1 )
					BEGIN

						/*
						Below, we check master.sys.databases looking for databases
						that haven't had a backup in the last week. If we find any,
						we insert them into #BlitzResults, the temp table that
						tracks our server's problems. Note that if the check does
						NOT find any problems, we don't save that. We're only
						saving the problems, not the successful checks.
						*/
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  1 AS CheckID ,
										d.[name] AS DatabaseName ,
										1 AS Priority ,
										'Backup' AS FindingsGroup ,
										'Backups Not Performed Recently' AS Finding ,
										'http://BrentOzar.com/go/nobak' AS URL ,
										'Last backed up: '
										+ COALESCE(CAST(MAX(b.backup_finish_date) AS VARCHAR(25)),'never') AS Details
								FROM    master.sys.databases d
										LEFT OUTER JOIN msdb.dbo.backupset b ON d.name COLLATE SQL_Latin1_General_CP1_CI_AS = b.database_name COLLATE SQL_Latin1_General_CP1_CI_AS
																  AND b.type = 'D'
																  AND b.server_name = SERVERPROPERTY('ServerName') /*Backupset ran on current server */
								WHERE   d.database_id &lt;&gt; 2  /* Bonus points if you know what that means */
										AND d.state NOT IN(1, 6, 10) /* Not currently offline or restoring, like log shipping databases */
										AND d.is_in_standby = 0 /* Not a log shipping target database */
										AND d.source_database_id IS NULL /* Excludes database snapshots */
										AND d.name NOT IN ( SELECT DISTINCT
																  DatabaseName
															FROM  #SkipChecks
															WHERE CheckID IS NULL )
										/*
										The above NOT IN filters out the databases we're not supposed to check.
										*/
								GROUP BY d.name
								HAVING  MAX(b.backup_finish_date) &lt;= DATEADD(dd,
																  -7, GETDATE())
                                        OR MAX(b.backup_finish_date) IS NULL;
						/*
						And there you have it. The rest of this stored procedure works the same
						way: it asks:
						- Should I skip this check?
						- If not, do I find problems?
						- Insert the results into #BlitzResults
						*/

					END

				/*
				And that's the end of CheckID #1.

				CheckID #2 is a little simpler because it only involves one query, and it's
				more typical for queries that people contribute. But keep reading, because
				the next check gets more complex again.
				*/

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 2 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
										SELECT DISTINCT
										2 AS CheckID ,
										d.name AS DatabaseName ,
										1 AS Priority ,
										'Backup' AS FindingsGroup ,
										'Full Recovery Mode w/o Log Backups' AS Finding ,
										'http://BrentOzar.com/go/biglogs' AS URL ,
										( 'The ' + CAST(CAST((SELECT ((SUM([mf].[size]) * 8.) / 1024.) FROM sys.[master_files] AS [mf] WHERE [mf].[database_id] = d.[database_id] AND [mf].[type_desc] = 'LOG') AS DECIMAL(18,2)) AS VARCHAR) + 'MB log file has not been backed up in the last week.' ) AS Details
								FROM    master.sys.databases d
								WHERE   d.recovery_model IN ( 1, 2 )
										AND d.database_id NOT IN ( 2, 3 )
										AND d.source_database_id IS NULL
										AND d.state NOT IN(1, 6, 10) /* Not currently offline or restoring, like log shipping databases */
										AND d.is_in_standby = 0 /* Not a log shipping target database */
										AND d.source_database_id IS NULL /* Excludes database snapshots */
										AND d.name NOT IN ( SELECT DISTINCT
																  DatabaseName
															FROM  #SkipChecks
															WHERE CheckID IS NULL )
										AND NOT EXISTS ( SELECT *
														 FROM   msdb.dbo.backupset b
														 WHERE  d.name COLLATE SQL_Latin1_General_CP1_CI_AS = b.database_name COLLATE SQL_Latin1_General_CP1_CI_AS
																AND b.type = 'L'
																AND b.backup_finish_date &gt;= DATEADD(dd,
																  -7, GETDATE()) ); 
					END


				/*
				Next up, we've got CheckID 8. (These don't have to go in order.) This one
				won't work on SQL Server 2005 because it relies on a new DMV that didn't
				exist prior to SQL Server 2008. This means we have to check the SQL Server
				version first, then build a dynamic string with the query we want to run:
				*/

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 8 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID, Priority,
							FindingsGroup,
							Finding, URL,
							Details)
					  SELECT 8 AS CheckID,
					  230 AS Priority,
					  ''Security'' AS FindingsGroup,
					  ''Server Audits Running'' AS Finding,
					  ''http://BrentOzar.com/go/audits'' AS URL,
					  (''SQL Server built-in audit functionality is being used by server audit: '' + [name]) AS Details FROM sys.dm_server_audit_status'
								EXECUTE(@StringToExecute)
							END;
					END

				/*
				But what if you need to run a query in every individual database?
				Hop down to the @CheckUserDatabaseObjects section.
                
				And that's the basic idea! You can read through the rest of the
				checks if you like - some more exciting stuff happens closer to the
				end of the stored proc, where we start doing things like checking
				the plan cache, but those aren't as cleanly commented.

				If you'd like to contribute your own check, use one of the check
				formats shown above and email it to Help@BrentOzar.com. You don't
				have to pick a CheckID or a link - we'll take care of that when we
				test and publish the code. Thanks!
				*/


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 93 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT
										93 AS CheckID ,
										1 AS Priority ,
										'Backup' AS FindingsGroup ,
										'Backing Up to Same Drive Where Databases Reside' AS Finding ,
										'http://BrentOzar.com/go/backup' AS URL ,
										CAST(COUNT(1) AS VARCHAR(50)) + ' backups done on drive '
										+ UPPER(LEFT(bmf.physical_device_name, 3))
										+ ' in the last two weeks, where database files also live. This represents a serious risk if that array fails.' Details
								FROM    msdb.dbo.backupmediafamily AS bmf
										INNER JOIN msdb.dbo.backupset AS bs ON bmf.media_set_id = bs.media_set_id
																  AND bs.backup_start_date &gt;= ( DATEADD(dd,
																  -14, GETDATE()) )
										/* Filter out databases that were recently restored: */
										LEFT OUTER JOIN msdb.dbo.restorehistory rh ON bs.database_name = rh.destination_database_name AND rh.restore_date &gt; DATEADD(dd, -14, GETDATE())
								WHERE   UPPER(LEFT(bmf.physical_device_name COLLATE SQL_Latin1_General_CP1_CI_AS, 3)) IN (
										SELECT DISTINCT
												UPPER(LEFT(mf.physical_name COLLATE SQL_Latin1_General_CP1_CI_AS, 3))
										FROM    sys.master_files AS mf )
										AND rh.destination_database_name IS NULL
								GROUP BY UPPER(LEFT(bmf.physical_device_name, 3))
					END


					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 119 )
						AND EXISTS ( SELECT *
									 FROM   sys.all_objects o
									 WHERE  o.name = 'dm_database_encryption_keys' )
						BEGIN
							SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, DatabaseName, URL, Details)
								SELECT 119 AS CheckID,
								1 AS Priority,
								''Backup'' AS FindingsGroup,
								''TDE Certificate Not Backed Up Recently'' AS Finding,
								db_name(dek.database_id) AS DatabaseName,
								''http://BrentOzar.com/go/tde'' AS URL,
								''The certificate '' + c.name + '' is used to encrypt database '' + db_name(dek.database_id) + ''. Last backup date: '' + COALESCE(CAST(c.pvt_key_last_backup_date AS VARCHAR(100)), ''Never'') AS Details
								FROM sys.certificates c INNER JOIN sys.dm_database_encryption_keys dek ON c.thumbprint = dek.encryptor_thumbprint
								WHERE pvt_key_last_backup_date IS NULL OR pvt_key_last_backup_date &lt;= DATEADD(dd, -30, GETDATE())';
							EXECUTE(@StringToExecute);
						END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 3 )
					BEGIN
						IF DATEADD(dd, -60, GETDATE()) &gt; (SELECT TOP 1 backup_start_date FROM msdb.dbo.backupset ORDER BY 1)
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1
										3 AS CheckID ,
										'msdb' ,
										200 AS Priority ,
										'Backup' AS FindingsGroup ,
										'MSDB Backup History Not Purged' AS Finding ,
										'http://BrentOzar.com/go/history' AS URL ,
										( 'Database backup history retained back to '
										  + CAST(bs.backup_start_date AS VARCHAR(20)) ) AS Details
								FROM    msdb.dbo.backupset bs
								ORDER BY backup_set_id ASC;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 186 )
					BEGIN
						IF DATEADD(dd, -2, GETDATE()) &lt; (SELECT TOP 1 backup_start_date FROM msdb.dbo.backupset ORDER BY 1)
							INSERT  INTO #BlitzResults
									( CheckID ,
									  DatabaseName ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT TOP 1
											186 AS CheckID ,
											'msdb' ,
											200 AS Priority ,
											'Backup' AS FindingsGroup ,
											'MSDB Backup History Purged Too Frequently' AS Finding ,
											'http://BrentOzar.com/go/history' AS URL ,
											( 'Database backup history only retained back to '
											  + CAST(bs.backup_start_date AS VARCHAR(20)) ) AS Details
									FROM    msdb.dbo.backupset bs
									ORDER BY backup_set_id ASC;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 178 )
					AND EXISTS (SELECT *
									FROM msdb.dbo.backupset bs
									WHERE bs.type = 'D'
									AND bs.backup_size &gt;= 50000000000 /* At least 50GB */
									AND DATEDIFF(SECOND, bs.backup_start_date, bs.backup_finish_date) &lt;= 60 /* Backup took less than 60 seconds */
									AND bs.backup_finish_date &gt;= DATEADD(DAY, -14, GETDATE()) /* In the last 2 weeks */)
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT 178 AS CheckID ,
										200 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Snapshot Backups Occurring' AS Finding ,
										'http://BrentOzar.com/go/snaps' AS URL ,
										( CAST(COUNT(*) AS VARCHAR(20)) + ' snapshot-looking backups have occurred in the last two weeks, indicating that IO may be freezing up.') AS Details
								FROM msdb.dbo.backupset bs
								WHERE bs.type = 'D'
								AND bs.backup_size &gt;= 50000000000 /* At least 50GB */
								AND DATEDIFF(SECOND, bs.backup_start_date, bs.backup_finish_date) &lt;= 60 /* Backup took less than 60 seconds */
								AND bs.backup_finish_date &gt;= DATEADD(DAY, -14, GETDATE()) /* In the last 2 weeks */
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 4 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  4 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Sysadmins' AS Finding ,
										'http://BrentOzar.com/go/sa' AS URL ,
										( 'Login [' + l.name
										  + '] is a sysadmin - meaning they can do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' ) AS Details
								FROM    master.sys.syslogins l
								WHERE   l.sysadmin = 1
										AND l.name &lt;&gt; SUSER_SNAME(0x01)
										AND l.denylogin = 0
										AND l.name NOT LIKE 'NT SERVICE\%'
										AND l.name &lt;&gt; 'l_certSignSmDetach'; /* Added in SQL 2016 */
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 5 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  5 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Security Admins' AS Finding ,
										'http://BrentOzar.com/go/sa' AS URL ,
										( 'Login [' + l.name
										  + '] is a security admin - meaning they can give themselves permission to do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' ) AS Details
								FROM    master.sys.syslogins l
								WHERE   l.securityadmin = 1
										AND l.name &lt;&gt; SUSER_SNAME(0x01)
										AND l.denylogin = 0;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 104 )
					BEGIN
						INSERT  INTO #BlitzResults
								( [CheckID] ,
								  [Priority] ,
								  [FindingsGroup] ,
								  [Finding] ,
								  [URL] ,
								  [Details]
								)
								SELECT  104 AS [CheckID] ,
										230 AS [Priority] ,
										'Security' AS [FindingsGroup] ,
										'Login Can Control Server' AS [Finding] ,
										'http://BrentOzar.com/go/sa' AS [URL] ,
										'Login [' + pri.[name]
										+ '] has the CONTROL SERVER permission - meaning they can do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' AS [Details]
								FROM    sys.server_principals AS pri
								WHERE   pri.[principal_id] IN (
										SELECT  p.[grantee_principal_id]
										FROM    sys.server_permissions AS p
										WHERE   p.[state] IN ( 'G', 'W' )
												AND p.[class] = 100
												AND p.[type] = 'CL' )
										AND pri.[name] NOT LIKE '##%##'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 6 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  6 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Jobs Owned By Users' AS Finding ,
										'http://BrentOzar.com/go/owners' AS URL ,
										( 'Job [' + j.name + '] is owned by ['
										  + SUSER_SNAME(j.owner_sid)
										  + '] - meaning if their login is disabled or not available due to Active Directory problems, the job will stop working.' ) AS Details
								FROM    msdb.dbo.sysjobs j
								WHERE   j.enabled = 1
										AND SUSER_SNAME(j.owner_sid) &lt;&gt; SUSER_SNAME(0x01);
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 7 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  7 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Stored Procedure Runs at Startup' AS Finding ,
										'http://BrentOzar.com/go/startup' AS URL ,
										( 'Stored procedure [master].['
										  + r.SPECIFIC_SCHEMA + '].['
										  + r.SPECIFIC_NAME
										  + '] runs automatically when SQL Server starts up.  Make sure you know exactly what this stored procedure is doing, because it could pose a security risk.' ) AS Details
								FROM    master.INFORMATION_SCHEMA.ROUTINES r
								WHERE   OBJECTPROPERTY(OBJECT_ID(ROUTINE_NAME),
													   'ExecIsStartup') = 1;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 10 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 10 AS CheckID,
					  100 AS Priority,
					  ''Performance'' AS FindingsGroup,
					  ''Resource Governor Enabled'' AS Finding,
					  ''http://BrentOzar.com/go/rg'' AS URL,
					  (''Resource Governor is enabled.  Queries may be throttled.  Make sure you understand how the Classifier Function is configured.'') AS Details FROM sys.resource_governor_configuration WHERE is_enabled = 1'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 11 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 11 AS CheckID,
					  100 AS Priority,
					  ''Performance'' AS FindingsGroup,
					  ''Server Triggers Enabled'' AS Finding,
					  ''http://BrentOzar.com/go/logontriggers/'' AS URL,
					  (''Server Trigger ['' + [name] ++ ''] is enabled.  Make sure you understand what that trigger is doing - the less work it does, the better.'') AS Details FROM sys.server_triggers WHERE is_disabled = 0 AND is_ms_shipped = 0'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 12 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  12 AS CheckID ,
										[name] AS DatabaseName ,
										10 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Close Enabled' AS Finding ,
										'http://BrentOzar.com/go/autoclose' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-close enabled.  This setting can dramatically decrease performance.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_close_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 13 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  13 AS CheckID ,
										[name] AS DatabaseName ,
										10 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Shrink Enabled' AS Finding ,
										'http://BrentOzar.com/go/autoshrink' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-shrink enabled.  This setting can dramatically decrease performance.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_shrink_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL);
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 14 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							DatabaseName,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 14 AS CheckID,
					  [name] as DatabaseName,
					  50 AS Priority,
					  ''Reliability'' AS FindingsGroup,
					  ''Page Verification Not Optimal'' AS Finding,
					  ''http://BrentOzar.com/go/torn'' AS URL,
					  (''Database ['' + [name] + ''] has '' + [page_verify_option_desc] + '' for page verification.  SQL Server may have a harder time recognizing and recovering from storage corruption.  Consider using CHECKSUM instead.'') COLLATE database_default AS Details
					  FROM sys.databases
					  WHERE page_verify_option &lt; 2
					  AND name &lt;&gt; ''tempdb''
					  and name not in (select distinct DatabaseName from #SkipChecks)'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 15 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  15 AS CheckID ,
										[name] AS DatabaseName ,
										110 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Create Stats Disabled' AS Finding ,
										'http://BrentOzar.com/go/acs' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-create-stats disabled.  SQL Server uses statistics to build better execution plans, and without the ability to automatically create more, performance may suffer.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_create_stats_on = 0
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 16 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  16 AS CheckID ,
										[name] AS DatabaseName ,
										110 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Auto-Update Stats Disabled' AS Finding ,
										'http://BrentOzar.com/go/aus' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-update-stats disabled.  SQL Server uses statistics to build better execution plans, and without the ability to automatically update them, performance may suffer.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_update_stats_on = 0
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 17 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  17 AS CheckID ,
										[name] AS DatabaseName ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Stats Updated Asynchronously' AS Finding ,
										'http://BrentOzar.com/go/asyncstats' AS URL ,
										( 'Database [' + [name]
										  + '] has auto-update-stats-async enabled.  When SQL Server gets a query for a table with out-of-date statistics, it will run the query with the stats it has - while updating stats to make later queries better. The initial run of the query may suffer, though.' ) AS Details
								FROM    sys.databases
								WHERE   is_auto_update_stats_async_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 18 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  18 AS CheckID ,
										[name] AS DatabaseName ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Forced Parameterization On' AS Finding ,
										'http://BrentOzar.com/go/forced' AS URL ,
										( 'Database [' + [name]
										  + '] has forced parameterization enabled.  SQL Server will aggressively reuse query execution plans even if the applications do not parameterize their queries.  This can be a performance booster with some programming languages, or it may use universally bad execution plans when better alternatives are available for certain parameters.' ) AS Details
								FROM    sys.databases
								WHERE   is_parameterization_forced = 1
										AND name NOT IN ( SELECT  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 20 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  20 AS CheckID ,
										[name] AS DatabaseName ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Date Correlation On' AS Finding ,
										'http://BrentOzar.com/go/corr' AS URL ,
										( 'Database [' + [name]
										  + '] has date correlation enabled.  This is not a default setting, and it has some performance overhead.  It tells SQL Server that date fields in two tables are related, and SQL Server maintains statistics showing that relation.' ) AS Details
								FROM    sys.databases
								WHERE   is_date_correlation_on = 1
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 21 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
							(CheckID,
							DatabaseName,
							Priority,
							FindingsGroup,
							Finding,
							URL,
							Details)
					  SELECT 21 AS CheckID,
					  [name] as DatabaseName,
					  200 AS Priority,
					  ''Informational'' AS FindingsGroup,
					  ''Database Encrypted'' AS Finding,
					  ''http://BrentOzar.com/go/tde'' AS URL,
					  (''Database ['' + [name] + ''] has Transparent Data Encryption enabled.  Make absolutely sure you have backed up the certificate and private key, or else you will not be able to restore this database.'') AS Details
					  FROM sys.databases
					  WHERE is_encrypted = 1
					  and name not in (select distinct DatabaseName from #SkipChecks)'
								EXECUTE(@StringToExecute)
							END;
					END

				/*
				Believe it or not, SQL Server doesn't track the default values
				for sp_configure options! We'll make our own list here.
				*/
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'access check cache bucket count', 0, 1001 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'access check cache quota', 0, 1002 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Ad Hoc Distributed Queries', 0, 1003 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity I/O mask', 0, 1004 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity mask', 0, 1005 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity64 mask', 0, 1066 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'affinity64 I/O mask', 0, 1067 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Agent XPs', 0, 1071 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'allow updates', 0, 1007 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'awe enabled', 0, 1008 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'backup checksum default', 0, 1070 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'backup compression default', 0, 1073 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'blocked process threshold', 0, 1009 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'blocked process threshold (s)', 0, 1009 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'c2 audit mode', 0, 1010 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'clr enabled', 0, 1011 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'common criteria compliance enabled', 0, 1074 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'contained database authentication', 0, 1068 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'cost threshold for parallelism', 5, 1012 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'cross db ownership chaining', 0, 1013 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'cursor threshold', -1, 1014 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Database Mail XPs', 0, 1072 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'default full-text language', 1033, 1016 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'default language', 0, 1017 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'default trace enabled', 1, 1018 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'disallow results from triggers', 0, 1019 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'EKM provider enabled', 0, 1075 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'filestream access level', 0, 1076 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'fill factor (%)', 0, 1020 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft crawl bandwidth (max)', 100, 1021 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft crawl bandwidth (min)', 0, 1022 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft notify bandwidth (max)', 100, 1023 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'ft notify bandwidth (min)', 0, 1024 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'index create memory (KB)', 0, 1025 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'in-doubt xact resolution', 0, 1026 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'lightweight pooling', 0, 1027 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'locks', 0, 1028 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max degree of parallelism', 0, 1029 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max full-text crawl range', 4, 1030 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max server memory (MB)', 2147483647, 1031 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max text repl size (B)', 65536, 1032 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'max worker threads', 0, 1033 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'media retention', 0, 1034 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'min memory per query (KB)', 1024, 1035 );
				/* Accepting both 0 and 16 below because both have been seen in the wild as defaults. */
				IF EXISTS ( SELECT  *
							FROM    sys.configurations
							WHERE   name = 'min server memory (MB)'
									AND value_in_use IN ( 0, 16 ) )
					INSERT  INTO #ConfigurationDefaults
							SELECT  'min server memory (MB)' ,
									CAST(value_in_use AS BIGINT), 1036
							FROM    sys.configurations
							WHERE   name = 'min server memory (MB)'
				ELSE
					INSERT  INTO #ConfigurationDefaults
					VALUES  ( 'min server memory (MB)', 0, 1036 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'nested triggers', 1, 1037 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'network packet size (B)', 4096, 1038 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Ole Automation Procedures', 0, 1039 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'open objects', 0, 1040 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'optimize for ad hoc workloads', 0, 1041 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'PH timeout (s)', 60, 1042 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'precompute rank', 0, 1043 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'priority boost', 0, 1044 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'query governor cost limit', 0, 1045 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'query wait (s)', -1, 1046 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'recovery interval (min)', 0, 1047 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote access', 1, 1048 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote admin connections', 0, 1049 );
				/* SQL Server 2012 changes a configuration default */
				IF @@VERSION LIKE '%Microsoft SQL Server 2005%'
					OR @@VERSION LIKE '%Microsoft SQL Server 2008%'
					BEGIN
						INSERT  INTO #ConfigurationDefaults
						VALUES  ( 'remote login timeout (s)', 20, 1069 );
					END
				ELSE
					BEGIN
						INSERT  INTO #ConfigurationDefaults
						VALUES  ( 'remote login timeout (s)', 10, 1069 );
					END
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote proc trans', 0, 1050 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'remote query timeout (s)', 600, 1051 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Replication XPs', 0, 1052 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'RPC parameter data validation', 0, 1053 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'scan for startup procs', 0, 1054 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'server trigger recursion', 1, 1055 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'set working set size', 0, 1056 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'show advanced options', 0, 1057 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'SMO and DMO XPs', 1, 1058 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'SQL Mail XPs', 0, 1059 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'transform noise words', 0, 1060 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'two digit year cutoff', 2049, 1061 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'user connections', 0, 1062 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'user options', 0, 1063 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'Web Assistant Procedures', 0, 1064 );
				INSERT  INTO #ConfigurationDefaults
				VALUES  ( 'xp_cmdshell', 0, 1065 );


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 22 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  cd.CheckID ,
										200 AS Priority ,
										'Non-Default Server Config' AS FindingsGroup ,
										cr.name AS Finding ,
										'http://BrentOzar.com/go/conf' AS URL ,
										( 'This sp_configure option has been changed.  Its default value is '
										  + COALESCE(CAST(cd.[DefaultValue] AS VARCHAR(100)),
													 '(unknown)')
										  + ' and it has been set to '
										  + CAST(cr.value_in_use AS VARCHAR(100))
										  + '.' ) AS Details
								FROM    sys.configurations cr
										INNER JOIN #ConfigurationDefaults cd ON cd.name = cr.name
										LEFT OUTER JOIN #ConfigurationDefaults cdUsed ON cdUsed.name = cr.name
																  AND cdUsed.DefaultValue = cr.value_in_use
								WHERE   cdUsed.name IS NULL;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 190 )
					BEGIN
						SELECT @MinServerMemory = CAST(value_in_use as BIGINT) FROM sys.configurations WHERE name = 'min server memory (MB)'
						SELECT @MaxServerMemory = CAST(value_in_use as BIGINT) FROM sys.configurations WHERE name = 'max server memory (MB)'
						
						IF (@MinServerMemory = @MaxServerMemory)
						BEGIN
						INSERT INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								VALUES  
									(	190,
										200,
										'Performance',
										'Non-Dynamic Memory',
										'http://BrentOzar.com/go/memory',
										'Minimum Server Memory setting is the same as the Maximum (both set to ' + CAST(@MinServerMemory AS NVARCHAR(50)) + '). This will not allow dynamic memory. Please revise memory settings'
									)
						END
					END
					
					IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 188 )
					BEGIN

						/* Let's set variables so that our query is still SARGable */
						SET @Processors = (SELECT cpu_count FROM sys.dm_os_sys_info)
						SET @NUMANodes = (SELECT COUNT(1)
											FROM sys.dm_os_performance_counters pc
											WHERE pc.object_name LIKE '%Buffer Node%'
												AND counter_name = 'Page life expectancy')
						/* If Cost Threshold for Parallelism is default then flag as a potential issue */
						/* If MAXDOP is default and processors &gt; 8 or NUMA nodes &gt; 1 then flag as potential issue */
						INSERT INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  188 AS CheckID ,
										200 AS Priority ,
										'Performance' AS FindingsGroup ,
										cr.name AS Finding ,
										'http://BrentOzar.com/go/cxpacket' AS URL ,
										( 'Set to ' + CAST(cr.value_in_use AS NVARCHAR(50)) + ', its default value. Changing this sp_configure setting may reduce CXPACKET waits.')
								FROM    sys.configurations cr
										INNER JOIN #ConfigurationDefaults cd ON cd.name = cr.name
											AND cr.value_in_use = cd.DefaultValue
								WHERE   cr.name = 'cost threshold for parallelism'
									OR (cr.name = 'max degree of parallelism' AND (@NUMANodes &gt; 1 OR @Processors &gt; 8));
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 24 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										24 AS CheckID ,
										DB_NAME(database_id) AS DatabaseName ,
										170 AS Priority ,
										'File Configuration' AS FindingsGroup ,
										'System Database on C Drive' AS Finding ,
										'http://BrentOzar.com/go/cdrive' AS URL ,
										( 'The ' + DB_NAME(database_id)
										  + ' database has a file on the C drive.  Putting system databases on the C drive runs the risk of crashing the server when it runs out of space.' ) AS Details
								FROM    sys.master_files
								WHERE   UPPER(LEFT(physical_name, 1)) = 'C'
										AND DB_NAME(database_id) IN ( 'master',
																  'model', 'msdb' );
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 25 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1
										25 AS CheckID ,
										'tempdb' ,
										20 AS Priority ,
										'File Configuration' AS FindingsGroup ,
										'TempDB on C Drive' AS Finding ,
										'http://BrentOzar.com/go/cdrive' AS URL ,
										CASE WHEN growth &gt; 0
											 THEN ( 'The tempdb database has files on the C drive.  TempDB frequently grows unpredictably, putting your server at risk of running out of C drive space and crashing hard.  C is also often much slower than other drives, so performance may be suffering.' )
											 ELSE ( 'The tempdb database has files on the C drive.  TempDB is not set to Autogrow, hopefully it is big enough.  C is also often much slower than other drives, so performance may be suffering.' )
										END AS Details
								FROM    sys.master_files
								WHERE   UPPER(LEFT(physical_name, 1)) = 'C'
										AND DB_NAME(database_id) = 'tempdb';
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 26 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										26 AS CheckID ,
										DB_NAME(database_id) AS DatabaseName ,
										20 AS Priority ,
										'Reliability' AS FindingsGroup ,
										'User Databases on C Drive' AS Finding ,
										'http://BrentOzar.com/go/cdrive' AS URL ,
										( 'The ' + DB_NAME(database_id)
										  + ' database has a file on the C drive.  Putting databases on the C drive runs the risk of crashing the server when it runs out of space.' ) AS Details
								FROM    sys.master_files
								WHERE   UPPER(LEFT(physical_name, 1)) = 'C'
										AND DB_NAME(database_id) NOT IN ( 'master',
																  'model', 'msdb',
																  'tempdb' )
										AND DB_NAME(database_id) NOT IN (
										SELECT DISTINCT
												DatabaseName
										FROM    #SkipChecks )
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 27 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  27 AS CheckID ,
										'master' AS DatabaseName ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Tables in the Master Database' AS Finding ,
										'http://BrentOzar.com/go/mastuser' AS URL ,
										( 'The ' + name
										  + ' table in the master database was created by end users on '
										  + CAST(create_date AS VARCHAR(20))
										  + '. Tables in the master database may not be restored in the event of a disaster.' ) AS Details
								FROM    master.sys.tables
								WHERE   is_ms_shipped = 0;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 28 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  28 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Tables in the MSDB Database' AS Finding ,
										'http://BrentOzar.com/go/msdbuser' AS URL ,
										( 'The ' + name
										  + ' table in the msdb database was created by end users on '
										  + CAST(create_date AS VARCHAR(20))
										  + '. Tables in the msdb database may not be restored in the event of a disaster.' ) AS Details
								FROM    msdb.sys.tables
								WHERE   is_ms_shipped = 0 AND name NOT LIKE '%DTA_%';
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 29 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  29 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Tables in the Model Database' AS Finding ,
										'http://BrentOzar.com/go/model' AS URL ,
										( 'The ' + name
										  + ' table in the model database was created by end users on '
										  + CAST(create_date AS VARCHAR(20))
										  + '. Tables in the model database are automatically copied into all new databases.' ) AS Details
								FROM    model.sys.tables
								WHERE   is_ms_shipped = 0;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 30 )
					BEGIN
						IF ( SELECT COUNT(*)
							 FROM   msdb.dbo.sysalerts
							 WHERE  severity BETWEEN 19 AND 25
						   ) &lt; 7
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  30 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'Not All Alerts Configured' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'Not all SQL Server Agent alerts have been configured.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;
					END



				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 59 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    msdb.dbo.sysalerts
									WHERE   enabled = 1
											AND COALESCE(has_notification, 0) = 0
											AND (job_id IS NULL OR job_id = 0x))
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  59 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'Alerts Configured without Follow Up' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'SQL Server Agent alerts have been configured but they either do not notify anyone or else they do not take any action.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 96 )
					BEGIN
						IF NOT EXISTS ( SELECT  *
										FROM    msdb.dbo.sysalerts
										WHERE   message_id IN ( 823, 824, 825 ) )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  96 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'No Alerts for Corruption' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'SQL Server Agent alerts do not exist for errors 823, 824, and 825.  These three errors can give you notification about early hardware failure. Enabling them can prevent you a lot of heartbreak.' ) AS Details;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 61 )
					BEGIN
						IF NOT EXISTS ( SELECT  *
										FROM    msdb.dbo.sysalerts
										WHERE   severity BETWEEN 19 AND 25 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  61 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'No Alerts for Sev 19-25' AS Finding ,
											'http://BrentOzar.com/go/alert' AS URL ,
											( 'SQL Server Agent alerts do not exist for severity levels 19 through 25.  These are some very severe SQL Server errors. Knowing that these are happening may let you recover from errors faster.' ) AS Details;
					END

		--check for disabled alerts
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 98 )
					BEGIN
						IF EXISTS ( SELECT  name
									FROM    msdb.dbo.sysalerts
									WHERE   enabled = 0 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  98 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'Alerts Disabled' AS Finding ,
											'http://www.BrentOzar.com/go/alerts/' AS URL ,
											( 'The following Alert is disabled, please review and enable if desired: '
											  + name ) AS Details
									FROM    msdb.dbo.sysalerts
									WHERE   enabled = 0
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 31 )
					BEGIN
						IF NOT EXISTS ( SELECT  *
										FROM    msdb.dbo.sysoperators
										WHERE   enabled = 1 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  31 AS CheckID ,
											200 AS Priority ,
											'Monitoring' AS FindingsGroup ,
											'No Operators Configured/Enabled' AS Finding ,
											'http://BrentOzar.com/go/op' AS URL ,
											( 'No SQL Server Agent operators (emails) have been configured.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;
					END



				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 34 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    sys.all_objects
									WHERE   name = 'dm_db_mirroring_auto_page_repair' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT
		  34 AS CheckID ,
		  db.name ,
		  1 AS Priority ,
		  ''Corruption'' AS FindingsGroup ,
		  ''Database Corruption Detected'' AS Finding ,
		  ''http://BrentOzar.com/go/repair'' AS URL ,
		  ( ''Database mirroring has automatically repaired at least one corrupt page in the last 30 days. For more information, query the DMV sys.dm_db_mirroring_auto_page_repair.'' ) AS Details
		  FROM (SELECT rp2.database_id, rp2.modification_time 
			FROM sys.dm_db_mirroring_auto_page_repair rp2 
			WHERE rp2.[database_id] not in (
			SELECT db2.[database_id] 
			FROM sys.databases as db2 
			WHERE db2.[state] = 1
			) ) as rp 
		  INNER JOIN master.sys.databases db ON rp.database_id = db.database_id
		  WHERE   rp.modification_time &gt;= DATEADD(dd, -30, GETDATE()) ;'
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 89 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    sys.all_objects
									WHERE   name = 'dm_hadr_auto_page_repair' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT
		  89 AS CheckID ,
		  db.name ,
		  1 AS Priority ,
		  ''Corruption'' AS FindingsGroup ,
		  ''Database Corruption Detected'' AS Finding ,
		  ''http://BrentOzar.com/go/repair'' AS URL ,
		  ( ''AlwaysOn has automatically repaired at least one corrupt page in the last 30 days. For more information, query the DMV sys.dm_hadr_auto_page_repair.'' ) AS Details
		  FROM    sys.dm_hadr_auto_page_repair rp
		  INNER JOIN master.sys.databases db ON rp.database_id = db.database_id
		  WHERE   rp.modification_time &gt;= DATEADD(dd, -30, GETDATE()) ;'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 90 )
					BEGIN
						IF EXISTS ( SELECT  *
									FROM    msdb.sys.all_objects
									WHERE   name = 'suspect_pages' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT
		  90 AS CheckID ,
		  db.name ,
		  1 AS Priority ,
		  ''Corruption'' AS FindingsGroup ,
		  ''Database Corruption Detected'' AS Finding ,
		  ''http://BrentOzar.com/go/repair'' AS URL ,
		  ( ''SQL Server has detected at least one corrupt page in the last 30 days. For more information, query the system table msdb.dbo.suspect_pages.'' ) AS Details
		  FROM    msdb.dbo.suspect_pages sp
		  INNER JOIN master.sys.databases db ON sp.database_id = db.database_id
		  WHERE   sp.last_update_date &gt;= DATEADD(dd, -30, GETDATE()) ;'
								EXECUTE(@StringToExecute)
							END;
					END


				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 36 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										36 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Slow Storage Reads on Drive '
										+ UPPER(LEFT(mf.physical_name, 1)) AS Finding ,
										'http://BrentOzar.com/go/slow' AS URL ,
										'Reads are averaging longer than 200ms for at least one database on this drive.  For specific database file speeds, run the query from the information link.' AS Details
								FROM    sys.dm_io_virtual_file_stats(NULL, NULL)
										AS fs
										INNER JOIN sys.master_files AS mf ON fs.database_id = mf.database_id
																  AND fs.[file_id] = mf.[file_id]
								WHERE   ( io_stall_read_ms / ( 1.0 + num_of_reads ) ) &gt; 200
								AND num_of_reads &gt; 100000;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 37 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										37 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Slow Storage Writes on Drive '
										+ UPPER(LEFT(mf.physical_name, 1)) AS Finding ,
										'http://BrentOzar.com/go/slow' AS URL ,
										'Writes are averaging longer than 100ms for at least one database on this drive.  For specific database file speeds, run the query from the information link.' AS Details
								FROM    sys.dm_io_virtual_file_stats(NULL, NULL)
										AS fs
										INNER JOIN sys.master_files AS mf ON fs.database_id = mf.database_id
																  AND fs.[file_id] = mf.[file_id]
								WHERE   ( io_stall_write_ms / ( 1.0
																+ num_of_writes ) ) &gt; 100
																AND num_of_writes &gt; 100000;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 40 )
					BEGIN
						IF ( SELECT COUNT(*)
							 FROM   tempdb.sys.database_files
							 WHERE  type_desc = 'ROWS'
						   ) = 1
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  DatabaseName ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
								VALUES  ( 40 ,
										  'tempdb' ,
										  170 ,
										  'File Configuration' ,
										  'TempDB Only Has 1 Data File' ,
										  'http://BrentOzar.com/go/tempdb' ,
										  'TempDB is only configured with one data file.  More data files are usually required to alleviate SGAM contention.'
										);
							END;
					END

						IF ( SELECT COUNT (distinct [size])
							FROM   tempdb.sys.database_files
							WHERE  type_desc = 'ROWS'
							) &lt;&gt; 1
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  DatabaseName ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
								VALUES  ( 183 ,
										  'tempdb' ,
										  170 ,
										  'File Configuration' ,
										  'TempDB Unevenly Sized Data Files' ,
										  'http://BrentOzar.com/go/tempdb' ,
										  'TempDB data files are not configured with the same size.  Unevenly sized tempdb data files will result in unevenly sized workloads.'
										);
							END;

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 44 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  44 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Queries Forcing Order Hints' AS Finding ,
										'http://BrentOzar.com/go/hints' AS URL ,
										CAST(occurrence AS VARCHAR(10))
										+ ' instances of order hinting have been recorded since restart.  This means queries are bossing the SQL Server optimizer around, and if they don''t know what they''re doing, this can cause more harm than good.  This can also explain why DBA tuning efforts aren''t working.' AS Details
								FROM    sys.dm_exec_query_optimizer_info
								WHERE   counter = 'order hint'
										AND occurrence &gt; 1000
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 45 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  45 AS CheckID ,
										150 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Queries Forcing Join Hints' AS Finding ,
										'http://BrentOzar.com/go/hints' AS URL ,
										CAST(occurrence AS VARCHAR(10))
										+ ' instances of join hinting have been recorded since restart.  This means queries are bossing the SQL Server optimizer around, and if they don''t know what they''re doing, this can cause more harm than good.  This can also explain why DBA tuning efforts aren''t working.' AS Details
								FROM    sys.dm_exec_query_optimizer_info
								WHERE   counter = 'join hint'
										AND occurrence &gt; 1000
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 49 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT DISTINCT
										49 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Linked Server Configured' AS Finding ,
										'http://BrentOzar.com/go/link' AS URL ,
										+CASE WHEN l.remote_name = 'sa'
											  THEN s.data_source
												   + ' is configured as a linked server. Check its security configuration as it is connecting with sa, because any user who queries it will get admin-level permissions.'
											  ELSE s.data_source
												   + ' is configured as a linked server. Check its security configuration to make sure it isn''t connecting with SA or some other bone-headed administrative login, because any user who queries it might get admin-level permissions.'
										 END AS Details
								FROM    sys.servers s
										INNER JOIN sys.linked_logins l ON s.server_id = l.server_id
								WHERE   s.is_linked = 1
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 50 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
		  SELECT  50 AS CheckID ,
		  100 AS Priority ,
		  ''Performance'' AS FindingsGroup ,
		  ''Max Memory Set Too High'' AS Finding ,
		  ''http://BrentOzar.com/go/max'' AS URL ,
		  ''SQL Server max memory is set to ''
			+ CAST(c.value_in_use AS VARCHAR(20))
			+ '' megabytes, but the server only has ''
			+ CAST(( CAST(m.total_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20))
			+ '' megabytes.  SQL Server may drain the system dry of memory, and under certain conditions, this can cause Windows to swap to disk.'' AS Details
		  FROM    sys.dm_os_sys_memory m
		  INNER JOIN sys.configurations c ON c.name = ''max server memory (MB)''
		  WHERE   CAST(m.total_physical_memory_kb AS BIGINT) &lt; ( CAST(c.value_in_use AS BIGINT) * 1024 )'
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 51 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
		  SELECT  51 AS CheckID ,
		  1 AS Priority ,
		  ''Performance'' AS FindingsGroup ,
		  ''Memory Dangerously Low'' AS Finding ,
		  ''http://BrentOzar.com/go/max'' AS URL ,
		  ''The server has '' + CAST(( CAST(m.total_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20)) + '' megabytes of physical memory, but only '' + CAST(( CAST(m.available_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20))
			+ '' megabytes are available.  As the server runs out of memory, there is danger of swapping to disk, which will kill performance.'' AS Details
		  FROM    sys.dm_os_sys_memory m
		  WHERE   CAST(m.available_physical_memory_kb AS BIGINT) &lt; 262144'
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 159 )
					BEGIN
						IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
		  SELECT DISTINCT 159 AS CheckID ,
		  1 AS Priority ,
		  ''Performance'' AS FindingsGroup ,
		  ''Memory Dangerously Low in NUMA Nodes'' AS Finding ,
		  ''http://BrentOzar.com/go/max'' AS URL ,
		  ''At least one NUMA node is reporting THREAD_RESOURCES_LOW in sys.dm_os_nodes and can no longer create threads.'' AS Details
		  FROM    sys.dm_os_nodes m
		  WHERE   node_state_desc LIKE ''%THREAD_RESOURCES_LOW%'''
								EXECUTE(@StringToExecute)
							END;
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 53 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1
										53 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Cluster Node' AS Finding ,
										'http://BrentOzar.com/go/node' AS URL ,
										'This is a node in a cluster.' AS Details
								FROM    sys.dm_os_cluster_nodes
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 55 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  55 AS CheckID ,
										[name] AS DatabaseName ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'Database Owner &lt;&gt; SA' AS Finding ,
										'http://BrentOzar.com/go/owndb' AS URL ,
										( 'Database name: ' + [name] + '   '
										  + 'Owner name: ' + SUSER_SNAME(owner_sid) ) AS Details
								FROM    sys.databases
								WHERE   SUSER_SNAME(owner_sid) &lt;&gt; SUSER_SNAME(0x01)
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL);
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 57 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  57 AS CheckID ,
										230 AS Priority ,
										'Security' AS FindingsGroup ,
										'SQL Agent Job Runs at Startup' AS Finding ,
										'http://BrentOzar.com/go/startup' AS URL ,
										( 'Job [' + j.name
										  + '] runs automatically when SQL Server Agent starts up.  Make sure you know exactly what this job is doing, because it could pose a security risk.' ) AS Details
								FROM    msdb.dbo.sysschedules sched
										JOIN msdb.dbo.sysjobschedules jsched ON sched.schedule_id = jsched.schedule_id
										JOIN msdb.dbo.sysjobs j ON jsched.job_id = j.job_id
								WHERE   sched.freq_type = 64
								        AND sched.enabled = 1;
					END



				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 97 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  97 AS CheckID ,
										100 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Unusual SQL Server Edition' AS Finding ,
										'http://BrentOzar.com/go/workgroup' AS URL ,
										( 'This server is using '
										  + CAST(SERVERPROPERTY('edition') AS VARCHAR(100))
										  + ', which is capped at low amounts of CPU and memory.' ) AS Details
								WHERE   CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Enterprise%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Data Center%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Developer%'
										AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Business Intelligence%'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 154 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  154 AS CheckID ,
										10 AS Priority ,
										'Performance' AS FindingsGroup ,
										'32-bit SQL Server Installed' AS Finding ,
										'http://BrentOzar.com/go/32bit' AS URL ,
										( 'This server uses the 32-bit x86 binaries for SQL Server instead of the 64-bit x64 binaries. The amount of memory available for query workspace and execution plans is heavily limited.' ) AS Details
								WHERE   CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%64%'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 62 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  62 AS CheckID ,
										[name] AS DatabaseName ,
										200 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Old Compatibility Level' AS Finding ,
										'http://BrentOzar.com/go/compatlevel' AS URL ,
										( 'Database ' + [name]
										  + ' is compatibility level '
										  + CAST(compatibility_level AS VARCHAR(20))
										  + ', which may cause unwanted results when trying to run queries that have newer T-SQL features.' ) AS Details
								FROM    sys.databases
								WHERE   name NOT IN ( SELECT DISTINCT
																DatabaseName
													  FROM      #SkipChecks 
													  WHERE CheckID IS NULL)
										AND compatibility_level &lt;= 90
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 94 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  94 AS CheckID ,
										200 AS [Priority] ,
										'Monitoring' AS FindingsGroup ,
										'Agent Jobs Without Failure Emails' AS Finding ,
										'http://BrentOzar.com/go/alerts' AS URL ,
										'The job ' + [name]
										+ ' has not been set up to notify an operator if it fails.' AS Details
								FROM    msdb.[dbo].[sysjobs] j
										INNER JOIN ( SELECT DISTINCT
															[job_id]
													 FROM   [msdb].[dbo].[sysjobschedules]
													 WHERE  next_run_date &gt; 0
												   ) s ON j.job_id = s.job_id
								WHERE   j.enabled = 1
										AND j.notify_email_operator_id = 0
										AND j.notify_netsend_operator_id = 0
										AND j.notify_page_operator_id = 0
										AND j.category_id &lt;&gt; 100 /* Exclude SSRS category */
					END


				IF EXISTS ( SELECT  1
							FROM    sys.configurations
							WHERE   name = 'remote admin connections'
									AND value_in_use = 0 )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 100 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  100 AS CheckID ,
										50 AS Priority ,
										'Reliability' AS FindingGroup ,
										'Remote DAC Disabled' AS Finding ,
										'http://BrentOzar.com/go/dac' AS URL ,
										'Remote access to the Dedicated Admin Connection (DAC) is not enabled. The DAC can make remote troubleshooting much easier when SQL Server is unresponsive.'
					END


				IF EXISTS ( SELECT  *
							FROM    sys.dm_os_schedulers
							WHERE   is_online = 0 )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 101 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  101 AS CheckID ,
										50 AS Priority ,
										'Performance' AS FindingGroup ,
										'CPU Schedulers Offline' AS Finding ,
										'http://BrentOzar.com/go/schedulers' AS URL ,
										'Some CPU cores are not accessible to SQL Server due to affinity masking or licensing problems.'
					END


					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 110 )
								AND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'dm_os_memory_nodes')
						BEGIN
							SET @StringToExecute = 'IF EXISTS (SELECT  *
												FROM sys.dm_os_nodes n
												INNER JOIN sys.dm_os_memory_nodes m ON n.memory_node_id = m.memory_node_id
												WHERE n.node_state_desc = ''OFFLINE'')
												INSERT  INTO #BlitzResults
														( CheckID ,
														  Priority ,
														  FindingsGroup ,
														  Finding ,
														  URL ,
														  Details
														)
														SELECT  110 AS CheckID ,
																50 AS Priority ,
																''Performance'' AS FindingGroup ,
																''Memory Nodes Offline'' AS Finding ,
																''http://BrentOzar.com/go/schedulers'' AS URL ,
																''Due to affinity masking or licensing problems, some of the memory may not be available.''';
									EXECUTE(@StringToExecute);
						END


				IF EXISTS ( SELECT  *
							FROM    sys.databases
							WHERE   state &gt; 1 )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 102 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  102 AS CheckID ,
										[name] ,
										20 AS Priority ,
										'Reliability' AS FindingGroup ,
										'Unusual Database State: ' + [state_desc] AS Finding ,
										'http://BrentOzar.com/go/repair' AS URL ,
										'This database may not be online.'
								FROM    sys.databases
								WHERE   state &gt; 1
					END

				IF EXISTS ( SELECT  *
							FROM    master.sys.extended_procedures )
					AND NOT EXISTS ( SELECT 1
									 FROM   #SkipChecks
									 WHERE  DatabaseName IS NULL AND CheckID = 105 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  105 AS CheckID ,
										'master' ,
										200 AS Priority ,
										'Reliability' AS FindingGroup ,
										'Extended Stored Procedures in Master' AS Finding ,
										'http://BrentOzar.com/go/clr' AS URL ,
										'The [' + name
										+ '] extended stored procedure is in the master database. CLR may be in use, and the master database now needs to be part of your backup/recovery planning.'
								FROM    master.sys.extended_procedures
					END



					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 107 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  107 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: THREADPOOL'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type = 'THREADPOOL'
									GROUP BY wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END

					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 108 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  108 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: RESOURCE_SEMAPHORE'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type = 'RESOURCE_SEMAPHORE'
									GROUP BY wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END


					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 109 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  109 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: RESOURCE_SEMAPHORE_QUERY_COMPILE'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type = 'RESOURCE_SEMAPHORE_QUERY_COMPILE'
									GROUP BY wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END


					IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 121 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  121 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: Serializable Locking'  AS Finding ,
											'http://BrentOzar.com/go/serializable' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of LCK_M_R% waits have been recorded. This wait often indicates killer performance problems.'
									FROM sys.[dm_os_wait_stats]
									WHERE wait_type IN ('LCK_M_RS_S', 'LCK_M_RS_U', 'LCK_M_RIn_NL','LCK_M_RIn_S', 'LCK_M_RIn_U','LCK_M_RIn_X', 'LCK_M_RX_S', 'LCK_M_RX_U','LCK_M_RX_X')
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000
						END




					IF @ProductVersionMajor &gt;= 11 AND NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 162 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  162 AS CheckID ,
											50 AS Priority ,
											'Performance' AS FindingGroup ,
											'Poison Wait Detected: CMEMTHREAD &amp; NUMA'  AS Finding ,
											'http://BrentOzar.com/go/poison' AS URL ,
											CONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. In servers with over 8 cores per NUMA node, when CMEMTHREAD waits are a bottleneck, trace flag 8048 may be needed.'
									FROM sys.dm_os_nodes n 
									INNER JOIN sys.[dm_os_wait_stats] w ON w.wait_type = 'CMEMTHREAD'
									WHERE n.node_id = 0 AND n.online_scheduler_count &gt;= 8
									GROUP BY w.wait_type
								    HAVING SUM([wait_time_ms]) &gt; (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')
									AND SUM([wait_time_ms]) &gt; 60000;
						END




						IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 111 )
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  DatabaseName ,
									  URL ,
									  Details
									)
									SELECT  111 AS CheckID ,
											50 AS Priority ,
											'Reliability' AS FindingGroup ,
											'Possibly Broken Log Shipping'  AS Finding ,
											d.[name] ,
											'http://BrentOzar.com/go/shipping' AS URL ,
											d.[name] + ' is in a restoring state, but has not had a backup applied in the last two days. This is a possible indication of a broken transaction log shipping setup.'
											FROM [master].sys.databases d
											INNER JOIN [master].sys.database_mirroring dm ON d.database_id = dm.database_id
												AND dm.mirroring_role IS NULL
											WHERE ( d.[state] = 1
											OR (d.[state] = 0 AND d.[is_in_standby] = 1) )
											AND NOT EXISTS(SELECT * FROM msdb.dbo.restorehistory rh
											INNER JOIN msdb.dbo.backupset bs ON rh.backup_set_id = bs.backup_set_id
											WHERE d.[name] COLLATE SQL_Latin1_General_CP1_CI_AS = rh.destination_database_name COLLATE SQL_Latin1_General_CP1_CI_AS
											AND rh.restore_date &gt;= DATEADD(dd, -2, GETDATE()))

						END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 112 )
									AND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'change_tracking_databases')
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
							  SELECT 112 AS CheckID,
							  100 AS Priority,
							  ''Performance'' AS FindingsGroup,
							  ''Change Tracking Enabled'' AS Finding,
							  ''http://BrentOzar.com/go/tracking'' AS URL,
							  ( d.[name] + '' has change tracking enabled. This is not a default setting, and it has some performance overhead. It keeps track of changes to rows in tables that have change tracking turned on.'' ) AS Details FROM sys.change_tracking_databases AS ctd INNER JOIN sys.databases AS d ON ctd.database_id = d.database_id';
										EXECUTE(@StringToExecute);
							END


						IF NOT EXISTS ( SELECT 1
										 FROM   #SkipChecks
										 WHERE  DatabaseName IS NULL AND CheckID = 116 )
									AND EXISTS (SELECT * FROM msdb.sys.all_columns WHERE name = 'compressed_backup_size')
						BEGIN
							SET @StringToExecute = 'INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  116 AS CheckID ,
											200 AS Priority ,
											''Informational'' AS FindingGroup ,
											''Backup Compression Default Off''  AS Finding ,
											''http://BrentOzar.com/go/backup'' AS URL ,
											''Uncompressed full backups have happened recently, and backup compression is not turned on at the server level. Backup compression is included with SQL Server 2008R2 &amp; newer, even in Standard Edition. We recommend turning backup compression on by default so that ad-hoc backups will get compressed.''
											FROM sys.configurations
											WHERE configuration_id = 1579 AND CAST(value_in_use AS INT) = 0
                                            AND EXISTS (SELECT * FROM msdb.dbo.backupset WHERE backup_size = compressed_backup_size AND type = ''D'' AND backup_finish_date &gt;= DATEADD(DD, -14, GETDATE()));'
										EXECUTE(@StringToExecute);
						END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 117 )
									AND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'dm_exec_query_resource_semaphores')
							BEGIN
								SET @StringToExecute = 'IF 0 &lt; (SELECT SUM([forced_grant_count]) FROM sys.dm_exec_query_resource_semaphores WHERE [forced_grant_count] IS NOT NULL)
								INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
							  SELECT 117 AS CheckID,
							  100 AS Priority,
							  ''Performance'' AS FindingsGroup,
							  ''Memory Pressure Affecting Queries'' AS Finding,
							  ''http://BrentOzar.com/go/grants'' AS URL,
							  CAST(SUM(forced_grant_count) AS NVARCHAR(100)) + '' forced grants reported in the DMV sys.dm_exec_query_resource_semaphores, indicating memory pressure has affected query runtimes.''
							  FROM sys.dm_exec_query_resource_semaphores WHERE [forced_grant_count] IS NOT NULL;'
										EXECUTE(@StringToExecute);
							END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 124 )
							BEGIN
								INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
								SELECT 124, 150, 'Performance', 'Deadlocks Happening Daily', 'http://BrentOzar.com/go/deadlocks',
									CAST(p.cntr_value AS NVARCHAR(100)) + ' deadlocks have been recorded since startup.' AS Details
								FROM sys.dm_os_performance_counters p
									INNER JOIN sys.databases d ON d.name = 'tempdb'
								WHERE RTRIM(p.counter_name) = 'Number of Deadlocks/sec'
									AND RTRIM(p.instance_name) = '_Total'
									AND p.cntr_value &gt; 0
									AND (1.0 * p.cntr_value / NULLIF(datediff(DD,create_date,CURRENT_TIMESTAMP),0)) &gt; 10;
							END


						IF DATEADD(mi, -15, GETDATE()) &lt; (SELECT TOP 1 creation_time FROM sys.dm_exec_query_stats ORDER BY creation_time)
						BEGIN
							INSERT INTO #BlitzResults
								(CheckID,
								Priority,
								FindingsGroup,
								Finding,
								URL,
								Details)
							SELECT TOP 1 125, 10, 'Performance', 'Plan Cache Erased Recently', 'http://BrentOzar.com/askbrent/plan-cache-erased-recently/',
								'The oldest query in the plan cache was created at ' + CAST(creation_time AS NVARCHAR(50)) + '. Someone ran DBCC FREEPROCCACHE, restarted SQL Server, or it is under horrific memory pressure.'
							FROM sys.dm_exec_query_stats WITH (NOLOCK)
							ORDER BY creation_time	
						END;

						IF EXISTS (SELECT * FROM sys.configurations WHERE name = 'priority boost' AND (value = 1 OR value_in_use = 1))
						BEGIN
							INSERT INTO #BlitzResults
								(CheckID,
								Priority,
								FindingsGroup,
								Finding,
								URL,
								Details)
							VALUES(126, 5, 'Reliability', 'Priority Boost Enabled', 'http://BrentOzar.com/go/priorityboost/',
								'Priority Boost sounds awesome, but it can actually cause your SQL Server to crash.')
						END;

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 128 )
							BEGIN

							IF (@ProductVersionMajor = 12 AND @ProductVersionMinor &lt; 2000) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor &lt; 3000) OR
							   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor &lt; 6000) OR
							   (@ProductVersionMajor = 10 AND @ProductVersionMinor &lt; 6000) OR
							   (@ProductVersionMajor = 9 /*AND @ProductVersionMinor &lt;= 5000*/)
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(128, 20, 'Reliability', 'Unsupported Build of SQL Server', 'http://BrentOzar.com/go/unsupported',
										'Version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + 
										CASE WHEN @ProductVersionMajor &gt; 9 THEN
										CAST(@ProductVersionMinor AS VARCHAR(100)) + ' is no longer supported by Microsoft. You need to apply a service pack.'
										ELSE ' is no longer support by Microsoft. You should be making plans to upgrade to a modern version of SQL Server.' END);
								END;

							END;
							
						/* Reliability - Dangerous Build of SQL Server (Corruption) */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 129 )
							BEGIN
							IF (@ProductVersionMajor = 11 AND @ProductVersionMinor &gt;= 3000 AND @ProductVersionMinor &lt;= 3436) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor = 5058) OR
							   (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 2000 AND @ProductVersionMinor &lt;= 2342)
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(129, 20, 'Reliability', 'Dangerous Build of SQL Server (Corruption)', 'http://sqlperformance.com/2014/06/sql-indexes/hotfix-sql-2012-rebuilds',
										'There are dangerous known bugs with version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + CAST(@ProductVersionMinor AS VARCHAR(100)) + '. Check the URL for details and apply the right service pack or hotfix.');
								END;

							END;

						/* Reliability - Dangerous Build of SQL Server (Security) */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 157 )
							BEGIN
							IF (@ProductVersionMajor = 10 AND @ProductVersionMinor &gt;= 5500 AND @ProductVersionMinor &lt;= 5512) OR
							   (@ProductVersionMajor = 10 AND @ProductVersionMinor &gt;= 5750 AND @ProductVersionMinor &lt;= 5867) OR
							   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor &gt;= 4000 AND @ProductVersionMinor &lt;= 4017) OR
							   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor &gt;= 4251 AND @ProductVersionMinor &lt;= 4319) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor &gt;= 3000 AND @ProductVersionMinor &lt;= 3129) OR
							   (@ProductVersionMajor = 11 AND @ProductVersionMinor &gt;= 3300 AND @ProductVersionMinor &lt;= 3447) OR
							   (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 2000 AND @ProductVersionMinor &lt;= 2253) OR
							   (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 2300 AND @ProductVersionMinor &lt;= 2370)
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(157, 20, 'Reliability', 'Dangerous Build of SQL Server (Security)', 'https://technet.microsoft.com/en-us/library/security/MS14-044',
										'There are dangerous known bugs with version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + CAST(@ProductVersionMinor AS VARCHAR(100)) + '. Check the URL for details and apply the right service pack or hotfix.');
								END;

							END;
						
						/* Check if SQL 2016 Standard Edition but not SP1 */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 189 )
							BEGIN
							IF (@ProductVersionMajor = 13 AND @ProductVersionMinor &lt; 4001 AND @@VERSION LIKE '%Standard Edition%') 
								BEGIN
								INSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)
									VALUES(189, 100, 'Features', 'Missing Features', 'https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/',
										'SQL 2016 Standard Edition is being used but not Service Pack 1. Check the URL for a list of Enterprise Features that are included in Standard Edition as of SP1.');
								END;

							END;						

                        /* Performance - High Memory Use for In-Memory OLTP (Hekaton) */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 145 )
	                        AND EXISTS ( SELECT *
					                        FROM   sys.all_objects o
					                        WHERE  o.name = 'dm_db_xtp_table_memory_stats' )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT 145 AS CheckID,
			                        10 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''High Memory Use for In-Memory OLTP (Hekaton)'' AS Finding,
			                        ''http://BrentOzar.com/go/hekaton'' AS URL,
			                        CAST(CAST((SUM(mem.pages_kb / 1024.0) / CAST(value_in_use AS INT) * 100) AS INT) AS NVARCHAR(100)) + ''% of your '' + CAST(CAST((CAST(value_in_use AS DECIMAL(38,1)) / 1024) AS MONEY) AS NVARCHAR(100)) + ''GB of your max server memory is being used for in-memory OLTP tables (Hekaton). Microsoft recommends having 2X your Hekaton table space available in memory just for Hekaton, with a max of 250GB of in-memory data regardless of your server memory capacity.'' AS Details
			                        FROM sys.configurations c INNER JOIN sys.dm_os_memory_clerks mem ON mem.type = ''MEMORYCLERK_XTP''
                                    WHERE c.name = ''max server memory (MB)''
                                    GROUP BY c.value_in_use
                                    HAVING CAST(value_in_use AS DECIMAL(38,2)) * .25 &lt; SUM(mem.pages_kb / 1024.0)
                                      OR SUM(mem.pages_kb / 1024.0) &gt; 250000';
		                        EXECUTE(@StringToExecute);
	                        END


                        /* Performance - In-Memory OLTP (Hekaton) In Use */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 146 )
	                        AND EXISTS ( SELECT *
					                        FROM   sys.all_objects o
					                        WHERE  o.name = 'dm_db_xtp_table_memory_stats' )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT 146 AS CheckID,
			                        200 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''In-Memory OLTP (Hekaton) In Use'' AS Finding,
			                        ''http://BrentOzar.com/go/hekaton'' AS URL,
			                        CAST(CAST((SUM(mem.pages_kb / 1024.0) / CAST(value_in_use AS INT) * 100) AS INT) AS NVARCHAR(100)) + ''% of your '' + CAST(CAST((CAST(value_in_use AS DECIMAL(38,1)) / 1024) AS MONEY) AS NVARCHAR(100)) + ''GB of your max server memory is being used for in-memory OLTP tables (Hekaton).'' AS Details
			                        FROM sys.configurations c INNER JOIN sys.dm_os_memory_clerks mem ON mem.type = ''MEMORYCLERK_XTP''
                                    WHERE c.name = ''max server memory (MB)''
                                    GROUP BY c.value_in_use
                                    HAVING SUM(mem.pages_kb / 1024.0) &gt; 10';
		                        EXECUTE(@StringToExecute);
	                        END

                        /* In-Memory OLTP (Hekaton) - Transaction Errors */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 147 )
	                        AND EXISTS ( SELECT *
					                        FROM   sys.all_objects o
					                        WHERE  o.name = 'dm_xtp_transaction_stats' )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT 147 AS CheckID,
			                        100 AS Priority,
			                        ''In-Memory OLTP (Hekaton)'' AS FindingsGroup,
			                        ''Transaction Errors'' AS Finding,
			                        ''http://BrentOzar.com/go/hekaton'' AS URL,
			                        ''Since restart: '' + CAST(validation_failures AS NVARCHAR(100)) + '' validation failures, '' + CAST(dependencies_failed AS NVARCHAR(100)) + '' dependency failures, '' + CAST(write_conflicts AS NVARCHAR(100)) + '' write conflicts, '' + CAST(unique_constraint_violations AS NVARCHAR(100)) + '' unique constraint violations.'' AS Details
			                        FROM sys.dm_xtp_transaction_stats
                                    WHERE validation_failures &lt;&gt; 0
                                            OR dependencies_failed &lt;&gt; 0
                                            OR write_conflicts &lt;&gt; 0
                                            OR unique_constraint_violations &lt;&gt; 0;'
		                        EXECUTE(@StringToExecute);
	                        END



                        /* Reliability - Database Files on Network File Shares */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 148 )
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 148 AS CheckID ,
						                        d.[name] AS DatabaseName ,
						                        170 AS Priority ,
						                        'Reliability' AS FindingsGroup ,
						                        'Database Files on Network File Shares' AS Finding ,
						                        'http://BrentOzar.com/go/nas' AS URL ,
						                        ( 'Files for this database are on: ' + LEFT(mf.physical_name, 30)) AS Details
				                        FROM    sys.databases d
                                          INNER JOIN sys.master_files mf ON d.database_id = mf.database_id
				                        WHERE mf.physical_name LIKE '\\%'
						                        AND d.name NOT IN ( SELECT DISTINCT
													                        DatabaseName
											                        FROM    #SkipChecks 
																	WHERE CheckID IS NULL)
	                        END

                        /* Reliability - Database Files Stored in Azure */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 149 )
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 149 AS CheckID ,
						                        d.[name] AS DatabaseName ,
						                        170 AS Priority ,
						                        'Reliability' AS FindingsGroup ,
						                        'Database Files Stored in Azure' AS Finding ,
						                        'http://BrentOzar.com/go/azurefiles' AS URL ,
						                        ( 'Files for this database are on: ' + LEFT(mf.physical_name, 30)) AS Details
				                        FROM    sys.databases d
                                          INNER JOIN sys.master_files mf ON d.database_id = mf.database_id
				                        WHERE mf.physical_name LIKE 'http://%'
						                        AND d.name NOT IN ( SELECT DISTINCT
													                        DatabaseName
											                        FROM    #SkipChecks 
																	WHERE CheckID IS NULL)
	                        END


                        /* Reliability - Errors Logged Recently in the Default Trace */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 150 )
                            AND @TracePath IS NOT NULL
	                        BEGIN

		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 150 AS CheckID ,
					                            t.DatabaseName,
						                        50 AS Priority ,
						                        'Reliability' AS FindingsGroup ,
						                        'Errors Logged Recently in the Default Trace' AS Finding ,
						                        'http://BrentOzar.com/go/defaulttrace' AS URL ,
						                         CAST(t.TextData AS NVARCHAR(4000)) AS Details
                                        FROM    sys.fn_trace_gettable(@TracePath, DEFAULT) t
                                        WHERE t.EventClass = 22
                                          AND t.Severity &gt;= 17
                                          AND t.StartTime &gt; DATEADD(dd, -30, GETDATE())
	                        END


                        /* Performance - Log File Growths Slow */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 151 )
                            AND @TracePath IS NOT NULL
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        DatabaseName ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT DISTINCT 151 AS CheckID ,
					                            t.DatabaseName,
						                        50 AS Priority ,
						                        'Performance' AS FindingsGroup ,
						                        'Log File Growths Slow' AS Finding ,
						                        'http://BrentOzar.com/go/filegrowth' AS URL ,
						                        CAST(COUNT(*) AS NVARCHAR(100)) + ' growths took more than 15 seconds each. Consider setting log file autogrowth to a smaller increment.' AS Details
                                        FROM    sys.fn_trace_gettable(@TracePath, DEFAULT) t
                                        WHERE t.EventClass = 93
                                          AND t.StartTime &gt; DATEADD(dd, -30, GETDATE())
                                          AND t.Duration &gt; 15000000
                                        GROUP BY t.DatabaseName
                                        HAVING COUNT(*) &gt; 1
	                        END


                        /* Performance - Many Plans for One Query */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 160 )
                            AND EXISTS (SELECT * FROM sys.all_columns WHERE name = 'query_hash')
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT TOP 1 160 AS CheckID,
			                        100 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''Many Plans for One Query'' AS Finding,
			                        ''http://BrentOzar.com/go/parameterization'' AS URL,
			                        CAST(COUNT(DISTINCT plan_handle) AS NVARCHAR(50)) + '' plans are present for a single query in the plan cache - meaning we probably have parameterization issues.'' AS Details
			                        FROM sys.dm_exec_query_stats qs
                                    CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) pa
                                    WHERE pa.attribute = ''dbid''
                                    GROUP BY qs.query_hash, pa.value
                                    HAVING COUNT(DISTINCT plan_handle) &gt; 50
									ORDER BY COUNT(DISTINCT plan_handle) DESC;';
		                        EXECUTE(@StringToExecute);
	                        END


                        /* Performance - High Number of Cached Plans */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 161 )
	                        BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        SELECT TOP 1 161 AS CheckID,
			                        100 AS Priority,
			                        ''Performance'' AS FindingsGroup,
			                        ''High Number of Cached Plans'' AS Finding,
			                        ''http://BrentOzar.com/go/planlimits'' AS URL,
			                        ''Your server configuration is limited to '' + CAST(ht.buckets_count * 4 AS VARCHAR(20)) + '' '' + ht.name + '', and you are currently caching '' + CAST(cc.entries_count AS VARCHAR(20)) + ''.'' AS Details
			                        FROM sys.dm_os_memory_cache_hash_tables ht
			                        INNER JOIN sys.dm_os_memory_cache_counters cc ON ht.name = cc.name AND ht.type = cc.type
			                        where ht.name IN ( ''SQL Plans'' , ''Object Plans'' , ''Bound Trees'' )
			                        AND cc.entries_count &gt;= (3 * ht.buckets_count)';
		                        EXECUTE(@StringToExecute);
	                        END


						/* Performance - Too Much Free Memory */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 165 )
							BEGIN
								INSERT INTO #BlitzResults
									(CheckID,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
								SELECT 165, 50, 'Performance', 'Too Much Free Memory', 'http://BrentOzar.com/go/freememory',
									CAST((CAST(cFree.cntr_value AS BIGINT) / 1024 / 1024 ) AS NVARCHAR(100)) + N'GB of free memory inside SQL Server''s buffer pool, which is ' + CAST((CAST(cTotal.cntr_value AS BIGINT) / 1024 / 1024) AS NVARCHAR(100)) + N'GB. You would think lots of free memory would be good, but check out the URL for more information.' AS Details
								FROM sys.dm_os_performance_counters cFree
								INNER JOIN sys.dm_os_performance_counters cTotal ON cTotal.object_name LIKE N'%Memory Manager%'
									AND cTotal.counter_name = N'Total Server Memory (KB)                                                                                                        '
								WHERE cFree.object_name LIKE N'%Memory Manager%'
									AND cFree.counter_name = N'Free Memory (KB)                                                                                                                '
									AND CAST(cTotal.cntr_value AS BIGINT) &gt; 4000
									AND CAST(cTotal.cntr_value AS BIGINT) * .3 &lt;= CAST(cFree.cntr_value AS BIGINT)
                                    AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%'

							END


                        /* Outdated sp_Blitz - sp_Blitz is Over 6 Months Old */
                        IF NOT EXISTS ( SELECT  1
				                        FROM    #SkipChecks
				                        WHERE   DatabaseName IS NULL AND CheckID = 155 )
				           AND DATEDIFF(MM, @VersionDate, GETDATE()) &gt; 6
	                        BEGIN
		                        INSERT  INTO #BlitzResults
				                        ( CheckID ,
					                        Priority ,
					                        FindingsGroup ,
					                        Finding ,
					                        URL ,
					                        Details
				                        )
				                        SELECT 155 AS CheckID ,
						                        0 AS Priority ,
						                        'Outdated sp_Blitz' AS FindingsGroup ,
						                        'sp_Blitz is Over 6 Months Old' AS Finding ,
						                        'http://FirstResponderKit.org/' AS URL ,
						                        'Some things get better with age, like fine wine and your T-SQL. However, sp_Blitz is not one of those things - time to go download the current one.' AS Details
	                        END


						/* Populate a list of database defaults. I'm doing this kind of oddly -
						    it reads like a lot of work, but this way it compiles &amp; runs on all
						    versions of SQL Server.
						*/
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_supplemental_logging_enabled', 0, 131, 210, 'Supplemental Logging Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_supplemental_logging_enabled' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'snapshot_isolation_state', 0, 132, 210, 'Snapshot Isolation Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'snapshot_isolation_state' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_read_committed_snapshot_on', 0, 133, 210, 'Read Committed Snapshot Isolation Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_read_committed_snapshot_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_auto_create_stats_incremental_on', 0, 134, 210, 'Auto Create Stats Incremental Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_auto_create_stats_incremental_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_ansi_null_default_on', 0, 135, 210, 'ANSI NULL Default Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_ansi_null_default_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_recursive_triggers_on', 0, 136, 210, 'Recursive Triggers Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_recursive_triggers_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_trustworthy_on', 0, 137, 210, 'Trustworthy Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_trustworthy_on' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_parameterization_forced', 0, 138, 210, 'Forced Parameterization Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_parameterization_forced' AND object_id = OBJECT_ID('sys.databases');
						/* Not alerting for this since we actually want it and we have a separate check for it:
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_query_store_on', 0, 139, 210, 'Query Store Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_query_store_on' AND object_id = OBJECT_ID('sys.databases');
						*/
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_cdc_enabled', 0, 140, 210, 'Change Data Capture Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_cdc_enabled' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'containment', 0, 141, 210, 'Containment Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'containment' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'target_recovery_time_in_seconds', 0, 142, 210, 'Target Recovery Time Changed', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'target_recovery_time_in_seconds' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'delayed_durability', 0, 143, 210, 'Delayed Durability Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'delayed_durability' AND object_id = OBJECT_ID('sys.databases');
						INSERT INTO #DatabaseDefaults
						  SELECT 'is_memory_optimized_elevate_to_snapshot_on', 0, 144, 210, 'Memory Optimized Enabled', 'http://BrentOzar.com/go/dbdefaults', NULL
						  FROM sys.all_columns 
						  WHERE name = 'is_memory_optimized_elevate_to_snapshot_on' AND object_id = OBJECT_ID('sys.databases');

						DECLARE DatabaseDefaultsLoop CURSOR FOR
						  SELECT name, DefaultValue, CheckID, Priority, Finding, URL, Details
						  FROM #DatabaseDefaults

						OPEN DatabaseDefaultsLoop
						FETCH NEXT FROM DatabaseDefaultsLoop into @CurrentName, @CurrentDefaultValue, @CurrentCheckID, @CurrentPriority, @CurrentFinding, @CurrentURL, @CurrentDetails
						WHILE @@FETCH_STATUS = 0
						BEGIN 

							/* Target Recovery Time (142) can be either 0 or 60 due to a number of bugs */
						    IF @CurrentCheckID = 142
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details)
								   SELECT ' + CAST(@CurrentCheckID AS NVARCHAR(200)) + ', d.[name], ' + CAST(@CurrentPriority AS NVARCHAR(200)) + ', ''Non-Default Database Config'', ''' + @CurrentFinding + ''',''' + @CurrentURL + ''',''' + COALESCE(@CurrentDetails, 'This database setting is not the default.') + '''
									FROM sys.databases d
									WHERE d.database_id &gt; 4 AND (d.[' + @CurrentName + '] NOT IN (0, 60) OR d.[' + @CurrentName + '] IS NULL);';
							ELSE
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details)
								   SELECT ' + CAST(@CurrentCheckID AS NVARCHAR(200)) + ', d.[name], ' + CAST(@CurrentPriority AS NVARCHAR(200)) + ', ''Non-Default Database Config'', ''' + @CurrentFinding + ''',''' + @CurrentURL + ''',''' + COALESCE(@CurrentDetails, 'This database setting is not the default.') + '''
									FROM sys.databases d
									WHERE d.database_id &gt; 4 AND (d.[' + @CurrentName + '] &lt;&gt; ' + @CurrentDefaultValue + ' OR d.[' + @CurrentName + '] IS NULL);';
						    EXEC (@StringToExecute);

						FETCH NEXT FROM DatabaseDefaultsLoop into @CurrentName, @CurrentDefaultValue, @CurrentCheckID, @CurrentPriority, @CurrentFinding, @CurrentURL, @CurrentDetails 
						END

						CLOSE DatabaseDefaultsLoop
						DEALLOCATE DatabaseDefaultsLoop;
							

/*This checks to see if Agent is Offline*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 167 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
									BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							167 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Agent is Currently Offline' AS [Finding] ,
							'' AS [URL] ,
							( 'Oops! It looks like the ' + [servicename] + ' service is ' + [status_desc] + '. The startup type is ' + [startup_type_desc] + '.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [status_desc] &lt;&gt; 'Running'
						  AND [servicename] LIKE 'SQL Server Agent%'
						  AND CAST(SERVERPROPERTY('Edition') AS VARCHAR(1000)) NOT LIKE '%xpress%'

					END; 
				END;

/*This checks to see if the Full Text thingy is offline*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 168 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							168 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Full-text Filter Daemon Launcher is Currently Offline' AS [Finding] ,
							'' AS [URL] ,
							( 'Oops! It looks like the ' + [servicename] + ' service is ' + [status_desc] + '. The startup type is ' + [startup_type_desc] + '.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [status_desc] &lt;&gt; 'Running'
						  AND [servicename] LIKE 'SQL Full-text Filter Daemon Launcher%'

					END;
					END; 

/*This checks which service account SQL Server is running as.*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 169 )

					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							169 AS [CheckID] ,
							250 AS [Priority] ,
							'Informational' AS [FindingsGroup] ,
							'SQL Server is running under an NT Service account' AS [Finding] ,
							'http://BrentOzar.com/go/setup' AS [URL] ,
							( 'I''m running as ' + [service_account] + '. I wish I had an Active Directory service account instead.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [service_account] LIKE 'NT Service%'
						  AND [servicename] LIKE 'SQL Server%'
						  AND [servicename] NOT LIKE 'SQL Server Agent%'

					END;
					END;

/*This checks which service account SQL Agent is running as.*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 170 )

					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							170 AS [CheckID] ,
							250 AS [Priority] ,
							'Informational' AS [FindingsGroup] ,
							'SQL Server Agent is running under an NT Service account' AS [Finding] ,
							'http://BrentOzar.com/go/setup' AS [URL] ,
							( 'I''m running as ' + [service_account] + '. I wish I had an Active Directory service account instead.'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_services]
						  WHERE [service_account] LIKE 'NT Service%'
						  AND [servicename] LIKE 'SQL Server Agent%'

					END; 
					END;

/*This counts memory dumps and gives min and max date of in view*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 171 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_server_memory_dumps' )
					BEGIN
						IF 5 &lt;= (SELECT COUNT(*) FROM [sys].[dm_server_memory_dumps] WHERE [creation_time] &gt;= DATEADD(year, -1, GETDATE()))
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							171 AS [CheckID] ,
							20 AS [Priority] ,
							'Reliability' AS [FindingsGroup] ,
							'Memory Dumps Have Occurred' AS [Finding] ,
							'http://BrentOzar.com/go/dump' AS [URL] ,
							( 'That ain''t good. I''ve had ' + 
								CAST(COUNT(*) AS VARCHAR(100)) + ' memory dumps between ' + 
								CAST(CAST(MIN([creation_time]) AS DATETIME) AS VARCHAR(100)) +
								' and ' +
								CAST(CAST(MAX([creation_time]) AS DATETIME) AS VARCHAR(100)) +
								'!'
							   ) AS [Details]
						  FROM
							[sys].[dm_server_memory_dumps]
						  WHERE [creation_time] &gt;= DATEADD(year, -1, GETDATE());

					END; 
					END;

/*Checks to see if you're on Developer or Evaluation*/
					IF	NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 173 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							173 AS [CheckID] ,
							200 AS [Priority] ,
							'Licensing' AS [FindingsGroup] ,
							'Non-Production License' AS [Finding] ,
							'http://BrentOzar.com/go/licensing' AS [URL] ,
							( 'We''re not the licensing police, but if this is supposed to be a production server, and you''re running ' + 
							CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) +
							' the good folks at Microsoft might get upset with you. Better start counting those cores.'
							   ) AS [Details]
							WHERE CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) LIKE '%Developer%'
							OR CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) LIKE '%Evaluation%'

					END

/*Checks to see if Buffer Pool Extensions are in use*/
			IF @ProductVersionMajor &gt;= 12  
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 174 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							174 AS [CheckID] ,
							200 AS [Priority] ,
							'Performance' AS [FindingsGroup] ,
							'Buffer Pool Extensions Enabled' AS [Finding] ,
							'http://BrentOzar.com/go/bpe' AS [URL] ,
							( 'You have Buffer Pool Extensions enabled, and one lives here: ' + 
								[path] +
								'. It''s currently ' +
								CASE WHEN [current_size_in_kb] / 1024. / 1024. &gt; 0
																	 THEN CAST([current_size_in_kb] / 1024. / 1024. AS VARCHAR(100))
																		  + ' GB'
																	 ELSE CAST([current_size_in_kb] / 1024. AS VARCHAR(100))
																		  + ' MB'
								END +
								'. Did you know that BPEs only provide single threaded access 8 bytes at a time?'	
							   ) AS [Details]
							 FROM sys.dm_os_buffer_pool_extension_configuration
							 WHERE [state_description] &lt;&gt; 'BUFFER POOL EXTENSION DISABLED'

					END

/*Check for too many tempdb files*/
			IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 175 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
										SELECT DISTINCT
										175 AS CheckID ,
										'TempDB' AS DatabaseName ,
										170 AS Priority ,
										'File Configuration' AS FindingsGroup ,
										'TempDB Has &gt;16 Data Files' AS Finding ,
										'http://BrentOzar.com/go/tempdb' AS URL ,
										'Woah, Nelly! TempDB has ' + CAST(COUNT_BIG(*) AS VARCHAR) + '. Did you forget to terminate a loop somewhere?' AS Details
								  FROM sys.[master_files] AS [mf] 
								  WHERE [mf].[database_id] = 2 AND [mf].[type] = 0
								  HAVING COUNT_BIG(*) &gt; 16; 
					END	

			IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 176 )
			IF EXISTS ( SELECT  1
														FROM    sys.all_objects
														WHERE   name = 'dm_xe_sessions' )
								BEGIN
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  DatabaseName ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
													SELECT DISTINCT
													176 AS CheckID ,
													'' AS DatabaseName ,
													200 AS Priority ,
													'Monitoring' AS FindingsGroup ,
													'Extended Events Hyperextension' AS Finding ,
													'http://BrentOzar.com/go/xe' AS URL ,
													'Hey big spender, you have ' + CAST(COUNT_BIG(*) AS VARCHAR) + ' Extended Events sessions running. You sure you meant to do that?' AS Details
											    FROM sys.dm_xe_sessions
												WHERE [name] NOT IN
												('system_health', 'sp_server_diagnostics session', 'hkenginexesession', 'telemetry_xevents')
												AND name NOT LIKE '%$A%'
											  HAVING COUNT_BIG(*) &gt;= 2; 
								END	
								END
			
			/*Harmful startup parameter*/
			IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 177 )
								BEGIN
								IF EXISTS ( SELECT  1
														FROM    sys.all_objects
														WHERE   name = 'dm_server_registry' )
			
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  DatabaseName ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
													SELECT DISTINCT
													177 AS CheckID ,
													'' AS DatabaseName ,
													5 AS Priority ,
													'Monitoring' AS FindingsGroup ,
													'Disabled Internal Monitoring Features' AS Finding ,
													'https://msdn.microsoft.com/en-us/library/ms190737.aspx' AS URL ,
													'You have -x as a startup parameter. You should head to the URL and read more about what it does to your system.' AS Details
													FROM
													[sys].[dm_server_registry] AS [dsr]
													WHERE
													[dsr].[registry_key] LIKE N'%MSSQLServer\Parameters'
													AND [dsr].[value_data] = '-x';; 
								END		
								END
			
			
			/* Reliability - Dangerous Third Party Modules - 179 */
			IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 179 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							179 AS [CheckID] ,
							5 AS [Priority] ,
							'Reliability' AS [FindingsGroup] ,
							'Dangerous Third Party Modules' AS [Finding] ,
							'https://support.microsoft.com/en-us/kb/2033238' AS [URL] ,
							( COALESCE(company, '') + ' - ' + COALESCE(description, '') + ' - ' + COALESCE(name, '') + ' - suspected dangerous third party module is installed.') AS [Details]
							FROM sys.dm_os_loaded_modules 
							WHERE UPPER(name) LIKE UPPER('%\ENTAPI.DLL') /* McAfee VirusScan Enterprise */
							OR UPPER(name) LIKE UPPER('%\HIPI.DLL') OR UPPER(name) LIKE UPPER('%\HcSQL.dll') OR UPPER(name) LIKE UPPER('%\HcApi.dll') OR UPPER(name) LIKE UPPER('%\HcThe.dll') /* McAfee Host Intrusion */
							OR UPPER(name) LIKE UPPER('%\SOPHOS_DETOURED.DLL') OR UPPER(name) LIKE UPPER('%\SOPHOS_DETOURED_x64.DLL') OR UPPER(name) LIKE UPPER('%\SWI_IFSLSP_64.dll') /* Sophos AV */
							OR UPPER(name) LIKE UPPER('%\PIOLEDB.DLL') OR UPPER(name) LIKE UPPER('%\PISDK.DLL') /* OSISoft PI data access */

					END

			/*Find shrink database tasks*/

			IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 180 )
							AND CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) LIKE '1%' /* Only run on 2008+ */
					BEGIN
						;
						WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS [dts])
						,[maintenance_plan_steps] AS (
							SELECT [name]
								, CAST(CAST([packagedata] AS VARBINARY(MAX)) AS XML) AS [maintenance_plan_xml]
							FROM [msdb].[dbo].[sysssispackages]
							WHERE [packagetype] = 6
						   )
							INSERT    INTO [#BlitzResults]
									( [CheckID] ,
										[Priority] ,
										[FindingsGroup] ,
										[Finding] ,
										[URL] ,
										[Details] )									  
						SELECT
						180 AS [CheckID] ,
						100 AS [Priority] ,
						'Performance' AS [FindingsGroup] ,
						'Shrink Database Step In Maintenance Plan' AS [Finding] ,
						'http://BrentOzar.com/go/autoshrink' AS [URL] ,									  
						'The maintenance plan ' + [mps].[name] + ' has a step to shrink databases in it. Shrinking databases is as outdated as maintenance plans.' AS [Details] 
						FROM [maintenance_plan_steps] [mps]
							CROSS APPLY [maintenance_plan_xml].[nodes]('//dts:Executables/dts:Executable') [t]([c])
						WHERE [c].[value]('(@dts:ObjectName)', 'VARCHAR(128)') = 'Shrink Database Task'

						END


		/*Find repetitive maintenance tasks*/
		IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 181 )
						AND CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) LIKE '1%' /* Only run on 2008+ */
				BEGIN
						;
						WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS [dts])
						,[maintenance_plan_steps] AS (
							SELECT [name]
								, CAST(CAST([packagedata] AS VARBINARY(MAX)) AS XML) AS [maintenance_plan_xml]
							FROM [msdb].[dbo].[sysssispackages]
							WHERE [packagetype] = 6
							), [maintenance_plan_table] AS (
						SELECT [mps].[name]
							,[c].[value]('(@dts:ObjectName)', 'NVARCHAR(128)') AS [step_name]
						FROM [maintenance_plan_steps] [mps]
							CROSS APPLY [maintenance_plan_xml].[nodes]('//dts:Executables/dts:Executable') [t]([c])
						), [mp_steps_pretty] AS (SELECT DISTINCT [m1].[name] ,
								STUFF((SELECT N', ' + [m2].[step_name]  FROM [maintenance_plan_table] AS [m2] WHERE [m1].[name] = [m2].[name] 
								FOR XML PATH(N'')), 1, 2, N'') AS [maintenance_plan_steps]
						FROM [maintenance_plan_table] AS [m1])
						
							INSERT    INTO [#BlitzResults]
									( [CheckID] ,
										[Priority] ,
										[FindingsGroup] ,
										[Finding] ,
										[URL] ,
										[Details] )						
						
						SELECT
						181 AS [CheckID] ,
						100 AS [Priority] ,
						'Performance' AS [FindingsGroup] ,
						'Repetitive Steps In Maintenance Plans' AS [Finding] ,
						'https://ola.hallengren.com/' AS [URL] , 
						'The maintenance plan ' + [m].[name] + ' is doing repetitive work on indexes and statistics. Perhaps it''s time to try something more modern?' AS [Details]
						FROM [mp_steps_pretty] m
						WHERE m.[maintenance_plan_steps] LIKE '%Rebuild%Reorganize%'
						OR m.[maintenance_plan_steps] LIKE '%Rebuild%Update%'

						END
			

			/* Reliability - No Failover Cluster Nodes Available - 184 */
			IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 184 )
				AND CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)) NOT LIKE '10%'
				AND CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)) NOT LIKE '9%'
					BEGIN
		                        SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			                        							SELECT TOP 1
							  184 AS CheckID ,
							  20 AS Priority ,
							  ''Reliability'' AS FindingsGroup ,
							  ''No Failover Cluster Nodes Available'' AS Finding ,
							  ''http://BrentOzar.com/go/node'' AS URL ,
							  ''There are no failover cluster nodes available if the active node fails'' AS Details
							FROM (
							  SELECT SUM(CASE WHEN [status] = 0 AND [is_current_owner] = 0 THEN 1 ELSE 0 END) AS [available_nodes]
							  FROM sys.dm_os_cluster_nodes
							) a
							WHERE [available_nodes] &lt; 1';
		                        EXECUTE(@StringToExecute);
					END

		/* Reliability - TempDB File Error */
		IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 191 )
			AND (SELECT COUNT(*) FROM sys.master_files WHERE database_id = 2) &lt;&gt; (SELECT COUNT(*) FROM tempdb.sys.database_files)
				BEGIN
					INSERT    INTO [#BlitzResults]
							( [CheckID] ,
								[Priority] ,
								[FindingsGroup] ,
								[Finding] ,
								[URL] ,
								[Details] )						
						
						SELECT
						191 AS [CheckID] ,
						50 AS [Priority] ,
						'Reliability' AS [FindingsGroup] ,
						'TempDB File Error' AS [Finding] ,
						'http://BrentOzar.com/go/tempdboops' AS [URL] , 
						'Mismatch between the number of TempDB files in sys.master_files versus tempdb.sys.database_files' AS [Details]
				END


				IF @CheckUserDatabaseObjects = 1
					BEGIN

                        /*
                        But what if you need to run a query in every individual database?
				        Check out CheckID 99 below. Yes, it uses sp_MSforeachdb, and no,
				        we're not happy about that. sp_MSforeachdb is known to have a lot
				        of issues, like skipping databases sometimes. However, this is the
				        only built-in option that we have. If you're writing your own code
				        for database maintenance, consider Aaron Bertrand's alternative:
				        http://www.mssqltips.com/sqlservertip/2201/making-a-more-reliable-and-flexible-spmsforeachdb/
				        We don't include that as part of sp_Blitz, of course, because
				        copying and distributing copyrighted code from others without their
				        written permission isn't a good idea.
				        */
				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 99 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'USE [?];  IF EXISTS (SELECT * FROM  sys.tables WITH (NOLOCK) WHERE name = ''sysmergepublications'' ) IF EXISTS ( SELECT * FROM sysmergepublications WITH (NOLOCK) WHERE retention = 0)   INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 99, DB_NAME(), 110, ''Performance'', ''Infinite merge replication metadata retention period'', ''http://BrentOzar.com/go/merge'', (''The ['' + DB_NAME() + ''] database has merge replication metadata retention period set to infinite - this can be the case of significant performance issues.'')';
					        END
				        /*
				        Note that by using sp_MSforeachdb, we're running the query in all
				        databases. We're not checking #SkipChecks here for each database to
				        see if we should run the check in this database. That means we may
				        still run a skipped check if it involves sp_MSforeachdb. We just
				        don't output those results in the last step.
                        */


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 163 )
                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'database_query_store_options')
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			                            INSERT INTO #BlitzResults
			                            (CheckID,
			                            DatabaseName,
			                            Priority,
			                            FindingsGroup,
			                            Finding,
			                            URL,
			                            Details)
		                              SELECT TOP 1 163,
		                              ''?'',
		                              10,
		                              ''Performance'',
		                              ''Query Store Disabled'',
		                              ''http://BrentOzar.com/go/querystore'',
		                              (''The new SQL Server 2016 Query Store feature has not been enabled on this database.'')
		                              FROM [?].sys.database_query_store_options WHERE desired_state = 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''DWConfiguration'', ''DWDiagnostics'', ''DWQueue'', ''ReportServer'', ''ReportServerTempDB'')';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 182 )
                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'database_query_store_options')
							AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Enterprise%'
							AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Developer%'
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			                            INSERT INTO #BlitzResults
			                            (CheckID,
			                            DatabaseName,
			                            Priority,
			                            FindingsGroup,
			                            Finding,
			                            URL,
			                            Details)
		                              SELECT TOP 1 182,
		                              ''?'',
		                              20,
		                              ''Reliability'',
		                              ''Query Store Cleanup Disabled'',
		                              ''http://BrentOzar.com/go/cleanup'',
		                              (''SQL 2016 RTM has a bug involving dumps that happen every time Query Store cleanup jobs run.'')
		                              FROM [?].sys.database_query_store_options WHERE desired_state &lt;&gt; 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''DWConfiguration'', ''DWDiagnostics'', ''DWQueue'', ''ReportServer'', ''ReportServerTempDB'')';
							END


				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 41 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'use [?];
		                              INSERT INTO #BlitzResults
		                              (CheckID,
		                              DatabaseName,
		                              Priority,
		                              FindingsGroup,
		                              Finding,
		                              URL,
		                              Details)
		                              SELECT 41,
		                              ''?'',
		                              170,
		                              ''File Configuration'',
		                              ''Multiple Log Files on One Drive'',
		                              ''http://BrentOzar.com/go/manylogs'',
		                              (''The ['' + DB_NAME() + ''] database has multiple log files on the '' + LEFT(physical_name, 1) + '' drive. This is not a performance booster because log file access is sequential, not parallel.'')
		                              FROM [?].sys.database_files WHERE type_desc = ''LOG''
			                            AND ''?'' &lt;&gt; ''[tempdb]''
		                              GROUP BY LEFT(physical_name, 1)
		                              HAVING COUNT(*) &gt; 1';
					        END

				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 42 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'use [?];
			                            INSERT INTO #BlitzResults
			                            (CheckID,
			                            DatabaseName,
			                            Priority,
			                            FindingsGroup,
			                            Finding,
			                            URL,
			                            Details)
			                            SELECT DISTINCT 42,
			                            ''?'',
			                            170,
			                            ''File Configuration'',
			                            ''Uneven File Growth Settings in One Filegroup'',
			                            ''http://BrentOzar.com/go/grow'',
			                            (''The ['' + DB_NAME() + ''] database has multiple data files in one filegroup, but they are not all set up to grow in identical amounts.  This can lead to uneven file activity inside the filegroup.'')
			                            FROM [?].sys.database_files
			                            WHERE type_desc = ''ROWS''
			                            GROUP BY data_space_id
			                            HAVING COUNT(DISTINCT growth) &gt; 1 OR COUNT(DISTINCT is_percent_growth) &gt; 1';
					        END


				            IF NOT EXISTS ( SELECT  1
								            FROM    #SkipChecks
								            WHERE   DatabaseName IS NULL AND CheckID = 82 )
					            BEGIN
						            EXEC sp_MSforeachdb 'use [?];
		                                INSERT INTO #BlitzResults
		                                (CheckID,
		                                DatabaseName,
		                                Priority,
		                                FindingsGroup,
		                                Finding,
		                                URL, Details)
		                                SELECT  DISTINCT 82 AS CheckID,
		                                ''?'' as DatabaseName,
		                                170 AS Priority,
		                                ''File Configuration'' AS FindingsGroup,
		                                ''File growth set to percent'',
		                                ''http://brentozar.com/go/percentgrowth'' AS URL,
		                                ''The ['' + DB_NAME() + ''] database file '' + f.physical_name + '' has grown to '' + CAST((f.size * 8 / 1000000) AS NVARCHAR(10)) + '' GB, and is using percent filegrowth settings. This can lead to slow performance during growths if Instant File Initialization is not enabled.''
		                                FROM    [?].sys.database_files f
		                                WHERE   is_percent_growth = 1 and size &gt; 128000 ';
					            END



                            /* addition by Henrik Staun Poulsen, Stovi Software */
				            IF NOT EXISTS ( SELECT  1
								            FROM    #SkipChecks
								            WHERE   DatabaseName IS NULL AND CheckID = 158 )
					            BEGIN
						            EXEC sp_MSforeachdb 'use [?];
		                                INSERT INTO #BlitzResults
		                                (CheckID,
		                                DatabaseName,
		                                Priority,
		                                FindingsGroup,
		                                Finding,
		                                URL, Details)
		                                SELECT  DISTINCT 158 AS CheckID,
		                                ''?'' as DatabaseName,
		                                170 AS Priority,
		                                ''File Configuration'' AS FindingsGroup,
		                                ''File growth set to 1MB'',
		                                ''http://brentozar.com/go/percentgrowth'' AS URL,
		                                ''The ['' + DB_NAME() + ''] database file '' + f.physical_name + '' is using 1MB filegrowth settings, but it has grown to '' + CAST((f.size * 8 / 1000000) AS NVARCHAR(10)) + '' GB. Time to up the growth amount.''
		                                FROM    [?].sys.database_files f
                                        WHERE is_percent_growth = 0 and growth=128 and size &gt; 128000 ';
					            END



				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 33 )
					        BEGIN
						        IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
							        AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
							        BEGIN
								        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults
					                                (CheckID,
					                                DatabaseName,
					                                Priority,
					                                FindingsGroup,
					                                Finding,
					                                URL,
					                                Details)
		                                  SELECT DISTINCT 33,
		                                  db_name(),
		                                  200,
		                                  ''Licensing'',
		                                  ''Enterprise Edition Features In Use'',
		                                  ''http://BrentOzar.com/go/ee'',
		                                  (''The ['' + DB_NAME() + ''] database is using '' + feature_name + ''.  If this database is restored onto a Standard Edition server, the restore will fail.'')
		                                  FROM [?].sys.dm_db_persisted_sku_features';
							        END;
					        END


				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 19 )
					        BEGIN
						        /* Method 1: Check sys.databases parameters */
						        INSERT  INTO #BlitzResults
								        ( CheckID ,
								          DatabaseName ,
								          Priority ,
								          FindingsGroup ,
								          Finding ,
								          URL ,
								          Details
								        )

								        SELECT  19 AS CheckID ,
										        [name] AS DatabaseName ,
										        200 AS Priority ,
										        'Informational' AS FindingsGroup ,
										        'Replication In Use' AS Finding ,
										        'http://BrentOzar.com/go/repl' AS URL ,
										        ( 'Database [' + [name]
										          + '] is a replication publisher, subscriber, or distributor.' ) AS Details
								        FROM    sys.databases
								        WHERE   name NOT IN ( SELECT DISTINCT
																        DatabaseName
													          FROM      #SkipChecks 
													          WHERE CheckID IS NULL)
										        AND is_published = 1
										        OR is_subscribed = 1
										        OR is_merge_published = 1
										        OR is_distributor = 1;

						        /* Method B: check subscribers for MSreplication_objects tables */
						        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults
										        (CheckID,
										        DatabaseName,
										        Priority,
										        FindingsGroup,
										        Finding,
										        URL,
										        Details)
							          SELECT DISTINCT 19,
							          db_name(),
							          200,
							          ''Informational'',
							          ''Replication In Use'',
							          ''http://BrentOzar.com/go/repl'',
							          (''['' + DB_NAME() + ''] has MSreplication_objects tables in it, indicating it is a replication subscriber.'')
							          FROM [?].sys.tables
							          WHERE name = ''dbo.MSreplication_objects'' AND ''?'' &lt;&gt; ''master''';

					        END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 32 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
			SELECT 32,
			''?'',
			150,
			''Performance'',
			''Triggers on Tables'',
			''http://BrentOzar.com/go/trig'',
			(''The ['' + DB_NAME() + ''] database has '' + CAST(SUM(1) AS NVARCHAR(50)) + '' triggers.'')
			FROM [?].sys.triggers t INNER JOIN [?].sys.objects o ON t.parent_id = o.object_id
			INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id WHERE t.is_ms_shipped = 0 AND DB_NAME() != ''ReportServer''
			HAVING SUM(1) &gt; 0';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 38 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
		  SELECT DISTINCT 38,
		  ''?'',
		  110,
		  ''Performance'',
		  ''Active Tables Without Clustered Indexes'',
		  ''http://BrentOzar.com/go/heaps'',
		  (''The ['' + DB_NAME() + ''] database has heaps - tables without a clustered index - that are being actively queried.'')
		  FROM [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id
		  INNER JOIN [?].sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
		  INNER JOIN sys.databases sd ON sd.name = ''?''
		  LEFT OUTER JOIN [?].sys.dm_db_index_usage_stats ius ON i.object_id = ius.object_id AND i.index_id = ius.index_id AND ius.database_id = sd.database_id
		  WHERE i.type_desc = ''HEAP'' AND COALESCE(ius.user_seeks, ius.user_scans, ius.user_lookups, ius.user_updates) IS NOT NULL
		  AND sd.name &lt;&gt; ''tempdb'' AND sd.name &lt;&gt; ''DWDiagnostics'' AND o.is_ms_shipped = 0 AND o.type &lt;&gt; ''S''';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 164 )
                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'fn_validate_plan_guide')
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
		  SELECT DISTINCT 164,
		  ''?'',
		  20,
		  ''Reliability'',
		  ''Plan Guides Failing'',
		  ''http://BrentOzar.com/go/misguided'',
		  (''The ['' + DB_NAME() + ''] database has plan guides that are no longer valid, so the queries involved may be failing silently.'')
		  FROM [?].sys.plan_guides g CROSS APPLY fn_validate_plan_guide(g.plan_guide_id)';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 39 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
			(CheckID,
			DatabaseName,
			Priority,
			FindingsGroup,
			Finding,
			URL,
			Details)
		  SELECT DISTINCT 39,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Inactive Tables Without Clustered Indexes'',
		  ''http://BrentOzar.com/go/heaps'',
		  (''The ['' + DB_NAME() + ''] database has heaps - tables without a clustered index - that have not been queried since the last restart.  These may be backup tables carelessly left behind.'')
		  FROM [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id
		  INNER JOIN [?].sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
		  INNER JOIN sys.databases sd ON sd.name = ''?''
		  LEFT OUTER JOIN [?].sys.dm_db_index_usage_stats ius ON i.object_id = ius.object_id AND i.index_id = ius.index_id AND ius.database_id = sd.database_id
		  WHERE i.type_desc = ''HEAP'' AND COALESCE(ius.user_seeks, ius.user_scans, ius.user_lookups, ius.user_updates) IS NULL
		  AND sd.name &lt;&gt; ''tempdb'' AND sd.name &lt;&gt; ''DWDiagnostics'' AND o.is_ms_shipped = 0 AND o.type &lt;&gt; ''S''';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 46 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 46,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Leftover Fake Indexes From Wizards'',
		  ''http://BrentOzar.com/go/hypo'',
		  (''The index ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is a leftover hypothetical index from the Index Tuning Wizard or Database Tuning Advisor.  This index is not actually helping performance and should be removed.'')
		  from [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_hypothetical = 1';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 47 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 47,
		  ''?'',
		  100,
		  ''Performance'',
		  ''Indexes Disabled'',
		  ''http://BrentOzar.com/go/ixoff'',
		  (''The index ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is disabled.  This index is not actually helping performance and should either be enabled or removed.'')
		  from [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_disabled = 1';
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 48 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT DISTINCT 48,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Foreign Keys Not Trusted'',
		  ''http://BrentOzar.com/go/trust'',
		  (''The ['' + DB_NAME() + ''] database has foreign keys that were probably disabled, data was changed, and then the key was enabled again.  Simply enabling the key is not enough for the optimizer to use this key - we have to alter the table using the WITH CHECK CHECK CONSTRAINT parameter.'')
		  from [?].sys.foreign_keys i INNER JOIN [?].sys.objects o ON i.parent_object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_not_trusted = 1 AND i.is_not_for_replication = 0 AND i.is_disabled = 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''ReportServer'', ''ReportServerTempDB'')';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 56 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 56,
		  ''?'',
		  150,
		  ''Performance'',
		  ''Check Constraint Not Trusted'',
		  ''http://BrentOzar.com/go/trust'',
		  (''The check constraint ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is not trusted - meaning, it was disabled, data was changed, and then the constraint was enabled again.  Simply enabling the constraint is not enough for the optimizer to use this constraint - we have to alter the table using the WITH CHECK CHECK CONSTRAINT parameter.'')
		  from [?].sys.check_constraints i INNER JOIN [?].sys.objects o ON i.parent_object_id = o.object_id
		  INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id
		  WHERE i.is_not_trusted = 1 AND i.is_not_for_replication = 0 AND i.is_disabled = 0';
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 95 )
							BEGIN
								IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'
									AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'
									BEGIN
										EXEC dbo.sp_MSforeachdb 'USE [?];
			INSERT INTO #BlitzResults
				  (CheckID,
				  DatabaseName,
				  Priority,
				  FindingsGroup,
				  Finding,
				  URL,
				  Details)
			SELECT TOP 1 95 AS CheckID,
			''?'' as DatabaseName,
			110 AS Priority,
			''Performance'' AS FindingsGroup,
			''Plan Guides Enabled'' AS Finding,
			''http://BrentOzar.com/go/guides'' AS URL,
			(''Database ['' + DB_NAME() + ''] has query plan guides so a query will always get a specific execution plan. If you are having trouble getting query performance to improve, it might be due to a frozen plan. Review the DMV sys.plan_guides to learn more about the plan guides in place on this server.'') AS Details
			FROM [?].sys.plan_guides WHERE is_disabled = 0'
									END;
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 60 )
							BEGIN
								EXEC sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT  DISTINCT 60 AS CheckID,
		  ''?'' as DatabaseName,
		  100 AS Priority,
		  ''Performance'' AS FindingsGroup,
		  ''Fill Factor Changed'',
		  ''http://brentozar.com/go/fillfactor'' AS URL,
		  ''The ['' + DB_NAME() + ''] database has objects with fill factor &lt; 80%. This can cause memory and storage performance problems, but may also prevent page splits.''
		  FROM    [?].sys.indexes
		  WHERE   fill_factor &lt;&gt; 0 AND fill_factor &lt; 80 AND is_disabled = 0 AND is_hypothetical = 0';
							END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 78 )
							BEGIN
                                EXECUTE master.sys.sp_MSforeachdb 'USE [?]; 
                                    INSERT INTO #Recompile 
                                    SELECT DBName = DB_Name(), SPName = SO.name, SM.is_recompiled, ISR.SPECIFIC_SCHEMA 
                                    FROM sys.sql_modules AS SM 
                                    LEFT OUTER JOIN master.sys.databases AS sDB ON SM.object_id = DB_id() 
                                    LEFT OUTER JOIN dbo.sysobjects AS SO ON SM.object_id = SO.id and type = ''P'' 
                                    LEFT OUTER JOIN INFORMATION_SCHEMA.ROUTINES AS ISR on ISR.Routine_Name = SO.name AND ISR.SPECIFIC_CATALOG = DB_Name()
                                    WHERE SM.is_recompiled=1 
                                    ' 
                                INSERT INTO #BlitzResults
													(Priority,
													FindingsGroup,
                                                    Finding,
                                                    DatabaseName,
                                                    URL,
                                                    Details,
                                                    CheckID)
                                SELECT [Priority] = '100', 
                                    FindingsGroup = 'Performance', 
                                    Finding = 'Stored Procedure WITH RECOMPILE',
                                    DatabaseName = DBName,
                                    URL = 'http://BrentOzar.com/go/recompile',
                                    Details = '[' + DBName + '].[' + SPSchema + '].[' + ProcName + '] has WITH RECOMPILE in the stored procedure code, which may cause increased CPU usage due to constant recompiles of the code.',
                                    CheckID = '78'
                                FROM #Recompile AS TR WHERE ProcName NOT LIKE 'sp_AskBrent%' AND ProcName NOT LIKE 'sp_Blitz%' 
                                DROP TABLE #Recompile;
                            END



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 86 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 86, DB_NAME(), 230, ''Security'', ''Elevated Permissions on a Database'', ''http://BrentOzar.com/go/elevated'', (''In ['' + DB_NAME() + ''], user ['' + u.name + '']  has the role ['' + g.name + ''].  This user can perform tasks beyond just reading and writing data.'') FROM [?].dbo.sysmembers m inner join [?].dbo.sysusers u on m.memberuid = u.uid inner join sysusers g on m.groupuid = g.uid where u.name &lt;&gt; ''dbo'' and g.name in (''db_owner'' , ''db_accessadmin'' , ''db_securityadmin'' , ''db_ddladmin'')';
							END


							/*Check for non-aligned indexes in partioned databases*/

										IF NOT EXISTS ( SELECT  1
														FROM    #SkipChecks
														WHERE   DatabaseName IS NULL AND CheckID = 72 )
											BEGIN
												EXEC dbo.sp_MSforeachdb 'USE [?];
								insert into #partdb(dbname, objectname, type_desc)
								SELECT distinct db_name(DB_ID()) as DBName,o.name Object_Name,ds.type_desc
								FROM sys.objects AS o JOIN sys.indexes AS i ON o.object_id = i.object_id
								JOIN sys.data_spaces ds on ds.data_space_id = i.data_space_id
								LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s ON i.object_id = s.object_id AND i.index_id = s.index_id AND s.database_id = DB_ID()
								WHERE  o.type = ''u''
								 -- Clustered and Non-Clustered indexes
								AND i.type IN (1, 2)
								AND o.object_id in
								  (
									SELECT a.object_id from
									  (SELECT ob.object_id, ds.type_desc from sys.objects ob JOIN sys.indexes ind on ind.object_id = ob.object_id join sys.data_spaces ds on ds.data_space_id = ind.data_space_id
									  GROUP BY ob.object_id, ds.type_desc ) a group by a.object_id having COUNT (*) &gt; 1
								  )'
												INSERT  INTO #BlitzResults
														( CheckID ,
														  DatabaseName ,
														  Priority ,
														  FindingsGroup ,
														  Finding ,
														  URL ,
														  Details
														)
														SELECT DISTINCT
																72 AS CheckID ,
																dbname AS DatabaseName ,
																100 AS Priority ,
																'Performance' AS FindingsGroup ,
																'The partitioned database ' + dbname
																+ ' may have non-aligned indexes' AS Finding ,
																'http://BrentOzar.com/go/aligned' AS URL ,
																'Having non-aligned indexes on partitioned tables may cause inefficient query plans and CPU pressure' AS Details
														FROM    #partdb
														WHERE   dbname IS NOT NULL
																AND dbname NOT IN ( SELECT DISTINCT
																						  DatabaseName
																					FROM  #SkipChecks 
																					WHERE CheckID IS NULL)
												DROP TABLE #partdb
											END


					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 113 )
									BEGIN
							  EXEC dbo.sp_MSforeachdb 'USE [?];
							  INSERT INTO #BlitzResults
									(CheckID,
									DatabaseName,
									Priority,
									FindingsGroup,
									Finding,
									URL,
									Details)
							  SELECT DISTINCT 113,
							  ''?'',
							  50,
							  ''Reliability'',
							  ''Full Text Indexes Not Updating'',
							  ''http://BrentOzar.com/go/fulltext'',
							  (''At least one full text index in this database has not been crawled in the last week.'')
							  from [?].sys.fulltext_indexes i WHERE change_tracking_state_desc &lt;&gt; ''AUTO'' AND i.is_enabled = 1 AND i.crawl_end_date &lt; DATEADD(dd, -7, GETDATE())';
												END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 115 )
							BEGIN
								EXEC dbo.sp_MSforeachdb 'USE [?];
		  INSERT INTO #BlitzResults
				(CheckID,
				DatabaseName,
				Priority,
				FindingsGroup,
				Finding,
				URL,
				Details)
		  SELECT 115,
		  ''?'',
		  110,
		  ''Performance'',
		  ''Parallelism Rocket Surgery'',
		  ''http://BrentOzar.com/go/makeparallel'',
		  (''['' + DB_NAME() + ''] has a make_parallel function, indicating that an advanced developer may be manhandling SQL Server into forcing queries to go parallel.'')
		  from [?].INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = ''make_parallel'' AND ROUTINE_TYPE = ''FUNCTION''';
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 122 )
							BEGIN
								/* SQL Server 2012 and newer uses temporary stats for AlwaysOn Availability Groups, and those show up as user-created */
								IF EXISTS (SELECT *
									  FROM sys.all_columns c
									  INNER JOIN sys.all_objects o ON c.object_id = o.object_id
									  WHERE c.name = 'is_temporary' AND o.name = 'stats')

										EXEC dbo.sp_MSforeachdb 'USE [?];
												INSERT INTO #BlitzResults
													(CheckID,
													DatabaseName,
													Priority,
													FindingsGroup,
													Finding,
													URL,
													Details)
												SELECT TOP 1 122,
												''?'',
												200,
												''Performance'',
												''User-Created Statistics In Place'',
												''http://BrentOzar.com/go/userstats'',
												(''['' + DB_NAME() + ''] has '' + CAST(SUM(1) AS NVARCHAR(10)) + '' user-created statistics. This indicates that someone is being a rocket scientist with the stats, and might actually be slowing things down, especially during stats updates.'')
												from [?].sys.stats WHERE user_created = 1 AND is_temporary = 0
                                                HAVING SUM(1) &gt; 0;';

									ELSE
										EXEC dbo.sp_MSforeachdb 'USE [?];
												INSERT INTO #BlitzResults
													(CheckID,
													DatabaseName,
													Priority,
													FindingsGroup,
													Finding,
													URL,
													Details)
												SELECT 122,
												''?'',
												200,
												''Performance'',
												''User-Created Statistics In Place'',
												''http://BrentOzar.com/go/userstats'',
												(''['' + DB_NAME() + ''] has '' + CAST(SUM(1) AS NVARCHAR(10)) + '' user-created statistics. This indicates that someone is being a rocket scientist with the stats, and might actually be slowing things down, especially during stats updates.'')
												from [?].sys.stats WHERE user_created = 1
                                                HAVING SUM(1) &gt; 0;';


							END /* IF NOT EXISTS ( SELECT  1 */


		        /*Check for high VLF count: this will omit any database snapshots*/

				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 69 )
					        BEGIN
						        IF @ProductVersionMajor &gt;= 11

							        BEGIN
								        EXEC sp_MSforeachdb N'USE [?];
		                                      INSERT INTO #LogInfo2012
		                                      EXEC sp_executesql N''DBCC LogInfo() WITH NO_INFOMSGS'';
		                                      IF    @@ROWCOUNT &gt; 999
		                                      BEGIN
			                                    INSERT  INTO #BlitzResults
			                                    ( CheckID
			                                    ,DatabaseName
			                                    ,Priority
			                                    ,FindingsGroup
			                                    ,Finding
			                                    ,URL
			                                    ,Details)
			                                    SELECT      69
			                                    ,DB_NAME()
			                                    ,170
			                                    ,''File Configuration''
			                                    ,''High VLF Count''
			                                    ,''http://BrentOzar.com/go/vlf''
			                                    ,''The ['' + DB_NAME() + ''] database has '' +  CAST(COUNT(*) as VARCHAR(20)) + '' virtual log files (VLFs). This may be slowing down startup, restores, and even inserts/updates/deletes.''
			                                    FROM #LogInfo2012
			                                    WHERE EXISTS (SELECT name FROM master.sys.databases
					                                    WHERE source_database_id is null) ;
		                                      END
		                                    TRUNCATE TABLE #LogInfo2012;'
								        DROP TABLE #LogInfo2012;
							        END
						        ELSE
							        BEGIN
								        EXEC sp_MSforeachdb N'USE [?];
		                                      INSERT INTO #LogInfo
		                                      EXEC sp_executesql N''DBCC LogInfo() WITH NO_INFOMSGS'';
		                                      IF    @@ROWCOUNT &gt; 999
		                                      BEGIN
			                                    INSERT  INTO #BlitzResults
			                                    ( CheckID
			                                    ,DatabaseName
			                                    ,Priority
			                                    ,FindingsGroup
			                                    ,Finding
			                                    ,URL
			                                    ,Details)
			                                    SELECT      69
			                                    ,DB_NAME()
			                                    ,170
			                                    ,''File Configuration''
			                                    ,''High VLF Count''
			                                    ,''http://BrentOzar.com/go/vlf''
			                                    ,''The ['' + DB_NAME() + ''] database has '' +  CAST(COUNT(*) as VARCHAR(20)) + '' virtual log files (VLFs). This may be slowing down startup, restores, and even inserts/updates/deletes.''
			                                    FROM #LogInfo
			                                    WHERE EXISTS (SELECT name FROM master.sys.databases
			                                    WHERE source_database_id is null);
		                                      END
		                                      TRUNCATE TABLE #LogInfo;'
								        DROP TABLE #LogInfo;
							        END
					        END


				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 80 )
					        BEGIN
						        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 80, DB_NAME(), 170, ''Reliability'', ''Max File Size Set'', ''http://BrentOzar.com/go/maxsize'', (''The ['' + DB_NAME() + ''] database file '' + name + '' has a max file size set to '' + CAST(CAST(max_size AS BIGINT) * 8 / 1024 AS VARCHAR(100)) + ''MB. If it runs out of space, the database will stop working even though there may be drive space available.'') FROM sys.database_files WHERE max_size &lt;&gt; 268435456 AND max_size &lt;&gt; -1 AND type &lt;&gt; 2 AND name &lt;&gt; ''DWDiagnostics'' ';
					        END

	
						/* Check if columnstore indexes are in use - for Github issue #615 */
				        IF NOT EXISTS ( SELECT  1
								        FROM    #SkipChecks
								        WHERE   DatabaseName IS NULL AND CheckID = 74 ) /* Trace flags */
					        BEGIN
								TRUNCATE TABLE #TemporaryDatabaseResults;
						        EXEC dbo.sp_MSforeachdb 'USE [?]; IF EXISTS(SELECT * FROM sys.indexes WHERE type IN (5,6)) INSERT INTO #TemporaryDatabaseResults (DatabaseName, Finding) VALUES (DB_NAME(), ''Yup'')';
								IF EXISTS (SELECT * FROM #TemporaryDatabaseResults) SET @ColumnStoreIndexesInUse = 1;
					        END


						/* Non-Default Database Scoped Config - Github issue #598 */
				        IF EXISTS ( SELECT * FROM sys.all_objects WHERE [name] = 'database_scoped_configurations' )
					        BEGIN
								INSERT INTO #DatabaseScopedConfigurationDefaults (configuration_id, [name], default_value, default_value_for_secondary, CheckID)
									SELECT 1, 'MAXDOP', 0, NULL, 194
									UNION ALL
									SELECT 2, 'LEGACY_CARDINALITY_ESTIMATION', 0, NULL, 195
									UNION ALL
									SELECT 3, 'PARAMETER_SNIFFING', 1, NULL, 196
									UNION ALL
									SELECT 4, 'QUERY_OPTIMIZER_HOTFIXES', 0, NULL, 197;
						        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) 
									SELECT def1.CheckID, DB_NAME(), 210, ''Non-Default Database Scoped Config'', dsc.[name], ''http://BrentOzar.com/go/dbscope'', (''Set value: '' + COALESCE(CAST(dsc.value AS NVARCHAR(100)),''Empty'') + '' Default: '' + COALESCE(CAST(def1.default_value AS NVARCHAR(100)),''Empty'') + '' Set value for secondary: '' + COALESCE(CAST(dsc.value_for_secondary AS NVARCHAR(100)),''Empty'') + '' Default value for secondary: '' + COALESCE(CAST(def1.default_value_for_secondary AS NVARCHAR(100)),''Empty''))
									FROM [?].sys.database_scoped_configurations dsc 
									INNER JOIN #DatabaseScopedConfigurationDefaults def1 ON dsc.configuration_id = def1.configuration_id
									LEFT OUTER JOIN #DatabaseScopedConfigurationDefaults def ON dsc.configuration_id = def.configuration_id AND (dsc.value = def.default_value OR dsc.value IS NULL) AND (dsc.value_for_secondary = def.default_value_for_secondary OR dsc.value_for_secondary IS NULL)
									LEFT OUTER JOIN #SkipChecks sk ON def.CheckID = sk.CheckID AND (sk.DatabaseName IS NULL OR sk.DatabaseName = DB_NAME())
									WHERE def.configuration_id IS NULL AND sk.CheckID IS NULL ORDER BY 1';
					        END



	
					END /* IF @CheckUserDatabaseObjects = 1 */

				IF @CheckProcedureCache = 1
					BEGIN

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 35 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  35 AS CheckID ,
												100 AS Priority ,
												'Performance' AS FindingsGroup ,
												'Single-Use Plans in Procedure Cache' AS Finding ,
												'http://BrentOzar.com/go/single' AS URL ,
												( CAST(COUNT(*) AS VARCHAR(10))
												  + ' query plans are taking up memory in the procedure cache. This may be wasted memory if we cache plans for queries that never get called again. This may be a good use case for SQL Server 2008''s Optimize for Ad Hoc or for Forced Parameterization.' ) AS Details
										FROM    sys.dm_exec_cached_plans AS cp
										WHERE   cp.usecounts = 1
												AND cp.objtype = 'Adhoc'
												AND EXISTS ( SELECT
																  1
															 FROM sys.configurations
															 WHERE
																  name = 'optimize for ad hoc workloads'
																  AND value_in_use = 0 )
										HAVING  COUNT(*) &gt; 1;
							END


		  /* Set up the cache tables. Different on 2005 since it doesn't support query_hash, query_plan_hash. */
						IF @@VERSION LIKE '%Microsoft SQL Server 2005%'
							BEGIN
								IF @CheckProcedureCacheFilter = 'CPU'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			  FROM sys.dm_exec_query_stats qs
			  ORDER BY qs.total_worker_time DESC)
			  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			  FROM queries qs
			  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
			  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Reads'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_logical_reads DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'ExecCount'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.execution_count DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Duration'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			FROM sys.dm_exec_query_stats qs
			ORDER BY qs.total_elapsed_time DESC)
			INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])
			SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]
			FROM queries qs
			LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
			WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

							END;
						IF @ProductVersionMajor &gt;= 10
							BEGIN
								IF @CheckProcedureCacheFilter = 'CPU'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_worker_time DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Reads'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_logical_reads DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'ExecCount'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.execution_count DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

								IF @CheckProcedureCacheFilter = 'Duration'
									OR @CheckProcedureCacheFilter IS NULL
									BEGIN
										SET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM sys.dm_exec_query_stats qs
		  ORDER BY qs.total_elapsed_time DESC)
		  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])
		  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]
		  FROM queries qs
		  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset
		  WHERE qsCaught.sql_handle IS NULL;'
										EXECUTE(@StringToExecute)
									END

		/* Populate the query_plan_filtered field. Only works in 2005SP2+, but we're just doing it in 2008 to be safe. */
								UPDATE  #dm_exec_query_stats
								SET     query_plan_filtered = qp.query_plan
								FROM    #dm_exec_query_stats qs
										CROSS APPLY sys.dm_exec_text_query_plan(qs.plan_handle,
																  qs.statement_start_offset,
																  qs.statement_end_offset)
										AS qp

							END;

		/* Populate the additional query_plan, text, and text_filtered fields */
						UPDATE  #dm_exec_query_stats
						SET     query_plan = qp.query_plan ,
								[text] = st.[text] ,
								text_filtered = SUBSTRING(st.text,
														  ( qs.statement_start_offset
															/ 2 ) + 1,
														  ( ( CASE qs.statement_end_offset
																WHEN -1
																THEN DATALENGTH(st.text)
																ELSE qs.statement_end_offset
															  END
															  - qs.statement_start_offset )
															/ 2 ) + 1)
						FROM    #dm_exec_query_stats qs
								CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st
								CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle)
								AS qp

		/* Dump instances of our own script. We're not trying to tune ourselves. */
						DELETE  #dm_exec_query_stats
						WHERE   text LIKE '%sp_Blitz%'
								OR text LIKE '%#BlitzResults%'

		/* Look for implicit conversions */

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 63 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  63 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Implicit Conversion' AS Finding ,
												'http://BrentOzar.com/go/implicit' AS URL ,
												( 'One of the top resource-intensive queries is comparing two fields that are not the same datatype.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%CONVERT_IMPLICIT%'
												AND COALESCE(qs.query_plan_filtered,
															 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%PhysicalOp="Index Scan"%'
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 64 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  64 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Implicit Conversion Affecting Cardinality' AS Finding ,
												'http://BrentOzar.com/go/implicit' AS URL ,
												( 'One of the top resource-intensive queries has an implicit conversion that is affecting cardinality estimation.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%&lt;PlanAffectingConvert ConvertIssue="Cardinality Estimate" Expression="CONVERT_IMPLICIT%'
							END

							/* @cms4j, 29.11.2013: Look for RID or Key Lookups */
							IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 118 )
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details ,
											  QueryPlan ,
											  QueryPlanFiltered
											)
											SELECT  118 AS CheckID ,
													120 AS Priority ,
													'Query Plans' AS FindingsGroup ,
													'RID or Key Lookups' AS Finding ,
													'http://BrentOzar.com/go/lookup' AS URL ,
													'One of the top resource-intensive queries contains RID or Key Lookups. Try to avoid them by creating covering indexes.' AS Details ,
													qs.query_plan ,
													qs.query_plan_filtered
											FROM    #dm_exec_query_stats qs
											WHERE   COALESCE(qs.query_plan_filtered,
															 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%Lookup="1"%'
								END /* @cms4j, 29.11.2013: Look for RID or Key Lookups */


						/* Look for missing indexes */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 65 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  65 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Missing Index' AS Finding ,
												'http://BrentOzar.com/go/missingindex' AS URL ,
												( 'One of the top resource-intensive queries may be dramatically improved by adding an index.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%MissingIndexGroup%'
							END

						/* Look for cursors */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 66 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  66 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Cursor' AS Finding ,
												'http://BrentOzar.com/go/cursor' AS URL ,
												( 'One of the top resource-intensive queries is using a cursor.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%&lt;StmtCursor%'
							END

		/* Look for scalar user-defined functions */

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 67 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details ,
										  QueryPlan ,
										  QueryPlanFiltered
										)
										SELECT  67 AS CheckID ,
												120 AS Priority ,
												'Query Plans' AS FindingsGroup ,
												'Scalar UDFs' AS Finding ,
												'http://BrentOzar.com/go/functions' AS URL ,
												( 'One of the top resource-intensive queries is using a user-defined scalar function that may inhibit parallelism.' ) AS Details ,
												qs.query_plan ,
												qs.query_plan_filtered
										FROM    #dm_exec_query_stats qs
										WHERE   COALESCE(qs.query_plan_filtered,
														 CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%&lt;UserDefinedFunction%'
							END

					END /* IF @CheckProcedureCache = 1 */
									  
		/*Check to see if the HA endpoint account is set at the same as the SQL Server Service Account*/
		IF @ProductVersionMajor &gt;= 10
								AND NOT EXISTS ( SELECT 1
								FROM #SkipChecks
								WHERE DatabaseName IS NULL AND CheckID = 187 )

		IF SERVERPROPERTY('IsHadrEnabled') = 1
    		BEGIN
                INSERT    INTO [#BlitzResults]
                               	( [CheckID] ,
                                [Priority] ,
                                [FindingsGroup] ,
                                [Finding] ,
                                [URL] ,
                                [Details] )
               	SELECT
                        187 AS [CheckID] ,
                        230 AS [Priority] ,
                        'Security' AS [FindingsGroup] ,
                        'Endpoints Owned by Users' AS [Finding] ,
                       	'http://BrentOzar.com/go/owners' AS [URL] ,
                        ( 'Endpoint ' + ep.[name] + ' is owned by ' + SUSER_NAME(ep.principal_id) + '. If the endpoint owner login is disabled or not available due to Active Directory problems, the high availability will stop working.'
                        ) AS [Details]
					FROM sys.database_mirroring_endpoints ep
					LEFT OUTER JOIN sys.dm_server_services s ON SUSER_NAME(ep.principal_id) = s.service_account
					WHERE s.service_account IS NULL;
    		END

		/*Check for the last good DBCC CHECKDB date */
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 68 )
					BEGIN
						EXEC sp_MSforeachdb N'USE [?];
						INSERT #DBCCs
							(ParentObject,
							Object,
							Field,
							Value)
						EXEC (''DBCC DBInfo() With TableResults, NO_INFOMSGS'');
						UPDATE #DBCCs SET DbName = N''?'' WHERE DbName IS NULL;';

						WITH    DB2
								  AS ( SELECT DISTINCT
												Field ,
												Value ,
												DbName
									   FROM     #DBCCs
									   WHERE    Field = 'dbi_dbccLastKnownGood'
									 )
							INSERT  INTO #BlitzResults
									( CheckID ,
									  DatabaseName ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  68 AS CheckID ,
											DB2.DbName AS DatabaseName ,
											1 AS PRIORITY ,
											'Reliability' AS FindingsGroup ,
											'Last good DBCC CHECKDB over 2 weeks old' AS Finding ,
											'http://BrentOzar.com/go/checkdb' AS URL ,
											'Last successful CHECKDB: '
											+ CASE DB2.Value
												WHEN '1900-01-01 00:00:00.000'
												THEN ' never.'
												ELSE DB2.Value
											  END AS Details
									FROM    DB2
									WHERE   DB2.DbName &lt;&gt; 'tempdb'
											AND DB2.DbName NOT IN ( SELECT DISTINCT
																  DatabaseName
																FROM
																  #SkipChecks 
																WHERE CheckID IS NULL)
											AND CONVERT(DATETIME, DB2.Value, 121) &lt; DATEADD(DD,
																  -14,
																  CURRENT_TIMESTAMP)
					END




	/*Verify that the servername is set */
			IF NOT EXISTS ( SELECT  1
							FROM    #SkipChecks
							WHERE   DatabaseName IS NULL AND CheckID = 70 )
				BEGIN
					IF @@SERVERNAME IS NULL
						BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  70 AS CheckID ,
											200 AS Priority ,
											'Informational' AS FindingsGroup ,
											'@@Servername Not Set' AS Finding ,
											'http://BrentOzar.com/go/servername' AS URL ,
											'@@Servername variable is null. You can fix it by executing: "sp_addserver ''&lt;LocalServerName&gt;'', local"' AS Details
						END;

					IF  /* @@SERVERNAME IS set */
						(@@SERVERNAME IS NOT NULL
						AND
						/* not a named instance */
						CHARINDEX('\',CAST(SERVERPROPERTY('ServerName') AS NVARCHAR)) = 0
						AND
						/* not clustered, when computername may be different than the servername */
						SERVERPROPERTY('IsClustered') = 0
						AND
						/* @@SERVERNAME is different than the computer name */
						@@SERVERNAME &lt;&gt; CAST(ISNULL(SERVERPROPERTY('ComputerNamePhysicalNetBIOS'),@@SERVERNAME) AS NVARCHAR) )
						 BEGIN
							INSERT  INTO #BlitzResults
									( CheckID ,
									  Priority ,
									  FindingsGroup ,
									  Finding ,
									  URL ,
									  Details
									)
									SELECT  70 AS CheckID ,
											200 AS Priority ,
											'Configuration' AS FindingsGroup ,
											'@@Servername Not Correct' AS Finding ,
											'http://BrentOzar.com/go/servername' AS URL ,
											'The @@Servername is different than the computer name, which may trigger certificate errors.' AS Details
						END;

				END
		/*Check to see if a failsafe operator has been configured*/
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 73 )
					BEGIN

						DECLARE @AlertInfo TABLE
							(
							  FailSafeOperator NVARCHAR(255) ,
							  NotificationMethod INT ,
							  ForwardingServer NVARCHAR(255) ,
							  ForwardingSeverity INT ,
							  PagerToTemplate NVARCHAR(255) ,
							  PagerCCTemplate NVARCHAR(255) ,
							  PagerSubjectTemplate NVARCHAR(255) ,
							  PagerSendSubjectOnly NVARCHAR(255) ,
							  ForwardAlways INT
							)
						INSERT  INTO @AlertInfo
								EXEC [master].[dbo].[sp_MSgetalertinfo] @includeaddresses = 0
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  73 AS CheckID ,
										200 AS Priority ,
										'Monitoring' AS FindingsGroup ,
										'No failsafe operator configured' AS Finding ,
										'http://BrentOzar.com/go/failsafe' AS URL ,
										( 'No failsafe operator is configured on this server.  This is a good idea just in-case there are issues with the [msdb] database that prevents alerting.' ) AS Details
								FROM    @AlertInfo
								WHERE   FailSafeOperator IS NULL;
					END

/*Identify globally enabled trace flags*/
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 74 )
					BEGIN
						INSERT  INTO #TraceStatus
								EXEC ( ' DBCC TRACESTATUS(-1) WITH NO_INFOMSGS'
									)
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  74 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'TraceFlag On' AS Finding ,
										CASE WHEN [T].[TraceFlag] = '834'  AND @ColumnStoreIndexesInUse = 1 THEN 'https://support.microsoft.com/en-us/kb/3210239'
											 ELSE'http://www.BrentOzar.com/go/traceflags/' END AS URL ,
										'Trace flag ' + 
										CASE WHEN [T].[TraceFlag] = '2330' THEN ' 2330 enabled globally. Using this trace Flag disables missing index requests'
											 WHEN [T].[TraceFlag] = '1211' THEN ' 1211 enabled globally. Using this Trace Flag disables lock escalation when you least expect it. No Bueno!'
											 WHEN [T].[TraceFlag] = '1224' THEN ' 1224 enabled globally. Using this Trace Flag disables lock escalation based on the number of locks being taken. You shouldn''t have done that, Dave.'
											 WHEN [T].[TraceFlag] = '652'  THEN ' 652 enabled globally. Using this Trace Flag disables pre-fetching during index scans. If you hate slow queries, you should turn that off.'
											 WHEN [T].[TraceFlag] = '661'  THEN ' 661 enabled globally. Using this Trace Flag disables ghost record removal. Who you gonna call? No one, turn that thing off.'
											 WHEN [T].[TraceFlag] = '1806'  THEN ' 1806 enabled globally. Using this Trace Flag disables instant file initialization. I question your sanity.'
											 WHEN [T].[TraceFlag] = '3505'  THEN ' 3505 enabled globally. Using this Trace Flag disables Checkpoints. Probably not the wisest idea.'
											 WHEN [T].[TraceFlag] = '8649'  THEN ' 8649 enabled globally. Using this Trace Flag drops cost thresholf for parallelism down to 0. I hope this is a dev server.'
										     WHEN [T].[TraceFlag] = '834' AND @ColumnStoreIndexesInUse = 1 THEN ' 834 is enabled globally. Using this Trace Flag with Columnstore Indexes is not a great idea.'
											 ELSE [T].[TraceFlag] + ' is enabled globally.' END 
										AS Details
								FROM    #TraceStatus T
					END

		/*Check for transaction log file larger than data file */
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 75 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  75 AS CheckID ,
										DB_NAME(a.database_id) ,
										50 AS Priority ,
										'Reliability' AS FindingsGroup ,
										'Transaction Log Larger than Data File' AS Finding ,
										'http://BrentOzar.com/go/biglog' AS URL ,
										'The database [' + DB_NAME(a.database_id)
										+ '] has a ' + CAST((CAST(a.size AS BIGINT) * 8 / 1000000) AS NVARCHAR(20)) + ' GB transaction log file, larger than the total data file sizes. This may indicate that transaction log backups are not being performed or not performed often enough.' AS Details
								FROM    sys.master_files a
								WHERE   a.type = 1
										AND DB_NAME(a.database_id) NOT IN (
										SELECT DISTINCT
												DatabaseName
										FROM    #SkipChecks )
										AND a.size &gt; 125000 /* Size is measured in pages here, so this gets us log files over 1GB. */
										AND a.size &gt; ( SELECT   SUM(CAST(b.size AS BIGINT))
													   FROM     sys.master_files b
													   WHERE    a.database_id = b.database_id
																AND b.type = 0
													 )
										AND a.database_id IN (
										SELECT  database_id
										FROM    sys.databases
										WHERE   source_database_id IS NULL )
					END

		/*Check for collation conflicts between user databases and tempdb */
				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 76 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  76 AS CheckID ,
										name AS DatabaseName ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Collation is ' + collation_name AS Finding ,
										'http://BrentOzar.com/go/collate' AS URL ,
										'Collation differences between user databases and tempdb can cause conflicts especially when comparing string values' AS Details
								FROM    sys.databases
							WHERE   name NOT IN ( 'master', 'model', 'msdb')
										AND name NOT LIKE 'ReportServer%'
										AND name NOT IN ( SELECT DISTINCT
																  DatabaseName
														  FROM    #SkipChecks 
														  WHERE CheckID IS NULL)
										AND collation_name &lt;&gt; ( SELECT
																  collation_name
																FROM
																  sys.databases
																WHERE
																  name = 'tempdb'
															  )
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 77 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  DatabaseName ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  77 AS CheckID ,
										dSnap.[name] AS DatabaseName ,
										50 AS Priority ,
										'Reliability' AS FindingsGroup ,
										'Database Snapshot Online' AS Finding ,
										'http://BrentOzar.com/go/snapshot' AS URL ,
										'Database [' + dSnap.[name]
										+ '] is a snapshot of ['
										+ dOriginal.[name]
										+ ']. Make sure you have enough drive space to maintain the snapshot as the original database grows.' AS Details
								FROM    sys.databases dSnap
										INNER JOIN sys.databases dOriginal ON dSnap.source_database_id = dOriginal.database_id
																  AND dSnap.name NOT IN (
																  SELECT DISTINCT
																  DatabaseName
																  FROM
																  #SkipChecks )
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 79 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  79 AS CheckID ,
										100 AS Priority ,
										'Performance' AS FindingsGroup ,
										'Shrink Database Job' AS Finding ,
										'http://BrentOzar.com/go/autoshrink' AS URL ,
										'In the [' + j.[name] + '] job, step ['
										+ step.[step_name]
										+ '] has SHRINKDATABASE or SHRINKFILE, which may be causing database fragmentation.' AS Details
								FROM    msdb.dbo.sysjobs j
										INNER JOIN msdb.dbo.sysjobsteps step ON j.job_id = step.job_id
								WHERE   step.command LIKE N'%SHRINKDATABASE%'
										OR step.command LIKE N'%SHRINKFILE%'
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 81 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT  81 AS CheckID ,
										200 AS Priority ,
										'Non-Active Server Config' AS FindingsGroup ,
										cr.name AS Finding ,
										'http://www.BrentOzar.com/blitz/sp_configure/' AS URL ,
										( 'This sp_configure option isn''t running under its set value.  Its set value is '
										  + CAST(cr.[value] AS VARCHAR(100))
										  + ' and its running value is '
										  + CAST(cr.value_in_use AS VARCHAR(100))
										  + '. When someone does a RECONFIGURE or restarts the instance, this setting will start taking effect.' ) AS Details
								FROM    sys.configurations cr
								WHERE   cr.value &lt;&gt; cr.value_in_use
                                 AND NOT (cr.name = 'min server memory (MB)' AND cr.value IN (0,16) AND cr.value_in_use IN (0,16));
					END

				IF NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 123 )
					BEGIN
						INSERT  INTO #BlitzResults
								( CheckID ,
								  Priority ,
								  FindingsGroup ,
								  Finding ,
								  URL ,
								  Details
								)
								SELECT TOP 1 123 AS CheckID ,
										200 AS Priority ,
										'Informational' AS FindingsGroup ,
										'Agent Jobs Starting Simultaneously' AS Finding ,
										'http://BrentOzar.com/go/busyagent/' AS URL ,
										( 'Multiple SQL Server Agent jobs are configured to start simultaneously. For detailed schedule listings, see the query in the URL.' ) AS Details
								FROM    msdb.dbo.sysjobactivity
								WHERE start_execution_date &gt; DATEADD(dd, -14, GETDATE())
								GROUP BY start_execution_date HAVING COUNT(*) &gt; 1;
					END


				IF @CheckServerInfo = 1
					BEGIN

/*This checks Windows version. It would be better if Microsoft gave everything a separate build number, but whatever.*/
IF @ProductVersionMajor &gt;= 10 AND @ProductVersionMinor &gt;= 50 
			   AND NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 172 )
					BEGIN
					IF EXISTS ( SELECT  1
											FROM    sys.all_objects
											WHERE   name = 'dm_os_windows_info' )

					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )

							SELECT
							172 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Windows Version' AS [Finding] ,
							'https://en.wikipedia.org/wiki/List_of_Microsoft_Windows_versions' AS [URL] ,
							( CASE 
								WHEN [owi].[windows_release] = '5' THEN 'You''re running a really old version: Windows 2000, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] &gt; '5' AND [owi].[windows_release] &lt; '6' THEN 'You''re running a really old version: Windows Server 2003/2003R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] &gt;= '6' AND [owi].[windows_release] &lt;= '6.1' THEN 'You''re running a pretty old version: Windows: Server 2008/2008R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] = '6.2' THEN 'You''re running a rather modern version of Windows: Server 2012 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] = '6.3' THEN 'You''re running a pretty modern version of Windows: Server 2012R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								WHEN [owi].[windows_release] &gt; '6.3' THEN 'Hot dog! You''re living in the future! You''re running version ' + CAST([owi].[windows_release] AS VARCHAR(5))
								ELSE 'I have no idea which version of Windows you''re on. Sorry.'
								END
							   ) AS [Details]
							 FROM [sys].[dm_os_windows_info] [owi]

					END;
					END;

/*
This check hits the dm_os_process_memory system view
to see if locked_page_allocations_kb is &gt; 0,
which could indicate that locked pages in memory is enabled.
*/
IF @ProductVersionMajor &gt;= 10 AND  NOT EXISTS ( SELECT  1
								FROM    #SkipChecks
								WHERE   DatabaseName IS NULL AND CheckID = 166 )
					BEGIN
						  INSERT    INTO [#BlitzResults]
									( [CheckID] ,
									  [Priority] ,
									  [FindingsGroup] ,
									  [Finding] ,
									  [URL] ,
									  [Details] )
							SELECT
							166 AS [CheckID] ,
							250 AS [Priority] ,
							'Server Info' AS [FindingsGroup] ,
							'Locked Pages In Memory Enabled' AS [Finding] ,
							'http://BrentOzar.com/go/lpim' AS [URL] ,
							( 'You currently have '
							  + CASE WHEN [dopm].[locked_page_allocations_kb] / 1024. / 1024. &gt; 0
									 THEN CAST([dopm].[locked_page_allocations_kb] / 1024. / 1024. AS VARCHAR(100))
										  + ' GB'
									 ELSE CAST([dopm].[locked_page_allocations_kb] / 1024. AS VARCHAR(100))
										  + ' MB'
								END + ' of pages locked in memory.' ) AS [Details]
						  FROM
							[sys].[dm_os_process_memory] AS [dopm]
						  WHERE
							[dopm].[locked_page_allocations_kb] &gt; 0;
					END; 

			/* Server Info - Locked Pages In Memory Enabled - Check 166 - SQL Server 2016 SP1 and newer */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 166 )
							AND EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_os_sys_info'
													AND c.name = 'sql_memory_model' )
							BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  166 AS CheckID ,
			250 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Memory Model Unconventional'' AS Finding ,
			''http://BrentOzar.com/go/lpim'' AS URL ,
			''Memory Model: '' + CAST(sql_memory_model_desc AS NVARCHAR(100))
			FROM sys.dm_os_sys_info WHERE sql_memory_model &lt;&gt; 1';
										EXECUTE(@StringToExecute);
									END



			/*
			Starting with SQL Server 2014 SP2, Instant File Initialization 
			is logged in the SQL Server Error Log.
			*/
					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 184 )
							AND (@ProductVersionMajor &gt;= 13) OR (@ProductVersionMajor = 12 AND @ProductVersionMinor &gt;= 5000)
						BEGIN
							INSERT INTO #ErrorLog
							EXEC sys.xp_readerrorlog 0, 1, N'Database Instant File Initialization: enabled';

							IF @@ROWCOUNT &gt; 0
								INSERT  INTO #BlitzResults
										( CheckID ,
										  [Priority] ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT
												193 AS [CheckID] ,
												250 AS [Priority] ,
												'Server Info' AS [FindingsGroup] ,
												'Instant File Initialization Enabled' AS [Finding] ,
												'http://BrentOzar.com/go/instant' AS [URL] ,
												'The service account has the Perform Volume Maintenance Tasks permission.'
						END; 

			/* Server Info - Instant File Initialization Not Enabled - Check 192 - SQL Server 2016 SP1 and newer */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 192 )
							AND EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_server_services'
													AND c.name = 'instant_file_initialization_enabled' )
							BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  192 AS CheckID ,
			50 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Instant File Initialization Not Enabled'' AS Finding ,
			''http://BrentOzar.com/go/instant'' AS URL ,
			''Consider enabling IFI for faster restores and data file growths.''
			FROM sys.dm_server_services WHERE instant_file_initialization_enabled &lt;&gt; ''Y'' AND filename LIKE ''%sqlservr.exe%''';
										EXECUTE(@StringToExecute);
									END





					IF NOT EXISTS ( SELECT  1
									FROM    #SkipChecks
									WHERE   DatabaseName IS NULL AND CheckID = 130 )
						BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
											SELECT  130 AS CheckID ,
													250 AS Priority ,
													'Server Info' AS FindingsGroup ,
													'Server Name' AS Finding ,
													'http://BrentOzar.com/go/servername' AS URL ,
													@@SERVERNAME AS Details
												WHERE @@SERVERNAME IS NOT NULL;
								END;



						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 83 )
							BEGIN
								IF EXISTS ( SELECT  *
											FROM    sys.all_objects
											WHERE   name = 'dm_server_services' )
									BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
				SELECT  83 AS CheckID ,
				250 AS Priority ,
				''Server Info'' AS FindingsGroup ,
				''Services'' AS Finding ,
				'''' AS URL ,
				N''Service: '' + servicename + N'' runs under service account '' + service_account + N''. Last startup time: '' + COALESCE(CAST(CAST(last_startup_time AS DATETIME) AS VARCHAR(50)), ''not shown.'') + ''. Startup type: '' + startup_type_desc + N'', currently '' + status_desc + ''.''
				FROM sys.dm_server_services;'
										EXECUTE(@StringToExecute);
									END
							END

			/* Check 84 - SQL Server 2012 */
						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 84 )
							BEGIN
								IF EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_os_sys_info'
													AND c.name = 'physical_memory_kb' )
									BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  84 AS CheckID ,
			250 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Hardware'' AS Finding ,
			'''' AS URL ,
			''Logical processors: '' + CAST(cpu_count AS VARCHAR(50)) + ''. Physical memory: '' + CAST( CAST(ROUND((physical_memory_kb / 1024.0 / 1024), 1) AS INT) AS VARCHAR(50)) + ''GB.''
			FROM sys.dm_os_sys_info';
										EXECUTE(@StringToExecute);
									END

			/* Check 84 - SQL Server 2008 */
								IF EXISTS ( SELECT  *
											FROM    sys.all_objects o
													INNER JOIN sys.all_columns c ON o.object_id = c.object_id
											WHERE   o.name = 'dm_os_sys_info'
													AND c.name = 'physical_memory_in_bytes' )
									BEGIN
										SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
			SELECT  84 AS CheckID ,
			250 AS Priority ,
			''Server Info'' AS FindingsGroup ,
			''Hardware'' AS Finding ,
			'''' AS URL ,
			''Logical processors: '' + CAST(cpu_count AS VARCHAR(50)) + ''. Physical memory: '' + CAST( CAST(ROUND((physical_memory_in_bytes / 1024.0 / 1024 / 1024), 1) AS INT) AS VARCHAR(50)) + ''GB.''
			FROM sys.dm_os_sys_info';
										EXECUTE(@StringToExecute);
									END
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 85 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  85 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'SQL Server Service' AS Finding ,
												'' AS URL ,
												N'Version: '
												+ CAST(SERVERPROPERTY('productversion') AS NVARCHAR(100))
												+ N'. Patch Level: '
												+ CAST(SERVERPROPERTY('productlevel') AS NVARCHAR(100))
												+ N'. Edition: '
												+ CAST(SERVERPROPERTY('edition') AS VARCHAR(100))
												+ N'. AlwaysOn Enabled: '
												+ CAST(COALESCE(SERVERPROPERTY('IsHadrEnabled'),
																0) AS VARCHAR(100))
												+ N'. AlwaysOn Mgr Status: '
												+ CAST(COALESCE(SERVERPROPERTY('HadrManagerStatus'),
																0) AS VARCHAR(100))
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 88 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  88 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'SQL Server Last Restart' AS Finding ,
												'' AS URL ,
												CAST(create_date AS VARCHAR(100))
										FROM    sys.databases
										WHERE   database_id = 2
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 91 )
							BEGIN
								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  91 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'Server Last Restart' AS Finding ,
												'' AS URL ,
												CAST(DATEADD(SECOND, (ms_ticks/1000)*(-1), GETDATE()) AS nvarchar(25))
										FROM sys.dm_os_sys_info
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 92 )
							BEGIN
								INSERT  INTO #driveInfo
										( drive, SIZE )
										EXEC master..xp_fixeddrives

								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT  92 AS CheckID ,
												250 AS Priority ,
												'Server Info' AS FindingsGroup ,
												'Drive ' + i.drive + ' Space' AS Finding ,
												'' AS URL ,
												CAST(i.SIZE AS VARCHAR)
												+ 'MB free on ' + i.drive
												+ ' drive' AS Details
										FROM    #driveInfo AS i
								DROP TABLE #driveInfo
							END


						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 103 )
							AND EXISTS ( SELECT *
										 FROM   sys.all_objects o
												INNER JOIN sys.all_columns c ON o.object_id = c.object_id
										 WHERE  o.name = 'dm_os_sys_info'
												AND c.name = 'virtual_machine_type_desc' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
									SELECT 103 AS CheckID,
									250 AS Priority,
									''Server Info'' AS FindingsGroup,
									''Virtual Server'' AS Finding,
									''http://BrentOzar.com/go/virtual'' AS URL,
									''Type: ('' + virtual_machine_type_desc + '')'' AS Details
									FROM sys.dm_os_sys_info
									WHERE virtual_machine_type &lt;&gt; 0';
								EXECUTE(@StringToExecute);
							END

						IF NOT EXISTS ( SELECT  1
										FROM    #SkipChecks
										WHERE   DatabaseName IS NULL AND CheckID = 114 )
							AND EXISTS ( SELECT *
										 FROM   sys.all_objects o
										 WHERE  o.name = 'dm_os_memory_nodes' )
							AND EXISTS ( SELECT *
										 FROM   sys.all_objects o
										 INNER JOIN sys.all_columns c ON o.object_id = c.object_id
										 WHERE  o.name = 'dm_os_nodes'
                                	 		AND c.name = 'processor_group' )
							BEGIN
								SET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
										SELECT  114 AS CheckID ,
												250 AS Priority ,
												''Server Info'' AS FindingsGroup ,
												''Hardware - NUMA Config'' AS Finding ,
												'''' AS URL ,
												''Node: '' + CAST(n.node_id AS NVARCHAR(10)) + '' State: '' + node_state_desc
												+ '' Online schedulers: '' + CAST(n.online_scheduler_count AS NVARCHAR(10)) + '' Offline schedulers: '' + CAST(oac.offline_schedulers AS VARCHAR(100)) + '' Processor Group: '' + CAST(n.processor_group AS NVARCHAR(10))
												+ '' Memory node: '' + CAST(n.memory_node_id AS NVARCHAR(10)) + '' Memory VAS Reserved GB: '' + CAST(CAST((m.virtual_address_space_reserved_kb / 1024.0 / 1024) AS INT) AS NVARCHAR(100))
										FROM sys.dm_os_nodes n
										INNER JOIN sys.dm_os_memory_nodes m ON n.memory_node_id = m.memory_node_id
										OUTER APPLY (SELECT 
										COUNT(*) AS [offline_schedulers]
										FROM sys.dm_os_schedulers dos
										WHERE n.node_id = dos.parent_node_id 
										AND dos.status = ''VISIBLE OFFLINE''
										) oac
										WHERE n.node_state_desc NOT LIKE ''%DAC%''
										ORDER BY n.node_id'
								EXECUTE(@StringToExecute);
							END


							IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 106 )
											AND (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1
                                AND DATALENGTH( COALESCE( @base_tracefilename, '' ) ) &gt; DATALENGTH('.TRC')
							BEGIN

								INSERT  INTO #BlitzResults
										( CheckID ,
										  Priority ,
										  FindingsGroup ,
										  Finding ,
										  URL ,
										  Details
										)
										SELECT
												 106 AS CheckID
												,250 AS Priority
												,'Server Info' AS FindingsGroup
												,'Default Trace Contents' AS Finding
												,'http://BrentOzar.com/go/trace' AS URL
												,'The default trace holds '+cast(DATEDIFF(hour,MIN(StartTime),GETDATE())as varchar)+' hours of data'
												+' between '+cast(Min(StartTime) as varchar)+' and '+cast(GETDATE()as varchar)
												+('. The default trace files are located in: '+left( @curr_tracefilename,len(@curr_tracefilename) - @indx)
												) as Details
										FROM    ::fn_trace_gettable( @base_tracefilename, default )
										WHERE EventClass BETWEEN 65500 and 65600
							END /* CheckID 106 */


							IF NOT EXISTS ( SELECT  1
											FROM    #SkipChecks
											WHERE   DatabaseName IS NULL AND CheckID = 152 )
							BEGIN
								IF EXISTS (SELECT * FROM sys.dm_os_wait_stats ws
											LEFT OUTER JOIN #IgnorableWaits i ON ws.wait_type = i.wait_type
											WHERE wait_time_ms &gt; .1 * @CpuMsSinceWaitsCleared AND waiting_tasks_count &gt; 0 
											AND i.wait_type IS NULL)
									BEGIN
									/* Check for waits that have had more than 10% of the server's wait time */
									WITH os(wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms)
									AS
									(SELECT ws.wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms
										FROM sys.dm_os_wait_stats ws
										LEFT OUTER JOIN #IgnorableWaits i ON ws.wait_type = i.wait_type
											WHERE i.wait_type IS NULL 
												AND wait_time_ms &gt; .1 * @CpuMsSinceWaitsCleared
												AND waiting_tasks_count &gt; 0)
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
											SELECT TOP 9
													 152 AS CheckID
													,240 AS Priority
													,'Wait Stats' AS FindingsGroup
													, CAST(ROW_NUMBER() OVER(ORDER BY os.wait_time_ms DESC) AS NVARCHAR(10)) + N' - ' + os.wait_type AS Finding
													,'http://BrentOzar.com/go/waits' AS URL
													, Details = CAST(CAST(SUM(os.wait_time_ms / 1000.0 / 60 / 60) OVER (PARTITION BY os.wait_type) AS NUMERIC(18,1)) AS NVARCHAR(20)) + N' hours of waits, ' +
													CAST(CAST((SUM(60.0 * os.wait_time_ms) OVER (PARTITION BY os.wait_type) ) / @MsSinceWaitsCleared  AS NUMERIC(18,1)) AS NVARCHAR(20)) + N' minutes average wait time per hour, ' + 
													/* CAST(CAST(
														100.* SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) 
														/ (1. * SUM(os.wait_time_ms) OVER () )
														AS NUMERIC(18,1)) AS NVARCHAR(40)) + N'% of waits, ' + */
													CAST(CAST(
														100. * SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type) 
														/ (1. * SUM(os.wait_time_ms) OVER ())
														AS NUMERIC(18,1)) AS NVARCHAR(40)) + N'% signal wait, ' + 
													CAST(SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) AS NVARCHAR(40)) + N' waiting tasks, ' +
													CAST(CASE WHEN  SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) &gt; 0
													THEN
														CAST(
															SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type)
																/ (1. * SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type)) 
															AS NUMERIC(18,1))
													ELSE 0 END AS NVARCHAR(40)) + N' ms average wait time.'
											FROM    os
											ORDER BY SUM(os.wait_time_ms / 1000.0 / 60 / 60) OVER (PARTITION BY os.wait_type) DESC;
									END /* IF EXISTS (SELECT * FROM sys.dm_os_wait_stats WHERE wait_time_ms &gt; 0 AND waiting_tasks_count &gt; 0) */

								/* If no waits were found, add a note about that */
								IF NOT EXISTS (SELECT * FROM #BlitzResults WHERE CheckID IN (107, 108, 109, 121, 152, 162))
								BEGIN
									INSERT  INTO #BlitzResults
											( CheckID ,
											  Priority ,
											  FindingsGroup ,
											  Finding ,
											  URL ,
											  Details
											)
										VALUES (153, 240, 'Wait Stats', 'No Significant Waits Detected', 'http://BrentOzar.com/go/waits', 'This server might be just sitting around idle, or someone may have cleared wait stats recently.');
								END
							END /* CheckID 152 */    

					END /* IF @CheckServerInfo = 1 */
			END /* IF ( ( SERVERPROPERTY('ServerName') NOT IN ( SELECT ServerName */


				/* Delete priorites they wanted to skip. */
				IF @IgnorePrioritiesAbove IS NOT NULL
					DELETE  #BlitzResults
					WHERE   [Priority] &gt; @IgnorePrioritiesAbove AND CheckID &lt;&gt; -1;

				IF @IgnorePrioritiesBelow IS NOT NULL
					DELETE  #BlitzResults
					WHERE   [Priority] &lt; @IgnorePrioritiesBelow AND CheckID &lt;&gt; -1;

				/* Delete checks they wanted to skip. */
				IF @SkipChecksTable IS NOT NULL
					BEGIN
						DELETE  FROM #BlitzResults
						WHERE   DatabaseName IN ( SELECT    DatabaseName
												  FROM      #SkipChecks
												  WHERE CheckID IS NULL
												  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName')));
						DELETE  FROM #BlitzResults
						WHERE   CheckID IN ( SELECT    CheckID
												  FROM      #SkipChecks
												  WHERE DatabaseName IS NULL
												  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName')));
						DELETE r FROM #BlitzResults r
							INNER JOIN #SkipChecks c ON r.DatabaseName = c.DatabaseName and r.CheckID = c.CheckID
												  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName'));
					END

				/* Add summary mode */
				IF @SummaryMode &gt; 0
					BEGIN
					UPDATE #BlitzResults
					  SET Finding = br.Finding + ' (' + CAST(brTotals.recs AS NVARCHAR(20)) + ')'
					  FROM #BlitzResults br
						INNER JOIN (SELECT FindingsGroup, Finding, Priority, COUNT(*) AS recs FROM #BlitzResults GROUP BY FindingsGroup, Finding, Priority) brTotals ON br.FindingsGroup = brTotals.FindingsGroup AND br.Finding = brTotals.Finding AND br.Priority = brTotals.Priority
						WHERE brTotals.recs &gt; 1;

					DELETE br
					  FROM #BlitzResults br
					  WHERE EXISTS (SELECT * FROM #BlitzResults brLower WHERE br.FindingsGroup = brLower.FindingsGroup AND br.Finding = brLower.Finding AND br.Priority = brLower.Priority AND br.ID &gt; brLower.ID);

					END

				/* Add credits for the nice folks who put so much time into building and maintaining this for free: */
				INSERT  INTO #BlitzResults
						( CheckID ,
						  Priority ,
						  FindingsGroup ,
						  Finding ,
						  URL ,
						  Details
						)
				VALUES  ( -1 ,
						  255 ,
						  'Thanks!' ,
						  'From Your Community Volunteers' ,
						  'http://FirstResponderKit.org' ,
						  'We hope you found this tool useful.'
						);

				INSERT  INTO #BlitzResults
						( CheckID ,
						  Priority ,
						  FindingsGroup ,
						  Finding ,
						  URL ,
						  Details

						)
				VALUES  ( -1 ,
						  0 ,
						  'sp_Blitz ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)),
						  'SQL Server First Responder Kit' ,
						  'http://FirstResponderKit.org/' ,
						  'To get help or add your own contributions, join us at http://FirstResponderKit.org.'

						);

				INSERT  INTO #BlitzResults
						( CheckID ,
						  Priority ,
						  FindingsGroup ,
						  Finding ,
						  URL ,
						  Details

						)
				SELECT 156 ,
						  254 ,
						  'Rundate' ,
						  GETDATE() ,
						  'http://FirstResponderKit.org/' ,
						  'Captain''s log: stardate something and something...';
						  
				IF @EmailRecipients IS NOT NULL
					BEGIN
					/* Database mail won't work off a local temp table. I'm not happy about this hacky workaround either. */
					IF (OBJECT_ID('tempdb..##BlitzResults', 'U') IS NOT NULL) DROP TABLE ##BlitzResults;
					SELECT * INTO ##BlitzResults FROM #BlitzResults;
					SET @query_result_separator = char(9);
					SET @StringToExecute = 'SET NOCOUNT ON;SELECT [Priority] , [FindingsGroup] , [Finding] , [DatabaseName] , [URL] ,  [Details] , CheckID FROM ##BlitzResults ORDER BY Priority , FindingsGroup, Finding, Details; SET NOCOUNT OFF;';
					SET @EmailSubject = 'sp_Blitz Results for ' + @@SERVERNAME;
					SET @EmailBody = 'sp_Blitz ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)) + '. http://FirstResponderKit.org';
					IF @EmailProfile IS NULL
						EXEC msdb.dbo.sp_send_dbmail
							@recipients = @EmailRecipients,
							@subject = @EmailSubject,
							@body = @EmailBody,
							@query_attachment_filename = 'sp_Blitz-Results.csv',
							@attach_query_result_as_file = 1,
							@query_result_header = 1,
							@query_result_width = 32767,
							@append_query_error = 1,
							@query_result_no_padding = 1,
							@query_result_separator = @query_result_separator,
							@query = @StringToExecute;
					ELSE
						EXEC msdb.dbo.sp_send_dbmail
							@profile_name = @EmailProfile,
							@recipients = @EmailRecipients,
							@subject = @EmailSubject,
							@body = @EmailBody,
							@query_attachment_filename = 'sp_Blitz-Results.csv',
							@attach_query_result_as_file = 1,
							@query_result_header = 1,
							@query_result_width = 32767,
							@append_query_error = 1,
							@query_result_no_padding = 1,
							@query_result_separator = @query_result_separator,
							@query = @StringToExecute;
					IF (OBJECT_ID('tempdb..##BlitzResults', 'U') IS NOT NULL) DROP TABLE ##BlitzResults;
				END

				/* Checks if @OutputServerName is populated with a valid linked server, and that the database name specified is valid */
				DECLARE @ValidOutputServer BIT
				DECLARE @ValidOutputLocation BIT
				DECLARE @LinkedServerDBCheck NVARCHAR(2000)
				DECLARE @ValidLinkedServerDB INT
				DECLARE @tmpdbchk table (cnt int)
				IF @OutputServerName IS NOT NULL
					BEGIN
						IF EXISTS (SELECT server_id FROM sys.servers WHERE QUOTENAME([name]) = @OutputServerName)
							BEGIN
								SET @LinkedServerDBCheck = 'SELECT 1 WHERE EXISTS (SELECT * FROM '+@OutputServerName+'.master.sys.databases WHERE QUOTENAME([name]) = '''+@OutputDatabaseName+''')'
								INSERT INTO @tmpdbchk EXEC sys.sp_executesql @LinkedServerDBCheck
								SET @ValidLinkedServerDB = (SELECT COUNT(*) FROM @tmpdbchk)
								IF (@ValidLinkedServerDB &gt; 0)
									BEGIN
										SET @ValidOutputServer = 1
										SET @ValidOutputLocation = 1
									END
								ELSE
									RAISERROR('The specified database was not found on the output server', 16, 0)
							END
						ELSE
							BEGIN
								RAISERROR('The specified output server was not found', 16, 0)
							END
					END
				ELSE
					BEGIN
						IF @OutputDatabaseName IS NOT NULL
							AND @OutputSchemaName IS NOT NULL
							AND @OutputTableName IS NOT NULL
							AND EXISTS ( SELECT *
								 FROM   sys.databases
								 WHERE  QUOTENAME([name]) = @OutputDatabaseName)
							BEGIN
								SET @ValidOutputLocation = 1
							END
						ELSE IF @OutputDatabaseName IS NOT NULL
							AND @OutputSchemaName IS NOT NULL
							AND @OutputTableName IS NOT NULL
							AND NOT EXISTS ( SELECT *
								 FROM   sys.databases
								 WHERE  QUOTENAME([name]) = @OutputDatabaseName)
							BEGIN
								RAISERROR('The specified output database was not found on this server', 16, 0)
							END
						ELSE
							BEGIN
								SET @ValidOutputLocation = 0 
							END
					END

				/* @OutputTableName lets us export the results to a permanent table */
				IF @ValidOutputLocation = 1
					BEGIN
						SET @StringToExecute = 'USE '
							+ @OutputDatabaseName
							+ '; IF EXISTS(SELECT * FROM '
							+ @OutputDatabaseName
							+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
							+ @OutputSchemaName
							+ ''') AND NOT EXISTS (SELECT * FROM '
							+ @OutputDatabaseName
							+ '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''
							+ @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''
							+ @OutputTableName + ''') CREATE TABLE '
							+ @OutputSchemaName + '.'
							+ @OutputTableName
							+ ' (ID INT IDENTITY(1,1) NOT NULL,
								ServerName NVARCHAR(128),
								CheckDate DATETIMEOFFSET,
								Priority TINYINT ,
								FindingsGroup VARCHAR(50) ,
								Finding VARCHAR(200) ,
								DatabaseName NVARCHAR(128),
								URL VARCHAR(200) ,
								Details NVARCHAR(4000) ,
								QueryPlan [XML] NULL ,
								QueryPlanFiltered [NVARCHAR](MAX) NULL,
								CheckID INT ,
								CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
						IF @ValidOutputServer = 1
							BEGIN
								SET @StringToExecute = REPLACE(@StringToExecute,''''+@OutputSchemaName+'''',''''''+@OutputSchemaName+'''''')
								SET @StringToExecute = REPLACE(@StringToExecute,''''+@OutputTableName+'''',''''''+@OutputTableName+'''''')
								SET @StringToExecute = REPLACE(@StringToExecute,'[XML]','[NVARCHAR](MAX)')
								EXEC('EXEC('''+@StringToExecute+''') AT ' + @OutputServerName);
							END   
						ELSE
							BEGIN
								EXEC(@StringToExecute);
							END
						IF @ValidOutputServer = 1
							BEGIN
								SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
								+ @OutputServerName + '.'
								+ @OutputDatabaseName
								+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
								+ @OutputSchemaName + ''') INSERT '
								+ @OutputServerName + '.'
								+ @OutputDatabaseName + '.'
								+ @OutputSchemaName + '.'
								+ @OutputTableName
								+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''
								+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
								+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, CAST(QueryPlan AS NVARCHAR(MAX)), QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';

								EXEC(@StringToExecute);
							END   
						ELSE
							BEGIN
								SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
								+ @OutputDatabaseName
								+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
								+ @OutputSchemaName + ''') INSERT '
								+ @OutputDatabaseName + '.'
								+ @OutputSchemaName + '.'
								+ @OutputTableName
								+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''
								+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
								+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';
								
								EXEC(@StringToExecute);
							END
					END
				ELSE IF (SUBSTRING(@OutputTableName, 2, 2) = '##')
					BEGIN
						IF @ValidOutputServer = 1
							BEGIN
								RAISERROR('Due to the nature of temporary tables, outputting to a linked server requires a permanent table.', 16, 0)
							END
						ELSE
							BEGIN
								SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'
									+ @OutputTableName
									+ ''') IS NOT NULL) DROP TABLE ' + @OutputTableName + ';'
									+ 'CREATE TABLE '
									+ @OutputTableName
									+ ' (ID INT IDENTITY(1,1) NOT NULL,
										ServerName NVARCHAR(128),
										CheckDate DATETIMEOFFSET,
										Priority TINYINT ,
										FindingsGroup VARCHAR(50) ,
										Finding VARCHAR(200) ,
										DatabaseName NVARCHAR(128),
										URL VARCHAR(200) ,
										Details NVARCHAR(4000) ,
										QueryPlan [XML] NULL ,
										QueryPlanFiltered [NVARCHAR](MAX) NULL,
										CheckID INT ,
										CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
									+ ' INSERT '
									+ @OutputTableName
									+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''
									+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
									+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';
							
									EXEC(@StringToExecute);
							END
					END
				ELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')
					BEGIN
						RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)
					END


				DECLARE @separator AS VARCHAR(1);
				IF @OutputType = 'RSV'
					SET @separator = CHAR(31);
				ELSE
					SET @separator = ',';

				IF @OutputType = 'COUNT'
					BEGIN
						SELECT  COUNT(*) AS Warnings
						FROM    #BlitzResults
					END
				ELSE
					IF @OutputType IN ( 'CSV', 'RSV' )
						BEGIN

							SELECT  Result = CAST([Priority] AS NVARCHAR(100))
									+ @separator + CAST(CheckID AS NVARCHAR(100))
									+ @separator + COALESCE([FindingsGroup],
															'(N/A)') + @separator
									+ COALESCE([Finding], '(N/A)') + @separator
									+ COALESCE(DatabaseName, '(N/A)') + @separator
									+ COALESCE([URL], '(N/A)') + @separator
									+ COALESCE([Details], '(N/A)')
							FROM    #BlitzResults
							ORDER BY Priority ,
									FindingsGroup ,
									Finding ,
									DatabaseName ,
									Details;
						END
					ELSE IF @OutputXMLasNVARCHAR = 1 AND @OutputType &lt;&gt; 'NONE'
						BEGIN
							SELECT  [Priority] ,
									[FindingsGroup] ,
									[Finding] ,
									[DatabaseName] ,
									[URL] ,
									[Details] ,
									CAST([QueryPlan] AS NVARCHAR(MAX)) AS QueryPlan,
									[QueryPlanFiltered] ,
									CheckID
							FROM    #BlitzResults
							ORDER BY Priority ,
									FindingsGroup ,
									Finding ,
									DatabaseName ,
									Details;
						END
					ELSE IF @OutputType = 'MARKDOWN'
						BEGIN
							WITH Results AS (SELECT row_number() OVER (ORDER BY Priority, FindingsGroup, Finding, DatabaseName, Details) AS rownum, * 
												FROM #BlitzResults
												WHERE Priority &gt; 0 AND Priority &lt; 255 AND FindingsGroup IS NOT NULL AND Finding IS NOT NULL
												AND FindingsGroup &lt;&gt; 'Security' /* Specifically excluding security checks for public exports */)
							SELECT 
								CASE 
									WHEN r.Priority &lt;&gt; COALESCE(rPrior.Priority, 0) OR r.FindingsGroup &lt;&gt; rPrior.FindingsGroup  THEN @crlf + N'**Priority ' + CAST(COALESCE(r.Priority,N'') AS NVARCHAR(5)) + N': ' + COALESCE(r.FindingsGroup,N'') + N'**:' + @crlf + @crlf 
									ELSE N'' 
								END
								+ CASE WHEN r.Finding &lt;&gt; COALESCE(rPrior.Finding,N'') AND r.Finding &lt;&gt; rNext.Finding THEN N'- ' + COALESCE(r.Finding,N'') + N' ' + COALESCE(r.DatabaseName, N'') + N' - ' + COALESCE(r.Details,N'') + @crlf
									   WHEN r.Finding &lt;&gt; COALESCE(rPrior.Finding,N'') AND r.Finding = rNext.Finding AND r.Details = rNext.Details THEN N'- ' + COALESCE(r.Finding,N'') + N' - ' + COALESCE(r.Details,N'') + @crlf + @crlf + N'    * ' + COALESCE(r.DatabaseName, N'') + @crlf
									   WHEN r.Finding &lt;&gt; COALESCE(rPrior.Finding,N'') AND r.Finding = rNext.Finding THEN N'- ' + COALESCE(r.Finding,N'') + @crlf + CASE WHEN r.DatabaseName IS NULL THEN N'' ELSE  N'    * ' + COALESCE(r.DatabaseName,N'') END + CASE WHEN r.Details &lt;&gt; rPrior.Details THEN N' - ' + COALESCE(r.Details,N'') + @crlf ELSE '' END
									   ELSE CASE WHEN r.DatabaseName IS NULL THEN N'' ELSE  N'    * ' + COALESCE(r.DatabaseName,N'') END + CASE WHEN r.Details &lt;&gt; rPrior.Details THEN N' - ' + COALESCE(r.Details,N'') + @crlf ELSE N'' + @crlf END 
								END + @crlf 
							  FROM Results r
							  LEFT OUTER JOIN Results rPrior ON r.rownum = rPrior.rownum + 1
							  LEFT OUTER JOIN Results rNext ON r.rownum = rNext.rownum - 1
							ORDER BY r.rownum FOR XML PATH(N'');
						END
					ELSE IF @OutputType &lt;&gt; 'NONE'
						BEGIN
							SELECT  [Priority] ,
									[FindingsGroup] ,
									[Finding] ,
									[DatabaseName] ,
									[URL] ,
									[Details] ,
									[QueryPlan] ,
									[QueryPlanFiltered] ,
									CheckID
							FROM    #BlitzResults
							ORDER BY Priority ,
									FindingsGroup ,
									Finding ,
									DatabaseName ,
									Details;
						END

				DROP TABLE #BlitzResults;

				IF @OutputProcedureCache = 1
				AND @CheckProcedureCache = 1
					SELECT TOP 20
							total_worker_time / execution_count AS AvgCPU ,
							total_worker_time AS TotalCPU ,
							CAST(ROUND(100.00 * total_worker_time
									   / ( SELECT   SUM(total_worker_time)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentCPU ,
							total_elapsed_time / execution_count AS AvgDuration ,
							total_elapsed_time AS TotalDuration ,
							CAST(ROUND(100.00 * total_elapsed_time
									   / ( SELECT   SUM(total_elapsed_time)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentDuration ,
							total_logical_reads / execution_count AS AvgReads ,
							total_logical_reads AS TotalReads ,
							CAST(ROUND(100.00 * total_logical_reads
									   / ( SELECT   SUM(total_logical_reads)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentReads ,
							execution_count ,
							CAST(ROUND(100.00 * execution_count
									   / ( SELECT   SUM(execution_count)
										   FROM     sys.dm_exec_query_stats
										 ), 2) AS MONEY) AS PercentExecutions ,
							CASE WHEN DATEDIFF(mi, creation_time,
											   qs.last_execution_time) = 0 THEN 0
								 ELSE CAST(( 1.00 * execution_count / DATEDIFF(mi,
																  creation_time,
																  qs.last_execution_time) ) AS MONEY)
							END AS executions_per_minute ,
							qs.creation_time AS plan_creation_time ,
							qs.last_execution_time ,
							text ,
							text_filtered ,
							query_plan ,
							query_plan_filtered ,
							sql_handle ,
							query_hash ,
							plan_handle ,
							query_plan_hash
					FROM    #dm_exec_query_stats qs
					ORDER BY CASE UPPER(@CheckProcedureCacheFilter)
							   WHEN 'CPU' THEN total_worker_time
							   WHEN 'READS' THEN total_logical_reads
							   WHEN 'EXECCOUNT' THEN execution_count
							   WHEN 'DURATION' THEN total_elapsed_time
							   ELSE total_worker_time
							 END DESC

	END /* ELSE -- IF @OutputType = 'SCHEMA' */

    SET NOCOUNT OFF;
GO

/*
--Sample execution call with the most common parameters:
EXEC [dbo].[sp_Blitz]
    @CheckUserDatabaseObjects = 1 ,
    @CheckProcedureCache = 0 ,
    @OutputType = 'TABLE' ,
    @OutputProcedureCache = 0 ,
    @CheckProcedureCacheFilter = NULL,
    @CheckServerInfo = 1
*/
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_BlitzFirst_____For_non-admins</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_BlitzFirst_____For_non-admins</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--To grant permissions to non-SA users, check out Erland Sommarskog’s post on Giving Permissions through Stored Procedures – specifically, 
--the section on certificates. The below example follows his examples to create a certificate, create a user based on that certificate,
-- grant SA permissions to the user, and then sign the stored procedure and let the public run it:

USE master;
GO
CREATE CERTIFICATE sp_BlitzFirst_cert
ENCRYPTION BY PASSWORD = '5OClockSomewhere'
WITH SUBJECT = 'Certificate for sp_BlitzFirst',
START_DATE = '20130711', EXPIRY_DATE = '21000101';
GO
CREATE LOGIN sp_BlitzFirst_login FROM CERTIFICATE sp_BlitzFirst_cert;
GO
CREATE USER sp_BlitzFirst_login FROM CERTIFICATE sp_BlitzFirst_cert;
GO
GRANT EXECUTE ON dbo.sp_BlitzFirst TO sp_BlitzFirst_login;
GO
GRANT CONTROL SERVER TO sp_BlitzFirst_login;
GO
ADD SIGNATURE TO sp_BlitzFirst BY CERTIFICATE sp_BlitzFirst_cert
WITH PASSWORD = '5OClockSomewhere';
GO
GRANT EXECUTE ON dbo.sp_BlitzFirst TO [public];
GO
--Now anybody can run sp_BlitzFirst even if they don’t have SA-level permissions.

--Note: whenever you update sp_BlitzFirst, you’ll need to reassign the permissions by adding the signature again:

ADD SIGNATURE TO sp_BlitzFirst BY CERTIFICATE sp_BlitzFirst_cert
WITH PASSWORD = 'Get lucky';
GO
GRANT EXECUTE ON dbo.sp_BlitzFirst TO [public];
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_BlitzFirst_____Notes</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_BlitzFirst_____Notes</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
EXEC sp_BlitzFirst @ExpertMode = 1

--Common sp_BlitzFirst Parameters

--@ExpertMode = 1 – doesn’t do more in-depth checks, but DOES return a whole lot more data, including sections on wait stats, file stats, and Perfmon counters.

--@SinceStartup = 1 – displays wait stats, file stats, and Perfmon counters since the SQL Server started up.

--@Seconds = 5 – by default, we take a 5-second sample of activity, but you can take a longer sample if you want to run a load test or demo.

--Storing sp_BlitzFirst Results in a Table

--sp_BlitzFirst® can log results to a table if you use the @OutputDatabase* parameters like this:

EXEC sp_BlitzFirst 
  @OutputDatabaseName = 'DBAtools', 
  @OutputSchemaName = 'dbo', 
  @OutputTableName = 'BlitzFirstResults'

--If the table doesn’t exist, it will get created – otherwise the new rows just get added to the end of the table. 
--Set up a SQL Server Agent job to run that every X minutes, and then you can do this:

EXEC sp_BlitzFirst @AsOf = '2015-02-23 18:45', @OutputDatabaseName = 'DBAtools', @OutputSchemaName = 'dbo', @OutputTableName = 'BlitzFirstResults'

--sp_BlitzFirst® will look in the output table for all results within 15 minutes of that time, 
--and return them in chronological order. 
--(Note: The CheckDate column in the table returns the time of the first sample in that period.) 
--That way, you can see why the server was slow last night – or if it was operating normally.

--Note that sp_BlitzFirst® does not clean out past records for you, so I’d suggest doing a truncate-table job also against that same table once a week. 
--Since it can contain execution plans and queries, the data can get pretty big quickly.

--You can also use these parameters to persist additional performance diagnostics over time:

@OutputTableNameFileStats – contents of sys.dm_io_virtual_file_stats
@OutputTableNamePerfmonStats – contents of sys.dm_os_performance_counters
@OutputTableNameWaitStats – contents of sys.dm_os_wait_stats, with common harmless waits filtered out
All three of these DMVs have cumulative data – meaning, if you query them, you’ll see total numbers since the SQL Server was restarted or the counters were cleared out manually.

--To query the past data, use the delta views that sp_BlitzFirst automatically creates for you. Whatever your table name inputs were, 
--just add _Deltas to the end of them, and you’ll get data with differences from each pass.

--For example, this query will give you the totals for a 10-minute time window:

DECLARE @CheckDateStart VARCHAR(50) = '2016-08-09 13:40 -07:00';
DECLARE @CheckDateEnd VARCHAR(50) = DATEADD(MI, 10, CAST(@CheckDateStart AS DATETIMEOFFSET));
SELECT wait_type, SUM(wait_time_ms_delta / 60 / 1000) AS wait_time_minutes, SUM(waiting_tasks_count_delta) AS waiting_tasks
FROM DBAmetrics.dbo.BlitzFirstResults_WaitStats_Deltas d
WHERE d.CheckDate BETWEEN @CheckDateStart AND @CheckDateEnd
AND ServerName = 'WIN-BJJP8BNV8QA\SQL2016'
GROUP BY wait_type
HAVING SUM(waiting_tasks_count_delta) &gt; 0
ORDER BY 2 DESC;
SELECT object_name, counter_name, MIN(CheckDate) AS CheckDateMin, MAX(CheckDate) AS CheckDateMax,
   MIN(cntr_value) AS cntr_value_min, MAX(cntr_value) AS cntr_value_max,
   (1.0 * MAX(cntr_value) - MIN(cntr_value)) / (DATEDIFF(ss,MIN(CheckDate), MAX(CheckDate))) AS BatchRequestsPerSecond
FROM DBAmetrics.dbo.BlitzFirstResults_PerfmonStats d
WHERE d.CheckDate BETWEEN @CheckDateStart AND @CheckDateEnd
AND ServerName = 'WIN-BJJP8BNV8QA\SQL2016'
GROUP BY object_name, counter_name
ORDER BY 1, 2;
SELECT DatabaseName, TypeDesc, FileLogicalName, DatabaseID, FileID,
   MIN(CheckDate) AS CheckDateMin, MAX(CheckDate) AS CheckDateMax,
   MAX(num_of_reads) - MIN(num_of_reads) AS Reads,
   (MAX(bytes_read) - MIN(bytes_read)) / 1024.0 / 1024 AS ReadsMB,
   ISNULL((MAX(bytes_read * 1.0) - MIN(bytes_read)) / NULLIF((MAX(num_of_reads) - MIN(num_of_reads)),0) / 1024, 0) AS ReadSizeAvgKB,
   ISNULL((MAX(io_stall_read_ms) - MIN(io_stall_read_ms)) / NULLIF((MAX(num_of_reads * 1.0) - MIN(num_of_reads)), 0), 0) AS ReadAvgStallMS,
   MAX(num_of_writes) - MIN(num_of_writes) AS Writes,
   (MAX(bytes_written) - MIN(bytes_written)) / 1024.0 / 1024 AS WritesMB,
   ISNULL((MAX(bytes_written * 1.0) - MIN(bytes_written)) / NULLIF((MAX(num_of_writes) - MIN(num_of_writes)),0) / 1024, 0) AS WriteSizeAvgKB,
   ISNULL((MAX(io_stall_write_ms) - MIN(io_stall_write_ms)) / NULLIF((MAX(num_of_writes * 1.0) - MIN(num_of_writes)), 0), 0) AS WriteAvgStallMS
FROM DBAmetrics.dbo.BlitzFirstResults_FileStats d
WHERE d.CheckDate BETWEEN @CheckDateStart AND @CheckDateEnd
AND ServerName = 'WIN-BJJP8BNV8QA\SQL2016'
GROUP BY DatabaseName, TypeDesc, FileLogicalName, DatabaseID, FileID
HAVING MAX(num_of_reads) &gt; MIN(num_of_reads) OR MAX(num_of_writes) &gt; MIN(num_of_writes)
ORDER BY DatabaseName, TypeDesc, FileLogicalName, DatabaseID, FileID;


--Be aware that depending on your logging frequency, the history tables might have a ton of data, 
--and you may want to add indexes if you frequently query the logging history. 
--However, the more indexes you add, the slower your logging goes – so easy on the indexes, Tex.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_BlitzFirst_____script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_BlitzFirst_____script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--sp_BlitzFirst_____script

--https://www.brentozar.com/askbrent/

IF OBJECT_ID('dbo.sp_BlitzFirst') IS NULL
  EXEC ('CREATE PROCEDURE dbo.sp_BlitzFirst AS RETURN 0;')
GO


ALTER PROCEDURE [dbo].[sp_BlitzFirst]
    @Question NVARCHAR(MAX) = NULL ,
    @Help TINYINT = 0 ,
    @AsOf DATETIMEOFFSET = NULL ,
    @ExpertMode TINYINT = 0 ,
    @Seconds INT = 5 ,
    @OutputType VARCHAR(20) = 'TABLE' ,
    @OutputServerName NVARCHAR(256) = NULL ,
    @OutputDatabaseName NVARCHAR(256) = NULL ,
    @OutputSchemaName NVARCHAR(256) = NULL ,
    @OutputTableName NVARCHAR(256) = NULL ,
    @OutputTableNameFileStats NVARCHAR(256) = NULL ,
    @OutputTableNamePerfmonStats NVARCHAR(256) = NULL ,
    @OutputTableNameWaitStats NVARCHAR(256) = NULL ,
    @OutputXMLasNVARCHAR TINYINT = 0 ,
    @FilterPlansByDatabase VARCHAR(MAX) = NULL ,
    @CheckProcedureCache TINYINT = 0 ,
    @FileLatencyThresholdMS INT = 100 ,
    @SinceStartup TINYINT = 0 ,
    @VersionDate DATETIME = NULL OUTPUT
    WITH EXECUTE AS CALLER, RECOMPILE
AS
BEGIN
SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET @VersionDate = '20161210'

IF @Help = 1 PRINT '
sp_BlitzFirst from http://FirstResponderKit.org
	
This script gives you a prioritized list of why your SQL Server is slow right now.

This is not an overall health check - for that, check out sp_Blitz.

To learn more, visit http://FirstResponderKit.org where you can download new
versions for free, watch training videos on how it works, get more info on
the findings, contribute your own code, and more.

Known limitations of this version:
 - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000. It
   may work just fine on 2005, and if it does, hug your parents. Just don''t
   file support issues if it breaks.
 - If a temp table called #CustomPerfmonCounters exists for any other session,
   but not our session, this stored proc will fail with an error saying the
   temp table #CustomPerfmonCounters does not exist.
 - @OutputServerName is not functional yet.

Unknown limitations of this version:
 - None. Like Zombo.com, the only limit is yourself.

Changes - for the full list of improvements and fixes in this version, see:
https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/


MIT License

Copyright (c) 2016 Brent Ozar Unlimited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'


RAISERROR('Setting up configuration variables',10,1) WITH NOWAIT;
DECLARE @StringToExecute NVARCHAR(MAX),
    @ParmDefinitions NVARCHAR(4000),
    @Parm1 NVARCHAR(4000),
    @OurSessionID INT,
    @LineFeed NVARCHAR(10),
    @StockWarningHeader NVARCHAR(500),
    @StockWarningFooter NVARCHAR(100),
    @StockDetailsHeader NVARCHAR(100),
    @StockDetailsFooter NVARCHAR(100),
    @StartSampleTime DATETIMEOFFSET,
    @FinishSampleTime DATETIMEOFFSET,
	@FinishSampleTimeWaitFor DATETIME,
    @ServiceName sysname,
    @OutputTableNameFileStats_View NVARCHAR(256),
    @OutputTableNamePerfmonStats_View NVARCHAR(256),
    @OutputTableNameWaitStats_View NVARCHAR(256),
    @ObjectFullName NVARCHAR(2000);

/* Sanitize our inputs */
SELECT
    @OutputTableNameFileStats_View = QUOTENAME(@OutputTableNameFileStats + '_Deltas'),
    @OutputTableNamePerfmonStats_View = QUOTENAME(@OutputTableNamePerfmonStats + '_Deltas'),
    @OutputTableNameWaitStats_View = QUOTENAME(@OutputTableNameWaitStats + '_Deltas');

SELECT
    @OutputDatabaseName = QUOTENAME(@OutputDatabaseName),
    @OutputSchemaName = QUOTENAME(@OutputSchemaName),
    @OutputTableName = QUOTENAME(@OutputTableName),
    @OutputTableNameFileStats = QUOTENAME(@OutputTableNameFileStats),
    @OutputTableNamePerfmonStats = QUOTENAME(@OutputTableNamePerfmonStats),
    @OutputTableNameWaitStats = QUOTENAME(@OutputTableNameWaitStats),
    @LineFeed = CHAR(13) + CHAR(10),
    @StartSampleTime = SYSDATETIMEOFFSET(),
    @FinishSampleTime = DATEADD(ss, @Seconds, SYSDATETIMEOFFSET()),
	@FinishSampleTimeWaitFor = DATEADD(ss, @Seconds, GETDATE()),
    @OurSessionID = @@SPID;


IF @SinceStartup = 1
    SELECT @Seconds = 0, @ExpertMode = 1;

IF @Seconds = 0 AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) = 'SQL Azure'
    SELECT @StartSampleTime = DATEADD(ms, AVG(-wait_time_ms), SYSDATETIMEOFFSET()), @FinishSampleTime = SYSDATETIMEOFFSET()
        FROM sys.dm_os_wait_stats w
        WHERE wait_type IN ('BROKER_TASK_STOP','DIRTY_PAGE_POLL','HADR_FILESTREAM_IOMGR_IOCOMPLETION','LAZYWRITER_SLEEP',
                            'LOGMGR_QUEUE','REQUEST_FOR_DEADLOCK_SEARCH','XE_DISPATCHER_WAIT','XE_TIMER_EVENT')
ELSE IF @Seconds = 0 AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) &lt;&gt; 'SQL Azure'
    SELECT @StartSampleTime = create_date , @FinishSampleTime = SYSDATETIMEOFFSET()
        FROM sys.databases
        WHERE database_id = 2;
ELSE
    SELECT @StartSampleTime = SYSDATETIMEOFFSET(), @FinishSampleTime = DATEADD(ss, @Seconds, SYSDATETIMEOFFSET());

IF @OutputType = 'SCHEMA'
BEGIN
    SELECT FieldList = '[Priority] TINYINT, [FindingsGroup] VARCHAR(50), [Finding] VARCHAR(200), [URL] VARCHAR(200), [Details] NVARCHAR(4000), [HowToStopIt] NVARCHAR(MAX), [QueryPlan] XML, [QueryText] NVARCHAR(MAX)'

END
ELSE IF @AsOf IS NOT NULL AND @OutputDatabaseName IS NOT NULL AND @OutputSchemaName IS NOT NULL AND @OutputTableName IS NOT NULL
BEGIN
    /* They want to look into the past. */

        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName + ''') SELECT CheckDate, [Priority], [FindingsGroup], [Finding], [URL], CAST([Details] AS [XML]) AS Details,'
            + '[HowToStopIt], [CheckID], [StartTime], [LoginName], [NTUserName], [OriginalLoginName], [ProgramName], [HostName], [DatabaseID],'
            + '[DatabaseName], [OpenTransactionCount], [QueryPlan], [QueryText] FROM '
            + @OutputDatabaseName + '.'
            + @OutputSchemaName + '.'
            + @OutputTableName
            + ' WHERE CheckDate &gt;= DATEADD(mi, -15, ''' + CAST(@AsOf AS NVARCHAR(100)) + ''')'
            + ' AND CheckDate &lt;= DATEADD(mi, 15, ''' + CAST(@AsOf AS NVARCHAR(100)) + ''')'
            + ' /*ORDER BY CheckDate, Priority , FindingsGroup , Finding , Details*/;';
        EXEC(@StringToExecute);


END /* IF @AsOf IS NOT NULL AND @OutputDatabaseName IS NOT NULL AND @OutputSchemaName IS NOT NULL AND @OutputTableName IS NOT NULL */
ELSE IF @Question IS NULL /* IF @OutputType = 'SCHEMA' */
BEGIN
    /* What's running right now? This is the first and last result set. */
    IF @SinceStartup = 0 AND @Seconds &gt; 0 AND @ExpertMode = 1 
    BEGIN
		IF OBJECT_ID('dbo.sp_BlitzWho') IS NULL
		BEGIN
			PRINT N'sp_BlitzWho is not installed in the current database_files.  You can get a copy from http://FirstResponderKit.org'
		END
		ELSE
		BEGIN
			EXEC [dbo].[sp_BlitzWho]
		END
    END /* IF @SinceStartup = 0 AND @Seconds &gt; 0 AND @ExpertMode = 1   -   What's running right now? This is the first and last result set. */
     

    RAISERROR('Now starting diagnostic analysis',10,1) WITH NOWAIT;

    /*
    We start by creating #BlitzFirstResults. It's a temp table that will store
    the results from our checks. Throughout the rest of this stored procedure,
    we're running a series of checks looking for dangerous things inside the SQL
    Server. When we find a problem, we insert rows into #BlitzResults. At the
    end, we return these results to the end user.

    #BlitzFirstResults has a CheckID field, but there's no Check table. As we do
    checks, we insert data into this table, and we manually put in the CheckID.
    We (Brent Ozar Unlimited) maintain a list of the checks by ID#. You can
    download that from http://FirstResponderKit.org if you want to build
    a tool that relies on the output of sp_BlitzFirst.
    */

    IF OBJECT_ID('tempdb..#BlitzFirstResults') IS NOT NULL
        DROP TABLE #BlitzFirstResults;
    CREATE TABLE #BlitzFirstResults
        (
          ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
          CheckID INT NOT NULL,
          Priority TINYINT NOT NULL,
          FindingsGroup VARCHAR(50) NOT NULL,
          Finding VARCHAR(200) NOT NULL,
          URL VARCHAR(200) NULL,
          Details NVARCHAR(4000) NULL,
          HowToStopIt NVARCHAR(MAX) NULL,
          QueryPlan [XML] NULL,
          QueryText NVARCHAR(MAX) NULL,
          StartTime DATETIMEOFFSET NULL,
          LoginName NVARCHAR(128) NULL,
          NTUserName NVARCHAR(128) NULL,
          OriginalLoginName NVARCHAR(128) NULL,
          ProgramName NVARCHAR(128) NULL,
          HostName NVARCHAR(128) NULL,
          DatabaseID INT NULL,
          DatabaseName NVARCHAR(128) NULL,
          OpenTransactionCount INT NULL,
          QueryStatsNowID INT NULL,
          QueryStatsFirstID INT NULL,
          PlanHandle VARBINARY(64) NULL,
          DetailsInt INT NULL,
        );

    IF OBJECT_ID('tempdb..#WaitStats') IS NOT NULL
        DROP TABLE #WaitStats;
    CREATE TABLE #WaitStats (Pass TINYINT NOT NULL, wait_type NVARCHAR(60), wait_time_ms BIGINT, signal_wait_time_ms BIGINT, waiting_tasks_count BIGINT, SampleTime DATETIMEOFFSET);

    IF OBJECT_ID('tempdb..#FileStats') IS NOT NULL
        DROP TABLE #FileStats;
    CREATE TABLE #FileStats (
        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
        Pass TINYINT NOT NULL,
        SampleTime DATETIMEOFFSET NOT NULL,
        DatabaseID INT NOT NULL,
        FileID INT NOT NULL,
        DatabaseName NVARCHAR(256) ,
        FileLogicalName NVARCHAR(256) ,
        TypeDesc NVARCHAR(60) ,
        SizeOnDiskMB BIGINT ,
        io_stall_read_ms BIGINT ,
        num_of_reads BIGINT ,
        bytes_read BIGINT ,
        io_stall_write_ms BIGINT ,
        num_of_writes BIGINT ,
        bytes_written BIGINT,
        PhysicalName NVARCHAR(520) ,
        avg_stall_read_ms INT ,
        avg_stall_write_ms INT
    );

    IF OBJECT_ID('tempdb..#QueryStats') IS NOT NULL
        DROP TABLE #QueryStats;
    CREATE TABLE #QueryStats (
        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
        Pass INT NOT NULL,
        SampleTime DATETIMEOFFSET NOT NULL,
        [sql_handle] VARBINARY(64),
        statement_start_offset INT,
        statement_end_offset INT,
        plan_generation_num BIGINT,
        plan_handle VARBINARY(64),
        execution_count BIGINT,
        total_worker_time BIGINT,
        total_physical_reads BIGINT,
        total_logical_writes BIGINT,
        total_logical_reads BIGINT,
        total_clr_time BIGINT,
        total_elapsed_time BIGINT,
        creation_time DATETIMEOFFSET,
        query_hash BINARY(8),
        query_plan_hash BINARY(8),
        Points TINYINT
    );

    IF OBJECT_ID('tempdb..#PerfmonStats') IS NOT NULL
        DROP TABLE #PerfmonStats;
    CREATE TABLE #PerfmonStats (
        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
        Pass TINYINT NOT NULL,
        SampleTime DATETIMEOFFSET NOT NULL,
        [object_name] NVARCHAR(128) NOT NULL,
        [counter_name] NVARCHAR(128) NOT NULL,
        [instance_name] NVARCHAR(128) NULL,
        [cntr_value] BIGINT NULL,
        [cntr_type] INT NOT NULL,
        [value_delta] BIGINT NULL,
        [value_per_second] DECIMAL(18,2) NULL
    );

    IF OBJECT_ID('tempdb..#PerfmonCounters') IS NOT NULL
        DROP TABLE #PerfmonCounters;
    CREATE TABLE #PerfmonCounters (
        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
        [object_name] NVARCHAR(128) NOT NULL,
        [counter_name] NVARCHAR(128) NOT NULL,
        [instance_name] NVARCHAR(128) NULL
    );

    IF OBJECT_ID('tempdb..#FilterPlansByDatabase') IS NOT NULL
        DROP TABLE #FilterPlansByDatabase;
    CREATE TABLE #FilterPlansByDatabase (DatabaseID INT PRIMARY KEY CLUSTERED);

    IF OBJECT_ID('tempdb..#MasterFiles') IS NOT NULL
        DROP TABLE #MasterFiles;
    CREATE TABLE #MasterFiles (database_id INT, file_id INT, type_desc NVARCHAR(50), name NVARCHAR(255), physical_name NVARCHAR(255), size BIGINT);
    /* Azure SQL Database doesn't have sys.master_files, so we have to build our own. */
    IF CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) = 'SQL Azure'
        SET @StringToExecute = 'INSERT INTO #MasterFiles (database_id, file_id, type_desc, name, physical_name, size) SELECT DB_ID(), file_id, type_desc, name, physical_name, size FROM sys.database_files;'
    ELSE
        SET @StringToExecute = 'INSERT INTO #MasterFiles (database_id, file_id, type_desc, name, physical_name, size) SELECT database_id, file_id, type_desc, name, physical_name, size FROM sys.master_files;'
    EXEC(@StringToExecute);

    IF @FilterPlansByDatabase IS NOT NULL
        BEGIN
        IF UPPER(LEFT(@FilterPlansByDatabase,4)) = 'USER'
            BEGIN
            INSERT INTO #FilterPlansByDatabase (DatabaseID)
            SELECT database_id
                FROM sys.databases
                WHERE [name] NOT IN ('master', 'model', 'msdb', 'tempdb')
            END
        ELSE
            BEGIN
            SET @FilterPlansByDatabase = @FilterPlansByDatabase + ','
            ;WITH a AS
                (
                SELECT CAST(1 AS BIGINT) f, CHARINDEX(',', @FilterPlansByDatabase) t, 1 SEQ
                UNION ALL
                SELECT t + 1, CHARINDEX(',', @FilterPlansByDatabase, t + 1), SEQ + 1
                FROM a
                WHERE CHARINDEX(',', @FilterPlansByDatabase, t + 1) &gt; 0
                )
            INSERT #FilterPlansByDatabase (DatabaseID)
                SELECT SUBSTRING(@FilterPlansByDatabase, f, t - f)
                FROM a
                WHERE SUBSTRING(@FilterPlansByDatabase, f, t - f) IS NOT NULL
                OPTION (MAXRECURSION 0)
            END
        END


    SET @StockWarningHeader = '&lt;?ClickToSeeCommmand -- ' + @LineFeed + @LineFeed
        + 'WARNING: Running this command may result in data loss or an outage.' + @LineFeed
        + 'This tool is meant as a shortcut to help generate scripts for DBAs.' + @LineFeed
        + 'It is not a substitute for database training and experience.' + @LineFeed
        + 'Now, having said that, here''s the details:' + @LineFeed + @LineFeed;

    SELECT @StockWarningFooter = @LineFeed + @LineFeed + '-- ?&gt;',
        @StockDetailsHeader = '&lt;?ClickToSeeDetails -- ' + @LineFeed,
        @StockDetailsFooter = @LineFeed + ' -- ?&gt;';

    /* Get the instance name to use as a Perfmon counter prefix. */
    IF CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) = 'SQL Azure'
        SELECT TOP 1 @ServiceName = LEFT(object_name, (CHARINDEX(':', object_name) - 1))
        FROM sys.dm_os_performance_counters;
    ELSE
        BEGIN
        SET @StringToExecute = 'INSERT INTO #PerfmonStats(object_name, Pass, SampleTime, counter_name, cntr_type) SELECT CASE WHEN @@SERVICENAME = ''MSSQLSERVER'' THEN ''SQLServer'' ELSE ''MSSQL$'' + @@SERVICENAME END, 0, SYSDATETIMEOFFSET(), ''stuffing'', 0 ;'
        EXEC(@StringToExecute);
        SELECT @ServiceName = object_name FROM #PerfmonStats;
        DELETE #PerfmonStats;
        END

    /* Build a list of queries that were run in the last 10 seconds.
       We're looking for the death-by-a-thousand-small-cuts scenario
       where a query is constantly running, and it doesn't have that
       big of an impact individually, but it has a ton of impact
       overall. We're going to build this list, and then after we
       finish our @Seconds sample, we'll compare our plan cache to
       this list to see what ran the most. */

    /* Populate #QueryStats. SQL 2005 doesn't have query hash or query plan hash. */
    IF @CheckProcedureCache = 1 
	BEGIN
		RAISERROR('@CheckProcedureCache = 1, capturing first pass of plan cache',10,1) WITH NOWAIT;
		IF @@VERSION LIKE 'Microsoft SQL Server 2005%'
			BEGIN
			IF @FilterPlansByDatabase IS NULL
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
											WHERE qs.last_execution_time &gt;= (DATEADD(ss, -10, SYSDATETIMEOFFSET()));';
				END
			ELSE
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
												CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr
												INNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID
											WHERE qs.last_execution_time &gt;= (DATEADD(ss, -10, SYSDATETIMEOFFSET()))
												AND attr.attribute = ''dbid'';';
				END
			END
		ELSE
			BEGIN
			IF @FilterPlansByDatabase IS NULL
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
											WHERE qs.last_execution_time &gt;= (DATEADD(ss, -10, SYSDATETIMEOFFSET()));';
				END
			ELSE
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
											CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr
											INNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID
											WHERE qs.last_execution_time &gt;= (DATEADD(ss, -10, SYSDATETIMEOFFSET()))
												AND attr.attribute = ''dbid'';';
				END
			END
		EXEC(@StringToExecute);

		/* Get the totals for the entire plan cache */
		INSERT INTO #QueryStats (Pass, SampleTime, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time)
		SELECT -1 AS Pass, SYSDATETIMEOFFSET(), SUM(execution_count), SUM(total_worker_time), SUM(total_physical_reads), SUM(total_logical_writes), SUM(total_logical_reads), SUM(total_clr_time), SUM(total_elapsed_time), MIN(creation_time)
			FROM sys.dm_exec_query_stats qs;
    END /*IF @CheckProcedureCache = 1 */


    IF EXISTS (SELECT *
                    FROM tempdb.sys.all_objects obj
                    INNER JOIN tempdb.sys.all_columns col1 ON obj.object_id = col1.object_id AND col1.name = 'object_name'
                    INNER JOIN tempdb.sys.all_columns col2 ON obj.object_id = col2.object_id AND col2.name = 'counter_name'
                    INNER JOIN tempdb.sys.all_columns col3 ON obj.object_id = col3.object_id AND col3.name = 'instance_name'
                    WHERE obj.name LIKE '%CustomPerfmonCounters%')
        BEGIN
        SET @StringToExecute = 'INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) SELECT [object_name],[counter_name],[instance_name] FROM #CustomPerfmonCounters'
        EXEC(@StringToExecute);
        END
    ELSE
        BEGIN
        /* Add our default Perfmon counters */
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Forwarded Records/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Page compression attempts/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Page Splits/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Skipped Ghosted Records/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Table Lock Escalations/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Worktables Created/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page life expectancy', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page reads/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page writes/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Readahead pages/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Target pages', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Total pages', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Active Transactions','_Total')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','Log Growths', '_Total')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','Log Shrinks', '_Total')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','Distributed Query', 'Execs in progress')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','DTC calls', 'Execs in progress')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','Extended Procedures', 'Execs in progress')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','OLEDB calls', 'Execs in progress')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Active Temp Tables', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Logins/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Logouts/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Mars Deadlocks', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Processes blocked', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Number of Deadlocks/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Memory Grants Pending', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Errors','Errors/sec', '_Total')
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Batch Requests/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Forced Parameterizations/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Guided plan executions/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Attention rate', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Compilations/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Re-Compilations/sec', NULL)
        /* Below counters added by Jefferson Elias */
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Worktables From Cache Base',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Worktables From Cache Ratio',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Database pages',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Free pages',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Stolen pages',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Granted Workspace Memory (KB)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Maximum Workspace Memory (KB)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Target Server Memory (KB)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Total Server Memory (KB)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Buffer cache hit ratio',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Buffer cache hit ratio base',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Checkpoint pages/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Free list stalls/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Lazy writes/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Auto-Param Attempts/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Failed Auto-Params/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Safe Auto-Params/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Unsafe Auto-Params/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Workfiles Created/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','User Connections',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Average Latch Wait Time (ms)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Average Latch Wait Time Base',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Latch Waits/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Total Latch Wait Time (ms)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Average Wait Time (ms)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Average Wait Time Base',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Requests/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Timeouts/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Wait Time (ms)',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Waits/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Transactions','Longest Transaction Running Time',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Full Scans/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Index Searches/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page lookups/sec',NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Cursor Manager by Type','Active cursors',NULL)
        END

    /* Populate #FileStats, #PerfmonStats, #WaitStats with DMV data.
        After we finish doing our checks, we'll take another sample and compare them. */
	RAISERROR('Capturing first pass of wait stats, perfmon counters, file stats',10,1) WITH NOWAIT;
    INSERT #WaitStats(Pass, SampleTime, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count)
		SELECT 
		x.Pass, 
		x.SampleTime, 
		x.wait_type, 
		SUM(x.sum_wait_time_ms) AS sum_wait_time_ms, 
		SUM(x.sum_signal_wait_time_ms) AS sum_signal_wait_time_ms, 
		SUM(x.sum_waiting_tasks) AS sum_waiting_tasks
		FROM (
		SELECT  
				1 AS Pass,
				CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime,
				owt.wait_type,
		        CASE @Seconds WHEN 0 THEN 0 ELSE SUM(owt.wait_duration_ms) OVER (PARTITION BY owt.wait_type, owt.session_id)
					 - CASE WHEN @Seconds = 0 THEN 0 ELSE (@Seconds * 1000) END END AS sum_wait_time_ms,
				0 AS sum_signal_wait_time_ms,
				0 AS sum_waiting_tasks
			FROM    sys.dm_os_waiting_tasks owt
			WHERE owt.session_id &gt; 50
			AND owt.wait_duration_ms &gt;= CASE @Seconds WHEN 0 THEN 0 ELSE @Seconds * 1000 END
		UNION ALL
		SELECT
		       1 AS Pass,
		       CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime,
		       os.wait_type,
		       CASE @Seconds WHEN 0 THEN 0 ELSE SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) END AS sum_wait_time_ms,
		       CASE @Seconds WHEN 0 THEN 0 ELSE SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type ) END AS sum_signal_wait_time_ms,
		       CASE @Seconds WHEN 0 THEN 0 ELSE SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) END AS sum_waiting_tasks
		   FROM sys.dm_os_wait_stats os
		) x
		   WHERE x.wait_type NOT IN (
		       'REQUEST_FOR_DEADLOCK_SEARCH',
		       'SQLTRACE_INCREMENTAL_FLUSH_SLEEP',
		       'SQLTRACE_BUFFER_FLUSH',
		       'LAZYWRITER_SLEEP',
		       'XE_TIMER_EVENT',
		       'XE_DISPATCHER_WAIT',
		       'FT_IFTS_SCHEDULER_IDLE_WAIT',
		       'LOGMGR_QUEUE',
		       'CHECKPOINT_QUEUE',
		       'BROKER_TO_FLUSH',
		       'BROKER_TASK_STOP',
		       'BROKER_EVENTHANDLER',
		       'SLEEP_TASK',
		       'WAITFOR',
		       'DBMIRROR_DBM_MUTEX',
		       'DBMIRROR_EVENTS_QUEUE',
		       'DBMIRRORING_CMD',
		       'DISPATCHER_QUEUE_SEMAPHORE',
		       'BROKER_RECEIVE_WAITFOR',
		       'CLR_AUTO_EVENT',
		       'DIRTY_PAGE_POLL',
		       'HADR_FILESTREAM_IOMGR_IOCOMPLETION',
		       'ONDEMAND_TASK_QUEUE',
		       'FT_IFTSHC_MUTEX',
		       'CLR_MANUAL_EVENT',
		       'CLR_SEMAPHORE',
		       'DBMIRROR_WORKER_QUEUE',
		       'DBMIRROR_DBM_EVENT',
		       'SP_SERVER_DIAGNOSTICS_SLEEP',
		       'HADR_CLUSAPI_CALL',
		       'HADR_LOGCAPTURE_WAIT',
		       'HADR_NOTIFICATION_DEQUEUE',
		       'HADR_TIMER_TASK',
		       'HADR_WORK_QUEUE',
		       'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP',
		       'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP',
		       'RESOURCE_GOVERNOR_IDLE',
		       'QDS_ASYNC_QUEUE',
		       'QDS_SHUTDOWN_QUEUE',
		       'SLEEP_SYSTEMTASK',
		       'BROKER_TRANSMITTER',
		       'REDO_THREAD_PENDING_WORK',
		       'UCS_SESSION_REGISTRATION'
		   )
		GROUP BY x.Pass, x.SampleTime, x.wait_type
		ORDER BY sum_wait_time_ms DESC;


    INSERT INTO #FileStats (Pass, SampleTime, DatabaseID, FileID, DatabaseName, FileLogicalName, SizeOnDiskMB, io_stall_read_ms ,
        num_of_reads, [bytes_read] , io_stall_write_ms,num_of_writes, [bytes_written], PhysicalName, TypeDesc)
    SELECT
        1 AS Pass,
        CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime,
        mf.[database_id],
        mf.[file_id],
        DB_NAME(vfs.database_id) AS [db_name],
        mf.name + N' [' + mf.type_desc COLLATE SQL_Latin1_General_CP1_CI_AS + N']' AS file_logical_name ,
        CAST(( ( vfs.size_on_disk_bytes / 1024.0 ) / 1024.0 ) AS INT) AS size_on_disk_mb ,
        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.io_stall_read_ms END ,
        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.num_of_reads END ,
        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.[num_of_bytes_read] END ,
        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.io_stall_write_ms END ,
        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.num_of_writes END ,
        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.[num_of_bytes_written] END ,
        mf.physical_name,
        mf.type_desc
    FROM sys.dm_io_virtual_file_stats (NULL, NULL) AS vfs
    INNER JOIN #MasterFiles AS mf ON vfs.file_id = mf.file_id
        AND vfs.database_id = mf.database_id
    WHERE vfs.num_of_reads &gt; 0
        OR vfs.num_of_writes &gt; 0;

    INSERT INTO #PerfmonStats (Pass, SampleTime, [object_name],[counter_name],[instance_name],[cntr_value],[cntr_type])
    SELECT         1 AS Pass,
        CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime, RTRIM(dmv.object_name), RTRIM(dmv.counter_name), RTRIM(dmv.instance_name), CASE @Seconds WHEN 0 THEN 0 ELSE dmv.cntr_value END, dmv.cntr_type
        FROM #PerfmonCounters counters
        INNER JOIN sys.dm_os_performance_counters dmv ON counters.counter_name COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.counter_name) COLLATE SQL_Latin1_General_CP1_CI_AS
            AND counters.[object_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[object_name]) COLLATE SQL_Latin1_General_CP1_CI_AS
            AND (counters.[instance_name] IS NULL OR counters.[instance_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[instance_name]) COLLATE SQL_Latin1_General_CP1_CI_AS)


	RAISERROR('Beginning investigatory queries',10,1) WITH NOWAIT;


    /* Maintenance Tasks Running - Backup Running - CheckID 1 */
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)
    SELECT 1 AS CheckID,
        1 AS Priority,
        'Maintenance Tasks Running' AS FindingGroup,
        'Backup Running' AS Finding,
        'http://www.BrentOzar.com/askbrent/backups/' AS URL,
        'Backup of ' + DB_NAME(db.resource_database_id) + ' database (' + (SELECT CAST(CAST(SUM(size * 8.0 / 1024 / 1024) AS BIGINT) AS NVARCHAR) FROM #MasterFiles WHERE database_id = db.resource_database_id) + 'GB) is ' + CAST(r.percent_complete AS NVARCHAR(100)) + '% complete, has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' AS Details,
        'KILL ' + CAST(r.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,
        pl.query_plan AS QueryPlan,
        r.start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        db.[resource_database_id] AS DatabaseID,
        DB_NAME(db.resource_database_id) AS DatabaseName,
        0 AS OpenTransactionCount
    FROM sys.dm_exec_requests r
    INNER JOIN sys.dm_exec_connections c ON r.session_id = c.session_id
    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
    INNER JOIN (
    SELECT DISTINCT request_session_id, resource_database_id
    FROM    sys.dm_tran_locks
    WHERE resource_type = N'DATABASE'
    AND     request_mode = N'S'
    AND     request_status = N'GRANT'
    AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id
    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl
    WHERE r.command LIKE 'BACKUP%';


    /* If there's a backup running, add details explaining how long full backup has been taking in the last month. */
    IF @Seconds &gt; 0 AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) &lt;&gt; 'SQL Azure'
    BEGIN
        SET @StringToExecute = 'UPDATE #BlitzFirstResults SET Details = Details + '' Over the last 60 days, the full backup usually takes '' + CAST((SELECT AVG(DATEDIFF(mi, bs.backup_start_date, bs.backup_finish_date)) FROM msdb.dbo.backupset bs WHERE abr.DatabaseName = bs.database_name AND bs.type = ''D'' AND bs.backup_start_date &gt; DATEADD(dd, -60, SYSDATETIMEOFFSET()) AND bs.backup_finish_date IS NOT NULL) AS NVARCHAR(100)) + '' minutes.'' FROM #BlitzFirstResults abr WHERE abr.CheckID = 1 AND EXISTS (SELECT * FROM msdb.dbo.backupset bs WHERE bs.type = ''D'' AND bs.backup_start_date &gt; DATEADD(dd, -60, SYSDATETIMEOFFSET()) AND bs.backup_finish_date IS NOT NULL AND abr.DatabaseName = bs.database_name AND DATEDIFF(mi, bs.backup_start_date, bs.backup_finish_date) &gt; 1)';
        EXEC(@StringToExecute);
    END


    /* Maintenance Tasks Running - DBCC Running - CheckID 2 */
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)
    SELECT 2 AS CheckID,
        1 AS Priority,
        'Maintenance Tasks Running' AS FindingGroup,
        'DBCC Running' AS Finding,
        'http://www.BrentOzar.com/askbrent/dbcc/' AS URL,
        'Corruption check of ' + DB_NAME(db.resource_database_id) + ' database (' + (SELECT CAST(CAST(SUM(size * 8.0 / 1024 / 1024) AS BIGINT) AS NVARCHAR) FROM #MasterFiles WHERE database_id = db.resource_database_id) + 'GB) has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' AS Details,
        'KILL ' + CAST(r.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,
        pl.query_plan AS QueryPlan,
        r.start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        db.[resource_database_id] AS DatabaseID,
        DB_NAME(db.resource_database_id) AS DatabaseName,
        0 AS OpenTransactionCount
    FROM sys.dm_exec_requests r
    INNER JOIN sys.dm_exec_connections c ON r.session_id = c.session_id
    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
    INNER JOIN (SELECT DISTINCT l.request_session_id, l.resource_database_id
    FROM    sys.dm_tran_locks l
    INNER JOIN sys.databases d ON l.resource_database_id = d.database_id
    WHERE l.resource_type = N'DATABASE'
    AND     l.request_mode = N'S'
    AND    l.request_status = N'GRANT'
    AND    l.request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id
    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl
    WHERE r.command LIKE 'DBCC%';


    /* Maintenance Tasks Running - Restore Running - CheckID 3 */
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)
    SELECT 3 AS CheckID,
        1 AS Priority,
        'Maintenance Tasks Running' AS FindingGroup,
        'Restore Running' AS Finding,
        'http://www.BrentOzar.com/askbrent/backups/' AS URL,
        'Restore of ' + DB_NAME(db.resource_database_id) + ' database (' + (SELECT CAST(CAST(SUM(size * 8.0 / 1024 / 1024) AS BIGINT) AS NVARCHAR) FROM #MasterFiles WHERE database_id = db.resource_database_id) + 'GB) is ' + CAST(r.percent_complete AS NVARCHAR(100)) + '% complete, has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' AS Details,
        'KILL ' + CAST(r.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,
        pl.query_plan AS QueryPlan,
        r.start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        db.[resource_database_id] AS DatabaseID,
        DB_NAME(db.resource_database_id) AS DatabaseName,
        0 AS OpenTransactionCount
    FROM sys.dm_exec_requests r
    INNER JOIN sys.dm_exec_connections c ON r.session_id = c.session_id
    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
    INNER JOIN (
    SELECT DISTINCT request_session_id, resource_database_id
    FROM    sys.dm_tran_locks
    WHERE resource_type = N'DATABASE'
    AND     request_mode = N'S'
    AND     request_status = N'GRANT'
    AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id
    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl
    WHERE r.command LIKE 'RESTORE%';


    /* SQL Server Internal Maintenance - Database File Growing - CheckID 4 */
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)
    SELECT 4 AS CheckID,
        1 AS Priority,
        'SQL Server Internal Maintenance' AS FindingGroup,
        'Database File Growing' AS Finding,
        'http://www.BrentOzar.com/go/instant' AS URL,
        'SQL Server is waiting for Windows to provide storage space for a database restore, a data file growth, or a log file growth. This task has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '.' + @LineFeed + 'Check the query plan (expert mode) to identify the database involved.' AS Details,
        'Unfortunately, you can''t stop this, but you can prevent it next time. Check out http://www.BrentOzar.com/go/instant for details.' AS HowToStopIt,
        pl.query_plan AS QueryPlan,
        r.start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        NULL AS DatabaseID,
        NULL AS DatabaseName,
        0 AS OpenTransactionCount
    FROM sys.dm_os_waiting_tasks t
    INNER JOIN sys.dm_exec_connections c ON t.session_id = c.session_id
    INNER JOIN sys.dm_exec_requests r ON t.session_id = r.session_id
    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl
    WHERE t.wait_type = 'PREEMPTIVE_OS_WRITEFILEGATHER'


    /* Query Problems - Long-Running Query Blocking Others - CheckID 5 */
    /*
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)
    SELECT 5 AS CheckID,
        1 AS Priority,
        'Query Problems' AS FindingGroup,
        'Long-Running Query Blocking Others' AS Finding,
        'http://www.BrentOzar.com/go/blocking' AS URL,
        'Query in ' + DB_NAME(db.resource_database_id) + ' has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' + @LineFeed + @LineFeed
            + CAST(COALESCE((SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(rBlocker.sql_handle)),
            (SELECT TOP 1 [text] FROM master..sysprocesses spBlocker CROSS APPLY sys.dm_exec_sql_text(spBlocker.sql_handle) WHERE spBlocker.spid = tBlocked.blocking_session_id), '') AS NVARCHAR(2000)) AS Details,
        'KILL ' + CAST(tBlocked.blocking_session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,
        (SELECT TOP 1 query_plan FROM sys.dm_exec_query_plan(rBlocker.plan_handle)) AS QueryPlan,
        COALESCE((SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(rBlocker.sql_handle)),
            (SELECT TOP 1 [text] FROM master..sysprocesses spBlocker CROSS APPLY sys.dm_exec_sql_text(spBlocker.sql_handle) WHERE spBlocker.spid = tBlocked.blocking_session_id)) AS QueryText,
        r.start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        db.[resource_database_id] AS DatabaseID,
        DB_NAME(db.resource_database_id) AS DatabaseName,
        0 AS OpenTransactionCount
    FROM sys.dm_exec_sessions s
    INNER JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
    INNER JOIN sys.dm_exec_connections c ON s.session_id = c.session_id
    INNER JOIN sys.dm_os_waiting_tasks tBlocked ON tBlocked.session_id = s.session_id AND tBlocked.session_id &lt;&gt; s.session_id
    INNER JOIN (
    SELECT DISTINCT request_session_id, resource_database_id
    FROM    sys.dm_tran_locks
    WHERE resource_type = N'DATABASE'
    AND     request_mode = N'S'
    AND     request_status = N'GRANT'
    AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id
    LEFT OUTER JOIN sys.dm_exec_requests rBlocker ON tBlocked.blocking_session_id = rBlocker.session_id
      WHERE NOT EXISTS (SELECT * FROM sys.dm_os_waiting_tasks tBlocker WHERE tBlocker.session_id = tBlocked.blocking_session_id AND tBlocker.blocking_session_id IS NOT NULL)
      AND s.last_request_start_time &lt; DATEADD(SECOND, -30, SYSDATETIMEOFFSET())
    */

    /* Query Problems - Plan Cache Erased Recently */
    IF DATEADD(mi, -15, SYSDATETIMEOFFSET()) &lt; (SELECT TOP 1 creation_time FROM sys.dm_exec_query_stats ORDER BY creation_time)
    BEGIN
        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)
        SELECT TOP 1 7 AS CheckID,
            50 AS Priority,
            'Query Problems' AS FindingGroup,
            'Plan Cache Erased Recently' AS Finding,
            'http://www.BrentOzar.com/askbrent/plan-cache-erased-recently/' AS URL,
            'The oldest query in the plan cache was created at ' + CAST(creation_time AS NVARCHAR(50)) + '. ' + @LineFeed + @LineFeed
                + 'This indicates that someone ran DBCC FREEPROCCACHE at that time,' + @LineFeed
                + 'Giving SQL Server temporary amnesia. Now, as queries come in,' + @LineFeed
                + 'SQL Server has to use a lot of CPU power in order to build execution' + @LineFeed
                + 'plans and put them in cache again. This causes high CPU loads.' AS Details,
            'Find who did that, and stop them from doing it again.' AS HowToStopIt
        FROM sys.dm_exec_query_stats
        ORDER BY creation_time
    END;


    /* Query Problems - Sleeping Query with Open Transactions - CheckID 8 */
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, QueryText, OpenTransactionCount)
    SELECT 8 AS CheckID,
        50 AS Priority,
        'Query Problems' AS FindingGroup,
        'Sleeping Query with Open Transactions' AS Finding,
        'http://www.brentozar.com/askbrent/sleeping-query-with-open-transactions/' AS URL,
        'Database: ' + DB_NAME(db.resource_database_id) + @LineFeed + 'Host: ' + s.[host_name] + @LineFeed + 'Program: ' + s.[program_name] + @LineFeed + 'Asleep with open transactions and locks since ' + CAST(s.last_request_end_time AS NVARCHAR(100)) + '. ' AS Details,
        'KILL ' + CAST(s.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,
        s.last_request_start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        db.[resource_database_id] AS DatabaseID,
        DB_NAME(db.resource_database_id) AS DatabaseName,
        (SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(c.most_recent_sql_handle)) AS QueryText,
        sessions_with_transactions.open_transaction_count AS OpenTransactionCount
    FROM (SELECT session_id, SUM(open_transaction_count) AS open_transaction_count FROM sys.dm_exec_requests WHERE open_transaction_count &gt; 0 GROUP BY session_id) AS sessions_with_transactions
    INNER JOIN sys.dm_exec_sessions s ON sessions_with_transactions.session_id = s.session_id
    INNER JOIN sys.dm_exec_connections c ON s.session_id = c.session_id
    INNER JOIN (
    SELECT DISTINCT request_session_id, resource_database_id
    FROM    sys.dm_tran_locks
    WHERE resource_type = N'DATABASE'
    AND     request_mode = N'S'
    AND     request_status = N'GRANT'
    AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id
    WHERE s.status = 'sleeping'
    AND s.last_request_end_time &lt; DATEADD(ss, -10, SYSDATETIMEOFFSET())
    AND EXISTS(SELECT * FROM sys.dm_tran_locks WHERE request_session_id = s.session_id
    AND NOT (resource_type = N'DATABASE' AND request_mode = N'S' AND request_status = N'GRANT' AND request_owner_type = N'SHARED_TRANSACTION_WORKSPACE'))


    /* Query Problems - Query Rolling Back - CheckID 9 */
    IF @Seconds &gt; 0
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, QueryText)
    SELECT 9 AS CheckID,
        1 AS Priority,
        'Query Problems' AS FindingGroup,
        'Query Rolling Back' AS Finding,
        'http://www.BrentOzar.com/askbrent/rollback/' AS URL,
        'Rollback started at ' + CAST(r.start_time AS NVARCHAR(100)) + ', is ' + CAST(r.percent_complete AS NVARCHAR(100)) + '% complete.' AS Details,
        'Unfortunately, you can''t stop this. Whatever you do, don''t restart the server in an attempt to fix it - SQL Server will keep rolling back.' AS HowToStopIt,
        r.start_time AS StartTime,
        s.login_name AS LoginName,
        s.nt_user_name AS NTUserName,
        s.[program_name] AS ProgramName,
        s.[host_name] AS HostName,
        db.[resource_database_id] AS DatabaseID,
        DB_NAME(db.resource_database_id) AS DatabaseName,
        (SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(c.most_recent_sql_handle)) AS QueryText
    FROM sys.dm_exec_sessions s
    INNER JOIN sys.dm_exec_connections c ON s.session_id = c.session_id
    INNER JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
    LEFT OUTER JOIN (
        SELECT DISTINCT request_session_id, resource_database_id
        FROM    sys.dm_tran_locks
        WHERE resource_type = N'DATABASE'
        AND     request_mode = N'S'
        AND     request_status = N'GRANT'
        AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id
    WHERE r.status = 'rollback'


    /* Server Performance - Page Life Expectancy Low - CheckID 10 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)
    SELECT 10 AS CheckID,
        50 AS Priority,
        'Server Performance' AS FindingGroup,
        'Page Life Expectancy Low' AS Finding,
        'http://www.BrentOzar.com/askbrent/page-life-expectancy/' AS URL,
        'SQL Server Buffer Manager:Page life expectancy is ' + CAST(c.cntr_value AS NVARCHAR(10)) + ' seconds.' + @LineFeed
            + 'This means SQL Server can only keep data pages in memory for that many seconds after reading those pages in from storage.' + @LineFeed
            + 'This is a symptom, not a cause - it indicates very read-intensive queries that need an index, or insufficient server memory.' AS Details,
        'Add more memory to the server, or find the queries reading a lot of data, and make them more efficient (or fix them with indexes).' AS HowToStopIt
    FROM sys.dm_os_performance_counters c
    WHERE object_name LIKE 'SQLServer:Buffer Manager%'
    AND counter_name LIKE 'Page life expectancy%'
    AND cntr_value &lt; 300

    /* Server Info - Database Size, Total GB - CheckID 21 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)
    SELECT 21 AS CheckID,
        251 AS Priority,
        'Server Info' AS FindingGroup,
        'Database Size, Total GB' AS Finding,
        CAST(SUM (CAST(size AS BIGINT)*8./1024./1024.) AS VARCHAR(100)) AS Details,
        SUM (CAST(size AS BIGINT))*8./1024./1024. AS DetailsInt,
        'http://www.BrentOzar.com/askbrent/' AS URL
    FROM #MasterFiles
    WHERE database_id &gt; 4

    /* Server Info - Database Count - CheckID 22 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)
    SELECT 22 AS CheckID,
        251 AS Priority,
        'Server Info' AS FindingGroup,
        'Database Count' AS Finding,
        CAST(SUM(1) AS VARCHAR(100)) AS Details,
        SUM (1) AS DetailsInt,
        'http://www.BrentOzar.com/askbrent/' AS URL
    FROM sys.databases
    WHERE database_id &gt; 4

    /* Server Performance - High CPU Utilization CheckID 24 */
    IF @Seconds &lt; 30
        BEGIN
        /* If we're waiting less than 30 seconds, run this check now rather than wait til the end.
           We get this data from the ring buffers, and it's only updated once per minute, so might
           as well get it now - whereas if we're checking 30+ seconds, it might get updated by the
           end of our sp_BlitzFirst session. */
        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)
        SELECT 24, 50, 'Server Performance', 'High CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'
            FROM (
                SELECT record,
                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle
                FROM (
                    SELECT TOP 1 CONVERT(XML, record) AS record
                    FROM sys.dm_os_ring_buffers
                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
                    AND record LIKE '%&lt;SystemHealth&gt;%'
                    ORDER BY timestamp DESC) AS rb
            ) AS y
            WHERE 100 - SystemIdle &gt;= 50

        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)
        SELECT 23, 250, 'Server Info', 'CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'
            FROM (
                SELECT record,
                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle
                FROM (
                    SELECT TOP 1 CONVERT(XML, record) AS record
                    FROM sys.dm_os_ring_buffers
                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
                    AND record LIKE '%&lt;SystemHealth&gt;%'
                    ORDER BY timestamp DESC) AS rb
            ) AS y

        END /* IF @Seconds &lt; 30 */

	RAISERROR('Finished running investigatory queries',10,1) WITH NOWAIT;


    /* End of checks. If we haven't waited @Seconds seconds, wait. */
    IF SYSDATETIMEOFFSET() &lt; @FinishSampleTime
		BEGIN
		RAISERROR('Waiting to match @Seconds parameter',10,1) WITH NOWAIT;
        WAITFOR TIME @FinishSampleTimeWaitFor;
		END

	RAISERROR('Capturing second pass of wait stats, perfmon counters, file stats',10,1) WITH NOWAIT;
    /* Populate #FileStats, #PerfmonStats, #WaitStats with DMV data. In a second, we'll compare these. */
    INSERT #WaitStats(Pass, SampleTime, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count)
		SELECT 
		x.Pass, 
		x.SampleTime, 
		x.wait_type, 
		SUM(x.sum_wait_time_ms) AS sum_wait_time_ms, 
		SUM(x.sum_signal_wait_time_ms) AS sum_signal_wait_time_ms, 
		SUM(x.sum_waiting_tasks) AS sum_waiting_tasks
		FROM (
		SELECT  
				2 AS Pass,
				SYSDATETIMEOFFSET() AS SampleTime,
				owt.wait_type,
		        SUM(owt.wait_duration_ms) OVER (PARTITION BY owt.wait_type, owt.session_id)
					 - CASE WHEN @Seconds = 0 THEN 0 ELSE (@Seconds * 1000) END AS sum_wait_time_ms,
				0 AS sum_signal_wait_time_ms,
				CASE @Seconds WHEN 0 THEN 0 ELSE 1 END AS sum_waiting_tasks
			FROM    sys.dm_os_waiting_tasks owt
			WHERE owt.session_id &gt; 50
			AND owt.wait_duration_ms &gt;= CASE @Seconds WHEN 0 THEN 0 ELSE @Seconds * 1000 END
		UNION ALL
		SELECT
		       2 AS Pass,
		       SYSDATETIMEOFFSET() AS SampleTime,
		       os.wait_type,
			   SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) AS sum_wait_time_ms,
			   SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type ) AS sum_signal_wait_time_ms,
			   SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) AS sum_waiting_tasks
		   FROM sys.dm_os_wait_stats os
		) x
		   WHERE x.wait_type NOT IN (
		       'REQUEST_FOR_DEADLOCK_SEARCH',
		       'SQLTRACE_INCREMENTAL_FLUSH_SLEEP',
		       'SQLTRACE_BUFFER_FLUSH',
		       'LAZYWRITER_SLEEP',
		       'XE_TIMER_EVENT',
		       'XE_DISPATCHER_WAIT',
		       'FT_IFTS_SCHEDULER_IDLE_WAIT',
		       'LOGMGR_QUEUE',
		       'CHECKPOINT_QUEUE',
		       'BROKER_TO_FLUSH',
		       'BROKER_TASK_STOP',
		       'BROKER_EVENTHANDLER',
		       'SLEEP_TASK',
		       'WAITFOR',
		       'DBMIRROR_DBM_MUTEX',
		       'DBMIRROR_EVENTS_QUEUE',
		       'DBMIRRORING_CMD',
		       'DISPATCHER_QUEUE_SEMAPHORE',
		       'BROKER_RECEIVE_WAITFOR',
		       'CLR_AUTO_EVENT',
		       'DIRTY_PAGE_POLL',
		       'HADR_FILESTREAM_IOMGR_IOCOMPLETION',
		       'ONDEMAND_TASK_QUEUE',
		       'FT_IFTSHC_MUTEX',
		       'CLR_MANUAL_EVENT',
		       'CLR_SEMAPHORE',
		       'DBMIRROR_WORKER_QUEUE',
		       'DBMIRROR_DBM_EVENT',
		       'SP_SERVER_DIAGNOSTICS_SLEEP',
		       'HADR_CLUSAPI_CALL',
		       'HADR_LOGCAPTURE_WAIT',
		       'HADR_NOTIFICATION_DEQUEUE',
		       'HADR_TIMER_TASK',
		       'HADR_WORK_QUEUE',
		       'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP',
		       'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP',
		       'RESOURCE_GOVERNOR_IDLE',
		       'QDS_ASYNC_QUEUE',
		       'QDS_SHUTDOWN_QUEUE',
		       'SLEEP_SYSTEMTASK',
		       'BROKER_TRANSMITTER',
		       'REDO_THREAD_PENDING_WORK',
		       'UCS_SESSION_REGISTRATION'
		   )
		GROUP BY x.Pass, x.SampleTime, x.wait_type
		ORDER BY sum_wait_time_ms DESC;

    INSERT INTO #FileStats (Pass, SampleTime, DatabaseID, FileID, DatabaseName, FileLogicalName, SizeOnDiskMB, io_stall_read_ms ,
        num_of_reads, [bytes_read] , io_stall_write_ms,num_of_writes, [bytes_written], PhysicalName, TypeDesc, avg_stall_read_ms, avg_stall_write_ms)
    SELECT         2 AS Pass,
        SYSDATETIMEOFFSET() AS SampleTime,
        mf.[database_id],
        mf.[file_id],
        DB_NAME(vfs.database_id) AS [db_name],
        mf.name + N' [' + mf.type_desc COLLATE SQL_Latin1_General_CP1_CI_AS + N']' AS file_logical_name ,
        CAST(( ( vfs.size_on_disk_bytes / 1024.0 ) / 1024.0 ) AS INT) AS size_on_disk_mb ,
        vfs.io_stall_read_ms ,
        vfs.num_of_reads ,
        vfs.[num_of_bytes_read],
        vfs.io_stall_write_ms ,
        vfs.num_of_writes ,
        vfs.[num_of_bytes_written],
        mf.physical_name,
        mf.type_desc,
        0,
        0
    FROM sys.dm_io_virtual_file_stats (NULL, NULL) AS vfs
    INNER JOIN #MasterFiles AS mf ON vfs.file_id = mf.file_id
        AND vfs.database_id = mf.database_id
    WHERE vfs.num_of_reads &gt; 0
        OR vfs.num_of_writes &gt; 0;

    INSERT INTO #PerfmonStats (Pass, SampleTime, [object_name],[counter_name],[instance_name],[cntr_value],[cntr_type])
    SELECT         2 AS Pass,
        SYSDATETIMEOFFSET() AS SampleTime,
        RTRIM(dmv.object_name), RTRIM(dmv.counter_name), RTRIM(dmv.instance_name), dmv.cntr_value, dmv.cntr_type
        FROM #PerfmonCounters counters
        INNER JOIN sys.dm_os_performance_counters dmv ON counters.counter_name COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.counter_name) COLLATE SQL_Latin1_General_CP1_CI_AS
            AND counters.[object_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[object_name]) COLLATE SQL_Latin1_General_CP1_CI_AS
            AND (counters.[instance_name] IS NULL OR counters.[instance_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[instance_name]) COLLATE SQL_Latin1_General_CP1_CI_AS)

    /* Set the latencies and averages. We could do this with a CTE, but we're not ambitious today. */
    UPDATE fNow
    SET avg_stall_read_ms = ((fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads))
    FROM #FileStats fNow
    INNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime &gt; fBase.SampleTime AND fNow.num_of_reads &gt; fBase.num_of_reads AND fNow.io_stall_read_ms &gt; fBase.io_stall_read_ms
    WHERE (fNow.num_of_reads - fBase.num_of_reads) &gt; 0

    UPDATE fNow
    SET avg_stall_write_ms = ((fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes))
    FROM #FileStats fNow
    INNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime &gt; fBase.SampleTime AND fNow.num_of_writes &gt; fBase.num_of_writes AND fNow.io_stall_write_ms &gt; fBase.io_stall_write_ms
    WHERE (fNow.num_of_writes - fBase.num_of_writes) &gt; 0

    UPDATE pNow
        SET [value_delta] = pNow.cntr_value - pFirst.cntr_value,
            [value_per_second] = ((1.0 * pNow.cntr_value - pFirst.cntr_value) / DATEDIFF(ss, pFirst.SampleTime, pNow.SampleTime))
        FROM #PerfmonStats pNow
            INNER JOIN #PerfmonStats pFirst ON pFirst.[object_name] = pNow.[object_name] AND pFirst.counter_name = pNow.counter_name AND (pFirst.instance_name = pNow.instance_name OR (pFirst.instance_name IS NULL AND pNow.instance_name IS NULL))
                AND pNow.ID &gt; pFirst.ID
        WHERE  DATEDIFF(ss, pFirst.SampleTime, pNow.SampleTime) &gt; 0;


    /* If we're within 10 seconds of our projected finish time, do the plan cache analysis. */
    IF DATEDIFF(ss, @FinishSampleTime, SYSDATETIMEOFFSET()) &gt; 10 AND @CheckProcedureCache = 1
        BEGIN

            INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)
            VALUES (18, 210, 'Query Stats', 'Plan Cache Analysis Skipped', 'http://www.BrentOzar.com/go/topqueries',
                'Due to excessive load, the plan cache analysis was skipped. To override this, use @ExpertMode = 1.')

        END
    ELSE IF @CheckProcedureCache = 1
        BEGIN


		RAISERROR('@CheckProcedureCache = 1, capturing second pass of plan cache',10,1) WITH NOWAIT;

        /* Populate #QueryStats. SQL 2005 doesn't have query hash or query plan hash. */
		IF @@VERSION LIKE 'Microsoft SQL Server 2005%'
			BEGIN
			IF @FilterPlansByDatabase IS NULL
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
											WHERE qs.last_execution_time &gt;= @StartSampleTimeText;';
				END
			ELSE
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
												CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr
												INNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID
											WHERE qs.last_execution_time &gt;= @StartSampleTimeText
												AND attr.attribute = ''dbid'';';
				END
			END
		ELSE
			BEGIN
			IF @FilterPlansByDatabase IS NULL
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
											WHERE qs.last_execution_time &gt;= @StartSampleTimeText';
				END
			ELSE
				BEGIN
				SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
											SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0
											FROM sys.dm_exec_query_stats qs
											CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr
											INNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID
											WHERE qs.last_execution_time &gt;= @StartSampleTimeText
												AND attr.attribute = ''dbid'';';
				END
			END
		/* Old version pre-2016/06/13:
        IF @@VERSION LIKE 'Microsoft SQL Server 2005%'
            SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
                                        SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0
                                        FROM sys.dm_exec_query_stats qs
                                        WHERE qs.last_execution_time &gt;= @StartSampleTimeText;';
        ELSE
            SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)
                                        SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0
                                        FROM sys.dm_exec_query_stats qs
                                        WHERE qs.last_execution_time &gt;= @StartSampleTimeText;';
		*/
        SET @ParmDefinitions = N'@StartSampleTimeText NVARCHAR(100)';
        SET @Parm1 = CONVERT(NVARCHAR(100), CAST(@StartSampleTime AS DATETIME), 127);

        EXECUTE sp_executesql @StringToExecute, @ParmDefinitions, @StartSampleTimeText = @Parm1;

		RAISERROR('@CheckProcedureCache = 1, totaling up plan cache metrics',10,1) WITH NOWAIT;

        /* Get the totals for the entire plan cache */
        INSERT INTO #QueryStats (Pass, SampleTime, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time)
        SELECT 0 AS Pass, SYSDATETIMEOFFSET(), SUM(execution_count), SUM(total_worker_time), SUM(total_physical_reads), SUM(total_logical_writes), SUM(total_logical_reads), SUM(total_clr_time), SUM(total_elapsed_time), MIN(creation_time)
            FROM sys.dm_exec_query_stats qs;


		RAISERROR('@CheckProcedureCache = 1, so analyzing execution plans',10,1) WITH NOWAIT;
        /*
        Pick the most resource-intensive queries to review. Update the Points field
        in #QueryStats - if a query is in the top 10 for logical reads, CPU time,
        duration, or execution, add 1 to its points.
        */
        WITH qsTop AS (
        SELECT TOP 10 qsNow.ID
        FROM #QueryStats qsNow
          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1
        WHERE qsNow.total_elapsed_time &gt; qsFirst.total_elapsed_time
            AND qsNow.Pass = 2
            AND qsNow.total_elapsed_time - qsFirst.total_elapsed_time &gt; 1000000 /* Only queries with over 1 second of runtime */
        ORDER BY (qsNow.total_elapsed_time - COALESCE(qsFirst.total_elapsed_time, 0)) DESC)
        UPDATE #QueryStats
            SET Points = Points + 1
            FROM #QueryStats qs
            INNER JOIN qsTop ON qs.ID = qsTop.ID;

        WITH qsTop AS (
        SELECT TOP 10 qsNow.ID
        FROM #QueryStats qsNow
          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1
        WHERE qsNow.total_logical_reads &gt; qsFirst.total_logical_reads
            AND qsNow.Pass = 2
            AND qsNow.total_logical_reads - qsFirst.total_logical_reads &gt; 1000 /* Only queries with over 1000 reads */
        ORDER BY (qsNow.total_logical_reads - COALESCE(qsFirst.total_logical_reads, 0)) DESC)
        UPDATE #QueryStats
            SET Points = Points + 1
            FROM #QueryStats qs
            INNER JOIN qsTop ON qs.ID = qsTop.ID;

        WITH qsTop AS (
        SELECT TOP 10 qsNow.ID
        FROM #QueryStats qsNow
          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1
        WHERE qsNow.total_worker_time &gt; qsFirst.total_worker_time
            AND qsNow.Pass = 2
            AND qsNow.total_worker_time - qsFirst.total_worker_time &gt; 1000000 /* Only queries with over 1 second of worker time */
        ORDER BY (qsNow.total_worker_time - COALESCE(qsFirst.total_worker_time, 0)) DESC)
        UPDATE #QueryStats
            SET Points = Points + 1
            FROM #QueryStats qs
            INNER JOIN qsTop ON qs.ID = qsTop.ID;

        WITH qsTop AS (
        SELECT TOP 10 qsNow.ID
        FROM #QueryStats qsNow
          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1
        WHERE qsNow.execution_count &gt; qsFirst.execution_count
            AND qsNow.Pass = 2
            AND (qsNow.total_elapsed_time - qsFirst.total_elapsed_time &gt; 1000000 /* Only queries with over 1 second of runtime */
                OR qsNow.total_logical_reads - qsFirst.total_logical_reads &gt; 1000 /* Only queries with over 1000 reads */
                OR qsNow.total_worker_time - qsFirst.total_worker_time &gt; 1000000 /* Only queries with over 1 second of worker time */)
        ORDER BY (qsNow.execution_count - COALESCE(qsFirst.execution_count, 0)) DESC)
        UPDATE #QueryStats
            SET Points = Points + 1
            FROM #QueryStats qs
            INNER JOIN qsTop ON qs.ID = qsTop.ID;

        /* Query Stats - CheckID 17 - Most Resource-Intensive Queries */
        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, QueryStatsNowID, QueryStatsFirstID, PlanHandle)
        SELECT 17, 210, 'Query Stats', 'Most Resource-Intensive Queries', 'http://www.BrentOzar.com/go/topqueries',
            'Query stats during the sample:' + @LineFeed +
            'Executions: ' + CAST(qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0)) AS NVARCHAR(100)) + @LineFeed +
            'Elapsed Time: ' + CAST(qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0)) AS NVARCHAR(100)) + @LineFeed +
            'CPU Time: ' + CAST(qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0)) AS NVARCHAR(100)) + @LineFeed +
            'Logical Reads: ' + CAST(qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0)) AS NVARCHAR(100)) + @LineFeed +
            'Logical Writes: ' + CAST(qsNow.total_logical_writes - (COALESCE(qsFirst.total_logical_writes, 0)) AS NVARCHAR(100)) + @LineFeed +
            'CLR Time: ' + CAST(qsNow.total_clr_time - (COALESCE(qsFirst.total_clr_time, 0)) AS NVARCHAR(100)) + @LineFeed +
            @LineFeed + @LineFeed + 'Query stats since ' + CONVERT(NVARCHAR(100), qsNow.creation_time ,121) + @LineFeed +
            'Executions: ' + CAST(qsNow.execution_count AS NVARCHAR(100)) +
                    CASE qsTotal.execution_count WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.execution_count / qsTotal.execution_count AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +
            'Elapsed Time: ' + CAST(qsNow.total_elapsed_time AS NVARCHAR(100)) +
                    CASE qsTotal.total_elapsed_time WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_elapsed_time / qsTotal.total_elapsed_time AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +
            'CPU Time: ' + CAST(qsNow.total_worker_time AS NVARCHAR(100)) +
                    CASE qsTotal.total_worker_time WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_worker_time / qsTotal.total_worker_time AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +
            'Logical Reads: ' + CAST(qsNow.total_logical_reads AS NVARCHAR(100)) +
                    CASE qsTotal.total_logical_reads WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_logical_reads / qsTotal.total_logical_reads AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +
            'Logical Writes: ' + CAST(qsNow.total_logical_writes AS NVARCHAR(100)) +
                    CASE qsTotal.total_logical_writes WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_logical_writes / qsTotal.total_logical_writes AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +
            'CLR Time: ' + CAST(qsNow.total_clr_time AS NVARCHAR(100)) +
                    CASE qsTotal.total_clr_time WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_clr_time / qsTotal.total_clr_time AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +
            --@LineFeed + @LineFeed + 'Query hash: ' + CAST(qsNow.query_hash AS NVARCHAR(100)) + @LineFeed +
            --@LineFeed + @LineFeed + 'Query plan hash: ' + CAST(qsNow.query_plan_hash AS NVARCHAR(100)) +
            @LineFeed AS Details,
            'See the URL for tuning tips on why this query may be consuming resources.' AS HowToStopIt,
            qp.query_plan,
            QueryText = SUBSTRING(st.text,
                 (qsNow.statement_start_offset / 2) + 1,
                 ((CASE qsNow.statement_end_offset
                   WHEN -1 THEN DATALENGTH(st.text)
                   ELSE qsNow.statement_end_offset
                   END - qsNow.statement_start_offset) / 2) + 1),
            qsNow.ID AS QueryStatsNowID,
            qsFirst.ID AS QueryStatsFirstID,
            qsNow.plan_handle AS PlanHandle
            FROM #QueryStats qsNow
                INNER JOIN #QueryStats qsTotal ON qsTotal.Pass = 0
                LEFT OUTER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1
                CROSS APPLY sys.dm_exec_sql_text(qsNow.sql_handle) AS st
                CROSS APPLY sys.dm_exec_query_plan(qsNow.plan_handle) AS qp
            WHERE qsNow.Points &gt; 0 AND st.text IS NOT NULL AND qp.query_plan IS NOT NULL

            UPDATE #BlitzFirstResults
                SET DatabaseID = CAST(attr.value AS INT),
                DatabaseName = DB_NAME(CAST(attr.value AS INT))
            FROM #BlitzFirstResults
                CROSS APPLY sys.dm_exec_plan_attributes(#BlitzFirstResults.PlanHandle) AS attr
            WHERE attr.attribute = 'dbid'


        END /* IF DATEDIFF(ss, @FinishSampleTime, SYSDATETIMEOFFSET()) &gt; 10 AND @CheckProcedureCache = 1 */


	RAISERROR('Analyzing changes between first and second passes of DMVs',10,1) WITH NOWAIT;

    /* Wait Stats - CheckID 6 */
    /* Compare the current wait stats to the sample we took at the start, and insert the top 10 waits. */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DetailsInt)
    SELECT TOP 10 6 AS CheckID,
        200 AS Priority,
        'Wait Stats' AS FindingGroup,
        wNow.wait_type AS Finding,
        N'http://www.brentozar.com/sql/wait-stats/#' + wNow.wait_type AS URL,
        'For ' + CAST(((wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) / 1000) AS NVARCHAR(100)) + ' seconds over the last ' + CASE @Seconds WHEN 0 THEN (CAST(DATEDIFF(dd,@StartSampleTime,@FinishSampleTime) AS NVARCHAR(10)) + ' days') ELSE (CAST(@Seconds AS NVARCHAR(10)) + ' seconds') END + ', SQL Server was waiting on this particular bottleneck.' + @LineFeed + @LineFeed AS Details,
        'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,
        ((wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) / 1000) AS DetailsInt
    FROM #WaitStats wNow
    LEFT OUTER JOIN #WaitStats wBase ON wNow.wait_type = wBase.wait_type AND wNow.SampleTime &gt; wBase.SampleTime
    WHERE wNow.wait_time_ms &gt; (wBase.wait_time_ms + (.5 * (DATEDIFF(ss,@StartSampleTime,@FinishSampleTime)) * 1000)) /* Only look for things we've actually waited on for half of the time or more */
    ORDER BY (wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) DESC;

    /* Server Performance - Slow Data File Reads - CheckID 11 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DatabaseID, DatabaseName)
    SELECT TOP 10 11 AS CheckID,
        50 AS Priority,
        'Server Performance' AS FindingGroup,
        'Slow Data File Reads' AS Finding,
        'http://www.BrentOzar.com/go/slow/' AS URL,
        'File: ' + fNow.PhysicalName + @LineFeed
            + 'Number of reads during the sample: ' + CAST((fNow.num_of_reads - fBase.num_of_reads) AS NVARCHAR(20)) + @LineFeed
            + 'Seconds spent waiting on storage for these reads: ' + CAST(((fNow.io_stall_read_ms - fBase.io_stall_read_ms) / 1000.0) AS NVARCHAR(20)) + @LineFeed
            + 'Average read latency during the sample: ' + CAST(((fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads) ) AS NVARCHAR(20)) + ' milliseconds' + @LineFeed
            + 'Microsoft guidance for data file read speed: 20ms or less.' + @LineFeed + @LineFeed AS Details,
        'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,
        fNow.DatabaseID,
        fNow.DatabaseName
    FROM #FileStats fNow
    INNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime &gt; fBase.SampleTime AND fNow.num_of_reads &gt; fBase.num_of_reads AND fNow.io_stall_read_ms &gt; (fBase.io_stall_read_ms + 1000)
    WHERE (fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads) &gt;= @FileLatencyThresholdMS
        AND fNow.TypeDesc = 'ROWS'
    ORDER BY (fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads) DESC;

    /* Server Performance - Slow Log File Writes - CheckID 12 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DatabaseID, DatabaseName)
    SELECT TOP 10 12 AS CheckID,
        50 AS Priority,
        'Server Performance' AS FindingGroup,
        'Slow Log File Writes' AS Finding,
        'http://www.BrentOzar.com/go/slow/' AS URL,
        'File: ' + fNow.PhysicalName + @LineFeed
            + 'Number of writes during the sample: ' + CAST((fNow.num_of_writes - fBase.num_of_writes) AS NVARCHAR(20)) + @LineFeed
            + 'Seconds spent waiting on storage for these writes: ' + CAST(((fNow.io_stall_write_ms - fBase.io_stall_write_ms) / 1000.0) AS NVARCHAR(20)) + @LineFeed
            + 'Average write latency during the sample: ' + CAST(((fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes) ) AS NVARCHAR(20)) + ' milliseconds' + @LineFeed
            + 'Microsoft guidance for log file write speed: 3ms or less.' + @LineFeed + @LineFeed AS Details,
        'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,
        fNow.DatabaseID,
        fNow.DatabaseName
    FROM #FileStats fNow
    INNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime &gt; fBase.SampleTime AND fNow.num_of_writes &gt; fBase.num_of_writes AND fNow.io_stall_write_ms &gt; (fBase.io_stall_write_ms + 1000)
    WHERE (fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes) &gt;= @FileLatencyThresholdMS
        AND fNow.TypeDesc = 'LOG'
    ORDER BY (fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes) DESC;


    /* SQL Server Internal Maintenance - Log File Growing - CheckID 13 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)
    SELECT 13 AS CheckID,
        1 AS Priority,
        'SQL Server Internal Maintenance' AS FindingGroup,
        'Log File Growing' AS Finding,
        'http://www.BrentOzar.com/askbrent/file-growing/' AS URL,
        'Number of growths during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed
            + 'Determined by sampling Perfmon counter ' + ps.object_name + ' - ' + ps.counter_name + @LineFeed AS Details,
        'Pre-grow data and log files during maintenance windows so that they do not grow during production loads. See the URL for more details.'  AS HowToStopIt
    FROM #PerfmonStats ps
    WHERE ps.Pass = 2
        AND object_name = @ServiceName + ':Databases'
        AND counter_name = 'Log Growths'
        AND value_delta &gt; 0


    /* SQL Server Internal Maintenance - Log File Shrinking - CheckID 14 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)
    SELECT 14 AS CheckID,
        1 AS Priority,
        'SQL Server Internal Maintenance' AS FindingGroup,
        'Log File Shrinking' AS Finding,
        'http://www.BrentOzar.com/askbrent/file-shrinking/' AS URL,
        'Number of shrinks during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed
            + 'Determined by sampling Perfmon counter ' + ps.object_name + ' - ' + ps.counter_name + @LineFeed AS Details,
        'Pre-grow data and log files during maintenance windows so that they do not grow during production loads. See the URL for more details.' AS HowToStopIt
    FROM #PerfmonStats ps
    WHERE ps.Pass = 2
        AND object_name = @ServiceName + ':Databases'
        AND counter_name = 'Log Shrinks'
        AND value_delta &gt; 0

    /* Query Problems - Compilations/Sec High - CheckID 15 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)
    SELECT 15 AS CheckID,
        50 AS Priority,
        'Query Problems' AS FindingGroup,
        'Compilations/Sec High' AS Finding,
        'http://www.BrentOzar.com/askbrent/compilations/' AS URL,
        'Number of batch requests during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed
            + 'Number of compilations during the sample: ' + CAST(psComp.value_delta AS NVARCHAR(20)) + @LineFeed
            + 'For OLTP environments, Microsoft recommends that 90% of batch requests should hit the plan cache, and not be compiled from scratch. We are exceeding that threshold.' + @LineFeed AS Details,
        'Find out why plans are not being reused, and consider enabling Forced Parameterization. See the URL for more details.' AS HowToStopIt
    FROM #PerfmonStats ps
        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name = @ServiceName + ':SQL Statistics' AND psComp.counter_name = 'SQL Compilations/sec' AND psComp.value_delta &gt; 0
    WHERE ps.Pass = 2
        AND ps.object_name = @ServiceName + ':SQL Statistics'
        AND ps.counter_name = 'Batch Requests/sec'
        AND ps.value_delta &gt; (1000 * @Seconds) /* Ignore servers sitting idle */
        AND (psComp.value_delta * 10) &gt; ps.value_delta /* Compilations are more than 10% of batch requests per second */

    /* Query Problems - Re-Compilations/Sec High - CheckID 16 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)
    SELECT 16 AS CheckID,
        50 AS Priority,
        'Query Problems' AS FindingGroup,
        'Re-Compilations/Sec High' AS Finding,
        'http://www.BrentOzar.com/askbrent/recompilations/' AS URL,
        'Number of batch requests during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed
            + 'Number of recompilations during the sample: ' + CAST(psComp.value_delta AS NVARCHAR(20)) + @LineFeed
            + 'More than 10% of our queries are being recompiled. This is typically due to statistics changing on objects.' + @LineFeed AS Details,
        'Find out which objects are changing so quickly that they hit the stats update threshold. See the URL for more details.' AS HowToStopIt
    FROM #PerfmonStats ps
        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name = @ServiceName + ':SQL Statistics' AND psComp.counter_name = 'SQL Re-Compilations/sec' AND psComp.value_delta &gt; 0
    WHERE ps.Pass = 2
        AND ps.object_name = @ServiceName + ':SQL Statistics'
        AND ps.counter_name = 'Batch Requests/sec'
        AND ps.value_delta &gt; (1000 * @Seconds) /* Ignore servers sitting idle */
        AND (psComp.value_delta * 10) &gt; ps.value_delta /* Recompilations are more than 10% of batch requests per second */

    /* Server Info - Batch Requests per Sec - CheckID 19 */
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)
    SELECT 19 AS CheckID,
        250 AS Priority,
        'Server Info' AS FindingGroup,
        'Batch Requests per Sec' AS Finding,
        'http://www.BrentOzar.com/go/measure' AS URL,
        CAST(ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS NVARCHAR(20)) AS Details,
        ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS DetailsInt
    FROM #PerfmonStats ps
        INNER JOIN #PerfmonStats ps1 ON ps.object_name = ps1.object_name AND ps.counter_name = ps1.counter_name AND ps1.Pass = 1
    WHERE ps.Pass = 2
        AND ps.object_name = @ServiceName + ':SQL Statistics'
        AND ps.counter_name = 'Batch Requests/sec';


        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Compilations/sec', NULL)
        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Re-Compilations/sec', NULL)

    /* Server Info - SQL Compilations/sec - CheckID 25 */
    IF @ExpertMode = 1
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)
    SELECT 25 AS CheckID,
        250 AS Priority,
        'Server Info' AS FindingGroup,
        'SQL Compilations per Sec' AS Finding,
        'http://www.BrentOzar.com/go/measure' AS URL,
        CAST(ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS NVARCHAR(20)) AS Details,
        ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS DetailsInt
    FROM #PerfmonStats ps
        INNER JOIN #PerfmonStats ps1 ON ps.object_name = ps1.object_name AND ps.counter_name = ps1.counter_name AND ps1.Pass = 1
    WHERE ps.Pass = 2
        AND ps.object_name = @ServiceName + ':SQL Statistics'
        AND ps.counter_name = 'SQL Compilations/sec';

    /* Server Info - SQL Re-Compilations/sec - CheckID 26 */
    IF @ExpertMode = 1
    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)
    SELECT 26 AS CheckID,
        250 AS Priority,
        'Server Info' AS FindingGroup,
        'SQL Re-Compilations per Sec' AS Finding,
        'http://www.BrentOzar.com/go/measure' AS URL,
        CAST(ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS NVARCHAR(20)) AS Details,
        ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS DetailsInt
    FROM #PerfmonStats ps
        INNER JOIN #PerfmonStats ps1 ON ps.object_name = ps1.object_name AND ps.counter_name = ps1.counter_name AND ps1.Pass = 1
    WHERE ps.Pass = 2
        AND ps.object_name = @ServiceName + ':SQL Statistics'
        AND ps.counter_name = 'SQL Re-Compilations/sec';

    /* Server Info - Wait Time per Core per Sec - CheckID 20 */
    IF @Seconds &gt; 0
    BEGIN
        WITH waits1(SampleTime, waits_ms) AS (SELECT SampleTime, SUM(ws1.wait_time_ms) FROM #WaitStats ws1 WHERE ws1.Pass = 1 GROUP BY SampleTime),
        waits2(SampleTime, waits_ms) AS (SELECT SampleTime, SUM(ws2.wait_time_ms) FROM #WaitStats ws2 WHERE ws2.Pass = 2 GROUP BY SampleTime),
        cores(cpu_count) AS (SELECT SUM(1) FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE' AND is_online = 1)
        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)
        SELECT 19 AS CheckID,
            250 AS Priority,
            'Server Info' AS FindingGroup,
            'Wait Time per Core per Sec' AS Finding,
            'http://www.BrentOzar.com/go/measure' AS URL,
            CAST((waits2.waits_ms - waits1.waits_ms) / 1000 / i.cpu_count / DATEDIFF(ss, waits1.SampleTime, waits2.SampleTime) AS NVARCHAR(20)) AS Details,
            (waits2.waits_ms - waits1.waits_ms) / 1000 / i.cpu_count / DATEDIFF(ss, waits1.SampleTime, waits2.SampleTime) AS DetailsInt
        FROM cores i
          CROSS JOIN waits1
          CROSS JOIN waits2;
    END

    /* Server Performance - High CPU Utilization CheckID 24 */
    IF @Seconds &gt;= 30
        BEGIN
        /* If we're waiting 30+ seconds, run this check at the end.
           We get this data from the ring buffers, and it's only updated once per minute, so might
           as well get it now - whereas if we're checking 30+ seconds, it might get updated by the
           end of our sp_BlitzFirst session. */
        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)
        SELECT 24, 50, 'Server Performance', 'High CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'
            FROM (
                SELECT record,
                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle
                FROM (
                    SELECT TOP 1 CONVERT(XML, record) AS record
                    FROM sys.dm_os_ring_buffers
                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
                    AND record LIKE '%&lt;SystemHealth&gt;%'
                    ORDER BY timestamp DESC) AS rb
            ) AS y
            WHERE 100 - SystemIdle &gt;= 50

        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)
        SELECT 23, 250, 'Server Info', 'CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'
            FROM (
                SELECT record,
                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle
                FROM (
                    SELECT TOP 1 CONVERT(XML, record) AS record
                    FROM sys.dm_os_ring_buffers
                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
                    AND record LIKE '%&lt;SystemHealth&gt;%'
                    ORDER BY timestamp DESC) AS rb
            ) AS y

        END /* IF @Seconds &lt; 30 */

	RAISERROR('Analysis finished, outputting results',10,1) WITH NOWAIT;


    /* If we didn't find anything, apologize. */
    IF NOT EXISTS (SELECT * FROM #BlitzFirstResults WHERE Priority &lt; 250)
    BEGIN

        INSERT  INTO #BlitzFirstResults
                ( CheckID ,
                  Priority ,
                  FindingsGroup ,
                  Finding ,
                  URL ,
                  Details
                )
        VALUES  ( -1 ,
                  1 ,
                  'No Problems Found' ,
                  'From Your Community Volunteers' ,
                  'http://FirstResponderKit.org/' ,
                  'Try running our more in-depth checks with sp_Blitz, or there may not be an unusual SQL Server performance problem. '
                );

    END /*IF NOT EXISTS (SELECT * FROM #BlitzFirstResults) */

        /* Add credits for the nice folks who put so much time into building and maintaining this for free: */
        INSERT  INTO #BlitzFirstResults
                ( CheckID ,
                  Priority ,
                  FindingsGroup ,
                  Finding ,
                  URL ,
                  Details
                )
        VALUES  ( -1 ,
                  255 ,
                  'Thanks!' ,
                  'From Your Community Volunteers' ,
                  'http://FirstResponderKit.org/' ,
                  'To get help or add your own contributions, join us at http://FirstResponderKit.org.'
                );

        INSERT  INTO #BlitzFirstResults
                ( CheckID ,
                  Priority ,
                  FindingsGroup ,
                  Finding ,
                  URL ,
                  Details

                )
        VALUES  ( -1 ,
                  0 ,
                  'sp_BlitzFirst ' + CAST(CONVERT(DATETIMEOFFSET, @VersionDate, 102) AS VARCHAR(100)),
                  'From Your Community Volunteers' ,
                  'http://FirstResponderKit.org/' ,
                  'We hope you found this tool useful.'
                );

                /* Outdated sp_BlitzFirst - sp_BlitzFirst is Over 6 Months Old */
                IF DATEDIFF(MM, @VersionDate, SYSDATETIMEOFFSET()) &gt; 6
                    BEGIN
                        INSERT  INTO #BlitzFirstResults
                                ( CheckID ,
                                    Priority ,
                                    FindingsGroup ,
                                    Finding ,
                                    URL ,
                                    Details
                                )
                                SELECT 27 AS CheckID ,
                                        0 AS Priority ,
                                        'Outdated sp_BlitzFirst' AS FindingsGroup ,
                                        'sp_BlitzFirst is Over 6 Months Old' AS Finding ,
                                        'http://FirstResponderKit.org/' AS URL ,
                                        'Some things get better with age, like fine wine and your T-SQL. However, sp_BlitzFirst is not one of those things - time to go download the current one.' AS Details
                    END



    /* @OutputTableName lets us export the results to a permanent table */
    IF @OutputDatabaseName IS NOT NULL
        AND @OutputSchemaName IS NOT NULL
        AND @OutputTableName IS NOT NULL
        AND @OutputTableName NOT LIKE '#%'
        AND EXISTS ( SELECT *
                     FROM   sys.databases
                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)
    BEGIN
        SET @StringToExecute = 'USE '
            + @OutputDatabaseName
            + '; IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName
            + ''') AND NOT EXISTS (SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''
            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''
            + @OutputTableName + ''') CREATE TABLE '
            + @OutputSchemaName + '.'
            + @OutputTableName
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                CheckID INT NOT NULL,
                Priority TINYINT NOT NULL,
                FindingsGroup VARCHAR(50) NOT NULL,
                Finding VARCHAR(200) NOT NULL,
                URL VARCHAR(200) NOT NULL,
                Details NVARCHAR(4000) NULL,
                HowToStopIt [XML] NULL,
                QueryPlan [XML] NULL,
                QueryText NVARCHAR(MAX) NULL,
                StartTime DATETIMEOFFSET NULL,
                LoginName NVARCHAR(128) NULL,
                NTUserName NVARCHAR(128) NULL,
                OriginalLoginName NVARCHAR(128) NULL,
                ProgramName NVARCHAR(128) NULL,
                HostName NVARCHAR(128) NULL,
                DatabaseID INT NULL,
                DatabaseName NVARCHAR(128) NULL,
                OpenTransactionCount INT NULL,
                DetailsInt INT NULL,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'

        EXEC(@StringToExecute);
        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName + ''') INSERT '
            + @OutputDatabaseName + '.'
            + @OutputSchemaName + '.'
            + @OutputTableName
            + ' (ServerName, CheckDate, CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + (CONVERT(NVARCHAR(100), @StartSampleTime, 127)) + ''', CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt FROM #BlitzFirstResults ORDER BY Priority , FindingsGroup , Finding , Details';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableName, 2, 2) = '##')
    BEGIN
        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'
            + @OutputTableName
            + ''') IS NULL) CREATE TABLE '
            + @OutputTableName
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                CheckID INT NOT NULL,
                Priority TINYINT NOT NULL,
                FindingsGroup VARCHAR(50) NOT NULL,
                Finding VARCHAR(200) NOT NULL,
                URL VARCHAR(200) NOT NULL,
                Details NVARCHAR(4000) NULL,
                HowToStopIt [XML] NULL,
                QueryPlan [XML] NULL,
                QueryText NVARCHAR(MAX) NULL,
                StartTime DATETIMEOFFSET NULL,
                LoginName NVARCHAR(128) NULL,
                NTUserName NVARCHAR(128) NULL,
                OriginalLoginName NVARCHAR(128) NULL,
                ProgramName NVARCHAR(128) NULL,
                HostName NVARCHAR(128) NULL,
                DatabaseID INT NULL,
                DatabaseName NVARCHAR(128) NULL,
                OpenTransactionCount INT NULL,
                DetailsInt INT NULL,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
            + ' INSERT '
            + @OutputTableName
            + ' (ServerName, CheckDate, CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt FROM #BlitzFirstResults ORDER BY Priority , FindingsGroup , Finding , Details';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')
    BEGIN
        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)
    END

    /* @OutputTableNameFileStats lets us export the results to a permanent table */
    IF @OutputDatabaseName IS NOT NULL
        AND @OutputSchemaName IS NOT NULL
        AND @OutputTableNameFileStats IS NOT NULL
        AND @OutputTableNameFileStats NOT LIKE '#%'
        AND EXISTS ( SELECT *
                     FROM   sys.databases
                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)
    BEGIN
        /* Create the table */
        SET @StringToExecute = 'USE '
            + @OutputDatabaseName
            + '; IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName
            + ''') AND NOT EXISTS (SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''
            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''
            + @OutputTableNameFileStats + ''') CREATE TABLE '
            + @OutputSchemaName + '.'
            + @OutputTableNameFileStats
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                DatabaseID INT NOT NULL,
                FileID INT NOT NULL,
                DatabaseName NVARCHAR(256) ,
                FileLogicalName NVARCHAR(256) ,
                TypeDesc NVARCHAR(60) ,
                SizeOnDiskMB BIGINT ,
                io_stall_read_ms BIGINT ,
                num_of_reads BIGINT ,
                bytes_read BIGINT ,
                io_stall_write_ms BIGINT ,
                num_of_writes BIGINT ,
                bytes_written BIGINT,
                PhysicalName NVARCHAR(520) ,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
        EXEC(@StringToExecute);

        /* Create the view */
        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNameFileStats_View;
        IF OBJECT_ID(@ObjectFullName) IS NULL
            BEGIN
            SET @StringToExecute = 'USE '
                + @OutputDatabaseName
                + '; EXEC (''CREATE VIEW '
                + @OutputSchemaName + '.'
                + @OutputTableNameFileStats_View + ' AS ' + @LineFeed
                + 'SELECT f.ServerName, f.CheckDate, f.DatabaseID, f.DatabaseName, f.FileID, f.FileLogicalName, f.TypeDesc, f.PhysicalName, f.SizeOnDiskMB' + @LineFeed
                + ', DATEDIFF(ss, fPrior.CheckDate, f.CheckDate) AS ElapsedSeconds' + @LineFeed
                + ', (f.SizeOnDiskMB - fPrior.SizeOnDiskMB) AS SizeOnDiskMBgrowth' + @LineFeed
                + ', (f.io_stall_read_ms - fPrior.io_stall_read_ms) AS io_stall_read_ms' + @LineFeed
                + ', io_stall_read_ms_average = CASE WHEN (f.num_of_reads - fPrior.num_of_reads) = 0 THEN 0 ELSE (f.io_stall_read_ms - fPrior.io_stall_read_ms) / (f.num_of_reads - fPrior.num_of_reads) END' + @LineFeed
                + ', (f.num_of_reads - fPrior.num_of_reads) AS num_of_reads' + @LineFeed
                + ', (f.bytes_read - fPrior.bytes_read) / 1024.0 / 1024.0 AS megabytes_read' + @LineFeed
                + ', (f.io_stall_write_ms - fPrior.io_stall_write_ms) AS io_stall_write_ms' + @LineFeed
                + ', io_stall_write_ms_average = CASE WHEN (f.num_of_writes - fPrior.num_of_writes) = 0 THEN 0 ELSE (f.io_stall_write_ms - fPrior.io_stall_write_ms) / (f.num_of_writes - fPrior.num_of_writes) END' + @LineFeed
                + ', (f.num_of_writes - fPrior.num_of_writes) AS num_of_writes' + @LineFeed
                + ', (f.bytes_written - fPrior.bytes_written) / 1024.0 / 1024.0 AS megabytes_written' + @LineFeed
                + 'FROM ' + @OutputSchemaName + '.' + @OutputTableNameFileStats + ' f' + @LineFeed
                + 'INNER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameFileStats + ' fPrior ON f.ServerName = fPrior.ServerName AND f.DatabaseID = fPrior.DatabaseID AND f.FileID = fPrior.FileID AND f.CheckDate &gt; fPrior.CheckDate' + @LineFeed
                + 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameFileStats + ' fMiddle ON f.ServerName = fMiddle.ServerName AND f.DatabaseID = fMiddle.DatabaseID AND f.FileID = fMiddle.FileID AND f.CheckDate &gt; fMiddle.CheckDate AND fMiddle.CheckDate &gt; fPrior.CheckDate' + @LineFeed
                + 'WHERE fMiddle.ID IS NULL;'')'
            EXEC(@StringToExecute);
            END

        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName + ''') INSERT '
            + @OutputDatabaseName + '.'
            + @OutputSchemaName + '.'
            + @OutputTableNameFileStats
            + ' (ServerName, CheckDate, DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', '
            + 'DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName FROM #FileStats WHERE Pass = 2';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableNameFileStats, 2, 2) = '##')
    BEGIN
        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'
            + @OutputTableNameFileStats
            + ''') IS NULL) CREATE TABLE '
            + @OutputTableNameFileStats
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                DatabaseID INT NOT NULL,
                FileID INT NOT NULL,
                DatabaseName NVARCHAR(256) ,
                FileLogicalName NVARCHAR(256) ,
                TypeDesc NVARCHAR(60) ,
                SizeOnDiskMB BIGINT ,
                io_stall_read_ms BIGINT ,
                num_of_reads BIGINT ,
                bytes_read BIGINT ,
                io_stall_write_ms BIGINT ,
                num_of_writes BIGINT ,
                bytes_written BIGINT,
                PhysicalName NVARCHAR(520) ,
                DetailsInt INT NULL,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
            + ' INSERT '
            + @OutputTableNameFileStats
            + ' (ServerName, CheckDate, DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', '
            + 'DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName FROM #FileStats WHERE Pass = 2';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableNameFileStats, 2, 1) = '#')
    BEGIN
        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)
    END


    /* @OutputTableNamePerfmonStats lets us export the results to a permanent table */
    IF @OutputDatabaseName IS NOT NULL
        AND @OutputSchemaName IS NOT NULL
        AND @OutputTableNamePerfmonStats IS NOT NULL
        AND @OutputTableNamePerfmonStats NOT LIKE '#%'
        AND EXISTS ( SELECT *
                     FROM   sys.databases
                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)
    BEGIN
        /* Create the table */
        SET @StringToExecute = 'USE '
            + @OutputDatabaseName
            + '; IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName
            + ''') AND NOT EXISTS (SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''
            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''
            + @OutputTableNamePerfmonStats + ''') CREATE TABLE '
            + @OutputSchemaName + '.'
            + @OutputTableNamePerfmonStats
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                [object_name] NVARCHAR(128) NOT NULL,
                [counter_name] NVARCHAR(128) NOT NULL,
                [instance_name] NVARCHAR(128) NULL,
                [cntr_value] BIGINT NULL,
                [cntr_type] INT NOT NULL,
                [value_delta] BIGINT NULL,
                [value_per_second] DECIMAL(18,2) NULL,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
        EXEC(@StringToExecute);

        /* Create the view */
        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNamePerfmonStats_View;
        IF OBJECT_ID(@ObjectFullName) IS NULL
            BEGIN
            SET @StringToExecute = 'USE '
                + @OutputDatabaseName
                + '; EXEC (''CREATE VIEW '
                + @OutputSchemaName + '.'
                + @OutputTableNamePerfmonStats_View + ' AS ' + @LineFeed
                + 'SELECT p.ServerName, p.CheckDate, p.object_name, p.counter_name, p.instance_name' + @LineFeed
                + ', DATEDIFF(ss, pPrior.CheckDate, p.CheckDate) AS ElapsedSeconds' + @LineFeed
                + ', p.cntr_value' + @LineFeed
                + ', p.cntr_type' + @LineFeed
                + ', (p.cntr_value - pPrior.cntr_value) AS cntr_delta' + @LineFeed
                + 'FROM ' + @OutputSchemaName + '.' + @OutputTableNamePerfmonStats + ' p' + @LineFeed
                + 'INNER JOIN ' + @OutputSchemaName + '.' + @OutputTableNamePerfmonStats + ' pPrior ON p.ServerName = pPrior.ServerName AND p.object_name = pPrior.object_name AND p.counter_name = pPrior.counter_name AND p.instance_name = pPrior.instance_name AND p.CheckDate &gt; pPrior.CheckDate' + @LineFeed
                + 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNamePerfmonStats + ' pMiddle ON p.ServerName = pMiddle.ServerName AND p.object_name = pMiddle.object_name AND p.counter_name = pMiddle.counter_name AND p.instance_name = pMiddle.instance_name AND p.CheckDate &gt; pMiddle.CheckDate AND pMiddle.CheckDate &gt; pPrior.CheckDate' + @LineFeed
                + 'WHERE pMiddle.ID IS NULL;'')'
            EXEC(@StringToExecute);
            END;

        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName + ''') INSERT '
            + @OutputDatabaseName + '.'
            + @OutputSchemaName + '.'
            + @OutputTableNamePerfmonStats
            + ' (ServerName, CheckDate, object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', '
            + 'object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second FROM #PerfmonStats WHERE Pass = 2';
        EXEC(@StringToExecute);

    END
    ELSE IF (SUBSTRING(@OutputTableNamePerfmonStats, 2, 2) = '##')
    BEGIN
        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'
            + @OutputTableNamePerfmonStats
            + ''') IS NULL) CREATE TABLE '
            + @OutputTableNamePerfmonStats
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                [object_name] NVARCHAR(128) NOT NULL,
                [counter_name] NVARCHAR(128) NOT NULL,
                [instance_name] NVARCHAR(128) NULL,
                [cntr_value] BIGINT NULL,
                [cntr_type] INT NOT NULL,
                [value_delta] BIGINT NULL,
                [value_per_second] DECIMAL(18,2) NULL,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
            + ' INSERT '
            + @OutputTableNamePerfmonStats
            + ' (ServerName, CheckDate, object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', '
            + 'object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second FROM #PerfmonStats WHERE Pass = 2';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableNamePerfmonStats, 2, 1) = '#')
    BEGIN
        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)
    END


    /* @OutputTableNameWaitStats lets us export the results to a permanent table */
    IF @OutputDatabaseName IS NOT NULL
        AND @OutputSchemaName IS NOT NULL
        AND @OutputTableNameWaitStats IS NOT NULL
        AND @OutputTableNameWaitStats NOT LIKE '#%'
        AND EXISTS ( SELECT *
                     FROM   sys.databases
                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)
    BEGIN
        /* Create the table */
        SET @StringToExecute = 'USE '
            + @OutputDatabaseName
            + '; IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName
            + ''') AND NOT EXISTS (SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''
            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''
            + @OutputTableNameWaitStats + ''') CREATE TABLE '
            + @OutputSchemaName + '.'
            + @OutputTableNameWaitStats
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                wait_type NVARCHAR(60),
                wait_time_ms BIGINT,
                signal_wait_time_ms BIGINT,
                waiting_tasks_count BIGINT ,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
        EXEC(@StringToExecute);

        /* Create the view */
        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNameWaitStats_View;
        IF OBJECT_ID(@ObjectFullName) IS NULL
            BEGIN
            SET @StringToExecute = 'USE '
                + @OutputDatabaseName
                + '; EXEC (''CREATE VIEW '
                + @OutputSchemaName + '.'
                + @OutputTableNameWaitStats_View + ' AS ' + @LineFeed
                + 'SELECT w.ServerName, w.CheckDate, w.wait_type' + @LineFeed
                + ', DATEDIFF(ss, wPrior.CheckDate, w.CheckDate) AS ElapsedSeconds' + @LineFeed
                + ', (w.wait_time_ms - wPrior.wait_time_ms) AS wait_time_ms_delta' + @LineFeed
                + ', (w.signal_wait_time_ms - wPrior.signal_wait_time_ms) AS signal_wait_time_ms_delta' + @LineFeed
                + ', (w.waiting_tasks_count - wPrior.waiting_tasks_count) AS waiting_tasks_count_delta' + @LineFeed
                + 'FROM ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + ' w' + @LineFeed
                + 'INNER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + ' wPrior ON w.ServerName = wPrior.ServerName AND w.wait_type = wPrior.wait_type AND w.CheckDate &gt; wPrior.CheckDate' + @LineFeed
                + 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + ' wMiddle ON w.ServerName = wMiddle.ServerName AND w.wait_type = wMiddle.wait_type AND w.CheckDate &gt; wMiddle.CheckDate AND wMiddle.CheckDate &gt; wPrior.CheckDate' + @LineFeed
                + 'WHERE wMiddle.ID IS NULL;'')'
            EXEC(@StringToExecute);
            END


        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '
            + @OutputDatabaseName
            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''
            + @OutputSchemaName + ''') INSERT '
            + @OutputDatabaseName + '.'
            + @OutputSchemaName + '.'
            + @OutputTableNameWaitStats
            + ' (ServerName, CheckDate, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', '
            + 'wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count FROM #WaitStats WHERE Pass = 2 AND wait_time_ms &gt; 0 AND waiting_tasks_count &gt; 0';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableNameWaitStats, 2, 2) = '##')
    BEGIN
        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'
            + @OutputTableNameWaitStats
            + ''') IS NULL) CREATE TABLE '
            + @OutputTableNameWaitStats
            + ' (ID INT IDENTITY(1,1) NOT NULL,
                ServerName NVARCHAR(128),
                CheckDate DATETIMEOFFSET,
                wait_type NVARCHAR(60),
                wait_time_ms BIGINT,
                signal_wait_time_ms BIGINT,
                waiting_tasks_count BIGINT ,
                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'
            + ' INSERT '
            + @OutputTableNameWaitStats
            + ' (ServerName, CheckDate, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count) SELECT '''
            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))
            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 127) + ''', '
            + 'wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count FROM #WaitStats WHERE Pass = 2 AND wait_time_ms &gt; 0 AND waiting_tasks_count &gt; 0';
        EXEC(@StringToExecute);
    END
    ELSE IF (SUBSTRING(@OutputTableNameWaitStats, 2, 1) = '#')
    BEGIN
        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)
    END




    DECLARE @separator AS VARCHAR(1);
    IF @OutputType = 'RSV'
        SET @separator = CHAR(31);
    ELSE
        SET @separator = ',';

    IF @OutputType = 'COUNT' AND @SinceStartup = 0
    BEGIN
        SELECT  COUNT(*) AS Warnings
        FROM    #BlitzFirstResults
    END
    ELSE
        IF @OutputType = 'Opserver1' AND @SinceStartup = 0
        BEGIN

            SELECT  r.[Priority] ,
                    r.[FindingsGroup] ,
                    r.[Finding] ,
                    r.[URL] ,
                    r.[Details],
                    r.[HowToStopIt] ,
                    r.[CheckID] ,
                    r.[StartTime],
                    r.[LoginName],
                    r.[NTUserName],
                    r.[OriginalLoginName],
                    r.[ProgramName],
                    r.[HostName],
                    r.[DatabaseID],
                    r.[DatabaseName],
                    r.[OpenTransactionCount],
                    r.[QueryPlan],
                    r.[QueryText],
                    qsNow.plan_handle AS PlanHandle,
                    qsNow.sql_handle AS SqlHandle,
                    qsNow.statement_start_offset AS StatementStartOffset,
                    qsNow.statement_end_offset AS StatementEndOffset,
                    [Executions] = qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0)),
                    [ExecutionsPercent] = CAST(100.0 * (qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0))) / (qsTotal.execution_count - qsTotalFirst.execution_count) AS DECIMAL(6,2)),
                    [Duration] = qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0)),
                    [DurationPercent] = CAST(100.0 * (qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0))) / (qsTotal.total_elapsed_time - qsTotalFirst.total_elapsed_time) AS DECIMAL(6,2)),
                    [CPU] = qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0)),
                    [CPUPercent] = CAST(100.0 * (qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0))) / (qsTotal.total_worker_time - qsTotalFirst.total_worker_time) AS DECIMAL(6,2)),
                    [Reads] = qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0)),
                    [ReadsPercent] = CAST(100.0 * (qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0))) / (qsTotal.total_logical_reads - qsTotalFirst.total_logical_reads) AS DECIMAL(6,2)),
                    [PlanCreationTime] = CONVERT(NVARCHAR(100), qsNow.creation_time ,121),
                    [TotalExecutions] = qsNow.execution_count,
                    [TotalExecutionsPercent] = CAST(100.0 * qsNow.execution_count / qsTotal.execution_count AS DECIMAL(6,2)),
                    [TotalDuration] = qsNow.total_elapsed_time,
                    [TotalDurationPercent] = CAST(100.0 * qsNow.total_elapsed_time / qsTotal.total_elapsed_time AS DECIMAL(6,2)),
                    [TotalCPU] = qsNow.total_worker_time,
                    [TotalCPUPercent] = CAST(100.0 * qsNow.total_worker_time / qsTotal.total_worker_time AS DECIMAL(6,2)),
                    [TotalReads] = qsNow.total_logical_reads,
                    [TotalReadsPercent] = CAST(100.0 * qsNow.total_logical_reads / qsTotal.total_logical_reads AS DECIMAL(6,2)),
                    r.[DetailsInt]
            FROM    #BlitzFirstResults r
                LEFT OUTER JOIN #QueryStats qsTotal ON qsTotal.Pass = 0
                LEFT OUTER JOIN #QueryStats qsTotalFirst ON qsTotalFirst.Pass = -1
                LEFT OUTER JOIN #QueryStats qsNow ON r.QueryStatsNowID = qsNow.ID
                LEFT OUTER JOIN #QueryStats qsFirst ON r.QueryStatsFirstID = qsFirst.ID
            ORDER BY r.Priority ,
                    r.FindingsGroup ,
                    CASE
                        WHEN r.CheckID = 6 THEN DetailsInt
                        ELSE 0
                    END DESC,
                    r.Finding,
                    r.ID;
        END
        ELSE IF @OutputType IN ( 'CSV', 'RSV' ) AND @SinceStartup = 0
        BEGIN

            SELECT  Result = CAST([Priority] AS NVARCHAR(100))
                    + @separator + CAST(CheckID AS NVARCHAR(100))
                    + @separator + COALESCE([FindingsGroup],
                                            '(N/A)') + @separator
                    + COALESCE([Finding], '(N/A)') + @separator
                    + COALESCE(DatabaseName, '(N/A)') + @separator
                    + COALESCE([URL], '(N/A)') + @separator
                    + COALESCE([Details], '(N/A)')
            FROM    #BlitzFirstResults
            ORDER BY Priority ,
                    FindingsGroup ,
                    CASE
                        WHEN CheckID = 6 THEN DetailsInt
                        ELSE 0
                    END DESC,
                    Finding,
                    Details;
        END
        ELSE IF @ExpertMode = 0 AND @OutputXMLasNVARCHAR = 0 AND @SinceStartup = 0
        BEGIN
            SELECT  [Priority] ,
                    [FindingsGroup] ,
                    [Finding] ,
                    [URL] ,
                    CAST(@StockDetailsHeader + [Details] + @StockDetailsFooter AS XML) AS Details,
                    CAST(@StockWarningHeader + HowToStopIt + @StockWarningFooter AS XML) AS HowToStopIt,
                    [QueryText],
                    [QueryPlan]
            FROM    #BlitzFirstResults
            WHERE (@Seconds &gt; 0 OR (Priority IN (0, 250, 251, 255))) /* For @Seconds = 0, filter out broken checks for now */
            ORDER BY Priority ,
                    FindingsGroup ,
                    CASE
                        WHEN CheckID = 6 THEN DetailsInt
                        ELSE 0
                    END DESC,
                    Finding,
                    ID;
        END
        ELSE IF @ExpertMode = 0 AND @OutputXMLasNVARCHAR = 1 AND @SinceStartup = 0
        BEGIN
            SELECT  [Priority] ,
                    [FindingsGroup] ,
                    [Finding] ,
                    [URL] ,
                    CAST(@StockDetailsHeader + [Details] + @StockDetailsFooter AS NVARCHAR(MAX)) AS Details,
                    CAST([HowToStopIt] AS NVARCHAR(MAX)) AS HowToStopIt,
                    CAST([QueryText] AS NVARCHAR(MAX)) AS QueryText,
                    CAST([QueryPlan] AS NVARCHAR(MAX)) AS QueryPlan
            FROM    #BlitzFirstResults
            WHERE (@Seconds &gt; 0 OR (Priority IN (0, 250, 251, 255))) /* For @Seconds = 0, filter out broken checks for now */
            ORDER BY Priority ,
                    FindingsGroup ,
                    CASE
                        WHEN CheckID = 6 THEN DetailsInt
                        ELSE 0
                    END DESC,
                    Finding,
                    ID;
        END
        ELSE IF @ExpertMode = 1
        BEGIN
            IF @SinceStartup = 0
                SELECT  r.[Priority] ,
                        r.[FindingsGroup] ,
                        r.[Finding] ,
                        r.[URL] ,
                        CAST(@StockDetailsHeader + r.[Details] + @StockDetailsFooter AS XML) AS Details,
                        CAST(@StockWarningHeader + r.HowToStopIt + @StockWarningFooter AS XML) AS HowToStopIt,
                        r.[CheckID] ,
                        r.[StartTime],
                        r.[LoginName],
                        r.[NTUserName],
                        r.[OriginalLoginName],
                        r.[ProgramName],
                        r.[HostName],
                        r.[DatabaseID],
                        r.[DatabaseName],
                        r.[OpenTransactionCount],
                        r.[QueryPlan],
                        r.[QueryText],
                        qsNow.plan_handle AS PlanHandle,
                        qsNow.sql_handle AS SqlHandle,
                        qsNow.statement_start_offset AS StatementStartOffset,
                        qsNow.statement_end_offset AS StatementEndOffset,
                        [Executions] = qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0)),
                        [ExecutionsPercent] = CAST(100.0 * (qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0))) / (qsTotal.execution_count - qsTotalFirst.execution_count) AS DECIMAL(6,2)),
                        [Duration] = qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0)),
                        [DurationPercent] = CAST(100.0 * (qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0))) / (qsTotal.total_elapsed_time - qsTotalFirst.total_elapsed_time) AS DECIMAL(6,2)),
                        [CPU] = qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0)),
                        [CPUPercent] = CAST(100.0 * (qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0))) / (qsTotal.total_worker_time - qsTotalFirst.total_worker_time) AS DECIMAL(6,2)),
                        [Reads] = qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0)),
                        [ReadsPercent] = CAST(100.0 * (qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0))) / (qsTotal.total_logical_reads - qsTotalFirst.total_logical_reads) AS DECIMAL(6,2)),
                        [PlanCreationTime] = CONVERT(NVARCHAR(100), qsNow.creation_time ,121),
                        [TotalExecutions] = qsNow.execution_count,
                        [TotalExecutionsPercent] = CAST(100.0 * qsNow.execution_count / qsTotal.execution_count AS DECIMAL(6,2)),
                        [TotalDuration] = qsNow.total_elapsed_time,
                        [TotalDurationPercent] = CAST(100.0 * qsNow.total_elapsed_time / qsTotal.total_elapsed_time AS DECIMAL(6,2)),
                        [TotalCPU] = qsNow.total_worker_time,
                        [TotalCPUPercent] = CAST(100.0 * qsNow.total_worker_time / qsTotal.total_worker_time AS DECIMAL(6,2)),
                        [TotalReads] = qsNow.total_logical_reads,
                        [TotalReadsPercent] = CAST(100.0 * qsNow.total_logical_reads / qsTotal.total_logical_reads AS DECIMAL(6,2)),
                        r.[DetailsInt]
                FROM    #BlitzFirstResults r
                    LEFT OUTER JOIN #QueryStats qsTotal ON qsTotal.Pass = 0
                    LEFT OUTER JOIN #QueryStats qsTotalFirst ON qsTotalFirst.Pass = -1
                    LEFT OUTER JOIN #QueryStats qsNow ON r.QueryStatsNowID = qsNow.ID
                    LEFT OUTER JOIN #QueryStats qsFirst ON r.QueryStatsFirstID = qsFirst.ID
                WHERE (@Seconds &gt; 0 OR (Priority IN (0, 250, 251, 255))) /* For @Seconds = 0, filter out broken checks for now */
                ORDER BY r.Priority ,
                        r.FindingsGroup ,
                        CASE
                            WHEN r.CheckID = 6 THEN DetailsInt
                            ELSE 0
                        END DESC,
                        r.Finding,
                        r.ID;

            -------------------------
            --What happened: #WaitStats
            -------------------------
            IF @Seconds = 0
                BEGIN
                /* Measure waits in hours */
                ;WITH max_batch AS (
                    SELECT MAX(SampleTime) AS SampleTime
                    FROM #WaitStats
                )
                SELECT
                    'WAIT STATS' AS Pattern,
                    b.SampleTime AS [Sample Ended],
                    CAST(DATEDIFF(mi,wd1.SampleTime, wd2.SampleTime) / 60.0 AS DECIMAL(18,1)) AS [Hours Sample],
                    wd1.wait_type,
                    CAST(c.[Wait Time (Seconds)] / 60.0 / 60 AS DECIMAL(18,1)) AS [Wait Time (Hours)],
                    CAST((wd2.wait_time_ms - wd1.wait_time_ms) / 1000.0 / 60 / 60 / cores.cpu_count / DATEDIFF(ss, wd1.SampleTime, wd2.SampleTime) AS DECIMAL(18,1)) AS [Per Core Per Hour],
                    CAST(c.[Signal Wait Time (Seconds)] / 60.0 / 60 AS DECIMAL(18,1)) AS [Signal Wait Time (Hours)],
                    CASE WHEN c.[Wait Time (Seconds)] &gt; 0
                     THEN CAST(100.*(c.[Signal Wait Time (Seconds)]/c.[Wait Time (Seconds)]) AS NUMERIC(4,1))
                    ELSE 0 END AS [Percent Signal Waits],
                    (wd2.waiting_tasks_count - wd1.waiting_tasks_count) AS [Number of Waits],
                    CASE WHEN (wd2.waiting_tasks_count - wd1.waiting_tasks_count) &gt; 0
                    THEN
                        CAST((wd2.wait_time_ms-wd1.wait_time_ms)/
                            (1.0*(wd2.waiting_tasks_count - wd1.waiting_tasks_count)) AS NUMERIC(12,1))
                    ELSE 0 END AS [Avg ms Per Wait],
                    N'http://www.brentozar.com/sql/wait-stats/#' + wd1.wait_type AS URL
                FROM  max_batch b
                JOIN #WaitStats wd2 ON
                    wd2.SampleTime =b.SampleTime
                JOIN #WaitStats wd1 ON
                    wd1.wait_type=wd2.wait_type AND
                    wd2.SampleTime &gt; wd1.SampleTime
                CROSS APPLY (SELECT SUM(1) AS cpu_count FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE' AND is_online = 1) AS cores
                CROSS APPLY (SELECT
                    CAST((wd2.wait_time_ms-wd1.wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Wait Time (Seconds)],
                    CAST((wd2.signal_wait_time_ms - wd1.signal_wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Signal Wait Time (Seconds)]) AS c
                WHERE (wd2.waiting_tasks_count - wd1.waiting_tasks_count) &gt; 0
                    AND wd2.wait_time_ms-wd1.wait_time_ms &gt; 0
                ORDER BY [Wait Time (Seconds)] DESC;
                END
            ELSE
                BEGIN
                /* Measure waits in seconds */
                ;WITH max_batch AS (
                    SELECT MAX(SampleTime) AS SampleTime
                    FROM #WaitStats
                )
                SELECT
                    'WAIT STATS' AS Pattern,
                    b.SampleTime AS [Sample Ended],
                    DATEDIFF(ss,wd1.SampleTime, wd2.SampleTime) AS [Seconds Sample],
                    wd1.wait_type,
                    c.[Wait Time (Seconds)],
                    CAST((wd2.wait_time_ms - wd1.wait_time_ms) / 1000.0 / cores.cpu_count / DATEDIFF(ss, wd1.SampleTime, wd2.SampleTime) AS DECIMAL(18,1)) AS [Per Core Per Second],
                    c.[Signal Wait Time (Seconds)],
                    CASE WHEN c.[Wait Time (Seconds)] &gt; 0
                     THEN CAST(100.*(c.[Signal Wait Time (Seconds)]/c.[Wait Time (Seconds)]) AS NUMERIC(4,1))
                    ELSE 0 END AS [Percent Signal Waits],
                    (wd2.waiting_tasks_count - wd1.waiting_tasks_count) AS [Number of Waits],
                    CASE WHEN (wd2.waiting_tasks_count - wd1.waiting_tasks_count) &gt; 0
                    THEN
                        CAST((wd2.wait_time_ms-wd1.wait_time_ms)/
                            (1.0*(wd2.waiting_tasks_count - wd1.waiting_tasks_count)) AS NUMERIC(12,1))
                    ELSE 0 END AS [Avg ms Per Wait],
                    N'http://www.brentozar.com/sql/wait-stats/#' + wd1.wait_type AS URL
                FROM  max_batch b
                JOIN #WaitStats wd2 ON
                    wd2.SampleTime =b.SampleTime
                JOIN #WaitStats wd1 ON
                    wd1.wait_type=wd2.wait_type AND
                    wd2.SampleTime &gt; wd1.SampleTime
                CROSS APPLY (SELECT SUM(1) AS cpu_count FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE' AND is_online = 1) AS cores
                CROSS APPLY (SELECT
                    CAST((wd2.wait_time_ms-wd1.wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Wait Time (Seconds)],
                    CAST((wd2.signal_wait_time_ms - wd1.signal_wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Signal Wait Time (Seconds)]) AS c
                WHERE (wd2.waiting_tasks_count - wd1.waiting_tasks_count) &gt; 0
                    AND wd2.wait_time_ms-wd1.wait_time_ms &gt; 0
                ORDER BY [Wait Time (Seconds)] DESC;
                END;

            -------------------------
            --What happened: #FileStats
            -------------------------
            WITH readstats AS (
                SELECT 'PHYSICAL READS' AS Pattern,
                ROW_NUMBER() OVER (ORDER BY wd2.avg_stall_read_ms DESC) AS StallRank,
                wd2.SampleTime AS [Sample Time],
                DATEDIFF(ss,wd1.SampleTime, wd2.SampleTime) AS [Sample (seconds)],
                wd1.DatabaseName ,
                wd1.FileLogicalName AS [File Name],
                UPPER(SUBSTRING(wd1.PhysicalName, 1, 2)) AS [Drive] ,
                wd1.SizeOnDiskMB ,
                ( wd2.num_of_reads - wd1.num_of_reads ) AS [# Reads/Writes],
                CASE WHEN wd2.num_of_reads - wd1.num_of_reads &gt; 0
                  THEN CAST(( wd2.bytes_read - wd1.bytes_read)/1024./1024. AS NUMERIC(21,1))
                  ELSE 0
                END AS [MB Read/Written],
                wd2.avg_stall_read_ms AS [Avg Stall (ms)],
                wd1.PhysicalName AS [file physical name]
            FROM #FileStats wd2
                JOIN #FileStats wd1 ON wd2.SampleTime &gt; wd1.SampleTime
                  AND wd1.DatabaseID = wd2.DatabaseID
                  AND wd1.FileID = wd2.FileID
            ),
            writestats AS (
                SELECT
                'PHYSICAL WRITES' AS Pattern,
                ROW_NUMBER() OVER (ORDER BY wd2.avg_stall_write_ms DESC) AS StallRank,
                wd2.SampleTime AS [Sample Time],
                DATEDIFF(ss,wd1.SampleTime, wd2.SampleTime) AS [Sample (seconds)],
                wd1.DatabaseName ,
                wd1.FileLogicalName AS [File Name],
                UPPER(SUBSTRING(wd1.PhysicalName, 1, 2)) AS [Drive] ,
                wd1.SizeOnDiskMB ,
                ( wd2.num_of_writes - wd1.num_of_writes ) AS [# Reads/Writes],
                CASE WHEN wd2.num_of_writes - wd1.num_of_writes &gt; 0
                  THEN CAST(( wd2.bytes_written - wd1.bytes_written)/1024./1024. AS NUMERIC(21,1))
                  ELSE 0
                END AS [MB Read/Written],
                wd2.avg_stall_write_ms AS [Avg Stall (ms)],
                wd1.PhysicalName AS [file physical name]
            FROM #FileStats wd2
                JOIN #FileStats wd1 ON wd2.SampleTime &gt; wd1.SampleTime
                  AND wd1.DatabaseID = wd2.DatabaseID
                  AND wd1.FileID = wd2.FileID
            )
            SELECT
                Pattern, [Sample Time], [Sample (seconds)], [File Name], [Drive],  [# Reads/Writes],[MB Read/Written],[Avg Stall (ms)], [file physical name]
            FROM readstats
            WHERE StallRank &lt;=5 AND [MB Read/Written] &gt; 0
            UNION ALL
            SELECT Pattern, [Sample Time], [Sample (seconds)], [File Name], [Drive],  [# Reads/Writes],[MB Read/Written],[Avg Stall (ms)], [file physical name]
            FROM writestats
            WHERE StallRank &lt;=5 AND [MB Read/Written] &gt; 0;


            -------------------------
            --What happened: #PerfmonStats
            -------------------------

            SELECT 'PERFMON' AS Pattern, pLast.[object_name], pLast.counter_name, pLast.instance_name,
                pFirst.SampleTime AS FirstSampleTime, pFirst.cntr_value AS FirstSampleValue,
                pLast.SampleTime AS LastSampleTime, pLast.cntr_value AS LastSampleValue,
                pLast.cntr_value - pFirst.cntr_value AS ValueDelta,
                ((1.0 * pLast.cntr_value - pFirst.cntr_value) / DATEDIFF(ss, pFirst.SampleTime, pLast.SampleTime)) AS ValuePerSecond
                FROM #PerfmonStats pLast
                    INNER JOIN #PerfmonStats pFirst ON pFirst.[object_name] = pLast.[object_name] AND pFirst.counter_name = pLast.counter_name AND (pFirst.instance_name = pLast.instance_name OR (pFirst.instance_name IS NULL AND pLast.instance_name IS NULL))
                    AND pLast.ID &gt; pFirst.ID
				WHERE (pLast.cntr_value - pFirst.cntr_value) &gt; 0
                ORDER BY Pattern, pLast.[object_name], pLast.counter_name, pLast.instance_name


            -------------------------
            --What happened: #FileStats
            -------------------------
            SELECT
                [qsNow].[ID] AS [Now-ID],
                [qsNow].[Pass] AS [Now-Pass],
                [qsNow].[SampleTime] AS [Now-SampleTime],
                [qsNow].[sql_handle] AS [Now-sql_handle],
                [qsNow].[statement_start_offset] AS [Now-statement_start_offset],
                [qsNow].[statement_end_offset] AS [Now-statement_end_offset],
                [qsNow].[plan_generation_num] AS [Now-plan_generation_num],
                [qsNow].[plan_handle] AS [Now-plan_handle],
                [qsNow].[execution_count] AS [Now-execution_count],
                [qsNow].[total_worker_time] AS [Now-total_worker_time],
                [qsNow].[total_physical_reads] AS [Now-total_physical_reads],
                [qsNow].[total_logical_writes] AS [Now-total_logical_writes],
                [qsNow].[total_logical_reads] AS [Now-total_logical_reads],
                [qsNow].[total_clr_time] AS [Now-total_clr_time],
                [qsNow].[total_elapsed_time] AS [Now-total_elapsed_time],
                [qsNow].[creation_time] AS [Now-creation_time],
                [qsNow].[query_hash] AS [Now-query_hash],
                [qsNow].[query_plan_hash] AS [Now-query_plan_hash],
                [qsNow].[Points] AS [Now-Points],
                [qsFirst].[ID] AS [First-ID],
                [qsFirst].[Pass] AS [First-Pass],
                [qsFirst].[SampleTime] AS [First-SampleTime],
                [qsFirst].[sql_handle] AS [First-sql_handle],
                [qsFirst].[statement_start_offset] AS [First-statement_start_offset],
                [qsFirst].[statement_end_offset] AS [First-statement_end_offset],
                [qsFirst].[plan_generation_num] AS [First-plan_generation_num],
                [qsFirst].[plan_handle] AS [First-plan_handle],
                [qsFirst].[execution_count] AS [First-execution_count],
                [qsFirst].[total_worker_time] AS [First-total_worker_time],
                [qsFirst].[total_physical_reads] AS [First-total_physical_reads],
                [qsFirst].[total_logical_writes] AS [First-total_logical_writes],
                [qsFirst].[total_logical_reads] AS [First-total_logical_reads],
                [qsFirst].[total_clr_time] AS [First-total_clr_time],
                [qsFirst].[total_elapsed_time] AS [First-total_elapsed_time],
                [qsFirst].[creation_time] AS [First-creation_time],
                [qsFirst].[query_hash] AS [First-query_hash],
                [qsFirst].[query_plan_hash] AS [First-query_plan_hash],
                [qsFirst].[Points] AS [First-Points]
            FROM #QueryStats qsNow
              INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1
            WHERE qsNow.Pass = 2
        END

    DROP TABLE #BlitzFirstResults;

    /* What's running right now? This is the first and last result set. */
    IF @SinceStartup = 0 AND @Seconds &gt; 0 AND @ExpertMode = 1 
    BEGIN
		IF OBJECT_ID('dbo.sp_BlitzWho') IS NOT NULL
		BEGIN
			EXEC [dbo].[sp_BlitzWho]
		END
    END /* IF @SinceStartup = 0 AND @Seconds &gt; 0 AND @ExpertMode = 1   -   What's running right now? This is the first and last result set. */

END /* IF @Question IS NULL */
ELSE IF @Question IS NOT NULL

/* We're playing Magic SQL 8 Ball, so give them an answer. */
BEGIN
    IF OBJECT_ID('tempdb..#BlitzFirstAnswers') IS NOT NULL
        DROP TABLE #BlitzFirstAnswers;
    CREATE TABLE #BlitzFirstAnswers(Answer VARCHAR(200) NOT NULL);
    INSERT INTO #BlitzFirstAnswers VALUES ('It sounds like a SAN problem.');
    INSERT INTO #BlitzFirstAnswers VALUES ('You know what you need? Bacon.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Talk to the developers about that.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Let''s post that on StackOverflow.com and find out.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Have you tried adding an index?');
    INSERT INTO #BlitzFirstAnswers VALUES ('Have you tried dropping an index?');
    INSERT INTO #BlitzFirstAnswers VALUES ('You can''t prove anything.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Please phrase the question in the form of an answer.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Outlook not so good. Access even worse.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Did you try asking the rubber duck? http://www.codinghorror.com/blog/2012/03/rubber-duck-problem-solving.html');
    INSERT INTO #BlitzFirstAnswers VALUES ('Oooo, I read about that once.');
    INSERT INTO #BlitzFirstAnswers VALUES ('I feel your pain.');
    INSERT INTO #BlitzFirstAnswers VALUES ('http://LMGTFY.com');
    INSERT INTO #BlitzFirstAnswers VALUES ('No comprende Ingles, senor.');
    INSERT INTO #BlitzFirstAnswers VALUES ('I don''t have that problem on my Mac.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Is Priority Boost on?');
    INSERT INTO #BlitzFirstAnswers VALUES ('Have you tried rebooting your machine?');
    INSERT INTO #BlitzFirstAnswers VALUES ('Try defragging your cursors.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Why are you wearing that? Do you have a job interview later or something?');
    INSERT INTO #BlitzFirstAnswers VALUES ('I''m ashamed that you don''t know the answer to that question.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Duh, Debra.');
    INSERT INTO #BlitzFirstAnswers VALUES ('Have you tried restoring TempDB?');
    SELECT TOP 1 Answer FROM #BlitzFirstAnswers ORDER BY NEWID();
END

END /* ELSE IF @OutputType = 'SCHEMA' */

SET NOCOUNT OFF;
GO



/* How to run it:
EXEC dbo.sp_BlitzFirst

With extra diagnostic info:
EXEC dbo.sp_BlitzFirst @ExpertMode = 1;

In Ask a Question mode:
EXEC dbo.sp_BlitzFirst 'Is this cursor bad?';

Saving output to tables:
EXEC sp_BlitzFirst @Seconds = 60
, @OutputDatabaseName = 'DBAtools'
, @OutputSchemaName = 'dbo'
, @OutputTableName = 'BlitzFirstResults'
, @OutputTableNameFileStats = 'BlitzFirstResults_FileStats'
, @OutputTableNamePerfmonStats = 'BlitzFirstResults_PerfmonStats'
, @OutputTableNameWaitStats = 'BlitzFirstResults_WaitStats'
*/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TVF_Table_Value_Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>APPLY_TVF_to_each_row_returned_from_a_table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TVF_Table_Value_Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>APPLY_TVF_to_each_row_returned_from_a_table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

/////////////TVF:


USE AdventureWorks2012;
GO
IF OBJECT_ID(N'dbo.ifGetTotalItems', N'IF') IS NOT NULL
DROP FUNCTION dbo.ifGetTotalItems;
GO

CREATE FUNCTION dbo.ifGetTotalItems (@OrderID INT)
	RETURNS TABLE
	WITH SCHEMABINDING
	AS
	RETURN
	(
	  SELECT SUM(OrderQty) AS TotalItems
	  FROM Sales.SalesOrderDetail
	  WHERE SalesOrderID = @OrderID
	  GROUP BY SalesOrderID
	);

/////////////TEST the TVF:

-- In this case, the function returns only a single row with one column, 
--but you can just as easily create a function that returns multiple rows. 
--The simplest way to verify that the function is working as you expect 
--is to run a simple SELECT statement that calls the function and passes in a SalesOrderID value:

SELECT TotalItems FROM dbo.ifGetTotalItems(43659);

--Apply the function to each row returned from the SalesOrderHeader table.

SELECT s.SalesOrderID, s.OrderDate, s.SalesPersonID,
  f.TotalItems
FROM 
	Sales.SalesOrderHeader s
 	CROSS APPLY 
  	dbo.ifGetTotalItems(s.SalesOrderID) f		--&lt;===============
ORDER BY SalesOrderID;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TVF_Table_Value_Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Multi-Statement Table-Valued Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TVF_Table_Value_Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Multi-Statement Table-Valued Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
/*
A multi-statement table-valued function returns a set of records given some initial input parameters. 
The difference is that the function can perform a whole range of processing within it, 
and in this respect is like a cross between a table variable and a stored procedure.

Here's an example of an MSTVF to solve our problem:	*/

CREATE FUNCTION fnPeople(

 -- pass in the gender: M or F
 @gender varchar(10)
)

-- spit out a table containing the people
RETURNS @people TABLE (
 PersonId int IDENTITY(1,1) PRIMARY KEY,
 PersonName varchar(20),
 Job varchar(10),
 Dob datetime
)

AS

BEGIN

 -- add in the female directors 
 INSERT INTO
  @people
 SELECT
  DirectorName AS PersonName,
  'Director' AS Job,
  DirectorDob AS Dob
 FROM
  tblDirector
 WHERE
  DirectorGender = @gender
   
 -- now add in the female actors
 INSERT INTO
  @people
 SELECT
  ActorName AS PersonName,
  'Actor' AS Job,
  ActorDob AS Dob
 FROM
  tblActor
 WHERE
  ActorGender = @gender
  
 RETURN
 
END

GO

SELECT * FROM dbo.fnPeople('Female')</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TVF_Table_Value_Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>TVF_vs_StoredProc_for_output</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TVF_Table_Value_Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>TVF_vs_StoredProc_for_output</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--Q
--Which approach is better to use if I need a member (sp or func) returning 2 parameters:

CREATE PROCEDURE Test
   @in INT,
   @outID INT OUT,
   @amount DECIMAL OUT
AS
BEGIN
   ...
END

--or

CREATE FUNCTION Test
(
   @in INT
)
RETURNS @ret TABLE (outID INT, amount DECIMAL)
AS
BEGIN
   ...
END

--What are pros and cons of each approach considering that the result will passed to another stored procedure:

EXEC Foobar @outID, @outAmount
/*
=======================================================================================================

I would only use a table-valued function if I needed to obtain a table of values.

If there is only one "row" in your output then it would be preferable to use output parameters in a Stored Procedure.

Multi-statement table value functions are difficult to trace and tune. Stick with the stored procedure which is easier to troubleshoot.

Also, you are limited to what you can do in a udf. Say you need to add logging, or call an extended stored proc later... you can't use a udf for this.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TVF_Table_Value_Functions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>TVP_as_input_to_StoredProcedure_using_a_TableType</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TVF_Table_Value_Functions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>TVP_as_input_to_StoredProcedure_using_a_TableType</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE AdventureWorks2008R2;
GO

/* Create a table type. */
CREATE TYPE LocationTableType AS TABLE 
( LocationName VARCHAR(50)
, CostRate INT );
GO

/* Create a procedure to receive data for the table-valued parameter. */
CREATE PROCEDURE usp_InsertProductionLocation
    @TVP LocationTableType READONLY
    AS 
    SET NOCOUNT ON
    INSERT INTO [AdventureWorks2008R2].[Production].[Location]
           ([Name]
           ,[CostRate]
           ,[Availability]
           ,[ModifiedDate])
        SELECT *, 0, GETDATE()
        FROM  @TVP;
        GO

/* Declare a variable that references the type. */
DECLARE @LocationTVP 
AS LocationTableType;

/* Add data to the table variable. */
INSERT INTO @LocationTVP (LocationName, CostRate)
    SELECT [Name], 0.00
    FROM 
    [AdventureWorks2008R2].[Person].[StateProvince];

/* Pass the table variable data to a stored procedure. */
EXEC usp_InsertProductionLocation @LocationTVP;
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_ADO</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Function_CreateConnectionString</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_ADO</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Function_CreateConnectionString</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'refernece: Microsoft ActiveX Data Objects 2.8 Library


Function CreateConnectionFromString() As ADODB.Connection

    ' Define Variables
    Dim cn As New ADODB.Connection
    
    ' The paths have been truncated in this example.
    ' For this to work properly, the developer need to
    ' specify the correct Database and MDW file paths.
    cn.ConnectionString = _
        "Provider=Microsoft.ACE.OLEDB.12.0;" &amp; _
        "User ID=Admin;" &amp; _
        "Data Source=D:\Sample.accdb;" &amp; _
        "Mode=Share Deny None;" &amp; _
        "Jet OLEDB:System database=D:\System.mdw;" &amp; _
        "Jet OLEDB:Database Password="""";" &amp; _
        "Jet OLEDB:Support Complex Data=True"
        
    ' Open the Connection
    cn.Open
    
    ' Return the Connection
    Set CreateConnectionFromString = cn

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_Button</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>01_btn_DeleteRecord_using_StoredProcedure_on_ChildForm__ChildForm_deleteRecord</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_Button</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>01_btn_DeleteRecord_using_StoredProcedure_on_ChildForm__ChildForm_deleteRecord</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'The function that calls the SP
' and the button click event



Public Function fn_DELETE__COI_for_MSA_ID__RETURN_1_if_OK(sCOI_for_MSA_ID As String) As Integer
    'I think this references: Microsoft ActiveX Data Objects 2.8 Library
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim iCOI_for_MSA_ID As Integer
    
    iCOI_for_MSA_ID = CInt(Trim(sCOI_for_MSA_ID))
    
'    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=bcc-explorerdb;DATABASE=COI;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "prj_01_SP_206_DELETE_COI_for_MSA_ID_return_1_if_OK"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        
        .Parameters.Append .CreateParameter("@COI_for_MSA_ID", adInteger, adParamInput, 0, iCOI_for_MSA_ID)
        
'        .Parameters.Append .CreateParameter("@COI_for_MSA_ID", adVarChar, adParamInput, 25, sCOI_for_MSA_ID)

'-----
         .Execute
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_DELETE__COI_for_MSA_ID__RETURN_1_if_OK = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_DELETE__COI_for_MSA_ID__RETURN_1_if_OK ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_DELETE__COI_for_MSA_ID__RETURN_1_if_OK ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function

Private Sub cmd_DeleteThisRecord_Click()
    On Error GoTo ErrorHandler
    
    '=========================
    Dim sCOI_for_MSA_ID As String
    
    sCOI_for_MSA_ID = Me.COI_for_MSA_ID.Value

    If MsgBox("Do you wish to delete this COI Sheet?", vbYesNo, "Delete Confirmation") = vbYes Then
       If MsgBox("Are you SURE you want to it?" &amp; vbCrLf &amp; _
        "This will permanently delete the sheet.", vbYesNo, "2nd Delete Confirmation") = vbYes Then
'             DoCmd.RunCommand acCmdDeleteRecord
             Call Form_f_Vendor.cmd_Open_COI_Window_Click
             If fn_DELETE__COI_for_MSA_ID__RETURN_1_if_OK(sCOI_for_MSA_ID) = 1 Then
                
                MsgBox ("The record was deleted on the SQL server")
                
             Else
                
                MsgBox ("Darn it, there was a problem deleting the record on the SQL server")
                
             End If
       End If
    End If
    
    
    '=========================
    Exit Sub
            
ErrorHandler:
        Select Case Err.Number

            Case 0  'raised by subroutine
               
            Case Else
                MsgBox "Error: " &amp; Err.Number &amp; " " &amp; Err.Description
        End Select
    End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_Forms</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>02_Parent_Opens_Child_Form</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_Forms</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>02_Parent_Opens_Child_Form</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Compare Database

Public Sub cmd_OpenChildForm_Click()
    '===================================
    DoCmd.RunCommand acCmdSaveRecord
    '===================================
    ' note that this subroutine has been designated a PUBLIC subroutine
    ' so that the popup form can call this sub.
    If Me.cmd_OpenChildForm.Caption = "OpenChildForm" Then
        Dim sX As String
        Dim sX2 As String
        sX = Me.Parent_ID
        sX2 = [Parent_Description].Value
        Dim sWHERE As String
        sWHERE = "[Parent_ID]= " &amp; [Parent_ID].Value
        DoCmd.OpenForm "sf_Child", acNormal, , sWHERE, , , Me.Parent_ID     '&lt;== Use the openArg to pass in the Parents ID b/c this can be used when adding new child records to the same parent
        '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Form_sf_Child.Modal = True
        '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
        Form_sf_Child.Caption = "Child for: " &amp; sX2
'        Form_sf_Child.Parent_ID = Me.Parent_ID             '&lt;== This works fine for the first child record of the parent, but not so good for subsequent children records of that parent
        Me.cmd_OpenChildForm.Caption = "CloseChildForm"
    Else
        DoCmd.Close acForm, "sf_Child"
        Me.cmd_OpenChildForm.Caption = "OpenChildForm"
    End If
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_Forms</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Modal_PopUp</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_Forms</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Modal_PopUp</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.fmsinc.com/microsoftaccess/modules/examples/avoiddoevents.asp
===================================================================================================================

'DoEvents releases time to other processes on the computer.
'However, this method consumes almost all the CPU time and slows down the 
'	PC considerably because there's no pause in the processing. 
'As soon as the DoEvents command executes, it executes again and repeats 
'	as fast as the PC can run. It literally consumes all the available CPU cycles, 
'	only giving time to other processes during the tiny period DoEvents is executing. 
'This is a significant problem when pausing for more than a few seconds to wait 
'	for the user to perform other tasks. 
'Users will experience the entire PC slowing down.

'The proper approach is to use the Windows Sleep command which lets you wait
'	 but releases CPU cycles to the computer. To use the Windows Sleep command, 
'	you must first add the following Declare statement to the Declarations section
'	of your module:

' in Module:
--------------------
Private Declare Sub Sleep Lib "kernel32" (ByVal lngMilliSeconds As Long)


Public Sub WaitSeconds(intSeconds As Integer)
  ' Comments: Waits for a specified number of seconds
  ' Params  : intSeconds      Number of seconds to wait
  ' Source  : Total Visual SourceBook

  On Error GoTo PROC_ERR

  Dim datTime As Date

  datTime = DateAdd("s", intSeconds, Now)

  Do
   ' Yield to other programs (better than using DoEvents which eats up all the CPU cycles)
    Sleep 100
    DoEvents
  Loop Until Now &gt;= datTime

PROC_EXIT:
  Exit Sub

PROC_ERR:
  MsgBox "Error: " &amp; Err.Number &amp; ". " &amp; Err.Description, , "modDateTime.WaitSeconds"
  Resume PROC_EXIT
End Sub

' in the form that you want to open in Modal:
-------------------- 'example; form "Form_F02_Reporting_T003_People"
Public Sub ShowModal(theTitle As String)

    SetFocus ' Make the form visible

    Me.Caption = theTitle

    On Error GoTo ForcedClose
    bFormOpen = True
    Do While bFormOpen ' Wait until the form is closed
        WaitSeconds 1
        DoEvents
    Loop

ForcedClose:
    Exit Sub
End Sub

----------------in the calling form - ' Requery the Combo boxes after the changes
Private Sub cmdAddNewPerson_Click()

    ' I want to open the form in MODAL, so that user has to close and finish before proceeding
    '-------------------------------------------------------------------------------------
    Dim f As New Form_F02_Reporting_T003_People_SpreadSheet
    f.Modal = True
    Call f.ShowModal("Project: [" &amp; Me.ProjectName &amp; "]")
    Set f = Nothing
    '-------------------------------------------------------------------------------------
    Dim f2 As [Form_F07_sf_Reporting_LNK01_T000_T004 Subform]
    f2.cmbRequestedBy.Requery
    f2.cmbTask.Requery
    f2.cmbTaskStatus.Requery
    MsgBox ("Combo Boxs Have been Requeried!")
    
      
      
End Sub




===================================================================================================================


https://stackoverflow.com/questions/13174473/open-form-with-modal-or-popup-window?rq=1

'A small disadvantage of acDialog and .PopUp is that the form opens as window outside the access main window. 
'That's why I prefer to use just .Modal if possible.

'If you just want to block other open forms you can do a Me.Modal = True even temporarily in the open event of your form.

'The disadvantage of .Modal is that it will not wait. DoCmd.OpenForm , , , , , acDialog 
'doesn't return until the form is closed. Such a synchronous call can be very useful sometimes.

'To do an acDialog/PopUp like call that stays inside the access main window you can use a little trick inside your form:
Private bFormOpen As Boolean

Public Sub ShowModal()
    SetFocus ' Make the form visible

    On Error GoTo ForcedClose
    bFormOpen = True
    Do While bFormOpen ' Wait until the form is closed
        Sleep 50
        DoEvents
    Loop

ForcedClose:
    Exit Sub
End Sub

Private Sub Form_Unload(Cancel As Integer)

    bFormOpen = False

End Sub

'You can than instantiate your form like this:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Dim f As New Form_Name

f.Modal = True
Call f.ShowModal

Set f = Nothing
\\\\\\\\\\\\\\\\\\\\\\\\\\\
===================================================================================================================
==============================Problem
'Struggling a bit with this, I have a datasheet form which lists the ID and other info for each record. 
'So far I have found some VBA code which will open each ID as a hyperlink and pass that into another form.

'The problem I have is I wanted the form to open in a popup or modal window, my code so far is:

Private Sub ID_Click()
    Dim varWhereClause As String
    varWhereClause = "ID = " &amp; Me!ID
    DoCmd.OpenForm "Copy Of test", , , varWhereClause
End Sub

----------------------------------------------Answer
DoCmd.OpenForm "Copy Of test", , , varWhereClause, ,acDialog
'Though this will be pop-up and modal.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_StoredProc</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>001_VBA_Parm_In_Out_and_ReturnValue</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_StoredProc</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>001_VBA_Parm_In_Out_and_ReturnValue</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Public Function fn_RunSP_UpdatePensionDate(iClaim_PK As Integer, _
                                            sPensionDate As String, _
                                            sClaimNote As String _
                                            ) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg009_DMC_Pension_UpdateClaim_WithDate"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sPensionDate", adVarChar, adParamInput, 10, sPensionDate)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_UpdatePensionDate = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_UpdatePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_UpdatePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_StoredProc</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>002_VBA_Parm_In_and_ReturnRecordSet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_StoredProc</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>002_VBA_Parm_In_and_ReturnRecordSet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>002_VBA_Parm_In_and_ReturnRecordSet






Public Function fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet(sFullSSN As String) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sFullSSN: " &amp; sFullSSN
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'=============================================================================

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg010_DMC_GetClaims_Given_SSN"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@FullSSN", adVarChar, adParamInput, 9, sFullSSN)

    End With
'=============================================================================
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
    
'    If iReturnValue = 0 Then
'        Err.Raise vbObjectError + 111
'    End If
        
    
    Set fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
'        Case vbObjectError + 111
''            Err.Raise vbObjectError + 111
'            MsgBox ("There were No Records in the database already with that SSN!")
        Case Else
            Debug.Print "fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_StoredProc</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>003_VBA_ApplyApplicatonRole</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_StoredProc</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>003_VBA_ApplyApplicatonRole</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Sub ApplyApplictionRoleToAConnection(ByRef objConn As ADODB.Connection)

    On Error GoTo ErrHandler:
    '----------------------------------

    
    Dim objCmd As New ADODB.Command
    Dim iReturnValue As Integer


    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "sp_setapprole"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
        Dim prmX As New ADODB.Parameter
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
'        .Parameters.Append .CreateParameter("rolename", adLongVarWChar, adParamInput, 128, "CCNCclaims.dbo.r_prj_0006_AccessFrontEnd")
        .Parameters.Append .CreateParameter("rolename", adLongVarWChar, adParamInput, 128, "r_prj_0006_AccessFrontEnd")
        .Parameters.Append .CreateParameter("password", adLongVarWChar, adParamInput, 128, "abcd1234")
        .CommandTimeout = 0
        .Execute
    End With
'=============================================================================
    iReturnValue = objCmd.Parameters("RETURN_VALUE")
    
    Set objCmd = Nothing

    Exit Sub
    
ErrHandler:
    'clean up

    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
'        Case vbObjectError + 111
''            Err.Raise vbObjectError + 111
'            MsgBox ("There were No Records in the database already with that SSN!")
        Case Else
            Debug.Print "ApplyApplictionRoleToAConnection ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "ApplyApplictionRoleToAConnection ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

    


End Sub
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_StoredProc</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>003_VBA_UseApplicationRole</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_StoredProc</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>003_VBA_UseApplicationRole</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>



Public Function fn_RunSP_GivenMonthAndYear_PopulateTempTableTable(iMonth As Integer, _
                                                                    iYear As Integer, _
                                                                    iMoreThanXVisits As Integer _
                                                                    ) As Integer

'reference needed is "Microsoft ActiveX Data Object 2.x Library"

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer

   

    sConnect = "DRIVER=SQL Server Native Client 10.0;SERVER=ACCESS-SERVER2;DATABASE=CCNCclaims;Trusted_Connection=Yes"

    objConn.Open sConnect
    

    ApplyApplictionRoleToAConnection objConn    '&lt;============  Right here &lt;===============
    
    
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "prj_0006_sp_901_UninsuredForGivenMonthFromAllHospitalsExceptMission"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@MONTH", adInteger, adParamInput, 0, iMonth)
        .Parameters.Append .CreateParameter("@YEAR", adInteger, adParamInput, 0, iYear)
        .Parameters.Append .CreateParameter("@MoreThanXVisits", adInteger, adParamInput, 0, iMoreThanXVisits)

'-----
         .Execute

        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_GivenMonthAndYear_PopulateTempTableTable = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
'    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_GivenMonthAndYear_PopulateTempTableTable ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_GivenMonthAndYear_PopulateTempTableTable ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_StoredProc</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>LongListOfExamples</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_StoredProc</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>LongListOfExamples</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Compare Database





Public Function fn_RunSP_UpdatePensionDate(iClaim_PK As Integer, _
                                            sPensionDate As String, _
                                            sClaimNote As String _
                                            ) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg009_DMC_Pension_UpdateClaim_WithDate"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sPensionDate", adVarChar, adParamInput, 10, sPensionDate)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_UpdatePensionDate = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_UpdatePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_UpdatePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function






Public Function fn_DMC_GetPensionClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet(sTransactionNumber As String, _
                                                                                sHold_UserName As String, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sTransactionNumber: " &amp; sTransactionNumber
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg008_DMC_Pension_GetClaim_GivenHECTransactionNumber"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sTransactionNumber", adVarChar, adParamInput, 18, sTransactionNumber)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
'===================================================================================

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
'
    
    Set fn_DMC_GetPensionClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    If iReturnValue &gt; 1 Then
            Err.Raise vbObjectError + 111, "Return Code &gt; 1, from: gg008_DMC_Pension_GetClaim_GivenHECTransactionNumber =&gt; Number of records for the Transaction Number was: " &amp; CStr(iReturnValue)
    End If
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
            MsgBox ("More than one Claim was returned that matched that Confirmation Number" &amp; vbCrLf &amp; "You need to use the COMPLETE and EXACT confirmation number")
'            Err.Raise vbObjectError + 111, "Return Code &gt; 1, from: gg006_DMC_Pension_GetClaimForHECDate_PlaceHold =&gt; Number of records for the Transaction Number was: " &amp; CStr(iReturnValue)
            Debug.Print "Return Code &gt; 1, from: gg006_DMC_Pension_GetClaimForHECDate_PlaceHold =&gt; Number of records for the Transaction Number was: " &amp; CStr(iReturnValue)

        Case Else
            Debug.Print "fn_DMC_GetPensionClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_DMC_GetPensionClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function


Public Function fn_SP_gig_DMC_GetClaimInfo_For_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet(sMedical_Center_STN As String, _
                                                                                sHold_UserName As String, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sMedical_Center_STN: " &amp; sMedical_Center_STN
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg006_DMC_Pension_GetClaimForHECDate_PlaceHold"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Facility_Number", adVarChar, adParamInput, 3, sMedical_Center_STN)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
'===================================================================================

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
'    If iReturnValue = 50 Then
'        Err.Raise vbObjectError + 111
'    End If
'
    
    Set fn_SP_gig_DMC_GetClaimInfo_For_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
'            Err.Raise vbObjectError + 111
            Debug.Print "Return Code=50, from: gg006_DMC_Pension_GetClaimForHECDate_PlaceHold =&gt; No records left for that facility"
        Case Else
            Debug.Print "fn_SP_gig_DMC_GetClaimInfo_For_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_SP_gig_DMC_GetClaimInfo_For_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function


'
Public Function fn_SP_gg003_DMC_Pension_SaveClaim_CreateMilestone_ForDuplicateSSN(sSSN_Full As String, _
                                            sClaim_TEMP_PK As String, _
                                            sHold_UserName As String, _
                                            sClaimNote As String _
                                            ) As Integer
    

    
'ALTER PROCEDURE gg003_DMC_Pension_SaveClaim_CreateMilestone_ForDuplicateSSN(
'    @SSN_Full AS NVARCHAR(9),
'    @sClaim_TEMP_PK as NVARCHAR(25),
'    @Hold_UserName AS nvarchar(255),
'    @MessageFromSQL AS NVARCHAR(1000) OUTPUT
    
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg003_DMC_Pension_SaveClaim_CreateMilestone_ForDuplicateSSN"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN_Full)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg003_DMC_Pension_SaveClaim_CreateMilestone_ForDuplicateSSN = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg003_DMC_Pension_SaveClaim_CreateMilestone_ForDuplicateSSN ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg003_DMC_Pension_SaveClaim_CreateMilestone_ForDuplicateSSN ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function


Private Sub ClearCommandParameters(ByRef oCMD As ADODB.Command)
    Dim lngX As Long
    For lngX = (oCMD.Parameters.Count - 1) To 0 Step -1
        oCMD.Parameters.Delete lngX
    Next

End Sub
'
'
'Public Function fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet(sFullSSN As String) As recordset




Public Function fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet(sFullSSN As String) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sFullSSN: " &amp; sFullSSN
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'=============================================================================

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg010_DMC_GetClaims_Given_SSN"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@FullSSN", adVarChar, adParamInput, 9, sFullSSN)

    End With
'=============================================================================
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
    
'    If iReturnValue = 0 Then
'        Err.Raise vbObjectError + 111
'    End If
        
    
    Set fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
'        Case vbObjectError + 111
''            Err.Raise vbObjectError + 111
'            MsgBox ("There were No Records in the database already with that SSN!")
        Case Else
            Debug.Print "fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_GivenFullSSN_GetRecordsInClaimsTable_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function




Public Function fn_RunSP_gig_DMC_Count_SSNAlreadyInClaimsTable(sSSN As String) As Integer
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sSSN: " &amp; sSSN
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

'    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg005_DMC_CountOccuranceOfSSN_In_DMC_Claim_t"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN)
'===================================================================================
        .Execute

'===================================================================================

    End With
    
    
    iReturnValue = objCmd.Parameters("RETURN_VALUE")
    
    fn_RunSP_gig_DMC_Count_SSNAlreadyInClaimsTable = iReturnValue
        
    
    
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objConn = Nothing
    Set objCmd = Nothing
'    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
            Err.Raise vbObjectError + 111
        Case Else
            Debug.Print "fn_RunSP_gig_DMC_Count_SSNAlreadyInClaimsTable ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_RunSP_gig_DMC_Count_SSNAlreadyInClaimsTable ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function

'fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet
'fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet



Public Function fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet(sMedical_Center_STN As String, _
                                                                                sHold_UserName As String, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sMedical_Center_STN: " &amp; sMedical_Center_STN
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg001_DMC_Pension_GetClaimForSSN_PlaceHOLDonTEMPclaim" 'gg001_DMC_Pension_GetClaimForSSN_PlaceHOLDonTEMPclaim
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Facility_Number", adVarChar, adParamInput, 3, sMedical_Center_STN)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================


'===================================================================================


'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
    

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
    If iReturnValue = 50 Then
        Err.Raise vbObjectError + 111
    End If
        
    
    Set fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
            Err.Raise vbObjectError + 111
        Case Else
            Debug.Print "fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function


Public Sub RunSP_PP_ReportProblems(iPP_WorkList_PK As Integer, _
                                            sFullSSN As String, _
                                            sWorkList_Note As String, _
                                            sArchived_UserName As String, _
                                            sArchived_DateTime As String _
                                            )
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gig_PP_ReportProblem"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        'Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("@PP_WorkList_PK", adInteger, adParamInput, 0, iPP_WorkList_PK)
        .Parameters.Append .CreateParameter("@FullSSN", adVarChar, adParamInput, 9, sFullSSN)
        .Parameters.Append .CreateParameter("@WorkList_Note", adVarChar, adParamInput, 1000, sWorkList_Note)
        .Parameters.Append .CreateParameter("@Archived_UserName", adVarChar, adParamInput, 255, sArchived_UserName)
        .Parameters.Append .CreateParameter("@Archived_DateTime", adVarChar, adParamInput, 255, sArchived_DateTime)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working

         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
    
    End With
    
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Sub
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "RunSP_PP_ReportProblems ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "RunSP_PP_ReportProblems ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Sub


Public Sub RunSP_MarkPrePayDone_ArchiveIt(iPP_WorkList_PK As Integer, _
                                            sFullSSN As String, _
                                            sWorkList_HoldReason As String, _
                                            sWorkList_Note As String, _
                                            sArchived_UserName As String, _
                                            sArchived_DateTime As String, _
                                            sHold_ProblemReported_Notes As String, _
                                            sHoldProblemResolved_DateTime As String, _
                                            sHoldProblemResolved_Notes As String, _
                                            sAction_Taken As String _
                                            ) 'As ADODB.recordset

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

'    Dim objRs As New ADODB.recordset
    Dim sConnect As String
'    Dim iIN As Integer
'    Dim iOUT As Integer
'    Dim sX As String
'    Dim iX As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gig_MarkPrePayDone_ArchiveIt"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        'Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("@PP_WorkList_PK", adInteger, adParamInput, 0, iPP_WorkList_PK)
'        .Parameters.Append .CreateParameter("@Date_Last_Updated", adVarChar, adParamInput, 255, sDate_Last_Updated)
        .Parameters.Append .CreateParameter("@FullSSN", adVarChar, adParamInput, 9, sFullSSN)
        .Parameters.Append .CreateParameter("@WorkList_HoldReason", adVarChar, adParamInput, 255, sWorkList_HoldReason)
        .Parameters.Append .CreateParameter("@WorkList_Note", adVarChar, adParamInput, 1000, sWorkList_Note)
        .Parameters.Append .CreateParameter("@Archived_UserName", adVarChar, adParamInput, 255, sArchived_UserName)
        .Parameters.Append .CreateParameter("@Archived_DateTime", adVarChar, adParamInput, 255, sArchived_DateTime)
        .Parameters.Append .CreateParameter("@Hold_ProblemReported_Notes", adVarChar, adParamInput, 1000, sHold_ProblemReported_Notes)
        .Parameters.Append .CreateParameter("@HoldProblemResolved_DateTime", adVarChar, adParamInput, 255, sHoldProblemResolved_DateTime)
        .Parameters.Append .CreateParameter("@HoldProblemResolved_Notes", adVarChar, adParamInput, 1000, sHoldProblemResolved_Notes)
        .Parameters.Append .CreateParameter("@Action_Taken", adVarChar, adParamInput, 255, sAction_Taken)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
   

    End With
    
    
'        objRs.CursorLocation = adUseClient
'        objRs.CursorType = adOpenDynamic
'        objRs.LockType = adLockOptimistic
'        objRs.Open objCmd
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
    

'    Set RunSP_gig_GetPrePayInfo_PlaceTempHoldOnPrePay_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Sub
    
ErrHandler:
    'clean up
'    If objRs.State = adStateOpen Then
'        objRs.Close
'    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
'    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "RunStoredProcedure_Parms_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "RunStoredProcedure_Parms_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Sub



Public Function RunSP_gig_GetPrePayInfo_PlaceTempHoldOnPrePay_ReturnRecordSet(iFacility_FK As Long, sHold_UserName As String, iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "iFacility_FK: " &amp; iFacility_FK
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
'    Dim iIN As Integer
'    Dim iOUT As Integer
'    Dim sX As String
'    Dim iX As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gig_GetPrePayInfo_PlaceTempHoldOnPrePay"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Facility_FK", adInteger, adParamInput, 0, iFacility_FK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================


'===================================================================================


'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
    

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
    If iReturnValue = 50 Then
        Err.Raise vbObjectError + 111
    End If
        
    
    Set RunSP_gig_GetPrePayInfo_PlaceTempHoldOnPrePay_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
            Err.Raise vbObjectError + 111
        Case Else
            Debug.Print "RunStoredProcedure_Parms_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "RunStoredProcedure_Parms_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function



Public Function fRun_SQLString_NoParms_ReturnDisconnectedRecordSet(sSQL As String) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
'    Dim objCmd As New ADODB.Command
    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    Dim iX As Integer
    

            
    ' Connect to the data source.
'=========================
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    objCmd.ActiveConnection = objConn
        
'=======================================

' Setting the cursor location to client side is important
' to get a disconnected recordset.
objRs.CursorLocation = adUseClient
objRs.Open sSQL, objConn, ADODB.adOpenForwardOnly, ADODB.adLockBatchOptimistic

' Disconnect the recordset.
Set objRs.ActiveConnection = Nothing



'======================================
    ' Execute once and display...
'    Set objRs = objCmd.Execute
        

    For iX = 0 To objRs.Fields.Count - 1
        Debug.Print "Field " &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
    Next iX
        
    Set fRun_SQLString_NoParms_ReturnDisconnectedRecordSet = objRs
    
    'clean up
'    objRs.Close
'    objConn.Close
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
'    MsgBox "Done!"
    
    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing


    
    If Err &lt;&gt; 0 Then
        MsgBox "ERROR: fRun_SQLString_NoParms_ReturnDisconnectedRecordSet: " &amp; Err.Number &amp; ", " &amp; Err.Description
    End If

End Function

Public Sub RunStoredProcedure_NoParms_NoReturnInfo(sNameOfStoredProc As String)

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim objParm1 As New ADODB.Parameter
    Dim objRs As New ADODB.recordset
    Dim stConnect As String
    
    ' Set CommandText equal to the stored procedure name.
    objCmd.CommandText = sNameOfStoredProc
    objCmd.CommandType = adCmdStoredProc
            
    ' Connect to the data source.
'    Set objConn = GetNewConnection

'========================= OPTION to use a connection string
    stConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open stConnect
'==========================
    objCmd.ActiveConnection = objConn
    
    ' Execute once
    objCmd.Execute
                
    'clean up

    objConn.Close

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
'    MsgBox "Done!"
    Exit Sub

ErrHandler:
    'clean up

    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        MsgBox Err.Source &amp; "--&gt;" &amp; Err.Description, , "Error"
    Else
        MsgBox "Done!, but it went to the ErrHandler!"
    End If


End Sub





Public Function fn_SP_gg002_DMC_Pension_SaveNewClaim_CreateMilestoneSubRecord(sSSN_Full As String, _
                                            sClaim_TEMP_PK As String, _
                                            sHold_UserName As String, _
                                            sClaimNote As String _
                                            ) As Integer
    
    
'ALTER PROCEDURE gg002_DMC_Pension_SaveNewClaim_CreateMilestoneSubRecord(
'    @SSN_Full AS NVARCHAR(9),
'    @sClaim_TEMP_PK as NVARCHAR(25),
'    @Hold_UserName AS nvarchar(255),
'    @MessageFromSQL AS NVARCHAR(1000) OUTPUT
    
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg002_DMC_Pension_SaveNewClaim_CreateMilestoneSubRecord"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN_Full)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg002_DMC_Pension_SaveNewClaim_CreateMilestoneSubRecord = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg002_DMC_Pension_SaveNewClaim_CreateMilestoneSubRecord ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg002_DMC_Pension_SaveNewClaim_CreateMilestoneSubRecord ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function










Public Function fn_SP_gg004_DMC_Delete_Claim_From_Claim_TEMP_t(sClaim_TEMP_PK As String) As Integer
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg004_DMC_Delete_Claim_From_Claim_TEMP_t"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        
         .Execute
        iReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg004_DMC_Delete_Claim_From_Claim_TEMP_t = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg004_DMC_Delete_Claim_From_Claim_TEMP_t ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg004_DMC_Delete_Claim_From_Claim_TEMP_t ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function


Public Function fn_RunStoredProcedure_NoParms_ReturnRecordSet(sNameOfStoredProc As String) As recordset
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    ' Set CommandText equal to the stored procedure name.
    objCmd.CommandText = "CustOrdersOrders"
    objCmd.CommandType = adCmdStoredProc
            
    ' Connect to the data source.
'=========================
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    objCmd.ActiveConnection = objConn
        
    ' Automatically fill in parameter info from stored procedure.
    objCmd.Parameters.Refresh
    
    ' Set the param value.

    
    ' Execute once and display...
    Set objRs = objCmd.Execute
        

    Do While Not objRs.EOF
        Debug.Print vbTab &amp; objRs(0) &amp; vbTab &amp; objRs(1) &amp; vbTab &amp; _
                    objRs(2) &amp; vbTab &amp; objRs(3)
        objRs.MoveNext
    Loop
        
    RunStoredProcedure_NoParms_ReturnRecordSet = objRs
    
    'clean up
    objRs.Close
    objConn.Close
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    MsgBox "Done!"
    
    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        MsgBox Err.Source &amp; "--&gt;" &amp; Err.Description, , "Error"
    End If

End Function
'
'
'
'
'
'Public Sub BAD_RunSP_MarkClaim_SentRequestToHEC(iClaim_PK As Integer, _
'                                            sClaimNote As String _
'                                            )
'
'    On Error GoTo ErrHandler:
'
'    Dim objConn As New ADODB.Connection
'    Dim objCmd As New ADODB.Command
'
'    Dim sConnect As String
'
'    ' Connect to the data source.
''========================= OPTION to use a connection string
'    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
'    objConn.Open sConnect
'
'    With objCmd
'        ' Set CommandText equal to the stored procedure name.
'        .CommandText = "gg007_DMC_Pension_Date_UpdateClaim_RequestSentToHEC"
'        .CommandType = adCmdStoredProc
'
'        .ActiveConnection = objConn
''=============================================================================
'
'        .Parameters.Append .CreateParameter("@Claim_PK", adInteger, adParamInput, 0, iClaim_PK)
'        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
'        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'        '--------
'         .Execute
'         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
'
'
'    End With
'
'
'        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
'
'
'    objConn.Close
'    Set objConn = Nothing
'    Set objCmd = Nothing
'
''    MsgBox "Done!"
'
'    Exit Sub
'
'ErrHandler:
'
'    If objConn.State = adStateOpen Then
'        objConn.Close
'    End If
'
'    Set objConn = Nothing
'    Set objCmd = Nothing
'    Set objParm1 = Nothing
'
'    If Err &lt;&gt; 0 Then
'        Debug.Print "RunSP_MarkClaim_SentRequestToHEC ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
'
'        MsgBox "RunSP_MarkClaim_SentRequestToHEC ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
'    End If
'
'End Sub



Public Function OLD_fn_RunSP_MarkClaim_SentRequestToHEC(iClaim_PK As Integer, _
                                            sClaimNote As String _
                                            ) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg007_DMC_Pension_Date_UpdateClaim_RequestSentToHEC"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_MarkClaim_SentRequestToHEC = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_MarkClaim_SentRequestToHEC ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_MarkClaim_SentRequestToHEC ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function





Public Function fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvidePensionDate(iClaim_PK As Integer, _
                                            sPensionDate As String, _
                                            sClaimNote As String _
                                            ) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg007A_DMC_Pension_PensionDate_Either_gg007_OR_gg009"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK_IN", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sPensionDate_IN", adVarChar, adParamInput, 10, sPensionDate)
        .Parameters.Append .CreateParameter("@ClaimNote_IN", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        
    objConn.Close
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvidePensionDate = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvidePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvidePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function


'fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet
'fn_SP_gig_DMC_GetClaimInfo_ForPensions_PlaceHoldOnClaim_ReturnRecordSet



Public Function fn_SP_gig_DMC_GetClaimInfo_ForSCs_PlaceHoldOnClaim_ReturnRecordSet(sMedical_Center_STN As String, _
                                                                                sHold_UserName As String, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sMedical_Center_STN: " &amp; sMedical_Center_STN
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg011_DMC_SC_GetClaimForSSN_PlaceHOLDonTEMPclaim"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Facility_Number", adVarChar, adParamInput, 3, sMedical_Center_STN)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================


'===================================================================================


'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
    

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
    If iReturnValue = 50 Then
        Err.Raise vbObjectError + 111
    End If
        
    
    Set fn_SP_gig_DMC_GetClaimInfo_ForSCs_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
            Err.Raise vbObjectError + 111
        Case Else
            Debug.Print "fn_SP_gig_DMC_GetClaimInfo_ForSCs_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_SP_gig_DMC_GetClaimInfo_ForSCs_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function








Public Function fn_SP_gg012_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord(sSSN_Full As String, _
                                            sClaim_TEMP_PK As String, _
                                            sHold_UserName As String, _
                                            sClaimNote As String _
                                            ) As Integer
    
    
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg012_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN_Full)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg012_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg012_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg012_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function




'
Public Function fn_SP_gg013_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN(sSSN_Full As String, _
                                            sClaim_TEMP_PK As String, _
                                            sHold_UserName As String, _
                                            sClaimNote As String _
                                            ) As Integer
    
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg013_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN_Full)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg013_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg013_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg013_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function




Public Function fn_SP_gig_DMC_GetClaimInfo_For_SC_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet(sMedical_Center_STN As String, _
                                                                                sHold_UserName As String, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sMedical_Center_STN: " &amp; sMedical_Center_STN
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg016_DMC_SC_GetClaimForHECDate_PlaceHold"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Facility_Number", adVarChar, adParamInput, 3, sMedical_Center_STN)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
'===================================================================================

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
'    If iReturnValue = 50 Then
'        Err.Raise vbObjectError + 111
'    End If
'
    
    Set fn_SP_gig_DMC_GetClaimInfo_For_SC_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
'            Err.Raise vbObjectError + 111
            Debug.Print "Return Code=50, from: gg006_DMC_Pension_GetClaimForHECDate_PlaceHold =&gt; No records left for that facility"
        Case Else
            Debug.Print "fn_SP_gig_DMC_GetClaimInfo_For_SC_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_SP_gig_DMC_GetClaimInfo_For_SC_HEC_Date_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End Select

End Function




Public Function fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvideSCDate(iClaim_PK As Integer, _
                                            sSCDate As String, _
                                            sClaimNote As String _
                                            ) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg017A_DMC_SC_SCDate_Either_gg017_OR_gg019"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK_IN", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sSCDate_IN", adVarChar, adParamInput, 10, sSCDate)
        .Parameters.Append .CreateParameter("@ClaimNote_IN", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        
    objConn.Close
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvideSCDate = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvideSCDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_MarkClaim_SentRequestToHEC_OR_ProvideSCDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function






Public Function fn_RunSP_UpdateSCDate(iClaim_PK As Integer, _
                                            sSCDate As String, _
                                            sClaimNote As String _
                                            ) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(iClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg019_DMC_SC_UpdateClaim_WithDate"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sSCDate", adVarChar, adParamInput, 10, sSCDate)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_RunSP_UpdateSCDate = iReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_UpdateSCDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_UpdateSCDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function







Public Function fn_DMC_GetSCClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet(sTransactionNumber As String, _
                                                                                sHold_UserName As String, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sTransactionNumber: " &amp; sTransactionNumber
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg018_DMC_SC_GetClaim_GivenHECTransactionNumber"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sTransactionNumber", adVarChar, adParamInput, 18, sTransactionNumber)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
'===================================================================================

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
'
    
    Set fn_DMC_GetSCClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    If iReturnValue &gt; 1 Then
            Err.Raise vbObjectError + 111, "Return Code &gt; 1, from: gg008_DMC_Pension_GetClaim_GivenHECTransactionNumber =&gt; Number of records for the Transaction Number was: " &amp; CStr(iReturnValue)
    End If
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
            MsgBox ("More than one Claim was returned that matched that Confirmation Number" &amp; vbCrLf &amp; "You need to use the COMPLETE and EXACT confirmation number")
'            Err.Raise vbObjectError + 111, "Return Code &gt; 1, from: gg006_DMC_Pension_GetClaimForHECDate_PlaceHold =&gt; Number of records for the Transaction Number was: " &amp; CStr(iReturnValue)
            Debug.Print "Return Code &gt; 1, from: gg006_DMC_Pension_GetClaimForHECDate_PlaceHold =&gt; Number of records for the Transaction Number was: " &amp; CStr(iReturnValue)

        Case Else
            Debug.Print "fn_DMC_GetSCClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_DMC_GetSCClaimInfo_For_HEC_TransactionNumber_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
    End Select

End Function





Public Function fn_GetClaimToValidate_PlaceHoldOnClaim_ReturnRecordSet(sMedical_Center_STN As String, _
                                                                                sHold_UserName As String, _
                                                                                bSortBy_SC_First As Boolean, _
                                                                                iTimeLimitForHoldInMinutes As Integer) As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sMedical_Center_STN: " &amp; sMedical_Center_STN
    Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer
    Dim iSortBy_SC_First As Integer
    
'========================================
' Translate input values

    If bSortBy_SC_First = True Then
        iSortBy_SC_First = 1
    Else
        iSortBy_SC_First = 0
    End If
    
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
'    Clear the paramaters before reusing
'-------------------------------------------------------
'    Dim lngX As Long
'    For lngX = (objCmd.Parameters.Count - 1) To 0 Step -1
'        objCmd.Parameters.Delete lngX
'    Next
'-------------------------------------------------------

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg020_DMC_GetNewOrIncompleteClaim_ToValidate"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@Facility_Number", adVarChar, adParamInput, 3, sMedical_Center_STN)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)
        .Parameters.Append .CreateParameter("@SortBy_SC_First", adInteger, adParamInput, 0, iSortBy_SC_First)

        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================
'        Set objRs = .Execute                                                       ' one way to do it, but the
'        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value      'This is still not working
'===================================================================================

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")    '( 1 means there were no problems, 0 means there were problems)
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
    If iReturnValue = 0 Then
        Err.Raise vbObjectError + 111
    End If
'
    
    Set fn_GetClaimToValidate_PlaceHoldOnClaim_ReturnRecordSet = objRs
        
    
    
'    For iX = 0 To objRs.Fields.Count - 1
'        Debug.Print "Field" &amp; CStr(iX) &amp; "]  (  " &amp; objRs(iX).Name &amp; "  ) " &amp; objRs(iX)
'    Next iX
'
        
    'clean up
'    objRs.Close           'This has to be commented out otherwise the recordset is empty when it is passed out of the function
'    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
'            Err.Raise vbObjectError + 111
            Debug.Print "Return Code=0 in: fn_GetClaimToValidate_PlaceHoldOnClaim_ReturnRecordSet, from: gg020_DMC_GetNewOrIncompleteClaim_ToValidate =&gt; There was a problem"
        Case Else
            Debug.Print "fn_GetClaimToValidate_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_GetClaimToValidate_PlaceHoldOnClaim_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End Select

End Function



Public Function fn_Tickle_ClaimPK_Hold(sClaim_PK As String, _
                                        sUserName As String, _
                                        sNumberOfDays As String) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg000A_TickleOutHOLD_Claim"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sUserName", adVarChar, adParamInput, 255, sUserName)
        .Parameters.Append .CreateParameter("@sNumberOfDays", adVarChar, adParamInput, 2, sNumberOfDays)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_Tickle_ClaimPK_Hold = iReturnValue   '0 if there was a problem, 1 if it was ok

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_Tickle_ClaimPK_Hold ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_Tickle_ClaimPK_Hold ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function





Public Function fn_Tickle_Claim_TEMP_PK_Hold(sClaim_TEMP_PK As String, _
                                        sUserName As String, _
                                        sNumberOfDays As String) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg000B_TickleOutHOLD_ClaimTEMP"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@sUserName", adVarChar, adParamInput, 255, sUserName)
        .Parameters.Append .CreateParameter("@sNumberOfDays", adVarChar, adParamInput, 2, sNumberOfDays)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_Tickle_Claim_TEMP_PK_Hold = iReturnValue   '0 if there was a problem, 1 if it was ok

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_Tickle_Claim_TEMP_PK_Hold ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_Tickle_Claim_TEMP_PK_Hold ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function








Public Function fn_GetBillCountToValidate_GivenPKs_ReturnRecordSet(sClaim_PK As String, _
                                                                   sClaim_TEMP_PK As String) _
                                                                   As ADODB.recordset
    On Error GoTo ErrHandler:
    
    
    Debug.Print "sClaim_PK: " &amp; sClaim_PK
    Debug.Print "sClaim_TEMP_PK: " &amp; sClaim_TEMP_PK
    
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer

    

    
    
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg000C_DMC_CountBillsToValidateForTheClaim"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@sClaim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
'===================================================================================

    End With
    
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")    '( 1 means there were no problems, 0 means there were problems)
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue:" &amp; iReturnValue
    
    If iReturnValue &gt; 0 Then
    ' @@ERROR should be 0 if everything is ok.
        Err.Raise vbObjectError + 111
    End If
'
    
    Set fn_GetBillCountToValidate_GivenPKs_ReturnRecordSet = objRs
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
        Case vbObjectError + 111
'            Err.Raise vbObjectError + 111
            Debug.Print "Return Code=0 in: fn_GetBillCountToValidate_GivenPKs_ReturnRecordSet, from: gg020_DMC_GetNewOrIncompleteClaim_ToValidate =&gt; There was a problem"
        Case Else
            Debug.Print "fn_GetBillCountToValidate_GivenPKs_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_GetBillCountToValidate_GivenPKs_ReturnRecordSet ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End Select

End Function









Public Function fn_SP_gg012A_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord(sSSN_Full As String, _
                                            sClaim_TEMP_PK As String, _
                                            sHold_UserName As String, _
                                            sClaimNote As String _
                                            ) As Long
    
    
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim lReturnValue As Integer
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg012A_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN_Full)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        lReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg012A_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord = lReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg012A_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg012A_DMC_SC_SaveNewClaim_CreateMilestoneSubRecord ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function


Public Function fn_SP_gg013A_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN(sSSN_Full As String, _
                                            sClaim_TEMP_PK As String, _
                                            sHold_UserName As String, _
                                            sClaimNote As String _
                                            ) As Long
    
    
    
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim lReturnValue As Long
    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg013A_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@SSN_Full", adVarChar, adParamInput, 9, sSSN_Full)
        .Parameters.Append .CreateParameter("@Claim_TEMP_PK", adVarChar, adParamInput, 25, sClaim_TEMP_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sClaimNote)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
 
         .Execute
         Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        lReturnValue = .Parameters("RETURN_VALUE")
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_SP_gg013A_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN = lReturnValue

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_SP_gg013A_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
        
        MsgBox "fn_SP_gg013A_DMC_SC_SaveClaim_CreateMilestone_ForDuplicateSSN ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End If

End Function


Public Function fn_gg021_GetABillToValidate_PutHoldOnIt_UpdateHoldOnClaim(sClaim_PK As String, _
                                                                            sHold_UserName As String, _
                                                                            iTimeLimitForHoldInMinutes As Integer) _
                                                                            As ADODB.recordset
    On Error GoTo ErrHandler:
    
     Debug.Print "sHold_UserName: " &amp; sHold_UserName
    Debug.Print "sClaim_PK: " &amp; sClaim_PK
    Debug.Print "iTimeLimitForHoldInMinutes: " &amp; iTimeLimitForHoldInMinutes
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command

    Dim objRs As New ADODB.recordset
    Dim sConnect As String
    
    Dim iReturnValue As Integer

     ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================

    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg021_GetABillToValidate_PutHoldOnIt_UpdateHoldOnClaim"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        Dim prmX As New ADODB.Parameter

        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 25, sHold_UserName)
        .Parameters.Append .CreateParameter("@TimeLimitForHoldInMinutes", adInteger, adParamInput, 0, iTimeLimitForHoldInMinutes)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 255)
        
'===================================================================================

    End With
    
        objRs.CursorLocation = adUseClient
        objRs.CursorType = adOpenDynamic
        objRs.LockType = adLockOptimistic
        objRs.Open objCmd
        iReturnValue = objCmd.Parameters("RETURN_VALUE")    '( This is the DMC_Bills_PK)
        Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL") &amp; ", iReturnValue (DMC_Bills_PK):" &amp; iReturnValue
    
'    If iReturnValue &gt; 0 Then
'    ' @@ERROR should be 0 if everything is ok.
'        Err.Raise vbObjectError + 111
'    End If
'
    
    Set fn_gg021_GetABillToValidate_PutHoldOnIt_UpdateHoldOnClaim = objRs
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing

'    MsgBox "Done!"

    Exit Function
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    Select Case Err.Number
    
'        Case vbObjectError + 111
''            Err.Raise vbObjectError + 111
'            Debug.Print "Return Code=0 in: fn_gg021_GetABillToValidate_PutHoldOnIt_UpdateHoldOnClaim, from: gg020_DMC_GetNewOrIncompleteClaim_ToValidate =&gt; There was a problem"
        Case Else
            Debug.Print "fn_gg021_GetABillToValidate_PutHoldOnIt_UpdateHoldOnClaim ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
            MsgBox "fn_gg021_GetABillToValidate_PutHoldOnIt_UpdateHoldOnClaim ERROR: " &amp; Err.Number &amp; Err.Description, , "Error"
    End Select

End Function







Public Function fn_gg022_Bill_and_Milestone_UpdateServiceDates( _
                                            sBill_PK As String, _
                                            sFirstDateServiced As String, _
                                            sLastDateServiced As String, _
                                            sBillNote As String, _
                                            sHold_UserName As String _
                                            ) As Integer
                                            
' create PROCEDURE gg022_Bill_and_Milestone_UpdateServiceDates(
'    @sBills_PK as NVARCHAR(25),
'    @sFirstDateServiced as VARCHAR(10) ,
'    @sLastDateServiced as VARCHAR(10) ,
'    @BillNote AS NVARCHAR(1000),
'    @Hold_UserName AS NVARCHAR(25),
'    @MessageFromSQL AS NVARCHAR(1000) OUTPUT
'    )
                                            
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg022_Bill_and_Milestone_UpdateServiceDates"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sBill_PK", adVarChar, adParamInput, 25, sBill_PK)
        .Parameters.Append .CreateParameter("@sFirstDateServiced", adVarChar, adParamInput, 10, sFirstDateServiced)
        .Parameters.Append .CreateParameter("@sLastDateServiced", adVarChar, adParamInput, 10, sLastDateServiced)
        .Parameters.Append .CreateParameter("@ClaimNote", adVarChar, adParamInput, 1000, sBillNote)
        .Parameters.Append .CreateParameter("@Hold_UserName", adVarChar, adParamInput, 255, sHold_UserName)
        .Parameters.Append .CreateParameter("@MessageFromSQL", adVarChar, adParamOutput, 1000)
'-----
         .Execute
        Debug.Print "MessageFromSQL: " &amp; .Parameters("@MessageFromSQL").Value
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        'Debug.Print "MessageFromSQL: " &amp; objCmd.Parameters("@MessageFromSQL")
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_gg022_Bill_and_Milestone_UpdateServiceDates = iReturnValue '0=No errors, otherwise the number indicates which step had the error

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_gg022_Bill_and_Milestone_UpdateServiceDates ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_gg022_Bill_and_Milestone_UpdateServiceDates ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function

'\\\\\\\


Public Function fn_gg023_DMC_Claim_Validate_Phase_1_Done(lClaim_PK As Long) As Integer

    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim sConnect As String
    Dim iReturnValue As Integer
    Dim sClaim_PK As String
    
    sClaim_PK = CStr(lClaim_PK)
    

    ' Connect to the data source.
'========================= OPTION to use a connection string
    sConnect = "DRIVER=SQL Server;SERVER=vhacpasql3\firstparty;DATABASE=Firstparty;Trusted_Connection=Yes"
    objConn.Open sConnect
'==========================
    With objCmd
        ' Set CommandText equal to the stored procedure name.
        .CommandText = "gg023_DMC_Claim_Validate_Phase_1_Done"
        .CommandType = adCmdStoredProc
        
        .ActiveConnection = objConn
'=============================================================================
        .Parameters.Append .CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
        .Parameters.Append .CreateParameter("@sClaim_PK", adVarChar, adParamInput, 25, sClaim_PK)
'-----
         .Execute
        
        iReturnValue = .Parameters("RETURN_VALUE")
        
    End With
    
        
    objConn.Close        'This has to be commented out otherwise the recordset is empty when it is passed out of the function
    Set objConn = Nothing
    Set objCmd = Nothing

    fn_gg023_DMC_Claim_Validate_Phase_1_Done = iReturnValue       'RETURN(@@ERROR),  @@ERROR should be 0 if everything is ok.

    Exit Function
    
ErrHandler:
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If

    Set objConn = Nothing
    Set objCmd = Nothing
    Set objParm1 = Nothing
    
    If Err &lt;&gt; 0 Then
        Debug.Print "fn_RunSP_UpdatePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
        
        MsgBox "fn_RunSP_UpdatePensionDate ERROR: " &amp; Err.Number &amp; " " &amp; Err.Description, , "Error"
    End If

End Function

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>ACCESS_SQL_CompareAndContrast</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>ACCESS_SQL_CompareAndContrast</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'http://sqlserver2000.databases.aspfaq.com/what-are-the-main-differences-between-access-and-sql-server.html

'TRUE/False ===========================

-- DETERMINING TRUE 
 
-- Access: 
[...] WHERE ynColumn = TRUE 
[...] WHERE ynColumn = -1 
 
-- SQL Server: 
[...] WHERE ynColumn &lt;&gt; 0 
 
'------------------------------ 
 
'-- DETERMINING FALSE 
 
'-- Access: 
[...] WHERE ynColumn = FALSE 
[...] WHERE ynColumn = 0 
 
'-- SQL Server: 
[...] WHERE ynColumn = 0


'Switching from Date/Time to DATETIME  ============

'When passing dates into Access from ASP or an application, you use pound signs (#) for surrounding dates. SQL Server, on the other hand, uses apostrophes ('). So the following query conversion would be required: 

'-- Access: 
[...] WHERE dtColumn &gt;= #2001-11-05# 
 
'-- SQL Server: 
[...] WHERE dtColumn &gt;= '20011105' 

'--------------------------------------------------

'In addition, Access allows you to store date and time independently. SQL Server, including SQL Server 2005 ("Yukon"), 
'does not allow this (see Article #2206 for more info). To see if a date equals 2001-11-05 in SQL Server, you would have to convert the stored value 
'(which includes time) to a date only. Here is how a typical query would have to change: 

'-- Access: 
[...] WHERE dtColumn = #11/05/2001# 
 
'-- SQL Server: 
[...] WHERE CONVERT(CHAR(8), dtColumn, 112) = '20011105' 
 
-- if dtColumn has an index, this will be more efficient: 
[...] WHERE dtColumn &gt;= '20011105' 
    AND dtColumn &lt; '20011106'

'If you want to retrieve the current date and time, the syntax is slightly different: 

'-- Access: 
SELECT Now() 
SELECT Date() &amp; " " &amp; Time() 
 
'-- SQL Server: 
SELECT GETDATE() 
SELECT CURRENT_TIMESTAMP 

'If you want just the time: 

'-- Access: 
SELECT Time() 
 
'-- SQL Server: 
SELECT CONVERT(CHAR(8), GETDATE(), 108) 
SELECT LTRIM(STUFF(RIGHT(CONVERT(CHAR(19), GETDATE(), 0), 7), 6, 0, ' ')) 

'If you want just today's date, there are other options: 

'-- Access: 
SELECT Date() 
 
'-- SQL Server: 
SELECT GETDATE() - {fn CURRENT_TIME} 
SELECT {fn CURDATE()} -- not friendly with certain languages 
SELECT CONVERT(CHAR(8), GETDATE(), 112)

'To get tomorrow's date, here is how your queries would look: 

'-- Access: 
SELECT DateAdd("d",1,date()) 
 
'-- SQL Server: 
SELECT CONVERT(CHAR(8), GETDATE()+1, 112) 
'--or 
SELECT DATEADD(DAY, 1, CONVERT(CHAR(8), GETDATE(), 112)) 

'To get the date and time 24 hours from now: 
 
'-- Access: 
SELECT cstr(DateAdd("d",1,date())) &amp; " " &amp; cstr(time()) 
 
'-- SQL Server: 
SELECT DATEADD(day, 1, GETDATE()) 
 
'To get the first day of the current month: 
 
'-- Access: 
SELECT DateAdd("d",1-day(date()),date()) 
 
'-- SQL Server: 
SELECT CONVERT(CHAR(10),GETDATE()+1-DAY(GETDATE()),101) 
 
'To get the number of days in the current month: 
 
'-- Access: 
SELECT DAY(DATEADD("m", 1, 1-DAY(date()) &amp; date())-1) 
 
'-- SQL Server: 
SELECT DAY(DATEADD(MONTH, 1, 1-DAY(GETDATE())+GETDATE())-1) 
 
'To get the current millisecond: 
 
'-- This is impossible in Access, but just for fun: 
SELECT "Pick a number between 1 and 1000" :-) 
 
'-- SQL Server: 
SELECT DATEPART(millisecond, GETDATE()) 
 
'To get the current weekday: 
 
'-- Access: 
SELECT weekdayname(weekday(date())) 
 
'-- SQL Server: 
SELECT DATENAME(WEEKDAY, GETDATE()) 

'==================


'This function converts NUMERIC data that may be stored in string format to INTEGER format for comparison and computation.
 Remember that SQL Server is much more strongly typed than VBA in Access, so you may find yourself using CAST a lot more than you expected. 
 
'-- Access: 
SELECT CINT(column) 
 
'-- SQL Server: 
SELECT CAST(column AS INT) 
 
'INSTR(data, expression) -&gt; CHARINDEX(expression, data) 
'This function returns an integer representing the character where the search expression is found within the data parameter. Note that the order of these parameters is reversed! 
 
'-- Access: 
SELECT INSTR("franky goes to hollywood","goes") 
 
'-- SQL Server: 
SELECT CHARINDEX('goes','franky goes to hollywood') 
 
'ISDATE(data) 
This function returns 1 if the supplied parameter is a valid date, and 0 if it is not. Aside from delimiters, the syntax is identical. 
 
'-- Access: 
SELECT ISDATE(#12/01/2001#) 
 
'-- SQL Server: 
SELECT ISDATE('12/01/2001') 
 
'ISNULL(data) 
This function works a bit differently in the two products. In Access, it returns 1 if the supplied parameter is NULL, and 0 if it is not. In SQL Server, there are two parameters, and the function works more like a CASE statement. The first parameter is the data you are checking; the second is what you want returned IF the first parameter is NULL (many applications outside the database haven't been designed to deal with NULL values very gracefully). The following example will return a 1 or 0 to Access, depending on whether 'column' is NULL or not; the code in SQL Server will return the column's value if it is not NULL, and will return 1 if it is NULL. The second parameter usually matches the datatype of the column you are checking. 
 
'-- Access: 
SELECT ISNULL(column) FROM tbl 
 
'-- SQL Server: 
SELECT ISNULL(column,1) FROM tbl 
 
'A more intuitive function to use in SQL Server is the ANSI standard COALESCE() function. Not only does it allow you to substitute a value when a NULL is found, it will allow you to step through a series of possible values, and stop at the first non-NULL. 
 
SELECT COALESCE(NULL, DateUpdated, DateAdded, GETDATE()) FROM tbl 
 
ISNUMERIC(data) 
'This function returns 1 if the supplied parameter is numeric, and 0 if it is not. The syntax is identical. 
 
SELECT ISNUMERIC(column) 
 
LEFT(data, n) 
'This function returns the leftmost n characters of data. The syntax is identical. 
 
SELECT LEFT(column,5) 
 
LEN(data) 
'This function returns the number of characters in data. The syntax is identical. 
 
SELECT LEN(column) 
 
LCASE(data) -&gt; LOWER(data) 
'This function converts data to lower case. 
 
'-- Access: 
SELECT LCASE(column) 
 
'-- SQL Server: 
SELECT LOWER(column) 
 
LTRIM(data) 
'This function removes white space from the left of data. The syntax is identical. 
 
SELECT LTRIM(column) 
 
REPLACE(data, expression1, expression2) 
'This function scans through data, replacing all instances of expression1 with expression2. 
 
SELECT REPLACE(column, 'bob', 'frank') 
 
RIGHT(data, n) 
'This function returns the rightmost n characters of data. The syntax is identical. 
 
SELECT RIGHT(column,8) 
 
RTRIM(data) 
'This function removes white space from the right of data. The syntax is identical. 
 
SELECT RTRIM(column) 
 
CSTR(data) -&gt; STR(data) 
'This function converts data to string format. 
 
'-- Access: 
SELECT CSTR(column) 
 
'-- SQL Server: 
'-- if column is NUMERIC: 
SELECT STR(column) 
'-- if column is not NUMERIC: 
SELECT CAST(column AS VARCHAR(n)) 
 
MID(data, start, length) -&gt; SUBSTRING(data, start, length) 
'This function returns 'length' characters, starting at 'start'. 
 
'-- Access: 
SELECT MID("franky goes to hollywood",1,6) 
 
'-- SQL Server: 
SELECT SUBSTRING('franky goes to hollywood',1,6) 
 
UCASE(data) -&gt; UPPER(data) 
'This function converts data to upper case. 
 
'-- Access: 
SELECT UCASE(column) 
 
'-- SQL Server: 
SELECT UPPER(column) 
 
'StrConv 
'This function converts a string into 'proper' case (but does not deal with names like O'Hallaran or vanDerNeuts). There is no direct equivalent for StrConv in SQL Server, but you can do it per word manually: 
 
'-- Access: 
SELECT StrConv("aaron bertrand",3) 
 
'-- SQL Server: 
SELECT LEFT(UPPER('aaron'),1) 
+ LOWER(RIGHT('aaron',LEN('aaron')-1)) 
+ ' ' 
+ LEFT(UPPER('bertrand'),1) 
+ LOWER(RIGHT('bertrand',LEN('bertrand')-1)) 
 
'There is a thread stored at Google dealing with proper casing an entire block of text; you could likely implement something like that in both Access and SQL Server. 
 
TRIM(data) 
'This function combines both LTRIM() and LTRIM(); there is no equivalent in SQL Server. To mimic the functionality, you would combine the two functions: 
 
'-- Access:  
SELECT TRIM(column) 
SELECT LTRIM(RTRIM(column)) 
 
'-- SQL Server: 
SELECT LTRIM(RTRIM(column)) 

































</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Password Protect a Form or a Report - Hard Coded</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Password Protect a Form or a Report - Hard Coded</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Password Protect a Form or a Report - Hard Coded


Private Sub Form_Open(Cancel As Integer)
    On Error GoTo Error_Handler
 
    If StrComp(InputBox("Please enter the Password. (the password is: MyPassword"), "MyPassword", 0) &lt;&gt; 0 Then
        Cancel = True
        MsgBox "Wrong password.", vbInformation Or vbOKOnly, "Operation cancelled"
    End If
 
Error_Handler_Exit:
    On Error Resume Next
    Exit Sub
 
Error_Handler:
    MsgBox "The following error has occurred" &amp; vbCrLf &amp; vbCrLf &amp; _
           "Error Number: " &amp; Err.Number &amp; vbCrLf &amp; _
           "Error Source: Form_Open" &amp; vbCrLf &amp; _
           "Error Description: " &amp; Err.Description &amp; _
           Switch(Erl = 0, "", Erl &lt;&gt; 0, vbCrLf &amp; "Line No: " &amp; Erl) _
           , vbOKOnly + vbCritical, "An Error has Occurred!"
    Resume Error_Handler_Exit
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Password Protect a Form or a Report - Table Based Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Password Protect a Form or a Report - Table Based Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Table Based Password

'Run Query
CREATE TABLE tbl_DB_Object_Password (  
     ObjectPasswordId              COUNTER PRIMARY KEY,
     Objecttype      TEXT(10) NOT NULL,
     ObjectName      TEXT(255) NOT NULL,
     ObjectPassword      TEXT(255) NOT NULL,
     CONSTRAINT UniqueObjectEntry UNIQUE (ObjectType, ObjectName)
);
     
     
     'Now you need to make an entry for each object you wish to protect

'ObjectType = Form or Report
'ObjectName = Name of the Form or Report
'ObjectPassword = Password you’d like to use to protect the Form or Report

'Then once that is done, we’d use code along the lines of

Private Sub Form_Open(Cancel As Integer)
    On Error GoTo Error_Handler
    Dim sFormPassword
 
    sFormPassword = Nz(DLookup("ObjectPassword", "tbl_DB_Object_Passwords", _
                               "[ObjectType]='Form' AND [ObjectName]='" &amp; Me.Name &amp; "'"), "")
    If sFormPassword &lt;&gt; "" Then
        '    If InputBox("Please enter the Password.") &lt;&gt; "MyPassword" Then 'if using Option Compare Binary
        If StrComp(InputBox("Please enter the Password. (the password is: ABc"), sFormPassword, 0) &lt;&gt; 0 Then
            Cancel = True
            MsgBox "Wrong password.", vbInformation Or vbOKOnly, "Operation cancelled"
        End If
    Else
        'You choose what to do here!
        '***************************
        '1. no password was set so this form isn't secured, do nothing
        '2. no password, so the admin forgot to set things up, so lock it down by Cancel=True
    End If
 
Error_Handler_Exit:
    On Error Resume Next
    Exit Sub
 
Error_Handler:
    MsgBox "The following error has occurred" &amp; vbCrLf &amp; vbCrLf &amp; _
           "Error Number: " &amp; Err.Number &amp; vbCrLf &amp; _
           "Error Source: Form_Open" &amp; vbCrLf &amp; _
           "Error Description: " &amp; Err.Description &amp; _
           Switch(Erl = 0, "", Erl &lt;&gt; 0, vbCrLf &amp; "Line No: " &amp; Erl) _
           , vbOKOnly + vbCritical, "An Error has Occurred!"
    Resume Error_Handler_Exit
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Password Protect a Form or a Report</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Password Protect a Form or a Report</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.devhut.net/2018/09/16/access-password-protect-a-form-or-a-report/

'Authorized User(s) Table run in Access:

CREATE TABLE tbl_Users (  
     UserId              COUNTER PRIMARY KEY,
     UserName      TEXT(255) NOT NULL,
     Objecttype      TEXT(10) NOT NULL,
     ObjectName      TEXT(255) NOT NULL,
     CONSTRAINT UniqueUserObject UNIQUE (UserName, ObjectType, ObjectName)
);


'Now you need to make an entry for each object you wish to protect

'UserName = The windows username of the authorized user
'ObjectType = Form or Report
'ObjectName = Name of the Form or Report

'and then we code the Form’s/Report’s On Open event like

'and then we code the Form’s/Report’s On Open event like

Private Sub Form_Open(Cancel As Integer)
    On Error GoTo Error_Handler
 
    If Nz(DLookup("UserName", "tbl_Users", _
                  "[ObjectType]='Form' AND [ObjectName]='" &amp; Me.Name &amp; "' AND [UserName]='" &amp; fOSUserName() &amp; "'"), "") = "" Then
        Cancel = True
        MsgBox "You are not authorized to open this form", vbInformation Or vbOKOnly, "Operation cancelled"
    End If
 
Error_Handler_Exit:
    On Error Resume Next
    Exit Sub
 
Error_Handler:
    MsgBox "The following error has occurred" &amp; vbCrLf &amp; vbCrLf &amp; _
           "Error Number: " &amp; Err.Number &amp; vbCrLf &amp; _
           "Error Source: Form_Open" &amp; vbCrLf &amp; _
           "Error Description: " &amp; Err.Description &amp; _
           Switch(Erl = 0, "", Erl &lt;&gt; 0, vbCrLf &amp; "Line No: " &amp; Erl) _
           , vbOKOnly + vbCritical, "An Error has Occurred!"
    Resume Error_Handler_Exit
End Sub



'====================================

Option Compare Database
Private Declare Function apiGetUserName Lib "advapi32.dll" Alias _
"GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Private Declare Function apiGetComputerName Lib "kernel32" Alias _
"GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Function fOSUserName() As String
'Returns the network login name
    Dim lnglen As Long, lngX As Long
    Dim strUserName As String
    strUserName = String$(254, 0)
    lnglen = 255
    lngX = apiGetUserName(strUserName, lnglen)
    If lngX &lt;&gt; 0 Then
        fOSUserName = Left$(strUserName, lnglen - 1)
    Else
        fOSUserName = ""
    End If

End Function
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_Array</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Filter_Search_Array</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_Array</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Filter_Search_Array</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
//'These search it b/ don't tell you where it was found

Function IsInArray(arr As Variant, valueToFind As Variant) As Boolean
' checks if valueToFind is found in arr, no loop!
  IsInArray = (UBound(Filter(arr, valueToFind)) &gt; -1)
End Function

'Test it on an array
Sub CheckArray()

Dim fileExtensions As Variant

  fileExtensions = Array("doc", "xls")

  MsgBox IsInArray(fileExtensions, "xls")

End Sub

'Split a string on ',' into array, then test
Sub CheckArray()

Dim fileExtensions As Variant
Dim fileExts As String

  fileExts = "doc,xls"

  ' put strings into array, comma-delimited
  fileExtensions = Split(fileExts, ",")

  MsgBox IsInArray(fileExtensions, "xls")

End Sub

///////////////
'If it's a onedimensional array the Filter-Function could be used

dim z as variant
z = Filter(MyArray, Testvalue)
If UBound(z) &lt; 0 Then MsgBox ("empty")

'Thanks Tommy, I wrote that out in one line (Ubound(filter....)), and now my code really does look slim
'However, I noticed that you need to be careful if passing a blank string as the search term.

'Ordinarily, you'd expect a blank string to return false 
'(that it does not exist in the array), unfortunately due to the way the filter function works, 
'passing a blank string returns the entire array, which is then incorrectly reported as a successful search.


'Instead consider the slight alteration:

    'Initialise Array
    Dim myArray(2) As String
    myArray(0) = "Value1"
    myArray(1) = "Value2"
    myArray(2) = "Value3"
    
    'Initialise Search Term
    Dim searchTerm As String
    searchTerm = "Value2"
    
    'Check if a value exists in the Array
    If UBound(Filter(myArray, searchTerm)) &gt;= 0 And searchTerm &lt;&gt; "" Then
        MsgBox ("Search Term SUCCESSFULLY located in the Array")
    Else
        MsgBox ("Search Term could NOT be located in the Array")
    End If
    
    'However, be aware that the Filter function also accepts partial matches.
'For example, typing "Value" as the search term in the above example 
'(with no number on the end) reports a valid match, even though no element in the array exactly matches this string.

'Nevertheless, still should be a good one line alternative to using a loop and manually comparing each value in the array,
' assuming you can handle partial matches. 

///////////////


Dim C As String, FindMe As String, myArray() As Variant
Dim ItemFound As Boolean, MatchCase As Boolean
' Load dynamic Variant array in a single line of code
myArray = Array("Value1", "Value2", "Value3")
' Initialize search options
FindMe = "value2"
MatchCase = False
' Perform search
C = Chr$(1)
ItemFound = InStr(1, C &amp; Join(myArray, C) &amp; C, C &amp; FindMe &amp; C, 1 + MatchCase)
' Display result
If ItemFound Then
    MsgBox "Found it!"
Else
    MsgBox "Could NOT find it."
End If

'The above code only finds whole array element matches; that is, if you searched for "Val", 
'it would not match any elements in the array (the Filter function method would produce a match). 
'I also provided a MatchCase Boolean variable to control whether the letter casing must be exact 
'or not when performing the search. 

'If InStr loop as I'd expect, 'letter by letter', 
'then it's actually a less efficient solution than the original. 
'In the original you loop for as many elements as there are in the array, 
'with InStr you are effectively loop for as many letters as there are in all of the elements combined.

///////////////

'Simple 
Application.Match(value, array, 0) 
'won't help? 
'That is if the array element you are searching for is exactly same - eg. looking for "john" will find "john" but not "john doe".

'Don't use WorkSheetFunction.Match, because when it doesn't find a match, it will throw runtime error. 



///////////////


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_Array</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>PassAnArray_To_A_Function</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_Array</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>PassAnArray_To_A_Function</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Sub PassAnArray()
' Page 460
    Dim myArray() As Variant
    Dim myRegion As String
    
    myArray = Range("mySalesData")								'&lt;== This is named range: 3 columns, first is a string, then 2 columns of integers
    myRegion = InputBox("Enter Region - Central,East,West")
    MsgBox myRegion &amp; " Sales are: " &amp; Format(RegionSales(myArray, _			'&lt;== Here is the function receiving the array
        myRegion), "$#,#00.00 ")
End Sub

Function RegionSales(ByRef BigArray As Variant, sRegion As String) As Long
    Dim myCount As Integer
    
    RegionSales = 0
    For myCount = LBound(BigArray) To UBound(BigArray)
        If BigArray(myCount, 1) = sRegion Then
            RegionSales = BigArray(myCount, 4) * BigArray(myCount, 3) + RegionSales
        End If
    Next myCount
End Function
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_COLOR</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>ColorChooser_Dialog</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_COLOR</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>ColorChooser_Dialog</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'Usage:
Sub btn_TitleLine_1_Color()			'&lt;===== Assign a button to this
    Dim rX As Range
    Set rX = Worksheets("Parameters").Cells(24, 2)
    PickColorPutVBcolorIntoCell rX
End Sub

Sub PickColorPutVBcolorIntoCell(rngX As Range)	'&lt;==== Cannot assign a button to this b/c it  has a parameter
    
    Dim vX As Variant
    
    vX = PickNewColor(rngX)
    'MsgBox ("The color is: " &amp; CStr(vX))
    
    rngX.Interior.Color = vX
    rngX.Value = vX
    
End Sub


Function PickNewColor(rngX As Range) As Double              ', Optional i_OldColor As Double = xlNone
    
    Dim i_OldColor As Double
    i_OldColor = rngX.Interior.Color
    
    Const BGColor As Long = 13160660  'background color of dialogue
    Const ColorIndexLast As Long = 32 'index of last custom color in palette
    
    Dim myOrgColor As Double          'original color of color index 32
    Dim myNewColor As Double          'color that was picked in the dialogue
    Dim myRGB_R As Integer            'RGB values of the color that will be
    Dim myRGB_G As Integer            'displayed in the dialogue as
    Dim myRGB_B As Integer            '"Current" color
    
    'save original palette color, because we don't really want to change it
    myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)
    
    If i_OldColor = xlNone Then
        'get RGB values of background color, so the "Current" color looks empty
        Color2RGB BGColor, myRGB_R, myRGB_G, myRGB_B
    Else
        'get RGB values of i_OldColor
        Color2RGB i_OldColor, myRGB_R, myRGB_G, myRGB_B
    End If
    
    'call the color picker dialogue
    If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, _
         myRGB_R, myRGB_G, myRGB_B) = True Then
        '"OK" was pressed, so Excel automatically changed the palette
        'read the new color from the palette
        PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)
        'reset palette color to its original value
        ActiveWorkbook.Colors(ColorIndexLast) = myOrgColor
    Else
        '"Cancel" was pressed, palette wasn't changed
        'return old color (or xlNone if no color was passed to the function)
        PickNewColor = i_OldColor
    End If
End Function 






///////////////////////////ORIGINAL //////////////////////////////////////
'FROM: http://www.mrexcel.com/forum/excel-questions/547126-excel-colors-dialog-visual-basic-applications.html



'Picks new color
Function PickNewColor(Optional i_OldColor As Double = xlNone) As Double
Const BGColor As Long = 13160660  'background color of dialogue
Const ColorIndexLast As Long = 32 'index of last custom color in palette

Dim myOrgColor As Double          'original color of color index 32
Dim myNewColor As Double          'color that was picked in the dialogue
Dim myRGB_R As Integer            'RGB values of the color that will be
Dim myRGB_G As Integer            'displayed in the dialogue as
Dim myRGB_B As Integer            '"Current" color
  
  'save original palette color, because we don't really want to change it
  myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)
  
  If i_OldColor = xlNone Then
    'get RGB values of background color, so the "Current" color looks empty
    Color2RGB BGColor, myRGB_R, myRGB_G, myRGB_B
  Else
    'get RGB values of i_OldColor
    Color2RGB i_OldColor, myRGB_R, myRGB_G, myRGB_B
  End If
  
  'call the color picker dialogue
  If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, _
     myRGB_R, myRGB_G, myRGB_B) = True Then
    '"OK" was pressed, so Excel automatically changed the palette
    'read the new color from the palette
    PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)
    'reset palette color to its original value
    ActiveWorkbook.Colors(ColorIndexLast) = myOrgColor
  Else
    '"Cancel" was pressed, palette wasn't changed
    'return old color (or xlNone if no color was passed to the function)
    PickNewColor = i_OldColor
  End If
End Function

'Converts a color to RGB values
Sub Color2RGB(ByVal i_Color As Long, _
              o_R As Integer, o_G As Integer, o_B As Integer)
  o_R = i_Color Mod 256
  i_Color = i_Color \ 256
  o_G = i_Color Mod 256
  i_Color = i_Color \ 256
  o_B = i_Color Mod 256
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_MISC</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>CRACK_Excel_Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_MISC</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>CRACK_Excel_Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'http://community.spiceworks.com/topic/328118-need-to-unlock-a-password-protected-excel-2010-workbook

'Put this code into Visual Basic under the spreadsheet form and run this code!  Instant unlock

Sub PasswordBreaker()
    'Breaks worksheet password protection.
    Dim i As Integer, j As Integer, k As Integer
    Dim l As Integer, m As Integer, n As Integer
    Dim i1 As Integer, i2 As Integer, i3 As Integer
    Dim i4 As Integer, i5 As Integer, i6 As Integer
    On Error Resume Next
    For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
    For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
    For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
    For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
    ActiveSheet.Unprotect Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; _
        Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; _
        Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n)
    If ActiveSheet.ProtectContents = False Then
        MsgBox "One usable password is " &amp; Chr(i) &amp; Chr(j) &amp; _
            Chr(k) &amp; Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; _
            Chr(i3) &amp; Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n)
         Exit Sub
    End If
    Next: Next: Next: Next: Next: Next
    Next: Next: Next: Next: Next: Next
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_MISC</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Password_removeFromVBA</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_MISC</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Password_removeFromVBA</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://confluence.jaytaala.com/display/TKB/Remove+Excel+VBA+password

Remove Excel VBA password
Skip to end of metadata
Created by Jay Ta'ala on Nov 14, 2017 Go to start of metadata
Problem
I usually don't deal with VBA (thank goodness) - but I have been asked on several occasions to remove a VBA password from an excel workbook.  In the instances that I did (remove the password) it was not for nefarious purposes, but because someone had either forgotten the password or had a file they were now responsible for and the previous user had (who set the password) had left the company.

Plus, I quite enjoyed removing passwords with this approach since it reminded me of my youth and hex-editing files (anyone remember hex-editing SimCity 2000 saves to give you lots of money??).

Solution
You'll need a hex-editor for this.  Something like trusty ol' XVI32.

Make sure you have a backup of the file in case something goes wrong.

.xls (or .xla)
These are older files but they are still around.  Open the file in your hex-editor and find for text string "DPB":



Now basically just click on the B in DPB and replace it with an "x", like this:



Save and exit your hex-editor.

Your not done yet...
Open the file in excel - you may receive a couple of error notifications, just click through them.

Open the Visual Basic window (usually ALT+F11 if I remember correctly) and open the VBAProject properties (Tools menu).

Click on the Protection tab and change (do not remove at this stage) the password to something short and easy to remember (we'll be removing in next step).



Save the workbook and then close and reopen.

Open again the Visual Basic window and enter the password you just put in.  Redo the previous step but this time you can remove (delete) the password.

Save the workbook and you have now removed the password.

.xlsm
For xlsm files you need to do an extra step at the start.  Basically xlsm is a zipped format, so rename the extension to .zip and do the following:

open and open "xl" folder
extract "vbaProject.bin"
do hexedit method (see left)
save and reinsert into zip
rename back to xlsm.
repeat steps previously outlined by changing and then removing the password.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_Sheet</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Protect_Sheets</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_Sheet</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Protect_Sheets</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Sub ProtectAll()

    Dim ws As Worksheet
	Application.ScreenUpdating = False
    For Each ws In ActiveWorkbook.Worksheets
    ws.Protect Password:="password", DrawingObjects:=True, Contents:=True, Scenarios:=True
    Next ws
    ActiveWorkbook.Protect Password:="password", Structure:=True, Windows:=False
	Application.ScreenUpdating = True

End Sub


Sub UnProtectAll()
Application.ScreenUpdating = False
    
    ActiveWorkbook.Unprotect Password:="password"

    Dim ws As Worksheet

    For Each ws In ActiveWorkbook.Worksheets
    ws.Unprotect Password:="password"
    Next ws
Application.ScreenUpdating = True

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_USERFORM</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>PROGRAMMATIC_Comboboxs_GoodWayToAddCodeToUserForm</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_USERFORM</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>PROGRAMMATIC_Comboboxs_GoodWayToAddCodeToUserForm</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'1] code behind the worksheet
'2] Code on the module
/////////////////////////
'NOTE: use of .InsertLines for putting the code on code of the form




'1] code behind the worksheet
/////////////////////////////

Private mintLeft As Integer
Private mintTop As Integer
Private Sub CommandButton1_Click()

Dim frm As UserForm2

Set frm = New UserForm2
frm.Show vbModeless
mintLeft = mintLeft + 100
mintTop = mintTop + 100

frm.Left = mintLeft
frm.Top = mintTop
End Sub



'2] Code on the module
/////////////////////
Option Explicit

'Passed back to the function from the UserForm
Public GETOPTION_RET_VAL As Variant


Sub Demo1()
    Dim Ops(1 To 12) As String
    Dim i As Integer
    Dim UserChoice As Variant
'   Create an array of month names
    For i = 1 To 12
        Ops(i) = Format(DateSerial(1, i, 1), "mmmm")
    Next i
    UserChoice = GetCombo(Ops, 1, "Select a month")
    If UserChoice = False Then
        Range("A6") = ""
    Else
        Range("A6") = Ops(UserChoice)
    End If
End Sub

Function GetCombo(OpArray, Default, Title)
    Dim TempForm  'As VBComponent
    Dim NewOptionButton As MSForms.OptionButton
    Dim NewCommandButton1 As MSForms.CommandButton
    Dim NewCommandButton2 As MSForms.CommandButton
    Dim NewComboBox As MSForms.ComboBox
    Dim TextLocation As Integer
    Dim X As Integer, i As Integer, TopPos As Integer
    Dim MaxWidth As Long
    Dim WasVisible As Boolean
    
'   Hide VBE window to prevent screen flashing
    'Application.VBE.MainWindow.Visible = False

'   Create the UserForm
    Set TempForm = ThisWorkbook.VBProject.VBComponents.Add(3)
    TempForm.Properties("Width") = 800
    
'   Add the OptionButtons
    TopPos = 4
    MaxWidth = 0 'Stores width of widest OptionButton
    For i = LBound(OpArray) To UBound(OpArray)
        Set NewComboBox = TempForm.Designer.Controls.Add("forms.combobox.1")
        With NewComboBox
            .Width = 50
            .Name = OpArray(i)
            .Value = OpArray(i)
            .Height = 15
            .Left = 8
            .Top = TopPos
            .Tag = i
            .AutoSize = False
            If .Width &gt; MaxWidth Then MaxWidth = .Width
        End With
        TopPos = TopPos + 15
    Next i
    
'   Add the Cancel button
    Set NewCommandButton1 = TempForm.Designer.Controls.Add("forms.CommandButton.1")
    With NewCommandButton1
        .Caption = "Cancel"
        .Height = 18
        .Width = 44
        .Left = MaxWidth + 12
        .Top = 6
    End With

'   Add the OK button
    Set NewCommandButton2 = TempForm.Designer.Controls.Add("forms.CommandButton.1")
    With NewCommandButton2
        .Caption = "OK"
        .Height = 18
        .Width = 44
        .Left = MaxWidth + 12
        .Top = 28
    End With

'   Add event-hander subs for the CommandButtons
    With TempForm.CodeModule
        X = .CountOfLines
        .InsertLines X + 1, "Sub CommandButton1_Click()"
        .InsertLines X + 2, "  GETOPTION_RET_VAL=False"
        .InsertLines X + 3, "  Unload Me"
        .InsertLines X + 4, "End Sub"
        
        .InsertLines X + 5, "Sub CommandButton2_Click()"
        .InsertLines X + 6, "  Dim ctl"
        .InsertLines X + 7, "  GETOPTION_RET_VAL = False"
        .InsertLines X + 8, "  For Each ctl In Me.Controls"
        .InsertLines X + 9, "    If ctl.Tag &lt;&gt; """" Then If ctl Then GETOPTION_RET_VAL = ctl.Tag"
        .InsertLines X + 10, "  Next ctl"
        .InsertLines X + 11, "  Unload Me"
        .InsertLines X + 12, "End Sub"
    End With
    
'   Adjust the form
    With TempForm
        .Properties("Caption") = Title
        .Properties("Width") = NewCommandButton1.Left + NewCommandButton1.Width + 10
        If .Properties("Width") &lt; 160 Then
            .Properties("Width") = 160
            NewCommandButton1.Left = 106
            NewCommandButton2.Left = 106
        End If
        .Properties("Height") = TopPos + 24
    End With

'   Show the form
    VBA.UserForms.Add(TempForm.Name).Show

'   Delete the form
    ThisWorkbook.VBProject.VBComponents.Remove VBComponent:=TempForm
    
'   Pass the selected option back to the calling procedure
    GetCombo = GETOPTION_RET_VAL
End Function

 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_WORKBOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>ReferenceWorkBooks</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_WORKBOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>ReferenceWorkBooks</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
/////////////////////////////////////////////////////////////
Function GetActiveWB() As String

  GetActiveWB = ActiveWorkbook.Path &amp; "\" &amp; ActiveWorkbook.Name

End Function
/////////////////////////////////////////////////////////////

Function GetThisWB() As String

  GetThisWB = ThisWorkbook.Path &amp; "\" &amp; ThisWorkbook.Name

End Function

/////////////////////////////////////////////////////////////
'Reference workbooks in the Workbooks collection
'The Workbooks collection contains all the open Workbook objects.

Private Sub UserForm_Activate()

  'Populate list box with names of open workbooks.

  Dim wb As Workbook

  For Each wb In Workbooks

    ListBox1.AddItem wb.Name

  Next wb

End Sub
/////////////////////////////////////////////////////////////
'opening all of the workbooks in a specified folder is a bit harder, 
'as you can see in the following subprocedure:

Sub OpenAllWB()

  'Open all workbooks in specified folder.

  Dim i As Integer

  With Application.FileSearch

    .LookIn = "C:\Examples"

    .FileType = msoFileTypeExcelWorkbooks

      'There are wb's

      If .Execute &gt; 0 Then

        For i = 1 To .FoundFiles.Count

          Workbooks.Open (.FoundFiles(i))

        Next i

      'There are no wb's

      Else

        MsgBox "There are no workbooks to open", vbOKOnly

      End If

  End With

End Sub

/////////////////////////////////////////////////////
'Closing all the open workbooks is a bit easier than opening them
Sub CloseAllWB()

  'Close all open workbooks.

    Workbooks.Close

End Sub

/////////////////////////////////////////////////////////////
'Open a specific WorkBook, but apparently only in the same folder:

Function ActivateWB(wbname As String)

  'Open wbname.

  Workbooks(wbname).Activate

End Function

To execute it, you simply pass the name of the workbook you want to activate as follows:

ActivateWB("HumanResources.xls")

/////////////////////////////////////////////////////////////

'The following function also uses the Workbooks property to determine whether a specific workbook is currently open:

Function IsWBOpen(wbname As String) As Boolean

  'Open workbook.

  Dim wb As Workbook

  On Error Resume Next

  Set wb = Workbooks(wbname)

  IsWBOpen = Not wb Is Nothing

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_LOOPs</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>IF_THEN_ELSE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_LOOPs</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>IF_THEN_ELSE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>If condition1 Then
[statementblock-1]
[ElseIf condition2 Then
[statementblock-2]] ...
[Else
[statementblock-n]]

End If


'EXAMPLE-------------------------

If alreadyEnabled = 0 Then

    fieldPassword = Nz(DLookup("ObjectPassword", "tbl_DB_Object_Passwords", _
                           "[ObjectType]='Field' AND [ObjectName]='" &amp; Me.Name &amp; "'"), "")

    iPasswordMatchesIfZero = StrComp(InputBox("Please enter the Password."), fieldPassword, 0)

    If fieldPassword &lt;&gt; "" Then
        If iPasswordMatchesIfZero &lt;&gt; 0 Then
            Cancel = True
            MsgBox "Wrong password.", vbInformation Or vbOKOnly, "Operation cancelled"
        Else
            Me.cmb_Answer.Enabled = True
            alreadyEnabled = 1
        End If

    End If
End If</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_PassThroughQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>about_VBA_PassThroughQuery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_PassThroughQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>about_VBA_PassThroughQuery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_VBA_PassThroughQuery



Microsoft Access Pass Through Queries to SQL Server
https://www.mssqltips.com/sqlservertip/1482/microsoft-access-pass-through-queries-to-sql-server/

SQL Server Passthrough query as basis for a DAO recordset in Access
https://stackoverflow.com/questions/17241898/sql-server-passthrough-query-as-basis-for-a-dao-recordset-in-access


Run Microsoft Access Action Queries in VBA and Hide Warnings without Using DoCmd.SetWarnings
https://www.fmsinc.com/microsoftaccess/query/action-queries/SuppressWarningMessages.htm

Access VBA run Query or run Action Query
http://access-excel.tips/access-vba-run-action-query/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_PassThroughQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>PassThroughQuery_Access_Properties</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_PassThroughQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>PassThroughQuery_Access_Properties</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Create {menu} =&gt; Query Design =&gt; Show Table {Window: [Close]} =&gt; Design {menu} =&gt; Pass-Through
	=&gt; {click on} Property Sheet {in the Ribbon}


ODBC: use the DSN =&gt; {click on ...} =&gt; Select Data Source
(e.g. ODBC;Description=QA_ODBC;DRIVER=SQL Server Native Client 11.0;SERVER=CBTSQL04;UID=gigarson;Trusted_Connection=Yes;DATABASE=RiskMngt;)
Returns Records: Yes   {unless it is a query that does something}
ODBC Timeout: 0       {will not time out, or put the seconds}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_PassThroughQuery</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Simple_run_local_PassThroughQuery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_PassThroughQuery</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Simple_run_local_PassThroughQuery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Private Sub cmdCleanTableNames_Click()

 Dim dbs As DAO.Database
 Set dbs = CurrentDb
 dbs.Execute "PT_CleanStrings"

End Sub


'This is the Local PassThrough UPDATE query
UPDATE e4
SET e4.T103_ReportingTableNames_enum_04_Description = REPLACE(REPLACE(e4.T103_ReportingTableNames_enum_04_Description, '[', ''), ']', '')
FROM [RiskMngt].[Reporting].[T103_ReportingTableNames_enum_04] e4
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>DeleteFileIfItExists</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>DeleteFileIfItExists</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Function FileExists(ByVal FileToTest As String) As Boolean
   FileExists = (Dir(FileToTest) &lt;&gt; "")
End Function

'I 'll leave it to you to figure out the various error handling needed but these are among the error handling things I'd be considering:
'
'    Check for an empty string being passed.
'    Check for a string containing characters illegal in a file name/path
'
'2.) How To Delete a File. Look at this. Basically use the Kill command but you need to allow for the possibility of a file being read-only. Here's a function for you:

Sub DeleteFile(ByVal FileToDelete As String)
   If FileExists(FileToDelete) Then 'See above
      SetAttr FileToDelete, vbNormal
      Kill FileToDelete
   End If
End Sub

'===========================

'set a reference to the Scripting.Runtime library

With New FileSystemObject
    If .FileExists(yourFilepath) Then
        .DeleteFile yourFilepath
    End If
End With

'Same effect but fewer (well, none at all) variable declarations.

'==============================

'set a reference to the Scripting.Runtime library and then use the FileSystemObject:

Dim fso As New FileSystemObject, aFile As File

If (fso.FileExists("PathToFile")) Then
    aFile = fso.GetFile("PathToFile")
    aFile.Delete
End If


'====================================

The following can be used to test for the existence of a file, and then to delete it.

Dim aFile As String
aFile = "c:\file_to_delete.txt"
If Len(Dir$(aFile)) &gt; 0 Then
     Kill aFile
End If

'====================================
    On Error Resume Next
    Kill "c:\file_to_delete.txt"
    On Error Goto 0
    return Len(Dir$(aFile)) &gt; 0 ' Make sure it actually got deleted. 

If the file doesn't exist in the first place, mission accomplished!</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBE_VBA_Extensibility</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Adding A Module To A Project</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBE_VBA_Extensibility</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Adding A Module To A Project</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'This code will add new code module named NewModule to the VBProject of the active workbook. 
'The type of VBComponent is specified by the value of the parameter passed to the Add method. 

    Sub AddModuleToProject()
        Dim VBProj As VBIDE.VBProject
        Dim VBComp As VBIDE.VBComponent
        
        Set VBProj = ActiveWorkbook.VBProject
        Set VBComp = VBProj.VBComponents.Add(vbext_ct_StdModule)
        VBComp.Name = "NewModule"
    End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBE_VBA_Extensibility</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Adding A Procedure To A Module</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBE_VBA_Extensibility</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Adding A Procedure To A Module</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Creating a procedure via VBA code is really quite simple. 
'Build up a text string of the code, using vbCrLf to create new lines, and then insert that text with the InsertLines method, 
'passing to it the line number and the text string. 
'The following code will add a simple "Hello World" procedure named SayHello to the end of the module named Module1.

    Sub AddProcedureToModule()
        Dim VBProj As VBIDE.VBProject
        Dim VBComp As VBIDE.VBComponent
        Dim CodeMod As VBIDE.CodeModule
        Dim LineNum As Long
        Const DQUOTE = """" ' one " character

        Set VBProj = ActiveWorkbook.VBProject
        Set VBComp = VBProj.VBComponents("Module1")
        Set CodeMod = VBComp.CodeModule
        
        With CodeMod
            LineNum = .CountOfLines + 1
            .InsertLines LineNum, "Public Sub SayHello()"
            LineNum = LineNum + 1
            .InsertLines LineNum, "    MsgBox " &amp; DQUOTE &amp; "Hello World" &amp; DQUOTE
            LineNum = LineNum + 1
            .InsertLines LineNum, "End Sub"
        End With
    End Sub

'You can also build up a String variable with the content of the procedure and insert that string with one call to InsertLines. For example,

Dim CodePan As VBIDE.CodeModule
Dim S As String
Set CodePan = ThisWorkbook.VBProject.VBComponents("Module2").CodeModule
S = _
"Sub ABC()" &amp; vbNewLine &amp; _
"    MsgBox ""Hello World"",vbOkOnly" &amp; vbNewLine &amp; _
"End Sub" &amp; vbNewLine
With CodePan
    .InsertLines .CountOfLines + 1, S
End With
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBOX_Misc</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>showInfo_2018_09_18</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBOX_Misc</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>showInfo_2018_09_18</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
&gt;VBoxManage list vms --long
::OUTPUT
=======================================================================================

Name:            Ubuntu_Recreational
Groups:          /
Guest OS:        Ubuntu (64-bit)
UUID:            a4a362e9-f4dd-4cce-88c1-a820846d6587
Config file:     G:\VHD_WorkingVersions\Ubuntu_Recreational\Ubuntu_Recreational.vbox
Snapshot folder: G:\VHD_WorkingVersions\Ubuntu_Recreational\Snapshots
Log folder:      G:\VHD_WorkingVersions\Ubuntu_Recreational\Logs
Hardware UUID:   a4a362e9-f4dd-4cce-88c1-a820846d6587
Memory size:     8000MB
Page Fusion:     off
VRAM size:       50MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  2
PAE:             on
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          off
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): Floppy
Boot Device (2): DVD
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             UTC
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: KVM
State:           powered off (since 2018-09-18T01:23:22.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            IDE
Storage Controller Type (0):            PIIX4
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  2
Storage Controller Port Count (0):      2
Storage Controller Bootable (0):        on
Storage Controller Name (1):            SATA
Storage Controller Type (1):            IntelAhci
Storage Controller Instance Number (1): 0
Storage Controller Max Port Count (1):  30
Storage Controller Port Count (1):      1
Storage Controller Bootable (1):        on
IDE (1, 0): Empty
SATA (0, 0): G:\VHD_WorkingVersions\Ubuntu_Recreational\Ubuntu_Recreational.vdi (UUID: d7ea94cd-2107-4a08-a79d-3cebfbea2831)
NIC 1:           MAC: 080027D75ADA, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: HDA, Codec: STAC9221)
Audio playback:  enabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            disabled
XHCI:            disabled

USB Device Filters:

&lt;none&gt;

Bandwidth groups:  &lt;none&gt;

Shared folders:  

Name: 'VM_Shared_Folder', Host path: 'E:\VM_Shared_Folder' (machine mapping), writable

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Ubuntu_Recreational\Ubuntu_Recreational.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    

Guest:

Configured memory balloon size:      0 MB


Name:            vm_WIN_10_DEV
Groups:          /
Guest OS:        Windows 10 (64-bit)
UUID:            ed2476bb-a8b9-46e0-8795-a3c07abc2ae5
Config file:     G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\vm_WIN_10_DEV.vbox
Snapshot folder: G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\Snapshots
Log folder:      G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\Logs
Hardware UUID:   ed2476bb-a8b9-46e0-8795-a3c07abc2ae5
Memory size:     8192MB
Page Fusion:     off
VRAM size:       128MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  2
PAE:             off
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          off
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): Floppy
Boot Device (2): DVD
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             local time
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: HyperV
State:           powered off (since 2018-09-01T19:47:11.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            SATA
Storage Controller Type (0):            IntelAhci
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  30
Storage Controller Port Count (0):      3
Storage Controller Bootable (0):        on
SATA (0, 0): G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\Name_ vm_WIN_10_DEV.vdi (UUID: 27e4f1ee-8674-4499-92e2-5c5b52ee3933)
SATA (1, 0): D: (UUID: 00445644-0000-0000-0000-00000000443a) (temp eject)
NIC 1:           MAC: 0800275521D5, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: HDA, Codec: STAC9221)
Audio playback:  enabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            disabled
XHCI:            disabled

USB Device Filters:

&lt;none&gt;

Bandwidth groups:  &lt;none&gt;

Shared folders:  

Name: 'VM_Shared_Folder', Host path: 'E:\VM_Shared_Folder' (machine mapping), writable

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\vm_WIN_10_DEV.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    ac_enabled=false

Description:
Atlassian SourceSafe
Guest:

Configured memory balloon size:      0 MB


Name:            Win10_Build_1709
Groups:          /
Guest OS:        Windows 10 (64-bit)
UUID:            61ac460a-1eae-4eb8-ae5c-f6f3e852444a
Config file:     G:\VHD_WorkingVersions\Win10_Build_1709\Win10_Build_1709.vbox
Snapshot folder: G:\VHD_WorkingVersions\Win10_Build_1709\Snapshots
Log folder:      G:\VHD_WorkingVersions\Win10_Build_1709\Logs
Hardware UUID:   61ac460a-1eae-4eb8-ae5c-f6f3e852444a
Memory size:     8192MB
Page Fusion:     off
VRAM size:       128MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  2
PAE:             off
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          off
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): DVD
Boot Device (2): Floppy
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             local time
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: HyperV
State:           powered off (since 2018-09-01T19:48:20.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            SATA
Storage Controller Type (0):            IntelAhci
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  30
Storage Controller Port Count (0):      2
Storage Controller Bootable (0):        on
SATA (0, 0): G:\VHD_WorkingVersions\Win10_Build_1709\Win10_Build_1709.vdi (UUID: 9a7b047c-3fe1-48ba-810b-23b773eceb3e)
SATA (1, 0): Empty
NIC 1:           MAC: 080027ED4B8F, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: HDA, Codec: STAC9221)
Audio playback:  disabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            enabled
XHCI:            disabled

USB Device Filters:

Index:            0
Active:           yes
Name:             LGE LGMS210 [0318]
VendorId:         1004
ProductId:        61f9
Revision:         0318
Manufacturer:     LGE
Product:          LGMS210
remote:           0
Serial Number:    LGMS2101d884802

Bandwidth groups:  &lt;none&gt;

Shared folders:  

Name: 'VM_Shared_Folder', Host path: 'E:\VM_Shared_Folder' (machine mapping), writable

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Win10_Build_1709\Win10_Build_1709.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    ac_enabled=false

Description:
VS 2017, and SQL 2016, Atlassian SourceSafe, Git Desktop
Guest:

Configured memory balloon size:      0 MB


Name:            Ubuntu_18_04_v0
Groups:          /
Guest OS:        Ubuntu (64-bit)
UUID:            7f69042b-443e-4c2b-b02a-b10192d3c221
Config file:     G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Ubuntu_18_04_v0.vbox
Snapshot folder: G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Snapshots
Log folder:      G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Logs
Hardware UUID:   7f69042b-443e-4c2b-b02a-b10192d3c221
Memory size:     8192MB
Page Fusion:     off
VRAM size:       16MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  4
PAE:             off
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          on
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): Floppy
Boot Device (2): DVD
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             UTC
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: KVM
State:           powered off (since 2018-09-12T02:00:01.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            IDE
Storage Controller Type (0):            PIIX4
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  2
Storage Controller Port Count (0):      2
Storage Controller Bootable (0):        on
Storage Controller Name (1):            SATA
Storage Controller Type (1):            IntelAhci
Storage Controller Instance Number (1): 0
Storage Controller Max Port Count (1):  30
Storage Controller Port Count (1):      1
Storage Controller Bootable (1):        on
IDE (1, 0): C:\Program Files\Oracle\VirtualBox\VBoxGuestAdditions.iso (UUID: 215fcf30-05e2-4314-9a6b-3b487b760496)
SATA (0, 0): G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Ubuntu_18_04_v0.vdi (UUID: 07e60df0-1c09-426a-b62d-c6a59b7ecde2)
NIC 1:           MAC: 080027115ACD, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: AC97, Codec: AD1980)
Audio playback:  disabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            enabled
XHCI:            disabled

USB Device Filters:

&lt;none&gt;

Bandwidth groups:  &lt;none&gt;

Shared folders:  &lt;none&gt;

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Ubuntu_18_04_v0.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    ac_enabled=false

Description:
100 GB Dynamic HD, VDI, ISO: ubuntu-18.04.1-desktop-amd64.iso
Guest:

Configured memory balloon size:      0 MB


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>web_config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>ConnectionString_allows_SharePointServer_ToAccess_SQL-SERVER</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>web_config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>ConnectionString_allows_SharePointServer_ToAccess_SQL-SERVER</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="DB2_CRMConnectionString" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="DB5_FORMsConnectionString" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB5_FORMs;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
      providerName="System.Data.SqlClient" /&gt;

  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;compilation debug="true" targetFramework="4.0" /&gt;

      &lt;customErrors mode="Off"/&gt;

      &lt;authentication mode="Windows"/&gt;
      &lt;authorization&gt;
          &lt;!--&lt;allow users="accessiicarewnc\ggarson" /&gt;--&gt;
          &lt;allow roles="accessiicarewnc\Domain Users" /&gt;
          &lt;deny users="*"/&gt;
          &lt;!--&lt;allow users="*"/&gt;--&gt;
      &lt;/authorization&gt;


  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>web_config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>MyVersionForDEVweb_withConnectionStrings</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>web_config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>MyVersionForDEVweb_withConnectionStrings</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;
&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;
&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="mybookstoreConnectionString1" connectionString="Data Source=HOMETOWER\DEV;Initial Catalog=mybookstore;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="mybookstoreConnectionString" connectionString="Data Source=HOMETOWER\DEV;Initial Catalog=mybookstore;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;
  &lt;system.web&gt;
    &lt;compilation debug="true" strict="false" explicit="true" targetFramework="4.0"/&gt;

    &lt;!-- this is the new part --&gt;
    
    &lt;pages&gt;
      &lt;controls&gt;

        &lt;add
            tagPrefix="gigControls"
            tagName="HeaderWithProperty"
            src="~/controls/HeaderWithProps.ascx"/&gt;        
        
        &lt;add 
            tagPrefix="customControls" 
            tagName="HeaderWithProps" 
            src="~/controls/HeaderWithProps.ascx"/&gt;
        
      &lt;/controls&gt;
    &lt;/pages&gt;
    
    &lt;!-- ==================== --&gt;   
    
    
    &lt;authentication mode="Forms"&gt;
      &lt;forms loginUrl="~/Account/Login.aspx" timeout="2880"/&gt;
    &lt;/authentication&gt;
    &lt;membership&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/membership&gt;
    &lt;profile&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/profile&gt;
    &lt;roleManager enabled="false"&gt;
      &lt;providers&gt;
        &lt;clear/&gt;
        &lt;add name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" connectionStringName="ApplicationServices" applicationName="/"/&gt;
        &lt;add name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider" applicationName="/"/&gt;
      &lt;/providers&gt;
    &lt;/roleManager&gt;
  &lt;/system.web&gt;
  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>web_config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>web.config.comments</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>web_config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>web.config.comments</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>{From: framework 4?}


&lt;?xml version="1.0" encoding="us-ascii"?&gt;
&lt;!-- the root web configuration file --&gt;
&lt;configuration&gt;
    &lt;!--
        Using a location directive with a missing path attribute
        scopes the configuration to the entire machine.  If used in
        conjunction with allowOverride="false", it can be used to
        prevent configuration from being altered on the machine

        Administrators that want to restrict permissions granted to
        web applications should change the default Trust level and ensure
        that overrides are not allowed
    --&gt;
    &lt;system.web&gt;
        &lt;!--
            &lt;anonymousIdentification
                enabled = "false" [true|false]
                cookieName = ".ASPXANONYMOUS" [String]
                cookieTimeout = "100000"  [in Minutes][number]
                cookiePath = "/" [String]
                cookieRequireSSL = "false" [true|false]
                cookieSlidingExpiration = "true" [true|false]
                cookieProtection = "Validation" [None | Validation | Encryption | All]
                cookieless = "UseCookies" [UseUri | UseCookies | AutoDetect | UseDeviceProfile]
                domain = "" [String]
            /&gt;
        --&gt;
        &lt;anonymousIdentification enabled="false" cookieName=".ASPXANONYMOUS" cookieTimeout="100000" cookiePath="/" cookieRequireSSL="false" cookieSlidingExpiration="true" cookieProtection="Validation" cookieless="UseCookies" /&gt;
        &lt;!--
            &lt;authentication
                mode = "Windows" [None | Windows | Passport | Forms]
                &gt;
                &lt;forms
                    name = ".ASPXAUTH" [String]
                    loginUrl = "login.aspx" [String]
                    defaultUrl = "default.aspx" [String]
                    protection = "All" [All | None | Encryption | Validation]
                    timeout = "30"  [in Minutes][number]
                    path = "/" [String]
                    requireSSL = "false" [true|false]
                    slidingExpiration = "true" [true|false]
                    enableCrossAppRedirects = "false" [true|false]
                    cookieless = "UseDeviceProfile" [UseUri | UseCookies | AutoDetect | UseDeviceProfile]
                    domain = "" [String]
                    &gt;
                    &lt;credentials
                        passwordFormat = "SHA1" [Clear | SHA1 | MD5]
                        &gt;
                        &lt;user
                            name = "" [String, Required, Collection Key]
                            password = "" [String, Required]
                        /&gt;

                    &lt;/credentials&gt;
                &lt;/forms&gt;
                &lt;passport
                    redirectUrl = "internal" [String]
                /&gt;
            &lt;/authentication&gt;
        --&gt;
        &lt;authentication mode="Windows"&gt;
            &lt;forms name=".ASPXAUTH" loginUrl="login.aspx" defaultUrl="default.aspx" protection="All" timeout="30" path="/" requireSSL="false" slidingExpiration="true" cookieless="UseDeviceProfile" enableCrossAppRedirects="false"&gt;
                &lt;credentials passwordFormat="SHA1" /&gt;
            &lt;/forms&gt;
            &lt;passport redirectUrl="internal" /&gt;
        &lt;/authentication&gt;
        &lt;!--
            &lt;customErrors
                defaultRedirect = "" [String]
                redirectMode = "ResponseRedirect" [ResponseRedirect | ResponseRewrite]
                mode = "RemoteOnly" [RemoteOnly | On | Off]
                &gt;
                &lt;error
                    statusCode = "" [number, Required, Collection Key]
                    redirect = "" [String, Required]
                /&gt;

            &lt;/customErrors&gt;
        --&gt;
        &lt;customErrors redirectMode="ResponseRedirect" mode="RemoteOnly" /&gt;
        &lt;!--
            &lt;deviceFilters
                &gt;
                &lt;filter
                    name = "" [String, Required, Collection Key]
                    type = "" 
                    method = "" [String]
                    compare = "" [String]
                    argument = "" [String]
                /&gt;

            &lt;/deviceFilters&gt;
        --&gt;
        &lt;deviceFilters /&gt;
        &lt;!--
            &lt;globalization
                requestEncoding = "utf-8" 
                responseEncoding = "utf-8" 
                responseHeaderEncoding = "utf-8" 
                fileEncoding = "" 
                culture = "" [String]
                uiCulture = "" [String]
                enableClientBasedCulture = "false" [true|false]
                resourceProviderFactoryType = "" [String]
                enableBestFitResponseEncoding = "false" [true|false]
            /&gt;
        --&gt;
        &lt;globalization requestEncoding="utf-8" responseEncoding="utf-8" fileEncoding="" culture="" uiCulture="" enableClientBasedCulture="false" responseHeaderEncoding="utf-8" resourceProviderFactoryType="" enableBestFitResponseEncoding="false" /&gt;
        &lt;!--
            &lt;hostingEnvironment
                shutdownTimeout = "30"  [in Seconds][number]
                idleTimeout = "Infinite"  [in Minutes][number]
                shadowCopyBinAssemblies = "true" [true|false]
            /&gt;
        --&gt;
        &lt;hostingEnvironment idleTimeout="Infinite" shutdownTimeout="30" shadowCopyBinAssemblies="true" /&gt;
        &lt;!--
            &lt;httpCookies
                httpOnlyCookies = "false" [true|false]
                requireSSL = "false" [true|false]
                domain = "" [String]
            /&gt;
        --&gt;
        &lt;httpCookies httpOnlyCookies="false" requireSSL="false" domain="" /&gt;
        &lt;!--
            &lt;httpRuntime
                executionTimeout = "110"  [in Seconds][number]
                maxRequestLength = "4096" [number]
                requestLengthDiskThreshold = "80" [number]
                useFullyQualifiedRedirectUrl = "false" [true|false]
                minFreeThreads = "8" [number]
                minLocalRequestFreeThreads = "4" [number]
                appRequestQueueLimit = "5000" [number]
                enableKernelOutputCache = "true" [true|false]
                enableVersionHeader = "true" [true|false]
                apartmentThreading = "false" [true|false]
                requireRootedSaveAsPath = "true" [true|false]
                enable = "true" [true|false]
                sendCacheControlHeader = "true" [true|false]
                shutdownTimeout = "90"  [in Seconds][number]
                delayNotificationTimeout = "5"  [in Seconds][number]
                waitChangeNotification = "0" [number]
                maxWaitChangeNotification = "0" [number]
                enableHeaderChecking = "true" [true|false]
            /&gt;
        --&gt;
        &lt;httpRuntime executionTimeout="110" maxRequestLength="4096" requestLengthDiskThreshold="80" useFullyQualifiedRedirectUrl="false" minFreeThreads="8" minLocalRequestFreeThreads="4" appRequestQueueLimit="5000" enableKernelOutputCache="true" enableVersionHeader="true" requireRootedSaveAsPath="true" enable="true" shutdownTimeout="90" delayNotificationTimeout="5" waitChangeNotification="0" maxWaitChangeNotification="0" enableHeaderChecking="true" sendCacheControlHeader="true" apartmentThreading="false" /&gt;
        &lt;!--
            &lt;identity
                impersonate = "false" [true|false]
                userName = "" [String]
                password = "" [String]
            /&gt;
        --&gt;
        &lt;identity impersonate="false" userName="" password="" /&gt;
        &lt;!--
            &lt;machineKey
                validationKey = "AutoGenerate,IsolateApps" [String]
                decryptionKey = "AutoGenerate,IsolateApps" [String]
                decryption = "Auto" [AUTO | DES | 3DES | AES]
                validation = "SHA1" [MD5 | SHA1 | 3DES | AES]
            /&gt;
        --&gt;
        &lt;machineKey validationKey="AutoGenerate,IsolateApps" decryptionKey="AutoGenerate,IsolateApps" validation="SHA1" decryption="Auto" compatibilityMode="Framework20SP1" /&gt;
        &lt;!--
            &lt;sessionPageState
                historySize = "9" [number]
            /&gt;
        --&gt;
        &lt;sessionPageState historySize="9" /&gt;
        &lt;!--
            &lt;sessionState
                mode = "InProc" [Off | InProc | StateServer | SQLServer | Custom]
                stateConnectionString = "tcpip=loopback:42424" [String]
                stateNetworkTimeout = "10"  [in Seconds][number]
                sqlConnectionString = "data source=localhost;Integrated Security=SSPI" [String]
                sqlCommandTimeout = "30"  [in Seconds][number]
                customProvider = "" [String]
                cookieless = "" [UseUri | UseCookies | AutoDetect | UseDeviceProfile]
                cookieName = "ASP.NET_SessionId" [String]
                timeout = "20"  [in Minutes][number]
                allowCustomSqlDatabase = "false" [true|false]
                regenerateExpiredSessionId = "true" [true|false]
                partitionResolverType = "" [String]
                useHostingIdentity = "true" [true|false]
                sessionIDManagerType = "" [String]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/sessionState&gt;
        --&gt;
        &lt;sessionState mode="InProc" stateConnectionString="tcpip=loopback:42424" stateNetworkTimeout="10" sqlConnectionString="data source=localhost;Integrated Security=SSPI" sqlCommandTimeout="30" customProvider="" cookieless="UseCookies" cookieName="ASP.NET_SessionId" timeout="20" allowCustomSqlDatabase="false" regenerateExpiredSessionId="true" partitionResolverType="" useHostingIdentity="true" sessionIDManagerType=""&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
            &lt;/providers&gt;
        &lt;/sessionState&gt;
        &lt;!--
            &lt;trace
                enabled = "false" [true|false]
                mostRecent = "false" [true|false]
                localOnly = "true" [true|false]
                pageOutput = "false" [true|false]
                requestLimit = "10" [number]
                traceMode = "SortByTime" [SortByTime | SortByCategory]
                writeToDiagnosticsTrace = "false" [true|false]
            /&gt;
        --&gt;
        &lt;trace enabled="false" localOnly="true" mostRecent="false" pageOutput="false" requestLimit="10" traceMode="SortByTime" writeToDiagnosticsTrace="false" /&gt;
        &lt;!--
            &lt;webServices
                &gt;
                &lt;conformanceWarnings&gt;
                    &lt;add
                        name = "None" [None | BasicProfile1_1, Collection Key]
                    /&gt;
                &lt;/conformanceWarnings&gt;

                &lt;protocols&gt;
                    &lt;add
                        name = "Unknown" [Unknown | HttpSoap | HttpGet | HttpPost | Documentation | HttpPostLocalhost | HttpSoap12 | AnyHttpSoap, Collection Key]
                    /&gt;
                &lt;/protocols&gt;

                &lt;soapEnvelopeProcessing
                    readTimeout = "2147483647" [number]
                    strict = "false" [true|false]
                /&gt;
                &lt;DiagnosticsElement
                    suppressReturningExceptions = "false" [true|false]
                /&gt;
                &lt;serviceDescriptionFormatExtensionTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/serviceDescriptionFormatExtensionTypes&gt;

                &lt;soapExtensionImporterTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapExtensionImporterTypes&gt;

                &lt;soapExtensionReflectorTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapExtensionReflectorTypes&gt;

                &lt;soapExtensionTypes&gt;
                    &lt;add
                        group = "Low" [High | Low, Collection Key]
                        priority = "0" [number, Collection Key]
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapExtensionTypes&gt;

                &lt;soapServerProtocolFactory
                    type = "" [Collection Key]
                /&gt;
                &lt;soapTransportImporterTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapTransportImporterTypes&gt;

                &lt;wsdlHelpGenerator
                    href = "" [String, Required]
                /&gt;
            &lt;/webServices&gt;
        --&gt;
        &lt;webServices&gt;
            &lt;conformanceWarnings&gt;
                &lt;clear /&gt;
                &lt;add name="BasicProfile1_1" /&gt;
            &lt;/conformanceWarnings&gt;
            &lt;protocols&gt;
                &lt;clear /&gt;
                &lt;add name="HttpSoap12" /&gt;
                &lt;add name="HttpSoap" /&gt;
                &lt;add name="HttpPostLocalhost" /&gt;
                &lt;add name="Documentation" /&gt;
            &lt;/protocols&gt;
            &lt;serviceDescriptionFormatExtensionTypes&gt;
                &lt;clear /&gt;
            &lt;/serviceDescriptionFormatExtensionTypes&gt;
            &lt;soapEnvelopeProcessing readTimeout="Infinite" strict="false" /&gt;
            &lt;soapExtensionImporterTypes&gt;
                &lt;clear /&gt;
            &lt;/soapExtensionImporterTypes&gt;
            &lt;soapExtensionReflectorTypes&gt;
                &lt;clear /&gt;
            &lt;/soapExtensionReflectorTypes&gt;
            &lt;soapExtensionTypes&gt;
                &lt;clear /&gt;
            &lt;/soapExtensionTypes&gt;
            &lt;soapTransportImporterTypes&gt;
                &lt;clear /&gt;
            &lt;/soapTransportImporterTypes&gt;
            &lt;soapServerProtocolFactory type="System.Web.Services.Protocols.SoapServerProtocolFactory, System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;diagnostics suppressReturningExceptions="false" /&gt;
        &lt;/webServices&gt;
        &lt;!--
            &lt;xhtmlConformance
                mode = "Transitional" [Transitional | Legacy | Strict]
            /&gt;
        --&gt;
        &lt;xhtmlConformance mode="Transitional" /&gt;
        &lt;!--
            &lt;authorization
                &gt;
                &lt;allow
                    verbs = "" 
                    users = "" 
                    roles = "" 
                /&gt;
                &lt;deny
                    verbs = "" 
                    users = "" 
                    roles = "" 
                /&gt;

            &lt;/authorization&gt;
        --&gt;
        &lt;authorization&gt;
            &lt;allow users="*" /&gt;
        &lt;/authorization&gt;
        &lt;!--
            &lt;browserCaps
            /&gt;
        --&gt;
        &lt;browserCaps userAgentCacheKeyLength="64"&gt;
            &lt;result type="System.Web.Mobile.MobileCapabilities, System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
        &lt;/browserCaps&gt;
        &lt;!--
            &lt;clientTarget
                &gt;
                &lt;add
                    alias = "" [String, Required, Collection Key]
                    userAgent = "" [String, Required]
                /&gt;

            &lt;/clientTarget&gt;
        --&gt;
        &lt;clientTarget&gt;
            &lt;clear /&gt;
            &lt;add alias="ie5" userAgent="Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)" /&gt;
            &lt;add alias="ie4" userAgent="Mozilla/4.0 (compatible; MSIE 4.0; Windows NT 4.0)" /&gt;
            &lt;add alias="uplevel" userAgent="Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.1)" /&gt;
            &lt;add alias="downlevel" userAgent="Generic Downlevel" /&gt;
        &lt;/clientTarget&gt;
        &lt;!--
            &lt;compilation
                tempDirectory = "" [String]
                debug = "false" [true|false]
                strict = "false" [true|false]
                explicit = "true" [true|false]
                batch = "true" [true|false]
                urlLinePragmas = "false" [true|false]
                batchTimeout = "900"  [in Seconds][number]
                maxBatchSize = "1000" [number]
                maxBatchGeneratedFileSize = "1000" [number]
                numRecompilesBeforeAppRestart = "15" [number]
                defaultLanguage = "vb" [String]
                assemblyPostProcessorType = "" [String]
                &gt;
                &lt;assemblies&gt;
                    &lt;add
                        assembly = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/assemblies&gt;

                &lt;buildProviders&gt;
                    &lt;add
                        extension = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/buildProviders&gt;

                &lt;expressionBuilders&gt;
                    &lt;add
                        expressionPrefix = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/expressionBuilders&gt;

                &lt;codeSubDirectories&gt;
                    &lt;add
                        directoryName = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/codeSubDirectories&gt;

            &lt;/compilation&gt;
        --&gt;
        &lt;compilation tempDirectory="" debug="false" strict="false" explicit="true" batch="true" batchTimeout="900" maxBatchSize="1000" maxBatchGeneratedFileSize="1000" numRecompilesBeforeAppRestart="15" defaultLanguage="vb" urlLinePragmas="false" assemblyPostProcessorType=""&gt;
            &lt;assemblies&gt;
                &lt;clear /&gt;
                &lt;add assembly="mscorlib" /&gt;
                &lt;add assembly="System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
                &lt;add assembly="System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
                &lt;add assembly="System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
                &lt;add assembly="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="*" /&gt;
            &lt;/assemblies&gt;
            &lt;buildProviders&gt;
                &lt;clear /&gt;
                &lt;add extension=".aspx" type="System.Web.Compilation.PageBuildProvider" /&gt;
                &lt;add extension=".ascx" type="System.Web.Compilation.UserControlBuildProvider" /&gt;
                &lt;add extension=".master" type="System.Web.Compilation.MasterPageBuildProvider" /&gt;
                &lt;add extension=".asmx" type="System.Web.Compilation.WebServiceBuildProvider" /&gt;
                &lt;add extension=".ashx" type="System.Web.Compilation.WebHandlerBuildProvider" /&gt;
                &lt;add extension=".soap" type="System.Web.Compilation.WebServiceBuildProvider" /&gt;
                &lt;add extension=".resx" type="System.Web.Compilation.ResXBuildProvider" /&gt;
                &lt;add extension=".resources" type="System.Web.Compilation.ResourcesBuildProvider" /&gt;
                &lt;add extension=".wsdl" type="System.Web.Compilation.WsdlBuildProvider" /&gt;
                &lt;add extension=".xsd" type="System.Web.Compilation.XsdBuildProvider" /&gt;
                &lt;add extension=".js" type="System.Web.Compilation.ForceCopyBuildProvider" /&gt;
                &lt;add extension=".lic" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
                &lt;add extension=".licx" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
                &lt;add extension=".exclude" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
                &lt;add extension=".refresh" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
            &lt;/buildProviders&gt;
            &lt;expressionBuilders&gt;
                &lt;clear /&gt;
                &lt;add expressionPrefix="Resources" type="System.Web.Compilation.ResourceExpressionBuilder" /&gt;
                &lt;add expressionPrefix="ConnectionStrings" type="System.Web.Compilation.ConnectionStringsExpressionBuilder" /&gt;
                &lt;add expressionPrefix="AppSettings" type="System.Web.Compilation.AppSettingsExpressionBuilder" /&gt;
            &lt;/expressionBuilders&gt;
        &lt;/compilation&gt;
        &lt;!--
            &lt;healthMonitoring
                heartbeatInterval = "0"  [in Seconds][number]
                enabled = "true" [true|false]
                &gt;
                &lt;bufferModes&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        maxBufferSize = "2147483647" [number, Required]
                        maxFlushSize = "2147483647" [number, Required]
                        urgentFlushThreshold = "2147483647" [number, Required]
                        regularFlushInterval = "00:00:01" [HH:MM:SS, Required]
                        urgentFlushInterval = "00:00:00" [HH:MM:SS, Required]
                        maxBufferThreads = "1" [number]
                    /&gt;
                &lt;/bufferModes&gt;

                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

                &lt;profiles&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        minInstances = "1" [number]
                        maxLimit = "2147483647" [number]
                        minInterval = "00:00:00" [HH:MM:SS]
                        custom = "" [String]
                    /&gt;
                &lt;/profiles&gt;

                &lt;rules&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        eventName = "" [String, Required]
                        custom = "" [String]
                        profile = "" [String]
                        provider = "" [String]
                        minInstances = "1" [number]
                        maxLimit = "2147483647" [number]
                        minInterval = "00:00:00" [HH:MM:SS]
                    /&gt;
                &lt;/rules&gt;

                &lt;eventMappings&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                        startEventCode = "0" [number]
                        endEventCode = "2147483647" [number]
                    /&gt;
                &lt;/eventMappings&gt;

            &lt;/healthMonitoring&gt;
        --&gt;
        &lt;healthMonitoring heartbeatInterval="0" enabled="true"&gt;
            &lt;bufferModes&gt;
                &lt;clear /&gt;
                &lt;add name="Critical Notification" maxBufferSize="100" maxFlushSize="20" urgentFlushThreshold="1" regularFlushInterval="Infinite" urgentFlushInterval="00:01:00" maxBufferThreads="1" /&gt;
                &lt;add name="Notification" maxBufferSize="300" maxFlushSize="20" urgentFlushThreshold="1" regularFlushInterval="Infinite" urgentFlushInterval="00:01:00" maxBufferThreads="1" /&gt;
                &lt;add name="Analysis" maxBufferSize="1000" maxFlushSize="100" urgentFlushThreshold="100" regularFlushInterval="00:05:00" urgentFlushInterval="00:01:00" maxBufferThreads="1" /&gt;
                &lt;add name="Logging" maxBufferSize="1000" maxFlushSize="200" urgentFlushThreshold="800" regularFlushInterval="00:30:00" urgentFlushInterval="00:05:00" maxBufferThreads="1" /&gt;
            &lt;/bufferModes&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add name="EventLogProvider" type="System.Web.Management.EventLogWebEventProvider,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add connectionStringName="LocalSqlServer" maxEventDetailsLength="1073741823" buffer="false" bufferMode="Notification" name="SqlWebEventProvider" type="System.Web.Management.SqlWebEventProvider,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add name="WmiWebEventProvider" type="System.Web.Management.WmiWebEventProvider,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
            &lt;profiles&gt;
                &lt;clear /&gt;
                &lt;add name="Default" minInstances="1" maxLimit="Infinite" minInterval="00:01:00" custom="" /&gt;
                &lt;add name="Critical" minInstances="1" maxLimit="Infinite" minInterval="00:00:00" custom="" /&gt;
            &lt;/profiles&gt;
            &lt;rules&gt;
                &lt;clear /&gt;
                &lt;add name="All Errors Default" eventName="All Errors" provider="EventLogProvider" profile="Default" minInstances="1" maxLimit="Infinite" minInterval="00:01:00" custom="" /&gt;
                &lt;add name="Failure Audits Default" eventName="Failure Audits" provider="EventLogProvider" profile="Default" minInstances="1" maxLimit="Infinite" minInterval="00:01:00" custom="" /&gt;
            &lt;/rules&gt;
            &lt;eventMappings&gt;
                &lt;clear /&gt;
                &lt;add name="All Events" type="System.Web.Management.WebBaseEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Heartbeats" type="System.Web.Management.WebHeartbeatEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Application Lifetime Events" type="System.Web.Management.WebApplicationLifetimeEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Request Processing Events" type="System.Web.Management.WebRequestEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="All Errors" type="System.Web.Management.WebBaseErrorEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Infrastructure Errors" type="System.Web.Management.WebErrorEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Request Processing Errors" type="System.Web.Management.WebRequestErrorEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="All Audits" type="System.Web.Management.WebAuditEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Failure Audits" type="System.Web.Management.WebFailureAuditEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Success Audits" type="System.Web.Management.WebSuccessAuditEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
            &lt;/eventMappings&gt;
        &lt;/healthMonitoring&gt;
        &lt;!--
            &lt;httpHandlers
                &gt;
                &lt;add
                    path = "" [String, Required, Collection Key]
                    verb = "" [String, Required, Collection Key]
                    type = "" [String, Required]
                    validate = "true" [true|false]
                /&gt;

            &lt;/httpHandlers&gt;
        --&gt;
        &lt;httpHandlers&gt;
            &lt;clear /&gt;
            &lt;add path="trace.axd" verb="*" type="System.Web.Handlers.TraceHandler" validate="true" /&gt;
            &lt;add path="WebResource.axd" verb="GET" type="System.Web.Handlers.AssemblyResourceLoader" validate="true" /&gt;
            &lt;add path="*.axd" verb="*" type="System.Web.HttpNotFoundHandler" validate="true" /&gt;
            &lt;add path="*.aspx" verb="*" type="System.Web.UI.PageHandlerFactory" validate="true" /&gt;
            &lt;add path="*.ashx" verb="*" type="System.Web.UI.SimpleHandlerFactory" validate="true" /&gt;
            &lt;add path="*.asmx" verb="*" type="System.Web.Services.Protocols.WebServiceHandlerFactory, System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" validate="false" /&gt;
            &lt;add path="*.rem" verb="*" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" validate="false" /&gt;
            &lt;add path="*.soap" verb="*" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" validate="false" /&gt;
            &lt;add path="*.asax" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ascx" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.master" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.skin" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.browser" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sitemap" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.dll.config" verb="GET,HEAD" type="System.Web.StaticFileHandler" validate="true" /&gt;
            &lt;add path="*.exe.config" verb="GET,HEAD" type="System.Web.StaticFileHandler" validate="true" /&gt;
            &lt;add path="*.config" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.cs" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.csproj" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.vb" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.vbproj" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.webinfo" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.licx" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.resx" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.resources" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.mdb" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.vjsproj" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.java" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.jsl" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ldb" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ad" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.dd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ldd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.cd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.adprototype" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.lddprototype" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sdm" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sdmDocument" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.mdf" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ldf" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.exclude" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.refresh" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*" verb="GET,HEAD,POST" type="System.Web.DefaultHttpHandler" validate="true" /&gt;
            &lt;add path="*" verb="*" type="System.Web.HttpMethodNotAllowedHandler" validate="true" /&gt;
        &lt;/httpHandlers&gt;
        &lt;!--
            &lt;httpModules
                &gt;
                &lt;add
                    name = "" [String, Required, Collection Key]
                    type = "" [String, Required]
                /&gt;

            &lt;/httpModules&gt;
        --&gt;
        &lt;httpModules&gt;
            &lt;clear /&gt;
            &lt;add name="OutputCache" type="System.Web.Caching.OutputCacheModule" /&gt;
            &lt;add name="Session" type="System.Web.SessionState.SessionStateModule" /&gt;
            &lt;add name="WindowsAuthentication" type="System.Web.Security.WindowsAuthenticationModule" /&gt;
            &lt;add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule" /&gt;
            &lt;add name="PassportAuthentication" type="System.Web.Security.PassportAuthenticationModule" /&gt;
            &lt;add name="RoleManager" type="System.Web.Security.RoleManagerModule" /&gt;
            &lt;add name="UrlAuthorization" type="System.Web.Security.UrlAuthorizationModule" /&gt;
            &lt;add name="FileAuthorization" type="System.Web.Security.FileAuthorizationModule" /&gt;
            &lt;add name="AnonymousIdentification" type="System.Web.Security.AnonymousIdentificationModule" /&gt;
            &lt;add name="Profile" type="System.Web.Profile.ProfileModule" /&gt;
            &lt;add name="ErrorHandlerModule" type="System.Web.Mobile.ErrorHandlerModule, System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
        &lt;/httpModules&gt;
        &lt;!--
            &lt;mobileControls
                sessionStateHistorySize = "6" [number]
                cookielessDataDictionaryType = "System.Web.Mobile.CookielessData" 
                allowCustomAttributes = "false" [true|false]
                &gt;
                &lt;device
                &lt;
                    name = "" [String, Required, Collection Key]
                    inheritsFrom = "" [String]
                    predicateClass = "" 
                    predicateMethod = "" [String]
                    pageAdapter = "" 
                    &gt;
                    &lt;control
                        name = "" [String, Required, Collection Key]
                        adapter = "" [Required]
                    /&gt;

                &lt;/&gt;/&gt;

            &lt;/mobileControls&gt;
        --&gt;
        &lt;mobileControls sessionStateHistorySize="6" cookielessDataDictionaryType="System.Web.Mobile.CookielessData" allowCustomAttributes="false"&gt;
            &lt;device name="XhtmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Panel" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPanelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Label" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlLabelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.LiteralText" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlLiteralTextAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlLinkAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.List" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ObjectList" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlObjectListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ValidationSummary" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlValidationSummaryAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextView" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlTextViewAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.MobileControl" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlControlAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.BaseValidator" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlValidatorAdapter" /&gt;
            &lt;/device&gt;
            &lt;device name="HtmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.HtmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.HtmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Panel" adapter="System.Web.UI.MobileControls.Adapters.HtmlPanelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.HtmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.HtmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Label" adapter="System.Web.UI.MobileControls.Adapters.HtmlLabelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.LiteralText" adapter="System.Web.UI.MobileControls.Adapters.HtmlLiteralTextAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.HtmlLinkAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.HtmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.HtmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.List" adapter="System.Web.UI.MobileControls.Adapters.HtmlListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.HtmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ObjectList" adapter="System.Web.UI.MobileControls.Adapters.HtmlObjectListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.HtmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.BaseValidator" adapter="System.Web.UI.MobileControls.Adapters.HtmlValidatorAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ValidationSummary" adapter="System.Web.UI.MobileControls.Adapters.HtmlValidationSummaryAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.HtmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextView" adapter="System.Web.UI.MobileControls.Adapters.HtmlTextViewAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.MobileControl" adapter="System.Web.UI.MobileControls.Adapters.HtmlControlAdapter" /&gt;
            &lt;/device&gt;
            &lt;device name="UpWmlDeviceAdapters" inheritsFrom="WmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.UpWmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.UpWmlPageAdapter" /&gt;
            &lt;device name="WmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.WmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.WmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Panel" adapter="System.Web.UI.MobileControls.Adapters.WmlPanelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.WmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.WmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Label" adapter="System.Web.UI.MobileControls.Adapters.WmlLabelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.LiteralText" adapter="System.Web.UI.MobileControls.Adapters.WmlLiteralTextAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.WmlLinkAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.WmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.WmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.List" adapter="System.Web.UI.MobileControls.Adapters.WmlListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.WmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ObjectList" adapter="System.Web.UI.MobileControls.Adapters.WmlObjectListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.WmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.BaseValidator" adapter="System.Web.UI.MobileControls.Adapters.WmlValidatorAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ValidationSummary" adapter="System.Web.UI.MobileControls.Adapters.WmlValidationSummaryAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.WmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextView" adapter="System.Web.UI.MobileControls.Adapters.WmlTextViewAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.MobileControl" adapter="System.Web.UI.MobileControls.Adapters.WmlControlAdapter" /&gt;
            &lt;/device&gt;
            &lt;device name="ChtmlDeviceAdapters" inheritsFrom="HtmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.ChtmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.ChtmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.ChtmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.ChtmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.ChtmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.ChtmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.ChtmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.ChtmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.ChtmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.ChtmlLinkAdapter" /&gt;
            &lt;/device&gt;
        &lt;/mobileControls&gt;
        &lt;!--
            &lt;pages
                buffer = "true" [true|false]
                enableSessionState = "true" [False | ReadOnly | True]
                enableViewState = "true" [true|false]
                enableViewStateMac = "true" [true|false]
                enableEventValidation = "true" [true|false]
                smartNavigation = "false" [true|false]
                autoEventWireup = "true" [true|false]
                maintainScrollPositionOnPostBack = "false" [true|false]
                pageBaseType = "System.Web.UI.Page" [String]
                userControlBaseType = "System.Web.UI.UserControl" [String]
                pageParserFilterType = "" [String]
                validateRequest = "true" [true|false]
                masterPageFile = "" [String]
                theme = "" [String]
                styleSheetTheme = "" [String]
                maxPageStateFieldLength = "-1" [number]
                compilationMode = "Always" [Auto | Never | Always]
                viewStateEncryptionMode = "Auto" [Auto | Always | Never]
                asyncTimeout = "45"  [in Seconds][number]
                renderAllHiddenFieldsAtTopOfForm = "true" [true|false]
                &gt;
                &lt;namespaces
                    autoImportVBNamespace = "true" [true|false]
                    &gt;
                    &lt;add
                        namespace = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/namespaces&gt;

                &lt;controls&gt;
                    &lt;add
                        tagPrefix = "/" [String, Required]
                        tagName = "" [String]
                        namespace = "" [String]
                        assembly = "" [String]
                        src = "" [String]
                    /&gt;
                &lt;/controls&gt;

                &lt;tagMapping&gt;
                    &lt;add
                        mappedTagType = "" [String]
                        tagType = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/tagMapping&gt;

            &lt;/pages&gt;
        --&gt;
        &lt;pages buffer="true" enableSessionState="true" enableViewState="true" enableViewStateMac="true" enableEventValidation="true" smartNavigation="false" autoEventWireup="true" pageBaseType="System.Web.UI.Page" userControlBaseType="System.Web.UI.UserControl" validateRequest="true" masterPageFile="" theme="" styleSheetTheme="" maxPageStateFieldLength="-1" compilationMode="Always" pageParserFilterType="" viewStateEncryptionMode="Auto" maintainScrollPositionOnPostBack="false" asyncTimeout="45" renderAllHiddenFieldsAtTopOfForm="true"&gt;
            &lt;namespaces autoImportVBNamespace="true"&gt;
                &lt;clear /&gt;
                &lt;add namespace="System" /&gt;
                &lt;add namespace="System.Collections" /&gt;
                &lt;add namespace="System.Collections.Specialized" /&gt;
                &lt;add namespace="System.Configuration" /&gt;
                &lt;add namespace="System.Text" /&gt;
                &lt;add namespace="System.Text.RegularExpressions" /&gt;
                &lt;add namespace="System.Web" /&gt;
                &lt;add namespace="System.Web.Caching" /&gt;
                &lt;add namespace="System.Web.SessionState" /&gt;
                &lt;add namespace="System.Web.Security" /&gt;
                &lt;add namespace="System.Web.Profile" /&gt;
                &lt;add namespace="System.Web.UI" /&gt;
                &lt;add namespace="System.Web.UI.WebControls" /&gt;
                &lt;add namespace="System.Web.UI.WebControls.WebParts" /&gt;
                &lt;add namespace="System.Web.UI.HtmlControls" /&gt;
            &lt;/namespaces&gt;
            &lt;controls&gt;
                &lt;add tagPrefix="asp" tagName="" namespace="System.Web.UI.WebControls.WebParts" assembly="System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" src="" /&gt;
            &lt;/controls&gt;
            &lt;tagMapping&gt;
                &lt;clear /&gt;
            &lt;/tagMapping&gt;
        &lt;/pages&gt;
        &lt;!--
            &lt;protocols
                &gt;
                &lt;add
                    name = "" [String, Required, Collection Key]
                    processHandlerType = "" [String]
                    appDomainHandlerType = "" [String]
                    validate = "false" [true|false]
                /&gt;

            &lt;/protocols&gt;
        --&gt;
        &lt;protocols&gt;
            &lt;clear /&gt;
        &lt;/protocols&gt;
        &lt;!--
            &lt;siteMap
                defaultProvider = "AspNetXmlSiteMapProvider" [String]
                enabled = "true" [true|false]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/siteMap&gt;
        --&gt;
        &lt;siteMap defaultProvider="AspNetXmlSiteMapProvider" enabled="true"&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add siteMapFile="web.sitemap" name="AspNetXmlSiteMapProvider" type="System.Web.XmlSiteMapProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
        &lt;/siteMap&gt;
        &lt;!--
            &lt;urlMappings
                enabled = "true" [true|false]
                &gt;
                &lt;add
                    url = "" [String, Required, Collection Key]
                    mappedUrl = "" [String, Required]
                /&gt;

            &lt;/urlMappings&gt;
        --&gt;
        &lt;urlMappings enabled="true"&gt;
            &lt;clear /&gt;
        &lt;/urlMappings&gt;
        &lt;!--
            &lt;webControls
                clientScriptsLocation = "/aspnet_client/{0}/{1}/" [String, Required]
            /&gt;
        --&gt;
        &lt;webControls clientScriptsLocation="/aspnet_client/{0}/{1}/" /&gt;
        &lt;!--
            &lt;webParts
                enableExport = "false" [true|false]
                &gt;
                &lt;personalization
                    defaultProvider = "AspNetSqlPersonalizationProvider" [String]
                    &gt;
                    &lt;providers&gt;
                        &lt;add
                            name = "" [String, Required, Collection Key]
                            type = "" [String, Required]
                        /&gt;
                    &lt;/providers&gt;

                &lt;/personalization&gt;
                &lt;transformers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/transformers&gt;

            &lt;/webParts&gt;
        --&gt;
        &lt;webParts enableExport="false"&gt;
            &lt;personalization defaultProvider="AspNetSqlPersonalizationProvider"&gt;
                &lt;providers&gt;
                    &lt;clear /&gt;
                    &lt;add connectionStringName="LocalSqlServer" name="AspNetSqlPersonalizationProvider" type="System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;/providers&gt;
                &lt;authorization&gt;
                    &lt;deny verbs="enterSharedScope" users="*" /&gt;
                    &lt;allow verbs="modifyState" users="*" /&gt;
                &lt;/authorization&gt;
            &lt;/personalization&gt;
            &lt;transformers&gt;
                &lt;clear /&gt;
                &lt;add name="RowToFieldTransformer" type="System.Web.UI.WebControls.WebParts.RowToFieldTransformer" /&gt;
                &lt;add name="RowToParametersTransformer" type="System.Web.UI.WebControls.WebParts.RowToParametersTransformer" /&gt;
            &lt;/transformers&gt;
        &lt;/webParts&gt;
        &lt;caching&gt;
            &lt;!--
                &lt;cache
                    disableMemoryCollection = "false" [true|false]
                    disableExpiration = "false" [true|false]
                    privateBytesLimit = "0" [number]
                    percentagePhysicalMemoryUsedLimit = "0" [number]
                    privateBytesPollTime = "00:02:00" [HH:MM:SS]
                /&gt;
            --&gt;
            &lt;cache disableMemoryCollection="false" disableExpiration="false" privateBytesLimit="0" percentagePhysicalMemoryUsedLimit="0" privateBytesPollTime="00:02:00" /&gt;
            &lt;!--
                &lt;outputCache
                    enableOutputCache = "true" [true|false]
                    enableFragmentCache = "true" [true|false]
                    sendCacheControlHeader = "true" [true|false]
                    omitVaryStar = "false" [true|false]
                    enableKernelCacheForVaryByStar = "false" [true|false]
                /&gt;
            --&gt;
            &lt;outputCache enableOutputCache="true" enableFragmentCache="true" sendCacheControlHeader="true" omitVaryStar="false" enableKernelCacheForVaryByStar="false" /&gt;
            &lt;!--
                &lt;outputCacheSettings
                    &gt;
                    &lt;outputCacheProfiles&gt;
                        &lt;add
                            name = "" [String, Required, Collection Key]
                            enabled = "true" [true|false]
                            duration = "-1" [number]
                            location = "" [Any | Client | Downstream | Server | None | ServerAndClient]
                            sqlDependency = "" [String]
                            varyByCustom = "" [String]
                            varyByControl = "" [String]
                            varyByContentEncoding = "" [String]
                            varyByHeader = "" [String]
                            varyByParam = "" [String]
                            noStore = "false" [true|false]
                        /&gt;
                    &lt;/outputCacheProfiles&gt;

                &lt;/outputCacheSettings&gt;
            --&gt;
            &lt;outputCacheSettings&gt;
                &lt;outputCacheProfiles&gt;
                    &lt;clear /&gt;
                &lt;/outputCacheProfiles&gt;
            &lt;/outputCacheSettings&gt;
            &lt;!--
                &lt;sqlCacheDependency
                    enabled = "true" [true|false]
                    pollTime = "60000" [number]
                    &gt;
                    &lt;databases&gt;
                        &lt;add
                            name = "" [String, Required, Collection Key]
                            connectionStringName = "" [String, Required]
                            pollTime = "60000" [number]
                        /&gt;
                    &lt;/databases&gt;

                &lt;/sqlCacheDependency&gt;
            --&gt;
            &lt;sqlCacheDependency enabled="true" pollTime="60000"&gt;
                &lt;databases&gt;
                    &lt;clear /&gt;
                &lt;/databases&gt;
            &lt;/sqlCacheDependency&gt;
        &lt;/caching&gt;
        &lt;!--
            &lt;securityPolicy
                &gt;
                &lt;trustLevel
                    name = "Full" [String, Required, Collection Key]
                    policyFile = "internal" [String, Required]
                /&gt;

            &lt;/securityPolicy&gt;
        --&gt;
        &lt;securityPolicy&gt;
            &lt;trustLevel name="Full" policyFile="internal" /&gt;
            &lt;trustLevel name="High" policyFile="web_hightrust.config" /&gt;
            &lt;trustLevel name="Medium" policyFile="web_mediumtrust.config" /&gt;
            &lt;trustLevel name="Low" policyFile="web_lowtrust.config" /&gt;
            &lt;trustLevel name="Minimal" policyFile="web_minimaltrust.config" /&gt;
        &lt;/securityPolicy&gt;
        &lt;!--
            &lt;trust
                level = "Full" [String, Required]
                originUrl = "" [String]
                processRequestInApplicationTrust = "true" [true|false]
            /&gt;
        --&gt;
        &lt;trust level="Full" originUrl="" processRequestInApplicationTrust="true" /&gt;
    &lt;/system.web&gt;
&lt;/configuration&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>web_config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>web.config.default</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>web_config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>web.config.default</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0" encoding="us-ascii"?&gt;
&lt;!-- the root web configuration file --&gt;
&lt;configuration&gt;
    &lt;!--
        Using a location directive with a missing path attribute
        scopes the configuration to the entire machine.  If used in
        conjunction with allowOverride="false", it can be used to
        prevent configuration from being altered on the machine

        Administrators that want to restrict permissions granted to
        web applications should change the default Trust level and ensure
        that overrides are not allowed
    --&gt;
    &lt;system.web&gt;
        &lt;!--
            &lt;anonymousIdentification
                enabled = "false" [true|false]
                cookieName = ".ASPXANONYMOUS" [String]
                cookieTimeout = "100000"  [in Minutes][number]
                cookiePath = "/" [String]
                cookieRequireSSL = "false" [true|false]
                cookieSlidingExpiration = "true" [true|false]
                cookieProtection = "Validation" [None | Validation | Encryption | All]
                cookieless = "UseCookies" [UseUri | UseCookies | AutoDetect | UseDeviceProfile]
                domain = "" [String]
            /&gt;
        --&gt;
        &lt;anonymousIdentification enabled="false" cookieName=".ASPXANONYMOUS" cookieTimeout="100000" cookiePath="/" cookieRequireSSL="false" cookieSlidingExpiration="true" cookieProtection="Validation" cookieless="UseCookies" /&gt;
        &lt;!--
            &lt;authentication
                mode = "Windows" [None | Windows | Passport | Forms]
                &gt;
                &lt;forms
                    name = ".ASPXAUTH" [String]
                    loginUrl = "login.aspx" [String]
                    defaultUrl = "default.aspx" [String]
                    protection = "All" [All | None | Encryption | Validation]
                    timeout = "30"  [in Minutes][number]
                    path = "/" [String]
                    requireSSL = "false" [true|false]
                    slidingExpiration = "true" [true|false]
                    enableCrossAppRedirects = "false" [true|false]
                    cookieless = "UseDeviceProfile" [UseUri | UseCookies | AutoDetect | UseDeviceProfile]
                    domain = "" [String]
                    &gt;
                    &lt;credentials
                        passwordFormat = "SHA1" [Clear | SHA1 | MD5]
                        &gt;
                        &lt;user
                            name = "" [String, Required, Collection Key]
                            password = "" [String, Required]
                        /&gt;

                    &lt;/credentials&gt;
                &lt;/forms&gt;
                &lt;passport
                    redirectUrl = "internal" [String]
                /&gt;
            &lt;/authentication&gt;
        --&gt;
        &lt;authentication mode="Windows"&gt;
            &lt;forms name=".ASPXAUTH" loginUrl="login.aspx" defaultUrl="default.aspx" protection="All" timeout="30" path="/" requireSSL="false" slidingExpiration="true" cookieless="UseDeviceProfile" enableCrossAppRedirects="false"&gt;
                &lt;credentials passwordFormat="SHA1" /&gt;
            &lt;/forms&gt;
            &lt;passport redirectUrl="internal" /&gt;
        &lt;/authentication&gt;
        &lt;!--
            &lt;customErrors
                defaultRedirect = "" [String]
                redirectMode = "ResponseRedirect" [ResponseRedirect | ResponseRewrite]
                mode = "RemoteOnly" [RemoteOnly | On | Off]
                &gt;
                &lt;error
                    statusCode = "" [number, Required, Collection Key]
                    redirect = "" [String, Required]
                /&gt;

            &lt;/customErrors&gt;
        --&gt;
        &lt;customErrors redirectMode="ResponseRedirect" mode="RemoteOnly" /&gt;
        &lt;!--
            &lt;deviceFilters
                &gt;
                &lt;filter
                    name = "" [String, Required, Collection Key]
                    type = "" 
                    method = "" [String]
                    compare = "" [String]
                    argument = "" [String]
                /&gt;

            &lt;/deviceFilters&gt;
        --&gt;
        &lt;deviceFilters /&gt;
        &lt;!--
            &lt;globalization
                requestEncoding = "utf-8" 
                responseEncoding = "utf-8" 
                responseHeaderEncoding = "utf-8" 
                fileEncoding = "" 
                culture = "" [String]
                uiCulture = "" [String]
                enableClientBasedCulture = "false" [true|false]
                resourceProviderFactoryType = "" [String]
                enableBestFitResponseEncoding = "false" [true|false]
            /&gt;
        --&gt;
        &lt;globalization requestEncoding="utf-8" responseEncoding="utf-8" fileEncoding="" culture="" uiCulture="" enableClientBasedCulture="false" responseHeaderEncoding="utf-8" resourceProviderFactoryType="" enableBestFitResponseEncoding="false" /&gt;
        &lt;!--
            &lt;hostingEnvironment
                shutdownTimeout = "30"  [in Seconds][number]
                idleTimeout = "Infinite"  [in Minutes][number]
                shadowCopyBinAssemblies = "true" [true|false]
            /&gt;
        --&gt;
        &lt;hostingEnvironment idleTimeout="Infinite" shutdownTimeout="30" shadowCopyBinAssemblies="true" /&gt;
        &lt;!--
            &lt;httpCookies
                httpOnlyCookies = "false" [true|false]
                requireSSL = "false" [true|false]
                domain = "" [String]
            /&gt;
        --&gt;
        &lt;httpCookies httpOnlyCookies="false" requireSSL="false" domain="" /&gt;
        &lt;!--
            &lt;httpRuntime
                executionTimeout = "110"  [in Seconds][number]
                maxRequestLength = "4096" [number]
                requestLengthDiskThreshold = "80" [number]
                useFullyQualifiedRedirectUrl = "false" [true|false]
                minFreeThreads = "8" [number]
                minLocalRequestFreeThreads = "4" [number]
                appRequestQueueLimit = "5000" [number]
                enableKernelOutputCache = "true" [true|false]
                enableVersionHeader = "true" [true|false]
                apartmentThreading = "false" [true|false]
                requireRootedSaveAsPath = "true" [true|false]
                enable = "true" [true|false]
                sendCacheControlHeader = "true" [true|false]
                shutdownTimeout = "90"  [in Seconds][number]
                delayNotificationTimeout = "5"  [in Seconds][number]
                waitChangeNotification = "0" [number]
                maxWaitChangeNotification = "0" [number]
                enableHeaderChecking = "true" [true|false]
            /&gt;
        --&gt;
        &lt;httpRuntime executionTimeout="110" maxRequestLength="4096" requestLengthDiskThreshold="80" useFullyQualifiedRedirectUrl="false" minFreeThreads="8" minLocalRequestFreeThreads="4" appRequestQueueLimit="5000" enableKernelOutputCache="true" enableVersionHeader="true" requireRootedSaveAsPath="true" enable="true" shutdownTimeout="90" delayNotificationTimeout="5" waitChangeNotification="0" maxWaitChangeNotification="0" enableHeaderChecking="true" sendCacheControlHeader="true" apartmentThreading="false" /&gt;
        &lt;!--
            &lt;identity
                impersonate = "false" [true|false]
                userName = "" [String]
                password = "" [String]
            /&gt;
        --&gt;
        &lt;identity impersonate="false" userName="" password="" /&gt;
        &lt;!--
            &lt;machineKey
                validationKey = "AutoGenerate,IsolateApps" [String]
                decryptionKey = "AutoGenerate,IsolateApps" [String]
                decryption = "Auto" [AUTO | DES | 3DES | AES]
                validation = "SHA1" [MD5 | SHA1 | 3DES | AES]
            /&gt;
        --&gt;
        &lt;machineKey validationKey="AutoGenerate,IsolateApps" decryptionKey="AutoGenerate,IsolateApps" validation="SHA1" decryption="Auto" compatibilityMode="Framework20SP1" /&gt;
        &lt;!--
            &lt;sessionPageState
                historySize = "9" [number]
            /&gt;
        --&gt;
        &lt;sessionPageState historySize="9" /&gt;
        &lt;!--
            &lt;sessionState
                mode = "InProc" [Off | InProc | StateServer | SQLServer | Custom]
                stateConnectionString = "tcpip=loopback:42424" [String]
                stateNetworkTimeout = "10"  [in Seconds][number]
                sqlConnectionString = "data source=localhost;Integrated Security=SSPI" [String]
                sqlCommandTimeout = "30"  [in Seconds][number]
                customProvider = "" [String]
                cookieless = "" [UseUri | UseCookies | AutoDetect | UseDeviceProfile]
                cookieName = "ASP.NET_SessionId" [String]
                timeout = "20"  [in Minutes][number]
                allowCustomSqlDatabase = "false" [true|false]
                regenerateExpiredSessionId = "true" [true|false]
                partitionResolverType = "" [String]
                useHostingIdentity = "true" [true|false]
                sessionIDManagerType = "" [String]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/sessionState&gt;
        --&gt;
        &lt;sessionState mode="InProc" stateConnectionString="tcpip=loopback:42424" stateNetworkTimeout="10" sqlConnectionString="data source=localhost;Integrated Security=SSPI" sqlCommandTimeout="30" customProvider="" cookieless="UseCookies" cookieName="ASP.NET_SessionId" timeout="20" allowCustomSqlDatabase="false" regenerateExpiredSessionId="true" partitionResolverType="" useHostingIdentity="true" sessionIDManagerType=""&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
            &lt;/providers&gt;
        &lt;/sessionState&gt;
        &lt;!--
            &lt;trace
                enabled = "false" [true|false]
                mostRecent = "false" [true|false]
                localOnly = "true" [true|false]
                pageOutput = "false" [true|false]
                requestLimit = "10" [number]
                traceMode = "SortByTime" [SortByTime | SortByCategory]
                writeToDiagnosticsTrace = "false" [true|false]
            /&gt;
        --&gt;
        &lt;trace enabled="false" localOnly="true" mostRecent="false" pageOutput="false" requestLimit="10" traceMode="SortByTime" writeToDiagnosticsTrace="false" /&gt;
        &lt;!--
            &lt;webServices
                &gt;
                &lt;conformanceWarnings&gt;
                    &lt;add
                        name = "None" [None | BasicProfile1_1, Collection Key]
                    /&gt;
                &lt;/conformanceWarnings&gt;

                &lt;protocols&gt;
                    &lt;add
                        name = "Unknown" [Unknown | HttpSoap | HttpGet | HttpPost | Documentation | HttpPostLocalhost | HttpSoap12 | AnyHttpSoap, Collection Key]
                    /&gt;
                &lt;/protocols&gt;

                &lt;soapEnvelopeProcessing
                    readTimeout = "2147483647" [number]
                    strict = "false" [true|false]
                /&gt;
                &lt;DiagnosticsElement
                    suppressReturningExceptions = "false" [true|false]
                /&gt;
                &lt;serviceDescriptionFormatExtensionTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/serviceDescriptionFormatExtensionTypes&gt;

                &lt;soapExtensionImporterTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapExtensionImporterTypes&gt;

                &lt;soapExtensionReflectorTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapExtensionReflectorTypes&gt;

                &lt;soapExtensionTypes&gt;
                    &lt;add
                        group = "Low" [High | Low, Collection Key]
                        priority = "0" [number, Collection Key]
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapExtensionTypes&gt;

                &lt;soapServerProtocolFactory
                    type = "" [Collection Key]
                /&gt;
                &lt;soapTransportImporterTypes&gt;
                    &lt;add
                        type = "" [Collection Key]
                    /&gt;
                &lt;/soapTransportImporterTypes&gt;

                &lt;wsdlHelpGenerator
                    href = "" [String, Required]
                /&gt;
            &lt;/webServices&gt;
        --&gt;
        &lt;webServices&gt;
            &lt;conformanceWarnings&gt;
                &lt;clear /&gt;
                &lt;add name="BasicProfile1_1" /&gt;
            &lt;/conformanceWarnings&gt;
            &lt;protocols&gt;
                &lt;clear /&gt;
                &lt;add name="HttpSoap12" /&gt;
                &lt;add name="HttpSoap" /&gt;
                &lt;add name="HttpPostLocalhost" /&gt;
                &lt;add name="Documentation" /&gt;
            &lt;/protocols&gt;
            &lt;serviceDescriptionFormatExtensionTypes&gt;
                &lt;clear /&gt;
            &lt;/serviceDescriptionFormatExtensionTypes&gt;
            &lt;soapEnvelopeProcessing readTimeout="Infinite" strict="false" /&gt;
            &lt;soapExtensionImporterTypes&gt;
                &lt;clear /&gt;
            &lt;/soapExtensionImporterTypes&gt;
            &lt;soapExtensionReflectorTypes&gt;
                &lt;clear /&gt;
            &lt;/soapExtensionReflectorTypes&gt;
            &lt;soapExtensionTypes&gt;
                &lt;clear /&gt;
            &lt;/soapExtensionTypes&gt;
            &lt;soapTransportImporterTypes&gt;
                &lt;clear /&gt;
            &lt;/soapTransportImporterTypes&gt;
            &lt;soapServerProtocolFactory type="System.Web.Services.Protocols.SoapServerProtocolFactory, System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;diagnostics suppressReturningExceptions="false" /&gt;
        &lt;/webServices&gt;
        &lt;!--
            &lt;xhtmlConformance
                mode = "Transitional" [Transitional | Legacy | Strict]
            /&gt;
        --&gt;
        &lt;xhtmlConformance mode="Transitional" /&gt;
        &lt;!--
            &lt;authorization
                &gt;
                &lt;allow
                    verbs = "" 
                    users = "" 
                    roles = "" 
                /&gt;
                &lt;deny
                    verbs = "" 
                    users = "" 
                    roles = "" 
                /&gt;

            &lt;/authorization&gt;
        --&gt;
        &lt;authorization&gt;
            &lt;allow users="*" /&gt;
        &lt;/authorization&gt;
        &lt;!--
            &lt;browserCaps
            /&gt;
        --&gt;
        &lt;browserCaps userAgentCacheKeyLength="64"&gt;
            &lt;result type="System.Web.Mobile.MobileCapabilities, System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
        &lt;/browserCaps&gt;
        &lt;!--
            &lt;clientTarget
                &gt;
                &lt;add
                    alias = "" [String, Required, Collection Key]
                    userAgent = "" [String, Required]
                /&gt;

            &lt;/clientTarget&gt;
        --&gt;
        &lt;clientTarget&gt;
            &lt;clear /&gt;
            &lt;add alias="ie5" userAgent="Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)" /&gt;
            &lt;add alias="ie4" userAgent="Mozilla/4.0 (compatible; MSIE 4.0; Windows NT 4.0)" /&gt;
            &lt;add alias="uplevel" userAgent="Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.1)" /&gt;
            &lt;add alias="downlevel" userAgent="Generic Downlevel" /&gt;
        &lt;/clientTarget&gt;
        &lt;!--
            &lt;compilation
                tempDirectory = "" [String]
                debug = "false" [true|false]
                strict = "false" [true|false]
                explicit = "true" [true|false]
                batch = "true" [true|false]
                urlLinePragmas = "false" [true|false]
                batchTimeout = "900"  [in Seconds][number]
                maxBatchSize = "1000" [number]
                maxBatchGeneratedFileSize = "1000" [number]
                numRecompilesBeforeAppRestart = "15" [number]
                defaultLanguage = "vb" [String]
                assemblyPostProcessorType = "" [String]
                &gt;
                &lt;assemblies&gt;
                    &lt;add
                        assembly = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/assemblies&gt;

                &lt;buildProviders&gt;
                    &lt;add
                        extension = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/buildProviders&gt;

                &lt;expressionBuilders&gt;
                    &lt;add
                        expressionPrefix = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/expressionBuilders&gt;

                &lt;codeSubDirectories&gt;
                    &lt;add
                        directoryName = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/codeSubDirectories&gt;

            &lt;/compilation&gt;
        --&gt;
        &lt;compilation tempDirectory="" debug="false" strict="false" explicit="true" batch="true" batchTimeout="900" maxBatchSize="1000" maxBatchGeneratedFileSize="1000" numRecompilesBeforeAppRestart="15" defaultLanguage="vb" urlLinePragmas="false" assemblyPostProcessorType=""&gt;
            &lt;assemblies&gt;
                &lt;clear /&gt;
                &lt;add assembly="mscorlib" /&gt;
                &lt;add assembly="System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
                &lt;add assembly="System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
                &lt;add assembly="System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
                &lt;add assembly="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add assembly="*" /&gt;
            &lt;/assemblies&gt;
            &lt;buildProviders&gt;
                &lt;clear /&gt;
                &lt;add extension=".aspx" type="System.Web.Compilation.PageBuildProvider" /&gt;
                &lt;add extension=".ascx" type="System.Web.Compilation.UserControlBuildProvider" /&gt;
                &lt;add extension=".master" type="System.Web.Compilation.MasterPageBuildProvider" /&gt;
                &lt;add extension=".asmx" type="System.Web.Compilation.WebServiceBuildProvider" /&gt;
                &lt;add extension=".ashx" type="System.Web.Compilation.WebHandlerBuildProvider" /&gt;
                &lt;add extension=".soap" type="System.Web.Compilation.WebServiceBuildProvider" /&gt;
                &lt;add extension=".resx" type="System.Web.Compilation.ResXBuildProvider" /&gt;
                &lt;add extension=".resources" type="System.Web.Compilation.ResourcesBuildProvider" /&gt;
                &lt;add extension=".wsdl" type="System.Web.Compilation.WsdlBuildProvider" /&gt;
                &lt;add extension=".xsd" type="System.Web.Compilation.XsdBuildProvider" /&gt;
                &lt;add extension=".js" type="System.Web.Compilation.ForceCopyBuildProvider" /&gt;
                &lt;add extension=".lic" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
                &lt;add extension=".licx" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
                &lt;add extension=".exclude" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
                &lt;add extension=".refresh" type="System.Web.Compilation.IgnoreFileBuildProvider" /&gt;
            &lt;/buildProviders&gt;
            &lt;expressionBuilders&gt;
                &lt;clear /&gt;
                &lt;add expressionPrefix="Resources" type="System.Web.Compilation.ResourceExpressionBuilder" /&gt;
                &lt;add expressionPrefix="ConnectionStrings" type="System.Web.Compilation.ConnectionStringsExpressionBuilder" /&gt;
                &lt;add expressionPrefix="AppSettings" type="System.Web.Compilation.AppSettingsExpressionBuilder" /&gt;
            &lt;/expressionBuilders&gt;
        &lt;/compilation&gt;
        &lt;!--
            &lt;healthMonitoring
                heartbeatInterval = "0"  [in Seconds][number]
                enabled = "true" [true|false]
                &gt;
                &lt;bufferModes&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        maxBufferSize = "2147483647" [number, Required]
                        maxFlushSize = "2147483647" [number, Required]
                        urgentFlushThreshold = "2147483647" [number, Required]
                        regularFlushInterval = "00:00:01" [HH:MM:SS, Required]
                        urgentFlushInterval = "00:00:00" [HH:MM:SS, Required]
                        maxBufferThreads = "1" [number]
                    /&gt;
                &lt;/bufferModes&gt;

                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

                &lt;profiles&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        minInstances = "1" [number]
                        maxLimit = "2147483647" [number]
                        minInterval = "00:00:00" [HH:MM:SS]
                        custom = "" [String]
                    /&gt;
                &lt;/profiles&gt;

                &lt;rules&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        eventName = "" [String, Required]
                        custom = "" [String]
                        profile = "" [String]
                        provider = "" [String]
                        minInstances = "1" [number]
                        maxLimit = "2147483647" [number]
                        minInterval = "00:00:00" [HH:MM:SS]
                    /&gt;
                &lt;/rules&gt;

                &lt;eventMappings&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                        startEventCode = "0" [number]
                        endEventCode = "2147483647" [number]
                    /&gt;
                &lt;/eventMappings&gt;

            &lt;/healthMonitoring&gt;
        --&gt;
        &lt;healthMonitoring heartbeatInterval="0" enabled="true"&gt;
            &lt;bufferModes&gt;
                &lt;clear /&gt;
                &lt;add name="Critical Notification" maxBufferSize="100" maxFlushSize="20" urgentFlushThreshold="1" regularFlushInterval="Infinite" urgentFlushInterval="00:01:00" maxBufferThreads="1" /&gt;
                &lt;add name="Notification" maxBufferSize="300" maxFlushSize="20" urgentFlushThreshold="1" regularFlushInterval="Infinite" urgentFlushInterval="00:01:00" maxBufferThreads="1" /&gt;
                &lt;add name="Analysis" maxBufferSize="1000" maxFlushSize="100" urgentFlushThreshold="100" regularFlushInterval="00:05:00" urgentFlushInterval="00:01:00" maxBufferThreads="1" /&gt;
                &lt;add name="Logging" maxBufferSize="1000" maxFlushSize="200" urgentFlushThreshold="800" regularFlushInterval="00:30:00" urgentFlushInterval="00:05:00" maxBufferThreads="1" /&gt;
            &lt;/bufferModes&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add name="EventLogProvider" type="System.Web.Management.EventLogWebEventProvider,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add connectionStringName="LocalSqlServer" maxEventDetailsLength="1073741823" buffer="false" bufferMode="Notification" name="SqlWebEventProvider" type="System.Web.Management.SqlWebEventProvider,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;add name="WmiWebEventProvider" type="System.Web.Management.WmiWebEventProvider,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
            &lt;profiles&gt;
                &lt;clear /&gt;
                &lt;add name="Default" minInstances="1" maxLimit="Infinite" minInterval="00:01:00" custom="" /&gt;
                &lt;add name="Critical" minInstances="1" maxLimit="Infinite" minInterval="00:00:00" custom="" /&gt;
            &lt;/profiles&gt;
            &lt;rules&gt;
                &lt;clear /&gt;
                &lt;add name="All Errors Default" eventName="All Errors" provider="EventLogProvider" profile="Default" minInstances="1" maxLimit="Infinite" minInterval="00:01:00" custom="" /&gt;
                &lt;add name="Failure Audits Default" eventName="Failure Audits" provider="EventLogProvider" profile="Default" minInstances="1" maxLimit="Infinite" minInterval="00:01:00" custom="" /&gt;
            &lt;/rules&gt;
            &lt;eventMappings&gt;
                &lt;clear /&gt;
                &lt;add name="All Events" type="System.Web.Management.WebBaseEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Heartbeats" type="System.Web.Management.WebHeartbeatEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Application Lifetime Events" type="System.Web.Management.WebApplicationLifetimeEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Request Processing Events" type="System.Web.Management.WebRequestEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="All Errors" type="System.Web.Management.WebBaseErrorEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Infrastructure Errors" type="System.Web.Management.WebErrorEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Request Processing Errors" type="System.Web.Management.WebRequestErrorEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="All Audits" type="System.Web.Management.WebAuditEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Failure Audits" type="System.Web.Management.WebFailureAuditEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
                &lt;add name="Success Audits" type="System.Web.Management.WebSuccessAuditEvent,System.Web,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" startEventCode="0" endEventCode="2147483647" /&gt;
            &lt;/eventMappings&gt;
        &lt;/healthMonitoring&gt;
        &lt;!--
            &lt;httpHandlers
                &gt;
                &lt;add
                    path = "" [String, Required, Collection Key]
                    verb = "" [String, Required, Collection Key]
                    type = "" [String, Required]
                    validate = "true" [true|false]
                /&gt;

            &lt;/httpHandlers&gt;
        --&gt;
        &lt;httpHandlers&gt;
            &lt;clear /&gt;
            &lt;add path="trace.axd" verb="*" type="System.Web.Handlers.TraceHandler" validate="true" /&gt;
            &lt;add path="WebResource.axd" verb="GET" type="System.Web.Handlers.AssemblyResourceLoader" validate="true" /&gt;
            &lt;add path="*.axd" verb="*" type="System.Web.HttpNotFoundHandler" validate="true" /&gt;
            &lt;add path="*.aspx" verb="*" type="System.Web.UI.PageHandlerFactory" validate="true" /&gt;
            &lt;add path="*.ashx" verb="*" type="System.Web.UI.SimpleHandlerFactory" validate="true" /&gt;
            &lt;add path="*.asmx" verb="*" type="System.Web.Services.Protocols.WebServiceHandlerFactory, System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" validate="false" /&gt;
            &lt;add path="*.rem" verb="*" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" validate="false" /&gt;
            &lt;add path="*.soap" verb="*" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" validate="false" /&gt;
            &lt;add path="*.asax" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ascx" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.master" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.skin" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.browser" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sitemap" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.dll.config" verb="GET,HEAD" type="System.Web.StaticFileHandler" validate="true" /&gt;
            &lt;add path="*.exe.config" verb="GET,HEAD" type="System.Web.StaticFileHandler" validate="true" /&gt;
            &lt;add path="*.config" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.cs" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.csproj" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.vb" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.vbproj" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.webinfo" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.licx" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.resx" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.resources" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.mdb" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.vjsproj" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.java" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.jsl" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ldb" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ad" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.dd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ldd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.cd" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.adprototype" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.lddprototype" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sdm" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.sdmDocument" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.mdf" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.ldf" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.exclude" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*.refresh" verb="*" type="System.Web.HttpForbiddenHandler" validate="true" /&gt;
            &lt;add path="*" verb="GET,HEAD,POST" type="System.Web.DefaultHttpHandler" validate="true" /&gt;
            &lt;add path="*" verb="*" type="System.Web.HttpMethodNotAllowedHandler" validate="true" /&gt;
        &lt;/httpHandlers&gt;
        &lt;!--
            &lt;httpModules
                &gt;
                &lt;add
                    name = "" [String, Required, Collection Key]
                    type = "" [String, Required]
                /&gt;

            &lt;/httpModules&gt;
        --&gt;
        &lt;httpModules&gt;
            &lt;clear /&gt;
            &lt;add name="OutputCache" type="System.Web.Caching.OutputCacheModule" /&gt;
            &lt;add name="Session" type="System.Web.SessionState.SessionStateModule" /&gt;
            &lt;add name="WindowsAuthentication" type="System.Web.Security.WindowsAuthenticationModule" /&gt;
            &lt;add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule" /&gt;
            &lt;add name="PassportAuthentication" type="System.Web.Security.PassportAuthenticationModule" /&gt;
            &lt;add name="RoleManager" type="System.Web.Security.RoleManagerModule" /&gt;
            &lt;add name="UrlAuthorization" type="System.Web.Security.UrlAuthorizationModule" /&gt;
            &lt;add name="FileAuthorization" type="System.Web.Security.FileAuthorizationModule" /&gt;
            &lt;add name="AnonymousIdentification" type="System.Web.Security.AnonymousIdentificationModule" /&gt;
            &lt;add name="Profile" type="System.Web.Profile.ProfileModule" /&gt;
            &lt;add name="ErrorHandlerModule" type="System.Web.Mobile.ErrorHandlerModule, System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
        &lt;/httpModules&gt;
        &lt;!--
            &lt;mobileControls
                sessionStateHistorySize = "6" [number]
                cookielessDataDictionaryType = "System.Web.Mobile.CookielessData" 
                allowCustomAttributes = "false" [true|false]
                &gt;
                &lt;device
                &lt;
                    name = "" [String, Required, Collection Key]
                    inheritsFrom = "" [String]
                    predicateClass = "" 
                    predicateMethod = "" [String]
                    pageAdapter = "" 
                    &gt;
                    &lt;control
                        name = "" [String, Required, Collection Key]
                        adapter = "" [Required]
                    /&gt;

                &lt;/&gt;/&gt;

            &lt;/mobileControls&gt;
        --&gt;
        &lt;mobileControls sessionStateHistorySize="6" cookielessDataDictionaryType="System.Web.Mobile.CookielessData" allowCustomAttributes="false"&gt;
            &lt;device name="XhtmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Panel" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPanelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Label" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlLabelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.LiteralText" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlLiteralTextAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlLinkAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.List" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ObjectList" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlObjectListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ValidationSummary" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlValidationSummaryAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextView" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlTextViewAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.MobileControl" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlControlAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.BaseValidator" adapter="System.Web.UI.MobileControls.Adapters.XhtmlAdapters.XhtmlValidatorAdapter" /&gt;
            &lt;/device&gt;
            &lt;device name="HtmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.HtmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.HtmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Panel" adapter="System.Web.UI.MobileControls.Adapters.HtmlPanelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.HtmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.HtmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Label" adapter="System.Web.UI.MobileControls.Adapters.HtmlLabelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.LiteralText" adapter="System.Web.UI.MobileControls.Adapters.HtmlLiteralTextAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.HtmlLinkAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.HtmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.HtmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.List" adapter="System.Web.UI.MobileControls.Adapters.HtmlListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.HtmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ObjectList" adapter="System.Web.UI.MobileControls.Adapters.HtmlObjectListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.HtmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.BaseValidator" adapter="System.Web.UI.MobileControls.Adapters.HtmlValidatorAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ValidationSummary" adapter="System.Web.UI.MobileControls.Adapters.HtmlValidationSummaryAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.HtmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextView" adapter="System.Web.UI.MobileControls.Adapters.HtmlTextViewAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.MobileControl" adapter="System.Web.UI.MobileControls.Adapters.HtmlControlAdapter" /&gt;
            &lt;/device&gt;
            &lt;device name="UpWmlDeviceAdapters" inheritsFrom="WmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.UpWmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.UpWmlPageAdapter" /&gt;
            &lt;device name="WmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.WmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.WmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Panel" adapter="System.Web.UI.MobileControls.Adapters.WmlPanelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.WmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.WmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Label" adapter="System.Web.UI.MobileControls.Adapters.WmlLabelAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.LiteralText" adapter="System.Web.UI.MobileControls.Adapters.WmlLiteralTextAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.WmlLinkAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.WmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.WmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.List" adapter="System.Web.UI.MobileControls.Adapters.WmlListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.WmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ObjectList" adapter="System.Web.UI.MobileControls.Adapters.WmlObjectListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.WmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.BaseValidator" adapter="System.Web.UI.MobileControls.Adapters.WmlValidatorAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.ValidationSummary" adapter="System.Web.UI.MobileControls.Adapters.WmlValidationSummaryAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.WmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextView" adapter="System.Web.UI.MobileControls.Adapters.WmlTextViewAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.MobileControl" adapter="System.Web.UI.MobileControls.Adapters.WmlControlAdapter" /&gt;
            &lt;/device&gt;
            &lt;device name="ChtmlDeviceAdapters" inheritsFrom="HtmlDeviceAdapters" predicateClass="System.Web.UI.MobileControls.Adapters.ChtmlPageAdapter" predicateMethod="DeviceQualifies" pageAdapter="System.Web.UI.MobileControls.Adapters.ChtmlPageAdapter"&gt;
                &lt;control name="System.Web.UI.MobileControls.Form" adapter="System.Web.UI.MobileControls.Adapters.ChtmlFormAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Calendar" adapter="System.Web.UI.MobileControls.Adapters.ChtmlCalendarAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Image" adapter="System.Web.UI.MobileControls.Adapters.ChtmlImageAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.TextBox" adapter="System.Web.UI.MobileControls.Adapters.ChtmlTextBoxAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.SelectionList" adapter="System.Web.UI.MobileControls.Adapters.ChtmlSelectionListAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Command" adapter="System.Web.UI.MobileControls.Adapters.ChtmlCommandAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.PhoneCall" adapter="System.Web.UI.MobileControls.Adapters.ChtmlPhoneCallAdapter" /&gt;
                &lt;control name="System.Web.UI.MobileControls.Link" adapter="System.Web.UI.MobileControls.Adapters.ChtmlLinkAdapter" /&gt;
            &lt;/device&gt;
        &lt;/mobileControls&gt;
        &lt;!--
            &lt;pages
                buffer = "true" [true|false]
                enableSessionState = "true" [False | ReadOnly | True]
                enableViewState = "true" [true|false]
                enableViewStateMac = "true" [true|false]
                enableEventValidation = "true" [true|false]
                smartNavigation = "false" [true|false]
                autoEventWireup = "true" [true|false]
                maintainScrollPositionOnPostBack = "false" [true|false]
                pageBaseType = "System.Web.UI.Page" [String]
                userControlBaseType = "System.Web.UI.UserControl" [String]
                pageParserFilterType = "" [String]
                validateRequest = "true" [true|false]
                masterPageFile = "" [String]
                theme = "" [String]
                styleSheetTheme = "" [String]
                maxPageStateFieldLength = "-1" [number]
                compilationMode = "Always" [Auto | Never | Always]
                viewStateEncryptionMode = "Auto" [Auto | Always | Never]
                asyncTimeout = "45"  [in Seconds][number]
                renderAllHiddenFieldsAtTopOfForm = "true" [true|false]
                &gt;
                &lt;namespaces
                    autoImportVBNamespace = "true" [true|false]
                    &gt;
                    &lt;add
                        namespace = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/namespaces&gt;

                &lt;controls&gt;
                    &lt;add
                        tagPrefix = "/" [String, Required]
                        tagName = "" [String]
                        namespace = "" [String]
                        assembly = "" [String]
                        src = "" [String]
                    /&gt;
                &lt;/controls&gt;

                &lt;tagMapping&gt;
                    &lt;add
                        mappedTagType = "" [String]
                        tagType = "" [String, Required, Collection Key]
                    /&gt;
                &lt;/tagMapping&gt;

            &lt;/pages&gt;
        --&gt;
        &lt;pages buffer="true" enableSessionState="true" enableViewState="true" enableViewStateMac="true" enableEventValidation="true" smartNavigation="false" autoEventWireup="true" pageBaseType="System.Web.UI.Page" userControlBaseType="System.Web.UI.UserControl" validateRequest="true" masterPageFile="" theme="" styleSheetTheme="" maxPageStateFieldLength="-1" compilationMode="Always" pageParserFilterType="" viewStateEncryptionMode="Auto" maintainScrollPositionOnPostBack="false" asyncTimeout="45" renderAllHiddenFieldsAtTopOfForm="true"&gt;
            &lt;namespaces autoImportVBNamespace="true"&gt;
                &lt;clear /&gt;
                &lt;add namespace="System" /&gt;
                &lt;add namespace="System.Collections" /&gt;
                &lt;add namespace="System.Collections.Specialized" /&gt;
                &lt;add namespace="System.Configuration" /&gt;
                &lt;add namespace="System.Text" /&gt;
                &lt;add namespace="System.Text.RegularExpressions" /&gt;
                &lt;add namespace="System.Web" /&gt;
                &lt;add namespace="System.Web.Caching" /&gt;
                &lt;add namespace="System.Web.SessionState" /&gt;
                &lt;add namespace="System.Web.Security" /&gt;
                &lt;add namespace="System.Web.Profile" /&gt;
                &lt;add namespace="System.Web.UI" /&gt;
                &lt;add namespace="System.Web.UI.WebControls" /&gt;
                &lt;add namespace="System.Web.UI.WebControls.WebParts" /&gt;
                &lt;add namespace="System.Web.UI.HtmlControls" /&gt;
            &lt;/namespaces&gt;
            &lt;controls&gt;
                &lt;add tagPrefix="asp" tagName="" namespace="System.Web.UI.WebControls.WebParts" assembly="System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" src="" /&gt;
            &lt;/controls&gt;
            &lt;tagMapping&gt;
                &lt;clear /&gt;
            &lt;/tagMapping&gt;
        &lt;/pages&gt;
        &lt;!--
            &lt;protocols
                &gt;
                &lt;add
                    name = "" [String, Required, Collection Key]
                    processHandlerType = "" [String]
                    appDomainHandlerType = "" [String]
                    validate = "false" [true|false]
                /&gt;

            &lt;/protocols&gt;
        --&gt;
        &lt;protocols&gt;
            &lt;clear /&gt;
        &lt;/protocols&gt;
        &lt;!--
            &lt;siteMap
                defaultProvider = "AspNetXmlSiteMapProvider" [String]
                enabled = "true" [true|false]
                &gt;
                &lt;providers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/providers&gt;

            &lt;/siteMap&gt;
        --&gt;
        &lt;siteMap defaultProvider="AspNetXmlSiteMapProvider" enabled="true"&gt;
            &lt;providers&gt;
                &lt;clear /&gt;
                &lt;add siteMapFile="web.sitemap" name="AspNetXmlSiteMapProvider" type="System.Web.XmlSiteMapProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
            &lt;/providers&gt;
        &lt;/siteMap&gt;
        &lt;!--
            &lt;urlMappings
                enabled = "true" [true|false]
                &gt;
                &lt;add
                    url = "" [String, Required, Collection Key]
                    mappedUrl = "" [String, Required]
                /&gt;

            &lt;/urlMappings&gt;
        --&gt;
        &lt;urlMappings enabled="true"&gt;
            &lt;clear /&gt;
        &lt;/urlMappings&gt;
        &lt;!--
            &lt;webControls
                clientScriptsLocation = "/aspnet_client/{0}/{1}/" [String, Required]
            /&gt;
        --&gt;
        &lt;webControls clientScriptsLocation="/aspnet_client/{0}/{1}/" /&gt;
        &lt;!--
            &lt;webParts
                enableExport = "false" [true|false]
                &gt;
                &lt;personalization
                    defaultProvider = "AspNetSqlPersonalizationProvider" [String]
                    &gt;
                    &lt;providers&gt;
                        &lt;add
                            name = "" [String, Required, Collection Key]
                            type = "" [String, Required]
                        /&gt;
                    &lt;/providers&gt;

                &lt;/personalization&gt;
                &lt;transformers&gt;
                    &lt;add
                        name = "" [String, Required, Collection Key]
                        type = "" [String, Required]
                    /&gt;
                &lt;/transformers&gt;

            &lt;/webParts&gt;
        --&gt;
        &lt;webParts enableExport="false"&gt;
            &lt;personalization defaultProvider="AspNetSqlPersonalizationProvider"&gt;
                &lt;providers&gt;
                    &lt;clear /&gt;
                    &lt;add connectionStringName="LocalSqlServer" name="AspNetSqlPersonalizationProvider" type="System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
                &lt;/providers&gt;
                &lt;authorization&gt;
                    &lt;deny verbs="enterSharedScope" users="*" /&gt;
                    &lt;allow verbs="modifyState" users="*" /&gt;
                &lt;/authorization&gt;
            &lt;/personalization&gt;
            &lt;transformers&gt;
                &lt;clear /&gt;
                &lt;add name="RowToFieldTransformer" type="System.Web.UI.WebControls.WebParts.RowToFieldTransformer" /&gt;
                &lt;add name="RowToParametersTransformer" type="System.Web.UI.WebControls.WebParts.RowToParametersTransformer" /&gt;
            &lt;/transformers&gt;
        &lt;/webParts&gt;
        &lt;caching&gt;
            &lt;!--
                &lt;cache
                    disableMemoryCollection = "false" [true|false]
                    disableExpiration = "false" [true|false]
                    privateBytesLimit = "0" [number]
                    percentagePhysicalMemoryUsedLimit = "0" [number]
                    privateBytesPollTime = "00:02:00" [HH:MM:SS]
                /&gt;
            --&gt;
            &lt;cache disableMemoryCollection="false" disableExpiration="false" privateBytesLimit="0" percentagePhysicalMemoryUsedLimit="0" privateBytesPollTime="00:02:00" /&gt;
            &lt;!--
                &lt;outputCache
                    enableOutputCache = "true" [true|false]
                    enableFragmentCache = "true" [true|false]
                    sendCacheControlHeader = "true" [true|false]
                    omitVaryStar = "false" [true|false]
                    enableKernelCacheForVaryByStar = "false" [true|false]
                /&gt;
            --&gt;
            &lt;outputCache enableOutputCache="true" enableFragmentCache="true" sendCacheControlHeader="true" omitVaryStar="false" enableKernelCacheForVaryByStar="false" /&gt;
            &lt;!--
                &lt;outputCacheSettings
                    &gt;
                    &lt;outputCacheProfiles&gt;
                        &lt;add
                            name = "" [String, Required, Collection Key]
                            enabled = "true" [true|false]
                            duration = "-1" [number]
                            location = "" [Any | Client | Downstream | Server | None | ServerAndClient]
                            sqlDependency = "" [String]
                            varyByCustom = "" [String]
                            varyByControl = "" [String]
                            varyByContentEncoding = "" [String]
                            varyByHeader = "" [String]
                            varyByParam = "" [String]
                            noStore = "false" [true|false]
                        /&gt;
                    &lt;/outputCacheProfiles&gt;

                &lt;/outputCacheSettings&gt;
            --&gt;
            &lt;outputCacheSettings&gt;
                &lt;outputCacheProfiles&gt;
                    &lt;clear /&gt;
                &lt;/outputCacheProfiles&gt;
            &lt;/outputCacheSettings&gt;
            &lt;!--
                &lt;sqlCacheDependency
                    enabled = "true" [true|false]
                    pollTime = "60000" [number]
                    &gt;
                    &lt;databases&gt;
                        &lt;add
                            name = "" [String, Required, Collection Key]
                            connectionStringName = "" [String, Required]
                            pollTime = "60000" [number]
                        /&gt;
                    &lt;/databases&gt;

                &lt;/sqlCacheDependency&gt;
            --&gt;
            &lt;sqlCacheDependency enabled="true" pollTime="60000"&gt;
                &lt;databases&gt;
                    &lt;clear /&gt;
                &lt;/databases&gt;
            &lt;/sqlCacheDependency&gt;
        &lt;/caching&gt;
        &lt;!--
            &lt;securityPolicy
                &gt;
                &lt;trustLevel
                    name = "Full" [String, Required, Collection Key]
                    policyFile = "internal" [String, Required]
                /&gt;

            &lt;/securityPolicy&gt;
        --&gt;
        &lt;securityPolicy&gt;
            &lt;trustLevel name="Full" policyFile="internal" /&gt;
            &lt;trustLevel name="High" policyFile="web_hightrust.config" /&gt;
            &lt;trustLevel name="Medium" policyFile="web_mediumtrust.config" /&gt;
            &lt;trustLevel name="Low" policyFile="web_lowtrust.config" /&gt;
            &lt;trustLevel name="Minimal" policyFile="web_minimaltrust.config" /&gt;
        &lt;/securityPolicy&gt;
        &lt;!--
            &lt;trust
                level = "Full" [String, Required]
                originUrl = "" [String]
                processRequestInApplicationTrust = "true" [true|false]
            /&gt;
        --&gt;
        &lt;trust level="Full" originUrl="" processRequestInApplicationTrust="true" /&gt;
    &lt;/system.web&gt;
&lt;/configuration&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>WebApplications_gig</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_New_Hire_Site.css</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>WebApplications_gig</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_New_Hire_Site.css</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/* Color Palette

background: #808040;        - Olive - Header
background-color:#FAC905;   - Gold  -  skipLink
background-color:#CEA604;   - Dark Gold - Nav
*/



/* DEFAULTS
----------------------------------------------------------*/

body   
{
    background-image:url('../images/background_1.jpg');
    font-size: .80em;
    font-family: "Helvetica Neue", "Lucida Grande", "Segoe UI", Arial, Helvetica, Verdana, sans-serif;
    margin: 0px;
    padding: 0px;
    color: #696969; 

    
}

a:link, a:visited
{
    color: #034af3;
}

a:hover
{
    color: #1d60ff;
    text-decoration: none;
}

a:active
{
    color: #034af3;
}

p
{
    margin-bottom: 10px;
    line-height: 1.6em;
}


/* HEADINGS   
----------------------------------------------------------*/

h1, h2, h3, h4, h5, h6
{
    font-size: 1.5em;
    color: #666666;
    font-variant: small-caps;
    text-transform: none;
    font-weight: 200;
    margin-bottom: 0px;
}

h1
{
    font-size: 1.6em;
    padding-bottom: 0px;
    margin-bottom: 0px;
}

h2
{
    font-size: 1.5em;
    font-weight: 600;
}

h3
{
    font-size: 1.2em;
}

h4
{
    font-size: 1.1em;
}

h5, h6
{
    font-size: 1em;
}

/* this rule styles &lt;h1&gt; and &lt;h2&gt; tags that are the 
first child of the left and right table columns */
.rightColumn &gt; h1, .rightColumn &gt; h2, .leftColumn &gt; h1, .leftColumn &gt; h2
{
    margin-top: 0px;
}


/* PRIMARY LAYOUT ELEMENTS   
----------------------------------------------------------*/

.page
{
    width: 960px;
    background-color: #fff;
    margin: 20px auto 0px auto;
    border: 1px solid #496077;
}

.header
{
    position: relative;
    margin: 0px;
    padding: 0px;
    /* background: #4b6c9e; */
    background: #808040;
    width: 100%;
}

.header h1
{
    border-style: none;
    border-color: inherit;
    border-width: medium;
    font-weight: 700;
    margin: 0px;
    padding: 0px 0px 0px 20px;
    color: #f9f9f9;
    line-height: 2em;
    font-size: 2em;
    width: 264px;
}

.main
{
    padding: 0px 12px;
    margin: 12px 8px 8px 8px;
    min-height: 420px;
}

.leftCol
{
    padding: 6px 0px;
    margin: 12px 8px 8px 8px;
    width: 200px;
    min-height: 200px;
}

.footer
{
    color: #4e5766;
    padding: 8px 0px 0px 0px;
    margin: 0px auto;
    text-align: center;
    line-height: normal;
}


/* TAB MENU   
----------------------------------------------------------*/

div.hideSkiplink
{
    /* background-color:#3a4f63; */
    background-color:#FAC905;
    width:100%;
}

div.menu
{
    padding: 4px 0px 4px 8px;
}

div.menu ul
{
    list-style: none;
    margin: 0px;
    padding: 0px;
    width: auto;
}

div.menu ul li a, div.menu ul li a:visited
{
     /*   background-color: #465c71; */
    background-color:#CEA604;
    border: 1px #4e667d solid;
    color: #dde4ec;
    display: block;
    line-height: 1.35em;
    padding: 4px 20px;
    text-decoration: none;
    white-space: nowrap;
}

div.menu ul li a:hover
{
    background-color: #bfcbd6;
    color: #465c71;
    text-decoration: none;
}

div.menu ul li a:active
{
    background-color: #465c71;
    color: #cfdbe6;
    text-decoration: none;
}

/* FORM ELEMENTS   
----------------------------------------------------------*/

fieldset
{
    margin: 1em 0px;
    padding: 1em;
    border: 1px solid #ccc;
}

fieldset p 
{
    margin: 2px 12px 10px 10px;
}

fieldset.login label, fieldset.register label, fieldset.changePassword label
{
    display: block;
}

fieldset label.inline 
{
    display: inline;
}

legend 
{
    font-size: 1.1em;
    font-weight: 600;
    padding: 2px 4px 8px 4px;
}

input.textEntry 
{
    width: 320px;
    border: 1px solid #ccc;
}

input.passwordEntry 
{
    width: 320px;
    border: 1px solid #ccc;
}

div.accountInfo
{
    width: 42%;
}

/* MISC  
----------------------------------------------------------*/

.clear
{
    clear: both;
}

.title
{
    display: block;
    float: left;
    text-align: left;
    width: auto;
}

.loginDisplay
{
    font-size: 1.1em;
    display: block;
    text-align: right;
    padding: 10px;
    color: White;
}

.loginDisplay a:link
{
    color: white;
}

.loginDisplay a:visited
{
    color: white;
}

.loginDisplay a:hover
{
    color: white;
}

.failureNotification
{
    font-size: 1.2em;
    color: Red;
}

.bold
{
    font-weight: bold;
}

.submitButton
{
    text-align: right;
    padding-right: 10px;
}

/* Modifications  
----------------------------------------------------------*/

.header img
{
	float: left;    
}

.header h1
{
    float: right;  
}


/*-----This is not working yet. The tables are still not centered---------*/

.CenterTheTablesInThisSpan .cssTable_Notes, .cssTable_HR_Required, .cssTable_HR_Delay, .cssTable_Supervisor_Required, .cssTable_Supervisor_Delay, .cssTable_Supervisor_NotRequired, .cssTable_FacilityCoordinator, .cssTable_Security, .cssTable_Admin
{
 
 	margin:auto;
 	padding: auto; 
   
}

/* Tables in Forms =========================================================================================================================================================================================================================================
----------------------------------------------------------*/
.cssFormView_DetailsForm .cssTable_Notes, .cssTable_HR_Required, .cssTable_HR_Delay, .cssTable_Supervisor_Required, .cssTable_Supervisor_Delay, .cssTable_Supervisor_NotRequired, .cssTable_FacilityCoordinator, .cssTable_Security, .cssTable_Admin
{
    border: 1px solid black;
    table-layout: fixed;
    width: 800px;   

}

.cssFormView_DetailsForm .cssTableCell_FieldName
{

    width: 200px;
}

/* Table: Table_HR_Required 
----------------------------------------------------------*/
.cssTable_HR_Required, .cssTable_Supervisor_Required, .cssTable_FacilityCoordinator
{
    color:Black;
    background-color:#95DEF0;   
}

.cssTable_HR_Required .cssTableCell_data, .cssTable_Supervisor_Required .cssTableCell_data, .cssTable_FacilityCoordinator .cssTableCell_data
{
    background-color:#27BBE0
    
}

/* Table: Table_HR_Delay 
----------------------------------------------------------*/
.cssTable_HR_Delay, .cssTable_Supervisor_Delay, .cssTable_Security
{
    color:Black;
    background-color:#C8FF91;   
}

.cssTable_HR_Delay .cssTableCell_data, .cssTable_Supervisor_Delay .cssTableCell_data, .cssTable_Security .cssTableCell_data
{
    background-color:#68D000
    
}

/* Table: Table_Notes 
----------------------------------------------------------*/
.cssTable_Notes
{
    color:Black;
    background-color:#FDD7DC;   
}

.cssTable_Notes .cssTableCell_data
{
    color:Yellow;
    background-color:#BE0A20
    
}

/* Table: Table_Supervisor_NotRequired 
----------------------------------------------------------*/
.cssTable_Supervisor_NotRequired
{
    color:Black;
    background-color:#FBFD9D;   
}

.cssTable_Supervisor_NotRequired .cssTableCell_data
{
    color:Black;
    background-color:#F3FA0C
    
}

/* Message: DIV, Table cells
----------------------------------------------------------*/
#Message_DIV        /* This is not in use */
{
background-color:#f9f9f9; 
    width:40em;
    left:0;

}

#Message_Table
{
background-color:#a9a9a9; 
    width:auto;
    left:0;

}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>WebApplications_gig</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_New_Hire_web.config_in_folder_ForNewHireRoles</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>WebApplications_gig</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_New_Hire_web.config_in_folder_ForNewHireRoles</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="DB2_CRMConnectionString1" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="NorthwindConnectionString1" connectionString="Data Source=SQL-SERVER\DEV;Initial Catalog=Northwind;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
    &lt;compilation debug="true" targetFramework="4.0" /&gt;
    &lt;customErrors mode="Off"/&gt;  

    &lt;!--&lt;authentication mode="Windows"/&gt;--&gt;

      &lt;authorization&gt;
          &lt;allow users="accessiicarewnc\ggarson" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_A_HumanResources" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_C_Security" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_D_IT" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_E_FacilityCoordinator" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_F_DataGuardian" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_G_Payroll" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_H_BuildingSecurity" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_I_BusinessCard_Hub" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_J_Training" /&gt;
          &lt;allow roles="accessiicarewnc\NewHire_Z_Admin" /&gt;         
          &lt;deny users="*"/&gt;
      &lt;/authorization&gt;
      

  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>WebApplications_gig</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_New_Hire_web.config_in_Root</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>WebApplications_gig</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_New_Hire_web.config_in_Root</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;
  &lt;connectionStrings&gt;
    &lt;add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="DB2_CRMConnectionString1" connectionString="Data Source=SQL-SERVER\PRODUCTION;Initial Catalog=DB2_CRM;Persist Security Info=True;User ID=Web_ASP_NET_user;Password=abcde12345"
      providerName="System.Data.SqlClient" /&gt;
    &lt;add name="NorthwindConnectionString1" connectionString="Data Source=SQL-SERVER\DEV;Initial Catalog=Northwind;Integrated Security=True"
      providerName="System.Data.SqlClient" /&gt;
  &lt;/connectionStrings&gt;

  &lt;system.web&gt;
  
    &lt;compilation debug="true" targetFramework="4.0" /&gt;
    
    &lt;customErrors mode="Off"/&gt;  

    &lt;authentication mode="Windows"/&gt;
      &lt;authorization&gt;
          &lt;!--&lt;allow users="accessiicarewnc\ggarson" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_A_HumanResources" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_C_Security" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_D_IT" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_E_FacilityCoordinator" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_F_DataGuardian" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_G_Payroll" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_H_BuildingSecurity" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_I_BusinessCard_Hub" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_J_Training" /&gt;--&gt;
          &lt;allow roles="accessiicarewnc\Domain Users" /&gt;
          &lt;deny users="*"/&gt; 
          &lt;!--&lt;allow users="*"/&gt;--&gt;
      &lt;/authorization&gt;      
  &lt;/system.web&gt;

  &lt;system.webServer&gt;
     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Stop_Resetting_Default_Apps</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Stop_Resetting_Default_Apps</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Stop_Resetting_Default_Apps
----------------------------


https://4sysops.com/archives/default-file-associations-in-windows-10/


To deploy the default file associations, 
	you first have to configure the settings on a reference machine 
	and then export the configuration in an XML file that you can deploy in your network.

1] You can configure the settings in the Control Panel under Programs &gt; Default Programs &gt; Set Default Program.

2] Once you do that, you have to open a command prompt 
	with the user account from above 
	and use the DISM tool to export the current settings to an .XML file, as shown below.
	

&gt;Dism.exe /online /Export-DefaultAppAssociations:C:\DATA\DefaultApplications\DefaultApps.xml

{See below for example of the file for Windows 10 Build 1709}


Now you have a .XML file with all the file associations from that user. 
	People often ask me if it is possible to deploy just one file association 
	or if they must use the entire file, which also contains all the default settings. 
	The answer is, yes, you can import just the association you need.

3] Deploying default file associations using Group Policy

You can also deploy the default file associations using Group Policy: 
	Computer Configuration &gt; Administrative Templates &gt; Windows Components &gt; File Explorer
		
	
Set the Group Policy	
https://docs.microsoft.com/en-us/internet-explorer/ie11-deploy-guide/set-the-default-browser-using-group-policy
=============================================================================================================

1] Open your Group Policy editor and go to the following policy 

	Administrative Templates\Windows Components\File Explorer\Set a default associations configuration file setting
	
	a] 	Enabled
	
	b]	Default Associations Configuration File
	
		C:\DATA\DefaultApplications\DefaultApps.xml
		


Export or Import Default Application Associations
https://technet.microsoft.com/en-us/library/hh825038.aspx
=============================================================	

EXPORT
(e.g. Dism /Online /Export-DefaultAppAssociations:\\Server\Share\AppAssoc.xml)

For error: 0x80004002
https://social.technet.microsoft.com/Forums/ie/en-US/0d3d994a-fd12-4b27-a684-a60c665e29db/help-failing-to-export-default-file-associations-on-server-2012r2?forum=mdt
1] try modifying command
Dism /Online /get-DefaultAppAssociations &gt;C:\TEMP\DefaultApps.txt
2] run command as local administrator


IMPORT
(mount image)
Dism /Mount-Image /ImageFile:C:\test\images\install.wim /Name:"Windows" /MountDir:C:\test\offline
(Import the .xml file that has the default application association settings to the Windows image. For example, at the command prompt type the following command:)


=================================================================

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;DefaultAssociations&gt;
  &lt;Association Identifier=".3g2" ProgId="WMP11.AssocFile.3G2" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".3gp" ProgId="WMP11.AssocFile.3GP" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".3gp2" ProgId="WMP11.AssocFile.3G2" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".3gpp" ProgId="WMP11.AssocFile.3GP" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".aac" ProgId="WMP11.AssocFile.ADTS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".ac3" ProgId="AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier=".adt" ProgId="AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier=".adts" ProgId="WMP11.AssocFile.ADTS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".aif" ProgId="WMP11.AssocFile.AIFF" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".aifc" ProgId="WMP11.AssocFile.AIFF" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".aiff" ProgId="WMP11.AssocFile.AIFF" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".amr" ProgId="AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier=".ani" ProgId="IrfanView.ani" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".arw" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".asf" ProgId="WMP11.AssocFile.ASF" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".asx" ProgId="WMP11.AssocFile.ASX" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".au" ProgId="WMP11.AssocFile.AU" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".avi" ProgId="WMP11.AssocFile.AVI" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".bmp" ProgId="IrfanView.bmp" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".cda" ProgId="WMP11.AssocFile.CDA" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".cr2" ProgId="IrfanView.cr2" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".crw" ProgId="IrfanView.crw" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".dcx" ProgId="IrfanView.dcx" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".dib" ProgId="IrfanView.bmp" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".ec3" ProgId="AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier=".emf" ProgId="IrfanView.emf" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".eps" ProgId="IrfanView.eps" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".epub" ProgId="AppXvepbp3z66accmsd0x877zbbxjctkpr6t" ApplicationName="Microsoft Edge" /&gt;
  &lt;Association Identifier=".erf" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".flac" ProgId="WMP11.AssocFile.FLAC" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".gif" ProgId="IrfanView.gif" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".htm" ProgId="ChromeHTML.BFATTW3WY5HWWRDPZHSSXN7MKY" ApplicationName="Google Chrome" /&gt;
  &lt;Association Identifier=".html" ProgId="ChromeHTML.BFATTW3WY5HWWRDPZHSSXN7MKY" ApplicationName="Google Chrome" /&gt;
  &lt;Association Identifier=".ico" ProgId="IrfanView.ico" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".jfif" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".jpc" ProgId="IrfanView.jp2" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".jpe" ProgId="IrfanView.jpg" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".jpeg" ProgId="IrfanView.jpg" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".jpg" ProgId="IrfanView.jpg" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".jxr" ProgId="IrfanView.hdp" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".kdc" ProgId="IrfanView.kdc" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".lbm" ProgId="IrfanView.iff" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".m1v" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".m2t" ProgId="WMP11.AssocFile.M2TS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".m2ts" ProgId="WMP11.AssocFile.M2TS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".m3u" ProgId="WMP11.AssocFile.m3u" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".m4a" ProgId="WMP11.AssocFile.M4A" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".m4r" ProgId="AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier=".m4v" ProgId="WMP11.AssocFile.MP4" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mid" ProgId="WMP11.AssocFile.MIDI" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".midi" ProgId="WMP11.AssocFile.MIDI" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".MK3D" ProgId="WMP11.AssocFile.MK3D" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mka" ProgId="WMP11.AssocFile.MKA" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mkv" ProgId="WMP11.AssocFile.MKV" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mod" ProgId="AppX6eg8h5sxqq90pv53845wmnbewywdqq5h" ApplicationName="Movies &amp;amp; TV" /&gt;
  &lt;Association Identifier=".mov" ProgId="WMP11.AssocFile.MOV" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".MP2" ProgId="WMP11.AssocFile.MP3" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mp2v" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mp3" ProgId="WMP11.AssocFile.MP3" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mp4" ProgId="WMP11.AssocFile.MP4" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mp4v" ProgId="WMP11.AssocFile.MP4" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mpa" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".MPE" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mpeg" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mpg" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mpv2" ProgId="WMP11.AssocFile.MPEG" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".mrw" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".mts" ProgId="WMP11.AssocFile.M2TS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".nef" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".nrw" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".orf" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".oxps" ProgId="Windows.XPSReachViewer" ApplicationName="XPS Viewer" /&gt;
  &lt;Association Identifier=".pcx" ProgId="IrfanView.pcx" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".pdf" ProgId="AcroExch.Document" ApplicationName="Adobe Acrobat 9.0" /&gt;
  &lt;Association Identifier=".pef" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".pgm" ProgId="IrfanView.pgm" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".png" ProgId="IrfanView.png" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".ppm" ProgId="IrfanView.ppm" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".psd" ProgId="IrfanView.psd" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".raf" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".raw" ProgId="IrfanView.raw" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".rgb" ProgId="IrfanView.sgi" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".rle" ProgId="IrfanView.rle" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".rmi" ProgId="WMP11.AssocFile.MIDI" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".rw2" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".rwl" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".snd" ProgId="WMP11.AssocFile.AU" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".sr2" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".srw" ProgId="AppX43hnxtbyyps62jhe9sqpdzxn1790zetc" ApplicationName="Photos" /&gt;
  &lt;Association Identifier=".tif" ProgId="IrfanView.tif" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".tod" ProgId="AppX6eg8h5sxqq90pv53845wmnbewywdqq5h" ApplicationName="Movies &amp;amp; TV" /&gt;
  &lt;Association Identifier=".TS" ProgId="WMP11.AssocFile.TTS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".TTS" ProgId="WMP11.AssocFile.TTS" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".txt" ProgId="txtfile" ApplicationName="Notepad" /&gt;
  &lt;Association Identifier=".url" ProgId="IE.AssocFile.URL" ApplicationName="Internet Browser" /&gt;
  &lt;Association Identifier=".wav" ProgId="WMP11.AssocFile.WAV" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".wax" ProgId="WMP11.AssocFile.WAX" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".wdp" ProgId="IrfanView.hdp" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".website" ProgId="IE.AssocFile.WEBSITE" ApplicationName="Internet Explorer" /&gt;
  &lt;Association Identifier=".wfw" ProgId="Applications\notepad.exe" ApplicationName="Notepad" /&gt;
  &lt;Association Identifier=".wm" ProgId="WMP11.AssocFile.ASF" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".wma" ProgId="WMP11.AssocFile.WMA" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".wmf" ProgId="IrfanView.wmf" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".wmv" ProgId="WMP11.AssocFile.WMV" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".wmx" ProgId="WMP11.AssocFile.ASX" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".WPL" ProgId="WMP11.AssocFile.WPL" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".wvx" ProgId="WMP11.AssocFile.WVX" ApplicationName="Windows Media Player" /&gt;
  &lt;Association Identifier=".xbm" ProgId="IrfanView.xbm" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".xpm" ProgId="IrfanView.xpm" ApplicationName="IrfanView 64-bit" /&gt;
  &lt;Association Identifier=".xps" ProgId="Windows.XPSReachViewer" ApplicationName="XPS Viewer" /&gt;
  &lt;Association Identifier=".xvid" ProgId="AppX6eg8h5sxqq90pv53845wmnbewywdqq5h" ApplicationName="Movies &amp;amp; TV" /&gt;
  &lt;Association Identifier=".zpl" ProgId="AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier="bingmaps" ProgId="AppXp9gkwccvk6fa6yyfq3tmsk8ws2nprk1p" ApplicationName="Maps" /&gt;
  &lt;Association Identifier="http" ProgId="ChromeHTML.BFATTW3WY5HWWRDPZHSSXN7MKY" ApplicationName="Google Chrome" /&gt;
  &lt;Association Identifier="https" ProgId="ChromeHTML.BFATTW3WY5HWWRDPZHSSXN7MKY" ApplicationName="Google Chrome" /&gt;
  &lt;Association Identifier="mailto" ProgId="Outlook.URL.mailto.15" ApplicationName="Outlook 2016" /&gt;
  &lt;Association Identifier="mswindowsmusic" ProgId="AppXtggqqtcfspt6ks3fjzyfppwc05yxwtwy" ApplicationName="Groove Music" /&gt;
  &lt;Association Identifier="mswindowsvideo" ProgId="AppX6w6n4f8xch1s3vzwf3af6bfe88qhxbza" ApplicationName="Movies &amp;amp; TV" /&gt;
&lt;/DefaultAssociations&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>grant_user_account_LogOnAsAService</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>grant_user_account_LogOnAsAService</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://superuser.com/questions/441022/in-windows-7-home-premium-is-it-possible-to-grant-a-user-account-the-log-on-as


you can assign the service logon right (SeServiceLogonRight) through the Service Manager (services.msc)

Open Service Manager
Choose the service in question and select "Properties"
In the "Log On"-tab then enter the username and password and press Apply-button.
It will display a message box with the following message:
The account "username" has been granted the Log On As Service right.

---------------------------------------------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Telnet_activate_it_in_Windows7</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Telnet_activate_it_in_Windows7</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.wikihow.com/Activate-Telnet-in-Windows-7

1] Open the Control Panel. By default, Telnet is not installed with Windows 7. 
	It will need to be 
	manually activated in order for you to use it. 
	You can do so through the Control Panel, which can be accessed from the Start menu.
	
2] Open "Programs and Features" or "Programs". The option available to you 
	will depend on whether your Control Panel is in Icon or Category view, 
	but they both take you to the same place.
	
3] Click the "Turn Windows features on or off" link. You may be asked for the Administrator password.

4] Find the "Telnet Client" entry. In the list of available features, 
	you will see an entry labeled Telnet Client. 
	You may have to scroll down to find it. 
	Check the box next to Telnet Client, and click OK.
    You may have to wait a minute or two for the client to be installed after selecting it.

5] Install Telnet through the command prompt. 
	If you'd rather do everything through the Command Prompt, 
	you can install Telnet with a quick command. 
	First, open the Command Prompt by typing cmd into the Run box. 
	At the command line, type pkgmgr /iu:"TelnetClient" and press ↵ Enter. 
	After a moment, you will be returned to the command prompt.[1]

    Restart the command prompt to begin using Telnet.

USING TELNET:


1] Open the Command Prompt.
	 Telnet runs through the Command Prompt. 
	 You can access the command prompt by pressing Win and typing cmd into the Run field.
	 
2] 	Start the Telnet client. Type telnet and press ↵ Enter to start Microsoft Telnet. 
	The Command Prompt will disappear, and you will be taken to the Telnet command line, displayed as Microsoft Telnet&gt;.
	 
3] Connect to a Telnet server. At the Telnet command line, type open serveraddress [port]. 
	You have successfully connected to the server when you receive either a welcome message or are prompted for your username and password.

    For example, to watch ASCII Star Wars, type open towel.blinkenlights.nl and press ↵ Enter.
    You can also start a connection directly from the Command Prompt by typing telnet serveraddress [port].

4] Close your Telnet session.Once you are finished administering your Telnet server, 
	you should close your connection before closing the window. 
	To do so, open the Telnet command line by pressing ^ Ctrl+]. 
	Type quit and press ↵ Enter to close the connection.[2]	 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Open_a_URL_in_a_Specific_Browser</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Open_a_URL_in_a_Specific_Browser</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>NOTE: see URI scheme snippet for more details and examples


http://stackoverflow.com/questions/5881383/can-i-force-a-link-to-open-in-a-specific-browser

if you are targeting your company's network it's possible to do this using custom protocol.

Your link then would look like: ie://opens_in_ie.com


Open_a_URL_in_a_Specific_Browser

https://msdn.microsoft.com/en-us/library/aa767914(VS.85).aspx

invoke another application to handle a custom URI scheme
To do so, register the existing application as a URI pluggable protocol handler and associate it with the custom URI scheme
Once the application has successfully launched, it can use command-line parameters to retrieve the URI that launched it. 


Registering the Application Handling the Custom URI Scheme
===========================================================


To register an application to handle a particular URI scheme, add a new key, 
	along with the appropriate subkeys and values, 
	to HKEY_CLASSES_ROOT. The root key must match the URI scheme that is being added. 

For instance, to add an "alert:" scheme, add an alert key to HKEY_CLASSES_ROOT, as follows:
------------------------------------
HKEY_CLASSES_ROOT
   alert
      URL Protocol = ""
------------------------------------
The URL Protocol string value indicates that this key declares a custom pluggable protocol handler. 
 Without this key, the handler application will not launch. The value should be an empty string.
 
 Keys should also be added for "DefaultIcon" and "shell". 
 
 The Default string value of the "DefaultIcon" key must be the file name to use as an icon for this new URI scheme.
 The string takes the form "path, iconindex" with a maximum length of MAX_PATH. 
 
 The name of the first key under the shell key should be an action verb, such as "open". Under this key, a "command" key 
 	or a "DDEEXEC" key indicate how the handler should be invoked.
 	
 Finally, the "Default" string value should contain the display name of the new URI scheme. 	 
 
 The following example shows how to register an application, alert.exe in this case, to handle the "alert" scheme.
 
 ------------------------------------------------------------------------
 HKEY_CLASSES_ROOT
   alert
      (Default) = "URL:Alert Protocol"
      URL Protocol = ""
      DefaultIcon
         (Default) = "alert.exe,1"
      shell
         open
            command
               (Default) = "C:\Program Files\Alert\alert.exe" "%1"
  ------------------------------------------------------------------------
  
  When a user clicks a link containing your custom URI scheme, 
  	Windows Internet Explorer launches the pluggable protocol handler registered for that URI scheme. 
  If the specified open command specified in the registry contains a %1 parameter, 
  	Internet Explorer passes the URI to the registered pluggable protocol handler application.
  	
  By adding the above settings to the registry, 
  	navigating to URIs such as alert:Hello%20World would cause an attempt to launch alert.exe with the complete URI on the command line. 
  	Internet Explorer percent-decodes the URI, 
  	but the Windows Run... command does not. 
  If a URI contains percent-encoded spaces, it may be split across more than one argument on the command line.	
  
  For example, if the link above is followed through Internet Explorer, the command line would be:
  
  "C:\Program Files\Alert\alert.exe" "alert:Hello World"</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>