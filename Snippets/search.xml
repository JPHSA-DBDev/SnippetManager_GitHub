<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Hierarchies</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Simple_Way_Generate_HierarchyID_from_Employee_Boss_table</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Hierarchies</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Simple_Way_Generate_HierarchyID_from_Employee_Boss_table</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--This is the simple way to map from employee/boss to Hierarchy 
-- but is not as universally applicable.
-- Use CTE's recursive query and ranking functions


create table [TABLE_personnel (parented)]
(
employee int identity primary key,
name nvarchar(50),
[hourly rate] money,
boss int -- parent in TABLE_personnel tree
);

--This is the way most of my data is organized
 set identity_insert dbo.[TABLE_personnel (parented)] on;
 insert into [TABLE_personnel (parented)] (employee, name, [hourly rate], [boss])
 values
 (1, 'Big Boss', 1000.00, 1),	--both the 'employee' and the 'boss' are the same - this is the convention for marking the root of the tree
 (2, 'Joe', 10.00, 1),
 (8, 'Mary', 20.00, 1),
 (14, 'Jack', 15.00, 1),
 (3, 'Jane', 10.00, 2),
 (5, 'Max', 35.00, 2),
 (9, 'Lynn', 15.00, 8),
 (10, 'Miles', 60.00, 8),
 (12, 'Sue', 15.00, 8),
 (15, 'June', 50.00, 14),
 (18, 'Jim', 55.00, 14),
 (19, 'Bob', 40.00, 14),
 (4, 'Jayne', 35.00, 3),
 (6, 'Ann', 45.00, 5),
 (7, 'Art', 10.00, 5),
 (11, 'Al', 70.00, 10),
 (13, 'Mike', 50.00, 12),
 (16, 'Marty', 55.00, 15),
 (17, 'Barb', 60.00, 15),
 (20, 'Bart', 1000.00, 19);
  set identity_insert dbo.[TABLE_personnel (parented)] off;
  
select * from [TABLE_personnel (parented)]
order by boss

-- add a column to the table to hold the 'hierarchyid'
alter table [TABLE_personnel (parented)]
add [node] hierarchyid;

-----------------------------------------------------------------------
-- fills all nodes, i.e. POPULATE the node field (i.e. [sib])
-- The Hierarchy ID consists of Hierarchy ID of the parent,
--		AND a suffix that marks the sibling uniquely among the other 
--		sibblings of the parent node
with CTE_SIBS
as
(select boss, 
		employee, 
		--Next: for all the children of the parent, assign a ordered row number, starting from one (1)
		--		for each set of sibblings
		--		then concatenate a '/' to the end of each
		cast(row_number() over (partition by boss order by employee) as varchar) + '/' as sib
from [TABLE_personnel (parented)]
where employee != boss		-- except for the boss, or root node
) 
--select * from CTE_SIBS

-----------------------------------------------------------------------
-- Find all the HiearchyID that don't have anything assigned to them yet
-- using a RECURSIVE QUERY
,[CTE_no_node]
as
(
	-- Part 1] The RECURSIVE QUERY requires the anchor records, or initializer
	--			In this case the root of the tree
	--		'GetRoot' function generates the Hierarchy ID for the root of the tree
	select 
			boss
			, employee
			, hierarchyid::GetRoot() as node   from [TABLE_personnel (parented)]
	where employee = boss	--&lt;== get the root
	
	UNION ALL
	
	--Part 2] The Recursive part, which is called over and over until there are no results
	--		  sometimes called the "fixed point"
	select 
			P.boss
			, P.employee
			, cast([CTE_no_node].node.ToString() + CTE_SIBS.sib as hierarchyid)  as node
	from 
			[TABLE_personnel (parented)] as P
			join 
			[CTE_no_node] 
			on P.boss = [CTE_no_node].employee
	
			join CTE_SIBS 
			on P.employee = CTE_SIBS.employee
)
--select node.ToString(), * from [CTE_no_node]

-----------------------------------------------------------------------

	update [TABLE_personnel (parented)] 
	set node = [CTE_no_node].node
	from  
		[TABLE_personnel (parented)] as P 
		join 
		[CTE_no_node]
		on P.employee = [CTE_no_node].employee

	select node.ToString(), * from [TABLE_personnel (parented)]
	order by boss
 
 

  ---------------------------------------------------------------------------
  OUTPUT - Original Table
  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  employee	name	hourly rate	boss
1	Big Boss	1000.00	1
2	Joe	10.00	1
8	Mary	20.00	1
14	Jack	15.00	1
5	Max	35.00	2
3	Jane	10.00	2
4	Jayne	35.00	3
6	Ann	45.00	5
7	Art	10.00	5
12	Sue	15.00	8
9	Lynn	15.00	8
10	Miles	60.00	8
11	Al	70.00	10
13	Mike	50.00	12
15	June	50.00	14
18	Jim	55.00	14
19	Bob	40.00	14
16	Marty	55.00	15
17	Barb	60.00	15
20	Bart	1000.00	19
----------------------------------------------------------------------------
FINAL TABLE
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
(No column name)	employee	name	hourly rate	boss	node
/		1	Big Boss	1000.00	1	0x
/1/		2	Joe			10.00	1	0x58
/2/		8	Mary		20.00	1	0x68
/3/		14	Jack		15.00	1	0x78
/1/2/	5	Max			35.00	2	0x5B40
/1/1/	3	Jane		10.00	2	0x5AC0
/1/1/1/	4	Jayne		35.00	3	0x5AD6
/1/2/1/	6	Ann			45.00	5	0x5B56
/1/2/2/	7	Art			10.00	5	0x5B5A
/2/3/	12	Sue			15.00	8	0x6BC0
/2/1/	9	Lynn		15.00	8	0x6AC0
/2/2/	10	Miles		60.00	8	0x6B40
/2/2/1/	11	Al			70.00	10	0x6B56
/2/3/1/	13	Mike		50.00	12	0x6BD6
/3/1/	15	June		50.00	14	0x7AC0
/3/2/	18	Jim			55.00	14	0x7B40
/3/3/	19	Bob			40.00	14	0x7BC0
/3/1/1/	16	Marty		55.00	15	0x7AD6
/3/1/2/	17	Barb		60.00	15	0x7ADA
/3/3/1/	20	Bart		1000.00	19	0x7BD6</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RecursiveQuery</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_Example___CreateDataSet</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RecursiveQuery</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_Example___CreateDataSet</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--01_Example___CreateDataSet



use test
go

-- ORG CHART example

create table [personnel (parented)]
(
employee int identity primary key,
name nvarchar(50),
[hourly rate] money,
boss int -- parent in personnel tree
);

--=====================================================================

set identity_insert dbo.[personnel (parented)] on;
insert into [personnel (parented)] (employee, name, [hourly rate], [boss])
values
(1, 'Big Boss', 1000.00, 1),
(2, 'Joe', 10.00, 1),
(8, 'Mary', 20.00, 1),
(14, 'Jack', 15.00, 1),
(3, 'Jane', 10.00, 2),
(5, 'Max', 35.00, 2),
(9, 'Lynn', 15.00, 8),
(10, 'Miles', 60.00, 8),
(12, 'Sue', 15.00, 8),
(15, 'June', 50.00, 14),
(18, 'Jim', 55.00, 14),
(19, 'Bob', 40.00, 14),
(4, 'Jayne', 35.00, 3),
(6, 'Ann', 45.00, 5),
(7, 'Art', 10.00, 5),
(11, 'Al', 70.00, 10),
(13, 'Mike', 50.00, 12),
(16, 'Marty', 55.00, 15),
(17, 'Barb', 60.00, 15),
(20, 'Bart', 1000.00, 19);
set identity_insert dbo.[personnel (parented)] off;

select * from [personnel (parented)]
order by boss

--=====================================================================
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Identity(1,1)_CopyDataToAnotherTable_retainIdentityDataInNewTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Identity(1,1)_CopyDataToAnotherTable_retainIdentityDataInNewTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
/*
You can't alter the existing columns for identity.

 

You have 2 options,

1. Create a new table with identity &amp; drop the existing table

2. Create a new column with identity &amp; drop the existing column

 

But take spl care when these columns have any constraints / relations.

*/
            For already craeted table Names
            Drop table Names
            Create table Names
            (
                        ID int,
                        Name varchar(50)
            )
 
            Insert Into Names Values(1,'SQL Server')
            Insert Into Names Values(2,'ASP.NET')
            Insert Into Names Values(4,'C#')
/*

Code Snippet
--In this Approach you can retain the existing data values on the newly created identity column
*/
CREATE TABLE dbo.Tmp_Names
            (
            Id int NOT NULL IDENTITY (1, 1),
            Name varchar(50) NULL
            )  ON [PRIMARY]
 
go
SET IDENTITY_INSERT dbo.Tmp_Names ON
 
go
IF EXISTS(SELECT * FROM dbo.Names)
            INSERT INTO dbo.Tmp_Names (Id, Name)
                        SELECT Id, Name FROM dbo.Names TABLOCKX
 
go
SET IDENTITY_INSERT dbo.Tmp_Names OFF
 
go
DROP TABLE dbo.Names</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Identity_Property_REMOVE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Identity_Property_REMOVE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

	
--You should first set it to ON, and in the end to OFF. 
--With ON it signalizes that you are about to do manual inserts on identity column

SET IDENTITY_INSERT [TABLE] ON
--And then back on:

SET IDENTITY_INSERT [TABLE] OFF
--This will allow you to enter manual data in the identity column.



====================================================================

The easiest way would be:

Open SQL Server Management Studio.
Locate Server &gt; DataBase &gt; Table.
Right Click on the Table &gt; Select Design.
In the design window, Highlight the column you want to modify.
In the Column Properties Window browse to Identity Specification &gt; Is Identity And set to No.
Go to the toolbar menu &gt; Table Designer &gt; Select Generate Change Script...
Walla, you got the requested script.


====================================================================
/*
If you need to keep the data in that column then create a new column on the table which is of the same type (but a different name),
 copy the data from the column you want to get rid of to the new one,
  drop the old column and rename the new. Complete example:
  */

CREATE TABLE test(col1 INT IDENTITY (1,1) NOT NULL, col2 VARCHAR(10) NULL);

ALTER TABLE test ADD col3 INT NULL;

UPDATE test SET col3 = col1;

ALTER TABLE test DROP COLUMN col1;

EXEC sp_rename 'dbo.test.col3', 'col1', 'COLUMN';

=====================================================================

--Make a new column

alter table users add newusernum int;

--Copy values over

update users set newusernum=usernum;

--Drop the old column

alter table users drop column usernum;

--Rename the new column to the old column name

EXEC sp_RENAME 'users.newusernum' , 'usernum', 'COLUMN';</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>INSERT_INTO</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>INSERT_INTO</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>INSERT INTO

----------------------------
SET IDENTITY_INSERT T14_NON_PCP_Institution ON
GO

INSERT INTO T1_Practice_TEMP ( 												--&lt;== Already existing table
								T14_PK, 
								NON_PCP_NameOfInstitution 
							  )
SELECT 
		T14_NON_PCP_Institution_ORIG.T14_PK, 
		T14_NON_PCP_Institution_ORIG.NON_PCP_NameOfInstitution
		
FROM T14_NON_PCP_Institution_ORIG;

SET IDENTITY_INSERT T14_NON_PCP_Institution off
GO
--------------------------
-- This worked cross DataBase:

use DB2_CRM
go


INSERT INTO [DB4_DocumentManagement].dbo.[T03_Header_PracticeDocuments] ( 			--&lt;== Already existing table
								DB2_T1_FK 
							  )
SELECT [T1_PK]
		
FROM [DB2_CRM].dbo.[T1_Practice];

--------------------------

INSERT INTO "table1" ("column1", "column2", ...)
SELECT "column3", "column4", ...
FROM "table2"


------

INSERT INTO Store_Information (store_name, Sales, Date)							--&lt;== Already existing table
SELECT store_name, Sales, Date
FROM Sales_Information
WHERE Year(Date) = 1998



------

INSERT INTO table																--&lt;== Already existing table
(column-1, column-2, ... column-n)
VALUES
(value-1, value-2, ... value-n);

//////////////////////////////////////

--prj_1027_403_InsertInto_EnumNameSpace_forAllocationTable.sql

use DB2_CRM
go

INSERT INTO [DB2_CRM].[dbo].[EnumNameSpace]
           (
				[EnumNameSpace]
				,[Notes]
			)
     VALUES
           ('Accounting_Effective_Change_e28','Hire, Terminate, Position_Change, Opening')
           ,('Accounting_ParentGroup_e29', 'Care_Managment, Support_Staff, Program_Coordination, Administration, Admin_Support_Staff, ADMIN_ASSIST/PHARM_TECH, Pharmacy, QI/Data, Contract Positions ')
           ,('Accounting_ChildGroup_e30', 'Care_Managers, Team_Leaders, Support_Staff, Program_Coordination, Administration, Admin_Support_Staff, ADMIN_ASSIST/PHARM_TECH, Pharmacy, QI/Data, Contract Positions ')

GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ModifyAColumn_of_a_Table_With_Relationships</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ModifyAColumn_of_a_Table_With_Relationships</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>ChangeAColumnInALinkedTable

--  Make a change to an SQL Table (e.g. T12_NotEmployees) that has relationships
--   This is a simple example, of changing the field "Notes" from ntext to nvarchar(max), I also changed the length of MI field
--    Otherwise it would require more extensive scripting

==============================================================
-- 1] Get list of tables linked to the target table
==============================================================
--		a) T8_Contacts_Details
--		b) T7_Contact_History
--		c) LNK02_T14_T12_T13
--		d) LNK01_T5_T12_T13
==============================================================
-- 2] Copy the Target table to a copy
==============================================================
==============================================================
	--	2a) Create the "COPY" table, without all the links
==============================================================
	--	   Change the PK, so it is not an Identity
	--	   Drop the "_RowVersion" field
	-- 	   If possible, implement the change to the COPY
	--	    	In this case Notes was: [Notes] [ntext] NULL,
	--			and I am changing it to: 	[Notes] [nvarchar](max) NULL,
==============================================================
-- TEMP_Create_T12_NotEmployees_COPY.sql


USE [DB2_CRM]
GO

/****** Object:  Table [dbo].[T12_NotEmployees]    Script Date: 05/07/2012 13:43:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[T12_NotEmployees_COPY](
	[T12_PK] [int]  NOT NULL,		--IDENTITY(1,1)
	[LAST_NAME] [nvarchar](255) NULL,
	[FIRST_NAME] [nvarchar](255) NULL,
	[MI] [nvarchar](255) NULL,
	[Title] [nvarchar](255) NULL,
	[nickname] [nvarchar](255) NULL,
	[Position] [int] NULL,
	[Notes] [ntext] NULL,    --Could make this varchar(max) right here
	) ON [PRIMARY]
--				,
-- CONSTRAINT [T12_NotEmployees$T12_NotEmployees_PK] PRIMARY KEY NONCLUSTERED 
--(
--	[T12_PK] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--) ON [PRIMARY]


--GO

--EXEC sys.sp_addextendedproperty @name=N'Position_RowSource', @value=N'SELECT vw_002__Enum., vw_002__Enum.
--FROM vw_002__Enum
--WHERE (((vw_002__Enum.)=''Practice_PositionInPractice''))
--ORDER BY vw_002__Enum.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'T13_NotEmployees_Practice_Details', @level2type=N'COLUMN',@level2name=N'Position'
--GO

==============================================================

 	--	2b)Insert the original data into the COPY table

==============================================================

--TEMP_InsertFromT12_to_T12_NotEmployees_COPY.sql


SET IDENTITY_INSERT T12_NotEmployees_COPY ON
GO
use DB2_CRM
go
INSERT INTO T12_NotEmployees_COPY ( 
									[T12_PK],
									[LAST_NAME],
									[FIRST_NAME],
									[MI],
									[Title],
									[nickname],
									[Position],
									[Notes]
									)
SELECT 
									[T12_PK],
									[LAST_NAME],
									[FIRST_NAME],
									[MI] ,
									[Title],
									[nickname],
									[Position],
									[Notes]

FROM T12_NotEmployees;

SET IDENTITY_INSERT T12_NotEmployees_COPY off
GO

==============================================================

-- 3] Drop the constraints from each table to the Target Table
==============================================================

--TEMP_DropConstraints_For_T12.sql

USE [DB2_CRM]
GO

---- A] Contraints on first table: LNK01_T5_T12_T13
---------------------------------------------------

ALTER  TABLE [dbo].[LNK01_T5_T12_T13] DROP [LNK01_T5_T12_T13_FK_00]
GO

------------------------------------------------------------------------
---- This is the original statement that created the extended property:

----EXEC sys.sp_addextendedproperty 
----	@name=N'MS_SSMA_SOURCE', 
----	@value=N'prj_8011_v8c_PrimaryCareProvidorListy.[LNK01_T5_T12_T13].[T12_FK]' , 
----	@level0type=N'SCHEMA',
----	@level0name=N'dbo', 
----	@level1type=N'TABLE',
----	@level1name=N'LNK01_T5_T12_T13', 
----	@level2type=N'COLUMN',
----	@level2name=N'T12_FK'
------------------------------------------------------------------------

EXEC sp_dropextendedproperty 
	@name=N'MS_SSMA_SOURCE', 
	@level0type=N'SCHEMA',
	@level0name=N'dbo', 
	@level1type=N'TABLE',
	@level1name=N'LNK01_T5_T12_T13', 
	@level2type=N'COLUMN',
	@level2name=N'T12_FK'
 
  
GO

---- B] Contraints on second table: [LNK02_T14_T12_T13]
---------------------------------------------------
ALTER TABLE [dbo].[LNK02_T14_T12_T13]  DROP [LNK02_T14_T12_T13_FK_00]

GO

---- C] Contraints on second table: [LNK02_T14_T12_T13]
---------------------------------------------------
ALTER TABLE [dbo].[T7_Contact_History]  DROP [T7_Contact_History_FK_00] 

GO
---- D] Contraints on second table: [T8_Contacts_Details]
---------------------------------------------------
ALTER TABLE [dbo].[T8_Contacts_Details]  DROP [T8_Contacts_Details_FK_00] 

GO

==============================================================

-- For each of those tables get the script that created it, and has the link statements

==============================================================

-- 4] I used the GUI to delete the Target Table
==============================================================


==============================================================

-- 5] Recreate the Target Table
==============================================================


--prj_8011_CreateTable_T12_NotEmployees.sql

USE [DB2_CRM]
GO



IF OBJECT_ID('dbo.T12_NotEmployees') IS NOT NULL
    DROP TABLE dbo.T12_NotEmployees
    
    
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[T12_NotEmployees](
	[T12_PK] [int] IDENTITY(1,1) NOT NULL,
	[LAST_NAME] [nvarchar](255) NULL,
	[FIRST_NAME] [nvarchar](255) NULL,
	[MI] [nvarchar](25) NULL,			-- 6/8/2012 changed from 255 to 25
	[Title] [nvarchar](255) NULL,
	[nickname] [nvarchar](255) NULL,
	[Position] [int] NULL,
	[Notes] [nvarchar] (max) NULL,			-- 6/8/2012 changed from [ntext] to [nvarchar] (max
	[T12_NotEmployees_RowVersion] [timestamp] NULL,
 CONSTRAINT [T12_NotEmployees$T12_NotEmployees_PK] PRIMARY KEY NONCLUSTERED 
(
	[T12_PK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


GO



==============================================================

-- 5] Insert from the COPY to the Target Table
==============================================================


SET IDENTITY_INSERT T12_NotEmployees ON
GO
use DB2_CRM
go
INSERT INTO T12_NotEmployees ( 
									[T12_PK],
									[LAST_NAME],
									[FIRST_NAME],
									[MI],
									[Title],
									[nickname],
									[Position],
									[Notes]
									)
SELECT 
									[T12_PK],
									[LAST_NAME],
									[FIRST_NAME],
									[MI] ,
									[Title],
									[nickname],
									[Position],
									[Notes]

FROM T12_NotEmployees_COPY;

SET IDENTITY_INSERT T12_NotEmployees off
GO


-- \\\\\\\\\\\\\\\\\NTEXT to VARCHAR conversion issue \\\\\\\\\

-- From: http://geekswithblogs.net/johnsPerfBlog/archive/2008/04/16/ntext-vs-nvarcharmax-in-sql-2005.aspx
-- need to fix ntext to varchar conversions

UPDATE T12_NotEmployees SET Notes = Notes

--This forces it to re-write the values and place them into the field correctly



-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

==============================================================
-- 6] rebuild the contraints : LNK01_T5_T12_T13
==============================================================

--prj_8011_CreateTable_LNK01_T5_T12_T13.sql

--USE [DB2_CRM]
--GO


--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [dbo].[LNK01_T5_T12_T13](
--	[LNK01_PK] [int] IDENTITY(1,1) NOT NULL,
--	[T5_FK] [int] NULL,
--	[T12_FK] [int] NULL,
--	[T13_FK] [int] NULL,
--	[LNK01_T5_T12_T13_RowVersion] [timestamp] NULL,
-- CONSTRAINT [LNK01_T5_T12_T13$LNK01_T5_T12_T13_PK] PRIMARY KEY NONCLUSTERED 
--(
--	[LNK01_PK] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--) ON [PRIMARY]

--GO

--EXEC sys.sp_addextendedproperty @name=N'MS_SSMA_SOURCE', @value=N'prj_8011_v8c_PrimaryCareProvidorListy.[LNK01_T5_T12_T13].[LNK01_PK]' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LNK01_T5_T12_T13', @level2type=N'COLUMN',@level2name=N'LNK01_PK'
--GO

--EXEC sys.sp_addextendedproperty @name=N'MS_SSMA_SOURCE', @value=N'prj_8011_v8c_PrimaryCareProvidorListy.[LNK01_T5_T12_T13].[T5_FK]' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LNK01_T5_T12_T13', @level2type=N'COLUMN',@level2name=N'T5_FK'
--GO

EXEC sys.sp_addextendedproperty @name=N'MS_SSMA_SOURCE', @value=N'prj_8011_v8c_PrimaryCareProvidorListy.[LNK01_T5_T12_T13].[T12_FK]' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LNK01_T5_T12_T13', @level2type=N'COLUMN',@level2name=N'T12_FK'
GO

--EXEC sys.sp_addextendedproperty @name=N'MS_SSMA_SOURCE', @value=N'prj_8011_v8c_PrimaryCareProvidorListy.[LNK01_T5_T12_T13].[T13_FK]' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LNK01_T5_T12_T13', @level2type=N'COLUMN',@level2name=N'T13_FK'
--GO

--EXEC sys.sp_addextendedproperty @name=N'MS_SSMA_SOURCE', @value=N'prj_8011_v8c_PrimaryCareProvidorListy.[LNK01_T5_T12_T13]' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LNK01_T5_T12_T13'
--GO

ALTER TABLE [dbo].[LNK01_T5_T12_T13]  WITH CHECK ADD  CONSTRAINT [LNK01_T5_T12_T13_FK_00] FOREIGN KEY([T12_FK])
REFERENCES [dbo].[T12_NotEmployees] ([T12_PK])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[LNK01_T5_T12_T13] CHECK CONSTRAINT [LNK01_T5_T12_T13_FK_00]
GO

--ALTER TABLE [dbo].[LNK01_T5_T12_T13]  WITH CHECK ADD  CONSTRAINT [LNK01_T5_T12_T13_FK_02] FOREIGN KEY([T5_FK])
--REFERENCES [dbo].[T5_Practice_Branch] ([T5_PK])
--ON UPDATE CASCADE
--ON DELETE CASCADE
--GO

--ALTER TABLE [dbo].[LNK01_T5_T12_T13] CHECK CONSTRAINT [LNK01_T5_T12_T13_FK_02]
--GO

==============================================================
-- 7] rebuild the contraints : T8_Contacts_Details
==============================================================
--prj_8011_CreateTable_T8_Contacts_Details.sql
USE [DB2_CRM]
GO

--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [dbo].[T8_Contacts_Details](
--	[T8_PK] [int] IDENTITY(1,1) NOT NULL,
--	[T12_FK] [int] NULL,
--	[Contact_Detail] [nvarchar](255) NULL,
--	[Contact_Type] [int] NULL,
--	[Contact_Note] [ntext] NULL,
--	[T8_Contacts_Details_RowVersion] [timestamp] NULL,
-- CONSTRAINT [T8_Contacts_Details$T8_Contacts_Details_PK] PRIMARY KEY NONCLUSTERED 
--(
--	[T8_PK] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

--GO

ALTER TABLE [dbo].[T8_Contacts_Details]  WITH CHECK ADD  CONSTRAINT [T8_Contacts_Details_FK_00] FOREIGN KEY([T12_FK])
REFERENCES [dbo].[T12_NotEmployees] ([T12_PK])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[T8_Contacts_Details] CHECK CONSTRAINT [T8_Contacts_Details_FK_00]
GO

==============================================================
-- 7] rebuild the contraints : LNK02_T14_T12_T13
==============================================================

--prj_8011_CreateTable_LNK02_T14_T12_T13.sql

USE [DB2_CRM]
GO


--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [dbo].[LNK02_T14_T12_T13](
--	[LNK02_PK] [int] IDENTITY(1,1) NOT NULL,
--	[T14_FK] [int] NULL,
--	[T12_FK] [int] NULL,
--	[T13_FK] [int] NULL,
--	[LNK02_T14_T12_T13_RowVersion] [timestamp] NULL,
-- CONSTRAINT [LNK02_T14_T12_T13$LNK02_T14_T12_T13_PK] PRIMARY KEY NONCLUSTERED 
--(
--	[LNK02_PK] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--) ON [PRIMARY]

--GO

ALTER TABLE [dbo].[LNK02_T14_T12_T13]  WITH CHECK ADD  CONSTRAINT [LNK02_T14_T12_T13_FK_00] FOREIGN KEY([T12_FK])
REFERENCES [dbo].[T12_NotEmployees] ([T12_PK])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[LNK02_T14_T12_T13] CHECK CONSTRAINT [LNK02_T14_T12_T13_FK_00]
GO

--ALTER TABLE [dbo].[LNK02_T14_T12_T13]  WITH CHECK ADD  CONSTRAINT [LNK02_T14_T12_T13_FK_02] FOREIGN KEY([T14_FK])
--REFERENCES [dbo].[T14_NotPractice] ([T14_PK])
--ON UPDATE CASCADE
--ON DELETE CASCADE
--GO

--ALTER TABLE [dbo].[LNK02_T14_T12_T13] CHECK CONSTRAINT [LNK02_T14_T12_T13_FK_02]
--GO


==============================================================
-- 8] rebuild the contraints : [T7_Contact_History]
==============================================================
--prj_8011_CreateTable_T7_Contact_History.sql

USE [DB2_CRM]
GO


--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [dbo].[T7_Contact_History](
--	[T7_PK] [int] IDENTITY(1,1) NOT NULL,
--	[T12_FK] [int] NULL,
--	[Note] [ntext] NULL,
--	[DateCreated] [datetime] NULL,
--	[T7_Contact_History_RowVersion] [timestamp] NULL,
-- CONSTRAINT [T7_Contact_History$T7_Contact_History_PK] PRIMARY KEY NONCLUSTERED 
--(
--	[T7_PK] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

--GO

ALTER TABLE [dbo].[T7_Contact_History]  WITH CHECK ADD  CONSTRAINT [T7_Contact_History_FK_00] FOREIGN KEY([T12_FK])
REFERENCES [dbo].[T12_NotEmployees] ([T12_PK])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[T7_Contact_History] CHECK CONSTRAINT [T7_Contact_History_FK_00]
GO

--ALTER TABLE [dbo].[T7_Contact_History] ADD  DEFAULT (getdate()) FOR [DateCreated]
--GO



</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>