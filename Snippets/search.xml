<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>GetUserGroups_Given_UserName</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>GetUserGroups_Given_UserName</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


//--Usage of SP

use IT_DEPT
go

EXEC prj_0014_SP_206_UseTheSP__GetLdapUserGroups_Given_UserName 'glenng'


///////////////--OUTPUT

--LdapGroup
===========
--Administrators
--BOD_Reports
--Construction Div
--Denied RODC Password Replication Group
--Domain Admins
--Everyone-Barriere
--Exchange Organization Administrators
--Exchange Public Folder Administrators
--Exchange Recipient Administrators
--Exchange View-Only Administrators
--g PeopleTrak users
--g_Board_Files
--g_citrix_explorer
--g_ECLIPSE_Admin
--g_SELA_folder
--g_SQL_Level1
--gCitrix PeopleTrak
--HRPhotos
--New Orleans
--NOLA
--PlantDB_Users
--REPORT_test_report
--Websense Barriere Te

///////////////-- 2nd SP (calls the first SP)

use IT_DEPT
go

create PROCEDURE [dbo].[prj_0014_SP_206_UseTheSP__GetLdapUserGroups_Given_UserName]
    (
    @LdapUsername NVARCHAR(max)
    )
AS
BEGIN

		DECLARE @UserGroup table (LdapGroup nvarchar(max))
		INSERT INTO @UserGroup exec [prj_0014_SP_205_GetLdapUserGroups_Given_UserName] @LdapUsername

		SELECT * from @UserGroup

END


///////////////-- First SP:


--prj_0014_SP_205_GetLdapUserGroups_Given_UserName.sql
--from: http://stackoverflow.com/questions/13914698/query-ad-group-membership-recursively-through-sql

use IT_DEPT
go

alter PROCEDURE [dbo].[GetLdapUserGroups_Given_UserName]
    (
    @LdapUsername NVARCHAR(max)
    )
AS
BEGIN
		DECLARE @Query NVARCHAR(max), @Path NVARCHAR(max)

		SET @Query = '
			SELECT @Path = distinguishedName
			FROM OPENQUERY(ADSI, ''
				SELECT distinguishedName 
				FROM ''''LDAP://DC=barriere,DC=COM''''
				WHERE 
					objectClass = ''''user'''' AND
					sAMAccountName = ''''' + @LdapUsername + '''''
			'')
		'
		
		EXEC sp_executesql @Query, N'@Path NVARCHAR(max) OUTPUT', @Path = @Path OUTPUT 

		  SET @Query = '
			SELECT cn AS [LdapGroup]
			FROM OPENQUERY (ADSI, ''&lt;LDAP://barriere.COM&gt;;
			(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:= ' + @Path + '));
			cn, adspath;subtree'')
			ORDER BY cn;
		'

		EXEC sp_executesql @Query
END</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>List_of_Attributes_available_with_OPENQUERY_of_Linked_Server</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>List_of_Attributes_available_with_OPENQUERY_of_Linked_Server</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>from: http://www.kouti.com/tables/userattributes.htm

Attr LDAP Name
===============
accountExpires
accountNameHistory
aCSPolicyName
adminCount
adminDescription
adminDisplayName
allowedAttributes
allowedAttributesEffective
allowedChildClasses
allowedChildClassesEffective
altSecurityIdentities
assistant
badPasswordTime
badPwdCount
bridgeheadServerListBL
c
canonicalName
cn
co
codePage
comment
company
controlAccessRights
countryCode
createTimeStamp
dBCSPwd
defaultClassStore
department
description
desktopProfile
destinationIndicator
directReports
displayName
displayNamePrintable
distinguishedName
division
dSASignature
dSCorePropagationData
dynamicLDAPServer
employeeID
extensionName
facsimileTelephoneNumber
flags
fromEntry
frsComputerReferenceBL
fRSMemberReferenceBL
fSMORoleOwner
garbageCollPeriod
generationQualifier
givenName
groupMembershipSAM
groupPriority
groupsToIgnore
homeDirectory
homeDrive
homePhone
homePostalAddress
info
initials
instanceType
internationalISDNNumber
ipPhone
isCriticalSystemObject
isDeleted
isPrivilegeHolder
l
lastKnownParent
lastLogoff
lastLogon
legacyExchangeDN
lmPwdHistory
localeID
lockoutTime
logonCount
logonHours
logonWorkstation
mail
managedObjects
manager
masteredBy
maxStorage
memberOf
mhsORAddress
middleName
mobile
modifyTimeStamp
mS-DS-ConsistencyChildCount
mS-DS-ConsistencyGuid
mS-DS-CreatorSID
mSMQDigests
mSMQDigestsMig
mSMQSignCertificates
mSMQSignCertificatesMig
msNPAllowDialin
msNPCallingStationID
msNPSavedCallingStationID
msRADIUSCallbackNumber
msRADIUSFramedIPAddress
msRADIUSFramedRoute
msRADIUSServiceType
msRASSavedCallbackNumber
msRASSavedFramedIPAddress
msRASSavedFramedRoute
name
netbootSCPBL
networkAddress
nonSecurityMemberBL
ntPwdHistory
nTSecurityDescriptor
o
objectCategory
objectClass
objectGUID
objectSid
objectVersion
operatorCount
otherFacsimileTelephoneNumber
otherHomePhone
otherIpPhone
otherLoginWorkstations
otherMailbox
otherMobile
otherPager
otherTelephone
otherWellKnownObjects
ou
pager
partialAttributeDeletionList
partialAttributeSet
personalTitle
physicalDeliveryOfficeName
possibleInferiors
postalAddress
postalCode
postOfficeBox
preferredDeliveryMethod
preferredOU
primaryGroupID
primaryInternationalISDNNumber
primaryTelexNumber
profilePath
proxiedObjectName
proxyAddresses
pwdLastSet
queryPolicyBL
registeredAddress
replPropertyMetaData
replUpToDateVector
repsFrom
repsTo
revision
rid
sAMAccountName
sAMAccountType
scriptPath
sDRightsEffective
securityIdentifier
seeAlso
serverReferenceBL
servicePrincipalName
showInAddressBook
showInAdvancedViewOnly
sIDHistory
siteObjectBL
sn
st
street
streetAddress
subRefs
subSchemaSubEntry
supplementalCredentials
systemFlags
telephoneNumber
teletexTerminalIdentifier
telexNumber
terminalServer
textEncodedORAddress
thumbnailLogo
thumbnailPhoto
title
tokenGroups
tokenGroupsGlobalAndUniversal
tokenGroupsNoGCAcceptable
unicodePwd
url
userAccountControl
userCert
userCertificate
userParameters
userPassword
userPrincipalName
userSharedFolder
userSharedFolderOther
userSMIMECertificate
userWorkstations
uSNChanged
uSNCreated
uSNDSALastObjRemoved
USNIntersite
uSNLastObjRem
uSNSource
wbemPath
wellKnownObjects
whenChanged
whenCreated
wWWHomePage
x121Address
207
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Adobe</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Block Adobe Activation using the Hosts file </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Adobe</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Block Adobe Activation using the Hosts file </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>HowTo: Block Adobe Activation using the Hosts file 


Disable your antivirus (only for editing the hosts file). 
&gt;&gt; Skip this part if you don't think is necessary, but in some
cases the hosts file can't be edited with the antivirus enabled.

C:\WINDOWS\System32\drivers\etc\hosts 

- Now append these lines at the end of the hosts file:

127.0.0.1 3dns-2.adobe.com #192.150.22.22
127.0.0.1 3dns-3.adobe.com #192.150.14.21
127.0.0.1 3dns-4.adobe.com #192.150.18.247
127.0.0.1 3dns-5.adobe.com #192.150.22.46
127.0.0.1 adobe-dns.adobe.com #192.150.11.30
127.0.0.1 adobe-dns-2.adobe.com #192.150.11.247
127.0.0.1 adobe-dns-3.adobe.com #192.150.22.30
127.0.0.1 adobe.activate.com #69.175.22.26
127.0.0.1 activate.adobe.com #192.150.22.40
127.0.0.1 activate.wip3.adobe.com #192.150.22.40
127.0.0.1 activate.wip4.adobe.com #192.150.22.40
127.0.0.1 activate-sea.adobe.com #192.150.22.40
127.0.0.1 activate-sjc0.adobe.com #192.150.14.69
127.0.0.1 ereg.adobe.com #192.150.18.103
127.0.0.1 ereg.wip3.adobe.com #192.150.18.63
127.0.0.1 ereg.wip4.adobe.com #192.150.18.103
127.0.0.1 practivate.adobe.com #192.150.18.54
127.0.0.1 www.wip3.adobe.com #192.150.8.60
127.0.0.1 www.wip4.adobe.com #192.150.18.200
127.0.0.1 www.adobeereg.com #75.125.24.83
127.0.0.1 adobeereg.com #207.66.2.10
127.0.0.1 hl2rcv.adobe.com #192.150.14.174
127.0.0.1 wwis-dubc1-vip30.adobe.com #192.150.8.30
127.0.0.1 wwis-dubc1-vip31.adobe.com #192.150.8.31
127.0.0.1 wwis-dubc1-vip32.adobe.com #192.150.8.32
127.0.0.1 wwis-dubc1-vip33.adobe.com #192.150.8.33
127.0.0.1 wwis-dubc1-vip34.adobe.com #192.150.8.34
127.0.0.1 wwis-dubc1-vip35.adobe.com #192.150.8.35
127.0.0.1 wwis-dubc1-vip36.adobe.com #192.150.8.36
127.0.0.1 wwis-dubc1-vip37.adobe.com #192.150.8.37
127.0.0.1 wwis-dubc1-vip38.adobe.com #192.150.8.38
127.0.0.1 wwis-dubc1-vip39.adobe.com #192.150.8.39
127.0.0.1 wwis-dubc1-vip40.adobe.com #192.150.8.40
127.0.0.1 wwis-dubc1-vip41.adobe.com #192.150.8.41
127.0.0.1 wwis-dubc1-vip42.adobe.com #192.150.8.42
127.0.0.1 wwis-dubc1-vip43.adobe.com #192.150.8.43
127.0.0.1 wwis-dubc1-vip44.adobe.com #192.150.8.44
127.0.0.1 wwis-dubc1-vip45.adobe.com #192.150.8.45
127.0.0.1 wwis-dubc1-vip46.adobe.com #192.150.8.46
127.0.0.1 wwis-dubc1-vip47.adobe.com #192.150.8.47
127.0.0.1 wwis-dubc1-vip48.adobe.com #192.150.8.48
127.0.0.1 wwis-dubc1-vip49.adobe.com #192.150.8.49
127.0.0.1 wwis-dubc1-vip50.adobe.com #192.150.8.50
127.0.0.1 wwis-dubc1-vip51.adobe.com #192.150.8.51
127.0.0.1 wwis-dubc1-vip52.adobe.com #192.150.8.52
127.0.0.1 wwis-dubc1-vip53.adobe.com #192.150.8.53
127.0.0.1 wwis-dubc1-vip54.adobe.com #192.150.8.54
127.0.0.1 wwis-dubc1-vip55.adobe.com #192.150.8.55
127.0.0.1 wwis-dubc1-vip56.adobe.com #192.150.8.56
127.0.0.1 wwis-dubc1-vip57.adobe.com #192.150.8.57
127.0.0.1 wwis-dubc1-vip58.adobe.com #192.150.8.58
127.0.0.1 wwis-dubc1-vip59.adobe.com #192.150.8.59
127.0.0.1 wwis-dubc1-vip60.adobe.com #192.160.8.60
127.0.0.1 wwis-dubc1-vip61.adobe.com #192.160.8.61
127.0.0.1 wwis-dubc1-vip62.adobe.com #192.160.8.62
127.0.0.1 wwis-dubc1-vip63.adobe.com #192.160.8.63
127.0.0.1 wwis-dubc1-vip64.adobe.com #192.160.8.64
127.0.0.1 wwis-dubc1-vip65.adobe.com #192.160.8.65
127.0.0.1 wwis-dubc1-vip66.adobe.com #192.160.8.66
127.0.0.1 wwis-dubc1-vip67.adobe.com #192.160.8.67
127.0.0.1 wwis-dubc1-vip68.adobe.com #192.160.8.68
127.0.0.1 wwis-dubc1-vip69.adobe.com #192.160.8.69
127.0.0.1 wwis-dubc1-vip70.adobe.com #192.170.8.70
127.0.0.1 wwis-dubc1-vip71.adobe.com #192.170.8.71
127.0.0.1 wwis-dubc1-vip72.adobe.com #192.170.8.72
127.0.0.1 wwis-dubc1-vip73.adobe.com #192.170.8.73
127.0.0.1 wwis-dubc1-vip74.adobe.com #192.170.8.74
127.0.0.1 wwis-dubc1-vip75.adobe.com #192.170.8.75
127.0.0.1 wwis-dubc1-vip76.adobe.com #192.170.8.76
127.0.0.1 wwis-dubc1-vip77.adobe.com #192.170.8.77
127.0.0.1 wwis-dubc1-vip78.adobe.com #192.170.8.78
127.0.0.1 wwis-dubc1-vip79.adobe.com #192.170.8.79
127.0.0.1 wwis-dubc1-vip80.adobe.com #192.180.8.80
127.0.0.1 wwis-dubc1-vip81.adobe.com #192.180.8.81
127.0.0.1 wwis-dubc1-vip82.adobe.com #192.180.8.82
127.0.0.1 wwis-dubc1-vip83.adobe.com #192.180.8.83
127.0.0.1 wwis-dubc1-vip84.adobe.com #192.180.8.84
127.0.0.1 wwis-dubc1-vip85.adobe.com #192.180.8.85
127.0.0.1 wwis-dubc1-vip86.adobe.com #192.180.8.86
127.0.0.1 wwis-dubc1-vip87.adobe.com #192.180.8.87
127.0.0.1 wwis-dubc1-vip88.adobe.com #192.180.8.88
127.0.0.1 wwis-dubc1-vip89.adobe.com #192.180.8.89
127.0.0.1 wwis-dubc1-vip90.adobe.com #192.190.8.90
127.0.0.1 wwis-dubc1-vip91.adobe.com #192.190.8.91
127.0.0.1 wwis-dubc1-vip92.adobe.com #192.190.8.92
127.0.0.1 wwis-dubc1-vip93.adobe.com #192.190.8.93
127.0.0.1 wwis-dubc1-vip94.adobe.com #192.190.8.94
127.0.0.1 wwis-dubc1-vip95.adobe.com #192.190.8.95
127.0.0.1 wwis-dubc1-vip96.adobe.com #192.190.8.96
127.0.0.1 wwis-dubc1-vip97.adobe.com #192.190.8.97
127.0.0.1 wwis-dubc1-vip98.adobe.com #192.190.8.98
127.0.0.1 wwis-dubc1-vip99.adobe.com #192.190.8.99
127.0.0.1 wwis-dubc1-vip100.adobe.com #192.1100.8.100
127.0.0.1 wwis-dubc1-vip101.adobe.com #192.1100.8.101
127.0.0.1 wwis-dubc1-vip102.adobe.com #192.1100.8.102
127.0.0.1 wwis-dubc1-vip103.adobe.com #192.1100.8.103
127.0.0.1 wwis-dubc1-vip104.adobe.com #192.1100.8.104
127.0.0.1 wwis-dubc1-vip105.adobe.com #192.1100.8.105
127.0.0.1 wwis-dubc1-vip106.adobe.com #192.1100.8.106
127.0.0.1 wwis-dubc1-vip107.adobe.com #192.1100.8.107
127.0.0.1 wwis-dubc1-vip108.adobe.com #192.1100.8.108
127.0.0.1 wwis-dubc1-vip109.adobe.com #192.1100.8.109
127.0.0.1 wwis-dubc1-vip110.adobe.com #192.1110.8.110
127.0.0.1 wwis-dubc1-vip111.adobe.com #192.1110.8.111
127.0.0.1 wwis-dubc1-vip112.adobe.com #192.1110.8.112
127.0.0.1 wwis-dubc1-vip113.adobe.com #192.1110.8.113
127.0.0.1 wwis-dubc1-vip114.adobe.com #192.1110.8.114
127.0.0.1 wwis-dubc1-vip115.adobe.com #192.1110.8.115
127.0.0.1 wwis-dubc1-vip116.adobe.com #192.1110.8.116
127.0.0.1 wwis-dubc1-vip117.adobe.com #192.1110.8.117
127.0.0.1 wwis-dubc1-vip118.adobe.com #192.1110.8.118
127.0.0.1 wwis-dubc1-vip119.adobe.com #192.1110.8.119
127.0.0.1 wwis-dubc1-vip120.adobe.com #192.1120.8.120
127.0.0.1 wwis-dubc1-vip121.adobe.com #192.1120.8.121
127.0.0.1 wwis-dubc1-vip122.adobe.com #192.1120.8.122
127.0.0.1 wwis-dubc1-vip123.adobe.com #192.1120.8.123
127.0.0.1 wwis-dubc1-vip124.adobe.com #192.1120.8.124
127.0.0.1 wwis-dubc1-vip125.adobe.com #192.1120.8.125



TIP*: If you see a popup when logging into your Adobe account:

A) Open any folder and click "Organize" then "Folder and Search Options."



B) Click View and untick "Hide extensions for known file types" -&gt; OK.

C) Go to the following directory:
&gt; For x32 OS -&gt; go to: C:\Program Files\Common Files\Adobe\OOBE\PDApp\core
&gt; For x64 OS -&gt; go to: C:\Program Files (x86)\Common Files\Adobe\OOBE\PDApp\core

D) Rename the file "PDapp.exe" to "PDapp.exe.old"

E) That's it, now you won't get that annoying login screen anymore.


if you feel something great
than please comment or give at-least thankx </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Adobe</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Distiller Error: invalidfont</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Adobe</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Distiller Error: invalidfont</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Control Panel =&gt; small icons =&gt;  "Devices and Printers"
right click on Adobe PDF printer choose printer preferences 
	from Adobe PDF settings tab uncheck
	 "Rely on system fonts; do not use documents fonts"


Start Acrobat Distiller and select "Font locations" within its "Settings" menu. 
Remove  all the font folders listed there, 
	except for the one that points to a subfolder  called "/Resource/Font" 
	within the Acrobat application folder. 
Acrobat Distiller will then search your hard disk for all  font locations. 
Close the dialog and restart Acrobat Distiller. Now the error should no longer appear.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Aptana</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_Aptana</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Aptana</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_Aptana</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Aptana

Aptana
.................................
Work Space: C:\AptanaWorkSpace
File =&gt; New =&gt; Web project

File -&gt; Import, then as the source, I select : General -&gt; "Existing Folder as New Project". 
[n]
Select folder: W:\IT\External_Web_Site\Jackie
Web-primary
[Finish]
.................................
To Preview =&gt; little eye Icon
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_EntityFramework</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Simple_DropDown_GridView_readMe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_EntityFramework</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Simple_DropDown_GridView_readMe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_Simple_DropDown_GridView_

without QueryExtender, just hard-coded into the Markup instead: Where and SortBy

from Plurasight ASP.NET WebForms


There is no Code-behind
Used SQL database: AdventureWorks on SQL-SERVER\DEV


No special refences added to the project



Notes from Notepad of PluralSight video:


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

DEMO

Start out with an empty Web Application Project:
Start with the default web.config file, and a datasource in the 'App_Data' folder
The folder is added by right-clicking on the Project in the 'Solution Explorer' =&gt; Add =&gt; Add ASP.NET Folder =&gt; App_Data



Add new:



ADO.NET Entity Data Model:



AdventureWorksLT.edmx (AWModel.edmx)





AdventureWorksLT_DataEntities  (AWDataEntities)



Just choose the table that we are interested in.

AdventureWorksLT_DataModel  (AWDataModel)

Now have the Class shown on the Designer Surface:



If you choose to, you could click , select fields and delete them from the Model

Right click the Project in 'Solution Explorer' = &gt; Build

Here is the code  in the 'AWModel.Designer.cs" file   

{remember: 
AdventureWorksLT.edmx (AWModel.edmx)}



Now add new Web Form:



Name it Default.aspx



Then add a drop down to the design surface of the .aspx page, after some text:



Then drop a 'GridView' in below that, after the word "Customers:"



Then configure 'Data Source', for the Drop-Down

 NOTE: [x] Enable AutoPostBack  is checked so that  we don't need a button to do the Post-back



Entity Data Source:



Next Window:





We have one Entity (in this example) and one 'Entity Set' which is a collection of Entities



So this is  the field that will be in the drop down.
Note 
	Can not specify Value/Diisplay 
	Can not specify filter nor sort, though there is a "EntitypeFilter"
	
In the next window, nothing is listed for what to display, so will have to do some manual coding:

In my follow-along example, the two  fields  are in fact populated
	Data field: SalesPerson
	Value: Salesperson



Click 'Ok' in that window.

This is the default MarkUp:



In his example, he had to add in the "DataTextField"



Then he added the word DISTINCT to the Select statement:



Choose new data source for GridView:



Select and name  a Entity Data Source:



Pick the connection:



When you get to this:
	Yes you want to work with Customers   Entity, but we need a WHERE clause:
	


Then choose other Column related option checkboxes:



Click link to "Edit Columns"

This shows that you don't see a detailed list of columns in the lower left box, rather they will just auto-generate:



The default markup for the EntityDataSource for the GridView is:



So he added a "WHERE" clause:



Then add in a &lt;WhereParameters&gt; tag:



With a "ControlParameter" inside it:



Add the Parameter, without the @ symbol
Get the Control ID from the DropDown control


(NOTE: snippet above left off the "/&gt;" at the end of the 'Control Parameter' tag

This  uses  a LINQ syntax behind the scenes, by converting it into an "Expression Tree"




</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_C#_State</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>STATE_Profile_ReadMe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_C#_State</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>STATE_Profile_ReadMe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Values are initially set to a default in web.config

The values are strongly typed, so CASTing is not necessary
non string variables are stored by default as serializable XML 
	unless you use something like serializeAs="Binary" or something like that
	in the web.config line of the &lt;add&gt; tag for the variable 

Then a user ID is used to persist them to a cookie, and they are available 
	the next time a user visits the application
	
	
This data is stored in ASPNETDB.MDF by default in the App_Data folder
	There is a table: aspnet_Profile
	So what happens when you publish from the DEV solution, does it overwrite the MDF on the web site
	
	I need to test to see if this will work with the system I set up			</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_MasterPage</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_about_NewHire_MasterPage</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_MasterPage</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_about_NewHire_MasterPage</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>images folder:
--------------
	have Logo that is 150 pixels by 396 pixels:  Logo_150x396.jpg
	and Background image: background_1.jpg</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Converted_ReadMe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Converted_ReadMe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] This is a web application

The BackEnd code is in a folder called : "Old_App_Code
The ProjectName is : MS_CodeBehind
The WebPage is called: One_Grid_Details.aspx


This page has a DataGrid, when you select a record, it populates the Details view
	Where you can Insert, Delete, and Edit the record

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_ConvertedToCodeBehind_Default_v2.aspx</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_ConvertedToCodeBehind_Default_v2.aspx</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Project Name: ObjectDataSource_Example
Page Name: Default_v2
The code is on a page named: TheCode.vb, which is located in a folder called: Old_App_Code
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

&lt;%@ Page Language="VB" AutoEventWireup="false" Codebehind="Default_v2.aspx.vb" Inherits="ObjectDataSource_Example.Default_v2" %&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
  &lt;head id="Head1" runat="server"&gt;
    &lt;title&gt;ObjectDataSource Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id="form1" runat="server"&gt;

      &lt;h3&gt;ObjectDataSource Example&lt;/h3&gt;
      &lt;asp:Label id="Msg" runat="server" ForeColor="Red" /&gt;

      &lt;asp:ObjectDataSource 
        ID="EmployeesObjectDataSource" 
        runat="server" 
        TypeName="ObjectDataSource_Example.Samples.AspNet.ObjectDataSource.NorthwindData" 
        SortParameterName="SortColumns"
        EnablePaging="true"
        SelectCountMethod="SelectCount"
        StartRowIndexParameterName="StartRecord"
        MaximumRowsParameterName="MaxRecords" 
        SelectMethod="GetAllEmployees" &gt;
      &lt;/asp:ObjectDataSource&gt;


      &lt;asp:ObjectDataSource 
        ID="EmployeeDetailsObjectDataSource" 
        runat="server" 
        TypeName="ObjectDataSource_Example.Samples.AspNet.ObjectDataSource.NorthwindData" 
        ConflictDetection="CompareAllValues"
        OldValuesParameterFormatString="original_{0}"
        SelectMethod="GetEmployee"
        InsertMethod="InsertEmployee"
        UpdateMethod="UpdateEmployee"
        DeleteMethod="DeleteEmployee"
        OnInserted="EmployeeDetailsObjectDataSource_OnInserted"
        OnUpdated="EmployeeDetailsObjectDataSource_OnUpdated"
        OnDeleted="EmployeeDetailsObjectDataSource_OnDeleted"&gt;
        &lt;SelectParameters&gt;
          &lt;asp:Parameter Name="EmployeeID" Type="Int32" /&gt;  
        &lt;/SelectParameters&gt;
      &lt;/asp:ObjectDataSource&gt;


      &lt;table cellspacing="10"&gt;
        &lt;tr&gt;
          &lt;td valign="top"&gt;
            &lt;asp:GridView ID="EmployeesGridView" 
              DataSourceID="EmployeesObjectDataSource" 
              AutoGenerateColumns="false"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="5"
              DataKeyNames="EmployeeID" 
              OnSelectedIndexChanged="EmployeesGridView_OnSelectedIndexChanged"
              RunAt="server"&gt;

              &lt;HeaderStyle backcolor="lightblue" forecolor="black"/&gt;

              &lt;Columns&gt;                
                &lt;asp:ButtonField Text="Details..."
                                 HeaderText="Show Details"
                                 CommandName="Select"/&gt;  

                &lt;asp:BoundField DataField="EmployeeID" HeaderText="Employee ID" SortExpression="EmployeeID" /&gt;
                &lt;asp:BoundField DataField="FirstName"  HeaderText="First Name" SortExpression="FirstName" /&gt;
                &lt;asp:BoundField DataField="LastName"   HeaderText="Last Name" SortExpression="LastName, FirstName" /&gt;                    
              &lt;/Columns&gt;                
            &lt;/asp:GridView&gt;            
          &lt;/td&gt;
          &lt;td valign="top"&gt;                
            &lt;asp:DetailsView ID="EmployeesDetailsView"
              DataSourceID="EmployeeDetailsObjectDataSource"
              AutoGenerateRows="false"
              EmptyDataText="No records."      
              DataKeyNames="EmployeeID"     
              Gridlines="Both" 
              AutoGenerateInsertButton="true"
              AutoGenerateEditButton="true"
              AutoGenerateDeleteButton="true"
              OnItemInserted="EmployeesDetailsView_ItemInserted"
              OnItemUpdated="EmployeesDetailsView_ItemUpdated"
              OnItemDeleted="EmployeesDetailsView_ItemDeleted" 
              RunAt="server"&gt;

              &lt;HeaderStyle backcolor="Navy" forecolor="White"/&gt;

              &lt;RowStyle backcolor="White"/&gt;

              &lt;AlternatingRowStyle backcolor="LightGray"/&gt;

              &lt;EditRowStyle backcolor="LightCyan"/&gt;

              &lt;Fields&gt;                  
                &lt;asp:BoundField DataField="EmployeeID" HeaderText="Employee ID" InsertVisible="False" ReadOnly="true"/&gt;                    
                &lt;asp:BoundField DataField="FirstName"  HeaderText="First Name"/&gt;
                &lt;asp:BoundField DataField="LastName"   HeaderText="Last Name"/&gt;                    
                &lt;asp:BoundField DataField="Address"    HeaderText="Address"/&gt;                    
                &lt;asp:BoundField DataField="City"       HeaderText="City"/&gt;                        
                &lt;asp:BoundField DataField="Region"     HeaderText="Region"/&gt;
                &lt;asp:BoundField DataField="PostalCode" HeaderText="Postal Code"/&gt;                    
              &lt;/Fields&gt;                    
            &lt;/asp:DetailsView&gt;
          &lt;/td&gt;                
        &lt;/tr&gt;            
      &lt;/table&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Public Class Default_v2
    Inherits System.Web.UI.Page

    Sub EmployeesDetailsView_ItemInserted(sender As Object, e As DetailsViewInsertedEventArgs)

        EmployeesGridView.DataBind()



    End Sub


    Sub EmployeesDetailsView_ItemUpdated(sender As Object, e As DetailsViewUpdatedEventArgs)

        EmployeesGridView.DataBind()

    End Sub


    Sub EmployeesDetailsView_ItemDeleted(sender As Object, e As DetailsViewDeletedEventArgs)

        EmployeesGridView.DataBind()

    End Sub

    Sub EmployeesGridView_OnSelectedIndexChanged(sender As Object, e As EventArgs)

        EmployeeDetailsObjectDataSource.SelectParameters("EmployeeID").DefaultValue = _
          EmployeesGridView.SelectedDataKey.Value.ToString()
        EmployeesDetailsView.DataBind()

    End Sub

    Sub EmployeeDetailsObjectDataSource_OnInserted(sender As Object, e As ObjectDataSourceStatusEventArgs)

        EmployeeDetailsObjectDataSource.SelectParameters("EmployeeID").DefaultValue = _
          e.ReturnValue.ToString()
        EmployeesDetailsView.DataBind()

    End Sub

    Sub EmployeeDetailsObjectDataSource_OnUpdated(sender As Object, e As ObjectDataSourceStatusEventArgs)

        If CInt(e.ReturnValue) = 0 Then _
          Msg.Text = "Employee was not updated. Please try again."

    End Sub

    Sub EmployeeDetailsObjectDataSource_OnDeleted(sender As Object, e As ObjectDataSourceStatusEventArgs)

        If CInt(e.ReturnValue) = 0 Then _
          Msg.Text = "Employee was not deleted. Please try again."

    End Sub

    Sub Page_Load()

        Msg.Text = ""

    End Sub


    Private Sub Default_v2_Load(sender As Object, e As System.EventArgs) Handles Me.Load

    End Sub
End Class


|||||||||||||||||||Designer|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

'------------------------------------------------------------------------------
' &lt;auto-generated&gt;
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated. 
' &lt;/auto-generated&gt;
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Partial Public Class JUNK_v2

    '''&lt;summary&gt;
    '''form1 control.
    '''&lt;/summary&gt;
    '''&lt;remarks&gt;
    '''Auto-generated field.
    '''To modify move field declaration from designer file to code-behind file.
    '''&lt;/remarks&gt;
    Protected WithEvents form1 As Global.System.Web.UI.HtmlControls.HtmlForm

    '''&lt;summary&gt;
    '''GridView1 control.
    '''&lt;/summary&gt;
    '''&lt;remarks&gt;
    '''Auto-generated field.
    '''To modify move field declaration from designer file to code-behind file.
    '''&lt;/remarks&gt;
    Protected WithEvents GridView1 As Global.System.Web.UI.WebControls.GridView
End Class

|||||||||||||||||TheCode.vb|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Imports System
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections.Generic
Imports System.Web.UI
Imports System.Web.UI.WebControls

Namespace Samples.AspNet.ObjectDataSource
  '
  '  Northwind Employee Data Factory
  '

  Public Class NorthwindData


    Private _connectionString As String


    Public Sub New()
      Initialize()
    End Sub


    Public Sub Initialize()    
      ' Initialize data source. Use "Northwind" connection string from configuration.

      If ConfigurationManager.ConnectionStrings("Northwind") Is Nothing OrElse _
          ConfigurationManager.ConnectionStrings("Northwind").ConnectionString.Trim() = "" Then      
        Throw New Exception("A connection string named 'Northwind' with a valid connection string " &amp; _
                            "must exist in the &lt;connectionStrings&gt; configuration section for the application.")
      End If

      _connectionString = _
        ConfigurationManager.ConnectionStrings("Northwind").ConnectionString
    End Sub


    ' Select all employees.

    Public Function GetAllEmployees(sortColumns As String, startRecord As Integer, maxRecords As Integer) As DataTable 

      VerifySortColumns(sortColumns)

      Dim sqlCmd As String = "SELECT EmployeeID, LastName, FirstName, Address, City, Region, PostalCode FROM Employees "

      If sortColumns.Trim() = "" Then
        sqlCmd &amp;= "ORDER BY EmployeeID"
      Else
        sqlCmd &amp;= "ORDER BY " &amp; sortColumns
      End If

      Dim conn As SqlConnection  = New SqlConnection(_connectionString)
      Dim da   As SqlDataAdapter = New SqlDataAdapter(sqlCmd, conn)

      Dim ds As DataSet = New DataSet()

      Try      
        conn.Open()

        da.Fill(ds, startRecord, maxRecords, "Employees")        
      Catch e As SqlException      
        ' Handle exception.
      Finally      
        conn.Close()
      End Try

      Return ds.Tables("Employees")
    End Function


    Public Function SelectCount() As Integer

      Dim conn As SqlConnection = New SqlConnection(_connectionString)
      Dim cmd  As SqlCommand    = New SqlCommand("SELECT COUNT(*) FROM Employees", conn) 

      Dim result As Integer = 0

      Try      
        conn.Open()

        result = CInt(cmd.ExecuteScalar())
      Catch e As SqlException      
        ' Handle exception.
      Finally

        conn.Close()
      End Try

      Return result
    End Function


    '''''
    ' Verify that only valid columns are specified in the sort expression to aSub a SQL Injection attack.

    Private Sub VerifySortColumns(sortColumns As String)    
      If sortColumns.ToLowerInvariant().EndsWith(" desc") Then _
        sortColumns = sortColumns.Substring(0, sortColumns.Length - 5)

      Dim columnNames() As String = sortColumns.Split(",")

      For Each columnName As String In columnNames      
        Select Case columnName.Trim().ToLowerInvariant()        
          Case "employeeid"
          Case "lastname"
          Case "firstname"
          Case ""
          Case Else
            Throw New ArgumentException("SortColumns contains an invalid column name.")
        End Select
      Next
    End Sub



    ' Select an employee.

    Public Function GetEmployee(EmployeeID As Integer) As DataTable    
      Dim conn As SqlConnection  = New SqlConnection(_connectionString)
      Dim da   As SqlDataAdapter = _
        New SqlDataAdapter("SELECT EmployeeID, LastName, FirstName, Address, City, Region, PostalCode " &amp; _
                           "  FROM Employees WHERE EmployeeID = @EmployeeID", conn) 
      da.SelectCommand.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID

      Dim ds As DataSet = New DataSet()

      Try      
        conn.Open()

        da.Fill(ds, "Employees")
      Catch e As SqlException      
        ' Handle exception.
      Finally      
        conn.Close()
      End Try

      Return ds.Tables("Employees")
    End Function



    ' Delete the Employee by ID.

    Public Function DeleteEmployee(EmployeeID As Integer) As Integer    
      Dim conn As SqlConnection = New SqlConnection(_connectionString)
      Dim cmd  As SqlCommand    = New SqlCommand("DELETE FROM Employees WHERE EmployeeID = @EmployeeID", conn)  
      cmd.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID

      Dim result As Integer = 0

      Try      
        conn.Open()

        result = cmd.ExecuteNonQuery()
      Catch e As SqlException      
        ' Handle exception.
      Finally      
        conn.Close()
      End Try

      Return result
    End Function


    ' Update the Employee by original ID.
        Public Function UpdateEmployee(EmployeeID As Integer, LastName As String, FirstName As String, _
                                       Address As String, City As String, Region As String, _
                                       PostalCode As String) As Integer



            If String.IsNullOrEmpty(FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If Address Is Nothing Then Address = String.Empty
            If City Is Nothing Then City = String.Empty
            If Region Is Nothing Then Region = String.Empty
            If PostalCode Is Nothing Then PostalCode = String.Empty

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand("UPDATE Employees " &amp; _
                                                "  SET FirstName=@FirstName, LastName=@LastName, " &amp; _
                                                "  Address=@Address, City=@City, Region=@Region, " &amp; _
                                                "  PostalCode=@PostalCode " &amp; _
                                                "  WHERE EmployeeID=@EmployeeID", conn)

            cmd.Parameters.Add("@FirstName", SqlDbType.VarChar, 10).Value = FirstName
            cmd.Parameters.Add("@LastName", SqlDbType.VarChar, 20).Value = LastName
            cmd.Parameters.Add("@Address", SqlDbType.VarChar, 60).Value = Address
            cmd.Parameters.Add("@City", SqlDbType.VarChar, 15).Value = City
            cmd.Parameters.Add("@Region", SqlDbType.VarChar, 15).Value = Region
            cmd.Parameters.Add("@PostalCode", SqlDbType.VarChar, 10).Value = PostalCode
            cmd.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID

            Dim result As Integer = 0

            Try
                conn.Open()

                result = cmd.ExecuteNonQuery()
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return result
        End Function


        ' Insert an Employee.

        Public Function InsertEmployee(LastName As String, FirstName As String, Address As String, _
                                       City As String, Region As String, PostalCode As String) As Integer

            If String.IsNullOrEmpty(FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If Address Is Nothing Then Address = String.Empty
            If City Is Nothing Then City = String.Empty
            If Region Is Nothing Then Region = String.Empty
            If PostalCode Is Nothing Then PostalCode = String.Empty

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand("INSERT INTO Employees " &amp; _
                                                "  (FirstName, LastName, Address, City, Region, PostalCode) " &amp; _
                                                "  Values(@FirstName, @LastName, @Address, @City, @Region, @PostalCode) " &amp; _
                                                "SELECT @EmployeeID = SCOPE_IDENTITY()", conn)

            cmd.Parameters.Add("@FirstName", SqlDbType.VarChar, 10).Value = FirstName
            cmd.Parameters.Add("@LastName", SqlDbType.VarChar, 20).Value = LastName
            cmd.Parameters.Add("@Address", SqlDbType.VarChar, 60).Value = Address
            cmd.Parameters.Add("@City", SqlDbType.VarChar, 15).Value = City
            cmd.Parameters.Add("@Region", SqlDbType.VarChar, 15).Value = Region
            cmd.Parameters.Add("@PostalCode", SqlDbType.VarChar, 10).Value = PostalCode
            Dim p As SqlParameter = cmd.Parameters.Add("@EmployeeID", SqlDbType.Int)
            p.Direction = ParameterDirection.Output

            Dim newEmployeeID As Integer = 0

            Try
                conn.Open()

                cmd.ExecuteNonQuery()

                newEmployeeID = CInt(p.Value)
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return newEmployeeID
        End Function



        '
        ' Methods that support Optimistic Concurrency checks.
        '

        ' Delete the Employee by ID.

        Public Function DeleteEmployee(original_EmployeeID As Integer, original_LastName As String, _
                                       original_FirstName As String, original_Address As String, _
                                       original_City As String, original_Region As String, _
                                       original_PostalCode As String) As Integer

            If String.IsNullOrEmpty(original_FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(original_LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If original_Address Is Nothing Then original_Address = String.Empty
            If original_City Is Nothing Then original_City = String.Empty
            If original_Region Is Nothing Then original_Region = String.Empty
            If original_PostalCode Is Nothing Then original_PostalCode = String.Empty

            Dim sqlCmd As String = "DELETE FROM Employees WHERE EmployeeID = @original_EmployeeID " &amp; _
                            " AND LastName = @original_LastName AND FirstName = @original_FirstName " &amp; _
                            " AND Address = @original_Address AND City = @original_City " &amp; _
                            " AND Region = @original_Region AND PostalCode = @original_PostalCode"

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand(sqlCmd, conn)

            cmd.Parameters.Add("@original_EmployeeID", SqlDbType.Int).Value = original_EmployeeID
            cmd.Parameters.Add("@original_FirstName", SqlDbType.VarChar, 10).Value = original_FirstName
            cmd.Parameters.Add("@original_LastName", SqlDbType.VarChar, 20).Value = original_LastName
            cmd.Parameters.Add("@original_Address", SqlDbType.VarChar, 60).Value = original_Address
            cmd.Parameters.Add("@original_City", SqlDbType.VarChar, 15).Value = original_City
            cmd.Parameters.Add("@original_Region", SqlDbType.VarChar, 15).Value = original_Region
            cmd.Parameters.Add("@original_PostalCode", SqlDbType.VarChar, 10).Value = original_PostalCode

            Dim result As Integer = 0

            Try
                conn.Open()

                result = cmd.ExecuteNonQuery()
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return result
        End Function


        ' Update the Employee by original ID.
        Public Function UpdateEmployee(FirstName As String, _
                                       LastName As String, _
                                       Address As String, _
                                       City As String, _
                                       Region As String, _
                                       PostalCode As String, _
                                        original_FirstName As String, _
                                        original_LastName As String, _
                                        original_Address As String, _
                                        original_City As String, _
                                        original_Region As String, _
                                        original_PostalCode As String, _
                                        original_EmployeeID As Integer) As Integer


            'Public Function UpdateEmployee(EmployeeID As Integer, LastName As String, FirstName As String, _
            '                               Address As String, City As String, Region As String, _
            '                               PostalCode As String, _
            '                               original_EmployeeID As Integer, original_LastName As String, _
            '                               original_FirstName As String, original_Address As String, _
            '                               original_City As String, original_Region As String, _
            '                               original_PostalCode As String) As Integer

            If String.IsNullOrEmpty(FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If Address Is Nothing Then Address = String.Empty
            If City Is Nothing Then City = String.Empty
            If Region Is Nothing Then Region = String.Empty
            If PostalCode Is Nothing Then PostalCode = String.Empty

            If original_Address Is Nothing Then original_Address = String.Empty
            If original_City Is Nothing Then original_City = String.Empty
            If original_Region Is Nothing Then original_Region = String.Empty
            If original_PostalCode Is Nothing Then original_PostalCode = String.Empty

            '=========================================================================
            Dim sX As String = "UPDATE Employees "
            sX = sX &amp; "  SET FirstName = @FirstName, LastName = @LastName, Address = @Address, City = @City, Region = @Region, PostalCode = @PostalCode "
            sX = sX &amp; "  WHERE EmployeeID = @original_EmployeeID AND LastName = @original_LastName AND FirstName = @original_FirstName AND Address = @original_Address AND City = @original_City AND Region = @original_Region AND PostalCode = @original_PostalCode"
            Dim sqlCmd As String = sX
            '=========================================================================

            'Dim sqlCmd As String = "UPDATE Employees " &amp; _
            '                "  SET FirstName = @FirstName, LastName = @LastName, " &amp; _
            '                "  Address = @Address, City = @City, Region = @Region, " &amp; _
            '                "  PostalCode = @PostalCode " * _
            '                "  WHERE EmployeeID = @original_EmployeeID " &amp; _
            '                " AND LastName = @original_LastName AND FirstName = @original_FirstName " &amp; _
            '                " AND Address = @original_Address AND City = @original_City " &amp; _
            '                " AND Region = @original_Region AND PostalCode = @original_PostalCode"

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand(sqlCmd, conn)

            cmd.Parameters.Add("@FirstName", SqlDbType.VarChar, 10).Value = FirstName
            cmd.Parameters.Add("@LastName", SqlDbType.VarChar, 20).Value = LastName
            cmd.Parameters.Add("@Address", SqlDbType.VarChar, 60).Value = Address
            cmd.Parameters.Add("@City", SqlDbType.VarChar, 15).Value = City
            cmd.Parameters.Add("@Region", SqlDbType.VarChar, 15).Value = Region
            cmd.Parameters.Add("@PostalCode", SqlDbType.VarChar, 10).Value = PostalCode
            cmd.Parameters.Add("@original_EmployeeID", SqlDbType.Int).Value = original_EmployeeID
            cmd.Parameters.Add("@original_FirstName", SqlDbType.VarChar, 10).Value = original_FirstName
            cmd.Parameters.Add("@original_LastName", SqlDbType.VarChar, 20).Value = original_LastName
            cmd.Parameters.Add("@original_Address", SqlDbType.VarChar, 60).Value = original_Address
            cmd.Parameters.Add("@original_City", SqlDbType.VarChar, 15).Value = original_City
            cmd.Parameters.Add("@original_Region", SqlDbType.VarChar, 15).Value = original_Region
            cmd.Parameters.Add("@original_PostalCode", SqlDbType.VarChar, 10).Value = original_PostalCode

            Dim result As Integer = 0

            Try
                conn.Open()

                result = cmd.ExecuteNonQuery()
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return result
        End Function

    End Class
End Namespace
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_MicrosoftExample_TheCode.vb</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_MicrosoftExample_TheCode.vb</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_MicrosoftExample_TheCode.vb 
Class: TheCode.vb is stored in folder: App_Code

Imports System
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections.Generic
Imports System.Web.UI
Imports System.Web.UI.WebControls

Namespace Samples.AspNet.ObjectDataSource
  '
  '  Northwind Employee Data Factory
  '

  Public Class NorthwindData


    Private _connectionString As String


    Public Sub New()
      Initialize()
    End Sub


    Public Sub Initialize()    
      ' Initialize data source. Use "Northwind" connection string from configuration.

      If ConfigurationManager.ConnectionStrings("Northwind") Is Nothing OrElse _
          ConfigurationManager.ConnectionStrings("Northwind").ConnectionString.Trim() = "" Then      
        Throw New Exception("A connection string named 'Northwind' with a valid connection string " &amp; _
                            "must exist in the &lt;connectionStrings&gt; configuration section for the application.")
      End If

      _connectionString = _
        ConfigurationManager.ConnectionStrings("Northwind").ConnectionString
    End Sub


    ' Select all employees.

    Public Function GetAllEmployees(sortColumns As String, startRecord As Integer, maxRecords As Integer) As DataTable 

      VerifySortColumns(sortColumns)

      Dim sqlCmd As String = "SELECT EmployeeID, LastName, FirstName, Address, City, Region, PostalCode FROM Employees "

      If sortColumns.Trim() = "" Then
        sqlCmd &amp;= "ORDER BY EmployeeID"
      Else
        sqlCmd &amp;= "ORDER BY " &amp; sortColumns
      End If

      Dim conn As SqlConnection  = New SqlConnection(_connectionString)
      Dim da   As SqlDataAdapter = New SqlDataAdapter(sqlCmd, conn)

      Dim ds As DataSet = New DataSet()

      Try      
        conn.Open()

        da.Fill(ds, startRecord, maxRecords, "Employees")        
      Catch e As SqlException      
        ' Handle exception.
      Finally      
        conn.Close()
      End Try

      Return ds.Tables("Employees")
    End Function


    Public Function SelectCount() As Integer

      Dim conn As SqlConnection = New SqlConnection(_connectionString)
      Dim cmd  As SqlCommand    = New SqlCommand("SELECT COUNT(*) FROM Employees", conn) 

      Dim result As Integer = 0

      Try      
        conn.Open()

        result = CInt(cmd.ExecuteScalar())
      Catch e As SqlException      
        ' Handle exception.
      Finally

        conn.Close()
      End Try

      Return result
    End Function


    '''''
    ' Verify that only valid columns are specified in the sort expression to aSub a SQL Injection attack.

    Private Sub VerifySortColumns(sortColumns As String)    
      If sortColumns.ToLowerInvariant().EndsWith(" desc") Then _
        sortColumns = sortColumns.Substring(0, sortColumns.Length - 5)

      Dim columnNames() As String = sortColumns.Split(",")

      For Each columnName As String In columnNames      
        Select Case columnName.Trim().ToLowerInvariant()        
          Case "employeeid"
          Case "lastname"
          Case "firstname"
          Case ""
          Case Else
            Throw New ArgumentException("SortColumns contains an invalid column name.")
        End Select
      Next
    End Sub



    ' Select an employee.

    Public Function GetEmployee(EmployeeID As Integer) As DataTable    
      Dim conn As SqlConnection  = New SqlConnection(_connectionString)
      Dim da   As SqlDataAdapter = _
        New SqlDataAdapter("SELECT EmployeeID, LastName, FirstName, Address, City, Region, PostalCode " &amp; _
                           "  FROM Employees WHERE EmployeeID = @EmployeeID", conn) 
      da.SelectCommand.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID

      Dim ds As DataSet = New DataSet()

      Try      
        conn.Open()

        da.Fill(ds, "Employees")
      Catch e As SqlException      
        ' Handle exception.
      Finally      
        conn.Close()
      End Try

      Return ds.Tables("Employees")
    End Function



    ' Delete the Employee by ID.

    Public Function DeleteEmployee(EmployeeID As Integer) As Integer    
      Dim conn As SqlConnection = New SqlConnection(_connectionString)
      Dim cmd  As SqlCommand    = New SqlCommand("DELETE FROM Employees WHERE EmployeeID = @EmployeeID", conn)  
      cmd.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID

      Dim result As Integer = 0

      Try      
        conn.Open()

        result = cmd.ExecuteNonQuery()
      Catch e As SqlException      
        ' Handle exception.
      Finally      
        conn.Close()
      End Try

      Return result
    End Function


    ' Update the Employee by original ID.
        Public Function UpdateEmployee(EmployeeID As Integer, LastName As String, FirstName As String, _
                                       Address As String, City As String, Region As String, _
                                       PostalCode As String) As Integer



            If String.IsNullOrEmpty(FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If Address Is Nothing Then Address = String.Empty
            If City Is Nothing Then City = String.Empty
            If Region Is Nothing Then Region = String.Empty
            If PostalCode Is Nothing Then PostalCode = String.Empty

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand("UPDATE Employees " &amp; _
                                                "  SET FirstName=@FirstName, LastName=@LastName, " &amp; _
                                                "  Address=@Address, City=@City, Region=@Region, " &amp; _
                                                "  PostalCode=@PostalCode " &amp; _
                                                "  WHERE EmployeeID=@EmployeeID", conn)

            cmd.Parameters.Add("@FirstName", SqlDbType.VarChar, 10).Value = FirstName
            cmd.Parameters.Add("@LastName", SqlDbType.VarChar, 20).Value = LastName
            cmd.Parameters.Add("@Address", SqlDbType.VarChar, 60).Value = Address
            cmd.Parameters.Add("@City", SqlDbType.VarChar, 15).Value = City
            cmd.Parameters.Add("@Region", SqlDbType.VarChar, 15).Value = Region
            cmd.Parameters.Add("@PostalCode", SqlDbType.VarChar, 10).Value = PostalCode
            cmd.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID

            Dim result As Integer = 0

            Try
                conn.Open()

                result = cmd.ExecuteNonQuery()
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return result
        End Function


        ' Insert an Employee.

        Public Function InsertEmployee(LastName As String, FirstName As String, Address As String, _
                                       City As String, Region As String, PostalCode As String) As Integer

            If String.IsNullOrEmpty(FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If Address Is Nothing Then Address = String.Empty
            If City Is Nothing Then City = String.Empty
            If Region Is Nothing Then Region = String.Empty
            If PostalCode Is Nothing Then PostalCode = String.Empty

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand("INSERT INTO Employees " &amp; _
                                                "  (FirstName, LastName, Address, City, Region, PostalCode) " &amp; _
                                                "  Values(@FirstName, @LastName, @Address, @City, @Region, @PostalCode) " &amp; _
                                                "SELECT @EmployeeID = SCOPE_IDENTITY()", conn)

            cmd.Parameters.Add("@FirstName", SqlDbType.VarChar, 10).Value = FirstName
            cmd.Parameters.Add("@LastName", SqlDbType.VarChar, 20).Value = LastName
            cmd.Parameters.Add("@Address", SqlDbType.VarChar, 60).Value = Address
            cmd.Parameters.Add("@City", SqlDbType.VarChar, 15).Value = City
            cmd.Parameters.Add("@Region", SqlDbType.VarChar, 15).Value = Region
            cmd.Parameters.Add("@PostalCode", SqlDbType.VarChar, 10).Value = PostalCode
            Dim p As SqlParameter = cmd.Parameters.Add("@EmployeeID", SqlDbType.Int)
            p.Direction = ParameterDirection.Output

            Dim newEmployeeID As Integer = 0

            Try
                conn.Open()

                cmd.ExecuteNonQuery()

                newEmployeeID = CInt(p.Value)
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return newEmployeeID
        End Function



        '
        ' Methods that support Optimistic Concurrency checks.
        '

        ' Delete the Employee by ID.

        Public Function DeleteEmployee(original_EmployeeID As Integer, original_LastName As String, _
                                       original_FirstName As String, original_Address As String, _
                                       original_City As String, original_Region As String, _
                                       original_PostalCode As String) As Integer

            If String.IsNullOrEmpty(original_FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(original_LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If original_Address Is Nothing Then original_Address = String.Empty
            If original_City Is Nothing Then original_City = String.Empty
            If original_Region Is Nothing Then original_Region = String.Empty
            If original_PostalCode Is Nothing Then original_PostalCode = String.Empty

            Dim sqlCmd As String = "DELETE FROM Employees WHERE EmployeeID = @original_EmployeeID " &amp; _
                            " AND LastName = @original_LastName AND FirstName = @original_FirstName " &amp; _
                            " AND Address = @original_Address AND City = @original_City " &amp; _
                            " AND Region = @original_Region AND PostalCode = @original_PostalCode"

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand(sqlCmd, conn)

            cmd.Parameters.Add("@original_EmployeeID", SqlDbType.Int).Value = original_EmployeeID
            cmd.Parameters.Add("@original_FirstName", SqlDbType.VarChar, 10).Value = original_FirstName
            cmd.Parameters.Add("@original_LastName", SqlDbType.VarChar, 20).Value = original_LastName
            cmd.Parameters.Add("@original_Address", SqlDbType.VarChar, 60).Value = original_Address
            cmd.Parameters.Add("@original_City", SqlDbType.VarChar, 15).Value = original_City
            cmd.Parameters.Add("@original_Region", SqlDbType.VarChar, 15).Value = original_Region
            cmd.Parameters.Add("@original_PostalCode", SqlDbType.VarChar, 10).Value = original_PostalCode

            Dim result As Integer = 0

            Try
                conn.Open()

                result = cmd.ExecuteNonQuery()
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return result
        End Function


        ' Update the Employee by original ID.
        Public Function UpdateEmployee(FirstName As String, _
                                       LastName As String, _
                                       Address As String, _
                                       City As String, _
                                       Region As String, _
                                       PostalCode As String, _
                                        original_FirstName As String, _
                                        original_LastName As String, _
                                        original_Address As String, _
                                        original_City As String, _
                                        original_Region As String, _
                                        original_PostalCode As String, _
                                        original_EmployeeID As Integer) As Integer


            'Public Function UpdateEmployee(EmployeeID As Integer, LastName As String, FirstName As String, _
            '                               Address As String, City As String, Region As String, _
            '                               PostalCode As String, _
            '                               original_EmployeeID As Integer, original_LastName As String, _
            '                               original_FirstName As String, original_Address As String, _
            '                               original_City As String, original_Region As String, _
            '                               original_PostalCode As String) As Integer

            If String.IsNullOrEmpty(FirstName) Then _
              Throw New ArgumentException("FirstName cannot be null or an empty string.")
            If String.IsNullOrEmpty(LastName) Then _
              Throw New ArgumentException("LastName cannot be null or an empty string.")

            If Address Is Nothing Then Address = String.Empty
            If City Is Nothing Then City = String.Empty
            If Region Is Nothing Then Region = String.Empty
            If PostalCode Is Nothing Then PostalCode = String.Empty

            If original_Address Is Nothing Then original_Address = String.Empty
            If original_City Is Nothing Then original_City = String.Empty
            If original_Region Is Nothing Then original_Region = String.Empty
            If original_PostalCode Is Nothing Then original_PostalCode = String.Empty

            Dim sqlCmd As String = "UPDATE Employees " &amp; _
                            "  SET FirstName = @FirstName, LastName = @LastName, " &amp; _
                            "  Address = @Address, City = @City, Region = @Region, " &amp; _
                            "  PostalCode = @PostalCode " * _
                            "  WHERE EmployeeID = @original_EmployeeID " &amp; _
                            " AND LastName = @original_LastName AND FirstName = @original_FirstName " &amp; _
                            " AND Address = @original_Address AND City = @original_City " &amp; _
                            " AND Region = @original_Region AND PostalCode = @original_PostalCode"

            Dim conn As SqlConnection = New SqlConnection(_connectionString)
            Dim cmd As SqlCommand = New SqlCommand(sqlCmd, conn)

            cmd.Parameters.Add("@FirstName", SqlDbType.VarChar, 10).Value = FirstName
            cmd.Parameters.Add("@LastName", SqlDbType.VarChar, 20).Value = LastName
            cmd.Parameters.Add("@Address", SqlDbType.VarChar, 60).Value = Address
            cmd.Parameters.Add("@City", SqlDbType.VarChar, 15).Value = City
            cmd.Parameters.Add("@Region", SqlDbType.VarChar, 15).Value = Region
            cmd.Parameters.Add("@PostalCode", SqlDbType.VarChar, 10).Value = PostalCode
            cmd.Parameters.Add("@original_EmployeeID", SqlDbType.Int).Value = original_EmployeeID
            cmd.Parameters.Add("@original_FirstName", SqlDbType.VarChar, 10).Value = original_FirstName
            cmd.Parameters.Add("@original_LastName", SqlDbType.VarChar, 20).Value = original_LastName
            cmd.Parameters.Add("@original_Address", SqlDbType.VarChar, 60).Value = original_Address
            cmd.Parameters.Add("@original_City", SqlDbType.VarChar, 15).Value = original_City
            cmd.Parameters.Add("@original_Region", SqlDbType.VarChar, 15).Value = original_Region
            cmd.Parameters.Add("@original_PostalCode", SqlDbType.VarChar, 10).Value = original_PostalCode

            Dim result As Integer = 0

            Try
                conn.Open()

                result = cmd.ExecuteNonQuery()
            Catch e As SqlException
                ' Handle exception.
            Finally
                conn.Close()
            End Try

            Return result
        End Function

    End Class
End Namespace</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_Converted_ReadMe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_Converted_ReadMe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>2_Converted_ReadMe

This uses a strongly typed Record class

1] This is a web application

The BackEnd code is in a folder called : "Old_App_Code
The ProjectName is : MS_CodeBehind
The WebPage is called: TWO_Grid_Details.aspx


This page has a DataGrid, when you select a record, it populates the Details view
	Where you can Insert, Delete, and Edit the record
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_ObjectDataSource</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>2_StronglyTyped_ObjectDataSource_ReadMe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_ObjectDataSource</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>2_StronglyTyped_ObjectDataSource_ReadMe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>reference:http://msdn.microsoft.com/en-us/library/ms227562%28v=vs.100%29.aspx
ObjectDataSource Strongly Typed Source Object Example

specifies a strongly typed source object using the "DataObjectTypeName" property

Includes a GridView and DetailsView

To use the code, you can create a code file in your Web application's App_Code subdirectory and copy the code into the file. 
	The business object will then be compiled dynamically and included as part of your Web application. 
	Alternatively, you can compile the business object and place it in the Bin directory of an ASP.NET application 
	or in the Global Assembly Cache (GAC).
	
Named the .aspx page: StronglyTypedExample.aspx
Named the code page: StronglyTyped_Code.vb, and placed it in folder: "App_Code"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_Roles_Membership_web.config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>web.config_Authorization_Location_Deny_AllowRoles</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_Roles_Membership_web.config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>web.config_Authorization_Location_Deny_AllowRoles</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>reference: http://weblogs.asp.net/gurusarkar/archive/2008/09/29/setting-authorization-rules-for-a-particular-page-or-folder-in-web-config.aspx
ASP.NET Authorization : http://msdn.microsoft.com/en-us/library/wce3kxhd.aspx
Authorizing Users and Roles: http://quickstarts.asp.net/QuickStartv20/aspnet/doc/security/authorization.aspx
IIS 7: http://forums.iis.net/p/1173012/1961218.aspx


==&gt; PUT all allows BEFORE ANY deny.


We will start with the root web.config without any authorization.

&lt;configuration&gt;
	&lt;system.web&gt;
	
	&lt;authentication mode="Forms"&gt;
	&lt;/authentication&gt; &lt;/system.web&gt;
	
&lt;/configuration&gt;

Allow only users in particular Role


&lt;location path="AdminFolder"&gt;

    &lt;system.web&gt;
    &lt;authorization&gt;

    &lt;allow roles="Admin"/&gt; //Allows users in Admin role
    &lt;deny users="*"/&gt; // deny everyone else

    &lt;/authorization&gt;
    &lt;/system.web&gt;

&lt;/location&gt;
&lt;location path="CustomerFolder"&gt;

    &lt;system.web&gt;
    &lt;authorization&gt;

    &lt;allow roles="Admin, Customers"/&gt; //Allow users in Admin and Customers roles
    &lt;deny users="*"/&gt; // Deny rest of all

    &lt;/authorization&gt;
    &lt;/system.web&gt;

&lt;/location&gt;

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Alternate way - using individual web.config for each Folder


    Web.config in AdminFolder should look like:

    &lt;configuration&gt;

        &lt;system.web&gt;

            &lt;authorization&gt;
            &lt;allow roles="Admin"/&gt; //Allows users in Admin role

            &lt;deny users="*"/&gt; // deny everyone else
            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/configuration&gt;
    Web.config in CustomerFolder should look like: 

    &lt;configuration&gt;

        &lt;system.web&gt;

            &lt;authorization&gt;
            &lt;allow roles="Admin, Customers"/&gt; //Allow users in Admin and Customers roles

            &lt;deny users="*"/&gt; // Deny rest of all
            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/configuration&gt;

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


Deny Anonymous user to access entire website

&lt;system.web&gt;

	&lt;authentication mode="Forms"&gt;
	
		&lt;/authentication&gt;
	
	&lt;authorization&gt;
	&lt;deny users="?"/&gt; 				//will deny anonymous users &lt;/authorization&gt;

&lt;/system.web&gt;


Allow access to everyone to a particular page

&lt;configuration&gt;

    &lt;system.web&gt;

    &lt;authentication mode="Forms"/&gt;
    &lt;authorization&gt; &lt;deny users="?"/&gt;  //this will restrict anonymous user access

    &lt;/authorization&gt;
    &lt;/system.web&gt;

    &lt;location path="register.aspx"&gt; //path here is path to your register.aspx page e.g. it could be ~/publicpages/register.aspx

        &lt;system.web&gt;

            &lt;authorization&gt;

            &lt;allow users="*"/&gt; // this will allow access to everyone to register.aspx
            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/location&gt;

&lt;/configuration&gt;


To allow access to particular user only and deny everyone else


&lt;location path="userpersonal.aspx"&gt;

    &lt;system.web&gt;

        &lt;authorization&gt;

        &lt;allow users="John"/&gt; // allow John ..note: you can have multiple users seperated by comma e.g. John,Mary,etc
        &lt;deny users="*"/&gt;  // deny others

        &lt;/authorization&gt;

    &lt;/system.web&gt;

&lt;/location&gt;


Images and CSS files

With IIS 7 you will have to give access to IUSR Anonymous user account to your folder that contains your css or images files

&lt;configuration&gt;

    &lt;system.web&gt;

        &lt;authorization&gt;

        &lt;allow users="*"/&gt; //Allow everyone

        &lt;/authorization&gt;

    &lt;/system.web&gt;

&lt;/configuration&gt;


Common Mistakes ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The common reason for that is placing &lt;deny../&gt; before &lt;allow ../&gt;.
    //This web.config will not allow access to users even they are in Admin Role 

    &lt;configuration&gt;

        &lt;system.web&gt;

            &lt;authorization&gt;

            &lt;deny users="*"/&gt; // deny everyone else
            &lt;allow roles="Admin"/&gt; //Allows users in Admin role

            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/configuration&gt;

Since the authorization is done from top to bottom, rules are checked until a match is found. 
Here we have &lt;deny users="*"/&gt; 
first and so it will not check for allow any more and deny access even if in Admin role.













</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_SECURITY_User_ActiveDirectoryGroupAccess</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Windows_Authentication_web.config</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_SECURITY_User_ActiveDirectoryGroupAccess</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Windows_Authentication_web.config</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- in the root web.config =================================================== --&gt;

&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;

  &lt;system.web&gt;
  
    &lt;authentication mode="Windows"/&gt;

  &lt;/system.web&gt;

&lt;/configuration&gt;


&lt;!-- in the web.config of the folder where access is being restricted =================================================== --&gt;


&lt;?xml version="1.0"?&gt;

&lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  --&gt;

&lt;configuration&gt;

  &lt;system.web&gt;


      &lt;authorization&gt;
          &lt;allow users="accessiicarewnc\ggarson" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_A_HumanResources" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_C_Security" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_D_IT" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_E_FacilityCoordinator" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_F_DataGuardian" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_G_Payroll" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_H_BuildingSecurity" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_I_BusinessCard_Hub" /&gt;
          &lt;allow users="accessiicarewnc\NewHire_J_Manuals" /&gt;
          &lt;deny users="*"/&gt;
      &lt;/authorization&gt;      

  &lt;/system.web&gt;

&lt;/configuration&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_WebControls</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_Web_User_Control</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_WebControls</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_Web_User_Control</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] Located in 'controls' folder:
2] Section was copied out of original Proto-type file
3] Note: reference to the 'image' is valid for the location of the original proto-type file
		 but does not really work for the WUC that is locted in the 'controls' folder
		 however when it runs from within a file located up in the root, it works fine
=======================================================================================		 

&lt;%@ Control Language="VB" ClassName="Header" %&gt;

&lt;script runat="server"&gt;

&lt;/script&gt;

&lt;asp:Panel ID="Panel1" runat="server"&gt;
    &lt;img alt="The Night Owl" 
        src="Images/bookshelf.jpg" 
        width="800" height="110"/&gt;
&lt;/asp:Panel&gt;
&lt;asp:Panel id="menuPanel" runat="server"&gt;
    &lt;a href="Default.aspx"&gt;Home&lt;/a&gt; |
    &lt;a href="Titles.aspx"&gt;Titles&lt;/a&gt; |
    &lt;a href="Authors.aspx"&gt;Authors&lt;/a&gt; |
    &lt;a href="Publishers.aspx"&gt;Publishers&lt;/a&gt;
&lt;/asp:Panel&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_WebControls</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>readMe_ASPNET_WebControls</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_WebControls</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>readMe_ASPNET_WebControls</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>readMe_ASPNET_WebControls

"~/"  refers to the root folder in a path to a WUC



also called 'User Controls' or 'Server Controls'


reusable parts stored in 'Controls' folder and are server side</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET_WebControls</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>ToCreateControl</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET_WebControls</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>ToCreateControl</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>WUC = Web User Control

1] Create folder: "controls"
2] right click on the folder
3] Web Site {Menu} =&gt; Add new item =&gt; select "Web User Control"
	{extension: .ascx}
4] Can have it put the code in a seperate or same sheet	
5] One way to start is go to a proto-type page with the markup in it
	copy/paste the &lt;asp:....&gt; tag sections into the new Web User Control file
	(below the 'script' tag area, if code is in the same sheet)
6]  Save the page
7]  Then open a page where you want to use this Web User Control (call this the 'Destination', 
	and drag and drop the .ascx file from the 'Solution Explorer' on to the design surface of 
	the Destination file
	 		

		

		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>ASPNET</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Folders_in_Solution_Explorer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>ASPNET</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Folders_in_Solution_Explorer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>App_Code
	will compile the code in this folder
	
App_Browsers
	for defining additional .browser files

App_GlobalResources
	for compiling resx files

App_LocalResources
	for compiling resx files
	
App_Themes

App_WebReferences	
	for WISDL files, for client side proxies for web services	
		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Notes_On_SP_used_by_Web-Site-Administration-Tool</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Notes_On_SP_used_by_Web-Site-Administration-Tool</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- CommandList_from_Profiler.sql


--Access Rules are handled through web.config in each folder
--	For that particular folder you specify whether the role is
	-- Denied
	-- Has access
--		

use aspnetdb
go

exec dbo.aspnet_Membership_GetAllUsers @ApplicationName=N'/',@PageIndex=0,@PageSize=2147483647

-- Create user =============================================================================

declare @p12 uniqueidentifier
set @p12='D0E56CEE-6753-460A-B130-A72297EC2DD6'
exec dbo.aspnet_Membership_CreateUser 
	@ApplicationName=N'DataGuardians',
	@UserName=N'dgarson',
	@Password=N'abcde_12345',
	@PasswordSalt=N'nWJbIKBD6+ZRZE0unmcV7A==',
	@Email=N'dgarson@ccwnc.org',
	@PasswordQuestion=NULL,
	@PasswordAnswer=NULL,
	@IsApproved=1,
	@UniqueEmail=1,
	@PasswordFormat=0,
	@CurrentTimeUtc='2013-12-22 14:52:43',
	@UserId=@p12 output
select @p12

-- Delete User======================

--Since there are 4 Tables that contain additional User Information the enumerated values are 1, 2, 4, 8.  (1+2+4+8=15)
	--The method DeleteUser(UserName, True) would have to set the @TablesToDeleteFrom parameter to at least 15 in order to delete all user information. 
-- The @numTablesToDeleteFrom parameter is an OUTPUT parameter that indicates how  many tables the user information was deleted from.  
	-- I don't think it is used by the default membership provider.	\
	
-- Comments within the SP:	
-- Delete from Membership table if (@TablesToDeleteFrom &amp; 1) is set
--Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom &amp; 2) is set
-- Delete from aspnet_Profile table if (@TablesToDeleteFrom &amp; 4) is set
-- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom &amp; 8) is set
-- Delete from aspnet_Users table if (@TablesToDeleteFrom &amp; 1,2,4 &amp; 8) are all set
declare @p4 int
set @p4=2
exec dbo.aspnet_Users_DeleteUser 
			@ApplicationName=N'DataGuardians',
			@UserName=N'dgarson',
			@TablesToDeleteFrom=15,
			@NumTablesDeletedFrom=@p4 output
select @p4

--Update



-- Create user and add to existing role ======================================================

declare @p12 uniqueidentifier
set @p12='D606945A-4662-45B1-9990-4ED74529FC46'
exec dbo.aspnet_Membership_CreateUser 
	@ApplicationName=N'DataGuardians',
	@UserName=N'abc',
	@Password=N'abcde_12345',
	@PasswordSalt=N'sv4Ra0+dBNUehKSm8MoWeA==',
	@Email=N'abc@a.com',@PasswordQuestion=NULL,
	@PasswordAnswer=NULL,
	@IsApproved=1,
	@UniqueEmail=1,
	@PasswordFormat=0,
	@CurrentTimeUtc='2013-12-22 16:36:15',
	@UserId=@p12 output
select @p12

-- check to see if user is already in the role:
exec dbo.aspnet_UsersInRoles_IsUserInRole @ApplicationName=N'DataGuardians',@UserName=N'abc',@RoleName=N'rAdmin'

-- if not in the role then add the user to the role:
exec dbo.aspnet_UsersInRoles_AddUsersToRoles @ApplicationName=N'DataGuardians',@RoleNames=N'rAdmin',@UserNames=N'abc',@CurrentTimeUtc='2013-12-22 16:36:15.817'

-- Then check to confirm that the user is in the role:
exec dbo.aspnet_UsersInRoles_IsUserInRole @ApplicationName=N'DataGuardians',@UserName=N'abc',@RoleName=N'rDataGuardian'

-- Not sure why it does this:
exec dbo.aspnet_Membership_GetPasswordWithFormat @ApplicationName=N'DataGuardians',@UserName=N'abc',@UpdateLastLoginActivityDate=1,@CurrentTimeUtc='2013-12-22 16:36:15.823'




-- create role ===============================================================================

exec dbo.aspnet_Roles_CreateRole @ApplicationName=N'DataGuardians',@RoleName=N'rAdmin'

-- get roles
exec dbo.aspnet_Roles_GetAllRoles @ApplicationName=N'DataGuardians'

-- delete role:
			--	check to see if it exists (1 if yes, 0 if not)
exec dbo.aspnet_Roles_RoleExists @ApplicationName=N'DataGuardians',@RoleName=N'rJunk'
			-- if so delete it:
exec dbo.aspnet_Roles_DeleteRole @ApplicationName=N'DataGuardians',@RoleName=N'rJunk',@DeleteOnlyIfRoleIsEmpty=0
			-- get the updated list
exec dbo.aspnet_Roles_GetAllRoles @ApplicationName=N'DataGuardians'

	
-- Remove User from role:
exec dbo.aspnet_UsersInRoles_RemoveUsersFromRoles @ApplicationName=N'DataGuardians',@UserNames=N'uJunk',@RoleNames=N'rAdmin'	

-- Add user to role
-- if not in the role then add the user to the role:
exec dbo.aspnet_UsersInRoles_AddUsersToRoles @ApplicationName=N'DataGuardians',@RoleNames=N'rAdmin',@UserNames=N'abc',@CurrentTimeUtc='2013-12-22 16:36:15.817'



--|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- always checking the schema:

exec dbo.aspnet_Roles_GetAllRoles @ApplicationName=N'DataGuardians'
exec dbo.aspnet_CheckSchemaVersion @Feature=N'Role Manager',@CompatibleSchemaVersion=N'1'</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>BAT</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>runMultipleSQLscriptsInAFolder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>BAT</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>runMultipleSQLscriptsInAFolder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>rem: runMultipleSQLscriptsInAFolder

https://www.sqlservercentral.com/articles/sqlcmd-and-batch-file-magic

To execute a bunch of scripts from a folder 

rem: Save this file with the Extension as .bat in one of your scripts folder.

rem: ========================================= .bat file in the folder that has the .sql script files

@@echo off
del errors /f /s /q
rd Errors
md Errors
FOR %%A IN (*.SQL) DO ( sqlcmd -S SERVERNAME -d DATABASE1 -U username -P password -i "%%A" -o "Errors\%%AError_DB1.txt" -I )
FOR %%A IN (*.SQL) DO ( sqlcmd -S SERVERNAME -d DATABASE2 -U username -P password -i "%%A" -o "Errors\%%AError_DB2.txt" -I )

rem: =========================================
SERVERNAME – Your Database Server Name.
DATABASE1 – Your Database name.
Username – Your SQL Username.
Password – Your SQL Password.

rem: =========================================
del errors /f /s /q
rem: When executing the scripts, we dump all errors to a folder called Errors. This needs to be cleaned up. This will delete the contents of folder silently.

md Errors
rem: This will create a new folder names Errors. I know it is redundant, but why not start with a clean slate.

FOR %%A IN (*.SQL) DO ( sqlcmd -S MANU -d DATABASE1 -U username -P password -i "%%A" -o "Errors\%%AError_DB1.txt" -I )

rem: Using a FOR loop we select each file name in sequential order as per the name of the file which ends with .sql extension in the current folder 
rem: 	and pass the file name to execute with Server Name, Username, Password and the database name using SQLCMD.

%%A
rem: here denotes the name of the current file name in the loop.

–o
rem:	outputs any errors/messages from the script to a file in the errors folder followed by the Database name.
rem:		 if there are no errors, it will still create the Error File.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CLR_SQL_Examples</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>EX_2_Multiple_Functions_Readme</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CLR_SQL_Examples</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>EX_2_Multiple_Functions_Readme</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--EX_2_Multiple_Functions_

--Destructive Method
--0] Clean and Rebuild the DLL in Visual Basic
--	DLL is rebuilt into folder:
--	L:\DATA\QI_Projects\prj_0037_CLR_Functions\VB\VBClassLibrarySolution\bin\Debug
--1] Delete the existing functions and Assembly
--	prj_0037_405_DROP_existing_Functions_From_an_SQL_Assembly_Then_DROP_Assembly.sql
--2] Delete the DLL (prj_0037_CLR_Functions.dll) from folder on SQL-SERVER:
--	C:\CLRLibraries
--3] Copy the new version of the DLL to the folder from which it was deleted.
--4] re-Create the assembly
--	prj_0037_402_Create_SQL_Assembly.sql
--3] re-Create the functions
--	prj_0037_403_Create_FunctiionFromCLR.sql
--4] see what you got:
--	prj_0037_404_SELECT_CLR_Objects.sql
--5] TEST the functions
--	prj_0037_406_TEST_FunctiionFromCLR</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CoLab_Google</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_CoLab_Google</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CoLab_Google</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_CoLab_Google</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_CoLab_Google

Google Colab Tutorial - Google Sheets, Read &amp; Write Data
ref: https://www.youtube.com/watch?v=6Xt6L1I5jSc

#To import data (.e.g. CSV named 'grive') into notebook from a file on your Gmail Drive
	from google.colab import drive
	drive.mount('/content/grive')
	
	Then it will give you a link, from which you get a code, and paste it into the "authorization code" box
	
	Will then see the allowed g-drive folder/files in laft pane
		under Table of Contents =&gt; grive {e.g. folder}
		On the right side of the file name is three dots
		=&gt; from there click "copy path"
	
	{Python code}
	import pandas as pd
	mydata = pd.read_csv('/content/grive/My Drive/whatever.csv')
	
	{to see the data}
	mydata.head()
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Text_Formatting</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>@font-face_reference</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Text_Formatting</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>@font-face_reference</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Note: can keep the font files in the folder: _fonts
reference: http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax
		http://www.fontsquirrel.com/



@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-Regular-webfont.eot');
	src: url('_fonts/Cantarell-Regular-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-Regular-webfont.woff') format('woff'), url('_fonts/Cantarell-Regular-webfont.ttf') format('truetype'), url('_fonts/Cantarell-Regular-webfont.svg#webfont9UOzsjXz') format('svg');
	font-weight: normal;
	font-style:normal;
}

@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-Oblique-webfont.eot');
	src: url('_fonts/Cantarell-Oblique-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-Oblique-webfont.woff') format('woff'), url('_fonts/Cantarell-Oblique-webfont.ttf') format('truetype'), url('_fonts/Cantarell-Oblique-webfont.svg#webfontRl4nowrT') format('svg');
	font-weight: normal;
	font-style:italic;
}

@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-Bold-webfont.eot');
	src: url('_fonts/Cantarell-Bold-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-Bold-webfont.woff') format('woff'), url('_fonts/Cantarell-Bold-webfont.ttf') format('truetype'), url('_fonts/Cantarell-Bold-webfont.svg#webfontKr2CkGZp') format('svg');
	font-weight: bold;
	font-style:normal;
}

@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-BoldOblique-webfont.eot');
	src: url('_fonts/Cantarell-BoldOblique-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-BoldOblique-webfont.woff') format('woff'), url('_fonts/Cantarell-BoldOblique-webfont.ttf') format('truetype'), url('_fonts/Cantarell-BoldOblique-webfont.svg#webfontQ1aSR0ux') format('svg');
	font-weight: bold;
	font-style:italic;
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSS_Text_Formatting</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>@font-face</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSS_Text_Formatting</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>@font-face</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Note: can keep the font files in the folder: _fonts
reference: http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax
			http://www.fontsquirrel.com/ (have to host them on your own site)


&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Using web fonts&lt;/title&gt;
&lt;!--[if lt IE 9]&gt;
&lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;style&gt;
/*font family declarations must show up at the top of the style section
order matters: 
Normal
Italic
bold
Bold italic
*/

/* Use this one when normal */
@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-Regular-webfont.eot');
	src: url('_fonts/Cantarell-Regular-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-Regular-webfont.woff') format('woff'), url('_fonts/Cantarell-Regular-webfont.ttf') format('truetype'), url('_fonts/Cantarell-Regular-webfont.svg#webfont9UOzsjXz') format('svg');
	font-weight: normal;
	font-style:normal;
}

/* Use this one when italic */
@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-Oblique-webfont.eot');
	src: url('_fonts/Cantarell-Oblique-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-Oblique-webfont.woff') format('woff'), url('_fonts/Cantarell-Oblique-webfont.ttf') format('truetype'), url('_fonts/Cantarell-Oblique-webfont.svg#webfontRl4nowrT') format('svg');
	font-weight: normal;
	font-style:italic;
}

/* Use this one when bold */
@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-Bold-webfont.eot');
	src: url('_fonts/Cantarell-Bold-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-Bold-webfont.woff') format('woff'), url('_fonts/Cantarell-Bold-webfont.ttf') format('truetype'), url('_fonts/Cantarell-Bold-webfont.svg#webfontKr2CkGZp') format('svg');
	font-weight: bold;
	font-style:normal;
}

/* Use this one when bold/italic */
@font-face {
	font-family: 'Cantarell';
	src: url('_fonts/Cantarell-BoldOblique-webfont.eot');
	src: url('_fonts/Cantarell-BoldOblique-webfont.eot?#iefix') format('embedded-opentype'), url('_fonts/Cantarell-BoldOblique-webfont.woff') format('woff'), url('_fonts/Cantarell-BoldOblique-webfont.ttf') format('truetype'), url('_fonts/Cantarell-BoldOblique-webfont.svg#webfontQ1aSR0ux') format('svg');
	font-weight: bold;
	font-style:italic;
}
aside, article, section, header, footer, nav {
	display: block;
}
body {
	width: 600px;
	font-family: Cantarell, Arial, Helvetica, sans-serif;   /* &lt;== using it here! */
}
/*add styles here*/
a {
	font-style: italic;   /* &lt;== using italic here! */
}

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;article&gt;
&lt;h1&gt;Setting the font-family property.&lt;/h1&gt;
&lt;p&gt;Designers can now choose between system fonts, and web fonts when defining which fonts to use on a page. System fonts are the common fonts shipped with most operating systems; fonts such as Arial, Helvetica, Verdana, Georgia, Times New Roman, and others. When using system fonts, you are relying on the client machine to have the font installed. This saves overhead, and allows you to rely on fonts that have a long and solid track record.&lt;/p&gt;
&lt;p&gt;Web fonts, on the other hand, allow designers to use the @font-face inline rule to define a font-family to use within the page. The font is an external resource that the browser then requests and uses on the page. This allows designers to use any font they want, without having to worry about whether or not it's installed on the client machine. This technique requires that the designer either host the font themselves, or use one of the many font hosting services available. For more information on @font-face, check out my lynda.com title, &lt;a href="http://www.lynda.com/Web-Design-tutorials/web-fonts-first-look/73564-2.html" target="_blank" title="Web Fonts First Look"&gt;Web Fonts First Look.&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;
&lt;/body&gt;
&lt;/html&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSV_Export</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>some_ideas</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSV_Export</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>some_ideas</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/12567410/i-need-best-practice-in-t-sql-export-data-to-csv-with-header

--Using Microsoft.Jet.OLEDB.4.0, like this:

INSERT INTO OPENROWSET('Microsoft.Jet.OLEDB.4.0',
                       'Text;Database=C:\Temp\;HDR=Yes;',
                       'SELECT * FROM test.csv')
            (object_id, name)
SELECT object_id, name
  FROM sys.tables;
  
  
-----------------------
---You could use a UNION to create a header row, like this:

SELECT 'object_id', 'name'

UNION ALL

SELECT object_id, name
FROM sys.tables  

------------------------------------------------------
EXEC xp_cmdshell 'SQLCMD -S . -d MsVehicleReg2 -Q "SELECT * FROM tempViolationInfo" -s "," -o "O:\result.csv"'

--------------------------------------------------------
-- need to have the Microsoft.ACE.OLEDB.12.0 provider available
--The Jet 4.0 provider will work, too, but it's ancient, so I used this one instead.
--The .CSV file will have to exist already. 
--	If you're using headers (HDR=YES), make sure the first line of the .CSV file is a delimited list of all the fields.

INSERT INTO OPENROWSET('Microsoft.ACE.OLEDB.12.0','Text;Database=D:\;HDR=YES;FMT=Delimited','SELECT * FROM [FileName.csv]')
SELECT Field1, Field2, Field3 FROM DatabaseName

---------------------------------------------------------------------
https://www.codeproject.com/Questions/546777/HowplusToplusExportplusDataplusToplustheplus-csvpl

declare @sql varchar(8000)
select @sql = 'bcp "select * from EmailVarification..tblTransaction" queryout c:\bcp\Tom.xls -c -t, -T -S' + @@servername
exec master..xp_cmdshell @sql

--in this query EmailVarification is DB name and tblTransaction is table name.
--for execute this query you have to set path for write file.
--currently in this query you have to create a "bcp" folder in "C:\ "Drive .</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CSV_Export</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>xpCMDShell</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CSV_Export</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>xpCMDShell</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--Ran it locally, but it put the file on the C: of the server.
-- The output was actually .csv, and the headers were missing.


declare @sql varchar(8000)
select @sql = 'bcp "select * from EmailVarification..tblTransaction" queryout c:\bcp\Tom.xls -c -t, -T -S' + @@servername
exec master..xp_cmdshell @sql

--in this query EmailVarification is DB name and tblTransaction is table name.
--for execute this query you have to set path for write file.
--currently in this query you have to create a "bcp" folder in "C:\ "Drive .</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework_PowerTools</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>1_ReverseEngineerCodeFirst__about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework_PowerTools</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>1_ReverseEngineerCodeFirst__about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_ReverseEngineerCodeFirst__about

ref: http://msdn.microsoft.com/en-us/data/jj593170.aspx

NOTE the three files are the modified versions so that the output will be in Data Annotations instead.

============================
0] Make sure that the three T4 templates exist and are located in the folder: /CodeTemplates/ReverseEngineerCodeFirst
1] Delete any existing Mappings and Models

============================

A) Right click the project and select Entity Framework –&gt; CustomizeReverse Engineer Templates

Selecting CustomizeReverse Engineer Templates adds the T4 templates to your project. 
	The EF Power Tools then uses these templates to generate the code for your context, entities, and mapping classes.
	
Two of the files are modified from the original, per the instructions in the reference:
	Mapping.tt
	Entity.tt 
	
Then run  the reverse engineer process, 
this time the custom templates will be used to generate code when you Perform Reverse Engineer CodeFirst</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Disable_or_CleanUp_Migrations</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Disable_or_CleanUp_Migrations</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

You need to delete the state:

    Delete the migrations folder in your project
    Delete the __MigrationHistory table in your database (may be under system tables)

Then run the following command in the Package Manager Console:

Enable-Migrations -EnableAutomaticMigrations -Force

Use with or without -EnableAutomaticMigrations

And finally, you can run:

Add-Migration Initial

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>EF_Migration_Problems_Solutions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>EF_Migration_Problems_Solutions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
6] error when running commands in PackageManager:

"cannot be loaded because the execution of scripts is disabled on this system"

A) FROM: http://stackoverflow.com/questions/4037939/powershell-says-execution-of-scripts-is-disabled-on-this-system

Running C:\Windows\SysWOW64\WindowsPowerShell\v1.0\ powershell.exe as Administrator, 
then Set-ExecutionPolicy RemoteSigned helped!

===================================================================================================================
5] Error when right clicking in a controller and creating a view that uses a model:
"has already been added" "There was an error running the selected code generator" "A configuration for type" "use the Entity&lt;T&gt;() or Complex&lt;T&gt;() methods" 

from: http://stackoverflow.com/questions/24974218/scaffolding-controller-doesnt-work-with-visual-studio-2013-update-3-and-4

by changing my DBContext derived class to use IDbSet properties instead of DbSet 
	I could generate the controllers and views just fine. 
However, for me this introduced another issue, IDbSet does not support the async methods.


===================================================================================================================
4] 
When I submitted the command: 
	PM&gt; Enable-Migrations -ContextTypeName Test_01_Db
I got errors like this:
	"Test_01.Models.Detail_forHeader_R: : EntityType 'Detail_forHeader_R' has no key defined. Define the key for this EntityType."

You should add attribute [Key] before property CatId:

		using System.ComponentModel.DataAnnotations;	//required for [Key]

        public partial class Category
        {
            [Key]
            public int CatId { get; set; }
            public string CatName { get; set; }
            public string CatDescription { get; set; }
            public List&lt;Product&gt; Product { get; set; }
        }

The problem is that EF can work only when it knows primary key of table. By default EF recognize as primary key property with name Id. If your table has another primary key, you can mark it with attribute [Key] or set Key with fluent configuration.

===================================================================================================================
1] I got this error when I submitted the command:	Update-Database -Verbose

I was getting this error: The operation failed because an index 
	or statistics with name 'IX_RestaurantId' already exists 
	on table 'dbo.RestaurantReviews'. 
	
This was from a solution from Pluralsight that already had a migration file in it. There was some code in that file that seemed 
	to create the index in question, and when I commented it out, it did stop giving me the error, but did  not run the Seed Method.
	I did not like this solution
	b/c I could not see the index in the auto-generated file from MSSMS, and the Seed data was not there
	
Then I realized that there really was no need for the Migration file b/c the C# classes define all the tables. So I excluded the 
migration file, and ran the command again so that it would build the database directly from the C# class defintions.
It seemed to succeed and the Seed method did run successfully. It still did not have the index that generated the original error message.

===================================================================================================================
2] When I went to execute it gave me this error:
	"Could not load file or assembly 'DotNetOpenAuth.Core, Version=4.0.0.0, Culture=neutral, 
		PublicKeyToken=2780ccd10d57b246' or one of its dependencies. 
		The system cannot find the file specified. "
		
I tried updating the NuGet Packages, then I needed to restart VS
That did it.

===================================================================================================================
4.3.4.13329   -   4.3.0.0

3] Error: "Could not load file or assembly 'DotNetOpenAuth.Core, Version=4.0.0.0, Culture=neutral, 
			PublicKeyToken=2780ccd10d57b246' or one of its dependencies. 
			The system cannot find the file specified. "

ref: http://stackoverflow.com/questions/13942653/could-not-load-file-or-assembly-dotnetopenauth-core

To fix this, delete the _bin_deployableAssemblies folder, 
and your application's bin folder and then clean and rebuild your application and it will work again.

From that same article:
------------------------
"In my case the MVC4 application was running fine in the VS2012 debugger, but I was getting the 
"Could not load file or assembly 'DotNetOpenAuth.Core'" error when I publish the application on the server.
Checking the 
"Delete all existing files prior to publish" checkbox on the settings tab of Publish Web window solved the issue."
as well as the:
	 [x] Exclude files from the App_Data folder
	
From that same article: I solved the problem by installing the package using Nuget
------------------------
&gt; Install-Package Microsoft.AspNet.WebPages.OAuth

From that same article:
-----------------------
for me, it worked like the following, using packager manager console, I've uninstall the packages, by the following order sequence and I re installed it, it solved my issue..

    Uninstalling

Uninstall-Package Microsoft.AspNet.WebPages.OAuth
Uninstall-Package DotNetOpenAuth.AspNet 
Uninstall-Package DotNetOpenAuth.OpenId.RelyingParty
Uninstall-Package DotNetOpenAuth.OpenId.Core 
Uninstall-Package DotNetOpenAuth.OAuth.Consumer
Uninstall-Package DotNetOpenAuth.OAuth.Core
Uninstall-Package DotNetOpenAuth.core

Build, If you are not using the above packages then this should solve the problem, to Install the above again in case you need it, do the following..

    Reinstall

install-Package DotNetOpenAuth.AspNet 
install-Package Microsoft.AspNet.WebPages.OAuth
install-Package DotNetOpenAuth.OpenId.RelyingParty
install-Package DotNetOpenAuth.OpenId.Core 
install-Package DotNetOpenAuth.OAuth.Consumer
install-Package DotNetOpenAuth.OAuth.Core
install-Package DotNetOpenAuth.core

recommanded:

    go to the bin folder of the project, clear it
    when to publish to the IIS, delete the virtual directory and assign the website again to the IIS, since I faced that issue of having cash in the server which was making the problem...

From the same article:
------------------------
By installing the following two packages I resolved this problem on VS2012 Professional Update 4 RC:

    Open the Package Manager Console from the Menu:

    Tools| Library Package Manage | Package Manager Console

    Install-Package DotNetOpenAuth.AspNet
    Install-Package Microsoft.AspNet.WebHelpers
    
        
From: http://www.swiftsoftwaregroup.com/aps-net-mvc-4-could-not-load-file-or-assembly-dotnetopenauth-core-version-4-0-0-0/
-------------------------------------------------------------------------------------------------------------------------------        
 The key pieces of information here are at lines 3 and 7. Basically, Microsoft.Web.WebPages.OAuth needs DotNetOpenAuth.Core 4.0.0.0, but the DotNetOpenAuth.Core I have is version 4.3.0.0.

The solution is to add these lines under the &lt;runtime&gt;/&lt;assemblyBinding&gt; section of the root Web.config:

&lt;dependentAssembly&gt;
	&lt;assemblyIdentity name="DotNetOpenAuth.AspNet" publicKeyToken="2780ccd10d57b246" culture="neutral" /&gt;
	&lt;bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" /&gt;
&lt;/dependentAssembly&gt;
&lt;dependentAssembly&gt;
	&lt;assemblyIdentity name="DotNetOpenAuth.Core" publicKeyToken="2780ccd10d57b246" culture="neutral" /&gt;
	&lt;bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" /&gt;
&lt;/dependentAssembly&gt;   

===================================================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EntityFramework</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>EF_Migrations_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EntityFramework</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>EF_Migrations_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/* I am using VS 2013 Express for this example

'Migrations' are a feature of EF that allow you to 
a) configure Database Schemas with C# code
b) Seed your database with C# code

Migrations can then track changes you are making in your entity classes,
and it can keep the Database Schema in sync with the changes you make in 
your C# code.


To get to the Migrations:
--------------------------
a) View {menu} =&gt; Other Windows =&gt; Package Manager console
	OR type package in the quick Launch entry box {in upper right of IDE}
b) Then 'Package Manager Console' opens in bottom pane. It is a 'PowerShell' command line
c) enter command: Enable-Migrations -ContextTypeName OdeToFoodDb
---------------------------------------------------------------------------------------------------------------
Dealt with Error in this next section:
---------------------------------------------------------------------------------------------------------------
Got error: The term 'Enable-Migrations' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path
 was included, verify that the path is correct and try again.

enter command: 
*/
Install-Package EntityFramework -IncludePrerelease
/*
It responded: Installing 'EntityFramework 6.1.2-beta2'....
			  Successfully uninstalled 'EntityFramework 5.0.0'.
			
Then I restarted VS	

For this example it responded like this after I repeated the original command: Enable-Migrations -ContextTypeName OdeToFoodDb
"Migrations have already been enabled in project 'OdeToFood'. To overwrite the existing migrations configuration, use the -Force parameter."
So I submitted this command:
*/
 Enable-Migrations -ContextTypeName OdeToFoodDb -Force
/*
NOTE "-Force" made it overwrite the "Configuration.cs" file that was already there from the author.

It responded:
Checking if the context targets an existing database...
Detected database created with a database initializer. Scaffolded migration '201412051643041_InitialCreate' corresponding to existing database. To use an automatic migration instead, delete the Migrations folder and re-run Enable-Migrations specifying the -EnableAutomaticMigrations parameter.
Code First Migrations enabled for project OdeToFood.
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------


Now there is a new root folder in my solution called "Migrations"
The author ended up with two files in the folder, 
	I ended up with three files, but I also have two connections in my web.config, he only had one.
------------------------------
Configuration.cs
201412051643041_InitialCreate.cs		&lt;= This one is from 2014, and is probably mine {This is the Schema Change Script generated in C#}
201210161548264_InitialCreate.cs		&lt;= This one is from 2012, and is probably from the Author


||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

The first time you want to create the database from the code-first code, use this command:

&gt;Add-Migration InitialCreate

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
The configuration.cs file can be set to run automatically.
It also has a seed method for putting data into the tables, see notes in the snippet: EntityFramework_Migrations__Configuration.cs
It (Configuration.cs) can be run either automatically, or from the PackageManager Console: 
*/
Update-Database -Verbose
/*
---------------------------------------------------------------------------------------------------------------
Dealt with Error in this next section:
---------------------------------------------------------------------------------------------------------------
I got the message: "The project 'OdeToFood' failed to build.", so I deleted the file: "201210161548264_InitialCreate.cs", 
and ran it again, here is the response:
=======================================
PM&gt; Update-Database -Verbose
Using StartUp project 'OdeToFood'.
Using NuGet project 'OdeToFood'.
Specify the '-Verbose' flag to view the SQL statements being applied to the target database.
Target database is: 'OdeToFoodDb' (DataSource: .\SQLEXPRESS, Provider: System.Data.SqlClient, Origin: Configuration).
Upgrading history table.
CREATE TABLE [dbo].[__MigrationHistory2] (
    [MigrationId] [nvarchar](150) NOT NULL,
    [ContextKey] [nvarchar](300) NOT NULL,
    [Model] [varbinary](max) NOT NULL,
    [ProductVersion] [nvarchar](32) NOT NULL,
    CONSTRAINT [PK_dbo.__MigrationHistory2] PRIMARY KEY ([MigrationId], [ContextKey])
)
INSERT INTO [dbo].[__MigrationHistory2]
SELECT LEFT([MigrationId], 150), 'OdeToFood.Models.OdeToFoodDb', [Model], LEFT([ProductVersion], 32) FROM [dbo].[__MigrationHistory]
DROP TABLE [dbo].[__MigrationHistory]
EXECUTE sp_rename @objname = N'dbo.__MigrationHistory2', @newname = N'__MigrationHistory', @objtype = N'OBJECT'
Caution: Changing any part of an object name could break scripts and stored procedures.
No pending explicit migrations.
Running Seed method.
=======================================
Now I can see the records in the table, and I see the new table: __MigrationHistory2
and when I run the MVC application, I can see the records as well.
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------


Now if you modify one of the record classes in the Application (e.g.  RestaurantReview) by adding a field, then you could do one of two things:
a) Could tell the EF that I explicitly need a migration script to move the DB schema as it exists to a schema with a new field in it
OR
b) I can update the C# record, and let EF figure it out, b/c it has this setting:
*/
AutomaticMigrationsEnabled = true;
/*

EF tracks the migrations that have been done, and what needs to be done in a hidden table called _MigrationHistory, which is a table on the SQL server.

So if I add a field to the RestaurantReview called: "JUNK":
*/
public  double dblJUNK { get; set; }

/* then in the PackageManager Console run the command to update the schema automatically: */
Update-Database -Verbose
/* It gave me this:
=======================================
PM&gt; Update-Database -Verbose
Using StartUp project 'OdeToFood'.
Using NuGet project 'OdeToFood'.
Specify the '-Verbose' flag to view the SQL statements being applied to the target database.
Target database is: 'OdeToFoodDb' (DataSource: .\SQLEXPRESS, Provider: System.Data.SqlClient, Origin: Configuration).
No pending explicit migrations.
Applying automatic migration: 201412051941558_AutomaticMigration.
ALTER TABLE [dbo].[RestaurantReviews] ADD [dblJUNK] [float] NOT NULL DEFAULT 0
INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'201412051941558_AutomaticMigration', N'OdeToFood.Models.OdeToFoodDb',  0x1F8B080000...2DB1F0000 , N'6.1.2-beta2-31111')

Running Seed method.
=======================================
I edited the third parameter that it put into the Migration history for brevity sake (...)
Now there is a new field called Junk, and it was reseeded</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXCEL</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Personal.XLSB</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXCEL</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Personal.XLSB</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>For Excel 2010 at CCWNC:

This was working:

1] File: PERSONAL.XLSB
   Location: C:\Data\MSOfficeTemplates\Excel
   
   Setting to tell Excel about this location:
   File {Menu} =&gt; Options {Left Pane} =&gt; Trust Center {Left Pane} =&gt; [Trust Center Settings...]
   =&gt; Trusted Locations {Left Pane} =&gt; {Under the section: 'User Locations'}
   		Path: C:\Data\MSOfficeTemplates\Excel\
   		Description: "Excel 2010 default location: Userl Startup"

   		
   The same folder was also listed under the section 'Policy Locations'
 		Path: C:\Data\MSOfficeTemplates\Excel\
   		Description: "Excel Alternative Startup"
 	
 		
NOTE: For pracical purposes, keep the file on the C: drive (b/c sometimes the network is not working), but make a copy 
		on the network that you can always restore from: Z:\MicrosoftOffice_Normal_PERSONAL_Copies

==========================================================
DEFAULT LOCATIONS: {However, Domain Policies are not letting me put anything there}

1] Description: Excel 2010 default location: Application Templates
C:\Program Files (x86)\Microsoft Office\Templates\

2] Description: Excel 2010 default location: User Templates
C:\Users\briesen\AppData\Roaming\Microsoft\Templates\

3] C:\Program Files (x86)\Microsoft Office\Office14\XLSTART\
Description: Excel 2010 default location: Excel StartUp

==========================================================
{This is the one that works at CCWNC w/ Wired Mouse settings

4] C:\Users\briesen\AppData\Roaming\Microsoft\Excel\XLSTART\
Description: Excel 2010 default location: User StartUp

		</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>EXPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Export_Excell_icrosoft.ACE.OLEDB.12.0</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>EXPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Export_Excell_icrosoft.ACE.OLEDB.12.0</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/26267224/the-ole-db-provider-microsoft-ace-oledb-12-0-for-linked-server-null

ERROR: Cannot create an instance of OLE DB provider "Microsoft.ACE.OLEDB.12.0" for linked server "(null)".

-- I'm running Office 365 (64bit). I have loaded the Microsoft Access Database Engine (64bit). 
--This is in Visual Studio 2013 with SSDT as well as SQL Server 2012. 
    
--First, I ran...

sp_configure 'show advanced options', 1;
RECONFIGURE;
GO
sp_configure 'Ad Hoc Distributed Queries', 1;
RECONFIGURE;
GO    
    
--Followed by...with no love.

EXEC sys.sp_addsrvrolemember @loginame = N'&lt;&lt;Domain\User&gt;&gt;', @rolename = N'sysadmin';
GO

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0', N'AllowInProcess', 1 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0', N'DynamicParameters', 1 
GO     
    
    
    
    SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0', 
    'Excel 12.0;Database=C:\Users\UserName\Folder\SomeFile.xlsx;;HDR=NO;IMEX=1', [Table 1$])
    
--I have changed the code to read Microsoft.ACE.OLEDB.12.0 as I have seen that as well, still no love.    
===========================================================================================================================
--Here was one solution to the error
https://www.aspsnippets.com/Articles/The-OLE-DB-provider-Microsoft.Ace.OLEDB.12.0-for-linked-server-null.aspx

--Run the following Query in your SQL Server Management Studio close it and start again

USE [master] 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'AllowInProcess', 1 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'DynamicParameters', 1 
GO 

==================================================================================================================
--another solution	
--If you are the admin on this Windows system, you can set also choose Local System account. 
--This way you won't need to worry about changing the pwd. Works great! Thanks for the tip!! </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Extended_Events_and_Trace_Profiler</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_ConvertTraceToExtendedEvents___about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Extended_Events_and_Trace_Profiler</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_ConvertTraceToExtendedEvents___about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01_ConvertTraceToExtendedEvents___about

/*

1] Install the SP on the server
2] Create and Start a trace running
3] Run the SP and feed it the TraceID of the running trace that you want to convert to
	and extended event script. 
4] The output message of the SP instance is the script for creating the new Extended Events Session
5] Run the script to create the EE object
6] Start the EE and it will start to log to the file that you told it to in the script
7] When you want to examine the file you can either:
	a) Stop the EE, and open the .xel file into VS
	or
	b) read the EE file while it is running





To create a Session from the GUI:

Object Explorer =&gt; Management =&gt; Extended Sessions =&gt; Right-click the 'Sessions' folder
	Then either use the 'New Session Wizard' or 'New Session'
	
To modify a Session from the GUI:

Object Explorer =&gt; Management =&gt; Extended Sessions =&gt; 
	Right-click the existing Session object in the 'Sessions' folder =&gt; Properties =&gt;
	This brings up the same Properties panel that you would get if you did create a "New Session"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Extended_Events_and_Trace_Profiler</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_ConvertTraceToExtendedEvents___EXAMPLE_of_a_Trace</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Extended_Events_and_Trace_Profiler</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_ConvertTraceToExtendedEvents___EXAMPLE_of_a_Trace</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01_ConvertTraceToExtendedEvents___EXAMPLE_of_a_Trace


--This is an example of the original scripted Trace, it both creates the Trace and starts it


/****************************************************/
/* Created by: SQL Server 2012  Profiler          */
/* Date: 05/17/2016  11:06:31 PM         */
/****************************************************/


-- Create a Queue
declare @rc int
declare @TraceID int
declare @maxfilesize bigint
set @maxfilesize = 100 

-- Please replace the text InsertFileNameHere, with an appropriate
-- filename prefixed by a path, e.g., c:\MyFolder\MyTrace. The .trc extension
-- will be appended to the filename automatically. If you are writing from
-- remote server to local drive, please use UNC path and make sure server has
-- write access to your network share

--exec @rc = sp_trace_create @TraceID output, 0, N'InsertFileNameHere', @maxfilesize, NULL 			--&lt;===== Original Line
exec @rc = sp_trace_create @TraceID output, 0, N'C:\Pluralsight\XE\PSDemo1', @maxfilesize, NULL 		--&lt;== This is a .trc file b/ you don't have to include the extension
if (@rc != 0) goto error

-- Client side File and Table cannot be scripted

-- Set the events
declare @on bit
set @on = 1
												--eventid 10 = RPC: Completed
exec sp_trace_setevent @TraceID, 10, 1, @on		--columnid 1 = TextData			--&lt;=== So this is for a completed RPC, and TextData Column
exec sp_trace_setevent @TraceID, 10, 9, @on		--columnid 9 = ClientProcessID
exec sp_trace_setevent @TraceID, 10, 10, @on	--columnid 10 = ApplicationName
exec sp_trace_setevent @TraceID, 10, 3, @on		--columnid 3 = DatabaseID
exec sp_trace_setevent @TraceID, 10, 11, @on	--columnid 11 = loginID
exec sp_trace_setevent @TraceID, 10, 12, @on	--columnid 12 = SPID
exec sp_trace_setevent @TraceID, 10, 13, @on	--columnid 13 = Duration
exec sp_trace_setevent @TraceID, 10, 14, @on	--columnid 14 = StartTime
exec sp_trace_setevent @TraceID, 10, 15, @on	--columnid 15 = EndTime
exec sp_trace_setevent @TraceID, 10, 16, @on	--columnid 16 = Reads
exec sp_trace_setevent @TraceID, 10, 17, @on	--columnid 17 = Writes
exec sp_trace_setevent @TraceID, 10, 18, @on	--columnid 18 = CPU
exec sp_trace_setevent @TraceID, 10, 26, @on	--columnid 26 = ServerName

												--eventid 41 = SQL:StatementCompleted
exec sp_trace_setevent @TraceID, 41, 1, @on	
exec sp_trace_setevent @TraceID, 41, 9, @on
exec sp_trace_setevent @TraceID, 41, 3, @on
exec sp_trace_setevent @TraceID, 41, 10, @on
exec sp_trace_setevent @TraceID, 41, 11, @on
exec sp_trace_setevent @TraceID, 41, 12, @on
exec sp_trace_setevent @TraceID, 41, 13, @on
exec sp_trace_setevent @TraceID, 41, 14, @on
exec sp_trace_setevent @TraceID, 41, 15, @on
exec sp_trace_setevent @TraceID, 41, 16, @on
exec sp_trace_setevent @TraceID, 41, 17, @on
exec sp_trace_setevent @TraceID, 41, 18, @on
exec sp_trace_setevent @TraceID, 41, 26, @on


-- Set the Filters
declare @intfilter int
declare @bigintfilter bigint

exec sp_trace_setfilter @TraceID, 10, 0, 7, N'SQL Server Profiler - 61a3cdc0-1d56-474e-b517-0dea8cd779db'

--reads filter
--remove reads filter before running workload!
set @bigintfilter = 10000
exec sp_trace_setfilter @TraceID, 16, 0, 4, @bigintfilter


-- Set the trace status to start
exec sp_trace_setstatus @TraceID, 1


-- display trace id for future references
select TraceID=@TraceID
goto finish

error: 
select ErrorCode=@rc

finish: 
go

/*
--select * from sys.fn_trace_getinfo(0)			--&lt;== gives summary of all the traces that are running

-- exec sp_trace_setstatus 2, 0
-- exec sp_trace_setstatus 2, 2


--delete file before re-run script to create XE session
--remove filter before re-run when comparing
*/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>GoDaddy</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>How to have multiple MVC websites under a single Go Daddy hosting account </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>GoDaddy</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>How to have multiple MVC websites under a single Go Daddy hosting account </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://benmccallum.wordpress.com/2011/08/22/how-to-have-multiple-mvc-websites-under-a-single-go-daddy-hosting-account/


The other day I decided to expand my repertoire of domain names and make some new websites. Namely, benmccallum.net and Halo Game Finder. My plan was to host them on my existing hosting plan with GoDaddy and after reading some documentation  it seemed this would be possible on my single “Deluxe Windows Hosting” plan. But for some reason I couldn’t get my new domains to serve any content, not even a simple index.html file with some test text in it.

I’ll walk you through the steps and then show you where I had issues.

    Buy the domain names with GoDaddy. 
    Add them to your hosting account.
    Go to your hosting control center and under the Domains tab add your new domains.
    When you add a new domain you simply point the URL to a particular folder within your hosting filesystem. 
    	Note: If that folder doesn’t exist already, one will be made for you.

    Since I already had a primary domain name I currently had something like this:
    http://reach4urphone.com —&gt; /
    In other words, my primary domain was pointing to the root of my hosting filesystem.

    Any additional domains are then simply subfolders within the root. After adding my new domains I had:
    http://reach4urphone.com —&gt; /
    http://halogamefinder.com —&gt; /halogamefinder.com   (a directory sitting under root)
    http://benmccallum.net —&gt; /benmccallum.net                (another directory sitting under root)
    
    Feel free to name these folder however you like but it’s convention/best practise 
    	from my experience to name them according to their domain name.
    Upload the content of your new websites into their associated subfolders
    Test your websites…
    And this is where I had issues. For some reason none of the new websites would work. 
    	Not even if I put a simple test index.html in there and nothing else. 
    	Turns out the problem was in the primary website’s web.config under the root. 
    	This website was an MVC3 app and it’s web.config seemed to be determining the state of all the other websites sitting 
    	in their own folders/virtual directories. 
    	Because MVC3 apps at the moment require bin deployment (where the MVC Assemblies/DLLs are deployed into the bin folder of the app)
    	I think the child websites were getting confused trying to find those DLLs. 
    	To solve the problem I wrapped the system.web element of the root website’s web.config with a location element. See below:

MVC3 app web.config fix

MVC3 app web.config fix

Hope this helps others f</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>GoDaddy</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Using GoDaddy SQL Server w/ ASP.NET MVC5 &amp; Code First</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>GoDaddy</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Using GoDaddy SQL Server w/ ASP.NET MVC5 &amp; Code First</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://httpjunkie.com/2014/954/using-godaddy-sql-server-w-asp-net-mvc5-code-first/

So even though I am a huge proponent of using Foundation over Bootstrap. 
This tutorial will be focused on the basic MVC5 APplication which utilizes Bootstrap. 
Once you are done with this tutorial I have several other tutorials specifically on removing Bootstrap &amp; adding Foundation. 
They are both great Frameworks. 
In fact I have had some client work dealing with working solely on Bootstrap for the past month 
and I’m quite happy about how much of my deep knowledge of Foundation transfers right over to Bootstrap. 
The Framework is not the point of this tutorial, the point is to show how to configure GoDaddy SQL Server with MVC5, 
Identity &amp; Code First by creating a real world (but simple) application for listing a companies national offices.

What you need at minimum for this project:

GoDaddy Hosting with access to at least 1 SQL Server instance.

Visual Studio Express 2013 for Web:
http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx

    If you only have VS 2012 See my tutorial here on setting up MVC5 &amp; Identity in Visual Studio 2012:
    http://httpjunkie.com/2013/158/install-zurbs-foundation-5-in-net-mvc-5/

Microsoft SQL Server Management Studio 2012:
http://www.microsoft.com/en-us/download/details.aspx?id=29062

1. Ceate a MVC 5 project Choose to use Individual Membership using OneASP.Net
2. Create a SQL Server DB at GoDaddy by logging into your Hosting Account &gt; Add SQL Server DB
3. Create a Friendly Name, Database Name &amp; Password then hit OK. I used..

Friendly Name: myLocations
Database name and username: myLocations
Password: a321Password!

     The DB will take a while to setup
    in the meantime it will say Pending Setup for about ten minutes.

4. Once pending setup is done, you will be left on the Manage Databases page select the actions dropdown 
to the right of your database and select Details.

5. Copy the following Information to keep on file for later usage:

    Hostname:
    myLocations.db.9xx6x6x.hostedresource.com
    Admin URL:
    https://p3nmssqladmin.secureserver.net/2012/6

6. Get a connection String for our database by clicking Code Sample in the Details Tab.

    SqlConnection (.NET):
    Data Source=myLocations.db.9116567.hostedresource.com; Initial Catalog=myLocations; User ID=myLocations;     Password=’your password';

7. Once this is done close out of GoDaddy for now. The rest of our work will be done locally. 
So let’s take our connection string and go plug it in as the default connection string in our project. 
I’m going to open up my project for the first time and run it oonce just to make sure it’s working. 
I get the typical Bootstrap template so I’m good!

8. Open your web.config file in the root directory and replace the line:

	
&lt;add name="DefaultConnection" connectionString="Data Source=
(LocalDb)\v11.0;AttachDbFilename=|DataDirectory|\aspnet-
MyNewProject-20140713052856.mdf;Initial Catalog=aspnet-
MyNewProject-20140713052856;Integrated Security=True"
providerName="System.Data.SqlClient" /&gt;

with


	
&lt;add name="DefaultConnection" connectionString="Data Source=
myLocations.db.9116567.hostedresource.com;
Initial Catalog=myLocations; User ID=myLocations;
Password='your password';"
providerName="System.Data.SqlClient" /&gt;

9. Now before we run our ASP.Net application and register our first user (which will add the Identity Tables to our database) 
I want to open up Microsoft SQL Server Management Studio 2012 and click on Connect to Object Explorer or Connect to Database.

(*use your info not mine)

    For Server Name use: myLocations.db.9116567.hostedresource.com
    Login: myLocations
    Password: a321Password!

10. CONNECT, now open (considering your credentials worked) open Databases Tree
Now I’m going to look for myLocations database. The databases you see here are all the other databases hosted on this server. 
Other than the ability to see their name, you cannot access them and they cannot access yours. 
The only database you will be able to manipulate is your database. 
But it is a bit of a pain sorting through to find yours. 
Next time we’ll name it starting with an “A” lol. 
Once you have found yours don’t do anything. just leave it alone for a few minutes. 
You will get an error until we have put some tables in it.

11. Let’s go into our application and hit Ctrl + F5 run our website and click on the register user option in the navigation. 
Make sure you remember your username and password you setup. I’m using:

    U: me@mydomain.com
    P: a321Password!

Once you register it will redirect back to the home page and you wil be logged in with your new email. 
This means that as long as we saved our webconfig file before attempting this ASP.Net 
just accessed our SQL Server Database and setup the tables required in order to maintain users for our site. 
But it also establishes a connection with our SQL Server so that we can start to use Code First to create our own project. 
This concludes the section about setting up a SQL Server Database using GoDaddy and ASP.Net. 
If you would like to continue we will be creating a set of manageable office locations 
for our website using Code First and scaffodling out our MVC Controls &amp; Views. 
We will also include a makeshift Image Upload and use some custom routing techniques as well as some Bootstrap formatting. 
See you on the next line of text.
Model Creation and Enable Migrations

Let’s start by creating an Images folder in the main directory. 
I hate the fact that they don’t have an images folder there, 
so I always create one right off the bat.  
There is a bg.jpg below that you can download and use for the demo if you want or you can create and image that is  
I’m going to show you a quick way to add a background to the jumbotron background. 
Just to spice up the page a little bit. This is in no way professional grade CSS,
 but the standard front page is hideous and I’d rather look at something with some type of style.

bg.zip

12. Put the following CSS in your Site.css file inside the ~/Content folder, just add it to the bottom.

~/Content/Site.css

	
.jumboBg {
 background: url('/images/bg.jpg') no-repeat center center;
}
 
.jumboTitle {
 background: linear-gradient(left, white, rgba(0,0,0, 0.0));
 background: -webkit-linear-gradient(left, white, rgba(0,0,0, 0.0)); /* For Safari 5.1 to 6.0 */
 background: -o-linear-gradient(left, white, rgba(0,0,0, 0.0)); /* For Opera 11.1 to 12.0 */
 background: -moz-linear-gradient(left, white, rgba(0,0,0, 0.0)); /* For Firefox 3.6 to 15 */
 padding: 3px;
 color: #111;
 text-shadow: 2px 2px #ccc;
}
 
.jumboText {
 background: linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0));
 background: -webkit-linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0)); /* For Safari 5.1 to 6.0 */
 background: -o-linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0)); /* For Opera 11.1 to 12.0 */
 background: -moz-linear-gradient(left, #bcd3ff, rgba(0,0,0, 0.0)); /* For Firefox 3.6 to 15 */
 padding: 3px;
 color: #111;
 text-shadow: 1px 1px #fff;
}

13. Replace Index.cshtml with the following code:

~/Views/Home/Index.cshtml

	
@{
 ViewBag.Title = "Office Locations";
}
 
&lt;div class="jumbotron jumboBg"&gt;
   &lt;h1 class="jumboTitle"&gt;Office Locations&lt;/h1&gt;
   &lt;p class="lead jumboText"&gt;ASP.Net MVC5 Demo ~ Responsive office locations project&lt;/p&gt;
   &lt;p&gt;&lt;a href="http://asp.net" class="btn btn-primary btn-lg"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
 
&lt;div class="row"&gt;
   &lt;div class="col-md-4"&gt;
   &lt;h2&gt;Our New Business&lt;/h2&gt;
  &lt;p&gt;
   This new business has clients all over America, therefore we need to have office locations
    in just about every darn near state, city and town.
   &lt;/p&gt;
   &lt;p&gt;&lt;a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
 &lt;/div&gt;
 &lt;div class="col-md-4"&gt;
   &lt;h2&gt;Get more us&lt;/h2&gt;
   &lt;p&gt;Us is good, that's why we sell it and our locations give you us in a building with lights and walls, sometimes computers...&lt;/p&gt;
     &lt;p&gt;&lt;a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301866"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
 &lt;/div&gt;
 &lt;div class="col-md-4"&gt;
     &lt;h2&gt;What we do&lt;/h2&gt;
     &lt;p&gt;You can easily find what we do by visiting where were at. Like a wise man once said it aint where you from it's where you's at..&lt;/p&gt;
     &lt;p&gt;&lt;a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301867"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;

Save the files and run the page, you should see the difference on the home page. Let’s move on.

14. Right click on the Models folder and select Add &gt; Class and name it location.cs

15. make sure the using includes look like this:

	
using System;
 
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;

then make sure the location class looks like this:

	
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;
 
namespace myLocations.Models
{
  public class location
  {
    //This Id must be named like: 'classNameId'
    public int locationId { get; set; }
    public string name { get; set; }
    [StringLength(10), Display(Name = "Address Number")]
    public string addressNum { get; set; }
    [StringLength(100), Column(TypeName = "varchar"), Display(Name = "Street")]
    public string addressStreet { get; set; }
    [StringLength(10), Display(Name = "Suite Number")]
    public string suiteNum { get; set; }
    [StringLength(20), Column(TypeName = "varchar")]
    public string city { get; set; }
    [StringLength(2), Column(TypeName = "varchar")]
    public string state { get; set; }
    [StringLength(10), Column(TypeName = "varchar")]
    public string zip { get; set; }
    [StringLength(16), Column(TypeName = "varchar"), Display(Name = "Phone Number")]
    public string phone { get; set; }
    [StringLength(16), Column(TypeName = "varchar"), Display(Name = "Fax Number")]
    public string fax { get; set; }
    [Required(ErrorMessage = "The email address is required")]
    [EmailAddress(ErrorMessage = "Invalid Email Address")]
    [StringLength(50), Column(TypeName = "varchar")]
    public string email { get; set; }
    [DataType(DataType.MultilineText)]
    [StringLength(255), Column(TypeName = "varchar"), Display(Name = "Counties Served")]
    public string countiesServed { get; set; }
    public bool hasLicense { get; set; }
    [StringLength(20), Column(TypeName = "varchar"), Display(Name = "License Number")]
    public string licenseNum { get; set; }
    [DataType(DataType.MultilineText)]
    [Column(TypeName = "varchar(Max)"), Display(Name = "Location Description")]
    public string description { get; set; }
    [DataType(DataType.MultilineText)]
    [Column(TypeName = "varchar(Max)"), Display(Name = "Why Us")]
    public string whyUs { get; set; }
 
 
 
    //Upload Map Image to /images/maps/ named: (addressNum + "_" + zipdoce + ".jpg")
    public string MapImage
    {
        get { return addressNum.Replace(" ", string.Empty) + "_" + zip.Replace(" ", string.Empty) + ".jpg"; }
    }
  }
}

16. Save the location.cs file then right click on the root of your project and click Build. 
This will ensure that the model class is available for us to create a controller that uses scaffolding. 
If we miss this Build step we will get an error when we scaffold out the controller &amp; view because it won’t know about the model class yet.

After you have finished with the build, right click on the controllers directory 
and Add &gt; Controller &gt; MVC5 Controller with views, using Entity Framework and choose location from the Model class dropdown menu, 
for Data context class choose ApplicationDbContext, 
we will select the option to Use async controllers and leave all 3 checkboxes checked and the layout page blank (but checked). 
Name it the controller locationController

    Note: If you have problems adding a controller, 
    it may be because you did not Build your project after adding your Product model. 
    If this is the case, close out of your controller dialog box, Build the project and try again. 

At this point you have a working controller, 
a folder for views called locations and inside that folder the pages needed for CRUD operations 
(Create, Delete, Details, Edit &amp; Index.cshtml). 
But before we use them , we need to talk to our database and make sure that we have persisted the model to the database, 
so we have no tables for the crud to work with yet.

17. In the upper right hand corner of Visual Studio there is a search field that says: Quick Launch (Ctrl+Q) 
click there and type console + Enter. In the console type the following:

PM&gt; Enable-Migrations -EnableAutomaticMigrations

        *Note: You could also pull up the Package manager console by either navigating to:
        Tools &gt; Library Package Manager &gt; Package Manager Console

    If you entered it correctly you will receive the following in your command line:

    Checking if the context targets an existing database…
    Code First Migrations enabled for project myLocations..

    The enable-migrations command creates a Migrations folder, 
    and it puts in that folder a Configuration.cs file that you can edit to configure Migrations. 
    It has a Configuration class that lets you configure how Migrations behaves for your context. 
    We are using the default configuration. Lets create our first migration to the database. 
    The database is our meccas and we have yet to make a trip.

    There are two command you must know.

    Add-Migration will create a file which contains the instructions for the next migration based on 
    changes you have made to your model or are applying for the first time.

    Update-Database will then run that instruction and apply any pending changes to the database. 
    This can be rolled back. Take a look at the file before you do an update-database and just see who it works so you know. 
    There is an up and a down. Apply &amp; rollback.

    For info on rollbacks, see this Stack-O question: Rollbacks

    We are not using Add-Migration (right now), 
    Code First Migrations automatically calculates and applies the changes when we use Update-Database. 
    THis will instruct Code First Migrations to push the changes to our model up to the database (Mecca).

    Run the ‘Update-Database’ command in Package Manager Console.

    PM&gt; Update-Database -Verbose

    the verbose flag we flew was to let the console know w want to watch the tables get added and get a 
    verbose feedback of what our command is doing. You should be left with the full detail in the console once it’s done. 
    Look through it. Understand what it did.

    Let’s go look at our database in SQL Server Management Studio. If it’s not still open go to File &gt; Connect Object Explorer.

        *Use your information

    Server Name: myLocations.db.9xx6x6x.hostedresource.com
    Login: myLocations
    Password: a321Password!

    Search for your database ‘myLocations’, expand it and then expand Tables. 
    YOu should now see not only your User tables, but also your locations table. 
    DO not use Management Studio to edit your database unless you know exactly what yo are doing with code migrations and code first. 
    You will screw up your project. For now, let’s do all updating of the database through Entity Framework &amp; Code First Migrations.

    Right click on the table locations and choose Edit Top 200 Rows. 
    Don’t edit anything, just let it set there for now.

    Go to your ~Views/Shared/_Layout.cshtml page and replace all with the following code
  
    	
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8" /&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
        &lt;title&gt;@ViewBag.Title - Office Locations&lt;/title&gt;
        @Styles.Render("~/Content/css")
        @Scripts.Render("~/bundles/modernizr")
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
            &lt;div class="container"&gt;
                &lt;div class="navbar-header"&gt;
                    &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;/button&gt;
                    @Html.ActionLink("myLocator", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
                &lt;/div&gt;
                &lt;div class="navbar-collapse collapse"&gt;
                    &lt;ul class="nav navbar-nav"&gt;
                        &lt;li&gt;@Html.ActionLink("Home", "Index", "Home")&lt;/li&gt;
                        &lt;li&gt;@Html.ActionLink("About", "About", "Home")&lt;/li&gt;
                        &lt;li&gt;@Html.ActionLink("Contact", "Contact", "Home")&lt;/li&gt;
                        &lt;li&gt;@Html.ActionLink("Locations", "Index", "Locations")&lt;/li&gt;
                    &lt;/ul&gt;
                    @Html.Partial("_LoginPartial")
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="container body-content"&gt;
            @RenderBody()
            &lt;hr /&gt;
            &lt;footer&gt;
                &lt;p&gt;&amp;copy; It's @DateTime.Now.Year, do you know where are locations are?&lt;/p&gt;
            &lt;/footer&gt;
        &lt;/div&gt;
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/bootstrap")
        @RenderSection("scripts", required: false)
    &lt;/body&gt;
    &lt;/html&gt;
    &lt;/body&gt;
    &lt;/html&gt;

    Hit Ctrl + F5 to run the site locally. 
    In that edit we just performed we added a link to the navigation inside the layout page called locations. 
    Click on it to get to the Index page of your Locations CRUD operations.

    We are going to fix these pages one by one. 
    We will transform the index page into our actual Locations page for our front end of our website. 
    We will transform the details page into a specific location page. 
    And the Edit, Insert and Delete pages will be linked to from our frontend pages 
    BUT ONLY when someone is logged in with the proper admin role associated with their username.

    First lets start by replacing all the CRUD pages they gave you. 
    I have went through and made them a little more responsive and useful. 
    As you change each page. Pay attention to the changes and what they do.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>HTML_Misc</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Path_Up_One_Directory_and_Up_To_Root</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>HTML_Misc</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Path_Up_One_Directory_and_Up_To_Root</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> "../" in front of your path to move up one folder. 
 
 it can be used multiple times for as many files you need to climb up "../../../"
 
 You can use slash / to go straight to the root-folder. 
 e.g. 
		 /images/my_background.jpg
		or
		/html/images/my_background.jpg</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>IMPORT_Excel_CSV_TEXT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>OPENROWSET_to_read_EXCEL_data_v2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>IMPORT_Excel_CSV_TEXT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>OPENROWSET_to_read_EXCEL_data_v2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>OPENROWSET_to_read_EXCEL_data_v2
-- This is based on WBSQL1 at JPHSA

////////////////////////////////////////////////////--OLEDB drivers
https://community.flexerasoftware.com/archive/index.php?t-201524.html

--Check registry:
--For 64-bit:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Office\14.0\Access Connectivity Engine\InstallRoot
--For 32-bit:
HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Office\14.0\Access Connectivity Engine\InstallRoot


Microsoft Access Runtime 2010
v 14.0.4763.1000
Microsoft Access Runtime 2013
v 15.0.4569.1506
Microsoft Access Runtime 2016  (Installed today)  
v 16.0.4288.1001

in the folder: C:\Program Files (x86)\Microsoft Office


/////////////////////////////////////////////////////-- SETUP
--I  set the OLEDB.15 Provider to the following
		--Dynamic parameter [1]
		--DisallowAdHocAccess [0]
		--AllowInProcess [1]


EXEC sp_configure 'Show Advanced', 1
RECONFIGURE

EXEC sp_configure 'Ad hoc dis', 1
RECONFIGURE
--Then used regedit to change the 1 to 0
--The above setting, created a registry entry DisallowAdHocAccess at: 
	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL11.SQL2012\Providers\Microsoft.ACE.OLEDB.12.0
--Set the value of DisallowAdHocAccess to 0.
--Restart the SQL service.

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0' 
    , N'AllowInProcess', 1
RECONFIGURE     
GO

EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.15.0'
    , N'DynamicParameters', 1
RECONFIGURE
GO

/////////////////////////////////////////////////////-- run as administrator

-- Initially I was able to read an Excel file by opening SSMS "run as Administrator" using this:

SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=YES;Database=C:\DATA\TESTv4.xlsx',
				         'SELECT * FROM [NaturalHazards$]');

////////////////////////////////////////////////////-- run as me

--Add local administrator login:  WBSQL1\Administrator
--	Default database:master
--Server Roles {tab}
--	public
--	serveradmin
--		Members of the serveradmin fixed server role can change server-wide configuration options and shut down the server.
--	sysadmin
--		Members of the sysadmin fixed server role can perform any activity in the server.
--	setupadmin
--		Members of the setupadmin fixed server role can add and remove linked servers by using Transact-SQL statements.
--	diskadmin
--		The diskadmin fixed server role is used for managing disk files.
--	bulkadmin
--		Members of the bulkadmin fixed server role can run the BULK INSERT statement

--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||This script runs, while logged on as ggarson
use master
go

EXECUTE AS LOGIN='WBSQL1\Administrator'

SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.15.0',
                         'Excel 12.0 Xml;HDR=YES;Database=C:\DATA\TESTv4.xlsx',
				         'SELECT * FROM [NaturalHazards$]');
REVERT

GO
--||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_BASH</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_BASH</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_BASH</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_BASH</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

create folder:   /home/whatever/myScripts

Execute a bash file:
=======================
{move the terminal to the folder holding the file}
&gt; bash HelloWorld.sh


Execute a bash file that is located in another folder, but have it operate in the present folder
===================================================================================================
{terminal in the folder: /home/vm10/Documents/SCRIPTS }
{the bash file in the folder: /home/vm10/Documents/SCRIPTS/bash/HelloWorld.sh}
&gt; bash ./bash/HelloWorld.sh
{this created the file in the present terminal’s folder, rather than in the folder where the .sh file was actually located}


turn the file into an executable
===================================
&gt; chmod 775 HelloWorld.sh
Once it is an executable, then execute it:
&gt; ./HelloWorld.sh

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Command_Line</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>about_LINUX_Command_Line</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Command_Line</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>about_LINUX_Command_Line</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LINUX

.gz files are archived	(use gunzip to unzip the files)


command line = bash = shell

&gt;ls {list contents of folder}
	-l	{to get long list format}
	
&gt;cd	{change directory}
	&gt;cd /	{go to root directory}
	&gt;cd - 	{go to home directory}
	&gt;ls -l /bin		{can give this command from home directory to give contents of 'bin' directory (in the root)
	&gt;ls -l /bin/p*  {get the list of files that start with 	
&gt;pwd {print working directory, tells you where you are}

&gt;man ls	{gives you the documentation or manual for 'ls', 'q' to exit}

&gt;touch /var/file.txt {create the file 'file.txt'

&gt;cat /var/file.txt {writes the entire file to the console}

&gt;tail /var/file.txt {writes the last few lines ofthe file to the console}

&gt;less /var/file.txt   {shows the file in pages to the console, 'q' to exit}

&gt;chmod a+w /var/file.txt {mofify the security, add the 'write' permission for 'all' users to the file}

&gt;chmod a-w /var/file.txt {mofify the security, rmove the 'write' permission for 'all' users from the file}

&gt;sudo chown glenn /var/file.txt {change the ownership from root to glenn, for the file}

&gt;su glenn {leave the root user, and go back to being 'glenn'}

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_File_permissions_ownership</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>commands</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_File_permissions_ownership</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>commands</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>commands_File_Permissions_ownership

=================================================================================
:: Change Ownership of a file
chown  [user]:[group]
	::INITIAL - created file:   &gt;$ sudo nano file.txt 
	::--------------------------------------------------
	::           USER GROUP
	-rw-r--r-- 1 root root    5 Sep  9 15:22 file.txt
	::--------------------------------------------------
	
	:: {This will leave the user that owns as root, but share it with the group kobe 	
	&gt;$ sudo chown root:kobe file.txt
	
	::RESULT--------------------------------------------------
	-rw-r--r-- 1 root kobe    5 Sep  9 15:22 file.txt
	::--------------------------------------------------
	
	::make all the files in a directory owned by kobe (-R = recursive, i.e. all the files in the folder)
	&gt;$ sudo chown -R kobe:kobe ./myDir
	::versus this which would make kobe the owner of the folder, but not the files in the folder:
	&gt;$ sudo chown kobe:kobe ./myDir		:: without the -R option
=================================================================================	
:: Change the permissions of the file: 		
chmod
	:: read = 4 (or r)
	:: write = 2 (or w)
	:: execute = 1 (or x)
	:: read and write = 6
	:: is a directory = 7
	

	::INITIAL  (from the chown example)
	:: so "-rw-r--r--" is 644
	::--------------------------------------------------
	-rw-r--r-- 1 root kobe    5 Sep  9 15:22 file.txt
	::--------------------------------------------------
	
	::e.g. leave root as owner, and kobe as group permissions	
	&gt;$ sudo chmod 664 file.txt
	
	::RESULT--------------------------------------------------	
	-rw-rw-r-- 1 root kobe    5 Sep  9 15:22 file.txt
	::--------------------------------------------------
	
	::e.g. Make kobe the owner	
	&gt;$ sudo chown kobe:kobe file.txt
	
	::RESULT--------------------------------------------------	
	-rw-rw-r-- 1 kobe kobe    5 Sep  9 15:22 file.txt
	::--------------------------------------------------
	
	::To change it so that only the owner (i.e. kobe) can write to it then:
	&gt;$ sudo chmod 644 file.txt
	::RESULT--------------------------------------------------
	-rw-r--r-- 1 kobe kobe    5 Sep  9 15:22 file.txt
	::--------------------------------------------------

	&gt;$ chmod a+rx myBatchFile	::This makes "myBatchFile" readable and executable
=================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Files_Folders_Directories</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>about_LINUX_Files_Folders_Directories</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Files_Folders_Directories</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>about_LINUX_Files_Folders_Directories</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LINUX_Files_Folders_Directories

a hidden directory is one that starts witha  period "."
In nautilus you choose show hidden files, or [Cntrl]-[h]

&gt;ls		 {shows non-hidden files}
&gt;ls -a 	 {shows all files}


/bin
Binaries (i.e. programs and applications, as well as basic functions (e.g. ls, cat, and other commands)

/sbin
System binaries

rem Both /bin and /sbin contain files needed to run in single user mode.
rem Single User Mode is a special mode that boots you in as a root user to allow you to do system repairs, upgrades, or testing
rem		networking is usually disabled in Single User Mode
rem	When you install a program, it is usually not placed in these folders

/boot
Contains everything your OS nees to boot.

/dev
this is where your devices live. Everything in Linux is a file, even your hardware, so your drive might be /dev/sda
and a partition on your drive might be /dev/sda1. Your webcam even your keyboard are in that directory

/etc
this is where your configurations are stored. That is system wide configurations (e.g. apt, or your sources )
sources are all the repos you system can connect to.

/home
each user has their own sub-folder
This where the user stores their personal folders and documents.

/lib
/lib32
/lib64
this is where your libraries are stored. Libraries are files that applications can use to perform various functions.

/media	mounted by the OS, or applications
/mnt   (i.e. mount) used for manually mounting
These are where you find your other mounted drives (e.g. floppy, USB , external drive, ramdisk, etc.)
in Nautilus you would see these in the left pane, under 'Other Locations'

/opt
this is the optional folder, which is where manually installed software from vendors resides
For example you would find VirtualBox guest additions, or a VPN, and drivers for a printer.
You can also put applications that you have created in this folder

/proc
Contains pseudo files that contain information about system processes and resources 
for example every process will every process will contain a directory (identified by it's PID)
which contains information about that process
e.g to get info about the cpu
	&gt; cat /proc/cpuinfo
or your uptime
	&gt; cat /proc/uptime
	
/root
is the root users home folder, unlike a user's home folder

/run
its a temp FS file system which means it runs in RAM this also means everything in it 
is gone when the system is rebooted or shut down. 

/snap
where snap packages are stored, mainly used by UBUNTU
snap packages are completely self-contained applications 

/SRV
where service data is stored. A web server, or FTP server would use it for files accessed by external users

/sys
it is a way to interact with the kernel
it is created everytime the system boots up.

/tmp
temporary directory, usually emptied when the machine shuts down
If you need to delete folders that are stuck there, login in in Single User Mode, as root and delete them

/usr
This the user application directory where applications used by the user ares stored (vs. the /bin directory used by the system)
any applications installed there are considered non-essential for basic system installation.

/var
the variable directory. Contains files that are expected to grow with time, like log files as well as databases for mail and printer queues.



</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Files_Folders_Directories</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>commands</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Files_Folders_Directories</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>commands</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
commands_Files_Folders_Directories
============


cat 
	:: contents of file to terminal
	&gt;cat [filename]

cd     
	::Change directory
	&gt; cd ~  :: To home directory
	
	cd.. :: back to previous direcrtory )
		&gt; cd ../
		
	cd / ::back to root directory )
		&gt;cd /user/kobe	:: The forward slash goes to the root, and from there it is an absolute path

clear	:: clear the terminal

cp
	::copy files )
	&gt;$ cp theFileName.txt ./myDir/file2.txt
	
date	::diplays the Time and date	
	
echo	::copies it's arguments to the screen	
	
find ::find files and directories, in current and sub-folders (i.e. recursive by default)
	
	f = File ::type
	d = Directory ::type
		
	:: "." = this foler, "-type f" = file, "-name" is the case-sensitive name of the object to find w/ wildcard 
	&gt;$ find . -type f -name "*.php"
	
	:: "." = this foler, "-type f" = file, "-name" is the case-INsensitive name of the object to find w/ wildcard 
	&gt;$ find . -type f -iname "*.php"
	
	:: NOT - e.g. all files that don't have .php extension
	&gt;$ find . -type f -not -iname "*.php"	
	
	:: To search in a particular sub-folder (e.g. etc)
	find /etc -type f -iname "*.conf"
	
	:: PERMISSIONS
	&gt;$ find . -type f -perm 0664	:: "." is this directory, f=file, 0664 is the permissions (? group user other)
	
	:: SIZE
	&gt;$ find . -size +100K 		:: anything over 100 kbites
	&gt;$ find . -size 100K 		:: anything exactly 100 kbites	
	&gt;$ find . -size -1M 		:: anything under 1 MegaByte
	
	:: NOT RECURSIVE, e.g. only in the present folder not subfolders
	&gt;$ find . -maxdept 1 -type f -iname "*.php"	
		
gedit 
	:: open file in text editor
	&gt;gedit [filename]
	
grep :: To find text in a file
	-i = ignore case
	-r = include subdirectories
	-n = gives line number where sting is found in the output

	&gt;$ grep "function" b1.PHP   :: first: the string to look for second: file to look into
	&gt;$ grep "function" b1.PHP b2.PHP	:: search in multiple files
	&gt;$ grep -i "function" ./*	::ignore case, look in all files in JUST this directory
	&gt;$ grep -r -i "function" ./*	:: including subdirectories
	
	
less
	::like MORE in Windows, or &gt;cat except it just shows one screen then lets you go through rest line by line	
locate
		&gt;locate [filename]  ::will search for the file in the whole structure
		:: can pipe it through 'less' if it is a lot of stuf
		&gt; locate gpedit | less
ls     
	:: list content of current directory )
	&gt; ls -l	:: with security
	&gt; ls -a	:: all - do not ignore entries starting with .
	&gt; ls /usr/share/application		::you could be in your home directory and list the contents in another directory
	&gt; ls ~/Documents	:: list the contents of the Documents folder in my home directory, while I am at the root of my home directory
	&gt; ls -l practice	:: lists the files with the word "practice" in them, and shows their security info
mkdir  
	::make new directory )
	&gt;$ sudo mkdir myDir
	::RESULT -------------------------------------------- Owned by Root
	drwxr-xr-x 2 root root 4096 Sep  9 16:10 myDir
	:: the 'x' means executable, which means you can cd into it
	::----------------------------------------------------
	
	&gt;$ mkdir /usr/bin/myDir	:: give absolute path to the location to create the directory

	&gt;$ mkdir  gigUsr	:: create the directory in current folder
	:: or
	&gt;$ mkdir  ./gigUsr	:: create the directory in current folder

	&gt;$ mkdir  ./gigUsr/gigSubDir	:: create the directory in folder which is located in the current folder
	&gt;$ mkdir ../../myDir 	:: create the directory 2 levels up

mv	:: Move a file, where format is like 'cp'
	&gt;$ mv file1.txt fileNewName.txt 	::To rename a file in the same directory
 	&gt;$ $ mv gigSubDir gigSubDir2		:: rename a folder

pwd  (
	::print working directory )
rm       
	::remove file)
	&gt;$ rm file.txt
	&gt;$ rm ./*.cpp    ::remove everything in the current folder with the extension .cpp
	&gt;$ rm ./*    	 ::remove everything in the current folder but leave the directory itself
	
	&gt;$ rm myDir/*	 :: remove everything in the subdirectory [myDir]. but leave the subdirectory itself
	::OR
	&gt;$ rm ./myDir/*	 :: remove everything in the subdirectory [myDir]. but leave the subdirectory itself
	
	&gt;$ rm -rf myDir  :: remove the directory itself, and everything in it
		
		
rmdir  
	::remove directory)

	
touch	:: create files	without opening it
	&gt;$ touch file1.txt file2.txt file3.cpp file4.cpp</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Programs</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>commands</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Programs</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>commands</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Variables
::=================

	$PATH
	::OUTPUT
	::---------
	bash: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin: No such file or directory

	
::=================	

::To find programs or things with the word "bluefish" in them
	&gt;apt-cache search bluefish*
	&gt;apt-cache search chrome
	
::To see what version I have, and what version is in the repository - action "policy", and "gimp" is the program I am referring to.
	&gt;apt-cache policy 

::To install Applications, "apt-get" with action "install" and program name (e.g. bluefish) I think this gets programs from the Linux respository
	&gt;sudo apt-get install bluefish
	&gt;sudo apt-get install chromium-browser	::found the spelling of the name from using : &gt;apt-cache search chrome
	
	::could browse to chrome.google.com to get and download the 64bit installer, then save the file locally
	:: use terminal to get to the download folder
	:: -i is for install, where 'filename.deb' is the downloaded file from chrome/google
	&gt; sudo dpkg -i ./filename.deb
	::then launch it by typing at the terminal: &gt;google-chrome

::List of all currently installed programs
	&gt; dpkg -1	

::To run a program in current directory
	&gt;./programName
	
:: List of running processes
	&gt;ps aux
	&gt;ps -A
	
:: To terminate a program
	[CTRL]-[C]
	
:: To stop or pause a program
	[CTRL]-[Z]
	
:: To KILL a program
	NOTE: use &gt;ps -A :: this shows you the processes and their IDs
	&gt; kill -15 [job number]	:: "-15" means terminate, do this before "-9"
	&gt; kill -9 [job number]	:: "-9" means kill 			but you should try to stop it first with 	
	
:: to see background jobs
	&gt;bg
	
:: to see current jobs
	&gt;jobs
	
::To bring a background job to the foreground:
	&gt;fg [job number]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>LINUX_Scheduled_Tasks</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>about_LINUX_Scheduled_Tasks</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>LINUX_Scheduled_Tasks</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>about_LINUX_Scheduled_Tasks</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_LINUX_Scheduled_Tasks - chrontab


:: open the crontab file under the root /tmp folder {but the task will have my security permissions}
&gt;$ chrontab -e

:: open the crontab file under the root /tmp folder { the task will have super user security permissions}
&gt;$ sudo chrontab -e

===================================================================== ORIG chrontab file
# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# m h  dom mon dow   command
=======================================================================

:: add a line at the bottom (e.g. 12 minutes, 14 hours, regardless of DayOfMonth, Month, DayOfWeek
12 14 * * * ls &gt; /home/kobe/lt/cronres.txt


:: or (e.g. 0 minutes, 5(am) hours * * sundays, regardless of DayOfMonth, Month
12 14 * * 0 ls &gt; /home/kobe/lt/cronres.txt

=======================================================================
:: To update system every week on Monday at 7am (where 'y' means 'yes' to upgrade
0 7 * * 1 apt-get upgrade -y
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Log_Parser_Studio</Category>
        <Language>SQLSERVER7 SQL</Language>
        <Public>false</Public>
        <Name>about_Log_Parser_Studio</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Log_Parser_Studio</Category>
          <Language>SQLSERVER7 SQL</Language>
          <Public>false</Public>
          <Name>about_Log_Parser_Studio</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Log_Parser_Studio

good intro
https://blogs.technet.microsoft.com/exchange/2012/03/07/introducing-log-parser-studio/

how to batch and automate:
https://blogs.technet.microsoft.com/karywa/2015/02/17/lps-tutorial-batched-queries-folders-and-automation/

forums: https://forums.iis.net/default.aspx/51

https://blogs.iis.net/carlosag/analyze-your-iis-log-files-favorite-log-parser-queries

manual online:
https://technet.microsoft.com/en-us/library/bb878032.aspx

formats, sql, functions
https://technet.microsoft.com/en-us/library/ee692660.aspx

some code examples
https://technet.microsoft.com/en-us/library/2006.08.insidemsft.aspx

double qoutes in IIS advanced logs
https://blogs.technet.microsoft.com/karywa/2013/06/28/log-parser-studio-and-iis-advanced-logging/

a few basics and some code examples
https://blogs.iis.net/chrisad/Chris</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MaintenancePlan</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ola_hallengren_MaintenanceSolution.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MaintenancePlan</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ola_hallengren_MaintenanceSolution.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/*
--http://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html
SQL Server Maintenance Solution - SQL Server 2005, SQL Server 2008, SQL Server 2008 R2, and SQL Server 2012

Backup: http://ola.hallengren.com/sql-server-backup.html
Integrity Check: http://ola.hallengren.com/sql-server-integrity-check.html
Index and Statistics Maintenance: http://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html

The solution is free: http://ola.hallengren.com/license.html

You can contact me by e-mail at ola@hallengren.com.

Last updated 23 February, 2014.

Ola Hallengren
http://ola.hallengren.com

*/

USE [master] -- Specify the database in which the objects will be created.

SET NOCOUNT ON

DECLARE @CreateJobs nvarchar(max)
DECLARE @BackupDirectory nvarchar(max)
DECLARE @OutputFileDirectory nvarchar(max)
DECLARE @LogToTable nvarchar(max)
DECLARE @Version numeric(18,10)
DECLARE @Error int

SET @CreateJobs          = 'Y'          -- Specify whether jobs should be created.
SET @BackupDirectory     = N'C:\Backup' -- Specify the backup root directory.
SET @OutputFileDirectory = NULL         -- Specify the output file directory. If no directory is specified, then the SQL Server error log directory is used.
SET @LogToTable          = 'Y'          -- Log commands to a table.

SET @Error = 0

SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

IF IS_SRVROLEMEMBER('sysadmin') = 0
BEGIN
  RAISERROR('You need to be a member of the SysAdmin server role to install the solution.',16,1)
  SET @Error = @@ERROR
END

IF OBJECT_ID('tempdb..#Config') IS NOT NULL DROP TABLE #Config

CREATE TABLE #Config ([Name] nvarchar(max),
                      [Value] nvarchar(max))

IF @CreateJobs = 'Y' AND @OutputFileDirectory IS NULL AND SERVERPROPERTY('EngineEdition') &lt;&gt; 4
BEGIN
  IF @Version &gt;= 11
  BEGIN
    SELECT @OutputFileDirectory = [path]
    FROM sys.dm_os_server_diagnostics_log_configurations
  END
  ELSE
  BEGIN
    SELECT @OutputFileDirectory = LEFT(CAST(SERVERPROPERTY('ErrorLogFileName') AS nvarchar(max)),LEN(CAST(SERVERPROPERTY('ErrorLogFileName') AS nvarchar(max))) - CHARINDEX('\',REVERSE(CAST(SERVERPROPERTY('ErrorLogFileName') AS nvarchar(max)))))
  END
END

IF @CreateJobs = 'Y' AND RIGHT(@OutputFileDirectory,1) = '\' AND SERVERPROPERTY('EngineEdition') &lt;&gt; 4
BEGIN
  SET @OutputFileDirectory = LEFT(@OutputFileDirectory, LEN(@OutputFileDirectory) - 1)
END

INSERT INTO #Config ([Name], [Value])
VALUES('CreateJobs', @CreateJobs)

INSERT INTO #Config ([Name], [Value])
VALUES('BackupDirectory', @BackupDirectory)

INSERT INTO #Config ([Name], [Value])
VALUES('OutputFileDirectory', @OutputFileDirectory)

INSERT INTO #Config ([Name], [Value])
VALUES('LogToTable', @LogToTable)

INSERT INTO #Config ([Name], [Value])
VALUES('DatabaseName', DB_NAME(DB_ID()))

INSERT INTO #Config ([Name], [Value])
VALUES('Error', CAST(@Error AS nvarchar))

IF OBJECT_ID('[dbo].[DatabaseBackup]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseBackup]
IF OBJECT_ID('[dbo].[DatabaseIntegrityCheck]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseIntegrityCheck]
IF OBJECT_ID('[dbo].[IndexOptimize]') IS NOT NULL DROP PROCEDURE [dbo].[IndexOptimize]
IF OBJECT_ID('[dbo].[CommandExecute]') IS NOT NULL DROP PROCEDURE [dbo].[CommandExecute]

IF OBJECT_ID('[dbo].[CommandLog]') IS NULL AND OBJECT_ID('[dbo].[PK_CommandLog]') IS NULL
BEGIN
CREATE TABLE [dbo].[CommandLog](
[ID] int IDENTITY(1,1) NOT NULL CONSTRAINT [PK_CommandLog] PRIMARY KEY CLUSTERED,
[DatabaseName] sysname NULL,
[SchemaName] sysname NULL,
[ObjectName] sysname NULL,
[ObjectType] char(2) NULL,
[IndexName] sysname NULL,
[IndexType] tinyint NULL,
[StatisticsName] sysname NULL,
[PartitionNumber] int NULL,
[ExtendedInfo] xml NULL,
[Command] nvarchar(max) NOT NULL,
[CommandType] nvarchar(60) NOT NULL,
[StartTime] datetime NOT NULL,
[EndTime] datetime NULL,
[ErrorNumber] int NULL,
[ErrorMessage] nvarchar(max) NULL
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CommandExecute]

@Command nvarchar(max),
@CommandType nvarchar(max),
@Mode int,
@Comment nvarchar(max) = NULL,
@DatabaseName nvarchar(max) = NULL,
@SchemaName nvarchar(max) = NULL,
@ObjectName nvarchar(max) = NULL,
@ObjectType nvarchar(max) = NULL,
@IndexName nvarchar(max) = NULL,
@IndexType int = NULL,
@StatisticsName nvarchar(max) = NULL,
@PartitionNumber int = NULL,
@ExtendedInfo xml = NULL,
@LogToTable nvarchar(max),
@Execute nvarchar(max)

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)
  DECLARE @ErrorMessageOriginal nvarchar(max)

  DECLARE @StartTime datetime
  DECLARE @EndTime datetime

  DECLARE @StartTimeSec datetime
  DECLARE @EndTimeSec datetime

  DECLARE @ID int

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO ReturnCode
  END

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF @Command IS NULL OR @Command = ''
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Command is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CommandType IS NULL OR @CommandType = '' OR LEN(@CommandType) &gt; 60
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CommandType is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Mode NOT IN(1,2) OR @Mode IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Mode is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO ReturnCode
  END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartTime = GETDATE()
  SET @StartTimeSec = CONVERT(datetime,CONVERT(nvarchar,@StartTime,120),120)

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTimeSec,120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Command: ' + @Command
  IF @Comment IS NOT NULL SET @StartMessage = @StartMessage + CHAR(13) + CHAR(10) + 'Comment: ' + @Comment
  SET @StartMessage = REPLACE(@StartMessage,'%','%%')
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  IF @LogToTable = 'Y'
  BEGIN
    INSERT INTO dbo.CommandLog (DatabaseName, SchemaName, ObjectName, ObjectType, IndexName, IndexType, StatisticsName, PartitionNumber, ExtendedInfo, CommandType, Command, StartTime)
    VALUES (@DatabaseName, @SchemaName, @ObjectName, @ObjectType, @IndexName, @IndexType, @StatisticsName, @PartitionNumber, @ExtendedInfo, @CommandType, @Command, @StartTime)
  END

  SET @ID = SCOPE_IDENTITY()

  ----------------------------------------------------------------------------------------------------
  --// Execute command                                                                            //--
  ----------------------------------------------------------------------------------------------------

  IF @Mode = 1 AND @Execute = 'Y'
  BEGIN
    EXECUTE(@Command)
    SET @Error = @@ERROR
    SET @ReturnCode = @Error
  END

  IF @Mode = 2 AND @Execute = 'Y'
  BEGIN
    BEGIN TRY
      EXECUTE(@Command)
    END TRY
    BEGIN CATCH
      SET @Error = ERROR_NUMBER()
      SET @ReturnCode = @Error
      SET @ErrorMessageOriginal = ERROR_MESSAGE()
      SET @ErrorMessage = 'Msg ' + CAST(@Error AS nvarchar) + ', ' + ISNULL(@ErrorMessageOriginal,'')
      RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    END CATCH
  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  SET @EndTime = GETDATE()
  SET @EndTimeSec = CONVERT(datetime,CONVERT(varchar,@EndTime,120),120)

  SET @EndMessage = 'Outcome: ' + CASE WHEN @Execute = 'N' THEN 'Not Executed' WHEN @Error = 0 THEN 'Succeeded' ELSE 'Failed' END + CHAR(13) + CHAR(10)
  SET @EndMessage = @EndMessage + 'Duration: ' + CASE WHEN DATEDIFF(ss,@StartTimeSec, @EndTimeSec)/(24*3600) &gt; 0 THEN CAST(DATEDIFF(ss,@StartTimeSec, @EndTimeSec)/(24*3600) AS nvarchar) + '.' ELSE '' END + CONVERT(nvarchar,@EndTimeSec - @StartTimeSec,108) + CHAR(13) + CHAR(10)
  SET @EndMessage = @EndMessage + 'Date and time: ' + CONVERT(nvarchar,@EndTimeSec,120) + CHAR(13) + CHAR(10) + ' '
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @LogToTable = 'Y'
  BEGIN
    UPDATE dbo.CommandLog
    SET EndTime = @EndTime,
        ErrorNumber = CASE WHEN @Execute = 'N' THEN NULL ELSE @Error END,
        ErrorMessage = @ErrorMessageOriginal
    WHERE ID = @ID
  END

  ReturnCode:
  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DatabaseBackup]

@Databases nvarchar(max),
@Directory nvarchar(max) = NULL,
@BackupType nvarchar(max),
@Verify nvarchar(max) = 'N',
@CleanupTime int = NULL,
@Compress nvarchar(max) = NULL,
@CopyOnly nvarchar(max) = 'N',
@ChangeBackupType nvarchar(max) = 'N',
@BackupSoftware nvarchar(max) = NULL,
@CheckSum nvarchar(max) = 'N',
@BlockSize int = NULL,
@BufferCount int = NULL,
@MaxTransferSize int = NULL,
@NumberOfFiles int = NULL,
@CompressionLevel int = NULL,
@Description nvarchar(max) = NULL,
@Threads int = NULL,
@Throttle int = NULL,
@Encrypt nvarchar(max) = 'N',
@EncryptionAlgorithm nvarchar(max) = NULL,
@EncryptionKey nvarchar(max) = NULL,
@ReadWriteFileGroups nvarchar(max) = 'N',
@OverrideBackupPreference nvarchar(max) = 'N',
@LogToTable nvarchar(max) = 'N',
@Execute nvarchar(max) = 'Y'

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @DatabaseMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)

  DECLARE @Version numeric(18,10)
  DECLARE @AmazonRDS bit

  DECLARE @Cluster nvarchar(max)

  DECLARE @DefaultDirectory nvarchar(4000)

  DECLARE @CurrentRootDirectoryID int
  DECLARE @CurrentRootDirectoryPath nvarchar(4000)

  DECLARE @CurrentDBID int
  DECLARE @CurrentDatabaseID int
  DECLARE @CurrentDatabaseName nvarchar(max)
  DECLARE @CurrentBackupType nvarchar(max)
  DECLARE @CurrentFileExtension nvarchar(max)
  DECLARE @CurrentFileNumber int
  DECLARE @CurrentDifferentialBaseLSN numeric(25,0)
  DECLARE @CurrentDifferentialBaseIsSnapshot bit
  DECLARE @CurrentLogLSN numeric(25,0)
  DECLARE @CurrentLatestBackup datetime
  DECLARE @CurrentDatabaseNameFS nvarchar(max)
  DECLARE @CurrentDirectoryID int
  DECLARE @CurrentDirectoryPath nvarchar(max)
  DECLARE @CurrentFilePath nvarchar(max)
  DECLARE @CurrentDate datetime
  DECLARE @CurrentCleanupDate datetime
  DECLARE @CurrentIsDatabaseAccessible bit
  DECLARE @CurrentAvailabilityGroup nvarchar(max)
  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)
  DECLARE @CurrentAvailabilityGroupBackupPreference nvarchar(max)
  DECLARE @CurrentIsPreferredBackupReplica bit
  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)
  DECLARE @CurrentLogShippingRole nvarchar(max)

  DECLARE @CurrentCommand01 nvarchar(max)
  DECLARE @CurrentCommand02 nvarchar(max)
  DECLARE @CurrentCommand03 nvarchar(max)
  DECLARE @CurrentCommand04 nvarchar(max)

  DECLARE @CurrentCommandOutput01 int
  DECLARE @CurrentCommandOutput02 int
  DECLARE @CurrentCommandOutput03 int
  DECLARE @CurrentCommandOutput04 int

  DECLARE @CurrentCommandType01 nvarchar(max)
  DECLARE @CurrentCommandType02 nvarchar(max)
  DECLARE @CurrentCommandType03 nvarchar(max)
  DECLARE @CurrentCommandType04 nvarchar(max)

  DECLARE @Directories TABLE (ID int PRIMARY KEY,
                              DirectoryPath nvarchar(max),
                              Completed bit)

  DECLARE @DirectoryInfo TABLE (FileExists bit,
                                FileIsADirectory bit,
                                ParentDirectoryExists bit)

  DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseNameFS nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))

  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)

  DECLARE @CurrentDirectories TABLE (ID int PRIMARY KEY,
                                     DirectoryPath nvarchar(max),
                                     CreateCompleted bit,
                                     CleanupCompleted bit,
                                     CreateOutput int,
                                     CleanupOutput int)

  DECLARE @CurrentFiles TABLE (CurrentFilePath nvarchar(max))

  DECLARE @CurrentCleanupDates TABLE (CleanupDate datetime)

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  SET @AmazonRDS = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (SELECT QUOTENAME(schemas.name) FROM sys.schemas schemas INNER JOIN sys.objects objects ON schemas.[schema_id] = objects.[schema_id] WHERE [object_id] = @@PROCID) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Directory = ' + ISNULL('''' + REPLACE(@Directory,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @BackupType = ' + ISNULL('''' + REPLACE(@BackupType,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Verify = ' + ISNULL('''' + REPLACE(@Verify,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CleanupTime = ' + ISNULL(CAST(@CleanupTime AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Compress = ' + ISNULL('''' + REPLACE(@Compress,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CopyOnly = ' + ISNULL('''' + REPLACE(@CopyOnly,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @ChangeBackupType = ' + ISNULL('''' + REPLACE(@ChangeBackupType,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @BackupSoftware = ' + ISNULL('''' + REPLACE(@BackupSoftware,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CheckSum = ' + ISNULL('''' + REPLACE(@CheckSum,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @BlockSize = ' + ISNULL(CAST(@BlockSize AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @BufferCount = ' + ISNULL(CAST(@BufferCount AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @MaxTransferSize = ' + ISNULL(CAST(@MaxTransferSize AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @NumberOfFiles = ' + ISNULL(CAST(@NumberOfFiles AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @CompressionLevel = ' + ISNULL(CAST(@CompressionLevel AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Description = ' + ISNULL('''' + REPLACE(@Description,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Threads = ' + ISNULL(CAST(@Threads AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Throttle = ' + ISNULL(CAST(@Throttle AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Encrypt = ' + ISNULL('''' + REPLACE(@Encrypt,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @EncryptionAlgorithm = ' + ISNULL('''' + REPLACE(@EncryptionAlgorithm,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @EncryptionKey = ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @ReadWriteFileGroups = ' + ISNULL('''' + REPLACE(@ReadWriteFileGroups,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @OverrideBackupPreference = ' + ISNULL('''' + REPLACE(@OverrideBackupPreference,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL') + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Source: http://ola.hallengren.com' + CHAR(13) + CHAR(10)
  SET @StartMessage = REPLACE(@StartMessage,'%','%%') + ' '
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute is missing. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND (OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@LogToTable%' OR OBJECT_DEFINITION(objects.[object_id]) LIKE '%LOCK_TIMEOUT%'))
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute needs to be updated. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @AmazonRDS = 1
  BEGIN
    SET @ErrorMessage = 'The stored procedure DatabaseBackup is not supported on Amazon RDS.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Select databases                                                                           //--
  ----------------------------------------------------------------------------------------------------

  SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition &lt; LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)

  INSERT INTO @tmpDatabases (DatabaseName, DatabaseNameFS, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([name],'\',''),'/',''),':',''),'*',''),'?',''),'"',''),'&lt;',''),'&gt;',''),'|',''),' ','') AS DatabaseNameFS,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] &lt;&gt; 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Check database names                                                                       //--
  ----------------------------------------------------------------------------------------------------

  SET @ErrorMessage = ''
  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '
  FROM @tmpDatabases
  WHERE Selected = 1
  AND DatabaseNameFS = ''
  ORDER BY DatabaseName ASC
  IF @@ROWCOUNT &gt; 0
  BEGIN
    SET @ErrorMessage = 'The names of the following databases are not supported: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  SET @ErrorMessage = ''
  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '
  FROM @tmpDatabases
  WHERE UPPER(DatabaseNameFS) IN(SELECT UPPER(DatabaseNameFS) FROM @tmpDatabases GROUP BY UPPER(DatabaseNameFS) HAVING COUNT(*) &gt; 1)
  AND UPPER(DatabaseNameFS) IN(SELECT UPPER(DatabaseNameFS) FROM @tmpDatabases WHERE Selected = 1)
  AND DatabaseNameFS &lt;&gt; ''
  ORDER BY DatabaseName ASC
  OPTION (RECOMPILE)
  IF @@ROWCOUNT &gt; 0
  BEGIN
    SET @ErrorMessage = 'The names of the following databases are not unique in the file system: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Select directories                                                                         //--
  ----------------------------------------------------------------------------------------------------

  IF @Directory IS NULL
  BEGIN
    EXECUTE [master].dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\Microsoft\MSSQLServer\MSSQLServer', N'BackupDirectory', @DefaultDirectory OUTPUT

    INSERT INTO @Directories (ID, DirectoryPath, Completed)
    SELECT 1, @DefaultDirectory, 0
  END
  ELSE
  BEGIN
    SET @Directory = REPLACE(@Directory, ', ', ',');

    WITH Directories (StartPosition, EndPosition, Directory) AS
    (
    SELECT 1 AS StartPosition,
           ISNULL(NULLIF(CHARINDEX(',', @Directory, 1), 0), LEN(@Directory) + 1) AS EndPosition,
           SUBSTRING(@Directory, 1, ISNULL(NULLIF(CHARINDEX(',', @Directory, 1), 0), LEN(@Directory) + 1) - 1) AS Directory
    WHERE @Directory IS NOT NULL
    UNION ALL
    SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
           ISNULL(NULLIF(CHARINDEX(',', @Directory, EndPosition + 1), 0), LEN(@Directory) + 1) AS EndPosition,
           SUBSTRING(@Directory, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Directory, EndPosition + 1), 0), LEN(@Directory) + 1) - EndPosition - 1) AS Directory
    FROM Directories
    WHERE EndPosition &lt; LEN(@Directory) + 1
    )
    INSERT INTO @Directories (ID, DirectoryPath, Completed)
    SELECT ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS ID,
           Directory,
           0
    FROM Directories
    OPTION (MAXRECURSION 0)
  END

  ----------------------------------------------------------------------------------------------------
  --// Check directories                                                                          //--
  ----------------------------------------------------------------------------------------------------

  IF EXISTS(SELECT * FROM @Directories WHERE NOT (DirectoryPath LIKE '_:' OR DirectoryPath LIKE '_:\%' OR DirectoryPath LIKE '\\%\%') OR DirectoryPath IS NULL OR LEFT(DirectoryPath,1) = ' ' OR RIGHT(DirectoryPath,1) = ' ') OR EXISTS (SELECT * FROM @Directories GROUP BY DirectoryPath HAVING COUNT(*) &lt;&gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Directory is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END
  ELSE
  BEGIN
    WHILE EXISTS(SELECT * FROM @Directories WHERE Completed = 0)
    BEGIN
      SELECT TOP 1 @CurrentRootDirectoryID = ID,
                   @CurrentRootDirectoryPath = DirectoryPath
      FROM @Directories
      WHERE Completed = 0
      ORDER BY ID ASC

      INSERT INTO @DirectoryInfo (FileExists, FileIsADirectory, ParentDirectoryExists)
      EXECUTE [master].dbo.xp_fileexist @CurrentRootDirectoryPath

      IF NOT EXISTS (SELECT * FROM @DirectoryInfo WHERE FileExists = 0 AND FileIsADirectory = 1 AND ParentDirectoryExists = 1)
      BEGIN
        SET @ErrorMessage = 'The directory ' + @CurrentRootDirectoryPath + ' does not exist.' + CHAR(13) + CHAR(10) + ' '
        RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
        SET @Error = @@ERROR
      END

      UPDATE @Directories
      SET Completed = 1
      WHERE ID = @CurrentRootDirectoryID

      SET @CurrentRootDirectoryID = NULL
      SET @CurrentRootDirectoryPath = NULL

      DELETE FROM @DirectoryInfo
    END
  END

  ----------------------------------------------------------------------------------------------------
  --// Get default compression                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF @Compress IS NULL
  BEGIN
    SELECT @Compress = CASE
    WHEN @BackupSoftware IS NULL AND EXISTS(SELECT * FROM sys.configurations WHERE name = 'backup compression default' AND value_in_use = 1) THEN 'Y'
    WHEN @BackupSoftware IS NULL AND NOT EXISTS(SELECT * FROM sys.configurations WHERE name = 'backup compression default' AND value_in_use = 1) THEN 'N'
    WHEN @BackupSoftware IS NOT NULL AND (@CompressionLevel IS NULL OR @CompressionLevel &gt; 0)  THEN 'Y'
    WHEN @BackupSoftware IS NOT NULL AND @CompressionLevel = 0  THEN 'N'
    END
  END

  ----------------------------------------------------------------------------------------------------
  --// Get number of files                                                                        //--
  ----------------------------------------------------------------------------------------------------

  IF @NumberOfFiles IS NULL
  BEGIN
    SELECT @NumberOfFiles = (SELECT COUNT(*) FROM @Directories)
  END

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF @BackupType NOT IN ('FULL','DIFF','LOG') OR @BackupType IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BackupType is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Verify NOT IN ('Y','N') OR @Verify IS NULL OR (@BackupSoftware = 'SQLSAFE' AND @Encrypt = 'Y' AND @Verify = 'Y')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Verify is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CleanupTime &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CleanupTime is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Compress NOT IN ('Y','N') OR @Compress IS NULL OR (@Compress = 'Y' AND @BackupSoftware IS NULL AND NOT ((@Version &gt;= 10 AND @Version &lt; 10.5 AND SERVERPROPERTY('EngineEdition') = 3) OR (@Version &gt;= 10.5 AND (SERVERPROPERTY('EngineEdition') = 3 OR SERVERPROPERTY('EditionID') IN (-1534726760, 284895786))))) OR (@Compress = 'N' AND @BackupSoftware IS NOT NULL AND (@CompressionLevel IS NULL OR @CompressionLevel &gt;= 1)) OR (@Compress = 'Y' AND @BackupSoftware IS NOT NULL AND @CompressionLevel = 0)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Compress is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CopyOnly NOT IN ('Y','N') OR @CopyOnly IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CopyOnly is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @ChangeBackupType NOT IN ('Y','N') OR @ChangeBackupType IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @ChangeBackupType is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware NOT IN ('LITESPEED','SQLBACKUP','SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BackupSoftware is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware = 'LITESPEED' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'xp_backup_database')
  BEGIN
    SET @ErrorMessage = 'NetVault LiteSpeed for SQL Server is not installed. Download http://www.quest.com/litespeed-for-sql-server/.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware = 'SQLBACKUP' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'sqlbackup')
  BEGIN
    SET @ErrorMessage = 'Red Gate SQL Backup is not installed. Download http://www.red-gate.com/products/dba/sql-backup/.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BackupSoftware = 'SQLSAFE' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'xp_ss_backup')
  BEGIN
    SET @ErrorMessage = 'Idera SQL safe backup is not installed. Download http://www.idera.com/Products/SQL-Server/SQL-safe-backup/.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @CheckSum NOT IN ('Y','N') OR @CheckSum IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CheckSum is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BlockSize NOT IN (512,1024,2048,4096,8192,16384,32768,65536) OR (@BlockSize IS NOT NULL AND @BackupSoftware = 'SQLBACKUP') OR (@BlockSize IS NOT NULL AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BlockSize is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @BufferCount &lt;= 0 OR @BufferCount &gt; 2147483647 OR (@BufferCount IS NOT NULL AND @BackupSoftware = 'SQLBACKUP') OR (@BufferCount IS NOT NULL AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @BufferCount is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @MaxTransferSize &lt; 65536 OR @MaxTransferSize &gt; 4194304 OR @MaxTransferSize % 65536 &gt; 0 OR (@MaxTransferSize &gt; 1048576 AND @BackupSoftware = 'SQLBACKUP') OR (@MaxTransferSize IS NOT NULL AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @MaxTransferSize is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @NumberOfFiles &lt; 1 OR @NumberOfFiles &gt; 64 OR (@NumberOfFiles &gt; 32 AND @BackupSoftware = 'SQLBACKUP') OR @NumberOfFiles IS NULL OR @NumberOfFiles &lt; (SELECT COUNT(*) FROM @Directories) OR @NumberOfFiles % (SELECT COUNT(*) FROM @Directories) &gt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @NumberOfFiles is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF (@BackupSoftware IS NULL AND @CompressionLevel IS NOT NULL) OR (@BackupSoftware = 'LITESPEED' AND (@CompressionLevel &lt; 0 OR @CompressionLevel &gt; 8)) OR (@BackupSoftware = 'SQLBACKUP' AND (@CompressionLevel &lt; 0 OR @CompressionLevel &gt; 4)) OR (@BackupSoftware = 'SQLSAFE' AND (@CompressionLevel &lt; 1 OR @CompressionLevel &gt; 4))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CompressionLevel is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF LEN(@Description) &gt; 255 OR (@BackupSoftware = 'LITESPEED' AND LEN(@Description) &gt; 128)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Description is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Threads IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED','SQLBACKUP','SQLSAFE') OR @BackupSoftware IS NULL) OR @Threads &lt; 2 OR @Threads &gt; 32
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Threads is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Throttle IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED') OR @BackupSoftware IS NULL) OR @Throttle &lt; 1 OR @Throttle &gt; 100
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Throttle is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Encrypt NOT IN('Y','N') OR @Encrypt IS NULL OR (@Encrypt = 'Y' AND @BackupSoftware IS NULL)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Encrypt is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF (@EncryptionAlgorithm IS NOT NULL AND @BackupSoftware IS NULL) OR (@EncryptionAlgorithm IS NOT NULL AND @Encrypt = 'N') OR ((@EncryptionAlgorithm NOT IN('RC2_40','RC2_56','RC2_112','RC2_128','3DES_168','RC4_128','AES_128','AES_192','AES_256') OR @EncryptionAlgorithm IS NULL) AND @Encrypt = 'Y' AND @BackupSoftware = 'LITESPEED') OR ((@EncryptionAlgorithm NOT IN('AES_128','AES_256') OR @EncryptionAlgorithm IS NULL) AND @Encrypt = 'Y' AND @BackupSoftware = 'SQLBACKUP') OR ((@EncryptionAlgorithm NOT IN('AES_128','AES_256') OR @EncryptionAlgorithm IS NULL) AND @Encrypt = 'Y' AND @BackupSoftware = 'SQLSAFE')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @EncryptionAlgorithm is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF (@EncryptionKey IS NOT NULL AND @BackupSoftware IS NULL) OR (@EncryptionKey IS NOT NULL AND @Encrypt = 'N') OR (@EncryptionKey IS NULL AND @Encrypt = 'Y' AND @BackupSoftware IN('LITESPEED','SQLBACKUP','SQLSAFE'))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @EncryptionKey is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @ReadWriteFileGroups NOT IN('Y','N') OR @ReadWriteFileGroups IS NULL OR (@ReadWriteFileGroups = 'Y' AND @BackupType = 'LOG')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @ReadWriteFileGroups is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @OverrideBackupPreference NOT IN('Y','N') OR @OverrideBackupPreference IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @OverrideBackupPreference is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ErrorMessage = 'The documentation is available at http://ola.hallengren.com/sql-server-backup.html.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Check Availability Group cluster name                                                      //--
  ----------------------------------------------------------------------------------------------------

  IF @Version &gt;= 11
  BEGIN
    SELECT @Cluster = cluster_name
    FROM sys.dm_hadr_cluster
  END

  ----------------------------------------------------------------------------------------------------
  --// Execute backup commands                                                                    //--
  ----------------------------------------------------------------------------------------------------

  WHILE EXISTS (SELECT * FROM @tmpDatabases WHERE Selected = 1 AND Completed = 0)
  BEGIN

    SELECT TOP 1 @CurrentDBID = ID,
                 @CurrentDatabaseName = DatabaseName,
                 @CurrentDatabaseNameFS = DatabaseNameFS
    FROM @tmpDatabases
    WHERE Selected = 1
    AND Completed = 0
    ORDER BY ID ASC

    SET @CurrentDatabaseID = DB_ID(@CurrentDatabaseName)

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = @CurrentDatabaseID AND database_guid IS NOT NULL)
      BEGIN
        SET @CurrentIsDatabaseAccessible = 1
      END
      ELSE
      BEGIN
        SET @CurrentIsDatabaseAccessible = 0
      END
    END
    ELSE
    BEGIN
      SET @CurrentIsDatabaseAccessible = 0
    END

    SELECT @CurrentDifferentialBaseLSN = differential_base_lsn
    FROM sys.master_files
    WHERE database_id = @CurrentDatabaseID
    AND [type] = 0
    AND [file_id] = 1

    -- Workaround for a bug in SQL Server 2005
    IF @Version &gt;= 9 AND @Version &lt; 10
    AND EXISTS(SELECT * FROM sys.master_files WHERE database_id = @CurrentDatabaseID AND [type] = 0 AND [file_id] = 1 AND differential_base_lsn IS NOT NULL AND differential_base_guid IS NOT NULL AND differential_base_time IS NULL)
    BEGIN
      SET @CurrentDifferentialBaseLSN = NULL
    END

    SELECT @CurrentDifferentialBaseIsSnapshot = is_snapshot
    FROM msdb.dbo.backupset
    WHERE database_name = @CurrentDatabaseName
    AND [type] = 'D'
    AND checkpoint_lsn = @CurrentDifferentialBaseLSN

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      SELECT @CurrentLogLSN = last_log_backup_lsn
      FROM sys.database_recovery_status
      WHERE database_id = @CurrentDatabaseID
    END

    SET @CurrentBackupType = @BackupType

    IF @ChangeBackupType = 'Y'
    BEGIN
      IF @CurrentBackupType = 'LOG' AND DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') &lt;&gt; 'SIMPLE' AND @CurrentLogLSN IS NULL AND @CurrentDatabaseName &lt;&gt; 'master'
      BEGIN
        SET @CurrentBackupType = 'DIFF'
      END
      IF @CurrentBackupType = 'DIFF' AND @CurrentDifferentialBaseLSN IS NULL AND @CurrentDatabaseName &lt;&gt; 'master'
      BEGIN
        SET @CurrentBackupType = 'FULL'
      END
    END

    IF @CurrentBackupType = 'LOG'
    BEGIN
      SELECT @CurrentLatestBackup = MAX(backup_finish_date)
      FROM msdb.dbo.backupset
      WHERE [type] IN('D','I')
      AND is_damaged = 0
      AND database_name = @CurrentDatabaseName
    END

    IF @CurrentBackupType = 'LOG' AND @CurrentLatestBackup IS NULL
    BEGIN
      SELECT @CurrentLatestBackup = MAX(backup_finish_date)
      FROM msdb.dbo.backupset
      WHERE database_backup_lsn &lt; @CurrentDifferentialBaseLSN
      AND is_damaged = 0
      AND database_name = @CurrentDatabaseName
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL
    BEGIN
      SELECT @CurrentAvailabilityGroup = availability_groups.name,
             @CurrentAvailabilityGroupRole = dm_hadr_availability_replica_states.role_desc,
             @CurrentAvailabilityGroupBackupPreference = UPPER(availability_groups.automated_backup_preference_desc)
      FROM sys.databases databases
      INNER JOIN sys.availability_databases_cluster availability_databases_cluster ON databases.group_database_id = availability_databases_cluster.group_database_id
      INNER JOIN sys.availability_groups availability_groups ON availability_databases_cluster.group_id = availability_groups.group_id
      INNER JOIN sys.dm_hadr_availability_replica_states dm_hadr_availability_replica_states ON availability_groups.group_id = dm_hadr_availability_replica_states.group_id AND databases.replica_id = dm_hadr_availability_replica_states.replica_id
      WHERE databases.name = @CurrentDatabaseName
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL AND @CurrentAvailabilityGroup IS NOT NULL
    BEGIN
      SELECT @CurrentIsPreferredBackupReplica = sys.fn_hadr_backup_is_preferred_replica(@CurrentDatabaseName)
    END

    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)
    FROM sys.database_mirroring
    WHERE database_id = @CurrentDatabaseID

    IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)
    BEGIN
      SET @CurrentLogShippingRole = 'PRIMARY'
    END
    ELSE
    IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)
    BEGIN
      SET @CurrentLogShippingRole = 'SECONDARY'
    END

    -- Set database message
    SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabaseName) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE WHEN DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') AS nvarchar) + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group: ' + @CurrentAvailabilityGroup + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group role: ' + @CurrentAvailabilityGroupRole + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group backup preference: ' + @CurrentAvailabilityGroupBackupPreference + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Is preferred backup replica: ' + CASE WHEN @CurrentIsPreferredBackupReplica = 1 THEN 'Yes' WHEN @CurrentIsPreferredBackupReplica = 0 THEN 'No' ELSE 'N/A' END + CHAR(13) + CHAR(10)
    IF @CurrentDatabaseMirroringRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Database mirroring role: ' + @CurrentDatabaseMirroringRole + CHAR(13) + CHAR(10)
    IF @CurrentLogShippingRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Log shipping role: ' + @CurrentLogShippingRole + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Differential base LSN: ' + ISNULL(CAST(@CurrentDifferentialBaseLSN AS nvarchar),'N/A') + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Differential base is snapshot: ' + CASE WHEN @CurrentDifferentialBaseIsSnapshot = 1 THEN 'Yes' WHEN @CurrentDifferentialBaseIsSnapshot = 0 THEN 'No' ELSE 'N/A' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Last log backup LSN: ' + ISNULL(CAST(@CurrentLogLSN AS nvarchar),'N/A') + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = REPLACE(@DatabaseMessage,'%','%%') + ' '
    RAISERROR(@DatabaseMessage,10,1) WITH NOWAIT

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    AND NOT (DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)
    AND DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 0
    AND NOT (@CurrentBackupType = 'LOG' AND (DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') = 'SIMPLE' OR @CurrentLogLSN IS NULL))
    AND NOT (@CurrentBackupType = 'DIFF' AND @CurrentDifferentialBaseLSN IS NULL)
    AND NOT (@CurrentBackupType IN('DIFF','LOG') AND @CurrentDatabaseName = 'master')
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'FULL' AND @CopyOnly = 'N' AND (@CurrentAvailabilityGroupRole &lt;&gt; 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'FULL' AND @CopyOnly = 'Y' AND (@CurrentIsPreferredBackupReplica &lt;&gt; 1 OR @CurrentIsPreferredBackupReplica IS NULL) AND @OverrideBackupPreference = 'N')
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'DIFF' AND (@CurrentAvailabilityGroupRole &lt;&gt; 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'LOG' AND @CopyOnly = 'N' AND (@CurrentIsPreferredBackupReplica &lt;&gt; 1 OR @CurrentIsPreferredBackupReplica IS NULL) AND @OverrideBackupPreference = 'N')
    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'LOG' AND @CopyOnly = 'Y' AND (@CurrentAvailabilityGroupRole &lt;&gt; 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))
    AND NOT ((@CurrentLogShippingRole = 'PRIMARY' AND @CurrentLogShippingRole IS NOT NULL) AND @CurrentBackupType = 'LOG')
    BEGIN

      -- Set variables
      SET @CurrentDate = GETDATE()

      INSERT INTO @CurrentCleanupDates (CleanupDate)
      SELECT @CurrentDate

      IF @CurrentBackupType = 'LOG'
      BEGIN
        INSERT INTO @CurrentCleanupDates (CleanupDate)
        SELECT @CurrentLatestBackup
      END

      SELECT @CurrentFileExtension = CASE
      WHEN @BackupSoftware IS NULL AND @CurrentBackupType = 'FULL' THEN 'bak'
      WHEN @BackupSoftware IS NULL AND @CurrentBackupType = 'DIFF' THEN 'bak'
      WHEN @BackupSoftware IS NULL AND @CurrentBackupType = 'LOG' THEN 'trn'
      WHEN @BackupSoftware = 'LITESPEED' AND @CurrentBackupType = 'FULL' THEN 'bak'
      WHEN @BackupSoftware = 'LITESPEED' AND @CurrentBackupType = 'DIFF' THEN 'bak'
      WHEN @BackupSoftware = 'LITESPEED' AND @CurrentBackupType = 'LOG' THEN 'trn'
      WHEN @BackupSoftware = 'SQLBACKUP' AND @CurrentBackupType = 'FULL' THEN 'sqb'
      WHEN @BackupSoftware = 'SQLBACKUP' AND @CurrentBackupType = 'DIFF' THEN 'sqb'
      WHEN @BackupSoftware = 'SQLBACKUP' AND @CurrentBackupType = 'LOG' THEN 'sqb'
      WHEN @BackupSoftware = 'SQLSAFE' AND @CurrentBackupType = 'FULL' THEN 'safe'
      WHEN @BackupSoftware = 'SQLSAFE' AND @CurrentBackupType = 'DIFF' THEN 'safe'
      WHEN @BackupSoftware = 'SQLSAFE' AND @CurrentBackupType = 'LOG' THEN 'safe'
      END

      INSERT INTO @CurrentDirectories (ID, DirectoryPath, CreateCompleted, CleanupCompleted)
      SELECT ROW_NUMBER() OVER (ORDER BY ID), DirectoryPath + CASE WHEN RIGHT(DirectoryPath,1) = '\' THEN '' ELSE '\' END + CASE WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @Cluster + '$' + @CurrentAvailabilityGroup ELSE REPLACE(CAST(SERVERPROPERTY('servername') AS nvarchar),'\','$') END + '\' + @CurrentDatabaseNameFS + '\' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END, 0, 0
      FROM @Directories
      ORDER BY ID ASC

      SET @CurrentFileNumber = 0

      WHILE @CurrentFileNumber &lt; @NumberOfFiles
      BEGIN
        SET @CurrentFileNumber = @CurrentFileNumber + 1

        SELECT @CurrentDirectoryPath = DirectoryPath
        FROM @CurrentDirectories
        WHERE @CurrentFileNumber &gt;= (ID - 1) * (SELECT @NumberOfFiles / COUNT(*) FROM @CurrentDirectories) + 1
        AND @CurrentFileNumber &lt;= ID * (SELECT @NumberOfFiles / COUNT(*) FROM @CurrentDirectories)

        SET @CurrentFilePath = @CurrentDirectoryPath + '\' + CASE WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @Cluster + '$' + @CurrentAvailabilityGroup ELSE REPLACE(CAST(SERVERPROPERTY('servername') AS nvarchar),'\','$') END + '_' + @CurrentDatabaseNameFS + '_' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END + '_' + REPLACE(REPLACE(REPLACE((CONVERT(nvarchar,@CurrentDate,120)),'-',''),' ','_'),':','') + CASE WHEN @NumberOfFiles &gt; 1 AND @NumberOfFiles &lt;= 9 THEN '_' + CAST(@CurrentFileNumber AS nvarchar) WHEN @NumberOfFiles &gt;= 10 THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END + '.' + @CurrentFileExtension

        IF LEN(@CurrentFilePath) &gt; 259
        BEGIN
          SET @CurrentFilePath = @CurrentDirectoryPath + '\' + @CurrentDatabaseNameFS + '_' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END + '_' + REPLACE(REPLACE(REPLACE((CONVERT(nvarchar,@CurrentDate,120)),'-',''),' ','_'),':','') + CASE WHEN @NumberOfFiles &gt; 1 AND @NumberOfFiles &lt;= 9 THEN '_' + CAST(@CurrentFileNumber AS nvarchar) WHEN @NumberOfFiles &gt;= 10 THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END + '.' + @CurrentFileExtension
        END

        IF LEN(@CurrentFilePath) &gt; 259
        BEGIN
          SET @CurrentFilePath = @CurrentDirectoryPath + '\' + LEFT(@CurrentDatabaseNameFS,CASE WHEN (LEN(@CurrentDatabaseNameFS) + 259 - LEN(@CurrentFilePath) - 3) &lt; 20 THEN 20 ELSE (LEN(@CurrentDatabaseNameFS) + 259 - LEN(@CurrentFilePath) - 3) END) + '...' + '_' + UPPER(@CurrentBackupType) + CASE WHEN @ReadWriteFileGroups = 'Y' THEN '_PARTIAL' ELSE '' END + CASE WHEN @CopyOnly = 'Y' THEN '_COPY_ONLY' ELSE '' END + '_' + REPLACE(REPLACE(REPLACE((CONVERT(nvarchar,@CurrentDate,120)),'-',''),' ','_'),':','') + CASE WHEN @NumberOfFiles &gt; 1 AND @NumberOfFiles &lt;= 9 THEN '_' + CAST(@CurrentFileNumber AS nvarchar) WHEN @NumberOfFiles &gt;= 10 THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END + '.' + @CurrentFileExtension
        END

        INSERT INTO @CurrentFiles (CurrentFilePath)
        SELECT @CurrentFilePath

        SET @CurrentDirectoryPath = NULL
        SET @CurrentFilePath = NULL
      END

      -- Create directory
      WHILE EXISTS (SELECT * FROM @CurrentDirectories WHERE CreateCompleted = 0)
      BEGIN
        SELECT TOP 1 @CurrentDirectoryID = ID,
                     @CurrentDirectoryPath = DirectoryPath
        FROM @CurrentDirectories
        WHERE CreateCompleted = 0
        ORDER BY ID ASC

        SET @CurrentCommandType01 = 'xp_create_subdir'
        SET @CurrentCommand01 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_create_subdir N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error creating directory.'', 16, 1)'
        EXECUTE @CurrentCommandOutput01 = [dbo].[CommandExecute] @Command = @CurrentCommand01, @CommandType = @CurrentCommandType01, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput01 = @Error
        IF @CurrentCommandOutput01 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput01

        UPDATE @CurrentDirectories
        SET CreateCompleted = 1,
            CreateOutput = @CurrentCommandOutput01
        WHERE ID = @CurrentDirectoryID

        SET @CurrentDirectoryID = NULL
        SET @CurrentDirectoryPath = NULL

        SET @CurrentCommand01 = NULL

        SET @CurrentCommandOutput01 = NULL

        SET @CurrentCommandType01 = NULL
      END

      -- Perform a backup
      IF NOT EXISTS (SELECT * FROM @CurrentDirectories WHERE CreateOutput &lt;&gt; 0 OR CreateOutput IS NULL)
      BEGIN
        IF @BackupSoftware IS NULL
        BEGIN
          SELECT @CurrentCommandType02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP_DATABASE'
          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP_LOG'
          END

          SELECT @CurrentCommand02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabaseName)
          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabaseName)
          END

          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ' READ_WRITE_FILEGROUPS'

          SET @CurrentCommand02 = @CurrentCommand02 + ' TO'

          SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'
          IF @Compress = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COMPRESSION'
          IF @Compress = 'N' AND @Version &gt;= 10 SET @CurrentCommand02 = @CurrentCommand02 + ', NO_COMPRESSION'
          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'
          IF @CopyOnly = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'
          IF @BlockSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS nvarchar)
          IF @BufferCount IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', BUFFERCOUNT = ' + CAST(@BufferCount AS nvarchar)
          IF @MaxTransferSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description,'''','''''') + ''''
        END

        IF @BackupSoftware = 'LITESPEED'
        BEGIN
          SELECT @CurrentCommandType02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'xp_backup_database'
          WHEN @CurrentBackupType = 'LOG' THEN 'xp_backup_log'
          END

          SELECT @CurrentCommand02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_backup_database @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''
          WHEN @CurrentBackupType = 'LOG' THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_backup_log @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''
          END

          SELECT @CurrentCommand02 = @CurrentCommand02 + ', @filename = N''' + REPLACE(CurrentFilePath,'''','''''') + ''''
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ', @with = '''
          IF @CheckSum = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'
          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'
          IF @CopyOnly = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'
          IF @BlockSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS nvarchar)
          SET @CurrentCommand02 = @CurrentCommand02 + ''''
          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', @read_write_filegroups = 1'
          IF @CompressionLevel IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @compressionlevel = ' + CAST(@CompressionLevel AS nvarchar)
          IF @BufferCount IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @buffercount = ' + CAST(@BufferCount AS nvarchar)
          IF @MaxTransferSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @maxtransfersize = ' + CAST(@MaxTransferSize AS nvarchar)
          IF @Threads IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @threads = ' + CAST(@Threads AS nvarchar)
          IF @Throttle IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @throttle = ' + CAST(@Throttle AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @desc = N''' + REPLACE(@Description,'''','''''') + ''''

          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @cryptlevel = ' + CASE
          WHEN @EncryptionAlgorithm = 'RC2_40' THEN '0'
          WHEN @EncryptionAlgorithm = 'RC2_56' THEN '1'
          WHEN @EncryptionAlgorithm = 'RC2_112' THEN '2'
          WHEN @EncryptionAlgorithm = 'RC2_128' THEN '3'
          WHEN @EncryptionAlgorithm = '3DES_168' THEN '4'
          WHEN @EncryptionAlgorithm = 'RC4_128' THEN '5'
          WHEN @EncryptionAlgorithm = 'AES_128' THEN '6'
          WHEN @EncryptionAlgorithm = 'AES_192' THEN '7'
          WHEN @EncryptionAlgorithm = 'AES_256' THEN '8'
          END

          IF @EncryptionKey IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @encryptionkey = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''
          SET @CurrentCommand02 = @CurrentCommand02 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error performing LiteSpeed backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLBACKUP'
        BEGIN
          SET @CurrentCommandType02 = 'sqlbackup'

          SELECT @CurrentCommand02 = CASE
          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabaseName)
          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabaseName)
          END

          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ' READ_WRITE_FILEGROUPS'

          SET @CurrentCommand02 = @CurrentCommand02 + ' TO'

          SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'
          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'
          IF @CopyOnly = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'
          IF @CompressionLevel IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', COMPRESSION = ' + CAST(@CompressionLevel AS nvarchar)
          IF @Threads IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', THREADCOUNT = ' + CAST(@Threads AS nvarchar)
          IF @MaxTransferSize IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description,'''','''''') + ''''

          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', KEYSIZE = ' + CASE
          WHEN @EncryptionAlgorithm = 'AES_128' THEN '128'
          WHEN @EncryptionAlgorithm = 'AES_256' THEN '256'
          END

          IF @EncryptionKey IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', PASSWORD = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''
          SET @CurrentCommand02 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.sqlbackup N''-SQL "' + REPLACE(@CurrentCommand02,'''','''''') + '"''' + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error performing SQLBackup backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLSAFE'
        BEGIN
          SET @CurrentCommandType02 = 'xp_ss_backup'

          SET @CurrentCommand02 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_ss_backup @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''

          SELECT @CurrentCommand02 = @CurrentCommand02 + ', ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) = 1 THEN '@filename' ELSE '@backupfile' END + ' = N''' + REPLACE(CurrentFilePath,'''','''''') + ''''
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand02 = @CurrentCommand02 + ', @backuptype = ' + CASE WHEN @CurrentBackupType = 'FULL' THEN '''Full''' WHEN @CurrentBackupType = 'DIFF' THEN '''Differential''' WHEN @CurrentBackupType = 'LOG' THEN '''Log''' END
          IF @ReadWriteFileGroups = 'Y' SET @CurrentCommand02 = @CurrentCommand02 + ', @readwritefilegroups = 1'
          SET @CurrentCommand02 = @CurrentCommand02 + ', @checksum = ' + CASE WHEN @CheckSum = 'Y' THEN '1' WHEN @CheckSum = 'N' THEN '0' END
          SET @CurrentCommand02 = @CurrentCommand02 + ', @copyonly = ' + CASE WHEN @CopyOnly = 'Y' THEN '1' WHEN @CopyOnly = 'N' THEN '0' END
          IF @CompressionLevel IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @compressionlevel = ' + CAST(@CompressionLevel AS nvarchar)
          IF @Threads IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @threads = ' + CAST(@Threads AS nvarchar)
          IF @Description IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @desc = N''' + REPLACE(@Description,'''','''''') + ''''

          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @encryptiontype = N''' + CASE
          WHEN @EncryptionAlgorithm = 'AES_128' THEN 'AES128'
          WHEN @EncryptionAlgorithm = 'AES_256' THEN 'AES256'
          END + ''''

          IF @EncryptionKey IS NOT NULL SET @CurrentCommand02 = @CurrentCommand02 + ', @encryptedbackuppassword = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''
          SET @CurrentCommand02 = @CurrentCommand02 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error performing SQLsafe backup.'', 16, 1)'
        END

        EXECUTE @CurrentCommandOutput02 = [dbo].[CommandExecute] @Command = @CurrentCommand02, @CommandType = @CurrentCommandType02, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput02 = @Error
        IF @CurrentCommandOutput02 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput02
      END

      -- Verify the backup
      IF @CurrentCommandOutput02 = 0 AND @Verify = 'Y'
      BEGIN
        IF @BackupSoftware IS NULL
        BEGIN
          SET @CurrentCommandType03 = 'RESTORE_VERIFYONLY'

          SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

          SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand03 = @CurrentCommand03 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand03 = @CurrentCommand03 + 'NO_CHECKSUM'
        END

        IF @BackupSoftware = 'LITESPEED'
        BEGIN
          SET @CurrentCommandType03 = 'xp_restore_verifyonly'

          SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_restore_verifyonly'

          SELECT @CurrentCommand03 = @CurrentCommand03 + ' @filename = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ', @with = '''
          IF @CheckSum = 'Y' SET @CurrentCommand03 = @CurrentCommand03 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand03 = @CurrentCommand03 + 'NO_CHECKSUM'
          SET @CurrentCommand03 = @CurrentCommand03 + ''''
          IF @EncryptionKey IS NOT NULL SET @CurrentCommand03 = @CurrentCommand03 + ', @encryptionkey = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''

          SET @CurrentCommand03 = @CurrentCommand03 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error verifying LiteSpeed backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLBACKUP'
        BEGIN
          SET @CurrentCommandType03 = 'sqlbackup'

          SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

          SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) &lt;&gt; @NumberOfFiles THEN ',' ELSE '' END
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ' WITH '
          IF @CheckSum = 'Y' SET @CurrentCommand03 = @CurrentCommand03 + 'CHECKSUM'
          IF @CheckSum = 'N' SET @CurrentCommand03 = @CurrentCommand03 + 'NO_CHECKSUM'
          IF @EncryptionKey IS NOT NULL SET @CurrentCommand03 = @CurrentCommand03 + ', PASSWORD = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''

          SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.sqlbackup N''-SQL "' + REPLACE(@CurrentCommand03,'''','''''') + '"''' + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error verifying SQLBackup backup.'', 16, 1)'
        END

        IF @BackupSoftware = 'SQLSAFE'
        BEGIN
          SET @CurrentCommandType03 = 'xp_ss_verify'

          SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_ss_verify @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''

          SELECT @CurrentCommand03 = @CurrentCommand03 + ', ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY CurrentFilePath ASC) = 1 THEN '@filename' ELSE '@backupfile' END + ' = N''' + REPLACE(CurrentFilePath,'''','''''') + ''''
          FROM @CurrentFiles
          ORDER BY CurrentFilePath ASC

          SET @CurrentCommand03 = @CurrentCommand03 + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error verifying SQLsafe backup.'', 16, 1)'
        END

        EXECUTE @CurrentCommandOutput03 = [dbo].[CommandExecute] @Command = @CurrentCommand03, @CommandType = @CurrentCommandType03, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput03 = @Error
        IF @CurrentCommandOutput03 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput03
      END

      INSERT INTO @CurrentCleanupDates (CleanupDate)
      SELECT DATEADD(hh,-(@CleanupTime),GETDATE())

      IF EXISTS(SELECT * FROM @CurrentCleanupDates WHERE CleanupDate IS NULL)
      BEGIN
        SET @CurrentCleanupDate = NULL
      END
      ELSE
      BEGIN
        SELECT @CurrentCleanupDate = MIN(CleanupDate)
        FROM @CurrentCleanupDates
      END

      -- Delete old backup files
      IF ((@CurrentCommandOutput02 = 0 AND @Verify = 'N' AND @CurrentCleanupDate IS NOT NULL)
      OR (@CurrentCommandOutput02 = 0 AND @Verify = 'Y' AND @CurrentCommandOutput03 = 0 AND @CurrentCleanupDate IS NOT NULL))
      AND @CurrentBackupType = @BackupType
      BEGIN
        WHILE EXISTS (SELECT * FROM @CurrentDirectories WHERE CleanupCompleted = 0)
        BEGIN
          SELECT TOP 1 @CurrentDirectoryID = ID,
                       @CurrentDirectoryPath = DirectoryPath
          FROM @CurrentDirectories
          WHERE CleanupCompleted = 0
          ORDER BY ID ASC

          IF @BackupSoftware IS NULL
          BEGIN
            SET @CurrentCommandType04 = 'xp_delete_file'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_delete_file 0, N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + @CurrentFileExtension + ''', ''' + CONVERT(nvarchar(19),@CurrentCleanupDate,126) + ''' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting files.'', 16, 1)'
          END

          IF @BackupSoftware = 'LITESPEED'
          BEGIN
            SET @CurrentCommandType04 = 'xp_slssqlmaint'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_slssqlmaint N''-MAINTDEL -DELFOLDER "' + REPLACE(@CurrentDirectoryPath,'''','''''') + '" -DELEXTENSION "' + @CurrentFileExtension + '" -DELUNIT "' + CAST(DATEDIFF(mi,@CurrentCleanupDate,GETDATE()) + 1 AS nvarchar) + '" -DELUNITTYPE "minutes" -DELUSEAGE'' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting LiteSpeed backup files.'', 16, 1)'
          END

          IF @BackupSoftware = 'SQLBACKUP'
          BEGIN
            SET @CurrentCommandType04 = 'sqbutility'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.sqbutility 1032, N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''', N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + CASE WHEN @CurrentBackupType = 'FULL' THEN 'D' WHEN @CurrentBackupType = 'DIFF' THEN 'I' WHEN @CurrentBackupType = 'LOG' THEN 'L' END + ''', ''' + CAST(DATEDIFF(hh,@CurrentCleanupDate,GETDATE()) + 1 AS nvarchar) + 'h'', ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL') + ' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting SQLBackup backup files.'', 16, 1)'
          END

          IF @BackupSoftware = 'SQLSAFE'
          BEGIN
            SET @CurrentCommandType04 = 'xp_ss_delete'

            SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = [master].dbo.xp_ss_delete @filename = N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + '\*.' + @CurrentFileExtension + ''', @age = ''' + CAST(DATEDIFF(mi,@CurrentCleanupDate,GETDATE()) + 1 AS nvarchar) + 'Minutes'' IF @ReturnCode &lt;&gt; 0 RAISERROR(''Error deleting SQLsafe backup files.'', 16, 1)'
          END

          EXECUTE @CurrentCommandOutput04 = [dbo].[CommandExecute] @Command = @CurrentCommand04, @CommandType = @CurrentCommandType04, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
          SET @Error = @@ERROR
          IF @Error &lt;&gt; 0 SET @CurrentCommandOutput04 = @Error
          IF @CurrentCommandOutput04 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput04

          UPDATE @CurrentDirectories
          SET CleanupCompleted = 1,
              CleanupOutput = @CurrentCommandOutput04
          WHERE ID = @CurrentDirectoryID

          SET @CurrentDirectoryID = NULL
          SET @CurrentDirectoryPath = NULL

          SET @CurrentCommand04 = NULL

          SET @CurrentCommandOutput04 = NULL

          SET @CurrentCommandType04 = NULL
        END
      END
    END

    -- Update that the database is completed
    UPDATE @tmpDatabases
    SET Completed = 1
    WHERE Selected = 1
    AND Completed = 0
    AND ID = @CurrentDBID

    -- Clear variables
    SET @CurrentDBID = NULL
    SET @CurrentDatabaseID = NULL
    SET @CurrentDatabaseName = NULL
    SET @CurrentBackupType = NULL
    SET @CurrentFileExtension = NULL
    SET @CurrentFileNumber = NULL
    SET @CurrentDifferentialBaseLSN = NULL
    SET @CurrentDifferentialBaseIsSnapshot = NULL
    SET @CurrentLogLSN = NULL
    SET @CurrentLatestBackup = NULL
    SET @CurrentDatabaseNameFS = NULL
    SET @CurrentDate = NULL
    SET @CurrentCleanupDate = NULL
    SET @CurrentIsDatabaseAccessible = NULL
    SET @CurrentAvailabilityGroup = NULL
    SET @CurrentAvailabilityGroupRole = NULL
    SET @CurrentAvailabilityGroupBackupPreference = NULL
    SET @CurrentIsPreferredBackupReplica = NULL
    SET @CurrentDatabaseMirroringRole = NULL
    SET @CurrentLogShippingRole = NULL

    SET @CurrentCommand02 = NULL
    SET @CurrentCommand03 = NULL

    SET @CurrentCommandOutput02 = NULL
    SET @CurrentCommandOutput03 = NULL

    SET @CurrentCommandType02 = NULL
    SET @CurrentCommandType03 = NULL

    DELETE FROM @CurrentDirectories
    DELETE FROM @CurrentFiles
    DELETE FROM @CurrentCleanupDates

  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  Logging:
  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120)
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DatabaseIntegrityCheck]

@Databases nvarchar(max),
@CheckCommands nvarchar(max) = 'CHECKDB',
@PhysicalOnly nvarchar(max) = 'N',
@NoIndex nvarchar(max) = 'N',
@ExtendedLogicalChecks nvarchar(max) = 'N',
@TabLock nvarchar(max) = 'N',
@FileGroups nvarchar(max) = NULL,
@Objects nvarchar(max) = NULL,
@LockTimeout int = NULL,
@LogToTable nvarchar(max) = 'N',
@Execute nvarchar(max) = 'Y'

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @DatabaseMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)

  DECLARE @Version numeric(18,10)
  DECLARE @AmazonRDS bit

  DECLARE @Cluster nvarchar(max)

  DECLARE @CurrentDBID int
  DECLARE @CurrentDatabaseID int
  DECLARE @CurrentDatabaseName nvarchar(max)
  DECLARE @CurrentIsDatabaseAccessible bit
  DECLARE @CurrentAvailabilityGroup nvarchar(max)
  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)
  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)
  DECLARE @CurrentLogShippingRole nvarchar(max)

  DECLARE @CurrentFGID int
  DECLARE @CurrentFileGroupID int
  DECLARE @CurrentFileGroupName nvarchar(max)
  DECLARE @CurrentFileGroupExists bit

  DECLARE @CurrentOID int
  DECLARE @CurrentSchemaID int
  DECLARE @CurrentSchemaName nvarchar(max)
  DECLARE @CurrentObjectID int
  DECLARE @CurrentObjectName nvarchar(max)
  DECLARE @CurrentObjectType nvarchar(max)
  DECLARE @CurrentObjectExists bit

  DECLARE @CurrentCommand01 nvarchar(max)
  DECLARE @CurrentCommand02 nvarchar(max)
  DECLARE @CurrentCommand03 nvarchar(max)
  DECLARE @CurrentCommand04 nvarchar(max)
  DECLARE @CurrentCommand05 nvarchar(max)
  DECLARE @CurrentCommand06 nvarchar(max)
  DECLARE @CurrentCommand07 nvarchar(max)
  DECLARE @CurrentCommand08 nvarchar(max)
  DECLARE @CurrentCommand09 nvarchar(max)

  DECLARE @CurrentCommandOutput01 int
  DECLARE @CurrentCommandOutput04 int
  DECLARE @CurrentCommandOutput05 int
  DECLARE @CurrentCommandOutput08 int
  DECLARE @CurrentCommandOutput09 int

  DECLARE @CurrentCommandType01 nvarchar(max)
  DECLARE @CurrentCommandType04 nvarchar(max)
  DECLARE @CurrentCommandType05 nvarchar(max)
  DECLARE @CurrentCommandType08 nvarchar(max)
  DECLARE @CurrentCommandType09 nvarchar(max)

  DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))

  DECLARE @tmpFileGroups TABLE (ID int IDENTITY,
                                FileGroupID int,
                                FileGroupName nvarchar(max),
                                Selected bit,
                                Completed bit,
                                PRIMARY KEY(Selected, Completed, ID))

  DECLARE @tmpObjects TABLE (ID int IDENTITY,
                             SchemaID int,
                             SchemaName nvarchar(max),
                             ObjectID int,
                             ObjectName nvarchar(max),
                             ObjectType nvarchar(max),
                             Selected bit,
                             Completed bit,
                             PRIMARY KEY(Selected, Completed, ID))

  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)

  DECLARE @SelectedFileGroups TABLE (DatabaseName nvarchar(max),
                                     FileGroupName nvarchar(max),
                                     Selected bit)

  DECLARE @SelectedObjects TABLE (DatabaseName nvarchar(max),
                                  SchemaName nvarchar(max),
                                  ObjectName nvarchar(max),
                                  Selected bit)

  DECLARE @SelectedCheckCommands TABLE (CheckCommand nvarchar(max))

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  SET @AmazonRDS = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (SELECT QUOTENAME(schemas.name) FROM sys.schemas schemas INNER JOIN sys.objects objects ON schemas.[schema_id] = objects.[schema_id] WHERE [object_id] = @@PROCID) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @CheckCommands = ' + ISNULL('''' + REPLACE(@CheckCommands,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @PhysicalOnly = ' + ISNULL('''' + REPLACE(@PhysicalOnly,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @NoIndex = ' + ISNULL('''' + REPLACE(@NoIndex,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @ExtendedLogicalChecks = ' + ISNULL('''' + REPLACE(@ExtendedLogicalChecks,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @TabLock = ' + ISNULL('''' + REPLACE(@TabLock,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FileGroups = ' + ISNULL('''' + REPLACE(@FileGroups,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Objects = ' + ISNULL('''' + REPLACE(@Objects,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @LockTimeout = ' + ISNULL(CAST(@LockTimeout AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL') + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Source: http://ola.hallengren.com' + CHAR(13) + CHAR(10)
  SET @StartMessage = REPLACE(@StartMessage,'%','%%') + ' '
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute is missing. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND (OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@LogToTable%' OR OBJECT_DEFINITION(objects.[object_id]) LIKE '%LOCK_TIMEOUT%'))
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute needs to be updated. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Select databases                                                                           //--
  ----------------------------------------------------------------------------------------------------

  SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition &lt; LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)

  INSERT INTO @tmpDatabases (DatabaseName, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] &lt;&gt; 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Select filegroups                                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET @FileGroups = REPLACE(@FileGroups, ', ', ',');

  WITH FileGroups1 (StartPosition, EndPosition, FileGroupItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FileGroups, 1), 0), LEN(@FileGroups) + 1) AS EndPosition,
         SUBSTRING(@FileGroups, 1, ISNULL(NULLIF(CHARINDEX(',', @FileGroups, 1), 0), LEN(@FileGroups) + 1) - 1) AS FileGroupItem
  WHERE @FileGroups IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FileGroups, EndPosition + 1), 0), LEN(@FileGroups) + 1) AS EndPosition,
         SUBSTRING(@FileGroups, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FileGroups, EndPosition + 1), 0), LEN(@FileGroups) + 1) - EndPosition - 1) AS FileGroupItem
  FROM FileGroups1
  WHERE EndPosition &lt; LEN(@FileGroups) + 1
  ),
  FileGroups2 (FileGroupItem, Selected) AS
  (
  SELECT CASE WHEN FileGroupItem LIKE '-%' THEN RIGHT(FileGroupItem,LEN(FileGroupItem) - 1) ELSE FileGroupItem END AS FileGroupItem,
         CASE WHEN FileGroupItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM FileGroups1
  ),
  FileGroups3 (FileGroupItem, Selected) AS
  (
  SELECT CASE WHEN FileGroupItem = 'ALL_FILEGROUPS' THEN '%.%' ELSE FileGroupItem END AS FileGroupItem,
         Selected
  FROM FileGroups2
  ),
  FileGroups4 (DatabaseName, FileGroupName, Selected) AS
  (
  SELECT CASE WHEN PARSENAME(FileGroupItem,4) IS NULL AND PARSENAME(FileGroupItem,3) IS NULL THEN PARSENAME(FileGroupItem,2) ELSE NULL END AS DatabaseName,
         CASE WHEN PARSENAME(FileGroupItem,4) IS NULL AND PARSENAME(FileGroupItem,3) IS NULL THEN PARSENAME(FileGroupItem,1) ELSE NULL END AS FileGroupName,
         Selected
  FROM FileGroups3
  )
  INSERT INTO @SelectedFileGroups (DatabaseName, FileGroupName, Selected)
  SELECT DatabaseName, FileGroupName, Selected
  FROM FileGroups4
  OPTION (MAXRECURSION 0)

  ----------------------------------------------------------------------------------------------------
  --// Select objects                                                                             //--
  ----------------------------------------------------------------------------------------------------

  SET @Objects = REPLACE(@Objects, ', ', ',');

  WITH Objects1 (StartPosition, EndPosition, ObjectItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Objects, 1), 0), LEN(@Objects) + 1) AS EndPosition,
         SUBSTRING(@Objects, 1, ISNULL(NULLIF(CHARINDEX(',', @Objects, 1), 0), LEN(@Objects) + 1) - 1) AS ObjectItem
  WHERE @Objects IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Objects, EndPosition + 1), 0), LEN(@Objects) + 1) AS EndPosition,
         SUBSTRING(@Objects, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Objects, EndPosition + 1), 0), LEN(@Objects) + 1) - EndPosition - 1) AS ObjectItem
  FROM Objects1
  WHERE EndPosition &lt; LEN(@Objects) + 1
  ),
  Objects2 (ObjectItem, Selected) AS
  (
  SELECT CASE WHEN ObjectItem LIKE '-%' THEN RIGHT(ObjectItem,LEN(ObjectItem) - 1) ELSE ObjectItem END AS ObjectItem,
         CASE WHEN ObjectItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Objects1
  ),
  Objects3 (ObjectItem, Selected) AS
  (
  SELECT CASE WHEN ObjectItem = 'ALL_OBJECTS' THEN '%.%.%' ELSE ObjectItem END AS ObjectItem,
         Selected
  FROM Objects2
  ),
  Objects4 (DatabaseName, SchemaName, ObjectName, Selected) AS
  (
  SELECT CASE WHEN PARSENAME(ObjectItem,4) IS NULL THEN PARSENAME(ObjectItem,3) ELSE NULL END AS DatabaseName,
         CASE WHEN PARSENAME(ObjectItem,4) IS NULL THEN PARSENAME(ObjectItem,2) ELSE NULL END AS SchemaName,
         CASE WHEN PARSENAME(ObjectItem,4) IS NULL THEN PARSENAME(ObjectItem,1) ELSE NULL END AS ObjectName,
         Selected
  FROM Objects3
  )
  INSERT INTO @SelectedObjects (DatabaseName, SchemaName, ObjectName, Selected)
  SELECT DatabaseName, SchemaName, ObjectName, Selected
  FROM Objects4
  OPTION (MAXRECURSION 0);

  ----------------------------------------------------------------------------------------------------
  --// Select check commands                                                                      //--
  ----------------------------------------------------------------------------------------------------

  WITH CheckCommands (StartPosition, EndPosition, CheckCommand) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, 1), 0), LEN(@CheckCommands) + 1) AS EndPosition,
         SUBSTRING(@CheckCommands, 1, ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, 1), 0), LEN(@CheckCommands) + 1) - 1) AS CheckCommand
  WHERE @CheckCommands IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, EndPosition + 1), 0), LEN(@CheckCommands) + 1) AS EndPosition,
         SUBSTRING(@CheckCommands, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @CheckCommands, EndPosition + 1), 0), LEN(@CheckCommands) + 1) - EndPosition - 1) AS CheckCommand
  FROM CheckCommands
  WHERE EndPosition &lt; LEN(@CheckCommands) + 1
  )
  INSERT INTO @SelectedCheckCommands (CheckCommand)
  SELECT CheckCommand
  FROM CheckCommands
  OPTION (MAXRECURSION 0)

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand NOT IN('CHECKDB','CHECKFILEGROUP','CHECKALLOC','CHECKTABLE','CHECKCATALOG')) OR EXISTS (SELECT * FROM @SelectedCheckCommands GROUP BY CheckCommand HAVING COUNT(*) &gt; 1) OR NOT EXISTS (SELECT * FROM @SelectedCheckCommands) OR (EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKDB')) AND EXISTS (SELECT CheckCommand FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKFILEGROUP','CHECKALLOC','CHECKTABLE','CHECKCATALOG'))) OR (EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKFILEGROUP')) AND EXISTS (SELECT CheckCommand FROM @SelectedCheckCommands WHERE CheckCommand IN('CHECKALLOC','CHECKTABLE')))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @CheckCommands is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PhysicalOnly NOT IN ('Y','N') OR @PhysicalOnly IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PhysicalOnly is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @NoIndex NOT IN ('Y','N') OR @NoIndex IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @NoIndex is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @ExtendedLogicalChecks NOT IN ('Y','N') OR @ExtendedLogicalChecks IS NULL OR (@ExtendedLogicalChecks = 'Y' AND NOT @Version &gt;= 10) OR (@PhysicalOnly = 'Y' AND @ExtendedLogicalChecks = 'Y')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @ExtendedLogicalChecks is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @TabLock NOT IN ('Y','N') OR @TabLock IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @TabLock is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS(SELECT * FROM @SelectedFileGroups WHERE DatabaseName IS NULL OR FileGroupName IS NULL) OR (@FileGroups IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedFileGroups)) OR (@FileGroups IS NOT NULL AND NOT EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKFILEGROUP'))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FileGroups is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS(SELECT * FROM @SelectedObjects WHERE DatabaseName IS NULL OR SchemaName IS NULL OR ObjectName IS NULL) OR (@Objects IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedObjects)) OR (@Objects IS NOT NULL AND NOT EXISTS (SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKTABLE'))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Objects is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LockTimeout &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LockTimeout is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ErrorMessage = 'The documentation is available at http://ola.hallengren.com/sql-server-integrity-check.html.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Check Availability Group cluster name                                                      //--
  ----------------------------------------------------------------------------------------------------

  IF @Version &gt;= 11
  BEGIN
    SELECT @Cluster = cluster_name
    FROM sys.dm_hadr_cluster
  END

  ----------------------------------------------------------------------------------------------------
  --// Execute commands                                                                           //--
  ----------------------------------------------------------------------------------------------------

  WHILE EXISTS (SELECT * FROM @tmpDatabases WHERE Selected = 1 AND Completed = 0)
  BEGIN

    SELECT TOP 1 @CurrentDBID = ID,
                 @CurrentDatabaseName = DatabaseName
    FROM @tmpDatabases
    WHERE Selected = 1
    AND Completed = 0
    ORDER BY ID ASC

    SET @CurrentDatabaseID = DB_ID(@CurrentDatabaseName)

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = @CurrentDatabaseID AND database_guid IS NOT NULL)
      BEGIN
        SET @CurrentIsDatabaseAccessible = 1
      END
      ELSE
      BEGIN
        SET @CurrentIsDatabaseAccessible = 0
      END
    END
    ELSE
    BEGIN
      SET @CurrentIsDatabaseAccessible = 0
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL
    BEGIN
      SELECT @CurrentAvailabilityGroup = availability_groups.name,
             @CurrentAvailabilityGroupRole = dm_hadr_availability_replica_states.role_desc
      FROM sys.databases databases
      INNER JOIN sys.availability_databases_cluster availability_databases_cluster ON databases.group_database_id = availability_databases_cluster.group_database_id
      INNER JOIN sys.availability_groups availability_groups ON availability_databases_cluster.group_id = availability_groups.group_id
      INNER JOIN sys.dm_hadr_availability_replica_states dm_hadr_availability_replica_states ON availability_groups.group_id = dm_hadr_availability_replica_states.group_id AND databases.replica_id = dm_hadr_availability_replica_states.replica_id
      WHERE databases.name = @CurrentDatabaseName
    END

    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)
    FROM sys.database_mirroring
    WHERE database_id = @CurrentDatabaseID

    IF @AmazonRDS = 0
    BEGIN
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'PRIMARY'
      END
      ELSE
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'SECONDARY'
      END
    END

    -- Set database message
    SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabaseName) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE WHEN DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') AS nvarchar) + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group: ' + @CurrentAvailabilityGroup + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group role: ' + @CurrentAvailabilityGroupRole + CHAR(13) + CHAR(10)
    IF @CurrentDatabaseMirroringRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Database mirroring role: ' + @CurrentDatabaseMirroringRole + CHAR(13) + CHAR(10)
    IF @CurrentLogShippingRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Log shipping role: ' + @CurrentLogShippingRole + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = REPLACE(@DatabaseMessage,'%','%%') + ' '
    RAISERROR(@DatabaseMessage,10,1) WITH NOWAIT

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    AND NOT (DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)
    BEGIN

      -- Check database
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKDB')
      BEGIN
        SET @CurrentCommandType01 = 'DBCC_CHECKDB'

        SET @CurrentCommand01 = ''
        IF @LockTimeout IS NOT NULL SET @CurrentCommand01 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
        SET @CurrentCommand01 = @CurrentCommand01 + 'DBCC CHECKDB (' + QUOTENAME(@CurrentDatabaseName)
        IF @NoIndex = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', NOINDEX'
        SET @CurrentCommand01 = @CurrentCommand01 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
        IF @PhysicalOnly = 'N' SET @CurrentCommand01 = @CurrentCommand01 + ', DATA_PURITY'
        IF @PhysicalOnly = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', PHYSICAL_ONLY'
        IF @ExtendedLogicalChecks = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', EXTENDED_LOGICAL_CHECKS'
        IF @TabLock = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', TABLOCK'

        EXECUTE @CurrentCommandOutput01 = [dbo].[CommandExecute] @Command = @CurrentCommand01, @CommandType = @CurrentCommandType01, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput01 = @Error
        IF @CurrentCommandOutput01 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput01
      END

      -- Check filegroups
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKFILEGROUP')
      BEGIN
        SET @CurrentCommand02 = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT data_space_id AS FileGroupID, name AS FileGroupName, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ORDER BY CASE WHEN filegroups.name = ''PRIMARY'' THEN 1 ELSE 0 END DESC, filegroups.name ASC'

        INSERT INTO @tmpFileGroups (FileGroupID, FileGroupName, Selected, Completed)
        EXECUTE sp_executesql @statement = @CurrentCommand02
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @ReturnCode = @Error

        IF @FileGroups IS NULL
        BEGIN
          UPDATE tmpFileGroups
          SET tmpFileGroups.Selected = 1
          FROM @tmpFileGroups tmpFileGroups
        END
        ELSE
        BEGIN
          UPDATE tmpFileGroups
          SET tmpFileGroups.Selected = SelectedFileGroups.Selected
          FROM @tmpFileGroups tmpFileGroups
          INNER JOIN @SelectedFileGroups SelectedFileGroups
          ON @CurrentDatabaseName LIKE REPLACE(SelectedFileGroups.DatabaseName,'_','[_]') AND tmpFileGroups.FileGroupName LIKE REPLACE(SelectedFileGroups.FileGroupName,'_','[_]')
          WHERE SelectedFileGroups.Selected = 1

          UPDATE tmpFileGroups
          SET tmpFileGroups.Selected = SelectedFileGroups.Selected
          FROM @tmpFileGroups tmpFileGroups
          INNER JOIN @SelectedFileGroups SelectedFileGroups
          ON @CurrentDatabaseName LIKE REPLACE(SelectedFileGroups.DatabaseName,'_','[_]') AND tmpFileGroups.FileGroupName LIKE REPLACE(SelectedFileGroups.FileGroupName,'_','[_]')
          WHERE SelectedFileGroups.Selected = 0
        END

        WHILE EXISTS (SELECT * FROM @tmpFileGroups WHERE Selected = 1 AND Completed = 0)
        BEGIN
          SELECT TOP 1 @CurrentFGID = ID,
                       @CurrentFileGroupID = FileGroupID,
                       @CurrentFileGroupName = FileGroupName
          FROM @tmpFileGroups
          WHERE Selected = 1
          AND Completed = 0
          ORDER BY ID ASC

          -- Does the filegroup exist?
          SET @CurrentCommand03 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand03 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand03 = @CurrentCommand03 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups WHERE filegroups.data_space_id = @ParamFileGroupID AND filegroups.[name] = @ParamFileGroupName) BEGIN SET @ParamFileGroupExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand03, @params = N'@ParamFileGroupID int, @ParamFileGroupName sysname, @ParamFileGroupExists bit OUTPUT', @ParamFileGroupID = @CurrentFileGroupID, @ParamFileGroupName = @CurrentFileGroupName, @ParamFileGroupExists = @CurrentFileGroupExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentFileGroupExists IS NULL SET @CurrentFileGroupExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The file group ' + QUOTENAME(@CurrentFileGroupName) + ' in the database ' + QUOTENAME(@CurrentDatabaseName) + ' is locked. It could not be checked if the filegroup exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
          END

          IF @CurrentFileGroupExists = 1
          BEGIN
            SET @CurrentCommandType04 = 'DBCC_CHECKFILEGROUP'

            SET @CurrentCommand04 = ''
            IF @LockTimeout IS NOT NULL SET @CurrentCommand04 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
            SET @CurrentCommand04 = @CurrentCommand04 + 'USE ' + QUOTENAME(@CurrentDatabaseName) + '; DBCC CHECKFILEGROUP (' + QUOTENAME(@CurrentFileGroupName)
            IF @NoIndex = 'Y' SET @CurrentCommand04 = @CurrentCommand04 + ', NOINDEX'
            SET @CurrentCommand04 = @CurrentCommand04 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
            IF @PhysicalOnly = 'Y' SET @CurrentCommand04 = @CurrentCommand04 + ', PHYSICAL_ONLY'
            IF @TabLock = 'Y' SET @CurrentCommand04 = @CurrentCommand04 + ', TABLOCK'

            EXECUTE @CurrentCommandOutput04 = [dbo].[CommandExecute] @Command = @CurrentCommand04, @CommandType = @CurrentCommandType04, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
            SET @Error = @@ERROR
            IF @Error &lt;&gt; 0 SET @CurrentCommandOutput04 = @Error
            IF @CurrentCommandOutput04 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput04
          END

          UPDATE @tmpFileGroups
          SET Completed = 1
          WHERE Selected = 1
          AND Completed = 0
          AND ID = @CurrentFGID

          SET @CurrentFGID = NULL
          SET @CurrentFileGroupID = NULL
          SET @CurrentFileGroupName = NULL
          SET @CurrentFileGroupExists = NULL

          SET @CurrentCommand03 = NULL
          SET @CurrentCommand04 = NULL

          SET @CurrentCommandOutput04 = NULL

          SET @CurrentCommandType04 = NULL
        END
      END

      -- Check disk space allocation structures
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKALLOC')
      BEGIN
        SET @CurrentCommandType05 = 'DBCC_CHECKALLOC'

        SET @CurrentCommand05 = ''
        IF @LockTimeout IS NOT NULL SET @CurrentCommand05 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
        SET @CurrentCommand05 = @CurrentCommand05 + 'DBCC CHECKALLOC (' + QUOTENAME(@CurrentDatabaseName)
        SET @CurrentCommand05 = @CurrentCommand05 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
        IF @TabLock = 'Y' SET @CurrentCommand05 = @CurrentCommand05 + ', TABLOCK'

        EXECUTE @CurrentCommandOutput05 = [dbo].[CommandExecute] @Command = @CurrentCommand05, @CommandType = @CurrentCommandType05, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput05 = @Error
        IF @CurrentCommandOutput05 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput05
      END

      -- Check objects
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKTABLE')
      BEGIN
        SET @CurrentCommand06 = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.schema_id = schemas.schema_id WHERE objects.[type] IN(''U'',''V'') AND EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.object_id = objects.object_id) ORDER BY schemas.name ASC, objects.name ASC'

        INSERT INTO @tmpObjects (SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, Selected, Completed)
        EXECUTE sp_executesql @statement = @CurrentCommand06
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @ReturnCode = @Error

        IF @Objects IS NULL
        BEGIN
          UPDATE tmpObjects
          SET tmpObjects.Selected = 1
          FROM @tmpObjects tmpObjects
        END
        ELSE
        BEGIN
          UPDATE tmpObjects
          SET tmpObjects.Selected = SelectedObjects.Selected
          FROM @tmpObjects tmpObjects
          INNER JOIN @SelectedObjects SelectedObjects
          ON @CurrentDatabaseName LIKE REPLACE(SelectedObjects.DatabaseName,'_','[_]') AND tmpObjects.SchemaName LIKE REPLACE(SelectedObjects.SchemaName,'_','[_]') AND tmpObjects.ObjectName LIKE REPLACE(SelectedObjects.ObjectName,'_','[_]')
          WHERE SelectedObjects.Selected = 1

          UPDATE tmpObjects
          SET tmpObjects.Selected = SelectedObjects.Selected
          FROM @tmpObjects tmpObjects
          INNER JOIN @SelectedObjects SelectedObjects
          ON @CurrentDatabaseName LIKE REPLACE(SelectedObjects.DatabaseName,'_','[_]') AND tmpObjects.SchemaName LIKE REPLACE(SelectedObjects.SchemaName,'_','[_]') AND tmpObjects.ObjectName LIKE REPLACE(SelectedObjects.ObjectName,'_','[_]')
          WHERE SelectedObjects.Selected = 0
        END

        WHILE EXISTS (SELECT * FROM @tmpObjects WHERE Selected = 1 AND Completed = 0)
        BEGIN
          SELECT TOP 1 @CurrentOID = ID,
                       @CurrentSchemaID = SchemaID,
                       @CurrentSchemaName = SchemaName,
                       @CurrentObjectID = ObjectID,
                       @CurrentObjectName = ObjectName,
                       @CurrentObjectType = ObjectType
          FROM @tmpObjects
          WHERE Selected = 1
          AND Completed = 0
          ORDER BY ID ASC

          -- Does the object exist?
          SET @CurrentCommand07 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand07 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand07 = @CurrentCommand07 + 'IF EXISTS(SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.schema_id = schemas.schema_id WHERE objects.[type] IN(''U'',''V'') AND EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.object_id = objects.object_id) AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType) BEGIN SET @ParamObjectExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand07, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamObjectExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamObjectExists = @CurrentObjectExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentObjectExists IS NULL SET @CurrentObjectExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the object exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
          END

          IF @CurrentObjectExists = 1
          BEGIN
            SET @CurrentCommandType08 = 'DBCC_CHECKTABLE'

            SET @CurrentCommand08 = ''
            IF @LockTimeout IS NOT NULL SET @CurrentCommand08 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
            SET @CurrentCommand08 = @CurrentCommand08 + 'DBCC CHECKTABLE (''' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ''''
            IF @NoIndex = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', NOINDEX'
            SET @CurrentCommand08 = @CurrentCommand08 + ') WITH NO_INFOMSGS, ALL_ERRORMSGS'
            IF @PhysicalOnly = 'N' SET @CurrentCommand08 = @CurrentCommand08 + ', DATA_PURITY'
            IF @PhysicalOnly = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', PHYSICAL_ONLY'
            IF @ExtendedLogicalChecks = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', EXTENDED_LOGICAL_CHECKS'
            IF @TabLock = 'Y' SET @CurrentCommand08 = @CurrentCommand08 + ', TABLOCK'

            EXECUTE @CurrentCommandOutput08 = [dbo].[CommandExecute] @Command = @CurrentCommand08, @CommandType = @CurrentCommandType08, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @LogToTable = @LogToTable, @Execute = @Execute
            SET @Error = @@ERROR
            IF @Error &lt;&gt; 0 SET @CurrentCommandOutput08 = @Error
            IF @CurrentCommandOutput08 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput08
          END

          UPDATE @tmpObjects
          SET Completed = 1
          WHERE Selected = 1
          AND Completed = 0
          AND ID = @CurrentOID

          SET @CurrentOID = NULL
          SET @CurrentSchemaID = NULL
          SET @CurrentSchemaName = NULL
          SET @CurrentObjectID = NULL
          SET @CurrentObjectName = NULL
          SET @CurrentObjectType = NULL
          SET @CurrentObjectExists = NULL

          SET @CurrentCommand07 = NULL
          SET @CurrentCommand08 = NULL

          SET @CurrentCommandOutput08 = NULL

          SET @CurrentCommandType08 = NULL
        END
      END

      -- Check catalog
      IF EXISTS(SELECT * FROM @SelectedCheckCommands WHERE CheckCommand = 'CHECKCATALOG')
      BEGIN
        SET @CurrentCommandType09 = 'DBCC_CHECKCATALOG'

        SET @CurrentCommand09 = ''
        IF @LockTimeout IS NOT NULL SET @CurrentCommand09 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
        SET @CurrentCommand09 = @CurrentCommand09 + 'DBCC CHECKCATALOG (' + QUOTENAME(@CurrentDatabaseName)
        SET @CurrentCommand09 = @CurrentCommand09 + ') WITH NO_INFOMSGS'

        EXECUTE @CurrentCommandOutput09 = [dbo].[CommandExecute] @Command = @CurrentCommand09, @CommandType = @CurrentCommandType09, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0 SET @CurrentCommandOutput09 = @Error
        IF @CurrentCommandOutput09 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput09
      END

    END

    -- Update that the database is completed
    UPDATE @tmpDatabases
    SET Completed = 1
    WHERE Selected = 1
    AND Completed = 0
    AND ID = @CurrentDBID

    -- Clear variables
    SET @CurrentDBID = NULL
    SET @CurrentDatabaseID = NULL
    SET @CurrentDatabaseName = NULL
    SET @CurrentIsDatabaseAccessible = NULL
    SET @CurrentAvailabilityGroup = NULL
    SET @CurrentAvailabilityGroupRole = NULL
    SET @CurrentDatabaseMirroringRole = NULL
    SET @CurrentLogShippingRole = NULL

    SET @CurrentCommand01 = NULL
    SET @CurrentCommand02 = NULL
    SET @CurrentCommand05 = NULL
    SET @CurrentCommand06 = NULL
    SET @CurrentCommand09 = NULL

    SET @CurrentCommandOutput01 = NULL
    SET @CurrentCommandOutput05 = NULL
    SET @CurrentCommandOutput09 = NULL

    SET @CurrentCommandType01 = NULL
    SET @CurrentCommandType05 = NULL
    SET @CurrentCommandType09 = NULL

    DELETE FROM @tmpFileGroups
    DELETE FROM @tmpObjects

  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  Logging:
  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120)
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IndexOptimize]

@Databases nvarchar(max),
@FragmentationLow nvarchar(max) = NULL,
@FragmentationMedium nvarchar(max) = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationHigh nvarchar(max) = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',
@FragmentationLevel1 int = 5,
@FragmentationLevel2 int = 30,
@PageCountLevel int = 1000,
@SortInTempdb nvarchar(max) = 'N',
@MaxDOP int = NULL,
@FillFactor int = NULL,
@PadIndex nvarchar(max) = NULL,
@LOBCompaction nvarchar(max) = 'Y',
@UpdateStatistics nvarchar(max) = NULL,
@OnlyModifiedStatistics nvarchar(max) = 'N',
@StatisticsSample int = NULL,
@StatisticsResample nvarchar(max) = 'N',
@PartitionLevel nvarchar(max) = 'Y',
@MSShippedObjects nvarchar(max) = 'N',
@Indexes nvarchar(max) = NULL,
@TimeLimit int = NULL,
@Delay int = NULL,
@LockTimeout int = NULL,
@LogToTable nvarchar(max) = 'N',
@Execute nvarchar(max) = 'Y'

AS

BEGIN

  ----------------------------------------------------------------------------------------------------
  --// Source: http://ola.hallengren.com                                                          //--
  ----------------------------------------------------------------------------------------------------

  SET NOCOUNT ON

  SET ARITHABORT ON

  SET NUMERIC_ROUNDABORT OFF

  DECLARE @StartMessage nvarchar(max)
  DECLARE @EndMessage nvarchar(max)
  DECLARE @DatabaseMessage nvarchar(max)
  DECLARE @ErrorMessage nvarchar(max)

  DECLARE @Version numeric(18,10)
  DECLARE @AmazonRDS bit

  DECLARE @Cluster nvarchar(max)

  DECLARE @StartTime datetime

  DECLARE @CurrentDBID int
  DECLARE @CurrentDatabaseID int
  DECLARE @CurrentDatabaseName nvarchar(max)
  DECLARE @CurrentIsDatabaseAccessible bit
  DECLARE @CurrentAvailabilityGroup nvarchar(max)
  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)
  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)
  DECLARE @CurrentLogShippingRole nvarchar(max)

  DECLARE @CurrentCommand01 nvarchar(max)
  DECLARE @CurrentCommand02 nvarchar(max)
  DECLARE @CurrentCommand03 nvarchar(max)
  DECLARE @CurrentCommand04 nvarchar(max)
  DECLARE @CurrentCommand05 nvarchar(max)
  DECLARE @CurrentCommand06 nvarchar(max)
  DECLARE @CurrentCommand07 nvarchar(max)
  DECLARE @CurrentCommand08 nvarchar(max)
  DECLARE @CurrentCommand09 nvarchar(max)
  DECLARE @CurrentCommand10 nvarchar(max)
  DECLARE @CurrentCommand11 nvarchar(max)
  DECLARE @CurrentCommand12 nvarchar(max)
  DECLARE @CurrentCommand13 nvarchar(max)
  DECLARE @CurrentCommand14 nvarchar(max)

  DECLARE @CurrentCommandOutput13 int
  DECLARE @CurrentCommandOutput14 int

  DECLARE @CurrentCommandType13 nvarchar(max)
  DECLARE @CurrentCommandType14 nvarchar(max)

  DECLARE @CurrentIxID int
  DECLARE @CurrentSchemaID int
  DECLARE @CurrentSchemaName nvarchar(max)
  DECLARE @CurrentObjectID int
  DECLARE @CurrentObjectName nvarchar(max)
  DECLARE @CurrentObjectType nvarchar(max)
  DECLARE @CurrentIndexID int
  DECLARE @CurrentIndexName nvarchar(max)
  DECLARE @CurrentIndexType int
  DECLARE @CurrentStatisticsID int
  DECLARE @CurrentStatisticsName nvarchar(max)
  DECLARE @CurrentPartitionID bigint
  DECLARE @CurrentPartitionNumber int
  DECLARE @CurrentPartitionCount int
  DECLARE @CurrentIsPartition bit
  DECLARE @CurrentIndexExists bit
  DECLARE @CurrentStatisticsExists bit
  DECLARE @CurrentIsImageText bit
  DECLARE @CurrentIsNewLOB bit
  DECLARE @CurrentIsFileStream bit
  DECLARE @CurrentIsColumnStore bit
  DECLARE @CurrentAllowPageLocks bit
  DECLARE @CurrentNoRecompute bit
  DECLARE @CurrentStatisticsModified bit
  DECLARE @CurrentOnReadOnlyFileGroup bit
  DECLARE @CurrentFragmentationLevel float
  DECLARE @CurrentPageCount bigint
  DECLARE @CurrentFragmentationGroup nvarchar(max)
  DECLARE @CurrentAction nvarchar(max)
  DECLARE @CurrentMaxDOP int
  DECLARE @CurrentUpdateStatistics nvarchar(max)
  DECLARE @CurrentComment nvarchar(max)
  DECLARE @CurrentExtendedInfo xml
  DECLARE @CurrentDelay datetime

  DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))

  DECLARE @tmpIndexesStatistics TABLE (ID int IDENTITY,
                                       SchemaID int,
                                       SchemaName nvarchar(max),
                                       ObjectID int,
                                       ObjectName nvarchar(max),
                                       ObjectType nvarchar(max),
                                       IndexID int,
                                       IndexName nvarchar(max),
                                       IndexType int,
                                       StatisticsID int,
                                       StatisticsName nvarchar(max),
                                       PartitionID bigint,
                                       PartitionNumber int,
                                       PartitionCount int,
                                       Selected bit,
                                       Completed bit,
                                       PRIMARY KEY(Selected, Completed, ID))

  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)

  DECLARE @SelectedIndexes TABLE (DatabaseName nvarchar(max),
                                  SchemaName nvarchar(max),
                                  ObjectName nvarchar(max),
                                  IndexName nvarchar(max),
                                  Selected bit)

  DECLARE @Actions TABLE ([Action] nvarchar(max))

  INSERT INTO @Actions([Action]) VALUES('INDEX_REBUILD_ONLINE')
  INSERT INTO @Actions([Action]) VALUES('INDEX_REBUILD_OFFLINE')
  INSERT INTO @Actions([Action]) VALUES('INDEX_REORGANIZE')

  DECLARE @ActionsPreferred TABLE (FragmentationGroup nvarchar(max),
                                   [Priority] int,
                                   [Action] nvarchar(max))

  DECLARE @CurrentActionsAllowed TABLE ([Action] nvarchar(max))

  DECLARE @Error int
  DECLARE @ReturnCode int

  SET @Error = 0
  SET @ReturnCode = 0

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  SET @AmazonRDS = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END

  ----------------------------------------------------------------------------------------------------
  --// Log initial information                                                                    //--
  ----------------------------------------------------------------------------------------------------

  SET @StartTime = CONVERT(datetime,CONVERT(nvarchar,GETDATE(),120),120)

  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTime,120) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (SELECT QUOTENAME(schemas.name) FROM sys.schemas schemas INNER JOIN sys.objects objects ON schemas.[schema_id] = objects.[schema_id] WHERE [object_id] = @@PROCID) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationLow = ' + ISNULL('''' + REPLACE(@FragmentationLow,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationMedium = ' + ISNULL('''' + REPLACE(@FragmentationMedium,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationHigh = ' + ISNULL('''' + REPLACE(@FragmentationHigh,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationLevel1 = ' + ISNULL(CAST(@FragmentationLevel1 AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @FragmentationLevel2 = ' + ISNULL(CAST(@FragmentationLevel2 AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @PageCountLevel = ' + ISNULL(CAST(@PageCountLevel AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @SortInTempdb = ' + ISNULL('''' + REPLACE(@SortInTempdb,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @MaxDOP = ' + ISNULL(CAST(@MaxDOP AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @FillFactor = ' + ISNULL(CAST(@FillFactor AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @PadIndex = ' + ISNULL('''' + REPLACE(@PadIndex,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @LOBCompaction = ' + ISNULL('''' + REPLACE(@LOBCompaction,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @UpdateStatistics = ' + ISNULL('''' + REPLACE(@UpdateStatistics,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @OnlyModifiedStatistics = ' + ISNULL('''' + REPLACE(@OnlyModifiedStatistics,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @StatisticsSample = ' + ISNULL(CAST(@StatisticsSample AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @StatisticsResample = ' + ISNULL('''' + REPLACE(@StatisticsResample,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @PartitionLevel = ' + ISNULL('''' + REPLACE(@PartitionLevel,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @MSShippedObjects = ' + ISNULL('''' + REPLACE(@MSShippedObjects,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Indexes = ' + ISNULL('''' + REPLACE(@Indexes,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @TimeLimit = ' + ISNULL(CAST(@TimeLimit AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @Delay = ' + ISNULL(CAST(@Delay AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @LockTimeout = ' + ISNULL(CAST(@LockTimeout AS nvarchar),'NULL')
  SET @StartMessage = @StartMessage + ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')
  SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL') + CHAR(13) + CHAR(10)
  SET @StartMessage = @StartMessage + 'Source: http://ola.hallengren.com' + CHAR(13) + CHAR(10)
  SET @StartMessage = REPLACE(@StartMessage,'%','%%') + ' '
  RAISERROR(@StartMessage,10,1) WITH NOWAIT

  ----------------------------------------------------------------------------------------------------
  --// Check core requirements                                                                    //--
  ----------------------------------------------------------------------------------------------------

  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute is missing. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND (OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@LogToTable%' OR OBJECT_DEFINITION(objects.[object_id]) LIKE '%LOCK_TIMEOUT%'))
  BEGIN
    SET @ErrorMessage = 'The stored procedure CommandExecute needs to be updated. Download http://ola.hallengren.com/scripts/CommandExecute.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')
  BEGIN
    SET @ErrorMessage = 'The table CommandLog is missing. Download http://ola.hallengren.com/scripts/CommandLog.sql.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Select databases                                                                           //--
  ----------------------------------------------------------------------------------------------------

  SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition &lt; LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)

  INSERT INTO @tmpDatabases (DatabaseName, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] &lt;&gt; 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  ----------------------------------------------------------------------------------------------------
  --// Select indexes                                                                             //--
  ----------------------------------------------------------------------------------------------------

  SET @Indexes = REPLACE(@Indexes, ', ', ',');

  WITH Indexes1 (StartPosition, EndPosition, IndexItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Indexes, 1), 0), LEN(@Indexes) + 1) AS EndPosition,
         SUBSTRING(@Indexes, 1, ISNULL(NULLIF(CHARINDEX(',', @Indexes, 1), 0), LEN(@Indexes) + 1) - 1) AS IndexItem
  WHERE @Indexes IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Indexes, EndPosition + 1), 0), LEN(@Indexes) + 1) AS EndPosition,
         SUBSTRING(@Indexes, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Indexes, EndPosition + 1), 0), LEN(@Indexes) + 1) - EndPosition - 1) AS IndexItem
  FROM Indexes1
  WHERE EndPosition &lt; LEN(@Indexes) + 1
  ),
  Indexes2 (IndexItem, Selected) AS
  (
  SELECT CASE WHEN IndexItem LIKE '-%' THEN RIGHT(IndexItem,LEN(IndexItem) - 1) ELSE IndexItem END AS IndexItem,
         CASE WHEN IndexItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Indexes1
  ),
  Indexes3 (IndexItem, Selected) AS
  (
  SELECT CASE WHEN IndexItem = 'ALL_INDEXES' THEN '%.%.%.%' ELSE IndexItem END AS IndexItem,
         Selected
  FROM Indexes2
  ),
  Indexes4 (DatabaseName, SchemaName, ObjectName, IndexName, Selected) AS
  (
  SELECT CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,3) ELSE PARSENAME(IndexItem,4) END AS DatabaseName,
         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,2) ELSE PARSENAME(IndexItem,3) END AS SchemaName,
         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,1) ELSE PARSENAME(IndexItem,2) END AS ObjectName,
         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN '%' ELSE PARSENAME(IndexItem,1) END AS IndexName,
         Selected
  FROM Indexes3
  )
  INSERT INTO @SelectedIndexes (DatabaseName, SchemaName, ObjectName, IndexName, Selected)
  SELECT DatabaseName, SchemaName, ObjectName, IndexName, Selected
  FROM Indexes4
  OPTION (MAXRECURSION 0);

  ----------------------------------------------------------------------------------------------------
  --// Select actions                                                                             //--
  ----------------------------------------------------------------------------------------------------

  WITH FragmentationLow (StartPosition, EndPosition, [Action]) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, 1), 0), LEN(@FragmentationLow) + 1) AS EndPosition,
         SUBSTRING(@FragmentationLow, 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, 1), 0), LEN(@FragmentationLow) + 1) - 1) AS [Action]
  WHERE @FragmentationLow IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, EndPosition + 1), 0), LEN(@FragmentationLow) + 1) AS EndPosition,
         SUBSTRING(@FragmentationLow, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationLow, EndPosition + 1), 0), LEN(@FragmentationLow) + 1) - EndPosition - 1) AS [Action]
  FROM FragmentationLow
  WHERE EndPosition &lt; LEN(@FragmentationLow) + 1
  )
  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])
  SELECT 'Low' AS FragmentationGroup,
         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],
         [Action]
  FROM FragmentationLow
  OPTION (MAXRECURSION 0);

  WITH FragmentationMedium (StartPosition, EndPosition, [Action]) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, 1), 0), LEN(@FragmentationMedium) + 1) AS EndPosition,
         SUBSTRING(@FragmentationMedium, 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, 1), 0), LEN(@FragmentationMedium) + 1) - 1) AS [Action]
  WHERE @FragmentationMedium IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, EndPosition + 1), 0), LEN(@FragmentationMedium) + 1) AS EndPosition,
         SUBSTRING(@FragmentationMedium, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationMedium, EndPosition + 1), 0), LEN(@FragmentationMedium) + 1) - EndPosition - 1) AS [Action]
  FROM FragmentationMedium
  WHERE EndPosition &lt; LEN(@FragmentationMedium) + 1
  )
  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])
  SELECT 'Medium' AS FragmentationGroup,
         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],
         [Action]
  FROM FragmentationMedium
  OPTION (MAXRECURSION 0);

  WITH FragmentationHigh (StartPosition, EndPosition, [Action]) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, 1), 0), LEN(@FragmentationHigh) + 1) AS EndPosition,
         SUBSTRING(@FragmentationHigh, 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, 1), 0), LEN(@FragmentationHigh) + 1) - 1) AS [Action]
  WHERE @FragmentationHigh IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, EndPosition + 1), 0), LEN(@FragmentationHigh) + 1) AS EndPosition,
         SUBSTRING(@FragmentationHigh, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @FragmentationHigh, EndPosition + 1), 0), LEN(@FragmentationHigh) + 1) - EndPosition - 1) AS [Action]
  FROM FragmentationHigh
  WHERE EndPosition &lt; LEN(@FragmentationHigh) + 1
  )
  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])
  SELECT 'High' AS FragmentationGroup,
         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],
         [Action]
  FROM FragmentationHigh
  OPTION (MAXRECURSION 0)

  ----------------------------------------------------------------------------------------------------
  --// Check input parameters                                                                     //--
  ----------------------------------------------------------------------------------------------------

  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'Low' AND [Action] NOT IN(SELECT * FROM @Actions))
  OR EXISTS(SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'Low' GROUP BY [Action] HAVING COUNT(*) &gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationLow is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'Medium' AND [Action] NOT IN(SELECT * FROM @Actions))
  OR EXISTS(SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'Medium' GROUP BY [Action] HAVING COUNT(*) &gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationMedium is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'High' AND [Action] NOT IN(SELECT * FROM @Actions))
  OR EXISTS(SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'High' GROUP BY [Action] HAVING COUNT(*) &gt; 1)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationHigh is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @FragmentationLevel1 &lt;= 0 OR @FragmentationLevel1 &gt;= 100 OR @FragmentationLevel1 &gt;= @FragmentationLevel2 OR @FragmentationLevel1 IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationLevel1 is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @FragmentationLevel2 &lt;= 0 OR @FragmentationLevel2 &gt;= 100 OR @FragmentationLevel2 &lt;= @FragmentationLevel1 OR @FragmentationLevel2 IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FragmentationLevel2 is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PageCountLevel &lt; 0 OR @PageCountLevel IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PageCountLevel is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @SortInTempdb NOT IN('Y','N') OR @SortInTempdb IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @SortInTempdb is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @MaxDOP &lt; 0 OR @MaxDOP &gt; 64 OR @MaxDOP &gt; (SELECT cpu_count FROM sys.dm_os_sys_info) OR (@MaxDOP &gt; 1 AND SERVERPROPERTY('EngineEdition') &lt;&gt; 3)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @MaxDOP is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @FillFactor &lt;= 0 OR @FillFactor &gt; 100
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @FillFactor is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PadIndex NOT IN('Y','N')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PadIndex is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LOBCompaction NOT IN('Y','N') OR @LOBCompaction IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LOBCompaction is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @UpdateStatistics NOT IN('ALL','COLUMNS','INDEX')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @UpdateStatistics is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @OnlyModifiedStatistics NOT IN('Y','N') OR @OnlyModifiedStatistics IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @OnlyModifiedStatistics is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @StatisticsSample &lt;= 0 OR @StatisticsSample  &gt; 100
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @StatisticsSample is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @StatisticsResample NOT IN('Y','N') OR @StatisticsResample IS NULL OR (@StatisticsResample = 'Y' AND @StatisticsSample IS NOT NULL)
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @StatisticsResample is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @PartitionLevel NOT IN('Y','N') OR @PartitionLevel IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @PartitionLevel is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @MSShippedObjects NOT IN('Y','N') OR @MSShippedObjects IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @MSShippedObjects is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF EXISTS(SELECT * FROM @SelectedIndexes WHERE DatabaseName IS NULL OR SchemaName IS NULL OR ObjectName IS NULL OR IndexName IS NULL) OR (@Indexes IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedIndexes))
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Indexes is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @TimeLimit &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @TimeLimit is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Delay &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Delay is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LockTimeout &lt; 0
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LockTimeout is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @LogToTable is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Execute NOT IN('Y','N') OR @Execute IS NULL
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Execute is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END

  IF @Error &lt;&gt; 0
  BEGIN
    SET @ErrorMessage = 'The documentation is available at http://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @ReturnCode = @Error
    GOTO Logging
  END

  ----------------------------------------------------------------------------------------------------
  --// Check Availability Group cluster name                                                      //--
  ----------------------------------------------------------------------------------------------------

  IF @Version &gt;= 11
  BEGIN
    SELECT @Cluster = cluster_name
    FROM sys.dm_hadr_cluster
  END

  ----------------------------------------------------------------------------------------------------
  --// Execute commands                                                                           //--
  ----------------------------------------------------------------------------------------------------

  WHILE EXISTS (SELECT * FROM @tmpDatabases WHERE Selected = 1 AND Completed = 0)
  BEGIN

    SELECT TOP 1 @CurrentDBID = ID,
                 @CurrentDatabaseName = DatabaseName
    FROM @tmpDatabases
    WHERE Selected = 1
    AND Completed = 0
    ORDER BY ID ASC

    SET @CurrentDatabaseID = DB_ID(@CurrentDatabaseName)

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    BEGIN
      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = @CurrentDatabaseID AND database_guid IS NOT NULL)
      BEGIN
        SET @CurrentIsDatabaseAccessible = 1
      END
      ELSE
      BEGIN
        SET @CurrentIsDatabaseAccessible = 0
      END
    END
    ELSE
    BEGIN
      SET @CurrentIsDatabaseAccessible = 0
    END

    IF @Version &gt;= 11 AND @Cluster IS NOT NULL
    BEGIN
      SELECT @CurrentAvailabilityGroup = availability_groups.name,
             @CurrentAvailabilityGroupRole = dm_hadr_availability_replica_states.role_desc
      FROM sys.databases databases
      INNER JOIN sys.availability_databases_cluster availability_databases_cluster ON databases.group_database_id = availability_databases_cluster.group_database_id
      INNER JOIN sys.availability_groups availability_groups ON availability_databases_cluster.group_id = availability_groups.group_id
      INNER JOIN sys.dm_hadr_availability_replica_states dm_hadr_availability_replica_states ON availability_groups.group_id = dm_hadr_availability_replica_states.group_id AND databases.replica_id = dm_hadr_availability_replica_states.replica_id
      WHERE databases.name = @CurrentDatabaseName
    END

    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)
    FROM sys.database_mirroring
    WHERE database_id = @CurrentDatabaseID

    IF @AmazonRDS = 0
    BEGIN
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'PRIMARY'
      END
      ELSE
      IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)
      BEGIN
        SET @CurrentLogShippingRole = 'SECONDARY'
      END
    END

    -- Set database message
    SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabaseName) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE WHEN DATABASEPROPERTYEX(@CurrentDatabaseName,'IsInStandBy') = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') AS nvarchar) + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabaseName,'Recovery') AS nvarchar) + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group: ' + @CurrentAvailabilityGroup + CHAR(13) + CHAR(10)
    IF @CurrentAvailabilityGroup IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Availability group role: ' + @CurrentAvailabilityGroupRole + CHAR(13) + CHAR(10)
    IF @CurrentDatabaseMirroringRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Database mirroring role: ' + @CurrentDatabaseMirroringRole + CHAR(13) + CHAR(10)
    IF @CurrentLogShippingRole IS NOT NULL SET @DatabaseMessage = @DatabaseMessage + 'Log shipping role: ' + @CurrentLogShippingRole + CHAR(13) + CHAR(10)
    SET @DatabaseMessage = REPLACE(@DatabaseMessage,'%','%%') + ' '
    RAISERROR(@DatabaseMessage,10,1) WITH NOWAIT

    IF DATABASEPROPERTYEX(@CurrentDatabaseName,'Status') = 'ONLINE'
    AND NOT (DATABASEPROPERTYEX(@CurrentDatabaseName,'UserAccess') = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)
    AND DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') = 'READ_WRITE'
    BEGIN

      -- Select indexes in the current database
      IF (EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IS NOT NULL) AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)
      BEGIN
        SET @CurrentCommand01 = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, IndexID, IndexName, IndexType, StatisticsID, StatisticsName, PartitionID, PartitionNumber, PartitionCount, Selected, Completed FROM ('

        IF EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IN('ALL','INDEX')
        BEGIN
          SET @CurrentCommand01 = @CurrentCommand01 + 'SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, indexes.index_id AS IndexID, indexes.[name] AS IndexName, indexes.[type] AS IndexType, stats.stats_id AS StatisticsID, stats.name AS StatisticsName'
          IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', partitions.partition_id AS PartitionID, partitions.partition_number AS PartitionNumber, IndexPartitions.partition_count AS PartitionCount'
          IF @PartitionLevel = 'N' SET @CurrentCommand01 = @CurrentCommand01 + ', NULL AS PartitionID, NULL AS PartitionNumber, NULL AS PartitionCount'
          SET @CurrentCommand01 = @CurrentCommand01 + ', 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] LEFT OUTER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats ON indexes.[object_id] = stats.[object_id] AND indexes.[index_id] = stats.[stats_id]'
          IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ' LEFT OUTER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.partitions partitions ON indexes.[object_id] = partitions.[object_id] AND indexes.index_id = partitions.index_id LEFT OUTER JOIN (SELECT partitions.[object_id], partitions.index_id, COUNT(*) AS partition_count FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.partitions partitions GROUP BY partitions.[object_id], partitions.index_id) IndexPartitions ON partitions.[object_id] = IndexPartitions.[object_id] AND partitions.[index_id] = IndexPartitions.[index_id]'
          IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ' LEFT OUTER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.dm_db_partition_stats dm_db_partition_stats ON indexes.[object_id] = dm_db_partition_stats.[object_id] AND indexes.[index_id] = dm_db_partition_stats.[index_id] AND partitions.partition_id = dm_db_partition_stats.partition_id'
          IF @PartitionLevel = 'N' SET @CurrentCommand01 = @CurrentCommand01 + ' LEFT OUTER JOIN (SELECT dm_db_partition_stats.[object_id], dm_db_partition_stats.[index_id], SUM(dm_db_partition_stats.in_row_data_page_count) AS in_row_data_page_count FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.dm_db_partition_stats dm_db_partition_stats GROUP BY dm_db_partition_stats.[object_id], dm_db_partition_stats.[index_id]) dm_db_partition_stats ON indexes.[object_id] = dm_db_partition_stats.[object_id] AND indexes.[index_id] = dm_db_partition_stats.[index_id]'
          SET @CurrentCommand01 = @CurrentCommand01 + ' WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND indexes.[type] IN(1,2,3,4) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0'
          IF (@UpdateStatistics NOT IN('ALL','INDEX') OR @UpdateStatistics IS NULL) AND @PageCountLevel &gt; 0 SET @CurrentCommand01 = @CurrentCommand01 + ' AND (dm_db_partition_stats.in_row_data_page_count &gt;= @ParamPageCountLevel OR dm_db_partition_stats.in_row_data_page_count IS NULL)'
          IF NOT EXISTS(SELECT * FROM @ActionsPreferred) SET @CurrentCommand01 = @CurrentCommand01 + ' AND stats.stats_id IS NOT NULL'
        END

        IF (EXISTS(SELECT * FROM @ActionsPreferred) AND @UpdateStatistics = 'COLUMNS') OR @UpdateStatistics = 'ALL' SET @CurrentCommand01 = @CurrentCommand01 + ' UNION '

        IF @UpdateStatistics IN('ALL','COLUMNS') SET @CurrentCommand01 = @CurrentCommand01 + 'SELECT schemas.[schema_id] AS SchemaID, schemas.[name] AS SchemaName, objects.[object_id] AS ObjectID, objects.[name] AS ObjectName, RTRIM(objects.[type]) AS ObjectType, NULL AS IndexID, NULL AS IndexName, NULL AS IndexType, stats.stats_id AS StatisticsID, stats.name AS StatisticsName, NULL AS PartitionID, NULL AS PartitionNumber, NULL AS PartitionCount, 0 AS Selected, 0 AS Completed FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON stats.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND NOT EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.[object_id] = stats.[object_id] AND indexes.index_id = stats.stats_id)'

        SET @CurrentCommand01 = @CurrentCommand01 + ') IndexesStatistics ORDER BY SchemaName ASC, ObjectName ASC'
        IF (EXISTS(SELECT * FROM @ActionsPreferred) AND @UpdateStatistics = 'COLUMNS') OR @UpdateStatistics = 'ALL' SET @CurrentCommand01 = @CurrentCommand01 + ', CASE WHEN IndexType IS NULL THEN 1 ELSE 0 END ASC'
        IF EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IN('ALL','INDEX') SET @CurrentCommand01 = @CurrentCommand01 + ', IndexType ASC, IndexName ASC'
        IF @UpdateStatistics IN('ALL','COLUMNS') SET @CurrentCommand01 = @CurrentCommand01 + ', StatisticsName ASC'
        IF @PartitionLevel = 'Y' SET @CurrentCommand01 = @CurrentCommand01 + ', PartitionNumber ASC'

        INSERT INTO @tmpIndexesStatistics (SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, IndexID, IndexName, IndexType, StatisticsID, StatisticsName, PartitionID, PartitionNumber, PartitionCount, Selected, Completed)
        EXECUTE sp_executesql @statement = @CurrentCommand01, @params = N'@ParamPageCountLevel int', @ParamPageCountLevel = @PageCountLevel
        SET @Error = @@ERROR
        IF @Error &lt;&gt; 0
        BEGIN
          SET @ReturnCode = @Error
        END
      END

      IF @Indexes IS NULL
      BEGIN
        UPDATE tmpIndexesStatistics
        SET tmpIndexesStatistics.Selected = 1
        FROM @tmpIndexesStatistics tmpIndexesStatistics
      END
      ELSE
      BEGIN
        UPDATE tmpIndexesStatistics
        SET tmpIndexesStatistics.Selected = SelectedIndexes.Selected
        FROM @tmpIndexesStatistics tmpIndexesStatistics
        INNER JOIN @SelectedIndexes SelectedIndexes
        ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')
        WHERE SelectedIndexes.Selected = 1

        UPDATE tmpIndexesStatistics
        SET tmpIndexesStatistics.Selected = SelectedIndexes.Selected
        FROM @tmpIndexesStatistics tmpIndexesStatistics
        INNER JOIN @SelectedIndexes SelectedIndexes
        ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')
        WHERE SelectedIndexes.Selected = 0
      END

      WHILE EXISTS (SELECT * FROM @tmpIndexesStatistics WHERE Selected = 1 AND Completed = 0 AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL))
      BEGIN

        SELECT TOP 1 @CurrentIxID = ID,
                     @CurrentSchemaID = SchemaID,
                     @CurrentSchemaName = SchemaName,
                     @CurrentObjectID = ObjectID,
                     @CurrentObjectName = ObjectName,
                     @CurrentObjectType = ObjectType,
                     @CurrentIndexID = IndexID,
                     @CurrentIndexName = IndexName,
                     @CurrentIndexType = IndexType,
                     @CurrentStatisticsID = StatisticsID,
                     @CurrentStatisticsName = StatisticsName,
                     @CurrentPartitionID = PartitionID,
                     @CurrentPartitionNumber = PartitionNumber,
                     @CurrentPartitionCount = PartitionCount
        FROM @tmpIndexesStatistics
        WHERE Selected = 1
        AND Completed = 0
        ORDER BY ID ASC

        -- Is the index a partition?
        IF @CurrentPartitionNumber IS NULL OR @CurrentPartitionCount = 1 BEGIN SET @CurrentIsPartition = 0 END ELSE BEGIN SET @CurrentIsPartition = 1 END

        -- Does the index exist?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand02 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand02 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          IF @CurrentIsPartition = 0 SET @CurrentCommand02 = @CurrentCommand02 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND indexes.[type] IN(1,2,3,4) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0 AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND indexes.index_id = @ParamIndexID AND indexes.[name] = @ParamIndexName AND indexes.[type] = @ParamIndexType) BEGIN SET @ParamIndexExists = 1 END'
          IF @CurrentIsPartition = 1 SET @CurrentCommand02 = @CurrentCommand02 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.partitions partitions ON indexes.[object_id] = partitions.[object_id] AND indexes.index_id = partitions.index_id WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND indexes.[type] IN(1,2,3,4) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0 AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND indexes.index_id = @ParamIndexID AND indexes.[name] = @ParamIndexName AND indexes.[type] = @ParamIndexType AND partitions.partition_id = @ParamPartitionID AND partitions.partition_number = @ParamPartitionNumber) BEGIN SET @ParamIndexExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand02, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamIndexID int, @ParamIndexName sysname, @ParamIndexType int, @ParamPartitionID bigint, @ParamPartitionNumber int, @ParamIndexExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamIndexID = @CurrentIndexID, @ParamIndexName = @CurrentIndexName, @ParamIndexType = @CurrentIndexType, @ParamPartitionID = @CurrentPartitionID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamIndexExists = @CurrentIndexExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIndexExists IS NULL SET @CurrentIndexExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
          IF @CurrentIndexExists = 0 GOTO NoAction
        END

        -- Does the statistics exist?
        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL
        BEGIN
          SET @CurrentCommand03 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand03 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand03 = @CurrentCommand03 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.objects objects ON stats.[object_id] = objects.[object_id] INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND stats.stats_id = @ParamStatisticsID AND stats.[name] = @ParamStatisticsName) BEGIN SET @ParamStatisticsExists = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand03, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamStatisticsID int, @ParamStatisticsName sysname, @ParamStatisticsExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamStatisticsID = @CurrentStatisticsID, @ParamStatisticsName = @CurrentStatisticsName, @ParamStatisticsExists = @CurrentStatisticsExists OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentStatisticsExists IS NULL SET @CurrentStatisticsExists = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the statistics exists.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
          IF @CurrentStatisticsExists = 0 GOTO NoAction
        END

        -- Is one of the columns in the index an image, text or ntext data type?
        IF @CurrentIndexID IS NOT NULL AND @CurrentIndexType = 1 AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand04 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand04 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand04 = @CurrentCommand04 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.types types ON columns.system_type_id = types.user_type_id WHERE columns.[object_id] = @ParamObjectID AND types.name IN(''image'',''text'',''ntext'')) BEGIN SET @ParamIsImageText = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand04, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamIsImageText bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamIsImageText = @CurrentIsImageText OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsImageText IS NULL SET @CurrentIsImageText = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index contains any image, text, or ntext data types.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is one of the columns in the index an xml, varchar(max), nvarchar(max), varbinary(max) or large CLR data type?
        IF @CurrentIndexID IS NOT NULL AND @CurrentIndexType IN(1,2) AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand05 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand05 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          IF @CurrentIndexType = 1 SET @CurrentCommand05 = @CurrentCommand05 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.types types ON columns.system_type_id = types.user_type_id OR (columns.user_type_id = types.user_type_id AND types.is_assembly_type = 1) WHERE columns.[object_id] = @ParamObjectID AND (types.name IN(''xml'') OR (types.name IN(''varchar'',''nvarchar'',''varbinary'') AND columns.max_length = -1) OR (types.is_assembly_type = 1 AND columns.max_length = -1))) BEGIN SET @ParamIsNewLOB = 1 END'
          IF @CurrentIndexType = 2 SET @CurrentCommand05 = @CurrentCommand05 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.index_columns index_columns INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns ON index_columns.[object_id] = columns.[object_id] AND index_columns.column_id = columns.column_id INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.types types ON columns.system_type_id = types.user_type_id OR (columns.user_type_id = types.user_type_id AND types.is_assembly_type = 1) WHERE index_columns.[object_id] = @ParamObjectID AND index_columns.index_id = @ParamIndexID AND (types.[name] IN(''xml'') OR (types.[name] IN(''varchar'',''nvarchar'',''varbinary'') AND columns.max_length = -1) OR (types.is_assembly_type = 1 AND columns.max_length = -1))) BEGIN SET @ParamIsNewLOB = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand05, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamIsNewLOB bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamIsNewLOB = @CurrentIsNewLOB OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsNewLOB IS NULL SET @CurrentIsNewLOB = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index contains any xml, varchar(max), nvarchar(max), varbinary(max), or large CLR data types.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is one of the columns in the index a file stream column?
        IF @CurrentIndexID IS NOT NULL AND @CurrentIndexType = 1 AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand06 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand06 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand06 = @CurrentCommand06 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.columns columns WHERE columns.[object_id] = @ParamObjectID  AND columns.is_filestream = 1) BEGIN SET @ParamIsFileStream = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand06, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamIsFileStream bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamIsFileStream = @CurrentIsFileStream OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsFileStream IS NULL SET @CurrentIsFileStream = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index contains any file stream columns.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is there a columnstore index on the table?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred) AND @Version &gt;= 11
        BEGIN
          SET @CurrentCommand07 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand07 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand07 = @CurrentCommand07 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.[object_id] = @ParamObjectID AND [type] = 6) BEGIN SET @ParamIsColumnStore = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand07, @params = N'@ParamObjectID int, @ParamIsColumnStore bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIsColumnStore = @CurrentIsColumnStore OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentIsColumnStore IS NULL SET @CurrentIsColumnStore = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if there is a columnstore index on the table.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is Allow_Page_Locks set to On?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand08 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand08 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand08 = @CurrentCommand08 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes WHERE indexes.[object_id] = @ParamObjectID AND indexes.[index_id] = @ParamIndexID AND indexes.[allow_page_locks] = 1) BEGIN SET @ParamAllowPageLocks = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand08, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamAllowPageLocks bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamAllowPageLocks = @CurrentAllowPageLocks OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentAllowPageLocks IS NULL SET @CurrentAllowPageLocks = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if page locking is enabled on the index.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is No_Recompute set to On?
        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL
        BEGIN
          SET @CurrentCommand09 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand09 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand09 = @CurrentCommand09 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.stats stats WHERE stats.[object_id] = @ParamObjectID AND stats.[stats_id] = @ParamStatisticsID AND stats.[no_recompute] = 1) BEGIN SET @ParamNoRecompute = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand09, @params = N'@ParamObjectID int, @ParamStatisticsID int, @ParamNoRecompute bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamStatisticsID = @CurrentStatisticsID, @ParamNoRecompute = @CurrentNoRecompute OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentNoRecompute IS NULL SET @CurrentNoRecompute = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if automatic statistics update is enabled.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Has the data in the statistics been modified since the statistics was last updated?
        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL AND @OnlyModifiedStatistics = 'Y'
        BEGIN
          SET @CurrentCommand10 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand10 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          IF (@Version &gt;= 10.504000 AND @Version &lt; 11) OR @Version &gt;= 11.03000
          BEGIN
            SET @CurrentCommand10 = @CurrentCommand10 + 'USE ' + QUOTENAME(@CurrentDatabaseName) + '; IF EXISTS(SELECT * FROM sys.dm_db_stats_properties (@ParamObjectID, @ParamStatisticsID) WHERE modification_counter &gt; 0) BEGIN SET @ParamStatisticsModified = 1 END'
          END
          ELSE
          BEGIN
            SET @CurrentCommand10 = @CurrentCommand10 + 'IF EXISTS(SELECT * FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.sysindexes sysindexes WHERE sysindexes.[id] = @ParamObjectID AND sysindexes.[indid] = @ParamStatisticsID AND sysindexes.[rowmodctr] &lt;&gt; 0) BEGIN SET @ParamStatisticsModified = 1 END'
          END

          EXECUTE sp_executesql @statement = @CurrentCommand10, @params = N'@ParamObjectID int, @ParamStatisticsID int, @ParamStatisticsModified bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamStatisticsID = @CurrentStatisticsID, @ParamStatisticsModified = @CurrentStatisticsModified OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentStatisticsModified IS NULL SET @CurrentStatisticsModified = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if any rows has been modified since the most recent statistics update.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is the index on a read-only filegroup?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentCommand11 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand11 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand11 = @CurrentCommand11 + 'IF EXISTS(SELECT * FROM (SELECT filegroups.data_space_id FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.destination_data_spaces destination_data_spaces ON indexes.data_space_id = destination_data_spaces.partition_scheme_id INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ON destination_data_spaces.data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND indexes.[object_id] = @ParamObjectID AND indexes.[index_id] = @ParamIndexID'
          IF @CurrentIsPartition = 1 SET @CurrentCommand11 = @CurrentCommand11 + ' AND destination_data_spaces.destination_id = @ParamPartitionNumber'
          SET @CurrentCommand11 = @CurrentCommand11 + ' UNION SELECT filegroups.data_space_id FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.indexes indexes INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ON indexes.data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND indexes.[object_id] = @ParamObjectID AND indexes.[index_id] = @ParamIndexID'
          IF @CurrentIndexType = 1 SET @CurrentCommand11 = @CurrentCommand11 + ' UNION SELECT filegroups.data_space_id FROM ' + QUOTENAME(@CurrentDatabaseName) + '.sys.tables tables INNER JOIN ' + QUOTENAME(@CurrentDatabaseName) + '.sys.filegroups filegroups ON tables.lob_data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND tables.[object_id] = @ParamObjectID'
          SET @CurrentCommand11 = @CurrentCommand11 + ') ReadOnlyFileGroups) BEGIN SET @ParamOnReadOnlyFileGroup = 1 END'

          EXECUTE sp_executesql @statement = @CurrentCommand11, @params = N'@ParamObjectID int, @ParamIndexID int, @ParamPartitionNumber int, @ParamOnReadOnlyFileGroup bit OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamOnReadOnlyFileGroup = @CurrentOnReadOnlyFileGroup OUTPUT
          SET @Error = @@ERROR
          IF @Error = 0 AND @CurrentOnReadOnlyFileGroup IS NULL SET @CurrentOnReadOnlyFileGroup = 0
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index is on a read-only filegroup.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Is the index fragmented?
        IF @CurrentIndexID IS NOT NULL
        AND @CurrentOnReadOnlyFileGroup = 0
        AND EXISTS(SELECT * FROM @ActionsPreferred)
        AND (EXISTS(SELECT [Priority], [Action], COUNT(*) FROM @ActionsPreferred GROUP BY [Priority], [Action] HAVING COUNT(*) &lt;&gt; 3) OR @PageCountLevel &gt; 0)
        BEGIN
          SET @CurrentCommand12 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand12 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand12 = @CurrentCommand12 + 'SELECT @ParamFragmentationLevel = MAX(avg_fragmentation_in_percent), @ParamPageCount = SUM(page_count) FROM sys.dm_db_index_physical_stats(@ParamDatabaseID, @ParamObjectID, @ParamIndexID, @ParamPartitionNumber, ''LIMITED'') WHERE alloc_unit_type_desc = ''IN_ROW_DATA'' AND index_level = 0'

          EXECUTE sp_executesql @statement = @CurrentCommand12, @params = N'@ParamDatabaseID int, @ParamObjectID int, @ParamIndexID int, @ParamPartitionNumber int, @ParamFragmentationLevel float OUTPUT, @ParamPageCount bigint OUTPUT', @ParamDatabaseID = @CurrentDatabaseID, @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamFragmentationLevel = @CurrentFragmentationLevel OUTPUT, @ParamPageCount = @CurrentPageCount OUTPUT
          SET @Error = @@ERROR
          IF @Error = 1222
          BEGIN
            SET @ErrorMessage = 'The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. The size and fragmentation of the index could not be checked.' + CHAR(13) + CHAR(10) + ' '
            SET @ErrorMessage = REPLACE(@ErrorMessage,'%','%%')
            RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
          END
          IF @Error &lt;&gt; 0
          BEGIN
            SET @ReturnCode = @Error
            GOTO NoAction
          END
        END

        -- Select fragmentation group
        IF @CurrentIndexID IS NOT NULL AND @CurrentOnReadOnlyFileGroup = 0 AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          SET @CurrentFragmentationGroup = CASE
          WHEN @CurrentFragmentationLevel &gt;= @FragmentationLevel2 THEN 'High'
          WHEN @CurrentFragmentationLevel &gt;= @FragmentationLevel1 AND @CurrentFragmentationLevel &lt; @FragmentationLevel2 THEN 'Medium'
          WHEN @CurrentFragmentationLevel &lt; @FragmentationLevel1 THEN 'Low'
          END
        END

        -- Which actions are allowed?
        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)
        BEGIN
          IF @CurrentOnReadOnlyFileGroup = 0 AND @CurrentAllowPageLocks = 1
          BEGIN
            INSERT INTO @CurrentActionsAllowed ([Action])
            VALUES ('INDEX_REORGANIZE')
          END
          IF @CurrentOnReadOnlyFileGroup = 0
          BEGIN
            INSERT INTO @CurrentActionsAllowed ([Action])
            VALUES ('INDEX_REBUILD_OFFLINE')
          END
          IF @CurrentOnReadOnlyFileGroup = 0
          AND (@CurrentIsPartition = 0 OR @Version &gt;= 12)
          AND ((@CurrentIndexType = 1 AND @CurrentIsImageText = 0 AND @CurrentIsNewLOB = 0)
          OR (@CurrentIndexType = 2 AND @CurrentIsNewLOB = 0)
          OR (@CurrentIndexType = 1 AND @CurrentIsImageText = 0 AND @CurrentIsFileStream = 0 AND @Version &gt;= 11)
          OR (@CurrentIndexType = 2 AND @Version &gt;= 11))
          AND (@CurrentIsColumnStore = 0 OR @Version &lt; 11)
          AND SERVERPROPERTY('EngineEdition') = 3
          BEGIN
            INSERT INTO @CurrentActionsAllowed ([Action])
            VALUES ('INDEX_REBUILD_ONLINE')
          END
        END

        -- Decide action
        IF @CurrentIndexID IS NOT NULL
        AND EXISTS(SELECT * FROM @ActionsPreferred)
        AND (@CurrentPageCount &gt;= @PageCountLevel OR @PageCountLevel = 0)
        BEGIN
          IF EXISTS(SELECT [Priority], [Action], COUNT(*) FROM @ActionsPreferred GROUP BY [Priority], [Action] HAVING COUNT(*) &lt;&gt; 3)
          BEGIN
            SELECT @CurrentAction = [Action]
            FROM @ActionsPreferred
            WHERE FragmentationGroup = @CurrentFragmentationGroup
            AND [Priority] = (SELECT MIN([Priority])
                              FROM @ActionsPreferred
                              WHERE FragmentationGroup = @CurrentFragmentationGroup
                              AND [Action] IN (SELECT [Action] FROM @CurrentActionsAllowed))
          END
          ELSE
          BEGIN
            SELECT @CurrentAction = [Action]
            FROM @ActionsPreferred
            WHERE [Priority] = (SELECT MIN([Priority])
                                FROM @ActionsPreferred
                                WHERE [Action] IN (SELECT [Action] FROM @CurrentActionsAllowed))
          END
        END

        -- Workaround for limitation in SQL Server, http://support.microsoft.com/kb/2292737
        IF @CurrentIndexID IS NOT NULL
        BEGIN
          SET @CurrentMaxDOP = @MaxDOP
          IF @CurrentAction = 'INDEX_REBUILD_ONLINE' AND @CurrentAllowPageLocks = 0
          BEGIN
            SET @CurrentMaxDOP = 1
          END
        END

        -- Update statistics?
        IF @CurrentStatisticsID IS NOT NULL
        AND (@UpdateStatistics = 'ALL' OR (@UpdateStatistics = 'INDEX' AND @CurrentIndexID IS NOT NULL) OR (@UpdateStatistics = 'COLUMNS' AND @CurrentIndexID IS NULL))
        AND (@CurrentStatisticsModified = 1 OR @OnlyModifiedStatistics = 'N')
        AND ((@CurrentIsPartition = 0 AND (@CurrentAction NOT IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') OR @CurrentAction IS NULL)) OR (@CurrentIsPartition = 1 AND @CurrentPartitionNumber = @CurrentPartitionCount))
        BEGIN
          SET @CurrentUpdateStatistics = 'Y'
        END
        ELSE
        BEGIN
          SET @CurrentUpdateStatistics = 'N'
        END

        -- Create comment
        IF @CurrentIndexID IS NOT NULL
        BEGIN
          SET @CurrentComment = 'ObjectType: ' + CASE WHEN @CurrentObjectType = 'U' THEN 'Table' WHEN @CurrentObjectType = 'V' THEN 'View' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'IndexType: ' + CASE WHEN @CurrentIndexType = 1 THEN 'Clustered' WHEN @CurrentIndexType = 2 THEN 'NonClustered' WHEN @CurrentIndexType = 3 THEN 'XML' WHEN @CurrentIndexType = 4 THEN 'Spatial' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'ImageText: ' + CASE WHEN @CurrentIsImageText = 1 THEN 'Yes' WHEN @CurrentIsImageText = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'NewLOB: ' + CASE WHEN @CurrentIsNewLOB = 1 THEN 'Yes' WHEN @CurrentIsNewLOB = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'FileStream: ' + CASE WHEN @CurrentIsFileStream = 1 THEN 'Yes' WHEN @CurrentIsFileStream = 0 THEN 'No' ELSE 'N/A' END + ', '
          IF @Version &gt;= 11 SET @CurrentComment = @CurrentComment + 'ColumnStore: ' + CASE WHEN @CurrentIsColumnStore = 1 THEN 'Yes' WHEN @CurrentIsColumnStore = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'AllowPageLocks: ' + CASE WHEN @CurrentAllowPageLocks = 1 THEN 'Yes' WHEN @CurrentAllowPageLocks = 0 THEN 'No' ELSE 'N/A' END + ', '
          SET @CurrentComment = @CurrentComment + 'PageCount: ' + ISNULL(CAST(@CurrentPageCount AS nvarchar),'N/A') + ', '
          SET @CurrentComment = @CurrentComment + 'Fragmentation: ' + ISNULL(CAST(@CurrentFragmentationLevel AS nvarchar),'N/A')
        END

        IF @CurrentIndexID IS NOT NULL AND (@CurrentPageCount IS NOT NULL OR @CurrentFragmentationLevel IS NOT NULL)
        BEGIN
        SET @CurrentExtendedInfo = (SELECT *
                                    FROM (SELECT CAST(@CurrentPageCount AS nvarchar) AS [PageCount],
                                                 CAST(@CurrentFragmentationLevel AS nvarchar) AS Fragmentation
                                    ) ExtendedInfo FOR XML AUTO, ELEMENTS)
        END

        IF @CurrentIndexID IS NOT NULL AND @CurrentAction IS NOT NULL AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)
        BEGIN
          SET @CurrentCommandType13 = 'ALTER_INDEX'

          SET @CurrentCommand13 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand13 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand13 = @CurrentCommand13 + 'ALTER INDEX ' + QUOTENAME(@CurrentIndexName) + ' ON ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName)

          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE')
          BEGIN
            SET @CurrentCommand13 = @CurrentCommand13 + ' REBUILD'
            IF @CurrentIsPartition = 1 SET @CurrentCommand13 = @CurrentCommand13 + ' PARTITION = ' + CAST(@CurrentPartitionNumber AS nvarchar)
            SET @CurrentCommand13 = @CurrentCommand13 + ' WITH ('
            IF @SortInTempdb = 'Y' SET @CurrentCommand13 = @CurrentCommand13 + 'SORT_IN_TEMPDB = ON'
            IF @SortInTempdb = 'N' SET @CurrentCommand13 = @CurrentCommand13 + 'SORT_IN_TEMPDB = OFF'
            IF @CurrentAction = 'INDEX_REBUILD_ONLINE' AND (@CurrentIsPartition = 0 OR @Version &gt;= 12) SET @CurrentCommand13 = @CurrentCommand13 + ', ONLINE = ON'
            IF @CurrentAction = 'INDEX_REBUILD_OFFLINE' AND (@CurrentIsPartition = 0 OR @Version &gt;= 12) SET @CurrentCommand13 = @CurrentCommand13 + ', ONLINE = OFF'
            IF @CurrentMaxDOP IS NOT NULL SET @CurrentCommand13 = @CurrentCommand13 + ', MAXDOP = ' + CAST(@CurrentMaxDOP AS nvarchar)
            IF @FillFactor IS NOT NULL AND @CurrentIsPartition = 0 SET @CurrentCommand13 = @CurrentCommand13 + ', FILLFACTOR = ' + CAST(@FillFactor AS nvarchar)
            IF @PadIndex = 'Y' AND @CurrentIsPartition = 0 SET @CurrentCommand13 = @CurrentCommand13 + ', PAD_INDEX = ON'
            IF @PadIndex = 'N' AND @CurrentIsPartition = 0 SET @CurrentCommand13 = @CurrentCommand13 + ', PAD_INDEX = OFF'
            SET @CurrentCommand13 = @CurrentCommand13 + ')'
          END

          IF @CurrentAction IN('INDEX_REORGANIZE')
          BEGIN
            SET @CurrentCommand13 = @CurrentCommand13 + ' REORGANIZE'
            IF @CurrentIsPartition = 1 SET @CurrentCommand13 = @CurrentCommand13 + ' PARTITION = ' + CAST(@CurrentPartitionNumber AS nvarchar)
            SET @CurrentCommand13 = @CurrentCommand13 + ' WITH ('
            IF @LOBCompaction = 'Y' SET @CurrentCommand13 = @CurrentCommand13 + 'LOB_COMPACTION = ON'
            IF @LOBCompaction = 'N' SET @CurrentCommand13 = @CurrentCommand13 + 'LOB_COMPACTION = OFF'
            SET @CurrentCommand13 = @CurrentCommand13 + ')'
          END

          EXECUTE @CurrentCommandOutput13 = [dbo].[CommandExecute] @Command = @CurrentCommand13, @CommandType = @CurrentCommandType13, @Mode = 2, @Comment = @CurrentComment, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @IndexName = @CurrentIndexName, @IndexType = @CurrentIndexType, @PartitionNumber = @CurrentPartitionNumber, @ExtendedInfo = @CurrentExtendedInfo, @LogToTable = @LogToTable, @Execute = @Execute
          SET @Error = @@ERROR
          IF @Error &lt;&gt; 0 SET @CurrentCommandOutput13 = @Error
          IF @CurrentCommandOutput13 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput13

          IF @Delay &gt; 0
          BEGIN
            SET @CurrentDelay = DATEADD(ss,@Delay,'1900-01-01')
            WAITFOR DELAY @CurrentDelay
          END
        END

        IF @CurrentStatisticsID IS NOT NULL AND @CurrentUpdateStatistics = 'Y' AND (GETDATE() &lt; DATEADD(ss,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)
        BEGIN
          SET @CurrentCommandType14 = 'UPDATE_STATISTICS'

          SET @CurrentCommand14 = ''
          IF @LockTimeout IS NOT NULL SET @CurrentCommand14 = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '
          SET @CurrentCommand14 = @CurrentCommand14 + 'UPDATE STATISTICS ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' ' + QUOTENAME(@CurrentStatisticsName)
          IF @StatisticsSample IS NOT NULL OR @StatisticsResample = 'Y' OR @CurrentNoRecompute = 1 SET @CurrentCommand14 = @CurrentCommand14 + ' WITH'
          IF @StatisticsSample = 100 SET @CurrentCommand14 = @CurrentCommand14 + ' FULLSCAN'
          IF @StatisticsSample IS NOT NULL AND @StatisticsSample &lt;&gt; 100 SET @CurrentCommand14 = @CurrentCommand14 + ' SAMPLE ' + CAST(@StatisticsSample AS nvarchar) + ' PERCENT'
          IF @StatisticsResample = 'Y' SET @CurrentCommand14 = @CurrentCommand14 + ' RESAMPLE'
          IF (@StatisticsSample IS NOT NULL OR @StatisticsResample = 'Y') AND @CurrentNoRecompute = 1 SET @CurrentCommand14 = @CurrentCommand14 + ','
          IF @CurrentNoRecompute = 1 SET @CurrentCommand14 = @CurrentCommand14 + ' NORECOMPUTE'

          EXECUTE @CurrentCommandOutput14 = [dbo].[CommandExecute] @Command = @CurrentCommand14, @CommandType = @CurrentCommandType14, @Mode = 2, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @IndexName = @CurrentIndexName, @IndexType = @CurrentIndexType, @StatisticsName = @CurrentStatisticsName, @LogToTable = @LogToTable, @Execute = @Execute
          SET @Error = @@ERROR
          IF @Error &lt;&gt; 0 SET @CurrentCommandOutput14 = @Error
          IF @CurrentCommandOutput14 &lt;&gt; 0 SET @ReturnCode = @CurrentCommandOutput14
        END

        NoAction:

        -- Update that the index is completed
        UPDATE @tmpIndexesStatistics
        SET Completed = 1
        WHERE Selected = 1
        AND Completed = 0
        AND ID = @CurrentIxID

        -- Clear variables
        SET @CurrentCommand02 = NULL
        SET @CurrentCommand03 = NULL
        SET @CurrentCommand04 = NULL
        SET @CurrentCommand05 = NULL
        SET @CurrentCommand06 = NULL
        SET @CurrentCommand07 = NULL
        SET @CurrentCommand08 = NULL
        SET @CurrentCommand09 = NULL
        SET @CurrentCommand10 = NULL
        SET @CurrentCommand11 = NULL
        SET @CurrentCommand12 = NULL
        SET @CurrentCommand13 = NULL
        SET @CurrentCommand14 = NULL

        SET @CurrentCommandOutput13 = NULL
        SET @CurrentCommandOutput14 = NULL

        SET @CurrentCommandType13 = NULL
        SET @CurrentCommandType14 = NULL

        SET @CurrentIxID = NULL
        SET @CurrentSchemaID = NULL
        SET @CurrentSchemaName = NULL
        SET @CurrentObjectID = NULL
        SET @CurrentObjectName = NULL
        SET @CurrentObjectType = NULL
        SET @CurrentIndexID = NULL
        SET @CurrentIndexName = NULL
        SET @CurrentIndexType = NULL
        SET @CurrentStatisticsID = NULL
        SET @CurrentStatisticsName = NULL
        SET @CurrentPartitionID = NULL
        SET @CurrentPartitionNumber = NULL
        SET @CurrentPartitionCount = NULL
        SET @CurrentIsPartition = NULL
        SET @CurrentIndexExists = NULL
        SET @CurrentStatisticsExists = NULL
        SET @CurrentIsImageText = NULL
        SET @CurrentIsNewLOB = NULL
        SET @CurrentIsFileStream = NULL
        SET @CurrentIsColumnStore = NULL
        SET @CurrentAllowPageLocks = NULL
        SET @CurrentNoRecompute = NULL
        SET @CurrentStatisticsModified = NULL
        SET @CurrentOnReadOnlyFileGroup = NULL
        SET @CurrentFragmentationLevel = NULL
        SET @CurrentPageCount = NULL
        SET @CurrentFragmentationGroup = NULL
        SET @CurrentAction = NULL
        SET @CurrentMaxDOP = NULL
        SET @CurrentUpdateStatistics = NULL
        SET @CurrentComment = NULL
        SET @CurrentExtendedInfo = NULL

        DELETE FROM @CurrentActionsAllowed

      END

    END

    -- Update that the database is completed
    UPDATE @tmpDatabases
    SET Completed = 1
    WHERE Selected = 1
    AND Completed = 0
    AND ID = @CurrentDBID

    -- Clear variables
    SET @CurrentDBID = NULL
    SET @CurrentDatabaseID = NULL
    SET @CurrentDatabaseName = NULL
    SET @CurrentIsDatabaseAccessible = NULL
    SET @CurrentAvailabilityGroup = NULL
    SET @CurrentAvailabilityGroupRole = NULL
    SET @CurrentDatabaseMirroringRole = NULL
    SET @CurrentLogShippingRole = NULL

    SET @CurrentCommand01 = NULL

    DELETE FROM @tmpIndexesStatistics

  END

  ----------------------------------------------------------------------------------------------------
  --// Log completing information                                                                 //--
  ----------------------------------------------------------------------------------------------------

  Logging:
  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,GETDATE(),120)
  SET @EndMessage = REPLACE(@EndMessage,'%','%%')
  RAISERROR(@EndMessage,10,1) WITH NOWAIT

  IF @ReturnCode &lt;&gt; 0
  BEGIN
    RETURN @ReturnCode
  END

  ----------------------------------------------------------------------------------------------------

END
GO

IF (SELECT CAST([Value] AS int) FROM #Config WHERE Name = 'Error') = 0
AND (SELECT [Value] FROM #Config WHERE Name = 'CreateJobs') = 'Y'
AND SERVERPROPERTY('EngineEdition') &lt;&gt; 4
BEGIN

  DECLARE @BackupDirectory nvarchar(max)
  DECLARE @OutputFileDirectory nvarchar(max)
  DECLARE @LogToTable nvarchar(max)
  DECLARE @DatabaseName nvarchar(max)

  DECLARE @Version numeric(18,10)

  DECLARE @TokenServer nvarchar(max)
  DECLARE @TokenJobID nvarchar(max)
  DECLARE @TokenStepID nvarchar(max)
  DECLARE @TokenDate nvarchar(max)
  DECLARE @TokenTime nvarchar(max)

  DECLARE @JobDescription nvarchar(max)
  DECLARE @JobCategory nvarchar(max)
  DECLARE @JobOwner nvarchar(max)

  DECLARE @JobName01 nvarchar(max)
  DECLARE @JobName02 nvarchar(max)
  DECLARE @JobName03 nvarchar(max)
  DECLARE @JobName04 nvarchar(max)
  DECLARE @JobName05 nvarchar(max)
  DECLARE @JobName06 nvarchar(max)
  DECLARE @JobName07 nvarchar(max)
  DECLARE @JobName08 nvarchar(max)
  DECLARE @JobName09 nvarchar(max)
  DECLARE @JobName10 nvarchar(max)
  DECLARE @JobName11 nvarchar(max)

  DECLARE @JobCommand01 nvarchar(max)
  DECLARE @JobCommand02 nvarchar(max)
  DECLARE @JobCommand03 nvarchar(max)
  DECLARE @JobCommand04 nvarchar(max)
  DECLARE @JobCommand05 nvarchar(max)
  DECLARE @JobCommand06 nvarchar(max)
  DECLARE @JobCommand07 nvarchar(max)
  DECLARE @JobCommand08 nvarchar(max)
  DECLARE @JobCommand09 nvarchar(max)
  DECLARE @JobCommand10 nvarchar(max)
  DECLARE @JobCommand11 nvarchar(max)

  DECLARE @OutputFile01 nvarchar(max)
  DECLARE @OutputFile02 nvarchar(max)
  DECLARE @OutputFile03 nvarchar(max)
  DECLARE @OutputFile04 nvarchar(max)
  DECLARE @OutputFile05 nvarchar(max)
  DECLARE @OutputFile06 nvarchar(max)
  DECLARE @OutputFile07 nvarchar(max)
  DECLARE @OutputFile08 nvarchar(max)
  DECLARE @OutputFile09 nvarchar(max)
  DECLARE @OutputFile10 nvarchar(max)
  DECLARE @OutputFile11 nvarchar(max)

  SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))

  IF @Version &gt;= 9.002047
  BEGIN
    SET @TokenServer = '$' + '(ESCAPE_SQUOTE(SRVR))'
    SET @TokenJobID = '$' + '(ESCAPE_SQUOTE(JOBID))'
    SET @TokenStepID = '$' + '(ESCAPE_SQUOTE(STEPID))'
    SET @TokenDate = '$' + '(ESCAPE_SQUOTE(STRTDT))'
    SET @TokenTime = '$' + '(ESCAPE_SQUOTE(STRTTM))'
  END
  ELSE
  BEGIN
    SET @TokenServer = '$' + '(SRVR)'
    SET @TokenJobID = '$' + '(JOBID)'
    SET @TokenStepID = '$' + '(STEPID)'
    SET @TokenDate = '$' + '(STRTDT)'
    SET @TokenTime = '$' + '(STRTTM)'
  END

  SELECT @BackupDirectory = Value
  FROM #Config
  WHERE [Name] = 'BackupDirectory'

  SELECT @OutputFileDirectory = Value
  FROM #Config
  WHERE [Name] = 'OutputFileDirectory'

  SELECT @LogToTable = Value
  FROM #Config
  WHERE [Name] = 'LogToTable'

  SELECT @DatabaseName = Value
  FROM #Config
  WHERE [Name] = 'DatabaseName'

  SET @JobDescription = 'Source: http://ola.hallengren.com'
  SET @JobCategory = 'Database Maintenance'
  SET @JobOwner = SUSER_SNAME(0x01)

  SET @JobName01 = 'DatabaseBackup - SYSTEM_DATABASES - FULL'
  SET @JobCommand01 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''SYSTEM_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''FULL'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile01 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile01) &gt; 200 SET @OutputFile01 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile01) &gt; 200 SET @OutputFile01 = NULL

  SET @JobName02 = 'DatabaseBackup - USER_DATABASES - DIFF'
  SET @JobCommand02 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''USER_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''DIFF'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile02 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile02) &gt; 200 SET @OutputFile02 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile02) &gt; 200 SET @OutputFile02 = NULL

  SET @JobName03 = 'DatabaseBackup - USER_DATABASES - FULL'
  SET @JobCommand03 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''USER_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''FULL'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile03 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile03) &gt; 200 SET @OutputFile03 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile03) &gt; 200 SET @OutputFile03 = NULL

  SET @JobName04 = 'DatabaseBackup - USER_DATABASES - LOG'
  SET @JobCommand04 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseBackup] @Databases = ''USER_DATABASES'', @Directory = ' + ISNULL('N''' + REPLACE(@BackupDirectory,'''','''''') + '''','NULL') + ', @BackupType = ''LOG'', @Verify = ''Y'', @CleanupTime = 24, @CheckSum = ''Y''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile04 = @OutputFileDirectory + '\' + 'DatabaseBackup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile04) &gt; 200 SET @OutputFile04 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile04) &gt; 200 SET @OutputFile04 = NULL

  SET @JobName05 = 'DatabaseIntegrityCheck - SYSTEM_DATABASES'
  SET @JobCommand05 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseIntegrityCheck] @Databases = ''SYSTEM_DATABASES''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile05 = @OutputFileDirectory + '\' + 'DatabaseIntegrityCheck_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile05) &gt; 200 SET @OutputFile05 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile05) &gt; 200 SET @OutputFile05 = NULL

  SET @JobName06 = 'DatabaseIntegrityCheck - USER_DATABASES'
  SET @JobCommand06 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[DatabaseIntegrityCheck] @Databases = ''USER_DATABASES''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile06 = @OutputFileDirectory + '\' + 'DatabaseIntegrityCheck_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile06) &gt; 200 SET @OutputFile06 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile06) &gt; 200 SET @OutputFile06 = NULL

  SET @JobName07 = 'IndexOptimize - USER_DATABASES'
  SET @JobCommand07 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "EXECUTE [dbo].[IndexOptimize] @Databases = ''USER_DATABASES''' + CASE WHEN @LogToTable = 'Y' THEN ', @LogToTable = ''Y''' ELSE '' END + '" -b'
  SET @OutputFile07 = @OutputFileDirectory + '\' + 'IndexOptimize_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile07) &gt; 200 SET @OutputFile07 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile07) &gt; 200 SET @OutputFile07 = NULL

  SET @JobName08 = 'sp_delete_backuphistory'
  SET @JobCommand08 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + 'msdb' + ' -Q "DECLARE @CleanupDate datetime SET @CleanupDate = DATEADD(dd,-30,GETDATE()) EXECUTE dbo.sp_delete_backuphistory @oldest_date = @CleanupDate" -b'
  SET @OutputFile08 = @OutputFileDirectory + '\' + 'sp_delete_backuphistory_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile08) &gt; 200 SET @OutputFile08 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile08) &gt; 200 SET @OutputFile08 = NULL

  SET @JobName09 = 'sp_purge_jobhistory'
  SET @JobCommand09 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + 'msdb' + ' -Q "DECLARE @CleanupDate datetime SET @CleanupDate = DATEADD(dd,-30,GETDATE()) EXECUTE dbo.sp_purge_jobhistory @oldest_date = @CleanupDate" -b'
  SET @OutputFile09 = @OutputFileDirectory + '\' + 'sp_purge_jobhistory_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile09) &gt; 200 SET @OutputFile09 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile09) &gt; 200 SET @OutputFile09 = NULL

  SET @JobName10 = 'Output File Cleanup'
  SET @JobCommand10 = 'cmd /q /c "For /F "tokens=1 delims=" %v In (''ForFiles /P "' + @OutputFileDirectory + '" /m *_*_*_*.txt /d -30 2^&gt;^&amp;1'') do if EXIST "' + @OutputFileDirectory + '"\%v echo del "' + @OutputFileDirectory + '"\%v&amp; del "' + @OutputFileDirectory + '"\%v"'
  SET @OutputFile10 = @OutputFileDirectory + '\' + 'OutputFileCleanup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile10) &gt; 200 SET @OutputFile10 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile10) &gt; 200 SET @OutputFile10 = NULL

  SET @JobName11 = 'CommandLog Cleanup'
  SET @JobCommand11 = 'sqlcmd -E -S ' + @TokenServer + ' -d ' + @DatabaseName + ' -Q "DELETE FROM [dbo].[CommandLog] WHERE StartTime &lt; DATEADD(dd,-30,GETDATE())" -b'
  SET @OutputFile11 = @OutputFileDirectory + '\' + 'CommandLogCleanup_' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile11) &gt; 200 SET @OutputFile11 = @OutputFileDirectory + '\' + @TokenJobID + '_' + @TokenStepID + '_' + @TokenDate + '_' + @TokenTime + '.txt'
  IF LEN(@OutputFile11) &gt; 200 SET @OutputFile11 = NULL

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName01)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName01, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName01, @step_name = @JobName01, @subsystem = 'CMDEXEC', @command = @JobCommand01, @output_file_name = @OutputFile01
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName01
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName02)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName02, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName02, @step_name = @JobName02, @subsystem = 'CMDEXEC', @command = @JobCommand02, @output_file_name = @OutputFile02
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName02
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName03)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName03, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName03, @step_name = @JobName03, @subsystem = 'CMDEXEC', @command = @JobCommand03, @output_file_name = @OutputFile03
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName03
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName04)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName04, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName04, @step_name = @JobName04, @subsystem = 'CMDEXEC', @command = @JobCommand04, @output_file_name = @OutputFile04
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName04
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName05)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName05, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName05, @step_name = @JobName05, @subsystem = 'CMDEXEC', @command = @JobCommand05, @output_file_name = @OutputFile05
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName05
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName06)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName06, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName06, @step_name = @JobName06, @subsystem = 'CMDEXEC', @command = @JobCommand06, @output_file_name = @OutputFile06
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName06
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName07)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName07, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName07, @step_name = @JobName07, @subsystem = 'CMDEXEC', @command = @JobCommand07, @output_file_name = @OutputFile07
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName07
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName08)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName08, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName08, @step_name = @JobName08, @subsystem = 'CMDEXEC', @command = @JobCommand08, @output_file_name = @OutputFile08
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName08
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName09)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName09, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName09, @step_name = @JobName09, @subsystem = 'CMDEXEC', @command = @JobCommand09, @output_file_name = @OutputFile09
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName09
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName10)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName10, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName10, @step_name = @JobName10, @subsystem = 'CMDEXEC', @command = @JobCommand10, @output_file_name = @OutputFile10
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName10
  END

  IF NOT EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE [name] = @JobName11)
  BEGIN
    EXECUTE msdb.dbo.sp_add_job @job_name = @JobName11, @description = @JobDescription, @category_name = @JobCategory, @owner_login_name = @JobOwner
    EXECUTE msdb.dbo.sp_add_jobstep @job_name = @JobName11, @step_name = @JobName11, @subsystem = 'CMDEXEC', @command = @JobCommand11, @output_file_name = @OutputFile11
    EXECUTE msdb.dbo.sp_add_jobserver @job_name = @JobName11
  END

END
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>apostrophe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>apostrophe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--to set the string equal to "Driver's License", use a double apostrophe

--SSRS puts a double apostrophe where it finds a single apostrophe
-- So then in the SP you have to replace the double qoute with a single qoute
DECLARE @LICENSE_TYPE nvarchar(100)		-- FROM: prj_0006_SP_0012_LIST_LicenseTypes 
SET @LICENSE_TYPE =  'Driver''s License Standard'  

PRINT '1) before @LICENSE_TYPE: [' + coalesce(@LICENSE_TYPE, '{NULL}')	 + ']' 
SET @LICENSE_TYPE = Replace(@LICENSE_TYPE, '', ')			--QUOTENAME(@LICENSE_TYPE, '')  --QUOTENAME(@LICENSE_TYPE, ''''')	
PRINT '2) after @LICENSE_TYPE: [' + coalesce(@LICENSE_TYPE, '{NULL}')	 + ']'





--==============================================================================================
--1] added a replace function like this in TSQL?:  

REPLACE(@SearchString, '''', '')

-- it changed double apostrophe to single apostrophe and then the data was returned properly.

---------

--built-in SQL functions (like replace) is that they too require you to double up your single quotes.
--So to replace ' with '' in code you'd do this:

Replace(@strip, '''', '''''')

--SSRS
--==============================================================================================

--2] change the expression for the function in SSRS:

--http://www.dbafire.com/2016/02/16/ssrs-report-is-double-escaping-parameters-apostrophies/
--	Feed it a string like
--	‘Our DBA’s forever’ and when it passed that as a parameter it would end up like this:
--	‘Our DBA””s forever’
--	Somehow SSRS itself was taking the string being passed through and deciding that it should add not one, but three extra apostrophes.


-- By default you will see this in the Parameters section of the dataset:
--Double-Click on the DataSet, that has the parameter in question (in the DataSets folder, of the Report Data panel)
--	=&gt; properties =&gt; Parameters {in left panel} =&gt; {then click the expression button to the right of the parameter) 
-- and you should see something like this: 

=Parameters!SearchString.Value

--change it to the following expression:

=Join(Parameters!SearchString.Value, ",")

-----------------------

/*
 Say you're querying the database from a .NET application, then you'd use the SqlParameter class 
 to feed the SqlCommand parameters for the query and all of this single quote business 
 will be taken care of automatically. 
 This is usually the preferred method as SQL parameters will also help prevent SQL injection attacks.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MSOffice_General</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Normal_andPersonal_____Office_2016_Office_365</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MSOffice_General</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Normal_andPersonal_____Office_2016_Office_365</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>3/17/2016 presently useing the following folder at work
C:\Users\glenng\AppData\Roaming\Microsoft\Excel\XLSTART</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_HelloWorld___HomeController_and_Viewer_and_Controller_MINIMUM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_HelloWorld___HomeController_and_Viewer_and_Controller_MINIMUM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!--

Right click on the 'Models' folder =&gt; Add =&gt; Class =&gt; name it "HomeModel.cs"  {the suffix 'Model' is by his convention}

  --&gt;
  
  
 
.............Model: HomeModel.cs ................................


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace HelloWorld.Models
	{
	public class HomeModel
		{
		public string Message3 { get; set; }			// &lt;== Added this property


		}
	}
	
.............Index: Index.cshtml ................................

	
@model HelloWorld.Models.HomeModel			
@{
    ViewBag.Title = "Index";
}

&lt;!-- Note the (at)model Attribute at the top. like a Page directive, with intellisense.  --&gt;

&lt;h2&gt;@Model.Message3&lt;/h2&gt;			//&lt;=== can see this property in Intellisense


..............Controller: HomeController.cs ........................

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Web;
using System.Web.Mvc;
using HelloWorld.Models;	//&lt;== in order to use and see class: HomeModel

namespace HelloWorld.Controllers
	{
	public class HomeController : Controller
		{


		public ActionResult Index()
		{
			var model = new HomeModel();
			model.Message3 = "Hello, World!";


			return View(model);		//pass the 'model' into the view
			}

		}
	}



................Route: RouteConfig.cs ................................

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace HelloWorld
	{
	public class RouteConfig
		{
		public static void RegisterRoutes(RouteCollection routes)
			{
			routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
			//			routes.MapPageRoute(routeName: "Home", routeUrl: "", defaults: new { controller = "Home", action = "Index" });
			routes.MapRoute(name: "Home", url: "", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional });
			//This says that I need to create a controller called "Home" with an action called "Index"

			//routes.MapRoute(
			//    name: "Default",
			//    url: "{controller}/{action}/{id}",
			//    defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
			//);
			}
		}
	}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_HelloWorld___HomeController_and_Viewer_MINIMUM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_HelloWorld___HomeController_and_Viewer_MINIMUM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- To create the default file:

1] Right click on the Controllers folder {in the Solution Explorer}
=&gt; Add =&gt; Controller... =&gt; Add Controller {window}

	Controller Name: HomeController {Must leave the suffix: Controller}
	Leave defaults {Empty MVC Controller} and click [Add]

2] Now create the 'viewer' 
	(Before doing this the 'Views' folder just has the Web.config file in it)

	Right click on the 'Index' method {in the default, empty Controller file}
	=&gt; Add View =&gt; Add View {window}
		{Leave defaults}
		View name: Index
		View Engine: Razor (CSHTML)
		[ ] Create a strongly-typed view
		[ ] Create a partial view
		[x] Use a layout or master page:
			(leave empty if it set in a Razor _viewstart file)
		Greyed out: ContentPlaceHolder ID: MainContent		
................
Message: Visual Studio encountered an exception. This may be caused by an extension
You can get more information by running the application with the /log pareameter on the command line, and then examining
the file: 'C:\Users\ggarson\AppData\Roaming\Microsoft\VisualStudio\10.0\ActivityLog.xml'
................

Now it has created a file: Index.cshtml, in the folder: Views\Home\

After this the running without Debug produces a page with the "Index" on it. YEAHH!
--&gt;

@{
    ViewBag.Title = "Index";
}

&lt;h2&gt;Index&lt;/h2&gt;
&lt;!-- 
Then edit the Controller and you will see the data in the viewer:
--&gt;

@{
    ViewBag.Title = "Index";
}


&lt;!--

This is the default file (HomeController.cs) created by the wizard

--&gt;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace HelloWorld.Controllers
{
    public class HomeController : Controller
    {
        //
        // GET: /Home/

        public ActionResult Index()
        {
            return View();
        }

    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_HelloWorld_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_HelloWorld_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1_HelloWorld_about is just using the Controller and a view



MVC4 Prerequisite: http://www.asp.net/mvc/mvc4 {stoped at 6:27 in video)

To create project in VS 2010:
File=&gt; New =&gt; Project =&gt; New Project {window}
	Visual C# =&gt; 'Web ASP.NET MVC 4 Web Application' =&gt; OK =&gt; New ASP.NET MVC 4 Project {window}
		Template: Empty
		View Engine: Razor
		[ok]
		
Creates project with these folders:
	Properties
	References
	App_Data
	App_Start
	Controllers
	Models
	Views
	...
	Miscllaneous Files
	
and these files in the root:
	Global.asax
	packages.config
	Web.config
	
Note the demo video: http://www.youtube.com/watch?v=rejv7S8SYjw
had more folders by default: 
	Content
	Scripts
and it did not have folder: App_Start, nor: Miscllaneous Files	

..........
If I Ctrl-F5 to start without debugging I get a HTTP 404 page</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>3_StronglyTypedModel__CONTROL__HomeController.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>3_StronglyTypedModel__CONTROL__HomeController.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using OdeToFood.Models;     //Note inclusion of NameSpace
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace OdeToFood.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            ViewBag.Message = "Modify this template to jump-start your ASP.NET MVC application.";

            return View();
        }

        public ActionResult About()
        {
            //build the model
            var model = new AboutModel();
            //Normally you would populate the record from either a Database, or User Interaction
            model.Name = "Scott";
            model.Location = "Maryland, USA";

            // return a view using naming Conventions
            //  from the 'Views' folder, 
            //      inside the 'Home' subfolder {b/c this is inside the 'HomeController', 
            //          specifically the 'About.cshtml' view file {b/c this is inside the 'About' Action}
            //              Note that it feeds the method the input parm: 'model', which is specified at the top of that file
            return View(model);
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>4_Routing__HomeController.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>4_Routing__HomeController.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using OdeToFood.Models;     //Note inclusion of NameSpace
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace OdeToFood.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            var controller = RouteData.Values["controller"];
            var action = RouteData.Values["action"];
            var id = RouteData.Values["id"];
            var message = string.Format("Parameter: {0}, Action: {1}, ID: {2}", controller, action, id);



            ViewBag.Message = message;

            return View();
        }

        public ActionResult About()
        {
            //build the model
            var model = new AboutModel();
            //Normally you would populate the record from either a Database, or User Interaction
            model.Name = "Scott";
            model.Location = "Maryland, USA";

            // return a view using naming Conventions
            //  from the 'Views' folder, 
            //      inside the 'Home' subfolder {b/c this is inside the 'HomeController', 
            //          specifically the 'About.cshtml' view file {b/c this is inside the 'About' Action}
            //              Note that it feeds the method the input parm: 'model', which is specified at the top of that file
            return View(model);
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>4_Routing__RouteConfig.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>4_Routing__RouteConfig.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

//This file lives in the 'App_Start' folder

namespace OdeToFood
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            // this prevents routing requests to real files on the file system, rather it lets them through to the file
            // so if there were a requrest for "/Content/site.css" which is a real file, then the routing engine won't 
            //  interfere with that request.
            //So routes are for files that don't exist.
            // However there are some virtual files (e.g. with *.axd) which the server knows how to server up to the request
            //      examples of this are tracing files
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("Cuisine",      //Friendly name for the route
                "cuisine/{name}",           //Pattern: Url must start w/ "cuisine", then a parm called "name"
                new { Controller = "Cuisine", action = "Search", name = "" }); // a new anonymously typed object, with the three properties
            //so if a URL comes in for "/cuisine" then it will go to the "Cuisine" controller
            
            //Since this route provides defaults for each part of the URL
            //  it will even work when you don't specify anything except the web site
            //So you need to place more restrictive routes in front of this one, i.e. like Try/Catch, the first match wins
            routes.MapRoute(
                name: "Default",                    //Friendly name for the route
                url: "{controller}/{action}/{id}",  //Pattern for the URL's route
                defaults: new { controller = "Home", //Defaults to use if not found in the URL
                                action = "Index", 
                                id = UrlParameter.Optional }
            // if a request comes in for "/home/index" then it will get sent to the "Home" controller and the action: "Index"
            );
        }
    }
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_General</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>about_MVC_General</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_General</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>about_MVC_General</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_MVC_General

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
2010:	start from the internet version of the MVC 4 (in VS 2010)
-----

Using VS 2013 Express:
        -----
File =&gt; New Project (Cntrl-Shft-n) =&gt; ASP.NET Web Application  (.NET Framework 4.5)
Select a Template: 
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Conventions:
===========
- Controllers are named such that they end with "Controller" (e.g ProductController)
- Controllers live in folder: Controllers
- Views live in folder: Views
- Views named according to controller (e.g. the view for the Product controller would live in Views/Product)
- Each view is named for an Action in the Controller
	--So for a an 'Edit' action it would be in: Views/Product/Edit.cshtml 

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
The default page for a website, without specifying a page, is Views\Home\Index.cshtml
The html file from that page is placed between other code when it is sent to the user:

	.layout - top
	Index.cshtml				{this is placed where '@RenderBody()' shows up in the markup}
	.layout - footer
 
 The 'layout' is located in: Views\Shared\_Layout.cshtml
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Model
====
This is the Data, and Data Classes

View
====
This is the HTML, i.e. what is being presented to the viewer, like a screen to present to the viewer
The 'view' on the server, is not the same as the 'view' on the browser

Controller
==========
takes the data from the 'model', and feeds it appropriately to the 'view'
or maps the data to the view
Tells th View what to display, can but should not control the HTML


To add a page in the website, just add an ActionResult 
	(e.g. UnderConstruction) to HomeController.cs, with 'return View():' in it.
Then right-click on the name of the ActionResult (e.g. UnderConstruction) =&gt; Add View
'ViewBag' allows us to pass data between the 'controller' and a 'view'

Two controllers are created by default:
a) HomeController.cs
		The default actions that return a view:
			ActionResult Index()
			ActionResult About()
			ActionResult Contact()

b) AccountController.cs


The SERVER takes the 'model', 'view' and the 'controller, combine their info, and create an HTML page to send to the browser
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_Partial_VIEWs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name> Create_a_Partial_View_using_@HTML.Partial()</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_Partial_VIEWs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name> Create_a_Partial_View_using_@HTML.Partial()</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- 

This demonstrates use of: @Html.Partial(), 
which is limited to using just the model that is already on that page where you want to invoke it.

In this example you start with this page:
=================================================================================--&gt;

@model IEnumerable&lt;OdeToFood.Models.RestaurantReview&gt;
&lt;!-- File: Index.cshtml located in: Views/Reviews/ --&gt;
&lt;!-- Note that the model is strongly typed on IEnumerable of the RestaurantReview record class --&gt;

@{
    ViewBag.Title = "Index";
}

@section featured{

    We are showing the latest @Model.Count() reviews

}

&lt;h2&gt;The Final Version of the Reviews&lt;/h2&gt;



@foreach (var item in Model)
{
    
   @Html.Partial("_Review", item)
    
}

&lt;h2&gt;A preliminary Version of the Reviews&lt;/h2&gt;

@foreach (var item in Model)
{
    &lt;div class="review"&gt;						&lt;!-- START - Want to turn this into a Partial View --&gt;
        &lt;h4&gt;@item.Name&lt;/h4&gt;
        &lt;span&gt; @item.Rating&lt;/span&gt;
        &lt;p&gt;@item.City, @item.Country&lt;/p&gt;

    &lt;/div&gt;										&lt;!-- END - Want to turn this into a Partial View --&gt;

}

&lt;p&gt;
    @Html.ActionLink("Create New", "Create")  
&lt;/p&gt;



&lt;!-- ===================================================================================
Suppose you have this piece of code, and you want to re-use the part inside the foreach loop:
============================================================================================================--&gt;


@foreach (var item in Model)
{
    &lt;div class="review"&gt;
        &lt;h4&gt;@item.Name&lt;/h4&gt;
        &lt;span&gt; @item.Rating&lt;/span&gt;
        &lt;p&gt;@item.City, @item.Country&lt;/p&gt;

    &lt;/div&gt;
}

&lt;!--============================================================================================================
To create a Partial View
1] right click on one of the sub-folders of the Views Folder (e.g. the 'Reviews' sub-folder)
	=&gt; Add =&gt; View =&gt; Add View {Wizard}
		View Name: _Review								{note use of "_" prefix)
		View Engine: Razor
		[x] Create a strongly-typed view				{in this example we are using fields fromn that record object}
			(e.g.) RestaurantReview (OdeToFood.Models)	{This causes it to put an "@model OdeToFood.Models.RestaurantReview at the top line of the file it creates}
		Scaffold Template: Empty
		[x] Create as a Partial View					{This greys out the 'use a layout or master page' and tells the application not to add default header/footer}
		[Add]
		
	NOTE: the partial view is only available to the views inside the same folder as itself, if you want it available
			anywhere in the application, then put it in the 'Shared' folder (under the 'Views' folder)	
		
	
2] Then copy and paste in the code that you want to be able to re-use in various VIEWs	
 ============================================================================================================--&gt;
 
     &lt;div class="review"&gt;
        &lt;h4&gt;@item.Name&lt;/h4&gt;
        &lt;span&gt; @item.Rating&lt;/span&gt;
        &lt;p&gt;@item.City, @item.Country&lt;/p&gt;

    &lt;/div&gt;

&lt;!--============================================================================================================
3] which gives you this in the Partial View file: _Review.cshtml
============================================================================================================--&gt;

@model OdeToFood.Models.RestaurantReview


&lt;div class="review"&gt;
    &lt;h4&gt;@item.Name&lt;/h4&gt;
    &lt;span&gt; @item.Rating&lt;/span&gt;
    &lt;p&gt;@item.City, @item.Country&lt;/p&gt;

&lt;/div&gt;
    
&lt;!-- ============================================================================================================
4] but now there is NO 'item' object, so it works to replace that with 'Model', which gives you this:
============================================================================================================--&gt;

@model OdeToFood.Models.RestaurantReview


    &lt;div class="review"&gt;
        &lt;h4&gt;@Model.Name&lt;/h4&gt;
        &lt;span&gt; @Model.Rating&lt;/span&gt;
        &lt;p&gt;@Model.City, @Model.Country&lt;/p&gt;

    &lt;/div&gt;
 
&lt;!-- ============================================================================================================
5] Then where the code was originally, we can put:
	where 'item' is the 'object model' in otherwords the object that owns the properties being used in the view
============================================================================================================--&gt;

@Html.Partial("_Review", item)


&lt;!-- ============================================================================================================
Here is the final version of the original View, that uses the Partial View in the HTML Helper: "Partial"
============================================================================================================--&gt;

@model IEnumerable&lt;OdeToFood.Models.RestaurantReview&gt;
&lt;!-- File: Index.cshtml located in: Views/Reviews/ --&gt;
&lt;!-- Note that the model is strongly typed on IEnumerable of the RestaurantReview record class --&gt;
@{
    ViewBag.Title = "Index";
}

@section featured{

    We are showing the latest @Model.Count() reviews

}

&lt;h2&gt;The Final Version of the Reviews&lt;/h2&gt;



@foreach (var item in Model)
{

    @Html.Partial("_Review", item)

}

&lt;h2&gt;A preliminary Version of the Reviews&lt;/h2&gt;

@foreach (var item in Model)
{
    @:Review                    &lt;!-- This puts the litteral text 'Review' in front of each repeated &lt;div&gt; block--&gt;
    @Html.Partial("_Review",item)

}

&lt;p&gt;
    @Html.ActionLink("Create New", "Create")
&lt;/p&gt;
&lt;!--============================================================================================================ --&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_RAZOR</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Razor_Programming</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_RAZOR</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Razor_Programming</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This URL has a lot of great information
https://www.asp.net/web-pages/overview/getting-started/introducing-razor-syntax-c

1. You add code to a page using the @ character
==============================================
&lt;!-- Single statement blocks  --&gt;
@{ var total = 7; }
@{ var myMessage = "Hello World"; }

&lt;!-- Inline expressions --&gt;
&lt;p&gt;The value of your account is: @total &lt;/p&gt;
&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt;

&lt;!-- Multi-statement block --&gt;
@{
    var greeting = "Welcome to our site!";
    var weekDay = DateTime.Now.DayOfWeek;
    var greetingMessage = greeting + " Today is: " + weekDay;
}
&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;

2. You enclose code blocks in braces
=====================================
&lt;!-- Single statement block.  --&gt;
@{ var theMonth = DateTime.Now.Month; }
&lt;p&gt;The numeric value of the current month: @theMonth&lt;/p&gt;

&lt;!-- Multi-statement block. --&gt;
@{
    var outsideTemp = 79;
    var weatherMessage = "Hello, it is " + outsideTemp + " degrees.";
}
&lt;p&gt;Today's weather: @weatherMessage&lt;/p&gt;

3. Inside a block, you end each code statement with a semicolon
===============================================================
&lt;!-- Single-statement block --&gt;
@{ var theMonth = DateTime.Now.Month; }

&lt;!-- Multi-statement block --&gt;
@{
    var outsideTemp = 79;
    var weatherMessage = "Hello, it is " + outsideTemp + " degrees.";
}

&lt;!-- Inline expression, so no semicolon --&gt;
&lt;p&gt;Today's weather: @weatherMessage&lt;/p&gt;

4. You use variables to store values
====================================
&lt;!-- Storing a string --&gt;
@{ var welcomeMessage = "Welcome, new members!"; }
&lt;p&gt;@welcomeMessage&lt;/p&gt;

&lt;!-- Storing a date --&gt;
@{ var year = DateTime.Now.Year; }

&lt;!-- Displaying a variable --&gt;
&lt;p&gt;Welcome to our new members who joined in @year!&lt;/p&gt;

5. You enclose literal string values in double quotation marks
==============================================================
@{ var myString = "This is a string literal"; }

&lt;!-- if the string that you want to display contains a backslash character (\) 
or double quotation marks ( " ), 
use a verbatim string literal that's prefixed with the @ operator.  --&gt;
&lt;!-- Embedding a backslash in a string --&gt;
@{ var myFilePath = @"C:\MyFolder\"; }
&lt;p&gt;The path is: @myFilePath&lt;/p&gt;
&lt;!-- To embed double quotation marks, 
use a verbatim string literal and repeat the quotation marks: --&gt;

&lt;!-- Embedding double quotation marks in a string --&gt;
@{ var myQuote = @"The person said: ""Hello, today is Monday."""; }
&lt;p&gt;@myQuote&lt;/p&gt;

6. Code is case sensitive
===========================
@{
    var lastName = "Smith";
    var LastName = "Jones";
}


7. Much of your coding involves objects
==========================================
&lt;table border="1"&gt;
&lt;tr&gt;
    &lt;td&gt;Requested URL&lt;/td&gt;
    &lt;td&gt;Relative Path&lt;/td&gt;
    &lt;td&gt;Full Path&lt;/td&gt;
    &lt;td&gt;HTTP Request Type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;@Request.Url&lt;/td&gt;
    &lt;td&gt;@Request.FilePath&lt;/td&gt;
    &lt;td&gt;@Request.MapPath(Request.FilePath)&lt;/td&gt;
    &lt;td&gt;@Request.RequestType&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


8. You can write code that makes decisions
============================================
@{
   var result = "";
   if(IsPost)
   {
      result = "This page was posted using the Submit button.";
   }
   else
   {
      result = "This was the first request for this page.";
   }
}

&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;&lt;/title&gt;
    &lt;/head&gt;
&lt;body&gt;
&lt;form method="POST" action="" &gt;
  &lt;input type="Submit" name="Submit" value="Submit"/&gt;
  &lt;p&gt;@result&lt;/p&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;

Comments
==============

@*  A one-line code comment. *@

&lt;!-- Here is a comment within a code block: --&gt;

@{
    @* This is a comment. *@
    var theVar = 17;
} 
&lt;!-- Inside a code block, as an alternative to using Razor comment syntax, 
you can use the commenting syntax of the programming language you're using, 
such as C#:: --&gt;
@{
    // This is a comment.
    var myVar = 17;
    /* This is a multi-line comment
    that uses C# commenting syntax. */
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_VIEWs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>DEFAULT__ViewStart.cshtml</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_VIEWs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>DEFAULT__ViewStart.cshtml</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;!-- this tells your website which page to use as your master page, i.e. the layout view
	It is a Razor convention that anything in the file: "_ViewStart.cshtml"
	will execute before the view executes.
	
	
	This works in a hierarchy, so if the file (i.e. _ViewStart.chhtml) is located in the root of the 'Views' 
		folder, then it will start before all the views in that root folder, and it's subfolders

--&gt;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

&lt;!--
		
	HOWEVER, if you put a file named "_ViewStart.cshtml", in a sub-folder of the 'Views' folder
	called (for example) 'Whatever' and you modify that file as follows after this commented section,
	and create a file: "~/Views/Shared/_Layout2.cshtml"
	then views in that folder (i.e. 'Whhatever') will use the newly specified Layout file, and execute
	it before the views in the 'Whatever' folder are executed.

--&gt;

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
}


&lt;!-- if you just want to over-ride the layout file for a specific view, then 
	you can add the following Razor code block into the view, at the top of the page:
--&gt;
@{
    Layout = "~/Views/Shared/_Layout3.cshtml";
}

&lt;!--
	or if you want to turn of the layout page for a view you can use:
--&gt;

@{
    Layout = null;
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MVC_VIEWs</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>To_create_or_Add_a_View</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MVC_VIEWs</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>To_create_or_Add_a_View</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


VS 2013, update 4
=================

Right click on the 'Views' folder =&gt; Add =&gt; Folder
	and name it (this was for the previous updates, but for Update 4, it also creates the folder in Views)
	(e.g. for the HelloController, add a folder named "Hello")
Then right click the folder =&gt; Add =&gt; New Scaffolded Item =&gt; MVC 5 View
	{in previous updates there were many choices, e.g. "MVC 5 View - Empty without model")	
	In the next window you can choose a template (e.g. "Empty (without model)"
	leave [x] Use a layout page and name the View: "Index"

This is the code that it puts in the page:
------------------------------------------------
@{
    ViewBag.Title = "Index";
}

&lt;h2&gt;Index&lt;/h2&gt;
------------------------------------------------
&lt;!-- when we start the app and you browse to --&gt;
http://localhost:63660/Hello

&lt;!--Then it shows the page --&gt;



------------------------------------------------
The controller has this:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace gigTEST.Controllers
{
    public class HelloController : Controller
    {
        // GET: Hello
        public ActionResult Index()
        {
            return View();
        }

    }


}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Change_WiFi_Password</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Change_WiFi_Password</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#'Though you can’t actually make changes to the network profiles themselves, 
#'    you can export a desired profile, 
#'    make changes to the XML file, 
#'    and then import the profile back onto the same machine or another one.

'Export a wireless network profile: 
netsh wlan export profile name=[profile name]

'e.g. Export profile of Remote machine
psexec \\lt-103368 -u "administrator" -p "JPHSA@Work" netsh wlan export profile name="JPHSA" folder="\\win10vm\All_Share\WiFi\" key=clear


'Delete a wireless profile: 
netsh wlan delete profile name=[profile name]

'Import a network profile:
netsh wlan add profile filename=[path_and_filename.xml] interface=[interface_name]
---------------------------------------------------------------------------------
https://stackoverflow.com/questions/35232162/add-wifi-profile-with-password-in-windows-programmatically


#'I found a way to add a wifi profile.
#'
#'At first you export an existing wifi profile:
#'
&gt; netsh wlan export profile name="WifiNetwork" folder="C:\path\" key=clear
#'Than you get a XML file with the following style:


&lt;?xml version="1.0"?&gt;
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
&lt;name&gt;WifiNetwork&lt;/name&gt;
&lt;SSIDConfig&gt;
    &lt;SSID&gt;
        &lt;hex&gt;123456789ABCDEF&lt;/hex&gt;
        &lt;name&gt;WifiNetwork&lt;/name&gt;
    &lt;/SSID&gt;
&lt;/SSIDConfig&gt;
&lt;connectionType&gt;ESS&lt;/connectionType&gt;
&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
&lt;MSM&gt;
    &lt;security&gt;
        &lt;authEncryption&gt;
            &lt;authentication&gt;WPA2PSK&lt;/authentication&gt;
            &lt;encryption&gt;AES&lt;/encryption&gt;
            &lt;useOneX&gt;false&lt;/useOneX&gt;
        &lt;/authEncryption&gt;
        &lt;sharedKey&gt;
            &lt;keyType&gt;passPhrase&lt;/keyType&gt;
            &lt;protected&gt;false&lt;/protected&gt;
            &lt;keyMaterial&gt;Password123&lt;/keyMaterial&gt;
        &lt;/sharedKey&gt;
    &lt;/security&gt;
&lt;/MSM&gt;

--------------sample from JPHSA LT-103368 --------------------

&lt;?xml version="1.0"?&gt;
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
	&lt;name&gt;JPHSA&lt;/name&gt;
	&lt;SSIDConfig&gt;
		&lt;SSID&gt;
			&lt;hex&gt;4A50485341&lt;/hex&gt;
			&lt;name&gt;JPHSA&lt;/name&gt;
		&lt;/SSID&gt;
		&lt;nonBroadcast&gt;false&lt;/nonBroadcast&gt;
	&lt;/SSIDConfig&gt;
	&lt;connectionType&gt;ESS&lt;/connectionType&gt;
	&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
	&lt;MSM&gt;
		&lt;security&gt;
			&lt;authEncryption&gt;
				&lt;authentication&gt;WPA2PSK&lt;/authentication&gt;
				&lt;encryption&gt;AES&lt;/encryption&gt;
				&lt;useOneX&gt;false&lt;/useOneX&gt;
			&lt;/authEncryption&gt;
			&lt;sharedKey&gt;
				&lt;keyType&gt;passPhrase&lt;/keyType&gt;
				&lt;protected&gt;false&lt;/protected&gt;
				&lt;keyMaterial&gt;100%True&lt;/keyMaterial&gt;
			&lt;/sharedKey&gt;
		&lt;/security&gt;
	&lt;/MSM&gt;
&lt;/WLANProfile&gt;


---------------------------------------------------------------

#'Than you can modify this file and import it to add this wifi with this command:

netsh wlan add profile filename="C:\path\WifiNetwork.xml"

#'Check your profiles with:

netsh wlan show profile</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Create_WIreless_WIFI_Profile</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Create_WIreless_WIFI_Profile</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://social.technet.microsoft.com/Forums/windows/en-US/6a2def2e-8663-4c19-8fba-c2c4c3f0eb57/create-wireless-profile-in-command-line?forum=w7itpronetworking

The Netsh command allows to manage wireless profile. 
But to create a wireless profile, 
	you must create a wireless profile manually through the GUI on a reference computer first, 
	then export it to an XML file. 
With the XML file, you can use with the Netsh command 
	to configure the network profile on any other system you want.

To configure wireless profile, please refer to the following steps:

Export to XML file: 
	Netsh wlan export profile folder= PathAndFileName [[name=] ProfileName] [[interface=] InterfaceName] [[key=] clear]

Example: Netsh wlan export profile  folder=”c:\profiles” name="Profile 1" interface="Wireless Network Connection"

Add a profile from a file: 
	Netsh wlan add profile filename= PathAndFileName [[interface=]InterfaceName] [[user=]{all|current}]

Example: 
	Netsh wlan add profile filename=C:\Users\WirelessUser\Documents\profile1.xml interface="Wireless Network Connection"</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSEXEC_run_script_on_Multiple_Computers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSEXEC_run_script_on_Multiple_Computers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' I have written up a quick batch that allows me to run a utility remotely 
#' on computers over the network one at a time but 
#'I was looking to alter it so that the batch file could process a list of computers 
#'rather than one at a time.


#' I know PSEXEC is able to process a list 
#'    but I can't seem to figure it out on my own 
#'
#'Again, the batch I have attached works fine, 
#'    but it only works with the computername listed.  
#'I need to figure out how to get it to work pulling from a list instead.  
#'    Anyone have any experience with this utility?

-----------------------Example in question-------------------------
@echo off
 
c:
cd\
 
net use \\COMPUTERNAME\c$ /user:"domain\username"
 
copy /y file.exe \\COMPUTERNAME\c$\file.exe
 
"c:\pstools\psexec.exe" \\COMPUTERNAME -i -w c:\ c:\file.exe
 
net use \\COMPUTERNAME\c$ /delete /y

--------------------------------------------------------------------

#'Idea 1:  {There may be an issue with this}
-----------
FOR /F %1 IN (c:\pathToFile\computers.txt) do c:\PathToBatchScript\script.bat (%1)


#'Idea 2:  {There may be an issue with this}
-----------
#'The "File.exe" will have to be in the same location on your system for the copy to work.  
#'Make sure that the folder where psexec is at as well as the location of your file 
#'are in the %System Path% and you should have no issues with this.
#'This example paths to a .csv, but a .txt will work just as well.

@echo off
 
psexec @C:\TEMP\list.csv -u MyDomain\Username -c c:\file.exe

#' Idea 3:
------------
#'In order to process a list of computers like "bizz1", "bizz2", "bizz3" ... "bizzN", you may proceed like this: 
#'In the current folder, create a plain text file, holding all the computer names, 1 per line. 
#'Name the file e.g. "complist.txt".
#'
#'launch psexec like this:

psexec @complist.txt -u admin -p passwd -e remote_command_to_be_executed 

#' To do all the computers in a domain
-----------
#'1. You need to prefix cmd.exe /c to the echo command.
#'
#'2. You need to escape the percent characters in %COMPUTERNAME%, 
#'    else %COMPUTERNAME% will hold your local computername instead of the remote computernames, 
#'    i.e. it needs to read ^%COMPUTERNAME^%.
#'
#'3. You must make sure that the share name \\server\ points to a folder to which all remote  machines have write access, 
#'        else the remote machines will not be able to append their names to the output file \\server\wks.txt. 
#'        More likely a valid share name would look like this: \\server\sharedfolder 
#'        and the output file name would look like \\server\sharedfolder\wks.txt.
#'
#'4. The pipe sign &gt;&gt; needs to be escaped, too, 
#'    like %computername%, because it needs to be passed to each remote machine. 
#'    The local machine has been detached (-d) after all and will never get any output from any remote machine. 
#'    So the piping part needs to read ^&gt;&gt; \\server\wks.txt.
#'
#'So the resulting command line would look like this:

&gt; psexec \\* -u admin -p password -d cmd.exe echo ^%COMPUTERNAME^% ^&gt;&gt; \\server\wks.txt</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PSEXEC_Sysinternals_NETSH_for_multipleComputers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PSEXEC_Sysinternals_NETSH_for_multipleComputers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.serverwatch.com/server-tutorials/using-netsh-to-manage-remote-servers-and-workstations.html

#'Netsh lacks an easy way to simultaneously manage multiple remote machines. 
#'Though you could get creative with the built-in remote functionality, 
#'    like incorporating multiple remote addresses in batch files and other scripts, 
#'    you might have better luck pursuing other options.
#'
#'For instance, 
#'    utilizing the PsExec utility from Windows Sysinternals allows you to push out Netsh (or any other commands) 
#'    to multiple machines at once.
#'
#'Once you download PsExec, 
#'    open a Command Prompt to the folder containing it and try the following command to access the CLI of a remote machine:
#'
#'psexec \\hostname -u domain\admin -p password cmd
#'
#'If the remote machine is Windows Vista or higher, 
#'    you may need to use the -h option to have the process run with the account's elevated token.
#'
#'Once you've established that you can gain remote access, 
#'    you can also run netsh commands directly, for instance:
#'
psexec \\hostname -u domain\admin -p password cmd.exe /c netsh.exe interface ip show config
#'
#'If an interactive CLI isn't needed — 
#'    for example, if you're running a command that doesn't provide output — 
#'        consider adding the psexec -d option. 
#'        This option tells it not to wait for the process to terminate. 
#'    On the other hand, 
#'        if you'd like the program to be interactive on the desktop of the remote machine, 
#'        consider the -i option.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NETSH</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WIFI_profile_Add</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NETSH</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WIFI_profile_Add</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://stackoverflow.com/questions/35232162/add-wifi-profile-with-password-in-windows-programmatically

'At first you export an existing wifi profile:

netsh wlan export profile name="WifiNetwork" folder="C:\path\" key=clear

'e.g. Remote
psexec \\lt-103368 -u "administrator" -p "JPHSA@Work" netsh wlan export profile name="JPHSA" folder="\\win10vm\All_Share\WiFi\" key=clear


'Than you get a XML file with the following style:

&lt;?xml version="1.0"?&gt;
&lt;WLANProfile xmlns="http://www.microsoft.com/networking/WLAN/profile/v1"&gt;
&lt;name&gt;WifiNetwork&lt;/name&gt;
&lt;SSIDConfig&gt;
    &lt;SSID&gt;
        &lt;hex&gt;123456789ABCDEF&lt;/hex&gt;
        &lt;name&gt;WifiNetwork&lt;/name&gt;
    &lt;/SSID&gt;
&lt;/SSIDConfig&gt;
&lt;connectionType&gt;ESS&lt;/connectionType&gt;
&lt;connectionMode&gt;auto&lt;/connectionMode&gt;
&lt;MSM&gt;
    &lt;security&gt;
        &lt;authEncryption&gt;
            &lt;authentication&gt;WPA2PSK&lt;/authentication&gt;
            &lt;encryption&gt;AES&lt;/encryption&gt;
            &lt;useOneX&gt;false&lt;/useOneX&gt;
        &lt;/authEncryption&gt;
        &lt;sharedKey&gt;
            &lt;keyType&gt;passPhrase&lt;/keyType&gt;
            &lt;protected&gt;false&lt;/protected&gt;
            &lt;keyMaterial&gt;Password123&lt;/keyMaterial&gt;
        &lt;/sharedKey&gt;
    &lt;/security&gt;
&lt;/MSM&gt;

'Than you can modify this file and import it to add this wifi with this command:

netsh wlan add profile filename="C:\path\WifiNetwork.xml"

'Check your profiles with:

netsh wlan show profile</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>NuGet</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Delete_and_Clean_Packages</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>NuGet</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Delete_and_Clean_Packages</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
    Enable package restore and automatic checking (Options / Package Manager / General)
    Delete entire contents of the packages folder (to Recycle Bin if you're nervous!)
    Manage Nuget Packages For Solution
    Click the restore button.
    
    
    Another time I went to the 'Manage NuGet Packages' window =&gt; Updates {left pane} =&gt; [update all]

NuGet will restore only the packages used in your solution. You end up with a nice, streamlined set of packages.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Outlook</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>disable_ReadingPane_In_all_folders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Outlook</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>disable_ReadingPane_In_all_folders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.lifewire.com/turn-off-outlook-reading-pane-1173779#:~:text=Turn%20off%20the%20Reading%20Pane%20for%20Multiple%20Folders&amp;text=Open%20Outlook%20and%20select%20the,all%20your%20selected%20mail%20folders.

Turn off the Reading Pane for Multiple Folders
When you select Off to close the Reading Pane, 
	it applies only to the folder you're currently in. 
Here's how to turn off the Reading Pane quickly 
	for multiple folders:


Open Outlook and select the View tab.


Select Change View &gt; Apply Current View to Other Mail Folders.


Choose the folders you want to be affected in the Apply View dialog box.

The Reading Pane is now disabled in all your selected mail folders.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Outlook</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>SEARCH_syntax</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Outlook</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>SEARCH_syntax</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>bob
 ------------------------------------------------------------------------- 
Items containing bob, bobbinbobby, BOBBY, BoBby, or any other combination of uppercase and lowercase letters. Instant Search is not case sensitive.
 ******************************** 
bob moore
 ------------------------------------------------------------------------- 
Items containing bob, along with all of the variations listed in the previous row, ormoore, along with any other words that contain moore, but not necessarily in that order.
 ******************************** 
bobby AND moore
 ------------------------------------------------------------------------- 
Items containing both bobby and moore, but not necessarily in that order. Note that logical operators such as AND, NOT, and OR must be in uppercase letters.
 ******************************** 
bobby NOT moore
 ------------------------------------------------------------------------- 
Items containing bobby, along with all variations listed in the first row of the table, but not moore.
 ******************************** 
bobby OR moore
 ------------------------------------------------------------------------- 
Items containing bobby, along with all variations listed in the first row of the table, moore, or both.
 ******************************** 
"bob"
 ------------------------------------------------------------------------- 
Items containing the exact phrase bob and not the variations such as bobby or bobbin. To search for an exact string, you must use quotation marks.
 ******************************** 
from:"bobby moore"
 ------------------------------------------------------------------------- 
Items sent from bobby moore. Note the use of double quotes so that the search results match the exact phrase within the quotes.
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 

 ------------------------------------------------------------------------- 
You can also type from: and then the first few letters of a contact's name and Outlook will suggest a list of contacts for you to select.
 ******************************** 
from:"bobby moore" about:”status report”
 ------------------------------------------------------------------------- 
Items sent from bobby moore where status report appears in the subject line, body, or attachment contents. Note the use of double quotes so that the search results match the exact phrase within the quotes.
 ******************************** 
hasattachment:yes
 ------------------------------------------------------------------------- 
Items that have attachments. You can also use hasattachment:true to get the same results.
 ******************************** 
attachments:presentation.pptx
 ------------------------------------------------------------------------- 
Items that have attachments named presentation.pptx or an attachment that contains presentation.pptx within its contents.
 ******************************** 
subject:"bobby moore"
 ------------------------------------------------------------------------- 
Items whose subject contains the phrase bobby moore.
 ******************************** 
cc:"bobby moore"
 ------------------------------------------------------------------------- 
Items in which the display name bobby moore is on the Cc line.
 ******************************** 
cc:bobbymoore@contoso.com
 ------------------------------------------------------------------------- 
Items in which the e-mail address bobbymoore@contoso.com is on the Cc line.
 ******************************** 
bcc:bobby
 ------------------------------------------------------------------------- 
Items in which bobbyy is on the Bcc line.
 ******************************** 
category:red
 ------------------------------------------------------------------------- 
Items that contain a category name that includes the word red. For example "Red category" or "Redo" or "Redundant."
 ******************************** 
messagesize:&lt;10 KB
 ------------------------------------------------------------------------- 
Items whose size is less than 10 kilobytes. Note the use of the "less than" comparison operator (&lt;).
 ******************************** 
messagesize:&gt;5 MB
 ------------------------------------------------------------------------- 
Items whose size is larger than 5 megabytes. Note the use of the "greater than" comparison operator (&gt;).
 ******************************** 
received:=1/1/2016
 ------------------------------------------------------------------------- 
Items that arrived on 1/1/2016. Note the use of the "equals" comparison operator (=).
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 

 ------------------------------------------------------------------------- 
Note: Support for specifying custom dates via the Expanded Search drop-down is missing from some builds of Outlook for Windows. Users can still manually enter dates in the main search box. This is fixed in builds 16.0.12126.10000 and later.
 ******************************** 
received:yesterday
 ------------------------------------------------------------------------- 
Items that arrived yesterday. Instant Search also recognizes the follow date values:
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 

 ------------------------------------------------------------------------- 
Relative dates:    For example, today, tomorrow, yesterday
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 

 ------------------------------------------------------------------------- 
Multi-word relative dates:    For example, this week, next month, last week, past month, coming year
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 

 ------------------------------------------------------------------------- 
Days:     Sunday, Monday ... Saturday
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 

 ------------------------------------------------------------------------- 
Months:     January, February ... December
 ******************************** 

 ------------------------------------------------------------------------- 

 ******************************** 
received:last week
 ------------------------------------------------------------------------- 
Items that arrived last week. Note that if you run this query again a month from now you will obtain different results because it is a time relative query.
 ******************************** 
due:last week
 ------------------------------------------------------------------------- 
Items that are flagged for follow up a due date.
 ******************************** 
messagesize:tiny
 ------------------------------------------------------------------------- 
Items whose size is less than 10 kilobytes
 ******************************** 
messagesize:small
 ------------------------------------------------------------------------- 
Items whose size is between 10 and 25 kilobytes
 ******************************** 
messagesize:medium
 ------------------------------------------------------------------------- 
Items whose size is between 25 and 100 kilobytes
 ******************************** 
messagesize:large
 ------------------------------------------------------------------------- 
Items whose size is between 100 and 500 kilobytes
 ******************************** 
messagesize:verylarge
 ------------------------------------------------------------------------- 
Items whose size is between 500 kilobytes and 1 megabyte
 ******************************** 
followupflag:follow up
 ------------------------------------------------------------------------- 
Items that are flagged using the Follow Up flag.
 ******************************** 
messagesize:enormous
 ------------------------------------------------------------------------- 
Items whose size is larger than 5 megabytes
 ******************************** 
hasflag:true
 ------------------------------------------------------------------------- 
Items that are flagged for follow up.
 ******************************** 
from:bobby (received:1/7/17 OR received:1/8/17)
 ------------------------------------------------------------------------- 
Items from bobby that arrived on either 1/7/17 or 1/8/17. Note the use of parentheses to group the dates.
 ******************************** 
received&gt;=10/1/16 AND received&lt;=10/5/16
 ------------------------------------------------------------------------- 
Items that arrived between 10/1/16 and 10/5/16. 
 ******************************** 

 ------------------------------------------------------------------------- 
Note: For received ranges, do not use a colon. 
 ******************************** 
received&gt;10/1/16 AND received&lt;10/5/16
 ------------------------------------------------------------------------- 
Items that arrived after 10/1/16 but before 10/5/16.
 ******************************** 

 ------------------------------------------------------------------------- 
Note: For received ranges, do not use a colon. 
 ******************************** 
sent: yesterday
 ------------------------------------------------------------------------- 
Returns all items sent yesterday (by anyone). This search will return items you sent to others and items others sent to you.
 ******************************** 
to:bobby
 ------------------------------------------------------------------------- 
Items that you sent to bobby when you are searching in the Sent Items folder.
 ******************************** 
read:no
 ------------------------------------------------------------------------- 
Items that have not been read. You can also use read:false to get the same results.
 ******************************** 
subject:status received:May
 ------------------------------------------------------------------------- 
Items received from anyone during the month of May (any year) where the subject contains status.
 ******************************** 

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Outlook</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>WhichFolderContains_anEmail_foundBySearching</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Outlook</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>WhichFolderContains_anEmail_foundBySearching</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Determine the folder path of a message found in Search results
https://www.msoutlook.info/question/846

Q:
I frequently do a mailbox wide search in Outlook and luckily I also usually find what I’m looking for.
Sometimes, it is also important to me to find out where exactly that email is located in Outlook. 
The search results list doesn’t tell me that but it is important to me that I know it is in the correct folder.


A:

1] If only the name of the folder is important to you, 
	you can determine this by opening the “classic” Properties dialog of a message via the keyboard shortcut ALT+ENTER.
	
2] Another way to go would be to sort your Search Results by Folder.

Outlook 2007
View-&gt; Arrange By-&gt; Folder
Outlook 2010 / 2013 / 2016 / 2019 / Office 365
tab View-&gt; option group: Arrangement-&gt; Folder		(You might need to scroll inside or expand the Arrangement box to see the Folder field.)
Office 365 (Single Line Ribbon)
View-&gt; Arrange By-&gt; Folder	

Extra tip: 
	In Outlook 2013, 2016, 2019, and Office 365, you can also click on the “By Date” field that is shown directly under the Search box 
	and right from the All/Unread or Focused/Other links and select to arrange by Folder instead.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Permissions</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>MSSQLSERVER - File System Permissions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Permissions</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>MSSQLSERVER - File System Permissions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--https://msdn.microsoft.com/en-us/library/jj219062(v=sql.120).aspx

--Using Windows Explorer, navigate to the file system location where the database files are stored. 
--	Right-click the file system folder, and then click Properties.

--On the Security tab, click Edit, and then Add.

--In the Select Users, Computer, Service Account,
--	or Groups dialog box, click Locations, at the top of the location list, 
--	select your computer name, and then click OK.

--In the Enter the object names to select box, 
--	type the name of the per-service SID listed in the 
--	Books Online topic Configure Windows Service Accounts and Permissions. 
--	(For the Database Engine per service SID, 
--	use 
		NT SERVICE\MSSQLSERVER 
--	for a default instance, 
--	or 
		NT SERVICE\MSSQL$InstanceName 
--	for a named instance.)

--Click Check Names to validate the entry. 
--	The validation often fails, and might advise you that the name was not found. 
--	When you click OK, a Multiple Names Found dialog box appears.

--Now select the per-service SID, either MSSQLSERVER or NT SERVICE\MSSQL$InstanceName, 
--	and then click OK.

--Click OK again to return to the Permissions dialog box.

--In the Group or user names box, select the per-service SID, 
--	and then in the Permissions for &lt;name&gt; box, select the Allow check box for Full control.

--Click Apply, and then click OK twice to exit.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWER_BI</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Theme_seeWhat_is_beingUsed</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWER_BI</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Theme_seeWhat_is_beingUsed</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>when you import the theme file, 
this file will be imported into pbix file.and this list of Built-in report themes are also be updated in September 2018.

So you could try this way to see the theme being used:

save the pbix file and then rename the .pbix file to a .zip file, 
extract it to a local folder, 
and then check the file path Report\StaticResources\SharedResources

Importing Report Themes
To import a custom Report Theme, select the Switch Theme button from the Home ribbon. Then select Import Theme from the drop-down menu.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>CONSTANTS_used_in_AD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>CONSTANTS_used_in_AD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Here is a list of the Constants used in VBScript, WSH, Windows, and Active Directory\ADSI.
http://www.kouti.com/samplescripts/AllConstants.vbs.txt

The script example below provides how constants are used in PowerShell.
-------------------------------------------------------------------------
Set-Variable -name ADS_UF_ACCOUNTDISABLE -value 2 -option constant
$objUser = [ADSI]“LDAP://CN=FirstName LastName,OU=TestOUUsers,OU=TestOU,DC=MyDomain,DC=msft”
$objUser.put(“userAccountControl”,$ADS_UF_ACCOUNTDISABLE)

$objUser.setInfo()

---------------------------------------------------------------------

In the file, when you see a value given as &amp;H…. it means hexadecimal.
' -------------------------------------------------------------------------
'       Related to the book Inside Active Directory, ISBN 0-201-61621-1
'       Copyright (C) 2002 by Sakari Kouti
'       Version: November 16, 2001
'       (see http://www.kouti.com)
' You have a royalty-free right to use, modify, reproduce and distribute
' this script (and/or any modified version) in any way you find useful,
' provided that you agree that Addison-Wesley or Sakari Kouti has no
' warranty, obligations or liability for the script. If you modify
' the script, you must retain this copyright notice.
' -------------------------------------------------------------------------

' ===============================================================
' See CH10-10 IncludeExample.wsf for an example of how to include
' this file in your script.
' ===============================================================

' This file includes all the constant defitions that are used in the
' script samples of the Inside Active Directory book, as well as some
' other constant defitions. The constants represent the following
' categories:
' - VBScript
' - WSH
' - Windows
' - Active Directory/ADSI

' ---------------------------------------------------------------
' Category: VBScript
' ---------------------------------------------------------------

'Error codes
Const E_VBS_OBJECT_REQUIRED = 424
'For more error codes, see VBScript help

'OpenTextFile method options
Const ForReading = 1

' ---------------------------------------------------------------
' Category: WSH
' ---------------------------------------------------------------

'WshShell Run method options
Const WAIT_ON_RETURN = True
Const HIDE_WINDOW = 0
'For more options, see WSH help

' ---------------------------------------------------------------
' Category: Windows
' ---------------------------------------------------------------

'NTFS ACE options

'NTFS ACE options: AccessMask
Const FILE_READ_DATA            = &amp;H1     'file &amp; pipe
Const FILE_LIST_DIRECTORY       = &amp;H1     'folder
Const FILE_WRITE_DATA           = &amp;H2     'file &amp; pipe
Const FILE_ADD_FILE             = &amp;H2     'folder
Const FILE_APPEND_DATA          = &amp;H4     'file
Const FILE_ADD_SUBDIRECTORY     = &amp;H4     'folder
Const FILE_CREATE_PIPE_INSTANCE = &amp;H4     'named pipe
Const FILE_READ_EA              = &amp;H8     'file &amp; folder
Const FILE_WRITE_EA             = &amp;H10    'file &amp; folder
Const FILE_EXECUTE              = &amp;H20    'file
Const FILE_TRAVERSE             = &amp;H20    'folder
Const FILE_DELETE_CHILD         = &amp;H40    'folder
Const FILE_READ_ATTRIBUTES      = &amp;H80    'all
Const FILE_WRITE_ATTRIBUTES     = &amp;H100   'all
Const DELETE                    = &amp;H10000
Const READ_CONTROL              = &amp;H20000
Const WRITE_DAC                 = &amp;H40000
Const WRITE_OWNER               = &amp;H80000
Const SYNCHRONIZE               = &amp;H100000
Const ACCESS_SYSTEM_SECURITY    = &amp;H1000000
Const GENERIC_ALL               = &amp;H10000000
Const GENERIC_EXECUTE           = &amp;H20000000
Const GENERIC_WRITE             = &amp;H40000000
Const GENERIC_READ              = &amp;H80000000

Const FULL_CONTROL              = &amp;H1F01FF  '14 permissions
Const MODIFY                    = &amp;H1301BF  '11 permissions

'NTFS ACE options: ACE flags
Const OBJECT_INHERIT_ACE                = &amp;H1
Const CONTAINER_INHERIT_ACE             = &amp;H2
Const NO_PROPAGATE_INHERIT_ACE          = &amp;H4
Const INHERIT_ONLY_ACE                  = &amp;H8
Const INHERITED_ACE                     = &amp;H10
Const SUCCESSFUL_ACCESS_ACE_FLAG        = &amp;H40
Const FAILED_ACCESS_ACE_FLAG            = &amp;H80

'NTFS ACE options: ACE types
Const ACCESS_ALLOWED_ACE_TYPE           = &amp;H0
Const ACCESS_DENIED_ACE_TYPE            = &amp;H1
Const SYSTEM_AUDIT_ACE_TYPE             = &amp;H2
Const SYSTEM_ALARM_ACE_TYPE             = &amp;H3
Const ACCESS_ALLOWED_COMPOUND_ACE_TYPE  = &amp;H4
Const ACCESS_ALLOWED_OBJECT_ACE_TYPE    = &amp;H5
Const ACCESS_DENIED_OBJECT_ACE_TYPE     = &amp;H6
Const SYSTEM_AUDIT_OBJECT_ACE_TYPE      = &amp;H7
Const SYSTEM_ALARM_OBJECT_ACE_TYPE      = &amp;H8

'NTFS ACE options: Flags
Const ADS_OBJECT_TYPE_PRESENT           = &amp;H1
Const ADS_INHERITED_OBJECT_TYPE_PRESENT = &amp;H2

' ---------------------------------------------------------------
' Category: Active Directory/ADSI
' ---------------------------------------------------------------

'Security descriptor control flags
Const ADS_SD_CONTROL_SE_OWNER_DEFAULTED       = &amp;H0001
Const ADS_SD_CONTROL_SE_GROUP_DEFAULTED       = &amp;H0002
Const ADS_SD_CONTROL_SE_DACL_PRESENT          = &amp;H0004
Const ADS_SD_CONTROL_SE_DACL_DEFAULTED        = &amp;H0008
Const ADS_SD_CONTROL_SE_SACL_PRESENT          = &amp;H0010
Const ADS_SD_CONTROL_SE_SACL_DEFAULTED        = &amp;H0020
Const ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ = &amp;H0100
Const ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ = &amp;H0200
Const ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED   = &amp;H0400
Const ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED   = &amp;H0800
Const ADS_SD_CONTROL_SE_DACL_PROTECTED        = &amp;H1000
Const ADS_SD_CONTROL_SE_SACL_PROTECTED        = &amp;H2000
Const ADS_SD_CONTROL_SE_SELF_RELATIVE         = &amp;H8000
  
'AD ACE options

'AD ACE options: AccessMask
Const ADS_RIGHT_DS_CREATE_CHILD        = &amp;H1
Const ADS_RIGHT_DS_DELETE_CHILD        = &amp;H2
Const ADS_RIGHT_ACTRL_DS_LIST          = &amp;H4
Const ADS_RIGHT_DS_SELF                = &amp;H8
Const ADS_RIGHT_DS_READ_PROP           = &amp;H10
Const ADS_RIGHT_DS_WRITE_PROP          = &amp;H20
Const ADS_RIGHT_DS_DELETE_TREE         = &amp;H40
Const ADS_RIGHT_DS_LIST_OBJECT         = &amp;H80
Const ADS_RIGHT_DS_CONTROL_ACCESS      = &amp;H100
Const ADS_RIGHT_DELETE                 = &amp;H10000
Const ADS_RIGHT_READ_CONTROL           = &amp;H20000
Const ADS_RIGHT_WRITE_DAC              = &amp;H40000
Const ADS_RIGHT_WRITE_OWNER            = &amp;H80000
Const ADS_RIGHT_SYNCHRONIZE            = &amp;H100000
Const ADS_RIGHT_ACCESS_SYSTEM_SECURITY = &amp;H1000000
Const ADS_RIGHT_GENERIC_ALL            = &amp;H10000000
Const ADS_RIGHT_GENERIC_EXECUTE        = &amp;H20000000
Const ADS_RIGHT_GENERIC_WRITE          = &amp;H40000000
Const ADS_RIGHT_GENERIC_READ           = &amp;H80000000

Const ADS_RIGHT_FULL_CONTROL           = &amp;HF01FF

'AD ACE options: ACE flags
Const ADS_ACEFLAG_INHERIT_ACE              = &amp;H2
Const ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE = &amp;H4
Const ADS_ACEFLAG_INHERIT_ONLY_ACE         = &amp;H8
Const ADS_ACEFLAG_INHERITED_ACE            = &amp;H10
Const ADS_ACEFLAG_SUCCESSFUL_ACCESS        = &amp;H40
Const ADS_ACEFLAG_FAILED_ACCESS            = &amp;H80

'AD ACE options: ACE types
Const ADS_ACETYPE_ACCESS_ALLOWED           = 0
Const ADS_ACETYPE_ACCESS_DENIED            = &amp;H1
Const ADS_ACETYPE_SYSTEM_AUDIT             = &amp;H2
Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT    = &amp;H5
Const ADS_ACETYPE_ACCESS_DENIED_OBJECT     = &amp;H6
Const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT      = &amp;H7

'AD ACE options: Flags
Const ADS_FLAG_OBJECT_TYPE_PRESENT           = &amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;H2

'Some schemaIDGUIDs
Const SCHEMAIDGUID_USER         = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_GROUP        = "{BF967A9C-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_COMPUTER     = "{BF967A86-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_CONTACT      = "{5CB41ED0-0E4C-11D0-A286-00AA003049E2}"
Const SCHEMAIDGUID_OU           = "{BF967AA5-0DE6-11D0-A285-00AA003049E2}"
Const SCHEMAIDGUID_PRINTER      = "{BF967AA8-0DE6-11D0-A285-00AA003049E2}"

'Some extended rights
Const GUID_ACCOUNT_RESTRICTIONS = "{4C164200-20C0-11D0-A768-00AA006E0529}"
Const GUID_VALIDATED_SPN        = "{F3A64788-5306-11D1-A9C5-0000F80367C1}"
Const GUID_VALIDATED_DNSHOST    = "{72E39547-7B18-11D1-ADEF-00C04FD8D5CD}"
Const GUID_RESET_PASSWORD       = "{00299570-246D-11D0-A768-00AA006E0529}"

'ADs Types
Const ADSTYPE_INVALID                = 0
Const ADSTYPE_DN_STRING              = 1
Const ADSTYPE_CASE_EXACT_STRING      = 2
Const ADSTYPE_CASE_IGNORE_STRING     = 3
Const ADSTYPE_PRINTABLE_STRING       = 4
Const ADSTYPE_NUMERIC_STRING         = 5
Const ADSTYPE_BOOLEAN                = 6
Const ADSTYPE_INTEGER                = 7
Const ADSTYPE_OCTET_STRING           = 8
Const ADSTYPE_UTC_TIME               = 9
Const ADSTYPE_LARGE_INTEGER          = 10
Const ADSTYPE_PROV_SPECIFIC          = 11
Const ADSTYPE_OBJECT_CLASS           = 12
Const ADSTYPE_CASEIGNORE_LIST        = 13
Const ADSTYPE_OCTET_LIST             = 14
Const ADSTYPE_PATH                   = 15
Const ADSTYPE_POSTALADDRESS          = 16
Const ADSTYPE_TIMESTAMP              = 17
Const ADSTYPE_BACKLINK               = 18
Const ADSTYPE_TYPEDNAME              = 19
Const ADSTYPE_HOLD                   = 20
Const ADSTYPE_NETADDRESS             = 21
Const ADSTYPE_REPLICAPOINTER         = 22
Const ADSTYPE_FAXNUMBER              = 23
Const ADSTYPE_EMAIL                  = 24
Const ADSTYPE_NT_SECURITY_DESCRIPTOR = 25
Const ADSTYPE_UNKNOWN                = 26
Const ADSTYPE_DN_WITH_BINARY         = 27
Const ADSTYPE_DN_WITH_STRING         = 28
  
'Error codes
Const E_ADS_PROPERTY_NOT_FOUND        = &amp;H8000500D
Const ERROR_OBJECT_ALREADY_EXISTS     = &amp;H80071392
Const ERROR_DS_NO_ATTRIBUTE_OR_VALUE  = &amp;H8007200A
Const ERROR_DS_NO_SUCH_OBJECT         = &amp;H80072030
Const ERROR_DS_UNWILLING_TO_PERFORM   = &amp;H80072035

'Schema searchFlags
Const ATTR_INDEXED                    = &amp;H1
Const ATTR_INDEXED_OVER_CONT_AND_ATTR = &amp;H2
Const ATTR_PART_OF_ANR_SET            = &amp;H4
Const ATTR_SURVIVE_DELETION           = &amp;H8
Const ATTR_COPY_WITH_USER             = &amp;H10

'Schema systemFlags
Const ATTR_NOT_REPLICATED             = &amp;H1
Const ATTR_IS_CONSTRUCTED             = &amp;H4
Const ATTR_IS_BASE_SCHEMA             = &amp;H10

'User account options
Const UF_SCRIPT                          = &amp;H0001
Const UF_ACCOUNTDISABLE                  = &amp;H0002
Const UF_HOMEDIR_REQUIRED                = &amp;H0008
Const UF_LOCKOUT                         = &amp;H0010
Const UF_PASSWD_NOTREQD                  = &amp;H0020
Const UF_PASSWD_CANT_CHANGE              = &amp;H0040
Const UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = &amp;H0080
Const UF_DONT_EXPIRE_PASSWD              = &amp;H10000
Const UF_MNS_LOGON_ACCOUNT               = &amp;H20000
Const UF_SMARTCARD_REQUIRED              = &amp;H40000
Const UF_TRUSTED_FOR_DELEGATION          = &amp;H80000
Const UF_NOT_DELEGATED                   = &amp;H100000
Const UF_USE_DES_KEY_ONLY                = &amp;H200000
Const UF_DONT_REQUIRE_PREAUTH            = &amp;H400000

Const UF_TEMP_DUPLICATE_ACCOUNT          = &amp;H0100 'local account
Const UF_NORMAL_ACCOUNT                  = &amp;H0200 'global account
Const UF_INTERDOMAIN_TRUST_ACCOUNT       = &amp;H0800 'incoming trust
Const UF_WORKSTATION_TRUST_ACCOUNT       = &amp;H1000 'ws or ms comp
Const UF_SERVER_TRUST_ACCOUNT            = &amp;H2000 'dc computer

'Group scopes and types
Const ADS_GROUP_TYPE_GLOBAL_GROUP        = &amp;H2
Const ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP  = &amp;H4
Const ADS_GROUP_TYPE_LOCAL_GROUP         = &amp;H4
Const ADS_GROUP_TYPE_UNIVERSAL_GROUP     = &amp;H8
Const ADS_GROUP_TYPE_SECURITY_ENABLED    = &amp;H80000000

'Well-known GUIDs
Const GUID_USERS_CONTAINER               = "a9d1ca15768811d1aded00c04fd8d5cd"
Const GUID_COMPUTRS_CONTAINER            = "aa312825768811d1aded00c04fd8d5cd"
Const GUID_SYSTEMS_CONTAINER             = "ab1d30f3768811d1aded00c04fd8d5cd"
Const GUID_DOMAIN_CONTROLLERS_CONTAINER  = "a361b2ffffd211d1aa4b00c04fd7d83a"
Const GUID_INFRASTRUCTURE_CONTAINER      = "2fbac1870ade11d297c400c04fd8d5cd"
Const GUID_DELETED_OBJECTS_CONTAINER     = "18e2ea80684f11d2b9aa00c04f79f805"
Const GUID_LOSTANDFOUND_CONTAINER        = "ab8153b7768811d1aded00c04fd8d5cd"

'Service status codes
Const ADS_SERVICE_STOPPED                = 1
Const ADS_SERVICE_START_PENDING          = 2
Const ADS_SERVICE_STOP_PENDING           = 3
Const ADS_SERVICE_RUNNING                = 4
Const ADS_SERVICE_CONTINUE_PENDING       = 5
Const ADS_SERVICE_PAUSE_PENDING          = 6
Const ADS_SERVICE_PAUSED                 = 7
Const ADS_SERVICE_ERROR                  = 8

'OpenDSObject authentication mode
Const ADS_SECURE_AUTHENTICATION          = &amp;H1
Const ADS_USE_ENCRYPTION                 = &amp;H2
Const ADS_USE_SSL                        = &amp;H2
Const ADS_READONLY_SERVER                = &amp;H4
Const ADS_PROMPT_CREDENTIALS             = &amp;H8
Const ADS_NO_AUTHENTICATION              = &amp;H10
Const ADS_FAST_BIND                      = &amp;H20
Const ADS_USE_SIGNING                    = &amp;H40
Const ADS_USE_SEALING                    = &amp;H80
Const ADS_USE_DELEGATION                 = &amp;H100
Const ADS_SERVER_BIND                    = &amp;H200

'ADO/LDAP referral chasing options
Const ADS_CHASE_REFERRALS_NEVER          = 0
Const ADS_CHASE_REFERRALS_SUBORDINATE    = &amp;H20
Const ADS_CHASE_REFERRALS_EXTERNAL       = &amp;H40
Const ADS_CHASE_REFERRALS_ALWAYS         = &amp;H60  '&amp;H20 + &amp;H40

'ADO/LDAP search scope options
Const ADS_SCOPE_BASE                     = 0
Const ADS_SCOPE_ONELEVEL                 = 1
Const ADS_SCOPE_SUBTREE                  = 2

'PutEx modes
Const ADS_PROPERTY_CLEAR                 = 1
Const ADS_PROPERTY_UPDATE                = 2
Const ADS_PROPERTY_APPEND                = 3
Const ADS_PROPERTY_DELETE                = 4

'IADsNameTranslate name types
Const ADS_NAME_TYPE_1779                    = 1
Const ADS_NAME_TYPE_CANONICAL               = 2
Const ADS_NAME_TYPE_NT4                     = 3
Const ADS_NAME_TYPE_DISPLAY                 = 4
Const ADS_NAME_TYPE_DOMAIN_SIMPLE           = 5
Const ADS_NAME_TYPE_ENTERPRISE_SIMPLE       = 6
Const ADS_NAME_TYPE_GUID                    = 7
Const ADS_NAME_TYPE_UNKNOWN                 = 8
Const ADS_NAME_TYPE_USER_PRINCIPAL_NAME     = 9
Const ADS_NAME_TYPE_CANONICAL_EX            = 10
Const ADS_NAME_TYPE_SERVICE_PRINCPAL_NAME   = 11
Const ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>get_list_of_Users_AND_filter_them_from_CN=Users,DC=jphsa,DC=org</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>get_list_of_Users_AND_filter_them_from_CN=Users,DC=jphsa,DC=org</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>get_list_of_Users_AND_filter_them_from_CN=Users,DC=jphsa,DC=org
===========================================================================================
'Need to first Set-Location (see below) then can filter:
Get-Item -Filter "EmployeeID=309645" -Path *

'OUTPUT
===========
Name                 ObjectClass          DistinguishedName                                                                                  
----                 -----------          -----------------                                                                                  
Glenn Garson         user                 CN=Glenn Garson,CN=Users,DC=jphsa,DC=org                                                           
===========================================================================================
Import-Module activedirectory

New-PSDrive -PSProvider activedirectory -Name theUsers -Root "AD:\CN=Users,DC=jphsa,DC=org"

Set-Location theUsers:                                     #' &lt;============This sets the cursor to be located in AD

Get-Childitem  | ? objectclass -eq user

#' OR:  Get-Childitem  | ? objectclass -eq user | Select *  | Out-GridView

#'OUTPUT
--------------------
Name                 ObjectClass          DistinguishedName                                                                                  
----                 -----------          -----------------                                                                                  
Allen Chighizola     user                 CN=Allen Chighizola,CN=Users,DC=jphsa,DC=org                                                       
Alona Sartin         user                 CN=Alona Sartin,CN=Users,DC=jphsa,DC=org                                                           
Amy Hemphill         user                 CN=Amy Hemphill,CN=Users,DC=jphsa,DC=org                                                           
Anastasia Boudreaux  user                 CN=Anastasia Boudreaux,CN=Users,DC=jphsa,DC=org  
===========================================================================================

'To get a particular user:

dir | ? name -match 'glenn garson'

#'OUPUT
--------------------
Name                 ObjectClass          DistinguishedName                                                                                  
----                 -----------          -----------------                                                                                  
Glenn Garson         user                 CN=Glenn Garson,CN=Users,DC=jphsa,DC=org                                                           


#' Therefore, if I am in the OU=Charlotte folder, 
#'I only need to specify the last portion of the DistinguishedName attribute:

PS charlotte:\&gt; Get-Item .\'glenn garson'

#'Because the Get-Item cmdlet supports the use of the Filter parameter, I can easily create a filter to find a specific user. 
#' All I need to do is to specify a value for the Name attribute and use a wildcard character for the path. 

PS charlotte:\&gt; Get-Item -Filter "name=glenn garson" -Path *

#' The cool thing is that I can even filter for properties not normally returned. 
#' So for example, I can find users who have a city value of Charlotte (the lowercase L is the LDAP attribute). 
#' This technique is shown here.  (the lowercase L is the LDAP attribute)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_and_DotNet</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01_Object_from_external_DotNet_file____PowerShell.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_and_DotNet</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01_Object_from_external_DotNet_file____PowerShell.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'01_Object_from_external_DotNet_file____PowerShell.ps1



#'-----------------------------------------------------------------------------#'
#' Demo 9 - Create object from .Net Code in an external file
#'-----------------------------------------------------------------------------#'

#' Set the folder where the CS file is
$assyPath = "C:\JUNK\"

#' Path and File Name
$file = "$($assyPath)ExternalCSharpClass.cs"

#' Load the contents of the file into Memory (each line into seperate element of an Array)
#' So an Array of strings, 'Out-String' combines all the elements into a string variable
$code = Get-Content $file | Out-String



#' Add a new type definition based on the code
Add-Type -TypeDefinition $code `
         -Language CSharpVersion3     #' &lt;==== C# version 3 PowerShell

#' Call the static method of the object
$mySchema = "dbo"
$myTable = "ArcaneCode"

 #' put the name of the class in square braces [xxx] followed by 2 colons, then the name of the method, and the Parms
$result = [BPSDObjectExternal]::composeFullName($mySchema, $myTable)
$result</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_and_DotNet</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Add_method_to_existing_object_from_a_Pipe</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_and_DotNet</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Add_method_to_existing_object_from_a_Pipe</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'-----------------------------------------------------------------------------#'
#' Demo 10 - Add to an existing object
#' Get-ChildItem will get list of files in the given folder
#' This demo adds a 'function' (i.e. a script block) to the objects returned by 'Get-ChildItem' 
#'-----------------------------------------------------------------------------#'

#' Define the custom script method that returns a value based on the extension of the file object
$script = { 
            $retValue = "Unknown"

            if($this.Extension -eq '.ps1')
            {
              $retValue = 'Script'
            }
            else
            {
              $retValue = 'Not A Script'
            }

            return $retValue
          }

#' Load a variable with a collection of file objects
Set-Location "C:\DATA\psScripts"
$items = Get-ChildItem

#' Add script property to the each file object in bulk
$items | Add-Member -MemberType ScriptMethod `                          #'&lt;====== Pipe the collection of objects to Add-Member (to add the script block)
                    -Name 'ScriptType' `
                    -Value $script                                      #'&lt;====== The 'Value' is the script block


#' Now, for illustrative purposes, add another property to 
#' each item using a foreach loop
$itemCount = 0
foreach($item in $items)
{
  $itemCount++

  #' Add a note property, setting it to the current item counter
  #' Could have also used $item | Add-Member...
  Add-Member -InputObject $item `
             –MemberType NoteProperty `
             –Name ItemNumber `
             –Value $itemCount
  
  #' Display the results of the file object with the new 
  #' property and script (function) added
  "$($item.ItemNumber): $($item.Name) = $($item.ScriptType())"
}
#'======================================================OUTPUT================
#'  1: Count_And_List_Sessions_on_BCC-EXPLORER3.ps1 = Script
#'  2: email_LIST_of_REMOTE_logins_for_all_SERVERS_on_our_Network.psf.ps1 = Script
#'  3: Get-IPDetails.PS1 = Script
#'  4: Get-MachineIPDetails.PS1 = Script
#'  5: Get-SubNetItems.txt = Not A Script
#'  6: Get-UserSession.ps1 = Script
#'  7: LIST_to_CSV_All_Groups_All_Users.ps1 = Script
#'  8: LogOff_DisconnectedSessions_on_server.ps1 = Script
#'  9: Query_Remote_Sessions_on_a_Server.ps1 = Script
#'  10: Set_Environment_To_Include_Modules.ps1 = Script</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_browser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>BookMarks_Export_Chrome_v2.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_browser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>BookMarks_Export_Chrome_v2.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'BookMarks_Export_Chrome_v2.ps1
#'credits: Mostly to tobibeer and Snak3d0c @ https://stackoverflow.com/questions/47345612/export-chrome-bookmarks-to-csv-file-using-powershell
#'Path to chrome bookmarks
$pathToJsonFile = "$env:localappdata\Google\Chrome\User Data\Default\Bookmarks"

$thisComputerName = $env:computername
$theFolderName = "$thisComputerName" +  "__$(Get-Date -Format "yyyy_M_d")"
$destinationPath = 'H:\'

$htmlOut = "$destinationPath\$theFolderName\ChromeBookmarks.html"

if(!(test-path "$destinationPath\$theFolderName")){
                                                  new-item "$destinationPath\$theFolderName" -ItemType Directory
                                                }




$htmlHeader = @'
&lt;!DOCTYPE NETSCAPE-Bookmark-file-1&gt;
&lt;!--This is an automatically generated file.
    It will be read and overwritten.
    Do Not Edit! --&gt;
&lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"&gt;
&lt;Title&gt;Bookmarks&lt;/Title&gt;
&lt;H1&gt;Bookmarks&lt;/H1&gt;
&lt;DL&gt;&lt;p&gt;
'@

$htmlHeader | Out-File -FilePath $htmlOut -Force -Encoding utf8 #'line59

#'A nested function to enumerate bookmark folders
Function Get-BookmarkFolder {
[cmdletbinding()]
Param(
[Parameter(Position=0,ValueFromPipeline=$True)]
$Node
)

Process 
{

 foreach ($child in $node.children) 
 {
   $da = [math]::Round([double]$child.date_added / 1000000) #'date_added - from microseconds (Google Chrome {dates}) to seconds 'standard' epoch.
   $dm = [math]::Round([double]$child.date_modified / 1000000) #'date_modified - from microseconds (Google Chrome {dates}) to seconds 'standard' epoch.
   if ($child.type -eq 'Folder') 
   {
     "    &lt;DT&gt;&lt;H3 FOLDED ADD_DATE=`"$($da)`"&gt;$($child.name)&lt;/H3&gt;" | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8
     "       &lt;DL&gt;&lt;p&gt;" | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8
     Get-BookmarkFolder $child
     "       &lt;/DL&gt;&lt;p&gt;" | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8
   }
   else 
   {
        "       &lt;DT&gt;&lt;a href=`"$($child.url)`" ADD_DATE=`"$($da)`"&gt;$($child.name)&lt;/a&gt;" | Out-File -FilePath $htmlOut -Append -Encoding utf8
  } #'else url
 } #'foreach
 } #'process
} #'end function

$data = Get-content $pathToJsonFile -Encoding UTF8 | out-string | ConvertFrom-Json
$sections = $data.roots.PSObject.Properties | select -ExpandProperty name
ForEach ($entry in $sections) {
    $data.roots.$entry | Get-BookmarkFolder
}
'&lt;/DL&gt;' | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_browser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Clear_Cache</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_browser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Clear_Cache</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://github.com/lemtek/Powershell/blob/master/Clear_Browser_Caches


Write-Host -ForegroundColor yellow "#######################################################"
""
Write-Host -ForegroundColor Green "Powershell commands to delete cache &amp; cookies in Firefox, Chrome &amp; IE browsers"
Write-Host -ForegroundColor Green "By Lee Bhogal, Paradise Computing Ltd - June 2014"
Write-Host -ForegroundColor Green "VERSION: 2"
""
Write-Host -ForegroundColor yellow "#######################################################"
""
Write-Host -ForegroundColor Green "CHANGE_LOG:
v2.4: - Resolved *.default issue, issue was with the file path name not with *.default, but issue resolved
v2.3: - Added Cache2 to Mozilla directories but found that *.default is not working
v2.2: - Added Cyan colour to verbose output
v2.1: - Added the location 'C:\Windows\Temp\*' and 'C:\`$recycle.bin\'
v2:   - Changed the retrieval of user list to dir the c:\users folder and export to csv
v1:   - Compiled script"
""
Write-Host -ForegroundColor yellow "#######################################################"
""
#########################
"-------------------"
Write-Host -ForegroundColor Green "SECTION 1: Getting the list of users"
"-------------------"
# Write Information to the screen
Write-Host -ForegroundColor yellow "Exporting the list of users to c:\users\%username%\users.csv"
# List the users in c:\users and export to the local profile for calling later
dir C:\Users | select Name | Export-Csv -Path C:\users\$env:USERNAME\users.csv -NoTypeInformation
$list=Test-Path C:\users\$env:USERNAME\users.csv
""
#########################
"-------------------"
Write-Host -ForegroundColor Green "SECTION 2: Beginning Script..."
"-------------------"
if ($list) {
    "-------------------"
    #Clear Mozilla Firefox Cache
    Write-Host -ForegroundColor Green "SECTION 3: Clearing Mozilla Firefox Caches"
    "-------------------"
    Write-Host -ForegroundColor yellow "Clearing Mozilla caches"
    Write-Host -ForegroundColor cyan
    Import-CSV -Path C:\users\$env:USERNAME\users.csv -Header Name | foreach {
            Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\cache\* -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\cache\*.* -Recurse -Force -EA SilentlyContinue -Verbose
	    Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\cache2\entries\*.* -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\thumbnails\* -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\cookies.sqlite -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\webappsstore.sqlite -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path C:\Users\$($_.Name)\AppData\Local\Mozilla\Firefox\Profiles\*.default\chromeappsstore.sqlite -Recurse -Force -EA SilentlyContinue -Verbose
            }
    Write-Host -ForegroundColor yellow "Clearing Mozilla caches"
    Write-Host -ForegroundColor yellow "Done..."
    ""
    "-------------------"
    # Clear Google Chrome 
    Write-Host -ForegroundColor Green "SECTION 4: Clearing Google Chrome Caches"
    "-------------------"
    Write-Host -ForegroundColor yellow "Clearing Google caches"
    Write-Host -ForegroundColor cyan
    Import-CSV -Path C:\users\$env:USERNAME\users.csv -Header Name | foreach {
            Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -EA SilentlyContinue -Verbose
Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Google\Chrome\User Data\Default\Cache2\entries\*" -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Google\Chrome\User Data\Default\Cookies" -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Google\Chrome\User Data\Default\Media Cache" -Recurse -Force -EA SilentlyContinue -Verbose
            Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Google\Chrome\User Data\Default\Cookies-Journal" -Recurse -Force -EA SilentlyContinue -Verbose
            # Comment out the following line to remove the Chrome Write Font Cache too.
            # Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Google\Chrome\User Data\Default\ChromeDWriteFontCache" -Recurse -Force -EA SilentlyContinue -Verbose
            }

    Write-Host -ForegroundColor yellow "Done..."
    ""
    "-------------------"
    # Clear Internet Explorer
    Write-Host -ForegroundColor Green "SECTION 5: Clearing Internet Explorer Caches"
     "-------------------"
    Write-Host -ForegroundColor yellow "Clearing Google caches"
    Write-Host -ForegroundColor cyan
    Import-CSV -Path C:\users\$env:USERNAME\users.csv | foreach {
            Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Microsoft\Windows\Temporary Internet Files\*" -Recurse -Force -EA SilentlyContinue -Verbose
	    Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Microsoft\Windows\WER\*" -Recurse -Force -EA SilentlyContinue -Verbose
	    Remove-Item -path "C:\Users\$($_.Name)\AppData\Local\Temp\*" -Recurse -Force -EA SilentlyContinue -Verbose
	    Remove-Item -path "C:\Windows\Temp\*" -Recurse -Force -EA SilentlyContinue -Verbose
	    Remove-Item -path "C:\`$recycle.bin\" -Recurse -Force -EA SilentlyContinue -Verbose
            }

    Write-Host -ForegroundColor yellow "Done..."
    ""
    Write-Host -ForegroundColor Green "All Tasks Done!"
    } else {
	Write-Host -ForegroundColor Yellow "Session Cancelled"	
	Exit
	}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_info</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Local_Administrators_JPHSA</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_info</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Local_Administrators_JPHSA</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'Get-List_LocalAdmins_for_Remote_Computers_given_List_v2.ps1





#'=============================================================================================================

$Computers = get-content C:\DATA\2018_08_24__computers.txt;

foreach ($computer in $Computers) {
    #verify computer is online
    if (Test-Connection -ComputerName $Computer -Count 2 -Quiet) {					#' &lt;===========HERE is the PING

        	write-host "responded to PING:"$computer -ForegroundColor Green
			Add-Content -value $computer -path C:\DATA\2018_08_24__RespondToPing.txt


        Try {
        	#'=====================================================================================Do Something

              $theTargetFolderAndFileName = "C:\DATA\2018_08_24__LocalAdmins.csv"

              $computerName= $computer

              $group = get-wmiobject win32_group -ComputerName $computerName -Filter "LocalAccount=True AND SID='S-1-5-32-544'"
              $query = "GroupComponent = `"Win32_Group.Domain='$($group.domain)'`,Name='$($group.name)'`""
              $list = Get-WmiObject win32_groupuser -ComputerName $computerName -Filter $query
              $computerName
              $list | %{$_.PartComponent} | % {$_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"","\")}

              $step1 = ($list | %{$_.PartComponent} | % {$_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"","\")})


              $step2 = ForEach ($record in $step1)
                {
                    [PSCustomObject]@{
                                        Domain_Admin = $record.Replace('"','')
                                        Computer = $computerName
                                     }#EndPSCustomObject
                } 

              $step2 | Select-Object -Property Domain_Admin, Computer  | Export-Csv -Append -Path $theTargetFolderAndFileName
            #'=====================================================================================END Do Something
        }
        Catch {
            Write-host "Can't get Local Admin data from $($Computer.ToUpper()). %($_.Exception.Message)." -ForegroundColor Red
			Add-Content -value $computer -path C:\DATA\2018_08_24__Exceptions.txt
        }
    } #if can not ping
    else {
        	write-warning "responded to PING:"$computer 
			Add-Content -value $computer -path C:\DATA\2018_08_24__RespondToPing_NOT.txt
    }
} #foreach computer


$wsh = new-object -com wscript.shell
$wsh.Popup("Done",10,"PowerShell Automation",0+64)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_info</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Profile_function_toRemoveLocalUserProfile</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_info</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Profile_function_toRemoveLocalUserProfile</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://gallery.technet.microsoft.com/scriptcenter/Remove-UserProfile-Remove-96e27a3b

#'This script contains a function (Remove-UserProfile) which is used to remove user profiles, 
#'    and additional contents of the C:\Users directory (if specified) on a local computer.  
#' Parameters exist to "Exclude" one or more user profiles from being removed, 
#'    remove only profiles "Before" a date when they have not been accessed, 
#'    and to invoke a "DirectoryCleanup" to remove additional files/folders (i.e. non-profiles) within the C:\Users directory.  
#'    Per profile, the profile object itself and all associated registry keys are removed 
#'        if the profile meets the criteria defined via the cmdlet's parameters.
#'
#'This cmdlet requires adminisrative privileges to run effectively. 
#'    Furthermore, this cmdlet is not intended to be used on Virtual Desktop Infrastructure (VDI) environments 
#'    or others which utilize persistent storage on alternate disks, 
#'    or any configurations which utilize another directory other than C:\Users to store user profiles.  
#'This cmdlet is designed to function with PowerShell versions 2 and above.

'USAGE
-------
#'Remove all non-active and non-system designated user profiles from the local computer. 
Remove-UserProfile 
 
#'Remove all non-active and non-system designated user profiles not used within the past month, displaying verbose output as well. 
Remove-UserProfile -Before (Get-Date).AddMonths(-1) -Verbose 
 
#'Remove all non-active and non-system designated user profiles except "labadmin" and "desktopuser", and remove additional non-profile files/folders within C:\Users as well. 
Remove-UserProfile -Exclude @("labadmin", "desktopuser") -DirectoryCleanup 
 
#'Invoke Remove-UserProfile on a Remote Computer 
$scriptBlock = { 
    function Remove-UserProfile 
    { 
        ... 
    } 
 
    Remove-UserProfile 
} 
 
Invoke-Command -ComputerName "GWS-F20" -ScriptBlock $scriptBlock 
 
#'Invoke Remove-UserProfile on Many Remote Computers, Passing in Arguments 
#'This Example Utilizes Windows Workflow Foundation Technology, Available in PowerShell V3 and Above 
$scriptBlock = { 
    function Remove-UserProfile 
    { 
        ... 
    } 
 
    Remove-UserProfile -Exclude $args 
} 
 
$compArray = @() 
Get-Content -Path "\\path\to\computers.txt" | ForEach-Object { $compArray += $_ } 
 
$excludedList = @("labadmin", "desktopuser") 
 
Invoke-Command -ComputerName $compArray -ScriptBlock $scriptBlock -ArgumentList $excludedList -ThrottleLimit 50

==================================================================================================================

#PowerShell Script Containing Function Used to Remove User Profiles &amp; Additional Remnants of C:\Users Directory
#Developer: Andrew Saraceni (saraceni@wharton.upenn.edu)
#Date: 12/22/14

#Requires -Version 2.0

function Remove-UserProfile
{
    &lt;#
    .SYNOPSIS
    Removes user profiles and additional contents of the C:\Users 
    directory if specified.
    .DESCRIPTION
    Gathers a list of profiles to be removed from the local computer, 
    passing on exceptions noted via the Exclude parameter and/or 
    profiles newer than the date specified via the Before parameter.  
    If desired, additional files and folders within C:\Users can also 
    be removed via use of the DirectoryCleanup parameter.

    Once gathered, miscellaneous items are first removed from the 
    C:\Users directory if specified, followed by the profile objects 
    themselves and all associated registry keys per profile.  A listing 
    of current items within the C:\Users directory is returned 
    following the profile removal process.
    .PARAMETER Exclude
    Specifies one or more profile names to exclude from the removal 
    process.
    .PARAMETER Before
    Specifies a date from which to remove profiles before that haven't 
    been accessed since that date.
    .PARAMETER DirectoryCleanup
    Removes additional files/folders (i.e. non-profiles) within the 
    C:\Users directory.
    .EXAMPLE
    Remove-UserProfile
    Remove all non-active and non-system designated user profiles 
    from the local computer.
    .EXAMPLE
    Remove-UserProfile -Before (Get-Date).AddMonths(-1) -Verbose
    Remove all non-active and non-system designated user profiles 
    not used within the past month, displaying verbose output as well.
    .EXAMPLE
    Remove-UserProfile -Exclude @("labadmin", "desktopuser") -DirectoryCleanup
    Remove all non-active and non-system designated user profiles 
    except "labadmin" and "desktopuser", and remove additional 
    non-profile files/folders within C:\Users as well.
    .NOTES
    Even when not specifying the Exclude parameter, the following 
    profiles are not removed when utilizing this cmdlet:
    C:\Windows\ServiceProfiles\NetworkService 
    C:\Windows\ServiceProfiles\LocalService 
    C:\Windows\system32\config\systemprofile 
    C:\Users\Public
    C:\Users\Default

    Aside from the original profile directory (within C:\Users) 
    itself, the following registry items are also cleared upon 
    profile removal via WMI:
    "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\{SID of User}"
    "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileGuid\{GUID}" SidString = {SID of User}
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\{SID of User}"

    Additionally, any currently loaded/in use profiles will not be 
    removed.  Regarding miscellaneous non-profile items, hidden items 
    are not enumerated or removed from C:\Users during this process.

    This cmdlet requires adminisrative privileges to run effectively.
      
    This cmdlet is not intended to be used on Virtual Desktop 
    Infrastructure (VDI) environments or others which utilize 
    persistent storage on alternate disks, or any configurations 
    which utilize another directory other than C:\Users to store 
    user profiles.
    #&gt;
    
    [CmdletBinding()]
    param(
        [Parameter(Position=0,Mandatory=$false)]
        [String[]]$Exclude,
        [Parameter(Position=1,Mandatory=$false)]
        [DateTime]$Before,
        [Parameter(Position=2,Mandatory=$false)]
        [Switch]$DirectoryCleanup
    )

    Write-Verbose "Gathering List of Profiles on $env:COMPUTERNAME to Remove..."

    $userProfileFilter = "Loaded = 'False' AND Special = 'False'"
    $cleanupExclusions = @("Public", "Default")

    if ($Exclude)
    {
        foreach ($exclusion in $Exclude)
        {
            $userProfileFilter += "AND NOT LocalPath LIKE '%$exclusion'"
            $cleanupExclusions += $exclusion
        }
    }

    if ($Before)
    {
        $userProfileFilter += "AND LastUseTime &lt; '$Before'"

        $keepUserProfileFilter = "Special = 'False' AND LastUseTime &gt;= '$Before'"
        $profilesToKeep = Get-WmiObject -Class Win32_UserProfile -Filter $keepUserProfileFilter -ErrorAction Stop

        foreach ($profileToKeep in $profilesToKeep)
        {
            try
            {
                $userSID = New-Object -TypeName System.Security.Principal.SecurityIdentifier($($profileToKeep.SID))
                $userName = $userSID.Translate([System.Security.Principal.NTAccount])
                
                $keepUserName = $userName.Value -replace ".*\\", ""
                $cleanupExclusions += $keepUserName
            }
            catch [System.Security.Principal.IdentityNotMappedException]
            {
                Write-Warning "Cannot Translate SID to UserName - Not Adding Value to Exceptions List"
            }
        }
    }

    $profilesToDelete = Get-WmiObject -Class Win32_UserProfile -Filter $userProfileFilter -ErrorAction Stop

    if ($DirectoryCleanup)
    {
        $usersChildItem = Get-ChildItem -Path "C:\Users" -Exclude $cleanupExclusions

        foreach ($usersChild in $usersChildItem)
        {
            if ($profilesToDelete.LocalPath -notcontains $usersChild.FullName)
            {    
                try
                {
                    Write-Verbose "Additional Directory Cleanup - Removing $($usersChild.Name) on $env:COMPUTERNAME..."
                    
                    Remove-Item -Path $($usersChild.FullName) -Recurse -Force -ErrorAction Stop
                }
                catch [System.InvalidOperationException]
                {
                    Write-Verbose "Skipping Removal of $($usersChild.Name) on $env:COMPUTERNAME as Item is Currently In Use..."
                }
            }
        }
    }

    foreach ($profileToDelete in $profilesToDelete)
    {
        Write-Verbose "Removing Profile $($profileToDelete.LocalPath) &amp; Associated Registry Keys on $env:COMPUTERNAME..."
                
        Remove-WmiObject -InputObject $profileToDelete -ErrorAction Stop
    }

    $finalChildItem = Get-ChildItem -Path "C:\Users" | Select-Object -Property Name, FullName, LastWriteTime
                
    return $finalChildItem
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_Remote_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01__Disable_Win10_StartButtonBling_LOCAL.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_Remote_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01__Disable_Win10_StartButtonBling_LOCAL.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' Disable_Win10_StartButtonBling_LOCAL.ps1

#' Assume that the following files are located in $thePath:
#'   FOLDER: {5385DD10-22C8-409E-8FB2-179B3CDE95EF}
#'   FILE:   LGPO.exe
#'   FOLDER: StartLayout  {containing file: jphsaStartLayout.xml}


$thePath = '\\win10vm\ALL_Share\win7_to_Win10\'
$fromPath_StartLayout = $thePath + 'StartLayout'
$toPath_StartLayout = "C:\StartLayout"
$toPath_GroupPolicyTempFolder = 'C:\DATA\Group_Policy_Imports'
$fromPath_gpoFolder = $thePath + '{5385DD10-22C8-409E-8FB2-179B3CDE95EF}'
$fromPathFile_LGPO = $thePath + 'LGPO.exe'
$toPath_LGPO = 'C:\Windows\System32'

#' 1] Copy the folder 'StartLayout' to C:\ 

Copy-Item $fromPath_StartLayout -Destination C:\ -Recurse

#' 2] Set permissions on the folder to allow Domain Users READ 

$Acl = Get-Acl $toPath_StartLayout

# Set the permissions that you want to apply to the folder
$permissions = "Domain Users", 'Read,Traverse', 'ContainerInherit,ObjectInherit', 'None', 'Allow'


$Ar = New-Object  system.security.accesscontrol.filesystemaccessrule($permissions)
$Acl.SetAccessRule($Ar)
Set-Acl $toPath_StartLayout $Acl

#' 3] Create 'C:\DATA\Group_Policy_Imports' folder 

New-Item -ItemType directory -Force $toPath_GroupPolicyTempFolder

#' 4] Copy FOLDER: {5385DD10-22C8-409E-8FB2-179B3CDE95EF} to the folder created in Step 3

Copy-Item $fromPath_gpoFolder -Destination $toPath_GroupPolicyTempFolder -Recurse

#' 5] Copy LGPO.exe to C:\Windows\System32 folder

Copy-Item $fromPathFile_LGPO -Destination $toPath_LGPO

#' 6] Run the command: LGPO.exe /g C:\DATA\Group_Policy_Imports

LGPO.exe /g C:\DATA\Group_Policy_Imports</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Computer_Remote_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01__Disable_Win10_StartButtonBling_REMOTE.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Computer_Remote_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01__Disable_Win10_StartButtonBling_REMOTE.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' Disable_Win10_StartButtonBling_REMOTE.ps1

#' Assume that the following files are located in $thePath:
#'   FOLDER: {5385DD10-22C8-409E-8FB2-179B3CDE95EF}
#'   FILE:   LGPO.exe
#'   FOLDER: StartLayout  {containing file: jphsaStartLayout.xml}

$domainCred = Get-Credential -Credential jphsa01\ggarson

$theComputerName = 'it-0926'

$localAdminCred = Get-Credential -Credential administrator

#'============================================================================================================

$thePath = '\\win10vm\ALL_Share\win7_to_Win10\'
$fromPath_StartLayout = $thePath + 'StartLayout'
#'  $toPath_StartLayout = "C:\StartLayout"
#'  $toPath_GroupPolicyTempFolder = 'C:\DATA\Group_Policy_Imports'
$fromPath_gpoFolder = $thePath + '{5385DD10-22C8-409E-8FB2-179B3CDE95EF}'
$fromPathFile_LGPO = $thePath + 'LGPO.exe'
$toPath_LGPO = 'C:\Windows\System32'
$toPath_GroupPolicyTempFolder = 'C:\DATA\Group_Policy_Imports'


#'$localAdminCred = Get-Credential -Credential administrator

#' 1] Copy the folder 'StartLayout' to C:\ 

#'Copy-Item $fromPath_StartLayout -Destination C:\ -Recurse  -Force

#'-------------------------------------------------------------------------------------
$Session = New-PSSession -ComputerName $theComputerName -Credential $domainCred
Copy-Item $fromPath_StartLayout -Destination "C:\" -ToSession $Session -Recurse
#'-------------------------------------------------------------------------------------

Enter-PSSession –ComputerName $theComputerName 

    $toPath_StartLayout = "C:\StartLayout"
    $toPath_GroupPolicyTempFolder = 'C:\DATA\Group_Policy_Imports'

    #' 2] Set permissions on the folder to allow Domain Users READ 

    $Acl = Get-Acl $toPath_StartLayout 

    # Set the permissions that you want to apply to the folder
    $permissions = "Domain Users", 'Read,Traverse', 'ContainerInherit,ObjectInherit', 'None', 'Allow'


    $Ar = New-Object  system.security.accesscontrol.filesystemaccessrule($permissions)
    $Acl.SetAccessRule($Ar)
    Set-Acl $toPath_StartLayout $Acl

    #' 3] Create 'C:\DATA\Group_Policy_Imports' folder 

    New-Item -ItemType directory -Force $toPath_GroupPolicyTempFolder

Exit-PSSession 



#' 4] Copy FOLDER: {5385DD10-22C8-409E-8FB2-179B3CDE95EF} to the folder created in Step 3

#'Copy-Item $fromPath_gpoFolder -Destination $toPath_GroupPolicyTempFolder -Recurse

#'-------------------------------------------------------------------------------------SESSION variable

Copy-Item $fromPath_gpoFolder -Destination $toPath_GroupPolicyTempFolder -ToSession $Session  -Recurse -Force

#'-------------------------------------------------------------------------------------




#' 5] Copy LGPO.exe to C:\Windows\System32 folder

#'Copy-Item $fromPathFile_LGPO -Destination $toPath_LGPO

#'-------------------------------------------------------------------------------------SESSION variable

Copy-Item $fromPathFile_LGPO -Destination $toPath_LGPO -ToSession $Session

#'-------------------------------------------------------------------------------------

#' 6] Run the command: LGPO.exe /g C:\DATA\Group_Policy_Imports

Enter-PSSession –ComputerName $theComputerName    #' try credentials:   -Credential $localAdminCred

        {LGPO.exe /g C:\DATA\Group_Policy_Imports}

Exit-PSSession


#'  Invoke-Command -Session $Session -ScriptBlock {c:\Windows\system32\LGPO.exe /g C:\DATA\Group_Policy_Imports}

#'  PSEXEC \\$theComputerName  -s cmd /c "c:\Windows\system32\LGPO.exe /g C:\DATA\Group_Policy_Imports"

#'============================================================================================================

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DEBUG_ERROR_TroubleShooting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>$Error___built_in_Variable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DEBUG_ERROR_TroubleShooting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>$Error___built_in_Variable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'To clear it:
&gt; $Error.Clear()

'To see all the errors that have occured since it was last cleared:
&gt; $Error | % {$_.exception}

'To get basic info from First error:

=======================================Example
&gt;Get-Content C:   '{To generate error}
'OUTPUT
-------------------------------------------------------
#'Get-Content : Access to the path 'C:\DATA\PowerShellScripts' is denied.
#'At line:1 char:1
#'+ Get-Content C:
#'+ ~~~~~~~~~~~~~~
#'    + CategoryInfo          : PermissionDenied: (C:\DATA\PowerShellScripts:String) [Get-Content], UnauthorizedAccessException
#'    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand


&gt;$Error.Count
'OUTPUT
-------------------------------------------------------
1



&gt;$Error[0].CategoryInfo
'OUTPUT
-------------------------------------------------------
Category   : PermissionDenied
Activity   : Get-Content
Reason     : UnauthorizedAccessException
TargetName : C:\DATA\PowerShellScripts       '{This is the folder which was selected when the code ran}
TargetType : String


&gt;$Error[0].CategoryInfo.Category
'OUTPUT
-------------------------------------------------------
PermissionDenied</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DISM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_DISM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DISM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_DISM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_DISM


'DISM comes with Windows 10, in the c:\windows\system32 folder, 
'	but you can run DISM in the command prompt from any location. 
'You have to be running from a Command Prompt as administrator to use use DISM.

Online vs Offline
-------------------
'You can use DISM offline on a WIM or VHD file, 
'	or online on a running operating system. 
'Offline servicing allows you to modify or service a Windows® image entirely offline, 
'	without booting it first. ... You can also use DISM to service an image online
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_DISM</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Commands</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_DISM</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Commands</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://docs.microsoft.com/en-us/powershell/module/dism/?view=win10-ps

Add-AppxProvisionedPackage		Adds an app package (.appx) that will install for each new user to a Windows image.
Add-WindowsCapability			Installs a Windows capability package on the specified operating system image.
Add-WindowsDriver				Adds a driver to an offline Windows image.
Add-WindowsImage				Adds an additional image to an existing image (.wim) file.
Add-WindowsPackage				Adds a single .cab or .msu file to a Windows image.
Clear-WindowsCorruptMountPoint	Deletes all of the resources associated with a mounted image that has been corrupted.
Disable-WindowsOptionalFeature	Disables a feature in a Windows image.
Dismount-WindowsImage			Dismounts a Windows image from the directory it is mapped to.
Enable-WindowsOptionalFeature	Enables a feature in a Windows image.
Expand-WindowsCustomDataImage	Expands a custom data image.
Expand-WindowsImage				Applies an image to a specified location.
Export-WindowsDriver			Exports all third-party drivers from a Windows image to a destination folder.
Export-WindowsImage				Exports a copy of the specified image to another image file.
Get-AppxProvisionedPackage		Gets information about app packages (.appx) in an image that will be installed for each new user.
Get-WIMBootEntry				Displays the Windows image file boot (WIMBoot) configuration entries for a specified disk volume.
Get-WindowsCapability			Gets Windows capabilities for an image or a running operating system.
Get-WindowsDriver				Displays information about drivers in a Windows image.
Get-WindowsEdition				Gets edition information about a Windows image.
Get-WindowsImage				Gets information about a Windows image in a WIM or VHD file.
Get-WindowsImageContent			Displays a list of the files and folders in a specified image.
Get-WindowsOptionalFeature		Gets information about optional features in a Windows image.
Get-WindowsPackage				Gets information about packages in a Windows image.
Mount-WindowsImage				Mounts a Windows image in a WIM or VHD file to a directory on the local computer.
New-WindowsCustomImage			Captures an image of customized or serviced Windows components on a Windows Image File Boot (WIMBoot) configured device.
New-WindowsImage				Captures an image of a drive to a new WIM file.
Optimize-WindowsImage			Configures a Windows image with specified optimizations.
Remove-AppxProvisionedPackage	Removes an app package (.appx) from a Windows image.
Remove-WindowsCapability		Uninstalls a Windows capability package from an image.
Remove-WindowsDriver			Removes a driver from an offline Windows image.
Remove-WindowsImage				Deletes the specified volume image from a WIM file that has multiple volume images.
Remove-WindowsPackage			Removes a package from a Windows image.
Repair-WindowsImage				Repairs a Windows image in a WIM or VHD file.
Save-WindowsImage				Applies changes made to a mounted image to its WIM or VHD file.
Set-AppXProvisionedDataFile	Adds custom data into the specified app (.appx) package that has been provisioned in a Windows image.
Set-WindowsEdition				Changes a Windows image to a higher edition.
Set-WindowsProductKey			Sets the product key for the Windows image.
Split-WindowsImage				Splits an existing .wim file into multiple read-only split .wim files.
Update-WIMBootEntry				Updates the Windows image file boot (WIMBoot) configuration entry, associated with either the specified data source ID, the renamed image file path or the moved image file path.
Use-WindowsUnattend				Applies an unattended answer file to a Windows image.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Event_Logs</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get_differentTypesOfErrors_OutputEachTypeToASeperateFile_usesSubExpressionToGetTheFileNames</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Event_Logs</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get_differentTypesOfErrors_OutputEachTypeToASeperateFile_usesSubExpressionToGetTheFileNames</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' Creates a file for each 'Source' of errors in the EventLog
#' Writes the errors of that type to the appropriate file
#' Targets the C:\junk folder
#' shows a count of the number of errors
#' Uses a SubExpression to get the 'name' of the error, and thus name the file



get-eventlog application -EntryType Error,Warning | Group Source | foreach {
$file = Join-Path -path C:\junk -ChildPath "$($_.name).txt"
"$($_.count) entries" | Out-File -FilePath $file
$_.group | foreach {
 $_ | Select TimeGenerated,EntryType | Out-File -FilePath $file -Append
 $_ | Select -ExpandProperty Message | Out-File -FilePath $file -Append
}
Get-Item $file
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_Files_Folders_Directories</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_Files_Folders_Directories</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_Files_Folders_Directories


'For an alias to check for file existance see "alias_Exist_or_NotExist_a_file" under Misc</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>COPY_From_one_directory_to_another_directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>COPY_From_one_directory_to_another_directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' You can import modules without including the path if you store it
#' in one of the default locations. To see this, look at the 
#' environment variable PSModulePath
$env:PSModulePath

#' We will use the 'User' location for modules. Note if you've not used
#' modules before, the WindowsPowerShell\Modules\ folder may not exist, 
#' so check first to see if you need to manually create. 

#' Here is the path to the user folder of modules for this machine
#' (if you are running on your own computer, you'll need to update for
#' your computer)
$userModulePath = 'C:\Users\rcain_000\Documents\WindowsPowerShell\Modules\'

#' Reminder here's the original path for the demos
$modulePath = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'

#' Name of our module
$moduleName = 'bpsd-m05-module-advanced-module'

#' First, we'll setup the new path for our module in the user folder,
#' then create that folder
$userModulePathBPSD = "$($userModulePath)$($moduleName)" 
New-Item -ItemType directory -Force $userModulePathBPSD

#' Note if you have made a lot of changes to the files (i.e. removing files 
#' from the module) you may wish to clean out the directory prior to copying
Remove-Item "$($userModulePathBPSD)\*.*"

#' Copy our module to the users module folder (force will overwrite if there)
Copy-Item "$($modulePath)bpsd-m05-module-advanced-*.*" `    #' &lt;===========COPY from SOURCE
          $userModulePathBPSD `								#' &lt;===========To Destination 
          -Force

================================================================================================================
For more details see: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/copy-item?view=powershell-6
----------------------------------------------------------------------------------
'Example 1: Copy a file to the specified directory
Copy-Item "C:\Wabash\Logfiles\mar1604.log.txt" -Destination "C:\Presentation"
----------
'Example 2: Copy the contents of a directory to another directory
Copy-Item "C:\Logfiles" -Destination "C:\Drawings" -Recurse
------------
'Example 3: Copy the contents of a directory to another directory and create the destination directory if it does not exist
Copy-Item C:\Logfiles -Destination C:\Drawings\Logs -Recurse
----------
'Example 4: Copy a file to the specified directory and rename the file
Copy-Item "\\Server01\Share\Get-Widget.ps1" -Destination "\\Server12\ScriptArchive\Get-Widget.ps1.txt"
-----------
'Example 5: Copy a file to a remote computer
&gt; $Session = New-PSSession -ComputerName "Server01" -Credential "Contoso\PattiFul"
&gt; Copy-Item "D:\Folder001\test.log" -Destination "C:\Folder001_Copy\" -ToSession $Session

#'    The first command creates a session to the remote computer 
#'        named Server01 with the credential of Contoso\PattiFul 
#'        and stores the results in the variable named $Session.
#'    The second command uses the Copy-Item cmdlet to copy test.log 
#'        from the D:\Folder001 folder to the C:\Folder001_Copy folder 
#'        on the remote computer using the session information stored in the $Session variable. 
#'        This command does not delete the original file.
#'
------------
'Example 6: Copy the entire contents of a folder to a remote computer
&gt; $Session = New-PSSession -ComputerName "Server02" -Credential "Contoso\PattiFul"
&gt; Copy-Item "D:\Folder002\" -Destination "C:\Folder002_Copy\" -ToSession $Session
'The subfolders are copied with their file trees intact.
-------------
'Example 7: Recursively copy the entire contents of a folder to a remote computer
&gt; $Session = New-PSSession -ComputerName "Server04" -Credential "Contoso\PattiFul"
&gt; Copy-Item "D:\Folder003\" -Destination "C:\Folder003_Copy\" -ToSession $Session -Recurse

'The subfolders are copied with their file trees intact. Since this command uses the Recurse parameter, 
'	the operation creates the Folder003_Copy folder if it does not already exist.
-----------
'Example 8: Copy a file to a remote computer and then rename the file
&gt; $Session = New-PSSession -ComputerName "Server04" -Credential "Contoso\PattiFul"
&gt; Copy-Item "D:\Folder004\scriptingexample.ps1" -Destination "C:\Folder004_Copy\scriptingexample_copy.ps1" -ToSession $Session
--------------
'Example 9: Copy a remote file to the local computer
&gt; $Session = New-PSSession -ComputerName "Server01" -Credential "Contoso\PattiFul"
&gt; Copy-Item "C:\MyRemoteData\test.log" -Destination "D:\MyLocalData\" -FromSession $Session

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>CREATE_Folder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>CREATE_Folder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$env:PSModulePath

#' We will use the 'User' location for modules. Note if you've not used
#' modules before, the WindowsPowerShell\Modules\ folder may not exist, 
#' so check first to see if you need to manually create. 

#' Here is the path to the user folder of modules for this machine
#' (if you are running on your own computer, you'll need to update for
#' your computer)
$userModulePath = 'C:\Users\rcain_000\Documents\WindowsPowerShell\Modules\'

#' Reminder here's the original path for the demos
$modulePath = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'

#' Name of our module
$moduleName = 'bpsd-m05-module-advanced-module'

#' First, we'll setup the new path for our module in the user folder,
#' then create that folder
$userModulePathBPSD = "$($userModulePath)$($moduleName)" 
New-Item -ItemType directory -Force $userModulePathBPSD             #' &lt;==== CREATE the directory</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>File_Manipulation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>File_Manipulation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Renaming Existing Items (Rename-Item)
'To change the name of a file or folder, use the Rename-Item cmdlet. 
'The following command changes the name of the file1.txt file to fileOne.txt.

PS&gt; Rename-Item -Path C:\temp\New.Directory\file1.txt fileOne.txt

'Moving Items (Move-Item)
&gt; Move-Item -Path C:\temp\New.Directory -Destination C:\ -PassThru

'Deleting Items (Remove-Item)
Remove-Item C:\New.Directory

Confirm
The item at C:\temp\New.Directory has children and the -recurse parameter was not
specified. If you continue, all children will be removed with the item. Are you
 sure you want to continue?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is "Y"):

'Because Yes is the default response, to delete the folder and its files, press the Enter key. 
'	To remove the folder without confirming, use the -Recurse parameter.

&gt; Remove-Item C:\temp\New.Directory -Recurse

'Executing Items (Invoke-Item)
'	Windows PowerShell uses the Invoke-Item cmdlet to perform a default action for a file or folder. 
'	This default action is determined by the default application handler in the registry; 
'	the effect is the same as if you double-click the item in File Explorer.

&gt; Invoke-Item C:\WINDOWS
'An Explorer window that is located in C:\Windows appears, just as if you had double-clicked the C:\Windows folder.

&gt; Invoke-Item C:\boot.ini
'If the .ini file type is associated with Notepad, the boot.ini file opens in Notepad.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Folder_Create_it_IF_it_does_NotAlreadyExist</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Folder_Create_it_IF_it_does_NotAlreadyExist</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$thisComputerName = $env:computername
$theFolderName = "$thisComputerName" +  "__$(Get-Date -Format "yyyy_M_d")"
$destinationPath = 'H:\'

$htmlOut = "$destination\$theFolderName\ChromeBookmarks.html"

if(!(test-path "$destination\$theFolderName")){
                                                  new-item "$destination\$theFolderName" -ItemType Directory
                                                }
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FOLDERS_Blocked_Inheritance</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FOLDERS_Blocked_Inheritance</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'https://www.petri.com/identify-folders-with-blocked-inheritance-using-powershell
'AreAccessRulesProtected is a boolean property. If the value is true, then inheritance has been disabled. 
cls
dir 'C:\Program Files' -Directory | get-acl | 
Select @{Name="Path";Expression={Convert-Path $_.Path}},AreAccessRulesProtected |
Format-table -AutoSize
#' If the value is true, then inheritance has been disabled

--------------

'Because the AreAccessRulesProtected property is a boolean, you don’t need to use the –eq operator, 
'	so it’s a simple matter to filter out folders that have blocked inheiritance
dir c:\work -Directory -recurse | get-acl | 
Where {$_.AreAccessRulesProtected} | 
Select @{Name="Path";Expression={Convert-Path $_.Path}},AreAccessRulesProtected |
format-table -AutoSize
'These are the folders under C:\Work that have inheritance disabled.
'If I want to find folders that have inheritance enabled, then I can use the –NOT operator in my filter.

-----------------
'This on the other had is the folders w/ blocked inheritance:
cls
dir 'C:\Program Files' -Directory -recurse | get-acl | 
Where  {-not $_.AreAccessRulesProtected} | 
Select @{Name="Path";Expression={Convert-Path $_.Path}},AreAccessRulesProtected |
format-table -AutoSize


====================================================
'Let’s say you want to re-enable inheritance once you’ve identified folders with blocked inheritance. The following outlines a simple way to do so.

'First, we need the access control list for a folder.
&gt;$acl = get-acl c:\work\demo2
'To modify, we can use the SetAccessRuleProtection() method, which takes a few parameters.

------------
'This will let you see the overloads
$acl.SetAccessRuleProtection.OverloadDefinitions
-----------

'The parameter values are both boolean. 
'The second parameter indicates if you want to save existing rules, and I generally do.

&gt;$acl.SetAccessRuleProtection($False,$True)

'All I’ve done is set the property on the ACL object. It hasn’t been applied to the folder. 
'To accomplish that, I need to use Set-ACL.

&gt;set-acl -Path c:\work\demo2 -AclObject $acl

==============================================================
'To make life easier, I have a function called Set-Inheritance.

#requires -version 3.0
 
Function Set-Inheritance {
 
[cmdletbinding(SupportsShouldProcess)]
 
	Param(
		[Parameter(Position=0,Mandatory,HelpMessage="Enter the file or folder path",
		 ValueFromPipeline=$True,ValueFromPipelineByPropertyName)]
	[ValidateNotNullOrEmpty()]
	[Alias("PSPath")]
	[string]$Path,
	[switch]$NoInherit,
	[switch]$NoPreserve,
	[switch]$Passthru
)

'With this function, I can easily reset inheritance with a one-line command:
&gt;dir c:\work -Directory -recurse | get-acl | Where {$_.AreAccessRulesProtected} | set-inheritance -whatif

'If I intentionally want to disable or block inheritance, I can do that as well.
&gt;Set-Inheritance C:\work\demo1 -NoInherit

'Be careful about using the –NoPreserve parameter with my function. If you use it all existing permissions will be wiped out</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FOLDERS_Count_of_files_in_each_subFolder_AndTotalSize</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FOLDERS_Count_of_files_in_each_subFolder_AndTotalSize</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>dir G:\Data\Christin -Directory | 			#'Get Each Directory
foreach -begin { $h=@{} ; 			#'BEFORE: Initialize an empty hash table
                 $results=@() 		#'		 Initialize an empty array
               } -process {  		
               						#'Get a directory of every directory that comes through the initial command
               						#	'	and Pipe it to 'Measure-Object'
                            $stat = dir $_.FullName -file -Recurse | Measure-Object -Property length -sum
                            $h.Path = $_.fullname
                            $h.Files = $stat.count
                            $h.TotalSize = $stat.sum
                            $results+=[pscustomobject]$h	#'Create a custom object, and add the custom object to the array
                           } -end { 	#'Write the results to the Pipeline after the middle section is done
                                        $results 
                                    }
                                    
'OUTPUT
========================
#'Path                                             Files  TotalSize
#'----                                             -----  ---------
#'G:\Data\Christin\26Mckinnishcove                     8   44234296
#'G:\Data\Christin\8brentwood                          1      16116
#'G:\Data\Christin\AudubonGutters                      8    3092840
#'G:\Data\Christin\Bike                                8    1619742
#'G:\Data\Christin\BirthCertificate                    1    2045627
#'G:\Data\Christin\BLOG_CC_CreativeConcepts          369  443978908
#'G:\Data\Christin\CelesteHouse                       10    2388822
#'G:\Data\Christin\ChristinFolder_From_BV_Computer   464 1099051460
#'G:\Data\Christin\ComForce                            6    9216101
#'G:\Data\Christin\creditcard                         16   11680278
#'
                                    </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FOLDERS_that_do_not_inherit_permissions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FOLDERS_that_do_not_inherit_permissions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

=========================
https://stackoverflow.com/questions/25126877/getting-names-of-folders-that-do-not-inherit-permissions

'CMD
&gt;DIR "C:\temp" -directory -recurse | GET-ACL | where {$_.Access.IsInherited -eq $false}

'POWERSHELL:
'The concept is: if a folder has at least 1 inherited access rule, 
'	then inheritance is enabled, 
'	if it has 0 inherited rules, inheritance is disabled.
&gt; Get-ChildItem C:\temp -recurse | Select @{Name='Path';Expression={$_.FullName}},@{Name='InheritedCount';Expression={(Get-Acl $_.FullName | Select -ExpandProperty Access | Where { $_.IsInherited }).Count}} | Where { $_.InheritedCount -eq 0 } | Select Path

=================================================================

'	You can use Add-Member to add the path as a property on each ACE object:
'	I also wrapped Get-Acl in a try block because it throws terminating errors.
dir c:\temp -Directory -Recurse | ForEach-Object {
    $Path = $_.FullName
    try {
        Get-Acl $Path | 
            select -ExpandProperty Access | 
            where { $_.IsInherited -eq $false } | 
            Add-Member -MemberType NoteProperty -Name Path -Value $Path -PassThru
    }
    catch {
        Write-Error $_
    }
}

================================================================
#'https://www.experts-exchange.com/questions/28395713/How-to-enumerate-which-folders-are-not-inheriting-permissions-from-parent-folder.html

NOTE: the output did not make sense, it only listed the subfolders, not sub-sub folders
	  and the output did not match what I was observing in the permissions

#requires -version 3

$Path = "c:\temp"
$Folders = Get-ChildItem $Path -Directory -Recurse
$statuses = @()

Foreach ($Folder in $Folders)
{
    $ACLs = Get-Acl -Path $Folder.fullname | ForEach-Object { $_.Access }
    Foreach ($ACL in $ACLs)
    {
        if (!($ACL.IsInherited))
        {
                $status = [ordered]@{ 
                FolderPath = $Folder.Fullname;
                IsInherited = $ACL.IsInherited;
                InheritanceFlags = $ACL.InheritanceFlags;
                PropagationFlags = $ACL.PropagationFlags }
            $statuses += (New-Object -TypeName PSObject -Property $status)
            break;
        }
        
    }
}
$statuses | Export-Csv -Path c:\temp\report.csv -Encoding ASCII -NoTypeInformation </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>FOLDERS_ThatDoNotInherit_working_version</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>FOLDERS_ThatDoNotInherit_working_version</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#requires -version 3

$Path = "G:\Administration Division"
$Folders = Get-ChildItem $Path -Directory -Recurse
$statuses = @()

Foreach ($Folder in $Folders)
{
    $ACLs = Get-Acl -Path $Folder.fullname | ForEach-Object { $_.Access }
    Foreach ($ACL in $ACLs)
    {
        if (!($ACL.IsInherited))
        {
                $status = [ordered]@{ 
                FolderPath = $Folder.Fullname;
                IsInherited = $ACL.IsInherited;
                InheritanceFlags = $ACL.InheritanceFlags;
                PropagationFlags = $ACL.PropagationFlags }
            $statuses += (New-Object -TypeName PSObject -Property $status)
            break;
        }
        
    }
}
$statuses | Export-Csv -Path c:\JUNK\AdministrationDivision_DoNotInherit.csv -Encoding ASCII -NoTypeInformation </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get_Folder_Owner</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get_Folder_Owner</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>function Get-FolderOwner {
    param (
        [string[]]$folders,
        [string]$skip
    )

    foreach ($folder in $folders) {
        Write-Progress -Activity "Working on $folder"

        gci $folder -recurse -File | ? { $_.fullname -notmatch "\\$skip(?:\\|$)" } | % {
            $_ | select directoryname, name, length, @{n='Owner';e={(Get-Acl $_.fullname).Owner}}, creationtime, lastwritetime
        }
    }
}

Get-FolderOwner C:\Users\glenn\</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>get_Number_ofFiles_andTheirTotalSize_in_a_Directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>get_Number_ofFiles_andTheirTotalSize_in_a_Directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'In the Temp folder:
dir $env:temp -file -Recurse | Measure-Object Length -sum | 
Select Count,@{Name="SumMB";Expression = {[math]::round($_.sum/1mb,3)}}


'OUTPUT
=========
Count  SumMB
-----  -----
  292 169.84
  
  
-----------------------------------------------------------------------------

&gt;dir C:\Data -file -Recurse | Measure-Object Length -sum | 
Select Count,@{Name="SumMB";Expression = {[math]::round($_.sum/1mb,3)}}

Count SumMB
----- -----
  109 0.469
  </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get-Location_Set-Location_-PassThru</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get-Location_Set-Location_-PassThru</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'For example, Windows PowerShell typically starts in the user's home directory.

&gt; Get-Location

Path                                                                                                                                                                                           
----                                                                                                                                                                                           
C:\Users\glenng

==========================================


&gt; Set-Location -Path C:\Windows


========================================

'The -PassThru parameter can be used with many Set commands in Windows PowerShell 
'	to return information about the result in cases in which there is no default output.


==========================================
'Paths relative to your current location
'For example, if you are in the C:\Windows folder, a period (.)represents C:\Windows 
'	and double periods (..) represent C:. 
'	You can change from your current location to the root of the C: drive by typing:
PS&gt; Set-Location -Path .. -PassThru

===========================================

'You can type Set-Location or use any of the built-in Windows PowerShell aliases for Set-Location (cd, chdir, sl). For example:

cd -Path C:\Windows
chdir -Path .. -PassThru
sl -Path HKLM:\SOFTWARE -PassThru

==========================================

'Saving and Recalling Recent Locations (Push-Location and Pop-Location)

'The Push-Location cmdlet in Windows PowerShell creates a ordered history (a "stack") of directory paths where you have been, 
'	and you can step back through the history of directory paths by using the complementary Pop-Location cmdlet.

'To push the current location onto the stack, and then move to the Local Settings folder, type:

 PS&gt; Push-Location -Path "Local Settings"

'You can then push the Local Settings location onto the stack and and move to the Temp folder by typing:

PS&gt; Push-Location -Path Temp

'You can verify that you changed directories by entering the Get-Location command:

PS&gt; Get-Location

Path
----
C:\Documents and Settings\PowerUser\Local Settings\Temp


'You can then pop back into the most recently visited directory by entering the Pop-Location command, 
'	and verify the change by entering the Get-Location command:
PS&gt; Pop-Location
PS&gt; Get-Location

Path
----
C:\Documents and Settings\me\Local Settings

===================================================
NETWORK PATHS

'You can also use the Location cmdlets with network paths. 
'If you have a server named FS01 with an share named Public, you can change your location by typing

Set-Location \\FS01\Public
'or
Push-Location \\FS01\Public</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Interogating_text_LOG_files_on_multiple_Drives</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Interogating_text_LOG_files_on_multiple_Drives</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

param(
        [string]$ComputerName = 'localhost',[datetime]$StartTimestamp,[datetime]$EndTimestamp,[string]$LogFileExtension = 'log')

##' Define the drives to look for log files if local or the shares to look for when remote
if ($ComputerName -eq 'localhost') {
    #' Win32_LogicalDisk list all attached and local drives (=3), network drives (=4), floppy drives, DVD (=5)
    #' DriveType = '3' os for local drives
    #' DeviceID is the Driver Letter w/ a semicolon
    $Locations = (Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType = '3'").DeviceID
} else {
    ## Enumerate all the 'admin' shares
    $Shares = Get-CimInstance -ComputerName $ComputerName -Class Win32_Share | where { $_.Path -match '^\w{1}:\\$' }
    [System.Collections.ArrayList]$Locations = @()
    foreach ($Share in $Shares) {
	    $Share = "\\$ComputerName\$($Share.Name)"
	    #' TEST the share, if it throws an error, then ignore it, otherwise add it to the ArrayList: $Locations
	    if (!(Test-Path $Share)) {
		    Write-Warning "Unable to access the '$Share' share on '$Computername'"
	    } else {
		    $Locations.Add($Share) | Out-Null	
	    }
    }
}

##' Build the HashTable variable for Parameters, to perform splatting on Get-ChildItem
$GciParams = @{
	Path = $Locations
    Filter = "*.$LogFileExtension"
	Recurse = $true						#'  &lt;=== recursively look in all sub-folders
	Force = $true						#'  &lt;=== this will find hidden files
	ErrorAction = 'SilentlyContinue'
	File = $true
}

##' Build the Where-Object scriptblock on a separate line due to it's length
$WhereFilter = {($_.LastWriteTime -ge $StartTimestamp) -and ($_.LastWriteTime -le $EndTimestamp) -and ($_.Length -ne 0)}

##' Find all interesting log files
Get-ChildItem @GciParams | Where-Object $WhereFilter</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>LIST_Files_in_Folders_and_SubFolders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>LIST_Files_in_Folders_and_SubFolders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'LIST_Files_in_Folders_and_SubFolders

 'Get all the PDF files in the folder/subfolders of  "D:\xplr" and write as .csv to: "C:\JUNK\directory.csv"
 Get-ChildItem -Path D:\xplr -Include *.pdf -Recurse | Export-Csv -Force -NoTypeInformation C:\JUNK\directory.csv

'Just a list of files and folders in a folder:, but not subfolders
Get-ChildItem -Path E:\music

'This would be the command to see only the directories at the E:\Music level:
Get-ChildItem -Path E:\music –Directory

'To see only the files at this level, I change it to use the –File switch:
Get-ChildItem -Path E:\music –File

'When I use the –Recurse switch, I can see the folders in addition to the files inside each of the folders.
' but it is not clean like a database, but rather formatted and broken up by folder
Get-ChildItem -Path E:\music\Santana –Recurse

'This sorts it, BUT still not right for a database, b/c it is formatted, and broken up by folders
Get-ChildItem -Path E:\music\Santana -Recurse -File | sort length –Descending

'tems that are normally invisible in File Explorer or Cmd.exe are not displayed in the output of a Get-ChildItem command. 
'	To display hidden items, use the Force parameter of Get-ChildItem. For example:
Get-ChildItem -Path C:\Windows -Force

'To find all files that begin with the letter x in the Windows directory, type:
 Get-ChildItem -Path C:\Windows\x*
 
'To find all files whose names begin with x or z, type:
Get-ChildItem -Path C:\Windows\[xz]*

'You can omit files that have any of these numbers in their names by using the Exclude parameter with the pattern *[9516]*:
Get-ChildItem -Path C:\WINDOWS\System32\w*32*.dll -Exclude *[9516]*

'To specify a recursive search for files whose names match a special pattern, use the -Include parameter.
&gt; Get-ChildItem -Path C:\Windows -Include *.dll -Recurse -Exclude [a-y]*.dll

'This one-line command will invoke Windows PowerShell to write a directory listing to a CSV file, 
'which is easy to use in spreadsheets and database programs. 
'It recurses subfolders, and it includes the following information: 
'			full file name, creation time, last modified time, file size, and owner (last modified by).


powershell "Get-ChildItem -Recurse c:\directory\to\scan\ | ForEach-Object {$_ | add-member -name "Owner" -membertype noteproperty -value (get-acl $_.fullname).owner -passthru} | Sort-Object fullname | Select FullName,CreationTime,LastWriteTime,Length,Owner | Export-Csv -Force -NoTypeInformation c:\folder\to\directory.csv"


'to limit to folders add 
	"| ?{ $_.PSIsContainer }" 
	'before 
	"| ForEach-Object" 		'(no quotation marks)
	
'this version uses relative paths (code not tested)
powershell "Get-ChildItem -Recurse . | ?{ $_.PSIsContainer } | ForEach-Object {$_ | add-member -name "Owner" -membertype noteproperty -value (get-acl $_.fullname).owner -passthru} | Sort-Object fullname | Select FullName,CreationTime,LastWriteTime,Length,Owner | Export-Csv -Force -NoTypeInformation .\directory.csv" 	

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Get-ChildItem -Recurse 'W:\Equipment Titles and Registrations' |
     ForEach-Object {$_ |
                            add-member -name "Owner" -membertype noteproperty -value (get-acl $_.fullname).Owner -passthru       
                    } |   
     ForEach-Object {$_ |
                            add-member -name "TheFileName" -membertype noteproperty -value  $_.name -passthru    
                    } |                                    
       Sort-Object fullname |
        Select FullName,CreationTime,LastWriteTime,Length,Owner,TheFileName |
         Export-Csv -Force -NoTypeInformation c:\directory.csv

'OUTPUT:============================================================================================================
FullName																CreationTime	LastWriteTime	Length	Owner					TheFileName
C:\Junk\Report Project1													11/6/2015 16:47	11/6/2015 16:47			BUILTIN\Administrators	Report Project1
C:\Junk\Report Project1\Report Project1									11/6/2015 16:47	11/6/2015 16:47			BUILTIN\Administrators	Report Project1
C:\Junk\Report Project1\Report Project1.sln								11/6/2015 16:47	11/6/2015 16:47	1342	BUILTIN\Administrators	Report Project1.sln
C:\Junk\Report Project1\Report Project1\Report Project1.rptproj			11/6/2015 16:47	2/6/2014 13:49	204		BUILTIN\Administrators	Report Project1.rptproj
C:\Junk\Report Project1\Report Project1\Report Project1.rptproj.user	11/6/2015 16:47	11/9/2015 7:45	1076	BUILTIN\Administrators	Report Project1.rptproj.user
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>List_files_under_directory_with_ProgressBar</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>List_files_under_directory_with_ProgressBar</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$dir = 'G:\Data'			' &lt;=======This is the directory that it will search

$files = [System.IO.Directory]::EnumerateFiles($dir, '*.*', 'AllDirectories') | % {$_}
$index = 0
$total = @($files).Count
$starttime = $lasttime = Get-Date
gci $dir -recurse -File | % {
    $index++
    $currtime = (Get-Date) - $starttime
    $avg = $currtime.TotalSeconds / $index
    $last = ((Get-Date) - $lasttime).TotalSeconds
    $left = $total - $index
    $WrPrgParam = @{
        Activity = (
            "Get-FolderOwner $(Get-Date -f s)",
            "Total: $($currtime -replace '\..*')",
            "Avg: $('{0:N2}' -f $avg)",
            "Last: $('{0:N2}' -f $last)",
            "ETA: $('{0:N2}' -f ($avg * $left / 60))",
            "min ($([string](Get-Date).AddSeconds($avg*$left) -replace '^.* '))"
        ) -join ' '
        Status = "$index of $total ($left left) [$('{0:N2}' -f ($index / $total * 100))%]"
        CurrentOperation = "File: $($_.FullName)"
        PercentComplete = $index / $total * 100
    }
    Write-Progress @WrPrgParam
    $lasttime = Get-Date

    $_ | select directoryname, name, length, @{n='Owner';e={(Get-Acl $_.fullname).Owner}}, creationtime, lastwritetime
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>My Documents__Path</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>My Documents__Path</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$myDocumentsPath = [Environment]::GetFolderPath("MyDocuments")</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PATH__Test-Path__Split-Path__Join-Path</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PATH__Test-Path__Split-Path__Join-Path</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'PATH__Test-Path__Split-Path__Join-Path



'Resolve-Path
================
'Resolve-Path will give you the full path to a location. 
'The important thing is that it will expand wildcard lookups for you. 
'You will get an array of values if there are more than one matche.

Resolve-Path -Path 'c:\users\*\documents'

'OUTPUT
---------
Path
----
C:\users\kevin.marquette\Documents
C:\users\Public\Documents
That will enumerate all the local users document folders.





'Test-Path
==========
If( Test-Path -Path $Path )
{
    Do-Stuff -Path $Path
}


'Split-Path
==========
'Split-Path will take a full path to a file and gives you the parent folder path.

PS:&gt; Split-Path -Path 'c:\users\kevin.marquette\documents'
'OUTPUT
---------
c:\users\kevin.marquette


'If you need the file or folder at the end of the path, you can use the -Leaf argument to get it.

PS:&gt; Split-Path -Path 'c:\users\kevin.marquette\documents' -Leaf
'OUTPUT
---------
documents


'Join-Path
==========
'Join-Path can join folder and file paths together.
'You don’t have to worry about how to handle the backslash becuse this takes care of it for you. 
'If your variables both have backslashes in them, it sorts that out too.


PS:&gt; Join-Path -Path $env:temp -ChildPath testing
'OUTPUT
---------
C:\Users\kevin.marquete\AppData\Local\Temp\testing

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PATH</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PATH</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$modulePath = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'
$moduleName = 'bpsd-m05-module-simple'

$module = "$($modulePath)$($moduleName).psm1"


==================================================
'To create the new path, it is a best practice to use the Join-Path cmdlet 
'instead of doing string concatenation and attempting to manually build 
'the path to the new folder. 
'The Join-Path cmdlet will put together a parent path and a child path 
'to create a new path. This is seen here:

$ModulePath = Join-Path -path $userPath `
               -childpath (Get-Item -path $name).basename
               
=============================================
#' a script property called 'basename' in the System.Io.FileInfo class

PS C:&gt; (Get-Item -Path C:\fso\HelloWorld.psm1).basename
HelloWorld              </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Permissions_FileSystemRights_Enum</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Permissions_FileSystemRights_Enum</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>AppendData				4	Specifies the right to append data to the end of a file.
ChangePermissions		262144	Specifies the right to change the security and audit rules associated with a file or folder.
CreateDirectories		4	Specifies the right to create a folder.
CreateFiles				2	Specifies the right to create a file.
Delete					65536	Specifies the right to delete a folder or file.
DeleteSubdirectoriesAndFiles	64	Specifies the right to delete a folder and any files contained within that folder.
ExecuteFile				32	Specifies the right to run an application file.
FullControl				2032127	Specifies the right to exert full control over a folder or file, and to modify access control and audit rules. This value represents the right to do anything with a file and is the combination of all rights in this enumeration.
ListDirectory			1	Specifies the right to read the contents of a directory.
Modify					197055	Specifies the right to read, write, list folder contents, delete folders and files, and run application files. This right includes the ReadAndExecute right, the Writeright, and the Delete right.
Read					131209	Specifies the right to open and copy folders or files as read-only. This right includes the ReadData right, ReadExtendedAttributes right, ReadAttributes right, and ReadPermissions right.
ReadAndExecute			131241	Specifies the right to open and copy folders or files as read-only, and to run application files. This right includes the Read right and the ExecuteFile right.
ReadAttributes			128	Specifies the right to open and copy file system attributes from a folder or file. For example, this value specifies the right to view the file creation or modified date. This does not include the right to read data, extended file system attributes, or access and audit rules.
ReadData				1	Specifies the right to open and copy a file or folder. This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.
ReadExtendedAttributes	8	Specifies the right to open and copy extended file system attributes from a folder or file. For example, this value specifies the right to view author and content information. This does not include the right to read data, file system attributes, or access and audit rules.
ReadPermissions			131072	Specifies the right to open and copy access and audit rules from a folder or file. This does not include the right to read data, file system attributes, and extended file system attributes.
Synchronize				1048576	Specifies whether the application can wait for a file handle to synchronize with the completion of an I/O operation.
TakeOwnership			524288	Specifies the right to change the owner of a folder or file. Note that owners of a resource have full access to that resource.
Traverse				32	Specifies the right to list the contents of a folder and to run applications contained within that folder.
Write					278	Specifies the right to create folders and files, and to add or remove data from files. This right includes the WriteData right, AppendData right, WriteExtendedAttributes right, and WriteAttributesright.
WriteAttributes			256	Specifies the right to open and write file system attributes to a folder or file. This does not include the ability to write data, extended attributes, or access and audit rules.
WriteData				2	Specifies the right to open and write to a file or folder. This does not include the right to open and write file system attributes, extended file system attributes, or access and audit rules.
WriteExtendedAttributes	16	Specifies the right to open and write extended file system attributes to a folder or file. This does not include the ability to write data, attributes, or access and audit rules.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Permissions_recursive_on_items_in_Directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Permissions_recursive_on_items_in_Directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> 
 #' This is just a huge list by folder
 #' You have to CD to the target folder, and it saves the output file
 #' to the target folder
 Get-ChildItem -Recurse | where-object {($_.PsIsContainer)} | get-acl | format-list &gt; permission.txt
 ================================================================
 
#' GDrive_Permissions.ps1
 #' This is 3 column output: User, Access, folder
 #' it saves the output file to the share in the last line
 #' Make sure to change the date in the last line of code



 
#'Get-childitem \\jphsa.org\shared\Users\ggarson -recurse | where{$_.psiscontainer} |
Get-childitem \\jphsa.org\shared\Data -recurse | where{$_.psiscontainer} |
Get-Acl | % {
    $path = $_.Path
    $_.Access | % {
        New-Object PSObject -Property @{
            Folder = $path.Replace("Microsoft.PowerShell.Core\FileSystem::","")
            Access = $_.FileSystemRights
            Control = $_.AccessControlType
            User = $_.IdentityReference
            Inheritance = $_.IsInherited
            }
        }
    } | select-object -Property User, Access, Folder | export-csv \\win10vm\PROJECTS_Large_files\p_0010_Network_Servers_Routers_etc\G_Drive_Permissions_from_PowerShell\output_2018_07_18.csv -force


 =================================================================
 #' This is 3 column output: User, Access, folder
 #' You have to CD to the target folder, and it saves the output file
 #' to the target folder 
 
 Get-childitem \\jphsa.org\shared\Data\CPS -recurse | where{$_.psiscontainer} |
				Get-Acl | % {
							    $path = $_.Path
							    $_.Access | % {
							        New-Object PSObject -Property @{
							            Folder = $path.Replace("Microsoft.PowerShell.Core\FileSystem::","")
							            Access = $_.FileSystemRights
							            Control = $_.AccessControlType
							            User = $_.IdentityReference
							            Inheritance = $_.IsInherited
							            }
							        }
							    } | select-object -Property User, Access, Folder | export-csv output.csv -force
    
#' Sample output
User				Access						Folder
JPHSA01\tjohnson	Modify, Synchronize			\\jphsa.org\shared\Data\CPS\Aftercare Records
JPHSA01\dharris		Modify, Synchronize			\\jphsa.org\shared\Data\CPS\Aftercare Records
JPHSA01\ERiehl		Modify, Synchronize			\\jphsa.org\shared\Data\CPS\Aftercare Records
JPHSA01\CPS			ReadAndExecute, Synchronize	\\jphsa.org\shared\Data\CPS\Aftercare Records

 =================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Permissions_Set</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Permissions_Set</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
===================================================================================================
https://blogs.msdn.microsoft.com/johan/2008/10/01/powershell-editing-permissions-on-a-file-or-folder/

$thePath = '\\win10vm\ALL_Share\win7_to_Win10\'

#' 1] Copy the folder 'StartLayout' to C:\ 

$fromPath_StartLayout = $thePath + 'StartLayout'
$toPath_StartLayout = "C:\StartLayout"
Copy-Item $fromPath_StartLayout -Destination C:\ -Recurse

#' 2] Set permissions on the folder to allow Domain Users READ 

$Acl = Get-Acl $toPath_StartLayout
$Ar = New-Object  system.security.accesscontrol.filesystemaccessrule("Domain Users","Modify","Allow")
$Acl.SetAccessRule($Ar)
Set-Acl $toPath_StartLayout $Acl

---------------------------------------------------------------------------------------------------
'if you want Folder_A to have the exact same permissions as Folder_B, 
'then you simply copy the Access Control List (ACL) of Folder_B and "paste" it onto Folder_A.

$Acl = Get-Acl "C:\Folder_B"
Set-Acl "C:\Folder_A" $Acl


===================================================================================================
https://stackoverflow.com/questions/26543127/powershell-setting-advanced-ntfs-permissions

'Now, if you want to assign multiple access rights to a given trustee, you can either do that with individual ACEs:

$acl  = Get-Acl $path
$ace1 = New-Object Security.AccessControl.FileSystemAccessRule 'DOMAIN\user',
        'ListDirectory', 'ContainerInherit, ObjectInherit', 'InheritOnly',
        'Allow'
$acl.AddAccessRule($ace1)
$ace2 = New-Object Security.AccessControl.FileSystemAccessRule 'DOMAIN\user',
        'ReadAttributes', 'ContainerInherit, ObjectInherit', 'InheritOnly',
        'Allow'
$acl.AddAccessRule($ace2)

'Or by providing the permissions as a comma-separated string:

$acl = Get-Acl $path
$ace = New-Object Security.AccessControl.FileSystemAccessRule 'DOMAIN\user',
       'ListDirectory, ReadAttributes, ...', 'ContainerInherit,  ObjectInherit',
       'InheritOnly', 'Allow'
$acl.AddAccessRule($ace)
============================================================================================
https://stackoverflow.com/questions/3282656/setting-inheritance-and-propagation-flags-with-set-acl-and-powershell
# Get the ACL for an existing folder
$existingAcl = Get-Acl -Path 'C:\DemoFolder'

# Set the permissions that you want to apply to the folder
$permissions = $env:username, 'Read,Modify', 'ContainerInherit,ObjectInherit', 'None', 'Allow'

# Create a new FileSystemAccessRule object
$rule = New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule -ArgumentList $permissions

# Modify the existing ACL to include the new rule
$existingAcl.SetAccessRule($rule)

# Apply the modified access rule to the folder
$existingAcl | Set-Acl -Path 'C:\DemoFolder'

'Each of the values in the $permissions variable list pertain to the parameters of this constructor for the FileSystemAccessRule class.
https://docs.microsoft.com/en-us/dotnet/api/system.security.accesscontrol.filesystemaccessrule.-ctor?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Security_AccessControl_FileSystemAccessRule__ctor_System_String_System_Security_AccessControl_FileSystemRights_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AccessControlType_</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PowerShell_Drives_____fileSystem_registry_certificates</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PowerShell_Drives_____fileSystem_registry_certificates</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
'A Windows PowerShell drive is a data store location that you can access like a file system drive in Windows PowerShell. 
'	The Windows PowerShell providers create some drives for you, such as the file system drives (including C: and D:), 
'	the registry drives (HKCU: and HKLM:), and the certificate drive (Cert:), and you can create your own Windows PowerShell drives. 
'	These drives are very useful, but they are available only within Windows PowerShell. 
'	You cannot access them by using other Windows tools, such as File Explorer or Cmd.exe.

'Windows PowerShell uses the noun, PSDrive, for commands that work with Windows PowerShell drives.

&gt; Get-PSDrive

Name           Used (GB)     Free (GB) Provider      Root                                                                                                                       CurrentLocation
----           ---------     --------- --------      ----                                                                                                                       ---------------
Alias                                  Alias                                                                                                                                                   
C                 164.15         58.39 FileSystem    C:\                                                                                                                                Windows
Cert                                   Certificate   \                                                                                                                                         
D                                      FileSystem    D:\                                                                                                                                       
E                                      FileSystem    E:\                                                                                                                                       
Env                                    Environment                                                                                                                                             
Function                               Function                                                                                                                                                
G                  47.69         76.80 FileSystem    \\BCC-CONTROL\PeopleTrak                                                                                                                  
HKCU                                   Registry      HKEY_CURRENT_USER                                                                                                                         
HKLM                                   Registry      HKEY_LOCAL_MACHINE                                                                                                                        
Q                  15.31        176.22 FileSystem    \\bcc-hcss\HCSS                                                                                                                           
S                 890.02        209.97 FileSystem    \\BCC-FS1\Divisions                                                                                                                       
T                 890.02        209.97 FileSystem    \\BCC-FS1\Applications                                                                                                                    
U                 890.02        209.97 FileSystem    \\BCC-FS1\Users\GlennG                                                                                                                    
V                 890.02        209.97 FileSystem    \\BCC-FS1\Reports                                                                                                                         
Variable                               Variable                                                                                                                                                
W                 890.02        209.97 FileSystem    \\BCC-FS1\Public                                                                                                                          
WSMan                                  WSMan                   

===========================================================================
'Adding New Windows PowerShell Drives (New-PSDrive)

'The New-PsDrive cmdlet adds the new drive only to the current Windows PowerShell session. 

'To create a new Windows PowerShell drive, you must supply three parameters:
'		A name for the drive (you can use any valid Windows PowerShell name)
'		The PSProvider (use "FileSystem" for file system locations and "Registry" for registry locations)
'		The root, that is, the path to the root of the new drive

'For example, you can create a drive named "Office" 
'	that is mapped to the folder that contains the Microsoft Office applications on your computer, such as 
'	C:\Program Files\Microsoft Office\OFFICE11.
'	To create the drive, type the following command:

&gt; New-PSDrive -Name Office -PSProvider FileSystem -Root "C:\Program Files\Microsoft Office\OFFICE11"

' To view and change items in the CurrentVersion registry key, you can create a Windows PowerShell drive that is rooted in that key by typing:

PS&gt; New-PSDrive -Name cvkey -PSProvider Registry -Root HKLM\Software\Microsoft\Windows\CurrentVersion

'You can then change location to the cvkey: drive as you would any other drive:
PS&gt; cd cvkey:
'or:
PS&gt; Set-Location cvkey: -PassThru

'If you close the Windows PowerShell window, the new drive is lost. 
'	To save a Windows PowerShell drive, use the Export-Console cmdlet to export the current Windows PowerShell session, 
'	and then use the PowerShell.exe PSConsoleFile parameter to import it. 
'	Or, add the new drive to your Windows PowerShell profile.

'For example, if you added the Office: Windows PowerShell drive, as shown in the New-PSDrive topic, you can delete it by typing:
&gt; Remove-PSDrive -Name Office</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>remove-onedrive.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>remove-onedrive.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' https://github.com/W4RH4WK/Debloat-Windows-10/blob/master/scripts/remove-onedrive.ps1
#'   Description:
#' This script will remove and disable OneDrive integration.

Import-Module -DisableNameChecking $PSScriptRoot\..\lib\force-mkdir.psm1
Import-Module -DisableNameChecking $PSScriptRoot\..\lib\take-own.psm1

echo "Kill OneDrive process"
taskkill.exe /F /IM "OneDrive.exe"
taskkill.exe /F /IM "explorer.exe"

echo "Remove OneDrive"
if (Test-Path "$env:systemroot\System32\OneDriveSetup.exe") {
    &amp; "$env:systemroot\System32\OneDriveSetup.exe" /uninstall
}
if (Test-Path "$env:systemroot\SysWOW64\OneDriveSetup.exe") {
    &amp; "$env:systemroot\SysWOW64\OneDriveSetup.exe" /uninstall
}

echo "Removing OneDrive leftovers"
rm -Recurse -Force -ErrorAction SilentlyContinue "$env:localappdata\Microsoft\OneDrive"
rm -Recurse -Force -ErrorAction SilentlyContinue "$env:programdata\Microsoft OneDrive"
rm -Recurse -Force -ErrorAction SilentlyContinue "$env:userprofile\OneDrive"
rm -Recurse -Force -ErrorAction SilentlyContinue "C:\OneDriveTemp"

echo "Disable OneDrive via Group Policies"
force-mkdir "HKLM:\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\OneDrive"
sp "HKLM:\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\OneDrive" "DisableFileSyncNGSC" 1

echo "Remove Onedrive from explorer sidebar"
New-PSDrive -PSProvider "Registry" -Root "HKEY_CLASSES_ROOT" -Name "HKCR"
mkdir -Force "HKCR:\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}"
sp "HKCR:\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" "System.IsPinnedToNameSpaceTree" 0
mkdir -Force "HKCR:\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}"
sp "HKCR:\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" "System.IsPinnedToNameSpaceTree" 0
Remove-PSDrive "HKCR"

#' Thank you Matthew Israelsson
echo "Removing run hook for new users"
reg load "hku\Default" "C:\Users\Default\NTUSER.DAT"
reg delete "HKEY_USERS\Default\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v "OneDriveSetup" /f
reg unload "hku\Default"

echo "Removing startmenu entry"
rm -Force -ErrorAction SilentlyContinue "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk"

echo "Restarting explorer"
start "explorer.exe"

echo "Waiting for explorer to complete loading"
sleep 10

echo "Removing additional OneDrive leftovers"
foreach ($item in (ls "$env:WinDir\WinSxS\*onedrive*")) {
    Takeown-Folder $item.FullName
    rm -Recurse -Force $item.FullName
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Search_for_string_in_File</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Search_for_string_in_File</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

' suppose we’re interested in tracking down all the files in a specific folder (C:\Scripts)
'	that include the phrase Hey, Scripting Guy! How do we do that? Like this:
Select-String C:\Scripts\*.txt -pattern "Hey, Scripting Guy!"
'Notice that we don’t even need to use Get-Content to open the text file; instead we simply call the Select-String cmdlet

'OUTPUT:
C:\Scripts\Everyone.txt:3:Hey, Scripting Guy! How can I search a text file using VBScript?
C:\Scripts\Test.txt:1:Hey, Scripting Guy! How can I search a text file using Windows PowerShell?

'What’s especially cool here is that each line of information is, beneath the covers, an object. 
'Notice what happens if we retrieve this content and then pipe it to the Format-List cmdlet. First we issue this command:

Select-String C:\Scripts\*.txt -pattern "Hey, Scripting Guy!" | Format-List

'OUTPUT:
===========
'IgnoreCase : True
'LineNumber : 3
'Line       : Hey, Scripting Guy! How can I search a text file using VBScript?
'Filename   : Everyone.txt
'Path       : C:\Scripts\Everyone.txt
'Pattern    : Hey, Scripting Guy!

'IgnoreCase : True
'LineNumber : 1
'Line       : Hey, Scripting Guy! How can I search a text file using Windows PowerShell?
'Filename   : Test.txt
'Path       : C:\Scripts\Test.txt
'Pattern    : Hey, Scripting Guy!

'Want to see just the file name for each file containing the target string? Try this command:
Select-String C:\Scripts\*.txt -pattern "Hey, Scripting Guy!" | Select-Object Filename

OUTPUT:
'Filename
'--------
'Everyone.txt
'Test.txt</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Format_Commands_to_change_output_vie</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_Format_Commands_to_change_output_vie</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Format_Commands_to_change_output_vie</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_Format_Commands_to_change_output_vie</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_Format_Commands_to_change_output_view

'creates a pop-up window adjustable
whatever | Out-GridView

'At the end of the pipeline is a special comand: Out-Default
'	That cmdlet passes objects to 'Out-Host', which calls PowerShell's formatting system
'1] PowerShell checks configuration file for instructions
'	That file is: $pshome\DotNetTypes.format.ps1xml (in System32 folder)
'	Those files have the default layouts. You can customize those.
'	It also checs the types.ps1xml file for the default properties of any given type
'2]	If there are no defaults, then it follows some simple rules:
'	If no default then all properties are used.
'	If there are less than 5 properties it displays a table
'	If 5 or more, display a list
'	You can override the defaults with the Format cmdlets


'The Format cmdlets are 
'	Format-Wide
'	Format-List
'	Format-Table
'	Format-Custom

'Each cmdlet also uses the same parameter name, Property, to specify which properties you want to display. 
'	Because Format-Wide only shows a single property, its Property parameter only takes a single value, 
'	but the property parameters of Format-List and Format-Table will accept a list of property names.

'Example:
&gt; Get-Process -Name chrome

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName                                                                                                     
-------  ------    -----      ----- -----   ------     -- -----------                                                                                                     
    220      24    64112      52000   263    38.66   5404 chrome                                                                                                          
    165      20    34864      33988   207     0.45   6456 chrome                                                                                                          
    160      20    28312      30240   209     0.87   6668 chrome                                                                                                          
   1281      69    93976     115380   378    57.63   7036 chrome                                                                                                          
    205      23    42608      55556   243    16.11  24500 chrome                                                                                                          
    195      23    42492      49880   256     1.36  26212 chrome  
    
'The Format-Wide cmdlet, by default, displays only the default property of an object.    
&gt; Get-Process -Name chrome | Format-Wide

chrome                                                                                chrome                                                                              
chrome                                                                                chrome                                                                              
chrome                                                                                chrome       

'You can also specify a non-default property:
&gt; Get-Process -Name chrome | Format-Wide  -Property Id
5404                                                                                  6456                                                                                
6668                                                                                  7036                                                                                
24500                                                                                 26212

'With the Format-Wide cmdlet, you can only display a single property at a time. This makes it 
'useful for displaying simple lists that show only one element per line. To get a simple listing, set the value of the Column parameter to 1 

&gt; Get-Process -Name chrome | Format-Wide   -Column 1
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome                                                                                                                                                                    
chrome  

'The Format-List cmdlet displays an object in the form of a listing, with each property labeled and displayed on a separate line:
&gt; Get-Process -Name chrome | Format-list
Id      : 5404
Handles : 220
CPU     : 39.1874512
Name    : chrome

Id      : 6456
Handles : 160
CPU     : 0.4524029
Name    : chrome

Id      : 6668
Handles : 160
CPU     : 0.8736056
Name    : chrome

Id      : 7036
Handles : 1274
CPU     : 59.1867794
Name    : chrome

Id      : 24500
Handles : 210
CPU     : 17.9713152
Name    : chrome

Id      : 26212
Handles : 195
CPU     : 1.3572087
Name    : chrome


'You can specify as many properties as you want:
&gt; Get-Process -Name chrome | Format-list -Property processname, id


ProcessName : chrome
Id          : 5404

ProcessName : chrome
Id          : 6456

ProcessName : chrome
Id          : 6668

ProcessName : chrome
Id          : 7036

ProcessName : chrome
Id          : 24500

ProcessName : chrome
Id          : 26212

'Getting Detailed Information by Using Format-List with Wildcards, This gives a huge list of properties
&gt; Get-Process -Name chrome | Format-list -Property *

'If you use the Format-Table cmdlet with no property names specified to format the output of the Get-Process command, 
'you get exactly the same output as you do without performing any formatting. 
'The reason is that processes are usually displayed in a tabular format, as are most Windows PowerShell objects.

&gt; Get-Process -Name chrome | Format-table

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName                                                                                                                          
-------  ------    -----      ----- -----   ------     -- -----------                                                                                                                          
    219      24    70044      60708   268    83.46   5404 chrome                                                                                                                               
    160      20    34756      34012   206     0.47   6456 chrome                                                                                                                               
    160      20    29432      31500   210     1.20   6668 chrome                                                                                                                               
   1313      69   105772     128120   394    84.60   7036 chrome                                                                                                                               
    204      23    42096      54180   242    20.51  24500 chrome                                                                                                                               
    195      23    42204      49748   256     1.40  26212 chrome  

'If you specify the AutoSize parameter when you run the Format-Table command,
' Windows PowerShell will calculate column widths based on the actual data you are going to display.
'The Format-Table cmdlet might still truncate data, but it will only do so at the end of the screen

&gt; Get-Process -Name chrome | Format-table  -Property Path,Name,Id,Company -AutoSize

Path                                                        Name      Id Company    
----                                                        ----      -- -------    
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  5404 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  6456 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  6668 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome  7036 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome 24500 Google Inc.
C:\Program Files (x86)\Google\Chrome\Application\chrome.exe chrome 26212 Google Inc.

'you can force lengthy Format-Table data to wrap within its display column by using the Wrap parameter
'An advantage of using the Wrap parameter by itself is that it does not slow down processing very much. 
'	If you perform a recursive file listing of a large directory system, 
'	it might take a very long time and use a lot of memory before displaying the first output items if you use AutoSize.

&gt; Get-Process -Name chrome | Format-table -wrap -Property Path,Name,Id,Company

'Another useful parameter for tabular output control is GroupBy. 
'	Longer tabular listings in particular may be hard to compare. The GroupBy parameter groups output based on a property value. 
'	For example, we can group processes by company for easier inspection, omitting the company value from the property listing:

&gt; Get-Process -Name chrome | Format-table -wrap -Property Path,Name,Id  -GroupBy Company




</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PARAMETER_ValidateScript</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PARAMETER_ValidateScript</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'ValidateScript tests for true before it continues


function New-VirtualMachine
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateCount(1, 5)]
		[string[]]$Name,
		
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateRange(1, 5)]
		[int]$Count = 1,
		
		[Parameter()]
		[ValidateNotNull()]
		[ValidateRange(512MB, 1024MB)]
		[int]$MemoryStartupBytes,
		
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('1', '2')]
		[int]$Generation = 2,
		
		[Parameter()]
		[ValidateScript({
	        if (-not (Test-Path -Path $_ -PathType Container))
	        {
		        throw "The folder [$_] does not exist. Try another"
	        }
	        else
	        {
		        $true
            }
        })]
		[ValidatePattern('^C:\\')]
		[string]$Path = 'C:\somebogusfolder',
	
		[Parameter()]
		[AllowNull()]
		[string]$OperatingSystem,

		[Parameter(Mandatory)]
		[AllowNull()]
		[string]$AllowNullParam
	)
}

#region ValidateScript
New-VirtualMachine -Name 'MYNEWVM' -Path 'C:\somebogusfolder' ## fails if detects exception, $true otherwise

#region Make the output prettier

#[ValidateScript({
#	if (-not (Test-Path -Path $_ -PathType Container))
#	{
#		throw "The folder [$_] does not exist. Try another"
#	}
#	else
#	{
#		$true
#	}
#})]

#endregion

#region Other ValidateScript examples
#[ValidateScript({
#	if (Test-Connection -ComputerName $_ -Quiet -Count 1)
#	{
#		throw "The computer [$_] is offline. Try another"
#	}
#	else
#	{
#		$true
#	}
#})]
#endregion

#endregion

#region ValidatePattern
New-VirtualMachine -Name 'MYNEWVM' -Path 'Z:\'
'C:\somefolder' -match '^C:\\'
#endregion

#region ValidateSet
New-VirtualMachine -Name 'MYNEWVM' -Generation

help New-VirtualMachine
#endregion

#region ValidateRange
New-VirtualMachine -Name 'MYNEWVM' -MemoryStartupBytes 128MB
New-VirtualMachine -Name 'MYNEWVM' -Count 10
#endregion

#region ValidateCount
New-VirtualMachine -Name 'MYNEWVM','MYOTHERVM'
#endregion

#region Null attributes
New-VirtualMachine -Name 'MYNEWVM' -NullParamTest $null
New-VirtualMachine -Name 'MYNEWVM' -NullParamTest ''
## Change param to [ValidateNotNull]
New-VirtualMachine -Name 'MYNEWVM' -NullParamTest ''

New-VirtualMachine -Name 'MYNEWVM' -AllowNullParam '' ## Only applies to mandatory parameters
#endregion</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Functions</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>PARAMETER_validation_examples</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Functions</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>PARAMETER_validation_examples</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>PARAMETER_validation_examples


function New-VirtualMachine
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory)]
		[ValidateCount(1, 5)]
		[string[]]$Name,			'&lt;=== This is asking for a collection of strings
		
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateRange(1, 5)]
		[int]$Count = 1,
		
		[Parameter()]
		[ValidateNotNull()]
		[ValidateRange(512MB, 1024MB)]
		[int]$MemoryStartupBytes,
		
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('1', '2')]
		[int]$Generation = 2,
		
		[Parameter()]
		[ValidateScript({
			if (Test-Connection -ComputerName $_ -Quiet -Count 1)
			{
				throw "The computer [$_] is offline. Try another"
			}
			else
			{
				$true
			}
		})]
		[ValidatePattern('^C:\\')]
		[string]$Path = 'C:\somebogusfolder',
		
		[Parameter()]
		[AllowNull()]
		[string]$OperatingSystem,
		
		[Parameter()]
		[ValidateNotNullOrEmpty()]
		[string]$NullParamTest,
		
		[Parameter()]
		[AllowNull()]
		[string]$AllowNullParam
	)
}

'When you run this the (Mandatory) declaration will cause it to challenge you for the Parm, if it is not supplied
New-VirtualMachine
'It would responde by challenging you for the name:    &gt;Name[0]:

New-VirtualMachine -Name 'MYNEWVM'
'In this case it would just take the name

#region Get-Help to find Mandatory parameters in cmdlets

## Using help optional parmameters and their values are shown in brackets
==========================================================================

## No mandatory params
(Get-Help -Name Get-Service -Detailed).syntax			'&lt;=== This requests help on the syntax

## Only Path is mandatory
(Get-Help -Name Get-Content -Detailed).syntax

#endregion

#region Get-Command to find Mandatory parameters in cmdlets

(Get-Command -Name 'Get-Content').Parameters.Path.Attributes

#endregion</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_GroupPolicy</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Reset_All_GroupPolicy</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_GroupPolicy</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Reset_All_GroupPolicy</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

=========================================================================================================
'https://www.windowscentral.com/how-reset-local-group-policy-objects-their-default-settings-windows-10

'Command (cmd)
'Type the following two commands and press Enter on each line:
	RD /S /Q "%WinDir%\System32\GroupPolicyUsers"

	RD /S /Q "%WinDir%\System32\GroupPolicy"
	
'	You can now restart your computer or force the update using the following command to complete the task:

gpupdate /force
'The commands will delete the folders where Group Policy settings are stored on your computer, 
'and then Windows 10 will re-apply the default settings.
=========================================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Input</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>[System.IO.File]::</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Input</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>[System.IO.File]::</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Faster than the powershell cmdlets

-------------------------------------------------------------------------------------------
'This is just like Get-Content -Path $Path 
'	in that you will end up with a collection full of strings.

[System.IO.File]::ReadAllLines( ( Resolve-Path $Path ) )

'You can also read the data as a multi-line string.

[System.IO.File]::ReadAllText( ( Resolve-Path $Path ) )

'The $Path must be the full path or it will try to save the file to your C:\Windows\System32 folder. 
'This is why I use Resolve-Path in this example.

-------------------------------------------------------------------------------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01_LogParser(IIS)=&gt;SQL__ScheduleTask</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01_LogParser(IIS)=&gt;SQL__ScheduleTask</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://support.software.dell.com/appassure/kb/144451



'1] Open Task Scheduler

	'Open Task Scheduler, create folder named "JPHSA" 
	' Right click the folder, and Create a new task "IIS_to_SQL_W3SVC1". Name it and set your security options.

		'GENERAL {Tag}
		--------------
			'Name: IIS_to_SQL_W3SVC1 
			'Location: \JPHSA
			'Author: JPHSA01\ggarson
			'Description: run LogParser, sets the Checkpoint, and moves new data to table on SQL Server. Runs under JPHSA01\IIS_SQL_DomainAdmin
			'When running the task, use the following user account
			'	JPHSA01\IIS_SQL_DomainAdmin
			'(x) Run whether user is logged on or not
			'[x] Run with highest privileges
			'Configure for: Windows Server 2012
			 
			 
	'Check "Run with highest privileges" as our scripts need to run as admin.  
	', 
	'enable the 'Run whether user is logged on or not' radio button.
'2] Triggers {tag}

	'Click on the Triggers tab and set your schedule or event that will trigger the running of your PowerShell script. 

		'Triggers {Tag}
		--------------
		'[New]
		' On a Schedule: Daily, at 5:30:00 am, Start on 3/24/2017
	
	
'3] Action {Tag}

	'Click on the Actions tab and click on New.
	'Action: Start a program
	'Program/script: Powershell.exe
	'You don't need to put a path as it should already be on your system.
	
		'Actions {Tag}
		--------------
		'Action: Start a program
		'Program/script: Powershell.exe
		'Add arguments: C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -NoLogo -NonInteractive -File "C:\DATA\PowerShellScripts\IIS_Log_W3SVC1_to_SQL_task_v0.ps1"
		
	'When I clicked [ok] it challenged me for the credentials of: JPHSA01\IIS_SQL_DomainAdmin
	p.iis_sql_23.56		
	'Message:
		This task requires that the user account specified has Log on as batch job rights.
		For more information about setting this policy, see the Task Security Context topic
		in Help	
	'To give the user rights:
			
'			Go to the Start menu
'			Run
'			Type secpol.msc
'			and press Enter
'			The Local Security Policy manager opens
'			Go to Security Settings - Local Policies - User Rights Assignment node
'			Double click Log on as a batch job on the right side
'			Click Add User or Group...
'			Select 'JPHSA01\IIS_SQL_DomainAdmin' and click OK
				
'4] Set Argument

	'First you need to set the ExecutionPolicy. You have two options here, you can set the ExecutionPolicy on the machine or you can do it on a per-script basis. 
	'	Read the PowerShell ExecutionPolicy link below as it talks about or you can issue the command:

	Get-Help About_execution_policies

	'To set the execution policy globally, you can issue this command from within PowerShell:

	Set-ExecutionPolicy Unrestricted

	'Or use one of the other settings available depending on your environment. 
	'In the context of this how-to, however, we want to set the execution policy on a per script basis and open up security for us to run the script. 
	'This security policy will only be in effect for the script we are running and not compromise security otherwise.
	'That means we use the following Argument:

	-ExecutionPolicy Bypass -File c:\temp\agent_repl.ps1

'5] Save and Test</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>gig_WorkingExamples_on_JPHSA-EBWEB2</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>gig_WorkingExamples_on_JPHSA-EBWEB2</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#' This works b/c logparser.exe is in the environmental path.
&gt; logparser.exe “SELECT Top 10 cs-uri-stem, Count(*) FROM C:\inetpub\logs\LogFiles\W3SVC1\u_ex170308.log Group By cs-uri-stem Order by cs-uri-stem desc” –i:w3c

#'This does all the log files in the folder:
logparser.exe “SELECT Top 10 cs-uri-stem, Count(*) FROM C:\inetpub\logs\LogFiles\W3SVC1\* Group By cs-uri-stem Order by cs-uri-stem desc” –i:w3c

&gt; logparser.exe “SELECT *  FROM C:\inetpub\logs\LogFiles\W3SVC1\u_ex170308.log” –i:w3c

#'These are the output fields from previous statement:
#'LogFilename
#'RowNumber
#'date
#'time
#'s-ip
#'cs-method
#'cs-uri-stem
#'cs-uri-query                          
#'s-port
#'cs-username
#'c-ip
#'cs(User-Agent)  

#'Get help on the web log format:
&gt;logparser -h -i:IISW3C

#'SELECT and create Table:
logparser.exe –i:w3c  -o:sql -server:WBSQL1\DEV  -database:JUNK -driver:"sql server" -clearTable:on -createTable:on  “SELECT * INTO LogsTable FROM C:\inetpub\logs\LogFiles\W3SVC1\u_ex170308.log”

#'SELECT  create Table with Identity field, and checkpoint named: MyCheckpoint (NOTE the inoput format is not the same)
#' but this clears the table
logparser.exe  –i:IISW3C   -iCheckpoint:Checkpoint_W3SVC1.lpc   -ignoreIdCols:on  -o:sql -server:WBSQL1\PROD  -database:d4_IIS_Logs -driver:"sql server" -clearTable:on -createTable:on “SELECT * INTO jnk3_T001_W3SVC1_JPHSA411 FROM C:\inetpub\logs\LogFiles\W3SVC1\*” 

======================
#' First to create the SQL table
logparser.exe  –i:IISW3C   -iCheckpoint:Checkpoint_W3SVC1_b.lpc   -ignoreIdCols:on  -o:sql -server:WBSQL1\PROD  -database:d4_IIS_Logs -driver:"sql server"  -createTable:on “SELECT * INTO jnk3_T001_W3SVC1_JPHSA411 FROM C:\inetpub\logs\LogFiles\W3SVC1\*” 
#' This should just add to the table, but was unable to test
logparser.exe  –i:IISW3C   -iCheckpoint:Checkpoint_W3SVC1_b.lpc   -ignoreIdCols:on  -o:sql -server:WBSQL1\PROD  -database:d4_IIS_Logs -driver:"sql server"   “SELECT * INTO jnk3_T001_W3SVC1_JPHSA411 FROM C:\inetpub\logs\LogFiles\W3SVC1\*” 
==========================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Query IIS Logs using Logparser via Powershell - example </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Query IIS Logs using Logparser via Powershell - example </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#'Query IIS Logs using Logparser via Powershell
#' https://gallery.technet.microsoft.com/office/Query-IIS-Logs-using-fa66667f



&lt;#
=====================================
Script Created by - Binu Balan      
Script Created on - 11/8/2015
Version - V 1.1
Requirement *
PowerShell = 2.0 or above
This script is used to perform query
Huge IIS Log Files
	 .__.
     (oo)____
     (__)    )\
        ll--ll '
=====================================
#&gt;
cls
Write-Host " "
Write-Host " "
Write-host " AAAAAAAA     PPPPPPPPP    PPPPPPPPP    UUU    UUU" -ForegroundColor Green
Write-host "AAAAAAAAAA    PPP   PPPP   PPP   PPPP   UUU    UUU" -ForegroundColor Green
Write-host "AAA    AAA    PPP    PPP   PPP    PPP   UUU    UUU" -ForegroundColor Green
Write-host "AAAAAAAAAA    PPPPPPPP     PPPPPPPP     UUU    UUU" -ForegroundColor Green
Write-host "AAA    AAA    PPP          PPP          UUU    UUU" -ForegroundColor Green
Write-host "AAA    AAA    PPP          PPP           UUUUUUUU" -ForegroundColor Green
Write-Host " "
Write-Host " " 
Write-host "	           .__." -ForegroundColor Green
Write-host "                   (oo)____" -ForegroundColor Green
Write-host "                   (__)    )\" -ForegroundColor Green
Write-host "                      ll--ll '" -ForegroundColor Green
Write-Host "               SCRIPT BY BINU BALAN               " -ForegroundColor DarkYellow -BackgroundColor DarkBlue 
Write-Host " "
Write-Host " "


$i = 1

# Getting Input from User
# =======================
Write-Host " "
Write-Host " "
Write-Host "Pre-Requisite Check for the Logparser.exe on local path" -NoNewline

Start-Sleep -Seconds 2
If(Test-Path -Path Logparser.exe){
Write-Host "                 [   OK   ]" -ForegroundColor Green
} Else {
Write-Host "                 [ Failed ]" -ForegroundColor Red
Write-Host " "
Write-Host " "
Write-Warning "Either Logparser is not installed or you are running this script on a different folder where Logparser.exe file is unavailable."
Write-Host " "
Write-Host "To download logparser follow this link : " -NoNewline -BackgroundColor Yellow -ForegroundColor Black
Write-Host "http://www.microsoft.com/en-in/download/details.aspx?id=24659" -ForegroundColor Blue -BackgroundColor Yellow
Write-Host " "
exit
}



Write-Host " "
Write-Host " "
$ReportPath = Read-Host "Enter Report Folder Path [Ex: c:\reports] "
$ReportName = Read-Host "Enter the report file name [Ex: LogReport.csv] "
Write-Host " "
Write-Host " "

Write-Host "Select the query type that you want to perform against the log?" -ForegroundColor Yellow
Write-Host "&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt; " -ForegroundColor Blue
Write-Host "1. Date             Example -2014-12-02" -ForegroundColor Green
Write-Host "2. Time             Example -00:00:12" -ForegroundColor Green
Write-Host "3. s-ip             Example -192.168.1.20" -ForegroundColor Green
Write-Host "4. cs-method        Example - GET/POST" -ForegroundColor Green
Write-Host "5. cs-uri-query     Example - /EWS/Exchange.asmx" -ForegroundColor Green
Write-Host "6. s-port           Example -443" -ForegroundColor Green
Write-Host "7. cs-username      Example -appudomain\binu.balan" -ForegroundColor Green
Write-Host "8. c-ip             Example -106.33.98.222" -ForegroundColor Green
Write-Host "9. cs(user-Agent)   Example -Microsoft+office" -ForegroundColor Green
Write-Host "10. sc-status       Example -401" -ForegroundColor Green
Write-Host "11. sc-substatus    Example -1" -ForegroundColor Green
Write-Host "12. sc-win32-status " -ForegroundColor Green
Write-Host "13. time-taken" -ForegroundColor Green
Write-Host " "
Write-Host " "

$GetInput = Read-host "Enter the query number "

switch ($GetInput) 
    { 
        1 {$WhereVal = "Date"} 
        2 {$WhereVal = "Time"} 
        3 {$WhereVal = "s-ip"} 
        4 {$WhereVal = "cs-method"} 
        5 {$WhereVal = "cs-uri-query"} 
        6 {$WhereVal = "s-port"} 
        7 {$WhereVal = "cs-username"} 
        8 {$WhereVal = "c-ip"} 
        9 {$WhereVal = "cs(user-Agent)"} 
        10 {$WhereVal = "sc-status"} 
        11 {$WhereVal = "sc-substatus"} 
        12 {$WhereVal = "sc-win32-status"} 
        13 {$WhereVal = "time-taken"} 

        default {"You have input invalid data !!"}
    }

if ($WhereVal -eq $null) {

Write-Host "You have entered invalid data. Exiting the Script"

exit

}

Write-host "Enter Log folder path. For multiple folders use Comma separated value [Example [C:\Log1,C:\Log2"
$ORRFolderpath = Read-Host "Enter here "

$WhereQuery = Read-Host ("Enter the Query for $WhereVal ")
$EachFolder = $ORRFolderpath.Split(",")
$EachIP = $WhereQuery.Split(",")


#$RName = Read-Host ("Enter Report Name with CSV Extension - (Result.csv)")
#$RPath = Read-Host ("Enter the path where you want to store the report - (C:\Report)")



ForEach ($S_Folder in $EachFolder) {

    ForEach ($IP in $EachIP) {

    $LogPath = $S_Folder
    $FileNames = Get-childItem -Path $LogPath


            ForEach ($File in $FileNames) {

            Write-Host "Script Line $i - .\LogParser.exe SELECT * INTO $ReportPath\$ReportName FROM $LogPath\$File WHERE $WhereVal LIKE '%$IP%' -filemode:0" -ForegroundColor Yellow


            $i = $i + 1

            .\LogParser.exe "SELECT * INTO $ReportPath\$ReportName FROM $LogPath\$File WHERE $WhereVal LIKE '%$IP%'" -filemode:0

            Write-Host "[ Completed ]" -ForegroundColor Green

            Write-Host "    "
            Write-Host "    "

            }


    }

}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_LogParser</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Use Logparser and Powershell to produce a single CSV output from IIS logs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_LogParser</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Use Logparser and Powershell to produce a single CSV output from IIS logs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'https://gallery.technet.microsoft.com/office/Use-Logparser-and-59eaa5e5
#' Use Logparser and Powershell to produce a single CSV output from IIS logs

============================
I wanted to combine powershell and logparser to get me a single csv file of user activity on my ASPX website.

The following script acheives that by doing the following

It connects to a root IIS log repository. 
	Although the script looks at a single location, 
	it would be fairly simple to collect the logs from several servers first 
	(renaming them, possibly with the server name appended to give them a unique name) 
My IIS logs are generated fresh each day (the default) 
	so I used the create date to determine what day each log relates to.
I considered a week to be a reasonable block of time to track activity.  
	Therefore, I loop over the list of files and copy them into a week by week folder (named YYYY-WW)
Logparser then comes into action, 
	producing a single csv file for each set of logs for the week (i.e. for each folder)
You can modify the SELECT statement as needed, 
	but I was only interested in who hit which page, 
	where it was in the site and what their average and maximum rendering time was
Logparser will output some paths that I dont want in the report.  
	As my site is a SharePoint site, I'm not interested (in this instance) 
	so I strip them out of the file via the $unwantedPaths parameter.
The prepared files are then grouped into one single output file (Logs.csv) that I can pivot and present in Excel
 

Feel free to change structure and final output to suit your needs 
	- the script should give the basic building blocks to get a decent usage report out quickly.  
	The other advantage is that it will only do work if new data exists.  
	So, if you delete the output directories or files or new logs exist then you'll get new output.

It should go without saying that you'll need to have installed logparser on your machine before running this file.
==================================
Function CopyLogFile ($LogFile, [ref]$FoldersToProcess) { 
 
     
    $YearWeekOfFile = get-date ($LogFile.CreationTime) -UFormat %Y-%V 
    $savePath = Join-Path -Path $weeklyLogRootFolder -ChildPath $YearWeekOfFile 
    CreateFolderIfNotExists $savePath 
     
    $logFileDestinationPath = Join-Path -Path $savePath -ChildPath $LogFile.Name 
     
    if ((Test-Path $logFileDestinationPath) -eq $false) { 
        Copy-Item -Path $LogFile.FullName -Destination $logFileDestinationPath 
        $FoldersToProcess.value += $savePath 
    } 
     
     
} 
Function CreateFolderIfNotExists ($FolderPath) { 
 
    if ((Test-Path $FolderPath) -eq $false) { 
        New-Item -Path $FolderPath -Type Directory 
    } 
 
} 
 
Function PathIsWanted ($RequestPath) { 
    $pathIsWanted = $true 
    foreach($path in $unwantedPaths) { 
        if ($RequestPath -like "$($path)*") { 
            $pathIsWanted = $false 
            break 
        } 
    } 
    $pathIsWanted 
} 
 
#Modify this section with your own values 
 
$rawLogFileRoot = "\\SERVER\c$\inetpub\logs\LogFiles\FOLDER" 
$unwantedPaths = "/_layouts/", "/apps/", "/Lists/", "/_catalogs/", "/_vti_bin/", "/themes", "/Workflow" 
$weeklyLogRootFolder = "C:\temp\logs\" 
$outputCSVLocation = "C:\temp\logs\csvOutput\" 
 
#End of variables to be modified 
 
 
#You may need to modify the exe path of Logparser.exe as well as the SELECT script you wish to run 
#I only wanted aspx pages from my site 
$logParserExe = "C:\Program Files (x86)\Log Parser 2.2\LogParser.exe" 
$logParserSQL =  "`"SELECT '{0}' AS Date, cs-username, STRCAT(EXTRACT_PATH(cs-uri-stem),'/') AS RequestPath, " 
$logParserSQL += "EXTRACT_FILENAME(cs-uri-stem) AS RequestedFile, COUNT(*) AS TotalHits, Max(time-taken) AS MaxTime, " 
$logParserSQL += "AVG(time-taken) AS AvgTime INTO {2} FROM {1}\*.log WHERE cs-username  IS NOT NULL AND " 
$logParserSQL += "SUBSTR(STRREV(EXTRACT_FILENAME(cs-uri-stem)),0,5) = 'xpsa.'   GROUP BY cs-username, cs-uri-stem ORDER BY TotalHits DESC`"" 
#  "STRREV(EXTRACT_FILENAME(cs-uri-stem)),0,5) = 'xpsa.'" gives us aspx pages only 
$logParserParams = "-i:IISW3C" , "-o:CSV" 
 
 
CreateFolderIfNotExists $weeklyLogRootFolder 
CreateFolderIfNotExists $outputCSVLocation 
 
$FoldersToProcess = @() 
 
$rawLogFiles = Get-ChildItem $rawLogFileRoot 
 
 
foreach ($logFile in $rawLogFiles) { 
    CopyLogFile -logFile $logFile -FoldersToProcess ([ref] $FoldersToProcess) 
} 
$FoldersToProcess = $FoldersToProcess | select -uniq 
 
#Log Parsing section 
if ($FoldersToProcess -ne $null) { 
 
    foreach ($folderToProcess in $FoldersToProcess) { 
        $yearWeekName = $folderToProcess.Replace($weeklyLogRootFolder, '') 
        $outputCSV = Join-Path -Path $outputCSVLocation -ChildPath ($yearWeekName + ".csv") 
        $logParserParamsInput = ([string]::Format($logParserSQL, $yearWeekName, $folderToProcess, $outputCSV)), $logParserParams[0], $logParserParams[1] 
         
        Start-Process -NoNewWindow -FilePath $logParserExe -ArgumentList $logParserParamsInput -wait 
 
        #Now process the CSV file - removing unwanted page entries 
        $data = Import-Csv -Path $outputCSV | ?{$unwantedPaths -notcontains $_.RequestPath}  
        $data | Where-Object { (PathIsWanted $_.RequestPath) -eq $true } | Export-CSV -Path $outputCSV -NoTypeInformation 
         
    } 
} 
 
 
$outputFile = $null 
$outputFilePath = Join-Path -Path $outputCSVLocation -ChildPath "Logs.csv" 
 
 
$resultFiles = Get-Childitem $outputCSVLocation  
$firstItem = $true 
if ($resultFiles -ne $null) { 
    foreach ($resultFile in ($resultFiles | ?{$_.Name -ne "Logs.csv"})) { 
        if ($firstItem) { 
            Copy-Item $resultFile.FullName $outputFilePath 
            $firstItem = $false 
        } 
        else { 
            get-content $resultFile.FullName | Select -Skip 1 | Add-Content $outputFilePath 
        } 
    } 
} 
 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Loops</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01_ControlScript_SaveToFile_MultipleColumns_using__for_script_with_parm.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Loops</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01_ControlScript_SaveToFile_MultipleColumns_using__for_script_with_parm.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#''01_ControlScript_SaveToFile_MultipleColumns_using__for_script_with_parm.ps1
#'requires -version 5.0

#'this script assumes all the other files are in the same directory 
#'and your location is set to that directory

#'Notice the full use of cmdlet and parameter names as well
#'as my use of comments and code formatting.

#'define a filename using the date
$filename = "$(Get-Date -Format "yyyyddMM")-VolumeReport.txt"

#'construct a full path name using the current directory
$report = Join-Path -path . -ChildPath $filename

#'verify computers.txt can be found
if (Test-Path -Path .\computers.txt) {

    #'get the list of computers
    $computers = Get-Content -Path .\computers.txt

    #'run the DriveReport script against the list of computers
    #'--------------------------------------------------------
    $data = .\DriveReport.ps1 -Computername $computers							#' &lt;=========================Here is where it calls the first script file
    #'--------------------------------------------------------
      
    #'only create the report if data is captured
    if ($data) {
    
        #'Create a report header and save to the report file
        "Volume Report: $(Get-Date)" | Out-File -FilePath $filename
        "Run by: $($env:USERNAME)" | Out-File -FilePath $filename -append
        "**********************************" | Out-File -FilePath $filename -Append
  
        #'Sort the volume data and format the results which are then
        #'saved to the file. This is an exception case where using a
        #'format cmdlet is acceptable.
        $data | 
            Sort-Object -Property Computername, Drive |
            Format-Table -GroupBy Computername -Property Drive, FileSystem, SizeGB, FreeGB, PctFree |
            Out-File -FilePath $report -Append

       #'---------------------------------------------------------------------------------------- 
        #'save missed computers to a separate text file
        $found = $data.computername | Select-Object -Unique
        $missed = $computers | Where-Object {$found -notcontains $_} 
        $missed | Out-File -filepath .\Offline.txt

        "Missed computers" |  Out-File -FilePath $filename -append
        $missed | foreach-object {$_.toUpper()} | Out-File -FilePath $filename -append
       #'----------------------------------------------------------------------------------------
       
        Write-Host "Report finished. See $report." -ForegroundColor Green
    } #'if $data
    else {
        Write-Warning "Failed to capture any volume information. Is DiskReport.ps1 in the same folder as this script?"
    }
}
else {
    Write-Warning "Can't find computers.txt."
}

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>alias</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>alias</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
&gt;Get-Alias




#region Aliasing
	
	# Notice how older DOS/Linux commands work in PowerShell
	dir
	ls
	
	# But how? With command aliasing
	# The aliases dir and ls both point to the cmdlet Get-Childitem
	Get-Alias dir
	Get-Alias ls
	
	# We can see all of the aliases for a cmdlet
	Get-Alias -Definition Get-ChildItem
	
	# There are lots of aliases
	Get-Alias
	
	# Note: Aliases are fine for command line use or quick prototypes
	# For clarity however it is a best practice to use the full cmdlet
	# name in all scripts you write.

#endregion Aliasing




\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# Setting up provider aliases
New-PSDrive -Name BPSD `
            -P
            -Root 'C:\PS\Beginning PowerShell Scripting for Developers'

Set-Location BPSD:
Get-ChildItem | Format-Table

Set-Location BPSD:\demo			#Set a new location
Get-ChildItem | Format-Table	#This now gives me a 'dir' of that folder


# When done, either use the remove cmdlet below, otherwise
# when this session ends so does the lifespan of the PSDrive
# Make sure to set your location outside the PSDrive first
Set-Location 'C:\PS\Beginning PowerShell Scripting for Developers'
Remove-PSDrive BPSD		#will cause an error if you are in the folder when you run the command

=========================================================================
&gt;Get-Alias

#'CommandType     Name                                               Version    Source                                                                            
#'-----------     ----                                               -------    ------                                                                            
#'Alias           % -&gt; ForEach-Object                                                                                                                             
#'Alias           ? -&gt; Where-Object                                                                                                                               
#'Alias           ac -&gt; Add-Content                                                                                                                               
#'Alias           asnp -&gt; Add-PSSnapin                                                                                                                            
#'Alias           cat -&gt; Get-Content                                                                                                                              
#'Alias           cd -&gt; Set-Location                                                                                                                              
#'Alias           CFS -&gt; ConvertFrom-String                          3.1.0.0    Microsoft.PowerShell.Utility                                                      
#'Alias           chdir -&gt; Set-Location                                                                                                                           
#'Alias           clc -&gt; Clear-Content                                                                                                                            
#'Alias           clear -&gt; Clear-Host                                                                                                                             
#'Alias           clhy -&gt; Clear-History                                                                                                                           
#'Alias           cli -&gt; Clear-Item                                                                                                                               
#'Alias           clp -&gt; Clear-ItemProperty                                                                                                                       
#'Alias           cls -&gt; Clear-Host                                                                                                                               
#'Alias           clv -&gt; Clear-Variable                                                                                                                           
#'Alias           cnsn -&gt; Connect-PSSession                                                                                                                       
#'Alias           compare -&gt; Compare-Object                                                                                                                       
#'Alias           copy -&gt; Copy-Item                                                                                                                               
#'Alias           cp -&gt; Copy-Item                                                                                                                                 
#'Alias           cpi -&gt; Copy-Item                                                                                                                                
#'Alias           cpp -&gt; Copy-ItemProperty                                                                                                                        
#'Alias           curl -&gt; Invoke-WebRequest                                                                                                                       
#'Alias           cvpa -&gt; Convert-Path                                                                                                                            
#'Alias           dbp -&gt; Disable-PSBreakpoint                                                                                                                     
#'Alias           del -&gt; Remove-Item                                                                                                                              
#'Alias           diff -&gt; Compare-Object                                                                                                                          
#'Alias           dir -&gt; Get-ChildItem                                                                                                                            
#'Alias           dnsn -&gt; Disconnect-PSSession                                                                                                                    
#'Alias           ebp -&gt; Enable-PSBreakpoint                                                                                                                      
#'Alias           echo -&gt; Write-Output                                                                                                                            
#'Alias           epal -&gt; Export-Alias                                                                                                                            
#'Alias           epcsv -&gt; Export-Csv                                                                                                                             
#'Alias           epsn -&gt; Export-PSSession                                                                                                                        
#'Alias           erase -&gt; Remove-Item                                                                                                                            
#'Alias           etsn -&gt; Enter-PSSession                                                                                                                         
#'Alias           exsn -&gt; Exit-PSSession                                                                                                                          
#'Alias           fc -&gt; Format-Custom                                                                                                                             
#'Alias           fhx -&gt; Format-Hex                                  3.1.0.0    Microsoft.PowerShell.Utility                                                      
#'Alias           fl -&gt; Format-List                                                                                                                               
#'Alias           foreach -&gt; ForEach-Object                                                                                                                       
#'Alias           ft -&gt; Format-Table                                                                                                                              
#'Alias           fw -&gt; Format-Wide                                                                                                                               
#'Alias           gal -&gt; Get-Alias                                                                                                                                
#'Alias           gbp -&gt; Get-PSBreakpoint                                                                                                                         
#'Alias           gc -&gt; Get-Content                                                                                                                               
#'Alias           gcb -&gt; Get-Clipboard                               3.1.0.0    Microsoft.PowerShell.Management                                                   
#'Alias           gci -&gt; Get-ChildItem                                                                                                                            
#'Alias           gcm -&gt; Get-Command                                                                                                                              
#'Alias           gcs -&gt; Get-PSCallStack                                                                                                                          
#'Alias           gdr -&gt; Get-PSDrive                                                                                                                              
#'Alias           ghy -&gt; Get-History                                                                                                                              
#'Alias           gi -&gt; Get-Item                                                                                                                                  
#'Alias           gjb -&gt; Get-Job                                                                                                                                  
#'Alias           gl -&gt; Get-Location                                                                                                                              
#'Alias           gm -&gt; Get-Member                                                                                                                                
#'Alias           gmo -&gt; Get-Module                                                                                                                               
#'Alias           gp -&gt; Get-ItemProperty                                                                                                                          
#'Alias           gps -&gt; Get-Process                                                                                                                              
#'Alias           gpv -&gt; Get-ItemPropertyValue                                                                                                                    
#'Alias           group -&gt; Group-Object                                                                                                                           
#'Alias           gsn -&gt; Get-PSSession                                                                                                                            
#'Alias           gsnp -&gt; Get-PSSnapin                                                                                                                            
#'Alias           gsv -&gt; Get-Service                                                                                                                              
#'Alias           gu -&gt; Get-Unique                                                                                                                                
#'Alias           gv -&gt; Get-Variable                                                                                                                              
#'Alias           gwmi -&gt; Get-WmiObject                                                                                                                           
#'Alias           h -&gt; Get-History                                                                                                                                
#'Alias           history -&gt; Get-History                                                                                                                          
#'Alias           icm -&gt; Invoke-Command                                                                                                                           
#'Alias           iex -&gt; Invoke-Expression                                                                                                                        
#'Alias           ihy -&gt; Invoke-History                                                                                                                           
#'Alias           ii -&gt; Invoke-Item                                                                                                                               
#'Alias           ipal -&gt; Import-Alias                                                                                                                            
#'Alias           ipcsv -&gt; Import-Csv                                                                                                                             
#'Alias           ipmo -&gt; Import-Module                                                                                                                           
#'Alias           ipsn -&gt; Import-PSSession                                                                                                                        
#'Alias           irm -&gt; Invoke-RestMethod                                                                                                                        
#'Alias           ise -&gt; powershell_ise.exe                                                                                                                       
#'Alias           iwmi -&gt; Invoke-WmiMethod                                                                                                                        
#'Alias           iwr -&gt; Invoke-WebRequest                                                                                                                        
#'Alias           kill -&gt; Stop-Process                                                                                                                            
#'Alias           lp -&gt; Out-Printer                                                                                                                               
#'Alias           ls -&gt; Get-ChildItem                                                                                                                             
#'Alias           man -&gt; help                                                                                                                                     
#'Alias           md -&gt; mkdir                                                                                                                                     
#'Alias           measure -&gt; Measure-Object                                                                                                                       
#'Alias           mi -&gt; Move-Item                                                                                                                                 
#'Alias           mount -&gt; New-PSDrive                                                                                                                            
#'Alias           move -&gt; Move-Item                                                                                                                               
#'Alias           mp -&gt; Move-ItemProperty                                                                                                                         
#'Alias           mv -&gt; Move-Item                                                                                                                                 
#'Alias           nal -&gt; New-Alias                                                                                                                                
#'Alias           ndr -&gt; New-PSDrive                                                                                                                              
#'Alias           ni -&gt; New-Item                                                                                                                                  
#'Alias           nmo -&gt; New-Module                                                                                                                               
#'Alias           npssc -&gt; New-PSSessionConfigurationFile                                                                                                         
#'Alias           nsn -&gt; New-PSSession                                                                                                                            
#'Alias           nv -&gt; New-Variable                                                                                                                              
#'Alias           ogv -&gt; Out-GridView                                                                                                                             
#'Alias           oh -&gt; Out-Host                                                                                                                                  
#'Alias           popd -&gt; Pop-Location                                                                                                                            
#'Alias           ps -&gt; Get-Process                                                                                                                               
#'Alias           pushd -&gt; Push-Location                                                                                                                          
#'Alias           pwd -&gt; Get-Location                                                                                                                             
#'Alias           r -&gt; Invoke-History                                                                                                                             
#'Alias           rbp -&gt; Remove-PSBreakpoint                                                                                                                      
#'Alias           rcjb -&gt; Receive-Job                                                                                                                             
#'Alias           rcsn -&gt; Receive-PSSession                                                                                                                       
#'Alias           rd -&gt; Remove-Item                                                                                                                               
#'Alias           rdr -&gt; Remove-PSDrive                                                                                                                           
#'Alias           ren -&gt; Rename-Item                                                                                                                              
#'Alias           ri -&gt; Remove-Item                                                                                                                               
#'Alias           rjb -&gt; Remove-Job                                                                                                                               
#'Alias           rm -&gt; Remove-Item                                                                                                                               
#'Alias           rmdir -&gt; Remove-Item                                                                                                                            
#'Alias           rmo -&gt; Remove-Module                                                                                                                            
#'Alias           rni -&gt; Rename-Item                                                                                                                              
#'Alias           rnp -&gt; Rename-ItemProperty                                                                                                                      
#'Alias           rp -&gt; Remove-ItemProperty                                                                                                                       
#'Alias           rsn -&gt; Remove-PSSession                                                                                                                         
#'Alias           rsnp -&gt; Remove-PSSnapin                                                                                                                         
#'Alias           rujb -&gt; Resume-Job                                                                                                                              
#'Alias           rv -&gt; Remove-Variable                                                                                                                           
#'Alias           rvpa -&gt; Resolve-Path                                                                                                                            
#'Alias           rwmi -&gt; Remove-WmiObject                                                                                                                        
#'Alias           sajb -&gt; Start-Job                                                                                                                               
#'Alias           sal -&gt; Set-Alias                                                                                                                                
#'Alias           saps -&gt; Start-Process                                                                                                                           
#'Alias           sasv -&gt; Start-Service                                                                                                                           
#'Alias           sbp -&gt; Set-PSBreakpoint                                                                                                                         
#'Alias           sc -&gt; Set-Content                                                                                                                               
#'Alias           scb -&gt; Set-Clipboard                               3.1.0.0    Microsoft.PowerShell.Management                                                   
#'Alias           select -&gt; Select-Object                                                                                                                         
#'Alias           set -&gt; Set-Variable                                                                                                                             
#'Alias           shcm -&gt; Show-Command                                                                                                                            
#'Alias           si -&gt; Set-Item                                                                                                                                  
#'Alias           sl -&gt; Set-Location                                                                                                                              
#'Alias           sleep -&gt; Start-Sleep                                                                                                                            
#'Alias           sls -&gt; Select-String                                                                                                                            
#'Alias           sort -&gt; Sort-Object                                                                                                                             
#'Alias           sp -&gt; Set-ItemProperty                                                                                                                          
#'Alias           spjb -&gt; Stop-Job                                                                                                                                
#'Alias           spps -&gt; Stop-Process                                                                                                                            
#'Alias           spsv -&gt; Stop-Service                                                                                                                            
#'Alias           start -&gt; Start-Process                                                                                                                          
#'Alias           sujb -&gt; Suspend-Job                                                                                                                             
#'Alias           sv -&gt; Set-Variable                                                                                                                              
#'Alias           swmi -&gt; Set-WmiInstance                                                                                                                         
#'Alias           tee -&gt; Tee-Object                                                                                                                               
#'Alias           trcm -&gt; Trace-Command                                                                                                                           
#'Alias           type -&gt; Get-Content                                                                                                                             
#'Alias           wget -&gt; Invoke-WebRequest                                                                                                                       
#'Alias           where -&gt; Where-Object                                                                                                                           
#'Alias           wjb -&gt; Wait-Job                                                                                                                                 
#'Alias           write -&gt; Write-Output   
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>change_location_(cd)_but_save_to_stack_THEN_pull_from_stack</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>change_location_(cd)_but_save_to_stack_THEN_pull_from_stack</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'while in the C: root, cd to the DATA folder, and put the root folder onto the stack
12 PS:C:\&gt;push-location /Data
'Then pop the root folder off the stack, and cd back to it
13 PS:Data&gt;pop-location

'also instead of "push-location" you can use:
&gt;pushd 
and
&gt;popd
'like this:

1 PS:PowerShellScripts&gt;  pushd ~/desktop

2 PS:desktop&gt; pushd C:\Windows\System32

3 PS:System32&gt;  Pop-Location

4 PS:desktop&gt;  Pop-Location

5 PS:PowerShellScripts&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Repository</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Repository</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

&gt;Get-PSRepository
#' Default response:
Name                      InstallationPolicy   SourceLocation                                                                                                            
----                      ------------------   --------------                                                                                                            
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2/   

#'To find a module in the available repository, with a given 'tag'
&gt;Find-Module -tag sqlserver

#'Response from command above:
Version    Name                                Repository           Description                                                                                          
-------    ----                                ----------           -----------                                                                                          
21.0.17178 SqlServer                           PSGallery            This module allows SQL Server developers, administrators and business intelligence professionals t...
0.9.62     dbatools                            PSGallery            The community module that enables SQL Server Pros to automate database development and server admi...
1.0.0.3    mlSqlPs                             PSGallery            SQL Server Desired State Configuration module. Modified from xSqlPs and will contain all custom re...
0.0.2.8    ReportingServicesTools              PSGallery            Provides extra functionality for SSRS (SQL Server Reporting Services).                               
1.0.1      InvokeQuery                         PSGallery            Query any database!                                                                                  
0.9.0      dbareports                          PSGallery            Dopest dba dashboards ever                                                                           
1.1.0.3    SQLHelper                           PSGallery            A single lightweight powershell module with cmdlets to query/update databases with any .net provid...
1.13       Write-ObjectToSQL                   PSGallery            Writes an object into a database table. If the table does not exist it will be created based on th...
1.6.4      Invoke-SqlCmd2                      PSGallery            Invoke-SqlCmd2                                                                                       
1.0.0      cSQLServerJDBCXA                    PSGallery            Enable JDBC XA Transactions on SQL Server for enable JDBC XA Transactions on SQL Server              
0.9.1.0    SQLAutoRestores                     PSGallery            To automate the restore of SQL Server database for testing and compliance checking                   
1.3.0.0    Kelverion.IntegrationModule.SqlS... PSGallery            The Kelverion Integration Module for SQL Server enables easy interaction with on premise and Azure...
0.0.5      Database                            PSGallery            Database meta package                                                                                
1.0.0.4    SQLServerUpdatesModule              PSGallery            The module can parse information about updates with http://sqlserverupdates.com/. Next, it checks ...
0.9.1      SQLDiagAPI                          PSGallery            This is a module to work with the SQL Server Diagnostics (Preview) API. See https://blogs.msdn.mic...
1.0.0.1    SQLServerJobsModule                 PSGallery            The script allows you to generate a job report from several servers. Allows you to specify a time ...

#' Then to get info about the first one in the list:
&gt; find-module sqlserver | Select-Object *

#' To install the module if you want it (into one of the folders in my module path)
&gt;install-module sqlserver

#' after installing it, confirm that it is available:
&gt;get-module sqlserver -ListAvailable

#' Then see what commands are in it:
&gt;get-command -module sqlserver | more</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_MISC</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Run_Script_From_File</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_MISC</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Run_Script_From_File</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#Type: Write-Host "Hello World:" in a notepad and save it as "Script1.ps1" in 
#								a directory called: "C:\Scripts"

Write-Host "Hello World:" -foregroundcolor:white -backgroundcolor:red



#'1] Call using the full path\filename------------------------------------------
&gt; Set-Location c:\Scripts
#To execute:
&gt; .\Script1.ps1 				#' the dot backslash says to run the script from the current folder
#Then hit enter

#'2] Call using .\ to reference the current location in the file system----------
#' On the other hand to run a script from another folder, use a dot and wrap the path\filename.ps1 in a single qoute:

&gt;. 'C:\PS\Beginning PowerShell Scripting for Developers\demo\bpsd-m06-do-something.ps1'

#'3] Store the script in a variable and execute the variable.-------------------
$doSomething = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\bpsd-m06-do-something.ps1'
&gt;. $doSomething



========================================================

'There are broadly three ways to run command-lets within PowerShell.

'1] Simple commands can be run from the /PowerShell / PowerCLI command prompt.
'2] A script file (extension of .ps1) can be created and called from the command line.  
'	The script can be as complex as you want and may include calling other COM objects 
'	and running applications in the background,
'	calling web services and so on.  
'	By default, PowerShell will not allow you to run scripts.  
'	Set the following command in your PowerShell session.

Set-ExecutionPolicy RemoteSigned

'3] There is a host of information on security and execution policies, 
'	but for us, working in an enclosed environment, this is fine.
'	Creating a module (a file with .psm1 extension), copying the module file to a set location (from one of the defined module paths), 
'	importing the module and then using functions provided within the module.  
'	Modules are for functions that provide generic functionality.

========================================================

 'I'm guessing this script isn't signed. Have you enabled execution of unsigned scripts using the 
 Set-ExecutionPolicy -ExecutionPolicy Unrestricted
 
 'Agreed. Pasting the script into PowerShell is a completely different thing from actually invoking the script file, as long as the execution policy is concerned.
 
 ========================================================
'call powershell.exe with:
 -ExecutionPolicy Bypass 
 'to override the restricted execution policy</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_Modules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_Modules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_Modules  (.psm1)

'Good Source of scripts:
	http://technet.microsoft.com/scriptcenter
	http://www.codeplex.com/

'NOTE: the name of the parent folder MUST be the same as the Module name.

'Modules - A package that contains Windows PowerShell commands in the form of functions, 
'	cmdlerts and workflows, in addition it may contain variables, aliases and providers. 
'	Modules can be written in PowerShell and/or compiled as DLLs.

'============================================================================
'To load a module to memory you can use:

$modulePath = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'
$moduleName = 'bpsd-m05-module-simple'

$module = "$($modulePath)$($moduleName).psm1"

# To use a module, you first need to import it, which runs all the code in the module
# so now the functions in the modules are in memory
Import-Module $module

'BUT if you change the module and try to re-import it the changes will not take affect
'	b/c it loads a module only once
' SO use this in DEVELOPMENT

# Because the module is already loaded, by default PS won't reload
# To force it to reload, you have to use the -Force switch
Import-Module -Force $module
'============================================================================
#' Remove a module from memory (note just used the module name, not the whole path :
Remove-Module $moduleName

#' IF your module is located in one of the module paths of the env variable you can still call one of it's functions
#'	WITHOUT explicitly importing the module that contains the function
#'  BUT if the module file is NOT located in one of the paths of your environment variable 
#'  THEN you do need to explicitly import the module to invoke it's functions




'============================================================================
'Modules have primarily 2 locations on your system:

%windir%\system32\WindowsPowerShell\v1.0\Modules 		'this is the location for system wide modules available to any user in the system.
%USERPROFILE%\Documents\WindowsPowerShell\Modules

'Each module is stored in a folder where there is a psd1 file that is known as a Module Manifest, 
'	this manifest has the settings for the module and sets the restrictions for it in terms of .Net Framework version, 
'	version of PowerShell, files to load, version, copyright, author and many other settings. 
'	This file can load what is called a main module and sub-modules each can either be a psm1 or dll file, 
'	in addition they can also be scripts that gets processes. 

'We can also have modules in other locations that can be accessed by the PowerShell session we run in, 
'	the locations are defined in the environment variable $env:PSModulePath

C:\&gt; $env:PSModulePath

C:\Users\Carlos\Documents\WindowsPowerShell\Modules;C:\Windows\system32\WindowsPowerShell\v1.0\Modules\

'If we want to add another path for PowerShell to look at we just add that path to the current environment variable:

$env:psmodulepath = $env:psmodulepath + ";"

'To list the modules that are available we use the Get-Module cmdlet withe the -listavailable parameter:

Get-Module -ListAvailable

'If you only want to see the modules that are currently loaded in to the session the -All parameter is used with Get-Module:

C:\&gt; Get-Module -All

'To import a module in to our session we just use the Import-Module cmdlet and give it the name of the module. 

&gt;  Import-Module -Name Posh-SSH -Verbose

' If you are in a session and want to know if a module is loaded the Get-Module cmndlet with the -Name option 
'	is use and we give it the module name we want to know about, 
'	if it returns the information about the module the module is loaded, if nothing is returned the module is not:

C:\&gt; Get-Module -Name posh-ssh

'To remove the module from our session we use the Remove-Module cmdlet and give it the name of the module we want to remove:

C:\&gt; Remove-Module -Name posh-ssh -Verbose

' We can also load modules by calling directly the DLL or the PSM1 file, 
'lets call another module I'm still developing for controlling Metasploit:

C:\&gt; Import-Module C:\Users\Carlos\Desktop\Posh-Metasploit.psm1 -Verbose

'If you are developing a module and whant to reload the module with the changes you just made 
'	I recommend just using the Import-Module cmdlet with the -Force parameter instead of removing and importing the module again. 


#' get a list of all the commands in a module (e.g 'PowerShellGet')
Get-command -module PowerShellGet | more</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>default_path_for_Modules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>default_path_for_Modules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'To get the value of the PSModulePath environment variable, use either of the following commands.
$Env:PSModulePath
[Environment]::GetEnvironmentVariable("PSModulePath")
==========================================================================

'By default, the PSModulePath environment variable value contains the following system and user module directories, but you can add to and edit the value.
$PSHome\Modules (%Windir%\System32\WindowsPowerShell\v1.0\Modules) 

'This location is reserved for modules that ship with Windows. Do not install modules to this location.
$Home\Documents\WindowsPowerShell\Modules (%UserProfile%\Documents\WindowsPowerShell\Modules)

%Windir%\System32\WindowsPowerShell\v1.0\Modules 
(for Win 7 = C:\Windows\System32\WindowsPowerShell\v1.0\Modules)

$Env:ProgramFiles\WindowsPowerShell\Modules (%ProgramFiles%\WindowsPowerShell\Modules)

==========================================================================

'To add a module path to value of the PSModulePath environment variable value, 
'use the following command format. 
'This format uses the SetEnvironmentVariable method of the System.Environment class to make a session-independent change 
'to the PSModulePath environment variable.

#Save the current value in the $p variable.
$p = [Environment]::GetEnvironmentVariable("PSModulePath")

#Add the new path to the $p variable. Begin with a semi-colon separator.
$p += ";C:\DATA\psModules\"

#Add the paths in $p to the PSModulePath value.
[Environment]::SetEnvironmentVariable("PSModulePath",$p)

==========================================================================
'Where to Install Modules
--------------------------

'you want the module to be available for your user account only;
$home\Documents\WindowsPowerShell\Modules\&lt;Module Folder&gt;\&lt;Module Files&gt;

e.g.: C:\Users\glenn\Documents\WindowsPowerShell\Modules

'Installing Modules for all Users
$EnvProgramFiles\WindowsPowerShell\Modules\&lt;Module Folder&gt;\&lt;Module Files&gt;


#'Each module should be stored in a sub folder of either of these paths 
#'and typically be the name of the module – within that folder 
#'you will then store the files that make up the module. 
#'At the least, we need a *.psm1 file. In this file could be placed 
#'a number of functions or variables that make up the module. 
#'In addition it is possible to place PowerShell scripts in *.ps1 files 
#'in the module’s folder and reference them in the *.psm1 file. 
#'As a final touch, a module manifest file can be created 
#'which will give a more professional and rounded feel to your module, 
#'but we will come on to manifests later.

==========================================================================
'for more details: 
https://msdn.microsoft.com/en-us/library/dd878350(v=vs.85).aspx</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_01_Advanced_Module.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_01_Advanced_Module.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#''Example_01_Advanced_Module.psm1

&lt;#'-----------------------------------------------------------------------------
  Beginning PowerShell Scripting for Developers
  Advanced Module (processed by the manifest)

  Author: Robert C. Cain | @ArcaneCode | arcanecode@gmail.com
          http://arcanecode.com
 
  This module is Copyright (c) 2015 Robert C. Cain. All rights reserved.
  The code herein is for demonstration purposes. No warranty or guarentee
  is implied or expressly granted. 
  This module may not be reproduced in whole or in part without the express
  written consent of the author. 
'-----------------------------------------------------------------------------#&gt;

#' You can declare functions directly in the PSM1 file
function Write-M()
{ Write-Host 'M' }

#'-----------------------------------------------------------------------------#
#' Most people though organize the functions into one or more PS1 files, 
#' then execute them (from the .psm1 file)
#' which in turn loads them into the module
#' Note your execution policy must be set appropriately to be able to do this
#'-----------------------------------------------------------------------------#

#'region Import Scripts

#' $PSScriptRoot is a shortcut to "the current folder where the script is being 
#' run from". Also note the use of . sourcing { a period (.) is a way to execute code in another .ps1 file}

. $PSScriptRoot\bpsd-m05-module-advanced-functions-A.ps1
. $PSScriptRoot\bpsd-m05-module-advanced-functions-B.ps1

#'endregion Import Scripts


#'-----------------------------------------------------------------------------#
#' If you don't explicitly export module members, all functions will be visible
#' outside the module. 
#'
#' With Export-ModuleMember, only those functions listed will be visible. Any
#' not included will be private to the function. 
#'
#' It is considered a best practice to explictly export the functions you want
#' visible. 
#'-----------------------------------------------------------------------------#

#'region Export Module Members
#' This says I (i.e. the Module) have a member of my module called  "Write-A"
#' This makes them public (versus functions that are not exported, and thus stay private)
Export-ModuleMember Write-A
Export-ModuleMember Write-B
Export-ModuleMember Write-M

#'NOTE: if I don't export ANY members, the by default they are all public

#' Note, because we don't export Write-APrivate 
#' (from bpsd-m05-module-advanced-functions-A.ps1), 
#' it won't be usable outside the module

#'endregion Export Module Members
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_01_Advanced_Module_and_Path_to_make_it_Easier</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_01_Advanced_Module_and_Path_to_make_it_Easier</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#''Example_01_Advanced_Module_and_Path_to_make_it_Easier

#'-----------------------------------------------------------------------------#
#' Module Path
#'-----------------------------------------------------------------------------#

#' You can import modules without including the path if you store it
#' in one of the default locations. To see this, look at the 
#' environment variable PSModulePath
$env:PSModulePath

#' We will use the 'User' location for modules. Note if you've not used
#' modules before, the WindowsPowerShell\Modules\ folder may not exist, 
#' so check first to see if you need to manually create. 

#' Here is the path to the user folder of modules for this machine
#' (if you are running on your own computer, you'll need to update for
#' your computer)
$userModulePath = 'C:\Users\rcain_000\Documents\WindowsPowerShell\Modules\'

#' Reminder here's the original path for the demos
$modulePath = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'

#' Name of our module
$moduleName = 'bpsd-m05-module-advanced-module'

#' First, we'll setup the new path for our module in the user folder,
#' then CREATE that folder
$userModulePathBPSD = "$($userModulePath)$($moduleName)" 
New-Item -ItemType directory -Force $userModulePathBPSD

#' Note if you have made a lot of changes to the files (i.e. removing files 
#' from the module) you may wish to clean out the directory prior to copying
Remove-Item "$($userModulePathBPSD)\*.*"

#' Copy our module to the users module folder (force will overwrite if there)
Copy-Item "$($modulePath)bpsd-m05-module-advanced-*.*" `
          $userModulePathBPSD `
          -Force

#' Validate the files are there
Get-ChildItem $userModulePathBPSD 

#' It's not loaded into memory yet! 
Get-Module

#' Now you can import the bpsd-m05-module-advanced-module without the path
Import-Module -Force $moduleName

#' Verify it is loaded
Get-Module

#' Test
Write-A
Write-B
Write-M

#' Unload the module
Remove-Module $moduleName

#' Verify it is unloaded
Get-Module</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_01_Advanced_Module_USAGE.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_01_Advanced_Module_USAGE.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' Here is the path to the demo folder, and the name of the module manifest
#' (update for your computer as needed)
$modulePath = 'C:\PS\Beginning PowerShell Scripting for Developers\demo\'
$moduleName = 'bpsd-m05-module-advanced-module-manifest'

#' We will import the module manifest file using the full path
$module = "$($modulePath)$($moduleName).psd1"

#' To use a module, you first need to import it
Import-Module -Force $module

#' Now the functions are available
Write-A
Write-B
Write-M

#' Write-APrivate wasn't exported and hence isn't visible, causes error
Write-APrivate

#' You can manually unload the module, or when your session ends it will
#' be automatically be unloaded.
Remove-Module $moduleName

#' Verify it is unloaded
Get-Module





</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Example_01_Manifest.psd1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Example_01_Manifest.psd1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'Example_01_Manifest.psd1

#' Manifests extension is: .psd1

&lt;#-----------------------------------------------------------------------------
 The .psd1 file MUST have the same name as its parent folder!
-----------------------------------------------------------------------------#&gt;

@{

# Name of the module to process
ModuleToProcess = 'bpsd-m05-module-advanced-module.psm1'

# Each module has to be uniquely identified. To do that PS uses a GUID.
# To generate a GUID, use the New-Guid cmdlet and copy the result in here
GUID = 'f8b3f920-a8e9-4e25-aef0-e0f3b3fb9978'

# Who wrote this module
Author = 'Robert C. Cain'

# Company who made this module
CompanyName = 'Pluralsight'

# Copyright 
Copyright = '(c) 2015 All rights reserved'

# Description of the module
Description = 'Sample demo for the Beginning PowerShell for Developers course'

# Version number for the module
ModuleVersion = '1.0.0.0'

# Minimum version of PowerShell needed to run this module
PowerShellVersion = '3.0'

# Min version of .NET Framework required 
DotNetFrameworkVersion = '2.0'

# Min version of the CLR required 
CLRVersion = '2.0.50727'

# Note there are many more items you can set.
}


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get_UserModulePath</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get_UserModulePath</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' This seems to open the folder 
function Get-UserModulePath {
 
    $Path = $env:PSModulePath -split ";" -match $env:USERNAME
 
    if (-not (Test-Path -Path $Path))
    {
        New-Item -Path $Path -ItemType Container | Out-Null
    }
        $Path
}
 
Invoke-Item (Get-UserModulePath)



#'================================================
#' This shows the module path, i.e. a list of all the folders it will look through
#' The first one in the list is your default module folder
&gt;$env:PSModulePath</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>gigMyModules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>gigMyModules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'1] created folder: C:\DATA\psModules\MyFunctions

'2] put file in the folder named: MyFunctions.psm1

'3] When I start up PS ISE, import the file: C:\DATA\psScripts\Set_Environment_To_Include_Modules.ps1

================================
'Which has this script:

#Save the current value in the $p variable.
$p = [Environment]::GetEnvironmentVariable("PSModulePath")

#Add the new path to the $p variable. Begin with a semi-colon separator.
$p += ";C:\DATA\psModules\"

#Add the paths in $p to the PSModulePath value.
[Environment]::SetEnvironmentVariable("PSModulePath",$p)

================================

'4] Confirm Env variable and that the module is available:

'a) Confirm path is set:
			&gt;$Env:PSModulePath
'b) module is available:
			&gt;Get-Module -listavailable
			
'5] To use the module, type the following in the shell (or put this line in your $profile, or put this as the first line in a script):

&gt; Import-Module MyFunctions	

'6] to see list of my fumctions

&gt; Get-Command -module MyFunctions</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Manifest_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Manifest_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'extension: .psd1

#' Esentially you are creating a hash table in the Manifest

#' The manifest file (.psd1) has to be in the same folder as the module (.psm1)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>mymods___PowerShell_drive_to_simplify_working_with_Modules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>mymods___PowerShell_drive_to_simplify_working_with_Modules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>mymods___PowerShell_drive_to_simplify_working_with_Modules

#'An easy way to work with modules is to create a couple of Windows PowerShell drives using the filesystem provider. 
#'Because the modules live in a location that is not easily navigated to from the command line, 
#'and because the $PSModulePath returns a string that contains the path to both the users’ 
#'and the system modules folders, 
#'it makes sense to provide an easier way to work with the modules location. 
#'To create a Windows PowerShell drive for the user module location, you use New-PSDrive cmdlet, 
#'specify a name such as mymods, use the filesystem provider, 
#'and obtain the root location from the $PSModulePath environmental variable 
#'by using the split method from the .NET Framework string class. 
#'For the users’ modules folder, you use the first element from the returned array. This is shown here:


#' 1] Create a folder for the modules:
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Modules</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>SaveFunctionToAModuleThenUseIt</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Modules</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>SaveFunctionToAModuleThenUseIt</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'The major benefit of using modules is that you can unload them from the shell if you need to, and it keeps the variables in the functions from creeping into the shell 
'(once you dot source a function file, try calling one of the variables from a function in the shell, and you'll see what I mean).

'So first, rename the .ps1 file that has all your functions in it to
	MyFunctions.psm1 
'(you've just created a module!). 
'Now for a module to load properly, you have to do some specific things with the file. 
'First for Import-Module to see the module (you use this cmdlet to load the module into the shell), 
'it has to be in a specific location. The default path to the modules folder is 
$home\Documents\WindowsPowerShell\Modules

'actually, I set it to:

C:\DATA\psModules\

'In that folder, create a folder named MyFunctions, 
'and place the MyFunctions.psm1 file into it 
'(the module file must reside in a folder with exactly the same name as the PSM1 file).

'Once that is done, open PowerShell, and run this command:

Get-Module -listavailable

'If you see one called MyFunctions, you did it right, and your module is ready to be loaded 
'	(this is just to ensure that this is set up right, you only have to do this once).

'To use the module, type the following in the shell 
'	(or put this line in your $profile, or put this as the first line in a script):

Import-Module MyFunctions

'You can now run your functions. The cool thing about this is that once you have 10-15 functions in there, 
'	you're going to forget the name of a couple. 
'	If you have them in a module, you can run the following command to get a list of all the functions in your module:

Get-Command -module MyFunctions</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_OutPut</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Create_HashTable_and_Array_put_hashTable_into_CustomObject_and_output_a_collection_of_CustomObjects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_OutPut</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Create_HashTable_and_Array_put_hashTable_into_CustomObject_and_output_a_collection_of_CustomObjects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>===========================================================================================
'This creates a Hashtable, and an array in the -begin section
'in the -process section, it populates the array with a hash table for each record
'In the -end section, it writes the Array of Hashtable objects to the console


#' EXAMPLE
dir c:\DATA -Directory | 
foreach -begin { $h=@{} ; $results=@() } -process { 
$stat = dir $_.FullName -file -Recurse | Measure-Object -Property length -sum
$h.Path = $_.fullname
$h.Files = $stat.count
$h.TotalSize = $stat.sum
$results+=[pscustomobject]$h
} -end { 
$results 
}

'OR  (NOTE can not break line at the following "-begin" "-process", nor "-end"

dir c:\DATA -Directory | 			#'Get Each Directory
foreach -begin { $h=@{} ; 			#'BEFORE: Initialize an empty hash table
                 $results=@() 		#'		 Initialize an empty array
               } -process {  		
               						#'Get a directory of every directory that comes through the initial command
               						#	'	and Pipe it to 'Measure-Object'
                            $stat = dir $_.FullName -file -Recurse | Measure-Object -Property length -sum
                            $h.Path = $_.fullname
                            $h.Files = $stat.count
                            $h.TotalSize = $stat.sum
                            $results+=[pscustomobject]$h	#'Create a custom object, and add the custom object to the array
                           } -end { 	#'Write the results to the Pipeline after the middle section is done
                                        $results 
                                    }
#' OUTPUT
============================
#'Path                                           Files TotalSize
#'----                                           ----- ---------
#'C:\DATA\junkPowerShellTranscripts                  0          
#'C:\DATA\mvc-request-life-cycle                  1752 190131578
#'C:\DATA\MVC_EF_Parent_Child                      338 116821830
#'C:\DATA\New folder                                 0          
#'C:\DATA\OLD                                     2696 809039298
#'C:\DATA\PowerShellScripts                          0          
#'C:\DATA\p_0003_Inventory_FE                      238 84695272 
#'C:\DATA\p_0003_Inventory_FE - Copy               200 57573241 
#'C:\DATA\p_0003_Inventory_FE_v2                   252 57633293 
#'C:\DATA\ReversePoco_regex_generator_for_tables    44 3504399  
#'C:\DATA\RPG_Car                                  606 208402554
#'C:\DATA\SQL_with_New_changes_for_p_0003           45 85942  
  
                                    
                                    
=========================================================================================== </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_poswsus</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Install-WSUSServer.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_poswsus</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Install-WSUSServer.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' TO install only the console
#'			. .\Install-WSUSServer.ps1 –ConsoleOnly -verbose
===========================================================================================
This script allows you to install a WSUS server locally or remotely using a variety of configuration options. 
	You can also just install the WSUS Administration Console without having to install the entire server! 
	This script makes use of psexec.exe, 
		which is available to download from this link: 
		http://download.sysinternals.com/Files/SysinternalsSuite.zip. 
	This file must be in the same location as the script, 
		otherwise the script will not run.

The script also requires either the x86 or x64 installation file, 
	which the script will download for you if you allow it to and have an available internet connection 
		from the location you are running the script. 
Keep in mind that the installation files must be in the same location as the script 
	and you also need to keep the installation file's original name.

Also, be sure to check out my companion script: Uninstall-WSUSServer.ps1 as well!
============================================================================================
&lt;#  
.SYNOPSIS  
    Downloads (if needed) and performs an unattended installation of WSUS Server with SP2 on a local or remote system. Requires psexec.exe to be in the same
    location as the script in order to run properly.

.DESCRIPTION
    Downloads (if needed) and performs an unattended installation of WSUS Server with SP2 on a local or remote system. Requires psexec.exe to be in the same
    location as the script in order to run properly. Also optional to have the installation files in the same location as the script, otherwise the files will
    be downloaded from the internet.
     
.PARAMETER Computername
    Name of computer to install WSUS server on.

.PARAMETER ConsoleOnlyServer
    Switch used to only install the console without installing the server application.

.PARAMETER StoreUpdatesLocally
    Switch used to determine if updates will be downloaded and saved to system locally.

.PARAMETER ContentDirectory
    Path to the local content folder holding update files. Default location is: %rootdrive%\WSUS\WSUSContent where the root drive is the largest local drive on the system.

.PARAMETER InternalDatabasePath
    Path to install the internal database
    
.PARAMETER CreateDatabase
    Create a database on the SQL server. Will not create database and attempt to use existing database if switch not used.

.PARAMETER WebsitePort
    Determine the port of the WSUS Site. Accepted Values are "80" and "8530". 

.PARAMETER SQLInstance
    Name of the SQL Instance to connect to for database
    
.PARAMETER IsFrontEndServer
    This server will be a front end server in an NLB

.NOTES  
    Name: Install-WSUSServer
    Author: Boe Prox
    DateCreated: 29NOV2011 
           
.LINK  
    https://learn-powershell.net
    
.EXAMPLE
Install-WSUSServer.ps1 -ConsoleOnly

Description
-----------
Installs the WSUS Console on the local system

.EXAMPLE
Install-WSUSServer.ps1 -ConsoleOnly -Computername Server1

Description
-----------
Installs the WSUS Console on the remote system Server1

.EXAMPLE
Install-WSUSServer.ps1 -Computername TestServer -StoreUpdatesLocally -ContentDirectory "D:\WSUS" -InternalDatabasePath "D:\" -CreateDatabase

Description
-----------
Installs WSUS server on TestServer and stores content locally on D:\WSUS and installs an internal database on D:\

.EXAMPLE
Install-WSUSServer.ps1 -Computername A24 -StoreUpdatesLocally -ContentDirectory "D:\WSUS" -SQLInstance "Server1\Server1" -CreateDatabase

Description
-----------
Installs WSUS server on TestServer and stores content locally on D:\WSUS and creates a database on Server1\Server1 SQL instance

.EXAMPLE
Install-WSUSServer.ps1 -Computername A24 -StoreUpdatesLocally -ContentDirectory "D:\WSUS" -SQLInstance "Server1\Server1"

Description
-----------
Installs WSUS server on TestServer and stores content locally on D:\WSUS and uses an existing WSUS database on Server1\Server1 SQL instance
#&gt; 
[cmdletbinding(
    DefaultParameterSetName = 'Console',
    SupportsShouldProcess = $True
)]
Param (
    [parameter(ValueFromPipeLine = $True)]
    [string]$Computername = $Env:Computername,
    [parameter(ParameterSetName = 'Console')]
    [switch]$ConsoleOnly,
    [parameter(ParameterSetName = 'SQLInstanceDatabase')]
    [parameter(ParameterSetName = 'InternalDatabase')]
    [switch]$StoreUpdatesLocally,
    [parameter(ParameterSetName = 'SQLInstanceDatabase')]
    [parameter(ParameterSetName = 'InternalDatabase')]
    [string]$ContentDirectory,
    [parameter(ParameterSetName = 'InternalDatabase')]
    [string]$InternalDatabasePath, 
    [parameter(ParameterSetName = 'SQLInstanceDatabase')]
    [parameter(ParameterSetName = 'InternalDatabase')]
    [ValidateSet("80","8530")]
    [string]$WebsitePort,
    [parameter(ParameterSetName = 'SQLInstanceDatabase')]
    [parameter(ParameterSetName = 'InternalDatabase')]
    [switch]$CreateDatabase,
    [parameter(ParameterSetName = 'SQLInstanceDatabase')]
    [string]$SQLInstance,
    [parameter(ParameterSetName = 'SQLInstanceDatabase')]
    [parameter(ParameterSetName = 'InternalDatabase')]
    [switch]$IsFrontEndServer    
    
)
Begin {
    If (-NOT (Test-Path psexec.exe)) {
        Write-Warning ("Psexec.exe is not in the current directory! Please copy psexec to this location: {0} or change location to where psexec.exe is currently at.`nPsexec can be downloaded from the following site:`
        http://download.sysinternals.com/Files/SysinternalsSuite.zip" -f $pwd)
        Break
    }
    
    #Source Files for X86 and X64
    Write-Verbose "Setting source files"
    $x86 = Join-Path $pwd "WSUS30-KB972455-x86.exe"
    $x64 = Join-Path $pwd "WSUS30-KB972455-x64.exe"
        
    #Menu items for later use if required
    Write-Verbose "Building scriptblock for later use"
    $sb = {$title = "WSUS File Required"
    $message = "The executable you specified needs to be downloaded from the internet. Do you wish to allow this?"
    $yes = New-Object System.Management.Automation.Host.ChoiceDescription "&amp;Yes", `
        "Download the file."
    $no = New-Object System.Management.Automation.Host.ChoiceDescription "&amp;No", `
        "Do not download the file. I will download it myself."    
    $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)
    Write-Verbose "Launching menu for file download"
    $Host.ui.PromptForChoice($title, $message, $options, 0)}             
    
    Write-Verbose "Adding URIs for installation files"
    #URI of specified files if needed to download        
    $WSUS_X86 = "http://download.microsoft.com/download/B/0/6/B06A69C3-CF97-42CF-86BF-3C59D762E0B2/WSUS30-KB972455-x86.exe"
    $WSUS_X64 = "http://download.microsoft.com/download/B/0/6/B06A69C3-CF97-42CF-86BF-3C59D762E0B2/WSUS30-KB972455-x64.exe"
    
    #Define Quiet switch first
    $arg = "/q "
    
    #Process parameters
    If ($PSBoundParameters['ConsoleOnly']) {
        Write-Verbose "Setting argument to Console Install Only"
        $arg += "CONSOLE_INSTALL=1 "
    }
    If ($PSBoundParameters['StoreUpdatesLocally']){
        $arg += "CONTENT_LOCAL=1 "
        If ($PSBoundParameters['ContentDirectory']) {
            $arg += "CONTENT_DIR=$ContentDirectory "
        }
    }
    If ($PSBoundParameters['WebsitePort']) {
            Switch ($WebsitePort) {
            "80" {
                $arg += "DEFAULT_WEBSITE=1 "
            }
            "8530" {
                $arg += "DEFAULT_WEBSITE=0 "
            }
            Default {
                $arg += "DEFAULT_WEBSITE=1 "
            }
        }
    }
    If ($PSBoundParameters['InternalDatabasePath']) {
        $arg += "WYUKON_DATA_DIR=$InternalDatabasePath "
    }
    If ($PSBoundParameters['CreateDatabase']) {
        $arg += "CREATE_DATABASE=1 "
    } ElseIf ($PSCmdlet.ParameterSetName -ne 'Console') {
        #Use default database
        $arg += "CREATE_DATABASE=0 "
    }
    If ($PSBoundParameters['SQLInstance']) {
        $arg += "SQLINSTANCE_NAME=$SQLInstance "
    }
    If ($PSBoundParameters['IsFrontEndServer']) {
        $arg += "FRONTEND_SETUP=1 "
    }
}
Process {
    Try {
        $OSArchitecture = Get-WmiObject Win32_OperatingSystem -ComputerName $Computername | Select -Expand OSArchitecture -EA Stop
    } Catch {
        Write-Warning ("{0}: Unable to perform lookup of operating system!`n{1}" -f $Computername,$_.Exception.Message)
    }  
    If ($OSArchitecture -eq "64-bit") {
        Write-Verbose ("{0} using 64-bit" -f $Computername)
        If (-NOT (Test-Path $x64)) {
            Write-Verbose ("{0} not found, download from internet" -f $x64)
            switch (&amp;$sb) {
                0 {
                    If ($pscmdlet.ShouldProcess($WSUS_X64,"Download File")) {
                        Write-Verbose "Configuring webclient to download file"
                        $wc = New-Object Net.WebClient
                        $wc.UseDefaultCredentials = $True              
                        Write-Host -ForegroundColor Green -BackgroundColor Black ("Downloading from {0} to {1} prior to installation. This may take a few minutes" -f $WSUS_X64,$x64)
                        Try {
                            $wc.DownloadFile($WSUS_X64,$x64)                                                                                    
                        } Catch {
                            Write-Warning ("Unable to download file!`nReason: {0}" -f $_.Exception.Message)
                            Break
                        } 
                    }                   
                }
                1 {
                    #Cancel action
                    Break
                }                
            }
        } 
        #Copy file to root drive
        If (-NOT (Test-Path ("\\$Computername\c$\{0}" -f (Split-Path $x64 -Leaf)))) {
            Write-Verbose ("Copying {0} to {1}" -f $x64,$Computername)
            If ($pscmdlet.ShouldProcess($Computername,"Copy File")) {                                
                Try {
                    Copy-Item -Path $x64 -Destination "\\$Computername\c$" -EA Stop
                } Catch {
                    Write-Warning ("Unable to copy {0} to {1}`nReason: {2}" -f $x64,$Computername,$_.Exception.Message)
                }
            }
        } Else {Write-Verbose ("{0} already exists on {1}" -f (Split-Path $x64 -Leaf),$Computername)}
        #Perform the installation
        Write-Verbose ("Begin installation on {0} using specified options" -f $Computername)
        If ($pscmdlet.ShouldProcess($Computername,"Install WSUS")) {
            .\psexec.exe -accepteula -i -s \\$Computername cmd /c ("C:\{0} $arg" -f (Split-Path $x64 -Leaf))                                
        }
    } Else {
        Write-Verbose ("{0} using 32-bit" -f $Computername)
        If (-NOT (Test-Path $x86)) {
            Write-Verbose ("{0} not found, download from internet" -f $x86)
            switch (&amp;$sb) {
                0 {
                    If ($pscmdlet.ShouldProcess($WSUS_X86,"Download File")) {
                        Write-Verbose "Configuring webclient to download file"
                        $wc = New-Object Net.WebClient
                        $wc.UseDefaultCredentials = $True              
                        Write-Host -ForegroundColor Green -BackgroundColor Black ("Downloading from {0} to {1} prior to installation. This may take a few minutes" -f $WSUS_X86,$x86)
                        Try {
                            $wc.DownloadFile($WSUS_X86,$x86)                                                                                          
                        } Catch {
                            Write-Warning ("Unable to download file!`nReason: {0}" -f $_.Exception.Message)
                            Break
                        }
                    }                    
                }
                1 {
                    #Cancel action
                    Break
                }                                
            }
        }
        #Copy file to root drive
        If (-NOT (Test-Path ("\\$Computername\c$\{0}" -f (Split-Path $x86 -Leaf)))) {
            Write-Verbose ("Copying {0} to {1}" -f $x86,$Computername) 
            If ($pscmdlet.ShouldProcess($Computername,"Copy File")) {
                Try {
                    Copy-Item -Path $x86 -Destination "\\$Computername\c$" -EA Stop
                } Catch {
                    Write-Warning ("Unable to copy {0} to {1}`nReason: {2}" -f $x86,$Computername,$_.Exception.Message)
                }
            }
        } Else {Write-Verbose ("{0} already exists on {1}" -f $x86,$Computername)}
        #Perform the installation
        Write-Verbose ("Begin installation on {0} using specified options" -f $Computername)
        If ($pscmdlet.ShouldProcess($Computername,"Install WSUS")) {
            .\psexec.exe -accepteula -i -s \\$Computername cmd /c ("C:\{0} $arg" -f (Split-Path $x86 -Leaf))
        }
    }   
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>prompt_in_Profile</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>prompt_in_Profile</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'    The Windows PowerShell prompt is determined by the built-in Prompt
'    function. You can customize the prompt by creating your own Prompt
'    function and saving it in your Windows PowerShell profile.

=============================================================================

'http://kevinmarquette.blogspot.com/2015/11/here-is-my-custom-powershell-prompt.html

'I change my prompt to just show the current folder and place the full path in the tittle bar.
' I just save my last command to a text file whenever I run it.
'The last thing I so is calculate where in the history the next command will be and add that to my prompt.
'REQUIRES that you create a folder named 'log' in the directory:  C:\Users\glenn\Documents\WindowsPowerShell\

$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

=============================================================================

'To be able to get time and path with colors in my prompt :

function Get-Time { return $(get-date | foreach { $_.ToLongTimeString() } ) }
function prompt
{
    # Write the time 
    write-host "[" -noNewLine
    write-host $(Get-Time) -foreground yellow -noNewLine
    write-host "] " -noNewLine
    # Write the path
    write-host $($(Get-Location).Path.replace($home,"~").replace("\","/")) -foreground green -noNewLine
    write-host $(if ($nestedpromptlevel -ge 1) { '&gt;&gt;' }) -noNewLine
    return "&gt; "
}

===================================================================

'My prompt contains:

$width = ($Host.UI.RawUI.WindowSize.Width - 2 - $(Get-Location).ToString().Length)
$hr = New-Object System.String @('-',$width)
Write-Host -ForegroundColor Red $(Get-Location) $hr

'Which gives me a divider between commands that's easy to see when scrolling back. It also shows me the current directory without using horizontal space on the line that I'm typing on.

'For example:

C:\Users\Jay ----------------------------------------------------------------------------------------------------------
[1] PS&gt;

===================================================================

# Setup the Console look and feel
$host.UI.RawUI.ForegroundColor = "Yellow"
if ( Test-Admin ) {
    $title = "Administrator Shell - {0}" -f $host.UI.RawUI.WindowTitle
    $host.UI.RawUI.WindowTitle = $title;
}

===================================================================

function Get-Time { return $(get-date | foreach { $_.ToLongTimeString() } ) }
function prompt
{
    # Write the time 
    write-host "[" -noNewLine
    write-host $(Get-Time) -foreground yellow -noNewLine
    write-host "] " -noNewLine
    # Write the path
    write-host $($(Get-Location).Path.replace($home,"~").replace("\","/")) -foreground green -noNewLine
    write-host $(if ($nestedpromptlevel -ge 1) { '&gt;&gt;' }) -noNewLine
    return "&gt; "
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Sample_Profile_0____about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Sample_Profile_0____about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Sample_Profile_0____about

'This is my standard profile
'By default for the ISE it is kept in:
C:\Users\glenn\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1

'So to create it, first create the folders:
-------------------------------------------
C:\Users\glenn\Documents\WindowsPowerShell
C:\Users\glenn\Documents\WindowsPowerShell\log
C:\Users\glenn\Documents\WindowsPowerShell\Modules
#'	DECIDED NOT TO USE THIS ONE:				C:\Users\glenn\Documents\WindowsPowerShell\transcript
C:\DATA\junkPowerShellTranscripts
C:\DATA\PowerShellScripts
C:\JUNK						'&lt;===== This is for the transcript files

'For each of the Modules included by the Profile, you need to create a folder:
C:\Users\glenn\Documents\WindowsPowerShell\Modules\PowerShellISEModule



'Then create the empty text file:
C:\Users\glenn\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1
C:\Users\glenn\Documents\WindowsPowerShell\Modules\PowerShellISEModule\PowerShellISEModule.psm1

'1] Then populate the PowerShellISE_profile.ps1 file by copy/paste the script into that file
'2] Then populate the PowerShellISEModule.psm1 file by copy/paste the script into that file


'Once the profile is run,you can go to the modules folder by doing this:
&gt;Set-Location myMods:

'You can go to the scripts folder by doing this:
&gt; Set-Location $myScripts</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Sample_Profile_0____PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Sample_Profile_0____PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

Function gig-commentIt
{
 &lt;#
   .Synopsis
    This function will add a remark #' character to beginning of line
   .Description
    This function will add a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to comment out
    a section of PowerShell code. 
   .Example
    Add-RemarkedText
    adds the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ("#'" + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-commentIt

Function gig-unCommentIt
{
 &lt;#
   .Synopsis
    This function will remove a remark #' character to beginning of line
   .Description
    This function will remove a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to clean up a 
    previously commentted out section of PowerShell code. 
   .Example
    gig-unCommentIt
    Removes the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($l -replace "#'",''),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-unCommentIt


Function gig-editProfile
{

 psedit $profile

 #'ISE $profile

} #'end function gig-editProfile

Function gig-addHelp
{
  &lt;#
   .Synopsis
    This function adds help at current insertion point 
   .Example
    add-help
    adds comment based help at current insertion point 
   .Notes
    NAME:  Add-Help
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016
    HSG: WES-09-11-10
    KEYWORDS: Scripting Techniques, Windows PowerShell ISE
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $helpText = @"
 &lt;#
   .Synopsis
    This does that 
   .Description
    This function does
   .Example
    Example-
    Example- accomplishes 
   .Parameter 
    The parameter
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS:
    HSG: 
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
"@
 $psise.CurrentFile.Editor.InsertText($helpText)
} #'end function gig-addHelp

Function gig-addHeaderToScript
{
  &lt;#
   .Synopsis
    This function adds header information to a script 
   .Example
    Add-HeaderToScript
    Adds header comments to script 
   .Example 
    AH
    Uses alias to add header comments to script
   .Notes
    NAME:  Add-HeaderToScript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS: $keyword
    HSG: $hsg
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($keyword, $comment, $hsg)
 $header = @"
#' -----------------------------------------------------------------------------
#' Script: $(split-path -Path $psISE.CurrentFile.FullPath -Leaf)
#' Author: glenn garson, JPHSA
#' Date: $(Get-Date)
#' Keywords: $keyword
#' comments: $comment
#'
#' -----------------------------------------------------------------------------
"@
 $psise.CurrentFile.Editor.InsertText($header)
} #'end function gig-addHeaderToScript

Function gig-getLogNameFromDate
{
  &lt;#
   .Synopsis
    Creates a log name from date
   .Description
    This script creates a log from a date. 
   .Example
    gig-getLogNameFromDate -path "c:\jumk" -name "log"
    Creates a file name like c:\JUNK\log20100914-122019.Txt but does not
    create the file. It returns the file name to calling code.
   .Example
    gig-getLogNameFromDate -path "c:\JUNK" -name "log" -Create
    Creates a file name like c:\JUNK\log20100914-122019.Txt and
    create the file. It returns the file name to calling code.
   .Parameter path
    path to log file
   .Parameter name
    base name of log file
   .Parameter create
    switch that determines whether log file or only name is created
   .inputs
    [string]
   .outputs
    [string]
   .Notes
    NAME:  gig-getLogNameFromDate
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 16:58:06
    KEYWORDS: parameter substitution, format specifier, string substitution
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param(
  [string]$path = "c:\JUNKC:\DATA\junkPowerShellTranscripts",
  [string]$name = "log",
  [switch]$Create
 )
 $logname = "{0}\{1}{2}.{3}" -f $path,$name, `
    (Get-Date -Format yyyyMMdd-HHmmss),"Txt"
 if($create) 
  { 
   New-Item -Path $logname -ItemType file -force | out-null
   $logname
  }
 else {$logname}
} #' end function gig-getLogNameFromDate

Function gig-start_ISE_Transcript
{
  &lt;#
   .Synopsis
    This captures output from a script to a created text file
    To use the gig-start_ISE_Transcript function, add the call to the function at the bottom of your script.
   .Example

    xxxxx...{your script}
    gig-start_ISE_Transcript -logname "c:\junk\log.txt"

    Copies output from script to file named xxxxlog.txt in c:\junk folder
   .Parameter logname
    the name and path of the log file.
   .inputs
    [string]
   .outputs
    [io.file]
   .Notes
    NAME:  gig-start_ISE_Transcript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 17:27:22
    KEYWORDS:
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
  Param(
   [string]$logname = (gig-getLogNameFromDate -path $transcriptHome -name "log" -Create)
  )
  $transcriptHeader = @"
**************************************
Windows PowerShell ISE Transcript Start
Start Time: $(get-date)
UserName: $env:username
UserDomain: $env:USERDNSDOMAIN
ComputerName: $env:COMPUTERNAME
Windows version: $((Get-WmiObject win32_operatingsystem).version)
**************************************
Transcript started. Output file is $logname
"@
 $transcriptHeader &gt;&gt; $logname
 $psISE.CurrentPowerShellTab.ConsolePane.Text &gt;&gt; $logname
 “Log saved to $logname”
} #'end function gig-start_ISE_Transcript

function gig-indentText_x_spaces
{
  &lt;#
   .Synopsis
    This function will indent text in the ISE a specific number
   .Description
    This function will indent selected text in the PowerShell ISE. These are
    real spaces, not tabs. Therefore this is appropriate for situations where
    an actual tab "`t" will not work. 
   .Example
    gig-indentText_x_spaces -space 5
    moves selected text five spaces 
   .Parameter spaces
    The number of spaces to indent the selected text. Note this number cannot
    be a negative number, and this function does not "unindent" the selected text.
   .Notes
    NAME:  gig-indentText_x_spaces
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 06/11/2012 17:16:29
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-6-17-12
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param([int]$space = 1)
 $tab = " " * $space
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($tab + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'end function gig-indentText_x_spaces

Function gig-editModule
{
  &lt;#
   .Synopsis
    This opens a module stored in the $env:PSModulePath location on a new tab in ISE 
   .Description
    This function uses Get-Module to retrieve a module from $env:PSModulePath and then
    it opens the module from that location into a new tab in ISE for editing. Wildcard
    characters that resolve to a single module are supported.
   .Example
    gig-editModule PowerShellISEModule
    gig-editModule PowerShellISEModule opens the PowerShellISEModule into a new tab in the
    ISE for editing 
  .Example
    gig-editModule PowerShellISE*
    gig-editModule PowerShellISE* opens the PowerShellISEModule into a new tab in the
    ISE for editing by using a wild card character for the module name
   .Parameter Name
    The name of the module. Wild cards that resolve to a single module are supported
   .Notes
    NAME:  gig-editModule
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 18:14:19
    KEYWORDS: Scripting Techniques, Modules
    HSG: WES-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($name)
 ISE (Get-Module -ListAvailable $name).path
} #'end function gig-editModule

Function gig-toggleOutlineView
{
  &lt;#
   .Synopsis
    This function toggles the outline view in the ISE 
   .Description
    This function toggles the outline view in the ISE. It will expand 
    or collapse all functions in the current script pane.
   .Example
    gig-toggleOutlineView
    gig-toggleOutlineView will either expand or collapse all functions 
   .Notes
    NAME:  gig-toggleOutlineView
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 19:28:37
    KEYWORDS: Scripting Techniques, Modules
    HSG: wes-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 3.0
 #&gt;
 $psise.CurrentFile.Editor.ToggleOutliningExpansion()
} #'end function gig-toggleOutlineView


#'added Functions from New-ModulesDrive.ps1
#' HSG-1-20-10
Function gig-newModuleDrives
{
&lt;#
    .SYNOPSIS
    Creates two PSDrives: myMods and sysMods
    .EXAMPLE
    gig-newModuleDrives
    Creates two PSDrives: myMods and sysMods. These correspond 
    to the users' modules folder and the system modules folder respectively. 
#&gt;
 $driveNames = "myMods","sysMods"

 For($i = 0 ; $i -le 1 ; $i++)
 {
  New-PsDrive -name $driveNames[$i] -PSProvider filesystem `
  -Root ($env:PSModulePath.split(";")[$i]) -scope Global |
  Out-Null
 } #'end For
} #'end gig-newModuleDrives

Function gig-getFileSystemDrives
{
&lt;#
    .SYNOPSIS
    Displays global PS Drives that use the Filesystem provider
    .EXAMPLE
    gig-getFileSystemDrives
    Displays global PS Drives that use the Filesystem provider
#&gt;
 Get-PSDrive -PSProvider FileSystem -scope Global
} #'end gig-getFileSystemDrives

Function gig-OpenPath
{
 &lt;#
   .Synopsis
    Opens a path in Explorer 
   .Description
    Opens a path in Explorer, default path is C:\, or the first parameter is the path
   .Example
    gig-OpenPath C:\Junk
    gig-OpenPath $moduleHome 
   .Parameter Path
    The path to open in Explorer
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/26/2016 17:31:28
    KEYWORDS:
    HSG: 
   .Link
     
 #'Requires -Version 2.0
 #&gt;
  Param(
  [string]$path = "C:\"
 )
 Invoke-Item -Path $path
 }
 
#' *** Alias ***
#'if(!(Test-Path alias:ah))
#' {
#'  New-Alias -Name ah -Value add-headertoscript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:abh))
#' {
#'  New-Alias -Name abh -Value Add-SBSBookHeaderToScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ahlp))
#' {
#'  New-Alias -Name ahlp -Value add-help -Description "MrEd alias" |
#'  Out-Null
#'  }
#'  if(!(Test-Path alias:ras))
#' {
#'  New-Alias -Name ras -Value Remove-AliasFromScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:gfsd))
#' {
#'  New-Alias -Name gfsd -Value gig-getFileSystemDrives -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:cs))
#' {
#'  New-Alias -Name cs -value Copy-ScriptToNewTab -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ar))
#' {
#'  New-Alias -Name ar -value Add-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:rr))
#' {
#'  New-Alias -Name rr -value Remove-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:em))
#' {
#'  New-Alias -Name em -value Edit-Module -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:iem))
#' {
#'  New-Alias -Name iem -value Import-EveryModule -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:sov))
#' {
#'  New-Alias -Name sov -value gig-toggleOutlineView -Description "MrEd alias" |
#'  Out-Null
#'  }



#' *** Variables ***
if(!(Test-Path variable:moduleHome))
{
 new-variable -name moduleHome -value "$env:userProfile\documents\WindowsPowerShell\Modules"
}
#'if(!(Test-Path variable:backupHome))
#'{
#' new-variable -name backupHome -value "$env:userProfile\documents\WindowsPowerShell\profileBackup"
#'}

if(!(Test-Path variable:TranscriptHome))
{
 new-variable -name TranscriptHome -value "C:\DATA\junkPowerShellTranscripts"
 #' new-variable -name TranscriptHome -value "$env:userProfile\documents\WindowsPowerShell\transcript"
}

if(!(Test-Path variable:myScripts))
{
 new-variable -name myScripts -value "C:\DATA\PowerShellScripts"
}

Set-Location $myScripts

Clear-Host

Export-ModuleMember -alias * -function * -variable *</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>SAMPLE_Profile_2___nice</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>SAMPLE_Profile_2___nice</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'http://kevinmarquette.blogspot.com/2015/11/here-is-my-custom-powershell-prompt.html

'I change my prompt to just show the current folder and place the full path in the tittle bar.
' I just save my last command to a text file whenever I run it.
'The last thing I so is calculate where in the history the next command will be and add that to my prompt.

$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Sample_Profile_3__PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Sample_Profile_3__PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

Function gig-commentIt
{
 &lt;#
   .Synopsis
    This function will add a remark #' character to beginning of line
   .Description
    This function will add a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to comment out
    a section of PowerShell code. 
   .Example
    Add-RemarkedText
    adds the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ("#'" + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-commentIt

Function gig-unCommentIt
{
 &lt;#
   .Synopsis
    This function will remove a remark #' character to beginning of line
   .Description
    This function will remove a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to clean up a 
    previously commentted out section of PowerShell code. 
   .Example
    gig-unCommentIt
    Removes the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($l -replace "#'",''),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-unCommentIt


Function gig-editProfile
{

 psedit $profile

 #'ISE $profile

} #'end function gig-editProfile

Function gig-addHelp
{
  &lt;#
   .Synopsis
    This function adds help at current insertion point 
   .Example
    add-help
    adds comment based help at current insertion point 
   .Notes
    NAME:  Add-Help
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016
    HSG: WES-09-11-10
    KEYWORDS: Scripting Techniques, Windows PowerShell ISE
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $helpText = @"
 &lt;#
   .Synopsis
    This does that 
   .Description
    This function does
   .Example
    Example-
    Example- accomplishes 
   .Parameter 
    The parameter
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS:
    HSG: 
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
"@
 $psise.CurrentFile.Editor.InsertText($helpText)
} #'end function gig-addHelp

Function gig-addHeaderToScript
{
  &lt;#
   .Synopsis
    This function adds header information to a script 
   .Example
    Add-HeaderToScript
    Adds header comments to script 
   .Example 
    AH
    Uses alias to add header comments to script
   .Notes
    NAME:  Add-HeaderToScript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS: $keyword
    HSG: $hsg
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($keyword, $comment, $hsg)
 $header = @"
#' -----------------------------------------------------------------------------
#' Script: $(split-path -Path $psISE.CurrentFile.FullPath -Leaf)
#' Author: glenn garson, JPHSA
#' Date: $(Get-Date)
#' Keywords: $keyword
#' comments: $comment
#'
#' -----------------------------------------------------------------------------
"@
 $psise.CurrentFile.Editor.InsertText($header)
} #'end function gig-addHeaderToScript

Function gig-getLogNameFromDate
{
  &lt;#
   .Synopsis
    Creates a log name from date
   .Description
    This script creates a log from a date. 
   .Example
    gig-getLogNameFromDate -path "c:\jumk" -name "log"
    Creates a file name like c:\JUNK\log20100914-122019.Txt but does not
    create the file. It returns the file name to calling code.
   .Example
    gig-getLogNameFromDate -path "c:\JUNK" -name "log" -Create
    Creates a file name like c:\JUNK\log20100914-122019.Txt and
    create the file. It returns the file name to calling code.
   .Parameter path
    path to log file
   .Parameter name
    base name of log file
   .Parameter create
    switch that determines whether log file or only name is created
   .inputs
    [string]
   .outputs
    [string]
   .Notes
    NAME:  gig-getLogNameFromDate
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 16:58:06
    KEYWORDS: parameter substitution, format specifier, string substitution
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param(
  [string]$path = "c:\JUNKC:\DATA\junkPowerShellTranscripts",
  [string]$name = "log",
  [switch]$Create
 )
 $logname = "{0}\{1}{2}.{3}" -f $path,$name, `
    (Get-Date -Format yyyyMMdd-HHmmss),"Txt"
 if($create) 
  { 
   New-Item -Path $logname -ItemType file -force | out-null
   $logname
  }
 else {$logname}
} #' end function gig-getLogNameFromDate

Function gig-start_ISE_Transcript
{
  &lt;#
   .Synopsis
    This captures output from a script to a created text file
    To use the gig-start_ISE_Transcript function, add the call to the function at the bottom of your script.
   .Example

    xxxxx...{your script}
    gig-start_ISE_Transcript -logname "c:\junk\log.txt"

    Copies output from script to file named xxxxlog.txt in c:\junk folder
   .Parameter logname
    the name and path of the log file.
   .inputs
    [string]
   .outputs
    [io.file]
   .Notes
    NAME:  gig-start_ISE_Transcript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 17:27:22
    KEYWORDS:
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
  Param(
   [string]$logname = (gig-getLogNameFromDate -path $transcriptHome -name "log" -Create)
  )
  $transcriptHeader = @"
**************************************
Windows PowerShell ISE Transcript Start
Start Time: $(get-date)
UserName: $env:username
UserDomain: $env:USERDNSDOMAIN
ComputerName: $env:COMPUTERNAME
Windows version: $((Get-WmiObject win32_operatingsystem).version)
**************************************
Transcript started. Output file is $logname
"@
 $transcriptHeader &gt;&gt; $logname
 $psISE.CurrentPowerShellTab.ConsolePane.Text &gt;&gt; $logname
 “Log saved to $logname”
} #'end function gig-start_ISE_Transcript

function gig-indentText_x_spaces
{
  &lt;#
   .Synopsis
    This function will indent text in the ISE a specific number
   .Description
    This function will indent selected text in the PowerShell ISE. These are
    real spaces, not tabs. Therefore this is appropriate for situations where
    an actual tab "`t" will not work. 
   .Example
    gig-indentText_x_spaces -space 5
    moves selected text five spaces 
   .Parameter spaces
    The number of spaces to indent the selected text. Note this number cannot
    be a negative number, and this function does not "unindent" the selected text.
   .Notes
    NAME:  gig-indentText_x_spaces
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 06/11/2012 17:16:29
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-6-17-12
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param([int]$space = 1)
 $tab = " " * $space
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($tab + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'end function gig-indentText_x_spaces

Function gig-editModule
{
  &lt;#
   .Synopsis
    This opens a module stored in the $env:PSModulePath location on a new tab in ISE 
   .Description
    This function uses Get-Module to retrieve a module from $env:PSModulePath and then
    it opens the module from that location into a new tab in ISE for editing. Wildcard
    characters that resolve to a single module are supported.
   .Example
    gig-editModule PowerShellISEModule
    gig-editModule PowerShellISEModule opens the PowerShellISEModule into a new tab in the
    ISE for editing 
  .Example
    gig-editModule PowerShellISE*
    gig-editModule PowerShellISE* opens the PowerShellISEModule into a new tab in the
    ISE for editing by using a wild card character for the module name
   .Parameter Name
    The name of the module. Wild cards that resolve to a single module are supported
   .Notes
    NAME:  gig-editModule
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 18:14:19
    KEYWORDS: Scripting Techniques, Modules
    HSG: WES-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($name)
 ISE (Get-Module -ListAvailable $name).path
} #'end function gig-editModule

Function gig-toggleOutlineView
{
  &lt;#
   .Synopsis
    This function toggles the outline view in the ISE 
   .Description
    This function toggles the outline view in the ISE. It will expand 
    or collapse all functions in the current script pane.
   .Example
    gig-toggleOutlineView
    gig-toggleOutlineView will either expand or collapse all functions 
   .Notes
    NAME:  gig-toggleOutlineView
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 19:28:37
    KEYWORDS: Scripting Techniques, Modules
    HSG: wes-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 3.0
 #&gt;
 $psise.CurrentFile.Editor.ToggleOutliningExpansion()
} #'end function gig-toggleOutlineView


#'added Functions from New-ModulesDrive.ps1
#' HSG-1-20-10
Function gig-newModuleDrives
{
&lt;#
    .SYNOPSIS
    Creates two PSDrives: myMods and sysMods
    .EXAMPLE
    gig-newModuleDrives
    Creates two PSDrives: myMods and sysMods. These correspond 
    to the users' modules folder and the system modules folder respectively. 
#&gt;
 $driveNames = "myMods","sysMods"

 For($i = 0 ; $i -le 1 ; $i++)
 {
  New-PsDrive -name $driveNames[$i] -PSProvider filesystem `
  -Root ($env:PSModulePath.split(";")[$i]) -scope Global |
  Out-Null
 } #'end For
} #'end gig-newModuleDrives

Function gig-getFileSystemDrives
{
&lt;#
    .SYNOPSIS
    Displays global PS Drives that use the Filesystem provider
    .EXAMPLE
    gig-getFileSystemDrives
    Displays global PS Drives that use the Filesystem provider
#&gt;
 Get-PSDrive -PSProvider FileSystem -scope Global
} #'end gig-getFileSystemDrives

Function gig-OpenPath
{
 &lt;#
   .Synopsis
    Opens a path in Explorer 
   .Description
    Opens a path in Explorer, default path is C:\, or the first parameter is the path
   .Example
    gig-OpenPath C:\Junk
    gig-OpenPath $moduleHome 
   .Parameter Path
    The path to open in Explorer
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/26/2016 17:31:28
    KEYWORDS:
    HSG: 
   .Link
     
 #'Requires -Version 2.0
 #&gt;
  Param(
  [string]$path = "C:\"
 )
 Invoke-Item -Path $path
 }


 function gig-LoadNetworkPSDrives
{
#'    net use G: "\\Jphsa.org\shared\Data" 
#'    net use H: "\\Jphsa.org\shared\Users\ggarson\" 
#'    net use I: "\\Jphsa-ebhost2\AnasaziFiles\" 
#'    net use M: "\\Jphsa.org\shared\Data\MIS\" 
#'    net use N: "\\Jphsa-ebfile01\e$\" 
#'    net use P: "\\Jphsa.org\shared\Users\ggarson\PROJECTS"


    New-PSDrive -Name "G" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Data" -scope Global
    New-PSDrive -Name "H" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Users\ggarson\" -scope Global
    New-PSDrive -Name "I" -PSProvider "FileSystem" -Root "\\Jphsa-ebhost2\AnasaziFiles\" -scope Global
    New-PSDrive -Name "M" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Data\MIS\" -scope Global
    New-PSDrive -Name "N" -PSProvider "FileSystem" -Root "\\Jphsa-ebfile01\e$\" -scope Global
    New-PSDrive -Name "P" -PSProvider "FileSystem" -Root "\\Jphsa.org\shared\Users\ggarson\PROJECTS"-scope Global


} 
 
#' *** Alias ***
#'if(!(Test-Path alias:ah))
#' {
#'  New-Alias -Name ah -Value add-headertoscript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:abh))
#' {
#'  New-Alias -Name abh -Value Add-SBSBookHeaderToScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ahlp))
#' {
#'  New-Alias -Name ahlp -Value add-help -Description "MrEd alias" |
#'  Out-Null
#'  }
#'  if(!(Test-Path alias:ras))
#' {
#'  New-Alias -Name ras -Value Remove-AliasFromScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:gfsd))
#' {
#'  New-Alias -Name gfsd -Value gig-getFileSystemDrives -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:cs))
#' {
#'  New-Alias -Name cs -value Copy-ScriptToNewTab -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ar))
#' {
#'  New-Alias -Name ar -value Add-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:rr))
#' {
#'  New-Alias -Name rr -value Remove-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:em))
#' {
#'  New-Alias -Name em -value Edit-Module -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:iem))
#' {
#'  New-Alias -Name iem -value Import-EveryModule -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:sov))
#' {
#'  New-Alias -Name sov -value gig-toggleOutlineView -Description "MrEd alias" |
#'  Out-Null
#'  }



#' *** Variables ***
if(!(Test-Path variable:moduleHome))
{
 new-variable -name moduleHome -value "$env:userProfile\documents\WindowsPowerShell\Modules"
}
#'if(!(Test-Path variable:backupHome))
#'{
#' new-variable -name backupHome -value "$env:userProfile\documents\WindowsPowerShell\profileBackup"
#'}

if(!(Test-Path variable:TranscriptHome))
{
 new-variable -name TranscriptHome -value "C:\DATA\junkPowerShellTranscripts"
 #' new-variable -name TranscriptHome -value "$env:userProfile\documents\WindowsPowerShell\transcript"
}

if(!(Test-Path variable:myScripts))
{
 new-variable -name myScripts -value "C:\DATA\PowerShellScripts"
}

Set-Location $myScripts

Clear-Host

gig-LoadNetworkPSDrives

Export-ModuleMember -alias * -function * -variable *

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Registry</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_Registry</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Registry</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_Registry</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_Registry

"Registry Keys" are like folders

"registry key property" are the non-folders, inside the existing folders

"registry key property values" is the value of the "registry key property"

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Registry</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>example_setting_Folder_Options</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Registry</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>example_setting_Folder_Options</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
https://stackoverflow.com/questions/4491999/configure-windows-explorer-folder-options-through-powershell
Choose "Show hidden files, folders, and drives"
Uncheck "Hide extensions for known file types"
Uncheck "Hide protected operating system files (Recommended)"

#' For Windows 7, and reports that it works with Windows 10 Home Edition

&gt;$key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'
Set-ItemProperty $key Hidden 1
Set-ItemProperty $key HideFileExt 0
Set-ItemProperty $key ShowSuperHidden 1
Stop-Process -processname explorer				'&lt;===== need to end with this step



'This will disable the grouping of similar open applications on the taskbar. 
'This one also requires the explorer process to be restarted in order for it to be applied.
&gt;$key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'
Set-ItemProperty $key TaskbarGlomLevel 2 
Stop-Process -processname explorer				'&lt;===== need to end with this step


-----------------------------------------------------------------------------------------
'For a user:
'I believe these correspond to registry entries under reg key 
	HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
'You can use the Set-ItemProperty cmdlet to change their value e.g.:

$key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'
Set-ItemProperty $key ShowSuperHidden 1
Stop-Process -processname explorer				'&lt;===== need to end with this step

'There also seems to be a corresponding key for local machine (as opposed to the per user setting above): 
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Registry</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>GET_the_value_of_a_RegistryKeyPropery</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Registry</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>GET_the_value_of_a_RegistryKeyPropery</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
========================================================================================
#' Suppose you have a registry key:  "HKLM:\Software\Microsoft\WindowsStore"
#' Where the last folder in the path is "WindowsStore"
#' and then in that registry key, you have a property called "JUNK"
#' and the string value of "JUNK" is 'zzz'
--------------------------------------------------------------------------------
&gt; Get-ItemProperty -Path HKLM:\Software\Microsoft\WindowsStore -Name JUNK
'OUTPUT:
'-------
JUNK         : zzz
PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsStore
PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\Software\Microsoft
PSChildName  : WindowsStore
PSDrive      : HKLM
PSProvider   : Microsoft.PowerShell.Core\Registry

--------------------------------------------------------------------------------
&gt; (Get-ItemProperty -Path HKLM:\Software\Microsoft\WindowsStore -Name JUNK).JUNK
'OUTPUT:
'-------
zzz

========================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Registry</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>if_you_need_users_SID</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Registry</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>if_you_need_users_SID</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'If you need user's SID and browse remote HKEY_USERS folder, you can follow this script :

'&lt;# Replace following domain.name with yours and userAccountName with remote username #&gt;
$userLogin = New-Object System.Security.Principal.NTAccount(“domain.name“,”userAccountName“)
$userSID = $userLogin.Translate([System.Security.Principal.SecurityIdentifier])

'&lt;# We will open HKEY_USERS and with accurate user’s SID from remoteComputer #&gt;
$remoteRegistry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey(‘Users’,”remoteComputer“)

'&lt;# We will then retrieve LocalName value from Control Panel / International subkeys #&gt;

$key = $userSID.value+”\Control Panel\International”
$openKey = $remoteRegistry.OpenSubKey($key)

'&lt;# We can now retrieve any values #&gt;

$localName = $openKey.GetValue(‘LocaleName’)
Source : http://techsultan.com/how-to-browse-remote-registry-in-powershell/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Remoting</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>WinRS</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Remoting</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>WinRS</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'Remote Shell, (WinRS) is used to execute a program on a remote host. 
#'Similar in operation to the former Sysinternals tool PSExec, 
#'WinRS leverages Windows Remote Management to let you launch processes on remote machines. 
#'For example, if you want to perform a directory listing on the system drive on a remote machine, 
#'you can remotely launch ‘dir’ using this syntax:

&gt;winrs -r:machinename dir


#'Another handy use of WinRS can be when installing software on remote systems. 
#'If you want to quietly install an application using an MSI file onto a remote machine, 
#'use the following syntax. 
#'This syntax assumes the MSI file has already been deposited into the C:\ folder.



winrs -r:machinename msiexec.exe /i c:\install.msi /quiet

#'When specifying the remote machine, the following are valid:
#'· Localhost
#'· NetBIOS name
#'· Fully Qualified Domain Name (FQDN)
#'· IP address
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_RestorePoint</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_RestorePoint</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_RestorePoint</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_RestorePoint</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_RestorePoint

'As far as I know a restorepoint is a copy of the registry at a specific date and time. 
'Restoring it will set things back to those settings.


'The other critical point to know when using Checkpoint-Computer cmdlet 
'	is that you can only create a restore point with this cmdlet once every 24 hours. 

'The first thing you might need to do is enable system restore:

&gt; Enable-ComputerRestore -drive "c:\"

'To view existing restore points, use the Get-ComputerRestorePoint cmdlet:

&gt; Get-ComputerRestorePoint | Out-GridView

create one using the Checkpoint-Computer cmdlet:

&gt; Checkpoint-Computer -description "My first checkpoint" -restorepointtype "Modify_Settings"

&gt;Get-ComputerRestorePoint | format-list

'To restore:
&gt; Restore-Computer -RestorePoint 59  '( do the restore, which will automatically reboot the computer:)


APPLICATION_INSTALL  (The default restore point type is APPLICATION_INSTALL)
An application has been installed.

APPLICATION_UNINSTALL
An application has been uninstalled.

DEVICE_DRIVER_INSTALL
A device driver has been installed.

MODIFY_SETTINGS
An application has had features added or removed.

CANCELLED_OPERATION
An application needs to delete the restore point it created. For example, an application would use this flag when a user cancels an installation.



What exactly does System Restore restore and not restore?
==========================================================
Restored:

Registry (note: some current values will persist)
Profiles (local only—roaming user profiles not impacted by restore)
COM+ DB
WFP.dll cache
WMI DB
IIS Metabase
Files with extensions listed in the Monitored File Extensions list
Not Restored:

DRM settings
SAM hives (does not restore passwords)
WPA settings (Windows authentication information is not restored)
Contents of the My Documents folder(s)
Specific directories/files listed in the Monitored File Extensions list
Any file with an extension not listed in the Monitored File Extensions list
Items listed in both Filesnottobackup and KeysnottoRestore (HKLM-&gt;System-&gt;ControlSet001-&gt;Control-&gt;BackupRestore-&gt;Filesnottobackup and keysnottorestore)
User-created data stored in the user profile
Contents of redirected folders</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Security</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Certifcates_on_Remote_Computer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Security</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Certifcates_on_Remote_Computer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

'Maybe:
Invoke-Command -ComputerName Whatever -ScriptBlock {
    Get-ChildItem Cert:\ -Recurse |
    Where-Object { $_.Issuer -eq 'CN=DigiCert SHA2 Assured ID Code Signing CA, OU=www.digicert.com, O=DigiCert Inc, C=US' }
}


http://ilovepowershell.com/2015/03/20/looking-at-installed-certificates-with-powershell/

'To view the certificates in the local users personal certificate store I would use the following:

#Change to the location of the personal certificates
Set-Location Cert:\CurrentUser\My
 
#Change to the location of the local machine certificates
Set-Location Cert:\LocalMachine\My
 
#Get the installed certificates in that location
Get-ChildItem | Format-Table Subject, FriendlyName, Thumbprint -AutoSize
 
#Get the installed certificates from a remote machine
$Srv = "SERVER-HOSTNAME"
$Certs = Invoke-Command -Computername $Srv -Scriptblock {Get-ChildItem "Cert:\LocalMachine\My"}


------------------------------------------------


'Installed for Current user:

$certs = Get-ChildItem cert:\CurrentUser\My  -Recurse | Where-Object {-not $_.PSIsContainer} | Select *
Write-Host ("There were {0} certificates" -f ($certs | Measure-Object).Count) 
$certs | Out-File c:\certs.txt


'Installed on Local Machine:

$certs = Get-ChildItem cert:\LocalMachine\My  -Recurse | Where-Object {-not $_.PSIsContainer} | Select *
Write-Host ("There were {0} certificates" -f ($certs | Measure-Object).Count) 
$certs | Out-File c:\certs.txt

------------------------------
'List All Certificates on a Remote Computer
Get-PKICertificates -comp dc1 -StoreLocation LocalMachine -StoreName My

------------------------------

$certs = Get-ChildItem cert:\LocalMachine -Recurse |
  ? {-not $_.PSIsContainer} |
  select @{n="Name"; e={$_.GetName()}},
          @{n="Folder"; e={$_.PSParentPath.Replace("Microsoft.PowerShell.Security\Certificate::","")}},
          @{n="Expire"; e={$_.GetExpirationDateString()}} 
Write-Host ("There were {0} certificates" -f ($certs | Measure-Object).Count) 
$certs | Out-File c:\certs.txt

--------------------------------------------
'I have the following script which brings back any certificates on the local machine 
'needed for our VPN client and shows the expiry date:

$asset = $env:COMPUTERNAME

Set-Location cert:\LocalMachine\My

Write-Host = "Asset ID:"$asset

Get-ChildItem -Recurse cert: | select subject, notafter

write-host "`n"

Read-Host "Press any key to exit..."

(Get-Host).SetShouldExit(0)

-------------------------------------------------
'to invoke local command remotely
Invoke-Command -computername $asset -scriptblock {Get-ChildItem -Recurse cert: | select subject, notafter}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Security</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Get-FileHash_to_check_a_Files_Hash</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Security</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Get-FileHash_to_check_a_Files_Hash</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
&gt;CD {to the folder that has the file in question}
&gt; Get-FileHash
[space] [tab] to scroll through files in the path

compare the SHA256 output with the value from the download website in order to confirm the file's validity

or use online calculator:
https://md5file.com/calculator
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>01_Check_Execution_Policy_and_PROFILE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>01_Check_Execution_Policy_and_PROFILE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Check Version
&gt; $PSVersionTable

===============================v 5.0
https://www.microsoft.com/en-us/download/details.aspx?id=50395
===============================
'# Check policy
Get-ExecutionPolicy

'01_Check_Execution_Policy_and_PROFILE

'Set the Execution policy (https://ss64.com/ps/set-executionpolicy.html)
&gt; Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
&gt; Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine
{or -Scope LocalMachine}

'First thing to do is to test whether a profile  exists:
&gt; Test-Path $profile		'False if it does  not exist




&gt; $PROFILE | Format-List -Force   
'OR
&gt; $profile | select *

'OUTPUT (example)
'===============
'AllUsersAllHosts       : C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1
'AllUsersCurrentHost    : C:\Windows\System32\WindowsPowerShell\v1.0\Microsoft.PowerShellISE_profile.ps1
'CurrentUserAllHosts    : C:\Users\ggarson\Documents\WindowsPowerShell\profile.ps1
'CurrentUserCurrentHost : C:\Users\ggarson\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1
'Length                 : 80

AllUsersAllHosts       : C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1
AllUsersCurrentHost    : C:\Windows\System32\WindowsPowerShell\v1.0\Microsoft.PowerShellISE_profile.ps1
CurrentUserAllHosts    : \\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell\profile.ps1
CurrentUserCurrentHost : \\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1

'NOTE: For Windows 7 use the "My Documents" folder rather than the "Documents" folder 

'If one did not exist then create it Create the folder (if not there) and an empty file
'e.g. Then saved blank text file named "C:\Users\ggarson\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1"


'Now you can edit the file
&gt; notepad $profile
'OR
&gt;ISE $profile</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>02_CreateFoldersForLog_and_Modules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>02_CreateFoldersForLog_and_Modules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'So to create it, first create the folders: 
'NOTE: For Windows 7 use the "My Documents" folder rather than the "Documents" folder 
-------------------------------------------
C:\Users\ggarson\Documents\WindowsPowerShell   '{already created in previous step}
C:\Users\ggarson\Documents\WindowsPowerShell\log
C:\Users\ggarson\Documents\WindowsPowerShell\Modules

\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell
\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell\log
\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\WindowsPowerShell\Modules

#'	DECIDED NOT TO USE THIS ONE:				C:\Users\ggarson\Documents\WindowsPowerShell\transcript
C:\DATA\junkPowerShellTranscripts
C:\DATA\PowerShellScripts
C:\JUNK						'&lt;===== This is for the transcript files

'For each of the Modules included by the Profile, you need to create a folder:
C:\Users\ggarson\Documents\WindowsPowerShell\Modules\PowerShellISEModule



'Then create the empty text file:
C:\Users\ggarson\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1  '{already created in previous step}
C:\Users\ggarson\Documents\WindowsPowerShell\Modules\PowerShellISEModule\PowerShellISEModule.psm1

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>03_Populate_the_PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>03_Populate_the_PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'1] Then populate the C:\Users\ggarson\Documents\WindowsPowerShell\PowerShellISE_profile.ps1 file by copy/paste the script into that file
'	from snippet:  04_Microsoft.PowerShellISE_profile.ps1

'2] Then populate the C:\Users\ggarson\Documents\WindowsPowerShell\Modules\PowerShellISEModule\PowerShellISEModule.psm1 file by copy/paste the script into that file
'	from snippet:  05_PowerShellISEModule.psm1

'Once the profile is run,you can go to the modules folder by doing this:
&gt;Set-Location myMods:

'You can go to the scripts folder by doing this:
&gt; Set-Location $myScripts</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>05_PowerShellISEModule.psm1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Setup_My_Profile_on_New_Machine</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>05_PowerShellISEModule.psm1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>$PSLogPath = ("{0}{1}\Documents\WindowsPowerShell\log\{2:yyyyMMdd}-{3}.log" -f $env:HOMEDRIVE, $env:HOMEPATH,  (Get-Date), $PID)
Add-Content -Value "# $(Get-Date) $env:username $env:computername" -Path $PSLogPath
Add-Content -Value "# $(Get-Location)" -Path $PSLogPath

#'-------------------------------------------------------Drives for Powershell
New-PSDrive –Name “W” –PSProvider FileSystem –Root "\\win10vm\ALL_Share" –Persist
New-PSDrive –Name “J” –PSProvider FileSystem –Root "\\jphsa.org\shared\Users\ggarson" –Persist
#'-------------------------------------------------------

function prompt
{
    $LastCmd = Get-History -Count 1
    if($LastCmd)
    {
        $lastId = $LastCmd.Id
       
        Add-Content -Value "# $($LastCmd.StartExecutionTime)" -Path $PSLogPath
        Add-Content -Value "$($LastCmd.CommandLine)" -Path $PSLogPath
        Add-Content -Value "" -Path $PSLogPath
    }

    $nextCommand = $lastId + 1
    $currentDirectory = Split-Path (Get-Location) -Leaf
    $host.UI.RawUI.WindowTitle = Get-Location
    "$nextCommand PS:$currentDirectory&gt;"
} 

Function gig-commentIt
{
 &lt;#
   .Synopsis
    This function will add a remark #' character to beginning of line
   .Description
    This function will add a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to comment out
    a section of PowerShell code. 
   .Example
    Add-RemarkedText
    adds the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ("#'" + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-commentIt

Function gig-unCommentIt
{
 &lt;#
   .Synopsis
    This function will remove a remark #' character to beginning of line
   .Description
    This function will remove a remark character #' to selected text in the ISE.
    These are comment characters, and is great when you want to clean up a 
    previously commentted out section of PowerShell code. 
   .Example
    gig-unCommentIt
    Removes the comment / remark character to beginning of each selected line 
   .Notes
    NAME:  Add-RemarkedText
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-5-18-13
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($l -replace "#'",''),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'End function gig-unCommentIt


Function gig-editProfile
{

 psedit $profile

 #'ISE $profile

} #'end function gig-editProfile

Function gig-addHelp
{
  &lt;#
   .Synopsis
    This function adds help at current insertion point 
   .Example
    add-help
    adds comment based help at current insertion point 
   .Notes
    NAME:  Add-Help
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/24/2016
    HSG: WES-09-11-10
    KEYWORDS: Scripting Techniques, Windows PowerShell ISE
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 $helpText = @"
 &lt;#
   .Synopsis
    This does that 
   .Description
    This function does
   .Example
    Example-
    Example- accomplishes 
   .Parameter 
    The parameter
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS:
    HSG: 
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
"@
 $psise.CurrentFile.Editor.InsertText($helpText)
} #'end function gig-addHelp

Function gig-addHeaderToScript
{
  &lt;#
   .Synopsis
    This function adds header information to a script 
   .Example
    Add-HeaderToScript
    Adds header comments to script 
   .Example 
    AH
    Uses alias to add header comments to script
   .Notes
    NAME:  Add-HeaderToScript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: $(Get-Date)
    KEYWORDS: $keyword
    HSG: $hsg
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($keyword, $comment, $hsg)
 $header = @"
#' -----------------------------------------------------------------------------
#' Script: $(split-path -Path $psISE.CurrentFile.FullPath -Leaf)
#' Author: glenn garson, JPHSA
#' Date: $(Get-Date)
#' Keywords: $keyword
#' comments: $comment
#'
#' -----------------------------------------------------------------------------
"@
 $psise.CurrentFile.Editor.InsertText($header)
} #'end function gig-addHeaderToScript

Function gig-getLogNameFromDate
{
  &lt;#
   .Synopsis
    Creates a log name from date
   .Description
    This script creates a log from a date. 
   .Example
    gig-getLogNameFromDate -path "c:\jumk" -name "log"
    Creates a file name like c:\JUNK\log20100914-122019.Txt but does not
    create the file. It returns the file name to calling code.
   .Example
    gig-getLogNameFromDate -path "c:\JUNK" -name "log" -Create
    Creates a file name like c:\JUNK\log20100914-122019.Txt and
    create the file. It returns the file name to calling code.
   .Parameter path
    path to log file
   .Parameter name
    base name of log file
   .Parameter create
    switch that determines whether log file or only name is created
   .inputs
    [string]
   .outputs
    [string]
   .Notes
    NAME:  gig-getLogNameFromDate
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 16:58:06
    KEYWORDS: parameter substitution, format specifier, string substitution
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param(
  [string]$path = "c:\JUNKC:\DATA\junkPowerShellTranscripts",
  [string]$name = "log",
  [switch]$Create
 )
 $logname = "{0}\{1}{2}.{3}" -f $path,$name, `
    (Get-Date -Format yyyyMMdd-HHmmss),"Txt"
 if($create) 
  { 
   New-Item -Path $logname -ItemType file -force | out-null
   $logname
  }
 else {$logname}
} #' end function gig-getLogNameFromDate

Function gig-start_ISE_Transcript
{
  &lt;#
   .Synopsis
    This captures output from a script to a created text file
    To use the gig-start_ISE_Transcript function, add the call to the function at the bottom of your script.
   .Example

    xxxxx...{your script}
    gig-start_ISE_Transcript -logname "c:\junk\log.txt"

    Copies output from script to file named xxxxlog.txt in c:\junk folder
   .Parameter logname
    the name and path of the log file.
   .inputs
    [string]
   .outputs
    [io.file]
   .Notes
    NAME:  gig-start_ISE_Transcript
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 09/10/2010 17:27:22
    KEYWORDS:
    HSG: WES-09-25-10
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
  Param(
   [string]$logname = (gig-getLogNameFromDate -path $transcriptHome -name "log" -Create)
  )
  $transcriptHeader = @"
**************************************
Windows PowerShell ISE Transcript Start
Start Time: $(get-date)
UserName: $env:username
UserDomain: $env:USERDNSDOMAIN
ComputerName: $env:COMPUTERNAME
Windows version: $((Get-WmiObject win32_operatingsystem).version)
**************************************
Transcript started. Output file is $logname
"@
 $transcriptHeader &gt;&gt; $logname
 $psISE.CurrentPowerShellTab.ConsolePane.Text &gt;&gt; $logname
 “Log saved to $logname”
} #'end function gig-start_ISE_Transcript

function gig-indentText_x_spaces
{
  &lt;#
   .Synopsis
    This function will indent text in the ISE a specific number
   .Description
    This function will indent selected text in the PowerShell ISE. These are
    real spaces, not tabs. Therefore this is appropriate for situations where
    an actual tab "`t" will not work. 
   .Example
    gig-indentText_x_spaces -space 5
    moves selected text five spaces 
   .Parameter spaces
    The number of spaces to indent the selected text. Note this number cannot
    be a negative number, and this function does not "unindent" the selected text.
   .Notes
    NAME:  gig-indentText_x_spaces
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 06/11/2012 17:16:29
    KEYWORDS: Windows PowerShell ISE, Scripting Techniques
    HSG: wes-6-17-12
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param([int]$space = 1)
 $tab = " " * $space
 $text = $psISE.CurrentFile.editor.selectedText
 foreach ($l in $text -split [environment]::newline)
  {
   $newText += "{0}{1}" -f ($tab + $l),[environment]::newline 
  }
   $psISE.CurrentFile.Editor.InsertText($newText)
} #'end function gig-indentText_x_spaces

Function gig-editModule
{
  &lt;#
   .Synopsis
    This opens a module stored in the $env:PSModulePath location on a new tab in ISE 
   .Description
    This function uses Get-Module to retrieve a module from $env:PSModulePath and then
    it opens the module from that location into a new tab in ISE for editing. Wildcard
    characters that resolve to a single module are supported.
   .Example
    gig-editModule PowerShellISEModule
    gig-editModule PowerShellISEModule opens the PowerShellISEModule into a new tab in the
    ISE for editing 
  .Example
    gig-editModule PowerShellISE*
    gig-editModule PowerShellISE* opens the PowerShellISEModule into a new tab in the
    ISE for editing by using a wild card character for the module name
   .Parameter Name
    The name of the module. Wild cards that resolve to a single module are supported
   .Notes
    NAME:  gig-editModule
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 18:14:19
    KEYWORDS: Scripting Techniques, Modules
    HSG: WES-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 2.0
 #&gt;
 Param($name)
 ISE (Get-Module -ListAvailable $name).path
} #'end function gig-editModule

Function gig-toggleOutlineView
{
  &lt;#
   .Synopsis
    This function toggles the outline view in the ISE 
   .Description
    This function toggles the outline view in the ISE. It will expand 
    or collapse all functions in the current script pane.
   .Example
    gig-toggleOutlineView
    gig-toggleOutlineView will either expand or collapse all functions 
   .Notes
    NAME:  gig-toggleOutlineView
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 05/16/2013 19:28:37
    KEYWORDS: Scripting Techniques, Modules
    HSG: wes-5-18-2013
   .Link
     Http://www.ScriptingGuys.com
 #'Requires -Version 3.0
 #&gt;
 $psise.CurrentFile.Editor.ToggleOutliningExpansion()
} #'end function gig-toggleOutlineView


#'added Functions from New-ModulesDrive.ps1
#' HSG-1-20-10
Function gig-newModuleDrives
{
&lt;#
    .SYNOPSIS
    Creates two PSDrives: myMods and sysMods
    .EXAMPLE
    gig-newModuleDrives
    Creates two PSDrives: myMods and sysMods. These correspond 
    to the users' modules folder and the system modules folder respectively. 
#&gt;
 $driveNames = "myMods","sysMods"

 For($i = 0 ; $i -le 1 ; $i++)
 {
  New-PsDrive -name $driveNames[$i] -PSProvider filesystem `
  -Root ($env:PSModulePath.split(";")[$i]) -scope Global |
  Out-Null
 } #'end For
} #'end gig-newModuleDrives

Function gig-getFileSystemDrives
{
&lt;#
    .SYNOPSIS
    Displays global PS Drives that use the Filesystem provider
    .EXAMPLE
    gig-getFileSystemDrives
    Displays global PS Drives that use the Filesystem provider
#&gt;
 Get-PSDrive -PSProvider FileSystem -scope Global
} #'end gig-getFileSystemDrives

Function gig-OpenPath
{
 &lt;#
   .Synopsis
    Opens a path in Explorer 
   .Description
    Opens a path in Explorer, default path is C:\, or the first parameter is the path
   .Example
    gig-OpenPath C:\Junk
    gig-OpenPath $moduleHome 
   .Parameter Path
    The path to open in Explorer
   .Notes
    NAME:  Example-
    AUTHOR: glenn garson, JPHSA
    LASTEDIT: 12/26/2016 17:31:28
    KEYWORDS:
    HSG: 
   .Link
     
 #'Requires -Version 2.0
 #&gt;
  Param(
  [string]$path = "C:\"
 )
 Invoke-Item -Path $path
 }


 function gig-LoadNetworkPSDrives
{
#'    net use G: "\\Jphsa.org\shared\Data" 
#'    net use H: "\\Jphsa.org\shared\Users\ggarson\" 
#'    net use I: "\\Jphsa-ebhost2\AnasaziFiles\" 
#'    net use M: "\\Jphsa.org\shared\Data\MIS\" 
#'    net use N: "\\Jphsa-ebfile01\e$\" 
#'    net use P: "\\Jphsa.org\shared\Users\ggarson\PROJECTS"


    New-PSDrive -Name "D" -PSProvider "FileSystem" -Root "\\CBTBRFS02\Credit\Credit Risk\Month-End Reports V2\SQL Queries\" -scope Global
    New-PSDrive -Name "M" -PSProvider "FileSystem" -Root "\\CBTBRFS02\Accounting\Managerial Accounting\" -scope Global
    New-PSDrive -Name "N" -PSProvider "FileSystem" -Root "\\CBTBRFS02\Credit\Credit Risk\" -scope Global
    New-PSDrive -Name "P" -PSProvider "FileSystem" -Root "\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\Data\Projects\" -scope Global
    New-PSDrive -Name "N" -PSProvider "FileSystem" -Root "\\cbt.corp.com\cbt-dfs\Accounting\Managerial Accounting\CRD Reports\" -scope Global
    New-PSDrive -Name "P" -PSProvider "FileSystem" -Root "\\cbt.corp.com\cbt-dfs\MyDoc\gigarson\Documents\"-scope Global


} 
 
#' *** Alias ***
#'if(!(Test-Path alias:ah))
#' {
#'  New-Alias -Name ah -Value add-headertoscript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:abh))
#' {
#'  New-Alias -Name abh -Value Add-SBSBookHeaderToScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ahlp))
#' {
#'  New-Alias -Name ahlp -Value add-help -Description "MrEd alias" |
#'  Out-Null
#'  }
#'  if(!(Test-Path alias:ras))
#' {
#'  New-Alias -Name ras -Value Remove-AliasFromScript -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:gfsd))
#' {
#'  New-Alias -Name gfsd -Value gig-getFileSystemDrives -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:cs))
#' {
#'  New-Alias -Name cs -value Copy-ScriptToNewTab -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:ar))
#' {
#'  New-Alias -Name ar -value Add-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:rr))
#' {
#'  New-Alias -Name rr -value Remove-RemarkedText -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:em))
#' {
#'  New-Alias -Name em -value Edit-Module -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:iem))
#' {
#'  New-Alias -Name iem -value Import-EveryModule -Description "MrEd alias" |
#'  Out-Null
#'  }
#'if(!(Test-Path alias:sov))
#' {
#'  New-Alias -Name sov -value gig-toggleOutlineView -Description "MrEd alias" |
#'  Out-Null
#'  }



#' *** Variables ***
if(!(Test-Path variable:moduleHome))
{
 new-variable -name moduleHome -value "$env:userProfile\documents\WindowsPowerShell\Modules"
}
#'if(!(Test-Path variable:backupHome))
#'{
#' new-variable -name backupHome -value "$env:userProfile\documents\WindowsPowerShell\profileBackup"
#'}

if(!(Test-Path variable:TranscriptHome))
{
 new-variable -name TranscriptHome -value "C:\DATA\junkPowerShellTranscripts"
 #' new-variable -name TranscriptHome -value "$env:userProfile\documents\WindowsPowerShell\transcript"
}

if(!(Test-Path variable:myScripts))
{
 new-variable -name myScripts -value "C:\DATA\PowerShellScripts"
}

Set-Location $myScripts

Clear-Host

gig-LoadNetworkPSDrives

Export-ModuleMember -alias * -function * -variable *

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SSRS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Change_DataSource_of_muliple_SSRS_Reports</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SSRS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Change_DataSource_of_muliple_SSRS_Reports</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'https://ask.sqlservercentral.com/questions/86369/change-datasource-of-ssrs-report-with-powershell.html
#'I'm trying to ahange data sources of multiple SSRS Report with Powershell to one shared data source on my reporting server.


cls;
 
  #Set variables:
  $reportserver = "myServer";
  $url = "http://$($reportserver)/reportserver/reportservice2005.asmx?WSDL";
  $newDataSourcePath = "/Data Sources/MyDS";
  $newDataSourceName = "MyDS";
  $reportFolderPath = "/DH";
  #------------------------------------------------------------------------
 
  $ssrs = New-WebServiceProxy -uri $url -UseDefaultCredential
 
  $reports = $ssrs.ListChildren($reportFolderPath, $false)
 
  $reports | ForEach-Object {
  $reportPath = $_.path
  Write-Host "Report: " $reportPath
  $dataSources = $ssrs.GetItemDataSources($reportPath)
  $dataSources | ForEach-Object {
  $proxyNamespace = $_.GetType().Namespace
  $myDataSource = New-Object ("$proxyNamespace.DataSource")
  $myDataSource.Name = $newDataSourceName
  $myDataSource.Item = New-Object ("$proxyNamespace.DataSourceReference")
  $myDataSource.Item.Reference = $newDataSourcePath
  
  $_.item = $myDataSource.Item
  
  $ssrs.SetItemDataSources($reportPath, $_)
  
  Write-Host "Report's DataSource Reference ($($_.Name)): $($_.Item.Reference)";
  }
 
  Write-Host "------------------------"
  }</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SSRS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Download All Your SSRS RDL files</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SSRS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Download All Your SSRS RDL files</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' FROM: http://www.sqlmusings.com/2011/03/28/how-to-download-all-your-ssrs-report-definitions-rdl-files-using-powershell/comment-page-1/#comment-8629
'Here’s a short PowerShell script that :
'1. Connects to your report server
'2. Creates the same folder structure you have in your Report Server
'3. Download all the SSRS Report Definition (RDL) files into their respective folders
'Had to use 2005, not 2010 on the SQL 2008 R2 server
'Had to run it on the server itself

#note this is tested on PowerShell v2 and SSRS 2008 R2
[void][System.Reflection.Assembly]::LoadWithPartialName("System.Xml.XmlDocument");
[void][System.Reflection.Assembly]::LoadWithPartialName("System.IO");
 
$ReportServerUri = "http://bcc-explorerdb/reportserver/reportservice2005.asmx";
$Proxy = New-WebServiceProxy -Uri $ReportServerUri -Namespace SSRS.ReportingService2005 -UseDefaultCredential ;
 
#check out all members of $Proxy
#$Proxy | Get-Member
#http://msdn.microsoft.com/en-us/library/aa225878(v=SQL.80).aspx
 
#second parameter means recursive
$items = $Proxy.ListChildren("/", $true) | `
         select Type, Path, ID, Name | `
         Where-Object {$_.type -eq "Report"};
 
#create a new folder where we will save the files
#PowerShell datetime format codes http://technet.microsoft.com/en-us/library/ee692801.aspx
 
#create a timestamped folder, format similar to 2011-Mar-28-0850PM
$folderName = Get-Date -format "yyyy-MMM-dd-hhmmtt";
$fullFolderName = "C:\JUNK\" + $folderName;
[System.IO.Directory]::CreateDirectory($fullFolderName) | out-null
 
foreach($item in $items)
{
    #need to figure out if it has a folder name
    $subfolderName = split-path $item.Path;
    $reportName = split-path $item.Path -Leaf;
    $fullSubfolderName = $fullFolderName + $subfolderName;
    if(-not(Test-Path $fullSubfolderName))
    {
        #note this will create the full folder hierarchy
        [System.IO.Directory]::CreateDirectory($fullSubfolderName) | out-null
    }
 
    $rdlFile = New-Object System.Xml.XmlDocument;
    [byte[]] $reportDefinition = $null;
    $reportDefinition = $Proxy.GetReportDefinition($item.Path);
 
    #note here we're forcing the actual definition to be 
    #stored as a byte array
    #if you take out the @() from the MemoryStream constructor, you'll 
    #get an error
    [System.IO.MemoryStream] $memStream = New-Object System.IO.MemoryStream(@(,$reportDefinition));
    $rdlFile.Load($memStream);
 
    $fullReportFileName = $fullSubfolderName + "\" + $item.Name +  ".rdl";
    #Write-Host $fullReportFileName;
    $rdlFile.Save( $fullReportFileName);
 
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SSRS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>DownLoading_multiple_reports</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SSRS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>DownLoading_multiple_reports</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

$reportServerUri = "http://localhost/reportserver/ReportService2010.asmx?wsdl"
$rs = New-WebServiceProxy -Uri $reportServerUri -UseDefaultCredential
                          -Namespace "SSRS"
                          

#' Download all Reports from a specific folder to .rdl files in the current 
#' directory.

$sourceFolderPath = "/Reports/MyDeparment"

$items = $rs.ListChildren($sourceFolderPath, $false)

$items | Where-Object { $_.TypeName -eq "Report" } | Foreach-Object {

    									$filename = ("{0}.rdl" -f $_.Name)
   									Write-Output ("Downloading ""{0}""..." -f $_.Path)
   									$bytes = $rs.GetItemDefinition($_.Path)
   									[System.IO.File]::WriteAllBytes("$pwd\$filename", $bytes)
   								     }
                          </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SSRS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Querying for (linked) reports</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SSRS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Querying for (linked) reports</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
$reportServerUri = "http://localhost/reportserver/ReportService2010.asmx?wsdl"
$rs = New-WebServiceProxy -Uri $reportServerUri -UseDefaultCredential
                          -Namespace "SSRS"
                          

#' List everything(!) on the Report Server, recursively

$catalogItems = $rs.ListChildren("/", $true)
$catalogItems

#' List all Linked Reports, together with the path of the Report it refers to.

$linkedReports = $rs.ListChildren("/", $true) | Where-Object { $_.TypeName -eq "LinkedReport" }

$results = $linkedReports | Foreach-Object {
    						$linkPath = $rs.GetItemLink($_.Path)
    						$result = new-object PSObject -Property @{ LinkName = $_.Name; LinkPath = $_.Path; ReportPath = $linkPath }
    						$result
					}
$results

#' List all Linked Reports that refer to reports in a specific folder:
$results | Where-Object { $_.ReportPath -like "/Reports/MyDeparment/*" }                 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_SSRS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>SECURITY_for_Reports_set_security_by_folder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_SSRS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>SECURITY_for_Reports_set_security_by_folder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>&lt;#
.SYNOPSIS
    Set user permissions in SQL Reporting Services using Web Service
 
.DESCRIPTION
    Set user permissions in SQL Reporting Services using Web Service
 
.EXAMPLE
    Add-SSRSItemSecurity -webServiceUrl "http://[ServerName]/ReportServer/ReportService2005.asmx?WSDL" -itemPath "MyReportFolder" -groupUserName RPAULO\User1 -role Browser
 
.EXAMPLE
    Add-SSRSItemSecurity -url "http://[ServerName]/ReportServer/ReportService2005.asmx?WSDL" -itemPath "MyReportFolder" -u RPAULO\User1 -r "Content Manager"
 
#&gt;
function Add-SSRSItemSecurity
(
    [Parameter(Position=0,Mandatory=$true)]
    [Alias("url")]
    [string]$webServiceUrl,
 
    [Parameter(Position=1,Mandatory=$true)]
    [Alias("path")]
    [string]$itemPath,
     
    [Parameter(Position=2,Mandatory=$true)]
    [Alias("u")]
    [string]$groupUserName,
     
    [Parameter(Position=3,Mandatory=$true)]
    [Alias("r")]
    [string]$role,
     
    [Parameter(Position=4)]
    [bool]$inherit=$true
)
 
{
     
    #Fix item path if not starting with /
    if(!$itemPath.StartsWith("/")) { $itemPath = "/" + $itemPath}
     
    #Create Proxy
    Write-Host "[Add-SSRSItemSecurity()] Creating Proxy, connecting to : $webServiceUrl"
    $ssrsProxy = New-WebServiceProxy -Uri $webServiceUrl -UseDefaultCredential
     
    $type = $ssrsProxy.GetType().Namespace;
    $policyType = "{0}.Policy" -f $type;
    $roleType = "{0}.Role" -f $type;
     
    Write-Host "[Add-SSRSItemSecurity()] Retrieving all existing policies."
    $policies = $ssrsProxy.GetPolicies($itemPath, [ref]$inherit);
     
    $a = 1;
    foreach($policy in $policies)
    {
 
        foreach($r in $policy.Roles)
        {
            $msg = "[Add-SSRSItemSecurity()]  Existing Policy # {0} Group Name: {1}, Role: {2}" -f $a, $policy.GroupUserName, $r.Name
            Write-Host $msg
        }
        $a+=1;
    }
 
    $msg = "[Add-SSRSItemSecurity()] Total Existing Policies: " + $policies.Length;
    Write-Host $msg
     
    $Policy = $policies | 
    Where-Object { $_.GroupUserName -eq $groupUserName } | 
    Select-Object -First 1
     
    if (-not $Policy) {
        $Policy = New-Object ($policyType)
        $Policy.GroupUserName = $GroupUserName
        $Policy.Roles = @()
        $Policies += $Policy
        $msg = "[Add-SSRSItemSecurity()] Adding new policy: '{0}'" -f $GroupUserName
        Write-Host $msg
    }
 
    $r = $Policy.Roles |
        Where-Object { $_.Name -eq $role } |
        Select-Object -First 1
    if (-not $r) {
        $r = New-Object ($roleType)
        $r.Name = $role
        $Policy.Roles += $r
        $msg = "[Add-SSRSItemSecurity()] Adding new role: '{0}'" -f $role
        Write-Host $msg
    }
     
    #Set the policies
    $ssrsProxy.SetPolicies($itemPath,$policies);
 
}

#' To set the HOME folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName BCC\g_SSRS_CanSeeAllReports -role Browser

Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName BCC\g_SSRS_Developers -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName BCC\g_SSRS_Developers -role 'Content Manager'
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName BCC\g_SSRS_Developers -role 'My Reports'
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName BCC\g_SSRS_Developers -role Publisher
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName BCC\g_SSRS_Developers -role 'Report Builder'
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/" -groupUserName 'NT AUTHORITY\Authenticated Users' -role Browser


#' To set the 'Eclipse_Admin' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Eclipse_Admin" -groupUserName BCC\g_ECLIPSE_Admin -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users',  for the 'Eclipse_Admin' folder


#' To set the 'Eclipse_Admin' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial" -groupUserName 'BCC\g_eclipse_ACCT_AP' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial" -groupUserName 'BCC\g_eclipse_ACCT_CA' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial" -groupUserName 'BCC\g_eclipse_ACCT_CTL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial" -groupUserName 'BCC\g_eclipse_ACCT_LEAD' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial" -groupUserName 'BCC\g_eclipse_OP_PM' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial" -groupUserName 'BCC\g_SSRS_BusinessGroupAdmins' -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder


#' To set the 'Financial_Trucks' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial_Trucks" -groupUserName 'BCC\g_eclipse_OP_PM' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial_Trucks" -groupUserName 'BCC\g_SSRS_BusinessGroupAdmins' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Financial_Trucks" -groupUserName 'BCC\g_SSRS_Trucking_Reports' -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder


#' To set the 'HR' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR" -groupUserName 'BCC\g_eclipse_ACCT_PAYRL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR" -groupUserName 'BCC\g_eclipse_HR' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR" -groupUserName 'BCC\g_eclipse_HR_ADMIN' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR" -groupUserName 'BCC\g_eclipse_HR_PAY' -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder


#' To set the 'HR_ACCT' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_ACCT_PAYRL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_HR' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_HR_ADMIN' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_HR_PAY' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_ACCT_AP' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_ACCT_CA' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_ACCT_CTL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/HR_ACCT" -groupUserName 'BCC\g_eclipse_ACCT_LEAD' -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder


#' To set the 'IT' folder Policies
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder



#' To set the 'Job Cost' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_eclipse_ACCT_PAYRL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_eclipse_ACCT_AP' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_eclipse_ACCT_CA' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_eclipse_ACCT_CTL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_eclipse_ACCT_LEAD' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_eclipse_OP_PM' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Job Cost" -groupUserName 'BCC\g_SSRS_BusinessGroupAdmins' -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder


#' To set the 'Payroll Reports' folder Policies
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_ACCT_PAYRL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_HR' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_HR_ADMIN' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_HR_PAY' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_ACCT_AP' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_ACCT_CA' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_ACCT_CTL' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_eclipse_ACCT_LEAD' -role Browser
Add-SSRSItemSecurity -webServiceUrl "http://localhost/ReportServer/ReportService2005.asmx?WSDL" -itemPath "/Payroll Reports" -groupUserName 'BCC\g_SSRS_BusinessGroupAdmins' -role Browser
#' MANUALLY: remove the Browse permission, for 'NT AUTHORITY\Authenticated Users', for this folder


#' To set the 'Payroll Reports/Payroll_Reports_HR_ACCT' folder Policies
#' MANUALLY: remove the Browse permission, for 'BCC\g_SSRS_BusinessGroupAdmins', for this folder
#' Then create the LINKED Reports in the folder above it:
#'               401K Census
#'               Certified Payroll
#'               Child Support
#'               Employee Union Status
#'               Employees that Received Advancements
#'               Hourly Employee Verification
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_ToolKit</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>03_about_File_and_Folder_Managment_Automator</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_ToolKit</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>03_about_File_and_Folder_Managment_Automator</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#' Tool Overview

Finding files and folders
setting ACLs
Robust Archiving solution</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_on_Client</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Reset-WindowsUpdate.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_on_Client</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Reset-WindowsUpdate.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#'Reset-WindowsUpdate.ps1
'https://gallery.technet.microsoft.com/scriptcenter/Reset-WindowsUpdateps1-e0c5eb78

'This script will completely reset the Windows Update client settings. 
'It has been tested on Windows 7, 8, 10, and Server 2012 R2. 
'It will configure the services and registry keys related to Windows Update for default settings. 
'It will also clean up files related to Windows Upda


&lt;#
.SYNOPSIS
Reset-WindowsUpdate.ps1 - Resets the Windows Update components

.DESCRIPTION 
This script will reset all of the Windows Updates components to DEFAULT SETTINGS.

.OUTPUTS
Results are printed to the console. Future releases will support outputting to a log file. 

.NOTES
Written by: Ryan Nemeth

Find me on:

* My Blog:	http://www.geekyryan.com
* Twitter:	https://twitter.com/geeky_ryan
* LinkedIn:	https://www.linkedin.com/in/ryan-nemeth-b0b1504b/
* Github:	https://github.com/rnemeth90
* TechNet:  https://social.technet.microsoft.com/profile/ryan%20nemeth/

Change Log
V1.00, 05/21/2015 - Initial version
V1.10, 09/22/2016 - Fixed bug with call to sc.exe
V1.20, 11/13/2017 - Fixed environment variables
#&gt;


$arch = Get-WMIObject -Class Win32_Processor -ComputerName LocalHost | Select-Object AddressWidth

Write-Host "1. Stopping Windows Update Services..."
Stop-Service -Name BITS
Stop-Service -Name wuauserv
Stop-Service -Name appidsvc
Stop-Service -Name cryptsvc

Write-Host "2. Remove QMGR Data file..."
Remove-Item "$env:allusersprofile\Application Data\Microsoft\Network\Downloader\qmgr*.dat" -ErrorAction SilentlyContinue

Write-Host "3. Renaming the Software Distribution and CatRoot Folder..."
Rename-Item $env:systemroot\SoftwareDistribution SoftwareDistribution.bak -ErrorAction SilentlyContinue
Rename-Item $env:systemroot\System32\Catroot2 catroot2.bak -ErrorAction SilentlyContinue

Write-Host "4. Removing old Windows Update log..."
Remove-Item $env:systemroot\WindowsUpdate.log -ErrorAction SilentlyContinue

Write-Host "5. Resetting the Windows Update Services to defualt settings..."
"sc.exe sdset bits D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)"
"sc.exe sdset wuauserv D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)"

Set-Location $env:systemroot\system32

Write-Host "6. Registering some DLLs..."
regsvr32.exe /s atl.dll
regsvr32.exe /s urlmon.dll
regsvr32.exe /s mshtml.dll
regsvr32.exe /s shdocvw.dll
regsvr32.exe /s browseui.dll
regsvr32.exe /s jscript.dll
regsvr32.exe /s vbscript.dll
regsvr32.exe /s scrrun.dll
regsvr32.exe /s msxml.dll
regsvr32.exe /s msxml3.dll
regsvr32.exe /s msxml6.dll
regsvr32.exe /s actxprxy.dll
regsvr32.exe /s softpub.dll
regsvr32.exe /s wintrust.dll
regsvr32.exe /s dssenh.dll
regsvr32.exe /s rsaenh.dll
regsvr32.exe /s gpkcsp.dll
regsvr32.exe /s sccbase.dll
regsvr32.exe /s slbcsp.dll
regsvr32.exe /s cryptdlg.dll
regsvr32.exe /s oleaut32.dll
regsvr32.exe /s ole32.dll
regsvr32.exe /s shell32.dll
regsvr32.exe /s initpki.dll
regsvr32.exe /s wuapi.dll
regsvr32.exe /s wuaueng.dll
regsvr32.exe /s wuaueng1.dll
regsvr32.exe /s wucltui.dll
regsvr32.exe /s wups.dll
regsvr32.exe /s wups2.dll
regsvr32.exe /s wuweb.dll
regsvr32.exe /s qmgr.dll
regsvr32.exe /s qmgrprxy.dll
regsvr32.exe /s wucltux.dll
regsvr32.exe /s muweb.dll
regsvr32.exe /s wuwebv.dll

Write-Host "7) Removing WSUS client settings..."
REG DELETE "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate" /v AccountDomainSid /f
REG DELETE "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate" /v PingID /f
REG DELETE "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate" /v SusClientId /f

Write-Host "8) Resetting the WinSock..."
netsh winsock reset
netsh winhttp reset proxy

Write-Host "9) Delete all BITS jobs..."
Get-BitsTransfer | Remove-BitsTransfer

Write-Host "10) Attempting to install the Windows Update Agent..."
if($arch -eq 64){
    wusa Windows8-RT-KB2937636-x64 /quiet
}
else{
    wusa Windows8-RT-KB2937636-x86 /quiet
}

Write-Host "11) Starting Windows Update Services..."
Start-Service -Name BITS
Start-Service -Name wuauserv
Start-Service -Name appidsvc
Start-Service -Name cryptsvc

Write-Host "12) Forcing discovery..."
wuauclt /resetauthorization /detectnow

Write-Host "Process complete. Please reboot your computer."</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>AvailableUpdatesOnServer_GUIDs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>AvailableUpdatesOnServer_GUIDs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'AvailableUpdatesOnServer_GUIDs


https://angrytechnician.wordpress.com/2011/04/28/how-to-get-a-list-of-every-wsus-update-using-powershell/
#'Recently I needed to get a list of every update on my WSUS server, 
#'    due to a bug in System Center Essentials which leaves orphaned 
#'    folders on the server even when locally-published updates have been removed using the console 
#'    (the Server Cleanup tool doesn’t get rid of these files either – see this post on TechNet.
#'
#'The folders in question were all in the WSUS\UpdateServicesPackages directory, 
#'    and are named according to the GUID of the update in WSUS. 
#'The WSUS console doesn’t provide any way to get a list of GUIDs that are valid updates, 
#'    but you can do it using the WSUS .NET API, which is accessible via PowerShell.
#'


#'Update: If you’re only interested in which folders to delete, 
#'	without any additional information, 
#'	you can run wsusutil listunreferencedpackagefolders from the 
#'	%Program Files%\Update Services\Tools directory. 
#'This command is mysteriously missing from any online documentation from MS.



#'Here’s a sample script to get the GUIDs. 
#'You’ll need to customise line 2 to reflect the FQDN of your WSUS server, 
#'    along with whether to use SSL and the port number. 
#'You’ll either need to run the script using an account with admin rights to WSUS, 
#'    either on the WSUS server itself, or on a workstation with the WSUS console installed.
#'

[void][reflection.assembly]::LoadWithPartialName("Microsoft.UpdateServices.Administration")
$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer('updates.angrytech.internal',$False,80)
#Get all updates
$updates = $wsus.GetUpdates()
#Iterate every update and output some basic info about it
ForEach ($update in $updates) {
New-Object PSObject -Property @{
Id = $update.Id.UpdateId.ToString()
Title = $update.Title
Source = $update.UpdateSource.ToString()
}
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Updates_WSUS</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Run-DeclineUpdate-CleanupV3.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Updates_WSUS</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Run-DeclineUpdate-CleanupV3.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Decline Updates Script by Jeff Carreon
'https://www.mnscug.org/images/carryon/Run-DeclineUpdate-Cleanup.zip

'By default the script run in “What-If” mode ($TrialRun set to $True). 
'Here is a syntax to run it in declining mode, without sending an email report:  
.\Run-DeclineUpdate-CleanupV3.ps1 -Servers CM01 –TrialRun:$false –EmailReport:$false

=================================================================================================
#'Run-DeclineUpdate-CleanupV3.ps1

&lt;#
.SYNOPSIS
	Script is for declining superseeded, Itanium Updates, XP, Preview, Beta, ARM64, IE7, IE8, IE9, IE10, Win10 Next, Server Next, and Embedded Updates in WSUS/SUP environment.
	
	Recommend running this monthly...  
	Run the scripts targetting the bottom or downstreams servers (bottom SUPs), then run it against the upstream server (Top SUP)...
	BE AWARE:  
		The XP function may grab Windows 2008 R2 articles.   
		I HIGHLY recommend do a -TrialRun first, and examine the results before executing this in prod environment.  By default, this is set to true, see param section.
	

.DESCRIPTION
	Script is designed to decline all of the updates that have been superseded for over 90 days, by default.  This can be adjusted in param section.
	
	# $Servers					= Specify the target servers as default target(s) for automation.  Or, can be specified manually at run time.
	# $UseSSL                   = Specify whether WSUS Server is configured to use SSL
	# $Port                     = Specify WSUS Server Port (Hard coded in param section, though this can be specified otherwise)
	# $TrialRun		            = Specify this to do a test run and get a summary of how many superseded updates, Itanium Updates, XP, Preview, Beta, Win10 Next, Server Next, ARM64, IE7, IE8, IE9, IE10, and Embedded Updates there are that can be declined.  It records to .csv and htm file
	# $DeclineLastLevelOnly     = Specify whether to decline all superseded updates or only last level superseded updates
									**For example, Update1 supersedes Update2. Update2 supersedes Update3. In this scenario, the Last Level in the supersedence chain is Update3. 
									**To decline only the last level updates in the supersedence chain, specify the DeclineLastLevelOnly switch
	# $ExclusionPeriod          = Specify the number of days between today and the release date for which the superseded updates must not be declined. Eg, if you want to keep superseded updates published within the last 2 months, specify a value of 60 (days)
	# $SkipItanium				= Specify this to skip declining Itanium updates.
	# $SkipXP					= Specify this to skip declining Windows XP updates.  
	# $SkipPrev					= Specify this to skip declining Windows Preview updates.  
	# $SkipBeta					= Specify this to skip declining Windows Beta updates.
	# $SkipWin10Next			= Specify this to skip declining Windows 10 Next updates.
	# $SkipServerNext			= Specify this to skip declining Windows Server Next updates.
	# $SkipArm64				= Specify this to skip declining ARM64-based updates.
	# $SkipIE7					= Specify this to skip declining Windows IE7 updates.
	# $SkipIE8					= Specify this to skip declining Windows IE8 updates. Default is $true
	# $SkipIE9					= Specify this to skip declining Windows IE9 updates. Default is $true
	# $SkipIE10					= Specify this to skip declining Windows IE10 updates. Default is $true
	# $SkipEmbedded				= Specify this to skip declining Windows Embedded updates.
	
	# $CleanUpdatelist			= Specify whether to clean the UpdateList folders/files to prevent build up. Default is $true
	# $CleanULNumber			= Specify the number of days old folders/files to keep in UpdateList folder

.NOTE
	$DeclineLastLevelOnly &amp; $trial CANNOT be used at the same time.
	Script will create custom application "CMSDKPosh" Eventlog for storing events below
		EventID 21020 = Successful Run
		EventID 21021 = Error running the main function
		EventID 21031 = Error running either the Decline superseded or itanium function
	
	Updates 4/25/2018: 
		- Added Decline updates for Win10 Next, and Server Next
        - Added email reporting and logging
		- Perfomance improvement on querying updates
	
	Updates 5/10/2018: 
		- Added Decline updates for ARM64-Based, and IE 10
        - Added Clean Update List maintnance function (optional), deletes files/folders that are # of days old.
		- Fixed error handling on querying for updates.
		- Perfomance improvement
	
	Jeff Carreon's Hack job :)
	Updated: 5/10/2018
	v.4
#&gt;

[CmdletBinding()]
Param(
	
    # Define lower tier SUP servers first, then TOP WSUS/SUP server last in this array
    $Servers = @("&lt;lowerSUPServer1&gt;","&lt;lowerSUPServer2&gt;","&lt;topSUPServer&gt;"),	

	[bool]$UseSSL = $False,
	
	[int]$PortNumber = 8530,
	
    [switch] $TrialRun = $true,
	
    [switch] $DeclineLastLevelOnly,
	
    [Parameter(Mandatory=$False)]
    [int] $ExclusionPeriod = 90,

    [switch] $SkipItanium,
	
	[switch] $SkipXP,
	
	[switch] $SkipPrev,
	
	[switch] $SkipBeta,

	[switch] $SkipWin10Next,
	
	[switch] $SkipServerNext,
	
	[switch] $SkipIE7,
	
	[switch] $SkipIE8 = $true,
	
	[switch] $SkipIE9 = $true,
	
	[switch] $SkipIE10 = $true,
	
	[switch] $SkipEmbedded,

    [switch] $SkipArm64,

	[bool]$EmailReport = $true,
	
	[string]$SMTPServer = "smtp.domain.com",
	
	[string]$From = "CMautomation@domain.com",
	
	[string[]]$To = "support@domain.com,yourmanager@domain.com",
	
	[string]$Subject = "WSUS/SUP Decline Updates Report",

    [string]$ReportTitle = "WSUS/SUP Decline Updates Maintenance Task"
	
	# UpdateList Folder maintenance
	[switch] $CleanUpdatelist = $true,
	
	# Define # of days old before it Cleans Update list files and folders
	[int]$CleanULNumber = 90

)



$EventSource = "WSUS Decline Maintenance"
$Eventlog = "CMSDKPosh"
$td = (get-date -uformat %m-%d-%y)
$path = Get-Location
$scriptName = $MyInvocation.MyCommand.Name
$ul = "UpdatesList"
$ulpath = "$path\" + "$ul\" + "$td"
$Overallhtmfile = "$ulpath\" + "_OverallCountsSummary-$td.htm"

#$script:CurrentErrorActionPreference = $ErrorActionPreference
#$ErrorActionPreference = "SilentlyContinue"
$CStyle = "&lt;Style&gt;BODY{font-size:12px;font-family:verdana,sans-serif;color:navy;font-weight:normal;}" + `
			"TABLE{border-width:1px;cellpadding=10;border-style:solid;border-color:navy;border-collapse:collapse;}" + `
			"TH{font-size:12px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}" + `
			"TD{font-size:10px;border-width:1px;padding:10px;border-style:solid;border-color:navy;}&lt;/Style&gt;"



[String]$LogFile = "$path\" + $($((Split-Path $MyInvocation.MyCommand.Definition -leaf)).replace("ps1","log")) #Name and Location of LogFile


if ([System.Diagnostics.EventLog]::SourceExists('WSUS Decline Maintenance') -ne "True")
{
    New-EventLog -LogName $Eventlog -Source $EventSource
}

 Write-EventLog -LogName $Eventlog -EventID 21020 -Message "Run-DeclineCleanup Script has started." -Source $EventSource -EntryType Information

If($TrialRun){$Subject += " Trial Run"}
Function SendEmailStatus($From, $To, $Subject, $SMTPServer, $BodyAsHtml, $Body)
{	
    $SMTPMessage = New-Object System.Net.Mail.MailMessage $From, $To, $Subject, $Body
	$SMTPMessage.IsBodyHTML = $BodyAsHtml
	$SMTPClient = New-Object Net.Mail.SMTPClient($SMTPServer)
    $SMTPClient.Send($SMTPMessage)
	If($? -eq $False){Write-Warning "$($Error[0].Exception.Message) | $($Error[0].Exception.GetBaseException().Message)"}
	$SMTPMessage.Dispose()
	rv SMTPClient
	rv SMTPMessage
}

Function Write-toFile{
    &lt;#
    .SYNOPSIS
        Writing information to file
    .DESCRIPTION
        Function to write information to file
    #&gt;    
    Param ([string]$WriteLine)
    Out-File $XMLFile -encoding utf8 -input $WriteLine -append   
    Write-Host $WriteLine
}

Function Write-ToLog([string]$message, [string]$file) {
    &lt;#
    .SYNOPSIS
        Writing log to the logfile
    .DESCRIPTION
        Function to write logging to a logfile. This should be done in the End phase of the script.
    #&gt;
    If(-not($file)){$file=$LogFile}        
    $Date = $(get-date -uformat %Y-%m-%d-%H.%M.%S)
    $message = "$Date | `t$message"
    Write-Verbose $message
    Write-Host $message
    #Write Log to log file Without ASCII not able to read with tracer.
    Out-File $file -encoding ASCII -input $message -append
}

Function GetSuperSededList {

	$Script:countAllUpdates = 0
	$Script:countSupersededAll = 0
	$Script:countSupersededLastLevel = 0
	$Script:countSupersededExclusionPeriod = 0
	$Script:countSupersededLastLevelExclusionPeriod = 0
	$Script:countDeclined = 0
	
    $Prop = [ordered]@{}
    $ErrorActionPreference = "Stop"
    foreach($update in $allUpdates)
    {
    
        $Script:countAllUpdates++
    
        if ($update.IsDeclined) {
            $Script:countDeclined++
        }
    
        if (!$update.IsDeclined -and $update.IsSuperseded) {
            $Script:countSupersededAll++
        
            if (!$update.HasSupersededUpdates) {
                $Script:countSupersededLastLevel++
            }
			###################
            if ($update.CreationDate -lt (get-date).AddDays(-$ExclusionPeriod))  {
				#"$($update.Id.UpdateId.Guid), $($update.Id.RevisionNumber), $($update.Title), $($update.KnowledgeBaseArticles), $($update.SecurityBulletins), $($update.HasSupersededUpdates)" | Out-File $outSupersededExList -Append 
                "$($update.Title), $($update.KnowledgeBaseArticles), $($update.ArrivalDate), $($update.SecurityBulletins), $($update.UpdateClassificationTitle), $($update.ProductTitles), $($update.HasSupersededUpdates)" | Out-File $outSupersededExList -Append
		        $Script:countSupersededExclusionPeriod++
			    if (!$update.HasSupersededUpdates) {
				    $Script:countSupersededLastLevelExclusionPeriod++
			    }
            }		
        
            "$($update.Id.UpdateId.Guid), $($update.Id.RevisionNumber), $($update.Title), $($update.KnowledgeBaseArticles), $($update.ArrivalDate), $($update.SecurityBulletins), $($update.HasSupersededUpdates)" | Out-File $outSupersededList -Append       
        
            $Prop.Title = [string]$update.Title
            $Prop."KB Article" = [string]$update.KnowledgeBaseArticles
            $Prop."Arrival Date" = [string]$update.ArrivalDate
            $Prop.Classification = [string]$update.UpdateClassificationTitle
            $Prop."Product Title" = [string]$update.ProductTitles
            $Prop."Has Superseded Updates" = [string]$update.HasSupersededUpdates
               
            New-Object PSObject -property $Prop
        }
     }
     
}

Function Decline-Superseded{
	#Write-ToLog ""
    
    Write-ToLog ""
    Write-ToLog "$WsusServer is starting Decline-SupersededUpdates function..."

	"UpdateID, RevisionNumber, Title, KBArticle, ArrivalDate, SecurityBulletin, LastLevel" | Out-File $outSupersededList
    "Title, KBArticle, ArrivalDate, SecurityBulletin, UpdateClassificationTitle, ProductTitles, HasSupersededUpdates" | Out-File $outSupersededExList


##########################

    GetSuperSededList | ConvertTo-HTML -head $CStyle | Out-File $outSupersededHTM
    

	Write-ToLog "Done."
	if ($csv){Write-ToLog "List of superseded updates: $outSupersededList"}
	Write-ToLog "List of Superseded Updates: $outSupersededHTM"

	Write-ToLog ""
	Write-ToLog "Superseded Summary:"
	Write-ToLog "========"
	Write-ToLog "All Updates = $countAllUpdates"
	Write-ToLog "Any except Declined = ($countAllUpdates - $countDeclined)"
	Write-ToLog "All Superseded Updates = $countSupersededAll"
	Write-ToLog "    Superseded Updates (Intermediate) = ($countSupersededAll - $countSupersededLastLevel)"
	Write-ToLog "    Superseded Updates (Last Level) = $countSupersededLastLevel"
	Write-ToLog "    Superseded Updates (Older than $ExclusionPeriod days) = $countSupersededExclusionPeriod"
	Write-ToLog "    Superseded Updates (Last Level Older than $ExclusionPeriod days) = $countSupersededLastLevelExclusionPeriod"
	Write-ToLog ""

	$i = 0
	if (!$TrialRun) {
	    
	    Write-ToLog "TrialRun flag is set to $TrialRun. Continuing with declining updates"
	    $updatesDeclined = 0
	    
	    if ($DeclineLastLevelOnly) {
	        Write-ToLog "  DeclineLastLevel is set to True. Only declining last level superseded updates." 
	        
	        foreach ($update in $allUpdates) {
	            
	            if (!$update.IsDeclined -and $update.IsSuperseded -and !$update.HasSupersededUpdates) {
	              if ($update.CreationDate -lt (get-date).AddDays(-$ExclusionPeriod))  {
				    $i++
					$percentComplete = "{0:N2}" -f (($updatesDeclined/$countSupersededLastLevelExclusionPeriod) * 100)
					Write-Progress -Activity "Declining Updates" -Status "Declining update #$i/$countSupersededLastLevelExclusionPeriod - $($update.Id.UpdateId.Guid)" -PercentComplete $percentComplete -CurrentOperation "$($percentComplete)% complete"
					
	                try 
	                {
	                    $update.Decline()                    
	                    $updatesDeclined++
	                }
	                catch [System.Exception]
	                {
	                    Write-ToLog "$WsusServer failed to decline update $($update.Id.UpdateId.Guid). Error:" $_.Exception.Message
	                    Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer failed to decline update $($update.Id.UpdateId.Guid). Error: $error[0]" -Source $EventSource -EntryType Error
	                } 
	              }             
	            }
	        }        
	    }
	    else {
	        Write-ToLog "  DeclineLastLevel is set to False. Declining all superseded updates."
	        
	        foreach ($update in $allUpdates) {
	            
	            if (!$update.IsDeclined -and $update.IsSuperseded) {
	              if ($update.CreationDate -lt (get-date).AddDays(-$ExclusionPeriod))  {   
				  	
					$i++
					$percentComplete = "{0:N2}" -f (($updatesDeclined/$countSupersededAll) * 100)
					Write-Progress -Activity "Declining Updates" -Status "Declining update #$i/$countSupersededAll - $($update.Id.UpdateId.Guid)" -PercentComplete $percentComplete -CurrentOperation "$($percentComplete)% complete"
	                try 
	                {
	                    $update.Decline()
	                    $updatesDeclined++
	                }
	                catch [System.Exception]
	                {
	                    Write-Host "$WsusServer failed to decline update $($update.Id.UpdateId.Guid). Error:" $_.Exception.Message
	                    Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer failed to decline update $($update.Id.UpdateId.Guid). Error: $error[0]" -Source $EventSource -EntryType Error
	                }
	              }              
	            }
	        }   
	        
	    }
	    
	    Write-ToLog "  Declined $updatesDeclined updates."
	    #if ($updatesDeclined -ne 0) {
	    #    Copy-Item -Path $outSupersededList -Destination $outSupersededListBackup -Force
		#	Write-ToLog "  Backed up list of superseded updates to $outSupersededListBackup"
	    #}
	    
	}
	else {
	    Write-ToLog "TrialRun flag is set to $TrialRun. Skipped declining updates"
	
    if(Test-Path $outSupersededExList){ Import-csv $outSupersededExList | ConvertTo-HTML -head $table | Out-File $outSupersededExHTM}

    }
    
}

Function Decline-Itanium{


	Write-ToLog "$WsusServer is starting Decline-WsusItaniumUpdates function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."

    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Itanium updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}


    Write-ToLog "Searching for Itanium updates..."
	#$ItaniumUpdates = $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match “ia64|itanium”}
	
	$ItaniumUpdates = $GrabUpdates | where-object {$_.Title -match "ia64|itanium"}
	$script:Itancount = $ItaniumUpdates.count
	
	If($ItaniumUpdates)
	{
		Write-ToLog "Found $script:Itancount Itanium Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Itanium Updates...";$ItaniumUpdates | %{$_.Decline()}}Else{Write-ToLog "Recording Itanium Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$ItaniumUpdates | Select $Table
            $ItaniumUpdates | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $IThtmfile
            If(!$TrialRun){Write-ToLog "List of Itanium updates declined: $IThtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Itanium updates that could be declined: $IThtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Itanium Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Itanium Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Itanium Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-XPUpdates{



	Write-ToLog "$WsusServer is starting Decline-XPUpdates function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."



    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Windows XP updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for Windows XP updates..."
	#$XPUpdates = $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Windows XP"}
	$XPUpdates = $GrabUpdates | where-object {$_.Title -match "Windows XP"}
	$Script:XPcount = $XPUpdates.count	
	
	If($XPUpdates)
	{
		Write-ToLog "Found $Script:XPcount Windows XP Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Windows XP Updates...";$XPUpdates | %{$_.Decline()}}Else{Write-ToLog "Recording Windows XP Updates..."}
            $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$XPUpdates | Select $Table
            $XPUpdates | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $XPhtmfile
            If(!$TrialRun){Write-ToLog "List of Windows XP updates declined: $XPhtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Windows XP updates that could be declined: $XPhtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Windows XP Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Windows XP Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Windows XP Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-Preview{

	Write-ToLog "$WsusServer is starting Decline-Preview function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Preview updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for Preview updates..."
	#$Prev = $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Preview"}
	$Prev = $GrabUpdates | where-object {$_.Title -match "Preview"}
	$Script:Prevcount = $Prev.count	
	
	If($Prev)
	{
		Write-ToLog "Found $Script:Prevcount Preview Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Preview Updates...";$Prev | %{$_.Decline()}}Else{Write-ToLog "Recording Preview Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$Prev | Select $Table
            $Prev | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $Prevhtmfile
            If(!$TrialRun){Write-ToLog "List of Preview updates declined: $Prevhtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Preview updates that could be declined: $Prevhtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Preview Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Preview Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Preview Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-Beta{
	

	Write-ToLog "$WsusServer is starting Decline-Beta function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Beta updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for Beta updates..."
	#$Beta= $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Beta"}
	$Beta = $GrabUpdates | where-object {$_.Title -match "Beta"}
	$Script:Betacount = $Beta.count	
	
	If($Beta)
	{
		Write-ToLog "Found $Script:Betacount Beta Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Beta Updates...";$Beta | %{$_.Decline()}}Else{Write-ToLog "Recording Beta Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$Beta | Select $Table
            $Beta | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $Betahtmfile
            If(!$TrialRun){Write-ToLog "List of Beta updates declined: $Betahtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Beta updates that could be declined: $Betahtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Beta Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Beta Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Beta Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-Win10Next{
	
	Write-ToLog "$WsusServer is starting Decline-Win10Next function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Windows 10 Next updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for Windows 10 Next updates..."
	#$Win10Next = $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Windows 10 Version Next"}
	$Win10Next = $GrabUpdates | where-object {$_.Title -match "Windows 10 Version Next"}
	$Script:Win10Nextcount = $Win10Next.count	
	
	If($Win10Next)
	{
		Write-ToLog "Found $Script:Win10Nextcount Windows 10 Next Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Windows 10 Next Updates...";$Win10Next | %{$_.Decline()}}Else{Write-ToLog "Recording Windows 10 Next Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$Win10Next | Select $Table
            $Win10Next | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $Win10Nexthtmfile
            If(!$TrialRun){Write-ToLog "List of Windows 10 Next updates declined: $Win10Nexthtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Windows 10 Next updates that could be declined: $Win10Nexthtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Windows 10 Next Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Windows 10 Next Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Windows 10 Next Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-ServerNext{
	$Script:ServerNextcount = 0
	Write-ToLog "$WsusServer is starting Decline-ServerNext function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Windows Server Next updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for Windows Server Next updates..."
	#$ServerNext = $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Windows Server Next"}
	$ServerNext = $GrabUpdates | where-object {$_.Title -match "Windows Server Next"}
	$Script:ServerNextcount = $ServerNext.count	
	
	If($ServerNext)
	{
		Write-ToLog "Found $Script:ServerNextcount Windows Server Next Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Windows Server Next Updates...";$ServerNext | %{$_.Decline()}}Else{Write-ToLog "Recording Windows Server Next Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$Next | Select $Table
            $ServerNext | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $ServerNexthtmfile
            If(!$TrialRun){Write-ToLog "List of Windows Server Next updates declined: $ServerNexthtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Windows Server Next updates that could be declined: $ServerNexthtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Windows Server Next Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Windows Server Next Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Windows Server Next Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-IE7{
	
	
	
	Write-ToLog "$WsusServer is starting Decline-IE7 function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all IE7 updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for IE7 updates..."
	#$IE7= $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Internet Explorer 7"}
	$IE7 = $GrabUpdates | where-object {$_.Title -match "Internet Explorer 7"}
	$Script:IE7count = $IE7.count	
	
	If($IE7)
	{
		Write-ToLog "Found $Script:IE7count IE7 Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining IE7 Updates...";$IE7 | %{$_.Decline()}}Else{Write-ToLog "Recording IE7 Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$IE7 | Select $Table
            $IE7 | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $IE7htmfile
            If(!$TrialRun){Write-ToLog "List of IE7 updates declined: $IE7htmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of IE7 updates that could be declined: $IE7htmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline IE7 Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline IE7 Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No IE7 Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-IE8{

	Write-ToLog "$WsusServer is starting Decline-IE8 function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all IE8 updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for IE8 updates..."
	#$IE8= $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Internet Explorer 8"}
	$IE8 = $GrabUpdates | where-object {$_.Title -match "Internet Explorer 8"}
	$Script:IE8count = $IE8.count	
	
	If($IE8)
	{
		Write-ToLog "Found $Script:IE8count IE8 Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining IE8 Updates...";$IE8 | %{$_.Decline()}}Else{Write-ToLog "Recording IE8 Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$IE8 | Select $Table
            $IE8 | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $IE8htmfile
            If(!$TrialRun){Write-ToLog "List of IE8 updates declined: $IE8htmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of IE8 updates that could be declined: $IE8htmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline IE8 Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline IE8 Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No IE8 Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-IE9{

	Write-ToLog "$WsusServer is starting Decline-IE9 function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all IE9 updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for IE9 updates..."
	#$IE9= $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Internet Explorer 9"}
	$IE9 = $GrabUpdates | where-object {$_.Title -match "Internet Explorer 9"}
	$Script:IE9count = $IE9.count	
	
	If($IE9)
	{
		Write-ToLog "Found $Script:IE9count IE9 Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining IE9 Updates...";$IE9 | %{$_.Decline()}}Else{Write-ToLog "Recording IE9 Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$IE9 | Select $Table
            $IE9 | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $IE9htmfile
            If(!$TrialRun){Write-ToLog "List of IE9 updates declined: $IE9htmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of IE9 updates that could be declined: $IE9htmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline IE9 Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline IE9 Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No IE9 Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-Embedded{

	Write-ToLog "$WsusServer is starting Decline-Embedded function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all Embedded updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for Embedded updates..."
	#$Embedded= $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined -and $_.Title -match "Embedded"}
	$Embedded = $GrabUpdates | where-object {$_.Title -match "Embedded"}
	$Script:Embeddedcount = $Embedded.count	
	
	If($Embedded)
	{
		Write-ToLog "Found $Script:Embeddedcount Embedded Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining Embedded Updates...";$Embedded | %{$_.Decline()}}Else{Write-ToLog "Recording Embedded Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$Embedded | Select $Table
            $Embedded | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $Embhtmfile
            If(!$TrialRun){Write-ToLog "List of Embedded updates declined: $Embhtmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of Embedded updates that could be declined: $Embhtmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline Embedded Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline Embedded Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No Embedded Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-ARM64{

	Write-ToLog "$WsusServer is starting Decline-ARM64 function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all ARM64 updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for ARM64 updates..."
	$Arm64 = $GrabUpdates | where-object {$_.Title -match "ARM64"}
	$Script:Arm64count = $Arm64.count	
	
	If($Arm64)
	{
		Write-ToLog "Found $Script:Arm64count ARM64-Based Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining ARM64 Updates...";$ARM64 | %{$_.Decline()}}Else{Write-ToLog "Recording ARM64 Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$ARM64 | Select $Table
            $ARM64 | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $Arm64htmfile
            If(!$TrialRun){Write-ToLog "List of ARM64 updates declined: $Arm64htmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of ARM64 updates that could be declined: $Arm64htmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline ARM64 Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline ARM64 Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No ARM64 Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function Decline-IE10{

	Write-ToLog "$WsusServer is starting Decline-IE10 function..... Please wait...."
    #Write-ToLog "Connecting to $WSUSserver..."


    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all IE10 updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}

    Write-ToLog "Searching for IE10 updates..."
	$IE10 = $GrabUpdates | where-object {$_.Title -match "Internet Explorer 10"}
	$Script:IE10count = $IE10.count	
	
	If($IE10)
	{
		Write-ToLog "Found $Script:IE10count IE10 Updates..."
	    Try
	    {
	        If(!$TrialRun){Write-ToLog "Declining IE10 Updates...";$IE10 | %{$_.Decline()}}Else{Write-ToLog "Recording IE10 Updates..."}
		    $Table = @{Name="Title";Expression={[string]$_.Title}},`
			    @{Name="KB Article";Expression={[string]$_.KnowledgebaseArticles}},`
			    @{Name="Arrival Date";Expression={[string]$_.ArrivalDate}},`
                @{Name="Classification";Expression={[string]$_.UpdateClassificationTitle}},`
			    @{Name="Product Title";Expression={[string]$_.ProductTitles}},`
			    @{Name="Product Family";Expression={[string]$_.ProductFamilyTitles}}
		    #$IE10 | Select $Table
            $IE10 | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $IE10htmfile
            If(!$TrialRun){Write-ToLog "List of IE10 updates declined: $IE10htmfile"; Write-ToLog ""}
			Else{Write-ToLog "List of IE10 updates that could be declined: $IE10htmfile"; Write-ToLog ""}

	    }
	    Catch
	    {
	        Write-EventLog -LogName $Eventlog -EventID 21031 -Message "$WsusServer is unable to Decline IE10 Updates. Error: $error[0]" -Source $EventSource -EntryType Error
            Write-ToLog "$WsusServer is unable to Decline IE10 Updates. Error: $error[0]"
	    }
	}
	Else
	{
        Write-ToLog ""
        Write-ToLog "    No IE10 Updates found that needed declining at this time..."
        Write-ToLog ""
    }
	$ErrorActionPreference = $script:CurrentErrorActionPreference

}

Function UpdateListMaint{

	Write-ToLog "CleanUpdatelist is set to $CleanUpdatelist.  Cleaning the UpdateList folder."
	Write-ToLog "Deleting $CleanULNumber days old files and containers."
	Try{
		get-childitem -Path $ulpath -recurse | where-object {$_.lastwritetime -lt (get-date).addDays(-$CleanULNumber)} | Foreach-Object { remove-item $_.FullName -force -recurse}
		get-ChildItem $ulpath -recurse | Where-Object {$_.PSIsContainer -eq $True} | Where-Object {$_.GetFiles().Count -eq 0} | Foreach-Object { remove-item $_.FullName -recurse}
		Write-ToLog "Successfully removed files that are older than $CleanULNumber."
	}
	Catch
	{
		Write-ToLog "Failed to clean the UpdateList files/folder. Error: $Error[0]"
        Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Failed to clean the UpdateList files/folder. Error: $Error[0]" -Source $EventSource -EntryType Error
	    Write-ToLog "Please check the files manually."
		If($EmailReport)
			{	$Body = ConvertTo-Html -head $CStyle -Body "Failed to clean the UpdateList files/folder. Error: $Error[0].  Please check the files manually." | Out-String
				$Body = $Body.Replace("&lt;table&gt;`r`n&lt;/table&gt;", "")
				SendEmailStatus -From $From -To $To -Subject $Subject -SmtpServer $SmtpServer -BodyAsHtml $True -Body $Body
				Write-ToLog "Sending Mail..."
			}

	}

}

############## Main Script ###############

Write-ToLog "####### Starting the $scriptName Script #######"
Write-ToLog ""
Write-ToLog "..."
if ($TrialRun -and $DeclineLastLevelOnly) {
    Write-ToLog "Using TrialRun and DeclineLastLevelOnly switches together is not allowed."
	Write-ToLog ""
    Write-ToLog "Exiting..."
    Exit
}

If (!(Test-Path -path $ulpath)){ New-Item -ItemType Directory $ulpath -force | Out-null }


$jeffobjects = Foreach ($WsusServer in $servers)
{
	
    $error.clear()
    $StartScript = Get-Date

    $outSupersededList = "$ulpath\" + "AllSupersededUpdates-$WsusServer.csv"
    $outSupersededListBackup = "$ulpath\" + "SupersededUpdatesBackup-$WsusServer.csv"
	$outSupersededExList = "$ulpath\" + "SupersededUpdates-Over-$ExclusionPeriod-$WsusServer.csv"
    $outSupersededExHTM = "$ulpath\" + "SupersededUpdates-Over-$ExclusionPeriod-$WsusServer.htm"
    $outSupersededHTM = "$ulpath\" + "AllSupersededUpdates-$WsusServer.htm"
    $IThtmfile = "$ulpath\" + "Itanium-Updates-$WsusServer.htm"
    $XPhtmfile = "$ulpath\" + "XP-Updates-$WsusServer.htm"
	$Prevhtmfile = "$ulpath\" + "Preview-$WsusServer.htm"
	$Betahtmfile = "$ulpath\" + "Beta-$WsusServer.htm"
	$Win10Nexthtmfile = "$ulpath\" + "Win10Next-$WsusServer.htm"
	$ServerNexthtmfile = "$ulpath\" + "ServerNext-$WsusServer.htm"
	$IE7htmfile = "$ulpath\" + "IE7-$WsusServer.htm"
	$IE8htmfile = "$ulpath\" + "IE8-$WsusServer.htm"
	$IE9htmfile = "$ulpath\" + "IE9-$WsusServer.htm"
	$IE10htmfile = "$ulpath\" + "IE10-$WsusServer.htm"
	$Embhtmfile = "$ulpath\" + "Embedded-$WsusServer.htm"
    $Arm64htmfile = "$ulpath\" + "Arm64-$WsusServer.htm"
    
	Function SendMail
	{
			If($EmailReport)
				{	$Body = ConvertTo-Html -head $CStyle -Body "Error on $WsusServer. Error: $Error[0]" | Out-String
					SendEmailStatus -From $From -To $To -Subject $Subject -SmtpServer $SmtpServer -BodyAsHtml $True -Body $Body
					Write-ToLog "Sending Mail..."
				}
	}
	
    $Props = [ordered]@{}
	
	try {
	    
	    if ($UseSSL) {
	        Write-ToLog "Connecting to WSUS server $WsusServer on Port $PortNumber using SSL... "
	    } Else {
	        Write-ToLog "Connecting to WSUS server $WsusServer on Port $PortNumber... "
	    }
	    
	    [reflection.assembly]::LoadWithPartialName("Microsoft.UpdateServices.Administration") | out-null
	    $WsusServerAdminProxy = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer($WsusServer,$UseSSL,$PortNumber);
		

	}
	catch [System.Exception] 
	{
	    $err1 = $_.Exception.Message
		Write-ToLog "Failed to connect $WsusServer. Error: $err1"
        Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Error running the $scriptName Script on $WsusServer.  Error: $err1" -Source $EventSource -EntryType Error
	    Write-ToLog "Please check the logs."
		If($EmailReport)
			{	$Body = ConvertTo-Html -head $CStyle -Body "Failed to connect $WsusServer. Error: $err1.  Script exited." | Out-String
				$Body = $Body.Replace("&lt;table&gt;`r`n&lt;/table&gt;", "")
				SendEmailStatus -From $From -To $To -Subject $Subject -SmtpServer $SmtpServer -BodyAsHtml $True -Body $Body
				Write-ToLog "Sending Mail..."
			}
		Write-ToLog "Exiting..."
		Exit
	}
    
    if ($WsusServerAdminProxy) {Write-ToLog "Connected to $WsusServer."}
    if ($TrialRun) {Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Recording all superseded updates..."}Else{Write-ToLog "NOTE: TrialRun flag is set to $TrialRun. Continuing with declining updates..."}


    $Props."Servername" = ("$wsusserver")

    Write-ToLog "Collecting a list of updates from $WsusServer... Please wait..."

    Try{$allUpdates = $WsusServerAdminProxy.GetUpdates()}
	Catch [System.Exception]
	{
	    $err1 = $_.Exception.Message
		Write-ToLog "Failed to collect a list of updates from $WsusServer. Error: $Error[0]"
        Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Error running the $scriptName Script on $WsusServer.  Error: $Error[0]" -Source $EventSource -EntryType Error
	    Write-ToLog "Please check the logs."
		If($EmailReport)
			{	$Body = ConvertTo-Html -head $CStyle -Body "Failed to collect a list of updates from $WsusServer. Error: $Error[0].  Please check the server manually.  Script exited." | Out-String
				$Body = $Body.Replace("&lt;table&gt;`r`n&lt;/table&gt;", "")
				SendEmailStatus -From $From -To $To -Subject $Subject -SmtpServer $SmtpServer -BodyAsHtml $True -Body $Body
				Write-ToLog "Sending Mail..."
			}
		Write-ToLog "Exiting..."
		Exit
	}

	Write-ToLog "Done"

	Write-ToLog "Parsing the list of updates... " -NoNewLine

	Try{Decline-Superseded{};$Props."All Superseded" = ("$script:countSupersededAll");$Props."Superseded &gt; $ExclusionPeriod" = ("$script:countSupersededExclusionPeriod")}
	Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-SupersededUpdatesWithExclusionPeriod function on $WsusServer" -Source $EventSource -EntryType Error;	SendMail{}}
		
    Write-ToLog "Decline-SupersededUpdates function.....  Done."
	Write-ToLog ""
	
	Write-ToLog "Grabbing more updates info from $WsusServer..."
	#$GrabUpdates= $WsusServerAdminProxy.GetUpdates() | ?{-not $_.IsDeclined}
    $GrabUpdates = $allUpdates | where-object {-not $_.IsDeclined}
	
	If (!$SkipItanium)
	{
		Try	{Decline-Itanium{};$Props."Itanium" = ("$Script:Itancount")}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-WsusItaniumUpdates function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
    Else
        { 
            Write-ToLog "SkipItanium is set to $SkipItanium.  Skipping Decline-WSusItaniumUpdates Function."
            $its = "Skipped"
            $Props."Itanium" = ([string]$its)
        }

	If (!$SkipXP)
	{	
		Try{Decline-XPUpdates{};$Props."Windows XP" = ($Script:XPcount)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-XPUpdates function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{
		Write-ToLog "SkipXP is set to $SkipXP.  Skipping Decline-XPUpdates Function."
		$xps = "Skipped"
		$Props."Windows XP" = ([string]$xps)
	}

	If (!$SkipPrev)
	{	
		Try{Decline-Preview{};$Props."Previews" = ("$script:Prevcount")}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-Preview function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipPrev is set to $SkipPrev.  Skipping Decline-Preview Function."
		$pvs = "Skipped"
		$Props."Previews" = ([string]$pvs)
	}
	
	If (!$SkipBeta)
	{	
		Try{Decline-Beta{};$Props."Beta" = ("$Script:Betacount")}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-Beta function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipBeta is set to $SkipBeta.  Skipping Decline-Beta Function."
		$bts = "Skipped"
		$Props."Beta" = ([string]$bts)
	}
	
	If (!$SkipWwin10Next)
	{	
		Try{Decline-Win10Next{};$Props."Windows 10 Next" = ("$Script:Win10Nextcount")}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-Win10Next function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipWin10Next is set to $SkipWin10Next.  Skipping Decline-Win10Next Function."
		$wns = "Skipped"
		$Props."Windows 10 Next" = ([string]$wns)
	}

	If (!$SkipServerNext)
	{	
		Try{Decline-ServerNext{};$Props."Server Next" = ($script:ServerNextcount)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-ServerNext function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipServerNext is set to $SkipServerNext.  Skipping Decline-ServerNext Function."
		$sns = "Skipped"
		$Props."Server 10 Next" = ([string]$sns)
	}
	
	If (!$SkipIE7)
	{	
		Try{Decline-IE7{};$Props."IE 7" = ($Script:IE7count)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-IE7 function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
    Else
        { 
            Write-ToLog "SkipIE7 is set to $SkipIE7.  Skipping Decline-IE7 Function."
            $i7s = "Skipped"
            $Props."IE 7" = ([string]$i7s)
         }
	
	If (!$SkipIE8)
	{	
		Try{Decline-IE8{};$Props."IE 8" = ($Script:IE8count)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-IE8 function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
    Else
        { 
            Write-ToLog "SkipIE8 is set to $SkipIE8.  Skipping Decline-IE8 Function."
            $i8s = "Skipped"
            $Props."IE 8" = ([string]$i8s)
         }
	
	If (!$SkipIE9)
	{	
		Try{Decline-IE9{};$Props."IE 9" = ($Script:IE9count)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-IE9 function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipIE9 is set to $SkipIE9.  Skipping Decline-IE9 Function."
		$i9s = "Skipped"
		$Props."IE 9" = ([string]$i9s)
		
	}

	If (!$SkipIE10)
	{	
		Try{Decline-IE10{};$Props."IE 10" = ($Script:IE10count)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-IE10 function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipIE10 is set to $SkipIE10.  Skipping Decline-IE10 Function."
		$i0s = "Skipped"
		$Props."IE 10" = ([string]$i0s)
		
	}

	If (!$SkipEmbedded)
	{	
		Try{Decline-Embedded{};$Props."Windows Embedded" = ($Script:Embeddedcount)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-Embedded function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipEmbedded is set to $SkipEmbedded.  Skipping Decline-Embedded Function."
		$ems = "Skipped"
		$Props."Windows Embedded" = ([string]$ems)
	}

	If (!$SkipArm64)
	{	
		Try{Decline-ARM64{};$Props."ARM64 Based" = ($Script:Arm64count)}
		Catch{Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Unable to run Decline-ARM64 function on $WsusServer" -Source $EventSource -EntryType Error; SendMail{}}
	}
	Else
	{ 
		Write-ToLog "SkipArm64 is set to $SkipArm64.  Skipping Decline-ARM64 Function."
		$arm = "Skipped"
		$Props."ARM64 Based" = ([string]$arm)
	}

    if ($error)
    {
        Write-EventLog -LogName $Eventlog -EventID 21021 -Message "Error running the $scriptName Script on $WsusServer.  Error: $error{0}" -Source $EventSource -EntryType Error
		SendMail{}
    }
    Else
    {

     Write-EventLog -LogName $Eventlog -EventID 21020 -Message "$scriptName Script has completed successfully on $WsusServer." -Source $EventSource -EntryType Information
    }

    #$row = $table.NewRow()

	Write-ToLog ""
	Write-ToLog "Done with $WsusServer... "
	Write-ToLog ""
	Write-ToLog "=========================="
	Write-ToLog "Overall Summary for $WsusServer"
	Write-ToLog "=========================="
	Write-ToLog "    Total Superseded Updates (Older than $ExclusionPeriod days) = $script:countSupersededExclusionPeriod"
	Write-ToLog "    Total Itanium Updates = $script:Itancount. $its"
	Write-ToLog "    Total Windows XP Updates = $Script:XPcount. $xts"
	Write-ToLog "    Total Preview Updates = $Script:Prevcount. $pvs"
	Write-ToLog "    Total Beta Updates = $Script:Betacount. $bts"
	Write-ToLog "    Total Windows 10 Next Updates = $Script:Win10Nextcount. $wns"
	Write-ToLog "    Total Windows Server Next Updates = $Script:ServerNextcount. $sns"
	Write-ToLog "    Total ARM64-Based Updates = $Script:Arm64count. $arm"
	Write-ToLog "    Total Windows Embedded Updates = $Script:Embeddedcount. $ems"
	Write-ToLog "    Total IE 7 Updates = $Script:IE7count. $i7s"
	Write-ToLog "    Total IE 8 Updates = $Script:IE8count. $i8s"
	Write-ToLog "    Total IE 9 Updates = $Script:IE9count. $i9s"
	Write-ToLog "    Total IE 10 Updates = $Script:IE10count. $i0s"
	
    
	Write-ToLog ""
	If (!$TrialRun){Write-ToLog "These Updates were declined, unless Skipped."}Else{Write-ToLog "Updates were ONLY recorded. See UpdatesList folder."}
	Write-ToLog "=========================="
	Write-ToLog "=========================="
	Write-ToLog ""

    $Props."TrialRun" = ($TrialRun)
   
    $StopScript = Get-Date
    $timespan = new-timespan -seconds $(($StopScript-$startScript).totalseconds) 
    $ScriptTime = '{0:00}h:{1:00}m:{2:00}s' -f $timespan.Hours,$timespan.Minutes,$timespan.Seconds
	Write-ToLog "$WsusServer Run Time: $ScriptTime"
	Write-ToLog "=========================="
	Write-ToLog ""

    $Props."Run Time" = ($ScriptTime)

    New-Object PSObject -property $Props
}

$jeffobjects | Select $Table | ConvertTo-HTML -head $CStyle | Out-File $Overallhtmfile

If($CleanUpdatelist){UpdateListMaint{}}

If($EmailReport)
	{	
        $Body = "&lt;p class=MsoTitle&gt;&lt;span style='font-size:20pt;font-family:Verdana,sans-serif'&gt;$ReportTitle&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;"
        $Body += $jeffobjects | Select $Table | ConvertTo-HTML -head $CStyle -PostContent "&lt;h6&gt;Created $(Get-Date)&lt;/h6&gt;&lt;br&gt;$from"
		SendEmailStatus -From $From -To $To -Subject $Subject -SmtpServer $SmtpServer -BodyAsHtml $True -Body $Body
	}
	
Write-ToLog "====&gt;  Done  &lt;===="
Write-ToLog "All target WSUS/SUP servers have been completed."
Write-ToLog "See $Overallhtmfile."
Write-ToLog "=========================================="

=================================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_User_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>BookMarks_Export_Chrome_v2.ps1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_User_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>BookMarks_Export_Chrome_v2.ps1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#'BookMarks_Export_Chrome_v2.ps1
#'credits: Mostly to tobibeer and Snak3d0c @ https://stackoverflow.com/questions/47345612/export-chrome-bookmarks-to-csv-file-using-powershell
#'Path to chrome bookmarks
$pathToJsonFile = "$env:localappdata\Google\Chrome\User Data\Default\Bookmarks"

$thisComputerName = $env:computername
$theFolderName = "$thisComputerName" +  "__$(Get-Date -Format "yyyy_M_d")"
$destinationPath = 'H:\'

$htmlOut = "$destinationPath\$theFolderName\ChromeBookmarks.html"

if(!(test-path "$destinationPath\$theFolderName")){
                                                  new-item "$destinationPath\$theFolderName" -ItemType Directory
                                                }




$htmlHeader = @'
&lt;!DOCTYPE NETSCAPE-Bookmark-file-1&gt;
&lt;!--This is an automatically generated file.
    It will be read and overwritten.
    Do Not Edit! --&gt;
&lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"&gt;
&lt;Title&gt;Bookmarks&lt;/Title&gt;
&lt;H1&gt;Bookmarks&lt;/H1&gt;
&lt;DL&gt;&lt;p&gt;
'@

$htmlHeader | Out-File -FilePath $htmlOut -Force -Encoding utf8 #'line59

#'A nested function to enumerate bookmark folders
Function Get-BookmarkFolder {
[cmdletbinding()]
Param(
[Parameter(Position=0,ValueFromPipeline=$True)]
$Node
)

Process 
{

 foreach ($child in $node.children) 
 {
   $da = [math]::Round([double]$child.date_added / 1000000) #'date_added - from microseconds (Google Chrome {dates}) to seconds 'standard' epoch.
   $dm = [math]::Round([double]$child.date_modified / 1000000) #'date_modified - from microseconds (Google Chrome {dates}) to seconds 'standard' epoch.
   if ($child.type -eq 'Folder') 
   {
     "    &lt;DT&gt;&lt;H3 FOLDED ADD_DATE=`"$($da)`"&gt;$($child.name)&lt;/H3&gt;" | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8
     "       &lt;DL&gt;&lt;p&gt;" | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8
     Get-BookmarkFolder $child
     "       &lt;/DL&gt;&lt;p&gt;" | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8
   }
   else 
   {
        "       &lt;DT&gt;&lt;a href=`"$($child.url)`" ADD_DATE=`"$($da)`"&gt;$($child.name)&lt;/a&gt;" | Out-File -FilePath $htmlOut -Append -Encoding utf8
  } #'else url
 } #'foreach
 } #'process
} #'end function

$data = Get-content $pathToJsonFile -Encoding UTF8 | out-string | ConvertFrom-Json
$sections = $data.roots.PSObject.Properties | select -ExpandProperty name
ForEach ($entry in $sections) {
    $data.roots.$entry | Get-BookmarkFolder
}
'&lt;/DL&gt;' | Out-File -FilePath $htmlOut -Append -Force -Encoding utf8</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_User_Profile</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Copy_Users_Favorites_Cookies_etc</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_User_Profile</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Copy_Users_Favorites_Cookies_etc</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
#'CopyLocalUserDirectoriesFromProfile.ps1

#'Set-ExecutionPolicy -Scope CurrentUser unrestricted -Force

$ErrorActionPreference = "Continue"  #' suppresses an error "An item with the specified name xxx already exists." but it is not a problem

$thisComputerName = $env:computername
$theFolderName = "$thisComputerName" +  "__$(Get-Date -Format "yyyy_M_d")"
$destinationPath = 'H:\'
$myDocumentsPath = [Environment]::GetFolderPath("MyDocuments")

if(!(test-path "$destination\$theFolderName")){
  new-item "$destination\$theFolderName" -ItemType Directory
    if(!(test-path "$destination\$theFolderName\desktop")){
      new-item "$destinationPath\$theFolderName\desktop"   -ItemType Directory
      new-item "$destinationPath\$theFolderName\favorites" -ItemType Directory
      new-item "$destinationPath\$theFolderName\Documents"      -ItemType Directory
}}

Copy-Item "$env:userprofile\desktop" -Destination "$destinationPath\$theFolderName" -Recurse
Copy-Item "$env:userprofile\Favorites" -Destination "$destinationPath\$theFolderName" -Recurse
Copy-Item $myDocumentsPath -Destination "$destinationPath\$theFolderName" -Recurse


$ErrorActionPreference = "Stop"

============================================================================================================
'https://community.spiceworks.com/topic/1862095-powershell-script-to-copy-user-s-favorites-cookies
=================================================================================================== LOCAL
#'CopyLocalUserDirectoriesFromProfile.ps1
#' NOTE this does throw an error "An item with the specified name xxx already exists." but it is not a problem
#'Set-ExecutionPolicy -Scope CurrentUser unrestricted -Force

$destination = '\\win10vm\ALL_Share\Junk'

if(!(test-path "$destination\$env:username")){
  new-item "$destination\$env:username" -ItemType Directory
    if(!(test-path "$destination\$env:username\desktop")){
      new-item "$destination\$env:username\desktop"   -ItemType Directory
      new-item "$destination\$env:username\favorites" -ItemType Directory
      new-item "$destination\$env:username\docs"      -ItemType Directory
      new-item "$destination\$env:username\cookies"   -ItemType Directory
}}

Copy-Item "$env:userprofile\desktop" -Destination "$destination\$env:username" -Recurse
Copy-Item "$env:userprofile\Favorites" -Destination "$destination\$env:username" -Recurse
Copy-Item "$env:userprofile\My Documents" -Destination "$destination\$env:username" -Recurse
Copy-Item "$env:userprofile\cookies" -Destination "$destination\$env:username" -Recurse
===================================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>String_Interpolation</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>String_Interpolation</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>  $retval += "`t$($_.Name)`r`n"               	#SHORTER b/c of Interpolation
  # Note this line could also be rendered as
  $retval = $retval + "`t" + $_.Name + "`r`n"  	#LONGER 


# This interprets a variables value into a string
# String Interpolation works with double quotes---------------------------------------------------
Set-Location C:\PS
Clear-Host

# Take the output of Get-ChildItem, which is an object, and gets that objects count property
# Wrapping the cmdlet in parenthesis treats the cmdlet as a collection of File Objects 
# Now the "Count" method works on the Collection, rather than individual objects
$items = (Get-ChildItem).Count

# Take the output of Get-Location and store it in a variable
$loc = Get-Location

# Use these variables in a string, NOTE the use of double qoutes
"There are $items items are in the folder $loc."

# To actually display the variable, escape it with a backtick
"There are `$items items are in the folder `$loc."

# String interpolation only works with double quotes, so the variables will not be treated as variables, 
#   but rather as part of the string
'There are $items items are in the folder $loc.'

# String Interpolation works with here strings
$hereinterpolation = @"
Items`tFolder
-----`t----------------------
$items`t`t$loc

"@

$hereinterpolation 

# Can use expressions in strings, need to be wrapped in $()
Clear-Host
"There are $((Get-ChildItem).Count) items are in the folder $(Get-Location)."

"Today is $(Get-Date). Be well."

"The 15% tip of a 33.33 dollar bill is $(33.33 * 0.15) dollars"

##
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Variables</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>String_replace</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Variables</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>String_replace</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>=============================================================================================
#'replace text in a string
=============================================================================================
--------------------------
‘Here is a simple string.’ –replace ‘simple string’,’string that got something replaced’





'https://stackoverflow.com/questions/17144355/how-can-i-replace-every-occurrence-of-a-string-in-a-file-with-powershell
=============================================================================================
#'Replace text in a file
=============================================================================================

------------------------- PS v3
(Get-Content c:\temp\test.txt).replace('[MYID]', 'MyValue') | Set-Content c:\temp\test.txt
------------------------- PS v2
(Get-Content c:\temp\test.txt) -replace '\[MYID\]', 'MyValue' | Set-Content c:\temp\test.txt

------------------------------------------------------------------------------------------- probably v2
(Get-Content file.txt) | 
Foreach-Object {$_ -replace '\[MYID\]','MyValue'}  | 
'Out-File file.txt    &lt;== some are claiming this is dangerous b/c of overwrite in situation where parenthesis is left off
Set-Content file.txt

#'    Without the parenthesis the content is read, one line at a time, 
#'        and flows down the pipeline until it reaches out-file or set-content, 
#'        which tries to write to the same file, 
#'        but it's already open by get-content and you get an error. 
#'    The parenthesis causes the operation of content reading to be performed once (open, read and close). 
#'    Only then when all lines have been read, 
#'        they are piped one at a time and when they reach the last command in the pipeline they can be written to the file. 
#'    It's the same as $content=content; $content | where ...

-------------------------------------------------------------------------------------------
$content = [System.IO.File]::ReadAllText("c:\bla.txt").Replace("[MYID]","MyValue")
[System.IO.File]::WriteAllText("c:\bla.txt", $content)

#'    This has the advantage of working with a single String instead of a String-array as with Get-Content. 
#'    The methods also take care of the encoding of the file (UTF-8 BOM, etc.) without you having to take care most of the time.
#'
#'    Also the methods don't mess up the line endings (Unix line endings that might be used) 
#'        in contrast to an algorithm using Get-Content and piping through to Set-Content.
#'
#'    So for me: Fewer things that could break over the years.
#'
#'    A little-known thing when using .NET classes is that when you have typed in "[System.IO.File]::" in the PowerShell window 
#'        you can press the Tab key to step through the methods there.
-----------------------------------------------------------------------------------------------
#'     I needed to change a certain line in all instances of a particular file name.
#'
#'    Also, Set-Content was not returning consistent results, so I had to resort to Out-File.

$FileName =''
$OldLine = ''
$NewLine = ''
$Drives = Get-PSDrive -PSProvider FileSystem
foreach ($Drive in $Drives) {
    Push-Location $Drive.Root
        Get-ChildItem -Filter "$FileName" -Recurse | ForEach { 
            (Get-Content $_.FullName).Replace($OldLine, $NewLine) | Out-File $_.FullName
        }
    Pop-Location
}
-----------------------------------------------------------------------------------------------
$path = "C:\testFile.txt"
$word = "searchword"
$replacement = "ReplacementText"
$text = get-content $path 
$newText = $text -replace $word,$replacement
$newText &gt; $path

=============================================================================================
#'Replace text in Multiple files
=============================================================================================

'you can also run this for multiple files within your folder:

Get-ChildItem 'C:yourfile*.xml' -Recurse | ForEach {
     (Get-Content $_ | ForEach  { $_ -replace '[MYID]', 'MyValue' }) |
     Set-Content $_
}


'https://stackoverflow.com/questions/31010480/replacing-contents-of-a-text-file-using-powershell
=============================================================================================
#'Replace text in a file
=============================================================================================
$path = "c:\Users\$($env:username)\desktop\VPN.txt"
(Get-Content $path).Replace("user1",$env:username) | Set-Content $path 

-----------------------------------------------------------------------------------------------
'Do you want to only replace the first occurrence?
'You could use a little regex here with a tweak in how you get the use Get-Content

$path = "c:\Users\$($env:username)\desktop\VPN.txt" 
(Get-Content $path | Out-String) -replace "(.*?)user1(.*)",('$1{0}$2' -f $env:username) | out-file $path 

'Regex will match the entire file. There are two groups which it captures.
'	(.*?) - Up until the first "user1"
'	(.*) - Everything after that</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Windows_10</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Set_Folder_Options_Dialog_of_Windows_Explorer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Windows_10</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Set_Folder_Options_Dialog_of_Windows_Explorer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
https://stackoverflow.com/questions/4491999/configure-windows-explorer-folder-options-through-powershell
Choose "Show hidden files, folders, and drives"
Uncheck "Hide extensions for known file types"
Uncheck "Hide protected operating system files (Recommended)"

#' For Windows 7, and reports that it works with Windows 10 Home Edition

&gt;$key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'
Set-ItemProperty $key Hidden 1
Set-ItemProperty $key HideFileExt 0
Set-ItemProperty $key ShowSuperHidden 1
Stop-Process -processname explorer				'&lt;===== need to end with this step



'This will disable the grouping of similar open applications on the taskbar. 
'This one also requires the explorer process to be restarted in order for it to be applied.
&gt;$key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'
Set-ItemProperty $key TaskbarGlomLevel 2 
Stop-Process -processname explorer				'&lt;===== need to end with this step


-----------------------------------------------------------------------------------------
'For a user:
'I believe these correspond to registry entries under reg key 
	HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
'You can use the Set-ItemProperty cmdlet to change their value e.g.:

$key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'
Set-ItemProperty $key ShowSuperHidden 1
Stop-Process -processname explorer				'&lt;===== need to end with this step

'There also seems to be a corresponding key for local machine (as opposed to the per user setting above): 
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_WMI</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>about_POWERSHELL_WMI</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_WMI</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>about_POWERSHELL_WMI</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_POWERSHELL_WMI

ref: http://www.darkoperator.com/blog/2013/1/31/introduction-to-wmi-basics-with-powershell-part-1-what-it-is.html

WMI (Windows Management Instrumentation)

Definitions
---------------
#'Class=the definition of an object
#'	e.g Win32_Share
#'	
#'Namespace=WMI Classes live inside namespaces
#'	e.g. root\CimV2	
#'	
#'Instance=A class can have zero, one or more instances
#'	e.g	One instance for each share
#'
#'Property=an attribute of an instance
#'	e.g. Name and Path of a specific Win32_share instance
#'
#'
#'Method=Something a WMI class instance can do
#'    e.g. Delete() a specific share
#'
#'Static method=something a WMI class can do
#'    e.g. Create() a new share
#'
#'Event=something that happens and can be acted on when it occurs

	
Where Does WMI/CIM Live?:
---------------------------------------
#' CIMOM (CIM Object Manager) 
#'    lives in WBEM Folder

        &gt;Get-ChildItem c:\Windows\System32\Wbem\Winmgmt.exe
#' WMI Providers 
#'    live in same location

        &gt;Get-ChildItem C:\Windows\System32\Wbem\*provider*.dll
        &gt;Get-ChildItem C:\Windows\System32\Wbem*.dll
        
#' The CIM Database
    &gt;Get-ChildItem c:\windows\system32\repository	
	
Where do WMI/CIM cmdlets live?
------------------------------	
#' The WMI cmdlets live in microsoft.powershell.managment
Get-Command –module microsoft.powershell.management

#' The CIM Cmdlets live in the CimCmdletsModule
Get-Command –module CimCmdlets


Correspnding cmdlets

		CIM Cmdlet
		=============
		Get-CimAssociatedInstance
		Get-CimClass
		Get-CimInstance
		Invoke-CimMethod
		New-CimInstance/SetCimInstance
		Remove-CimInstance
		Register-CimIndicationEvent
		New-CimSession
		Get-CimSession
		Remove-CimSession
		New-CimSessionOption
		
		
		WMI Cmdlet
		================
		UseWMI query with Get-WmiObject
		Use [WMIClass]
		Get-WMIObject
		Invoke-WmiMethod
		Set-WmiInstance
		Remove-WmiObject
		Register-WmiIEvent
		No equivalent
		No equivalent
		Noequivalent
		No equivalent



What is a WMI qualifier?
------------------------
#'    MSDN defines these as: a data string that provides more information about a class, 
#'        instance, property, method, or parameter.
#'    Think of it as an attribute – of a class, instance, property, method, or parameter.
#'
#'You use Get-CimClass to discover information about a class, including class, method and property 
#'qualifiers
--------------------- How to get the Qualifiers
#'Get-CimClass returns an object with key properties returned as arrays
#'    Pipe the output of Get-CimClass to Select-Object –Expand &lt;prop&gt; to expand any of the properties
---------------------</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PyCharm_Data</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>READ_and_PLOT_from_csv</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PyCharm_Data</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>READ_and_PLOT_from_csv</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>READ_and_PLOT_from_csv

Effective Data Science with PyCharm
https://www.youtube.com/watch?v=46RjXawJQgg

#by putting the following symbol on a line: #%%, 
# then 
	View =&gt; Scientific Mode
#the code is broken into individually executable cells
#%%

[Cntrl]-[Enter] #to execute a cell

-------------------------------------------------------------------READ

#When the .csv file is in the project folder (e.g. /data/titanic.csv)
#Use View =&gt; Scientific Mode to run cells, and show it the way this video does

from pathlib import Path
import pandas as pd

#create a data Frame
titanic_df = pd.read_csv(Path().joinpath('data','titanic.csv'))

#When you click on the titanic_df object in the variable list window, it will display

#to get a sample of the original dataframe:
sample_titanic=titanic_df.sample(10) 
 

#To see the number of NULLs in each column of the dataframe:
sum_null=titanic_df.isnull().sum()

-------------------------------------------------------------------PLOT survival based on Sex

#%%
import seaborn as sns
from matplotlib import pyplot as plt

sns.countplot(x='Survived',hue='Sex',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell

-------------------------------------------------------------------PLOT survival based on Passenger class
sns.countplot(x='Survived',hue='Pclas',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_API_stocks</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>AlphaAdvantageAPI_EXAMPLE_StockPrice_JOIN_Indcator_timeSeries</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_API_stocks</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>AlphaAdvantageAPI_EXAMPLE_StockPrice_JOIN_Indcator_timeSeries</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code># JOIN_StockPrice_with_Indicator.py
# from UDEMY course
# the example indicator is RSI = relative strength index
# for this example, using MSFT stock, the two dataframes failed JOIN correctly,
#   or at least there were a lot of NaN at the top for the stocks, and at the bottom for the RSI
# I should probably filter out the 'NaN' to see if there are any matching rows.
# ISSUE: How to control the START and END dates. This ran from 2020-12-31 hh:mm:ss to 2020-12-21  hh:mm:ss
#       I did notice that the  hh:mm:ss did not match for the two dataframes and that may be the problem


import pandas as pd
from alpha_vantage.techindicators import TechIndicators
from alpha_vantage.timeseries import TimeSeries
import key  # --&lt;=== This refers to a file in the same folder called "key.py", with one variable in it: 'api_key'

theStock = input("What stock do you want?:")
print('')


# This function uses the stock symbol input above, and the API key
# To pull a timeseries of the stock, and output it in a pandas format, as well as one of the 'indicators' (i.e. 'rsi')
def rsi_dataframe(stock=theStock):
    api_key = key.api_key

    # get a TIMESERIES
    # ===================
    period = 60  # 60 seconds, i.e. fetch info every 60 seconds, limited to 3-5 fetches/minute b/c free API key
    ts = TimeSeries(key=api_key, output_format='pandas')
    # data_ts is the 1 minute timeseries
    # get the upperCase of the stock symbol: stock.upper()
    # full = full list of info
    data_ts = ts.get_intraday(stock.upper(), interval='1min', outputsize='full')

    # get an INDICATOR
    # ==================
    ti = TechIndicators(key=api_key, output_format='pandas')
    # get the upperCase of the stock symbol: stock.upper()
    # series_type='close' =&gt; gets the close, but you could do low or high {not sure of spelling}
    data_ti, meta_data_ti = ti.get_rsi(symbol=stock.upper(), interval='1min', time_period=period, series_type='close')

    # the DATAFRAME
    # ====================

    # # v1
    # #====
    # df = data_ts             #want to stick with the 'period' and everything past that. There was a lot of garbage: 4375 rows
    # return print(df)
    #
    # #OUTPUT
    # # NOTE: it has a parenthesis () around it, v2 will get rid of the parenthesis
    # # NOTE: the rows of data correspond to the first object in the Dataframe: data_ts[0], and the last row of words corresponds to the second object: data_ts[1] (i.e. after the comma in the last line: "[4555 rows x 5 columns]," )
    # #==========================================================================
    # # (1. open  2. high  3. low  4. close  5. volume
    # # date
    # # 2021-02-04 19:58:00    19.13    19.13   19.13     19.13      200.0
    # # 2021-02-04 19:46:00    19.14    19.14   19.14     19.14      200.0
    # # ...
    # # 2021-01-22 05:47:00    19.00    19.00   18.99     18.99     1924.0
    # # 2021-01-22 05:46:00    19.01    19.01   19.01     19.01      187.0
    # #
    # # [4555 rows x 5 columns], {'1. Information': 'Intraday (1min) open, high, low, close prices and volume', '2. Symbol': 'HAL', '3. Last Refreshed': '2021-02-04 19:58:00', '4. Interval': '1min', '5. Output Size': 'Full size', '6. Time Zone': 'US/Eastern'})
    # #==========================================================================

    # # v2
    # #====
    # df = data_ts[0]           # &lt;==== zero (0)
    # return print(df)
    # # OUTPUT
    # # NOTE: up to the comma that seperates data_ts[0] and data_ts[1]
    # #==========================================================================
    # # (1. open  2. high  3. low  4. close  5. volume
    # # date
    # # 2021-02-04 19:58:00    19.13    19.13   19.13     19.13      200.0
    # # 2021-02-04 19:46:00    19.14    19.14   19.14     19.14      200.0
    # # ...
    # # 2021-01-22 05:47:00    19.00    19.00   18.99     18.99     1924.0
    # # 2021-01-22 05:46:00    19.01    19.01   19.01     19.01      187.0
    # #
    # # [4555 rows x 5 columns]
    # #==========================================================================

    # # v3
    # # ====
    # df = data_ts[1]          # &lt;==== one (1)
    # return print(df)
    # # OUTPUT
    # # ==========================================================================
    # # {'1. Information': 'Intraday (1min) open, high, low, close prices and volume', '2. Symbol': 'BA', '3. Last Refreshed': '2021-02-04 19:59:00', '4. Interval': '1min', '5. Output Size': 'Full size', '6. Time Zone': 'US/Eastern'}
    # # ==========================================================================

    # # # v4
    # # #====
    # df = data_ts[0][period::]            # &lt;==== zero (0)
    # return print(df)
    # # # OUTPUT
    # # # NOTE: removed the first parenthesis, This cleaned it up: less rows
    # # #==========================================================================
    # #                       1. open   2. high    3. low  4. close  5. volume
    # # date
    # # 2021-02-04 15:23:00  161.3200  161.3250  161.2900  161.3000     4457.0
    # # 2021-02-04 15:22:00  161.2560  161.3150  161.2560  161.3000     4141.0
    # # ...                       ...       ...       ...       ...        ...
    # # 2021-01-22 07:42:00  159.2900  159.2900  159.2500  159.2500      292.0
    # # 2021-01-22 07:41:00  159.5000  159.5000  159.3100  159.3100      701.0
    # #
    # # [4284 rows x 5 columns]
    # # #==========================================================================

    ## The INDICATOR
    ##================
    # return print(data_ti)

    # # # OUTPUT
    # # # NOTE: removed the first parenthesis, This cleaned it up: less rows
    # # #==========================================================================
    #                          RSI
    #     date
    #     2021-01-22 07:11:00  57.3746
    #     2021-01-22 07:12:00  57.1176
    #     ...                      ...
    #     2021-02-04 19:59:00  51.0594
    #     2021-02-04 20:00:00  50.2469
    #
    #     [7310 rows x 1 columns]
    # # #==========================================================================

    ## Now concatenate the Timeseries and the Indicator
    ##=================================================

    # #  # axis=1 =&gt; line up the rows, sort=true =&gt; will match up the timeseries?
    # df = data_ts[0][period::]  # &lt;==== zero (0)
    # df2 = data_ti
    # total_df = pd.concat([df, df2], axis=1, sort=True)
    # return print(total_df)

    #OUTPUT
    # #================================================================================
    #                      1. open  2. high  3. low  4. close  5. volume      RSI
    #     date
    #     2021-01-22 04:01:00   224.87   224.87  224.70    224.70      742.0      NaN
    #     2021-01-22 04:05:00   224.60   224.60  224.60    224.60      133.0      NaN
    #     ...                      ...      ...     ...       ...        ...      ...
    #     2021-02-04 19:59:00      NaN      NaN     NaN       NaN        NaN  51.0594
    #     2021-02-04 20:00:00      NaN      NaN     NaN       NaN        NaN  50.2469
    #
    #     [7370 rows x 6 columns]
    # #================================================================================


    # NOTE: the Udemy teacher had a situation where the last 2 zeros of the [date] were left off in the indicator,
    #       so to modify the index so that it would join correctly he used this modification:
    #--------------------------------------------------------------------------------------------------------------
    # df.index= pd.Index(map(lambda x: str(x)[:-3],df.index ))
    # --------------------------------------------------------------------------------------------------------------


    df = data_ts[0][period::]  # &lt;==== zero (0)
    df2 = data_ti
    total_df = pd.concat([df, df2], axis=1, sort=True)
    total_df_clean = total_df.dropna()
    return print(total_df_clean)
    #OUTPUT
#     # #================================================================================
#                      1. open  2. high  3. low  4. close  5. volume      RSI
#         date
#         2021-01-22 07:11:00   225.70   225.70  225.70    225.70      704.0  57.3746
#         2021-01-22 07:12:00   225.67   225.67  225.67    225.67      237.0  57.1176
#         ...                      ...      ...     ...       ...        ...      ...
#         2021-02-04 17:05:00   241.81   241.81  241.81    241.81      125.0  54.2969
#         2021-02-04 17:08:00   241.93   241.93  241.93    241.93      209.0  55.4355
#
#         [7250 rows x 6 columns]
# # #================================================================================


# NOW CALL THE FUNCTION
# =====================
rsi_dataframe()</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_DATA_read_and_plot</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>from_CSV</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_DATA_read_and_plot</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>from_CSV</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>READ_and_PLOT_from_csv

Effective Data Science with PyCharm
https://www.youtube.com/watch?v=46RjXawJQgg

#by putting the following symbol on a line: #%%, 
# then 
	View =&gt; Scientific Mode
#the code is broken into individually executable cells
#%%

[Cntrl]-[Enter] #to execute a cell

-------------------------------------------------------------------READ

#When the .csv file is in the project folder (e.g. /data/titanic.csv)
#Use View =&gt; Scientific Mode to run cells, and show it the way this video does

from pathlib import Path
import pandas as pd

#create a data Frame
titanic_df = pd.read_csv(Path().joinpath('data','titanic.csv'))

#When you click on the titanic_df object in the variable list window, it will display

#to get a sample of the original dataframe:
sample_titanic=titanic_df.sample(10) 
 

#To see the number of NULLs in each column of the dataframe:
sum_null=titanic_df.isnull().sum()

-------------------------------------------------------------------PLOT survival based on Sex

#%%
import seaborn as sns
from matplotlib import pyplot as plt

sns.countplot(x='Survived',hue='Sex',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell

-------------------------------------------------------------------PLOT survival based on Passenger class
sns.countplot(x='Survived',hue='Pclas',data=titanic_df)
plot.show()
[Cntrl]-[Enter] # to execute the cell</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_FILE_PATH_MODULE</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>CREATE_WRITE_to_csv_file</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_FILE_PATH_MODULE</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>CREATE_WRITE_to_csv_file</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#CREATE_WRITE_to_csv_file 

##To Delete the file
import os
# os.remove("./data.csv")

#Open()
# w=write, a=append, r=read, r+=reading/writing

# #create a .csv file in WRITE mode, do this to create the file
if not os.path.exists("./data.csv"):
    file = open("./data.csv", "w")							# the "./" means in the same folder as the .py file
    print("1] file was created b/c it did not exist")
    file.close()
    print("2] file object was closed")
else:
    print("File already existed, so no need to create it.")
# # "w" = write, or create if it does not yet exist

# r+: Open for for read and write, this assumes the file exists first
file = open("./data.csv", "r+")
#Then write to the file
file.write("id,name,email \n")
file.write("1,Jamila,jamila@gmail.com \n")
file.write("2,Alex,alex@gmail.com \n")
file.close()</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Packages</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>pip_options</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Packages</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>pip_options</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Options

-r, --requirement &lt;file&gt;
Install from the given requirements file. This option can be used multiple times.

-c, --constraint &lt;file&gt;
Constrain versions using the given constraints file. This option can be used multiple times.

--no-deps
Don’t install package dependencies.

--pre
Include pre-release and development versions. By default, pip only finds stable versions.

-e, --editable &lt;path/url&gt;
Install a project in editable mode (i.e. setuptools “develop mode”) from a local project path or a VCS url.

-t, --target &lt;dir&gt;
Install packages into &lt;dir&gt;. By default this will not replace existing files/folders in &lt;dir&gt;. Use --upgrade to replace existing packages in &lt;dir&gt; with new versions.

--platform &lt;platform&gt;
Only use wheels compatible with &lt;platform&gt;. Defaults to the platform of the running system. Use this option multiple times to specify multiple platforms supported by the target interpreter.

--python-version &lt;python_version&gt;
The Python interpreter version to use for wheel and “Requires-Python” compatibility checks. Defaults to a version derived from the running interpreter. The version can be specified using up to three dot-separated integers (e.g. “3” for 3.0.0, “3.7” for 3.7.0, or “3.7.3”). A major-minor version can also be given as a string without dots (e.g. “37” for 3.7.0).

--implementation &lt;implementation&gt;
Only use wheels compatible with Python implementation &lt;implementation&gt;, e.g. ‘pp’, ‘jy’, ‘cp’, or ‘ip’. If not specified, then the current interpreter implementation is used. Use ‘py’ to force implementation-agnostic wheels.

--abi &lt;abi&gt;
Only use wheels compatible with Python abi &lt;abi&gt;, e.g. ‘pypy_41’. If not specified, then the current interpreter abi tag is used. Use this option multiple times to specify multiple abis supported by the target interpreter. Generally you will need to specify --implementation, --platform, and --python-version when using this option.

--user
Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%Python on Windows. (See the Python documentation for site.USER_BASE for full details.)

--root &lt;dir&gt;
Install everything relative to this alternate root directory.

--prefix &lt;dir&gt;
Installation prefix where lib, bin and other top-level folders are placed

--src &lt;dir&gt;
Directory to check out editable projects into. The default in a virtualenv is “&lt;venv path&gt;/src”. The default for global installs is “&lt;current dir&gt;/src”.

-U, --upgrade
Upgrade all specified packages to the newest available version. The handling of dependencies depends on the upgrade-strategy used.

--upgrade-strategy &lt;upgrade_strategy&gt;
Determines how dependency upgrading should be handled [default: only-if-needed]. “eager” - dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s). “only-if-needed” - are upgraded only when they do not satisfy the requirements of the upgraded package(s).

--force-reinstall
Reinstall all packages even if they are already up-to-date.

-I, --ignore-installed
Ignore the installed packages, overwriting them. This can break your system if the existing package is of a different version or was installed with a different package manager!

--ignore-requires-python
Ignore the Requires-Python information.

--no-build-isolation
Disable isolation when building a modern source distribution. Build dependencies specified by PEP 518 must be already installed if this option is used.

--use-pep517
Use PEP 517 for building source distributions (use --no-use-pep517 to force legacy behaviour).

--install-option &lt;options&gt;
Extra arguments to be supplied to the setup.py install command (use like --install-option=”--install-scripts=/usr/local/bin”). Use multiple --install-option options to pass multiple options to setup.py install. If you are using an option with a directory path, be sure to use absolute path.

--global-option &lt;options&gt;
Extra global options to be supplied to the setup.py call before the install command.

--compile
Compile Python source files to bytecode

--no-compile
Do not compile Python source files to bytecode

--no-warn-script-location
Do not warn when installing scripts outside PATH

--no-warn-conflicts
Do not warn about broken dependencies

--no-binary &lt;format_control&gt;
Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either “:all:” to disable all binary packages, “:none:” to empty the set (notice the colons), or one or more package names with commas between them (no colons). Note that some packages are tricky to compile and may fail to install when this option is used on them.

--only-binary &lt;format_control&gt;
Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either “:all:” to disable all source packages, “:none:” to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.

--prefer-binary
Prefer older binary packages over newer source packages.

--require-hashes
Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.

--progress-bar &lt;progress_bar&gt;
Specify type of progress to be displayed [off|on|ascii|pretty|emoji] (default: on)

--no-clean
Don’t clean up build directories.


-i, --index-url &lt;url&gt;
Base URL of the Python Package Index (default https://pypi.org/simple). This should point to a repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same format.

--extra-index-url &lt;url&gt;
Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as --index-url.

--no-index
Ignore package index (only looking at --find-links URLs instead).

-f, --find-links &lt;url&gt;
If a URL or path to an html file, then parse for links to archives such as sdist (.tar.gz) or wheel (.whl) files. If a local path or file:// URL that’s a directory, then look for archives in the directory listing. Links to VCS project URLs are not supported.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Pandas_DataFrame</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>CSV_import_etc.</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Pandas_DataFrame</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>CSV_import_etc.</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>#CSV_import_etc.

import pandas as pd
df = pd.read_csv('pokemon_data.csv')	#read .csv from same folder as the script

#read in just the first 111 lines
loan_data_backup = pd.read_csv('loan_data_2007_2014.csv', nrows=111)</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Print</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>EscapeCharacters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Print</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>EscapeCharacters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Code	Result	
\'		Single Quote	
\\		Backslash	
\n		New Line	
\r		Carriage Return	
\t		Tab	
\b		Backspace	
\f		Form Feed	
\ooo	Octal value	
\xhh	Hex value

=============Quote within Qoute

print("This is a "string" ")	# throws an error

----------------

print("This is a \"string\" ")	#escape the qoutes
# OUTPUT
# =============
# This is a "string" 

#OR

print('This is a "string" ')
# OUTPUT
# =============
# This is a "string"

========================new line
print('This is a \n new line ')
# OUTPUT
# =============
# This is a 
#  new line 

============================= Paths w/ backslashe, or 'r' for RAW string

\\		Backslash	
or use 'r' for raw string

print('c:\\DATA\\somefolder1')
print(r'c:\DATA\somefolder2')
# OUTPUT
# =============
# c:\DATA\somefolder1
# c:\DATA\somefolder2</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_Security</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>Environmental_Variables</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_Security</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>Environmental_Variables</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>You can use environmental variables to store your api-token


# https://www.nylas.com/blog/making-use-of-environment-variables-in-python/#how-to-get
# How to Get Environment Variables With Python
#
========================================================================
# How to READ Environment Variables With Python
========================================================================
import os
# print out the environmental variables, each on a new line
seperator = ','
print(str(os.environ).replace(seperator, '\n'))
========================================================================
# How to READ a specific Environment Variable With Python
========================================================================
os.environ.get('USER')
========================================================================
# How to SET a specific Environment Variable With Python
#this changes the environment variable in this session.
# In other words, changing the environment variable here will not affect the environment variable anywhere else.
#
#It’s important to remember that the settings you apply in a Python script
#   don’t work outside that specific process; os.environ doesn’t overwrite the environment variables system-wide.
# If you need to permanently delete or set environment variables you will need to do so with a shell environment,
#   such as Bash.
========================================================================
os.environ['USER'] = 'Bob'
# to clear a single environment variable in the session you can use os.environ.pop()
# with the key and if you need to clear all environment variables you can use os.environ.clear()
os.environ.pop('USER')
os.environ.clear()

========================================================================dotenv
#As you increase the number of environment variables you use, you may want to use a library like dotenv to help manage them.
# It allows you to set or update the environment variables for files in a specific directory by reading them in from another file.
# This is useful when you delineate different stages of your product by having them in different directories.
# By using dotenv, you ensure that the environment variables automatically adjust to the environment you have selected by working in that directory.
# Keep in mind, however, that dotenv is a separate file, and take care not to overlook it when transitioning across systems.

#dotenv reads in environment variables from a file named .env. T
# he file should be formatted as follows:
========================================================================
api-token = "abcdef_123456"
========================================================================
#Once that’s created and placed in the same folder as your Python file,
#   environment variables can be called like so:
========================================================================
From dotenv import load_dotenv
load_dotenv()
import os
token = os.environ.get("api-token")</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_SQL_MachineLearningServer</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>02_import_Python_module_=&gt;_sp_execute_external_script</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_SQL_MachineLearningServer</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>02_import_Python_module_=&gt;_sp_execute_external_script</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>A] the Python file: "thePythonScriptFile.py" located at C:\temp on the Server
B] The SQL script that reads in the .py module/file
C] See the security permission notes that are commented in the SQL script section

\\PYTHON FILE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#thePythonScriptFile.py
import pandas as pd


def compute_tau(df_SQL_IN: pd.DataFrame, parmMultiplier_IN: int) -&gt; (pd.DataFrame, float):
    df_PYTHON_OUT = pd.DataFrame(
        [parmMultiplier_IN * df_SQL_IN["pi"][0]], columns=["colTau"])
    return df_PYTHON_OUT, float(df_PYTHON_OUT["colTau"][0])


def test_compute_tau():
    df_SQL_IN = pd.DataFrame([3.14159], columns=['pi'])
    df, colTau = compute_tau(df_SQL_IN, 2)
    print('DataFrame:\n', df)
    print('tau = ', colTau)


if __name__ == '__main__':
    test_compute_tau()


\\\SQL script\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


--compute_tau_module_v2.sql

--========================================compute_tau.py ==&gt; in path: C:\temp\  ===============START
--#thePythonScriptFile.py
--import pandas as pd


--def compute_tau(df_SQL_IN: pd.DataFrame, parmMultiplier_IN: int) -&gt; (pd.DataFrame, float):
--    df_PYTHON_OUT = pd.DataFrame(
--        [parmMultiplier_IN * df_SQL_IN["pi"][0]], columns=["colTau"])
--    return df_PYTHON_OUT, float(df_PYTHON_OUT["colTau"][0])


--def test_compute_tau():
--    df_SQL_IN = pd.DataFrame([3.14159], columns=['pi'])
--    df, colTau = compute_tau(df_SQL_IN, 2)
--    print('DataFrame:\n', df)
--    print('tau = ', colTau)


--if __name__ == '__main__':
--    test_compute_tau()
--========================================compute_tau.py===================END
/* This will fail until the following is done (https://stackoverflow.com/questions/64530962/importing-python-scripts-in-sql-server-stored-procedure)

1] Assign a folder for the Python Modules to be imported and used by the SQL scripts
2] Set permissions on the folder:
	Give the ALL PACKAGE APPLICATONS user (a) Read &amp; Execute, (b) List Folder Contents, (c) Read
3] Restart the ‘SQL Server Launchpad’ service on the SQL server.
4] Specify the address in the @thePYTHONscript variable using double backslashes between folder names in the path

*/


--This imports the file 'thePythonScriptFile.py' from the directory: C:\Temp
DECLARE @thePYTHONscript NVARCHAR(MAX) = N'
import sys
sys.path += ["c:\\temp"]
import thePythonScriptFile as theFile
df_PYTHON_OUT, parmTau_OUT = theFile.compute_tau(df_SQL_IN, parmMultiplier_IN)
';

DECLARE @theSQLinputScript NVARCHAR(MAX) = N'
SELECT cast(3.14159 as float) AS pi;
';

DECLARE @parmTau_OUT float;

EXEC sp_execute_external_script   
    @language = N'Python'   
    , @script = @thePYTHONscript  
    , @input_data_1 = @theSQLinputScript 
    , @input_data_1_name = N'df_SQL_IN'    
    , @output_data_1_name = N'df_PYTHON_OUT'
    , @parallel = 1  
    , @params = N'@parmMultiplier_IN int, @parmTau_OUT float out'
    , @parmMultiplier_IN = 2
    , @parmTau_OUT = @parmTau_OUT OUT
WITH RESULT SETS ((tau float));

DECLARE @msg varchar(200) = 
   'tau = ' + ISNULL(CAST(@parmTau_OUT as varchar(30)), 'null');

PRINT @msg;


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PYTHON_SQL_MachineLearningServer</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Install_the_PythonSharedComponents_for_MachneLearning_revoscalePY</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PYTHON_SQL_MachineLearningServer</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Install_the_PythonSharedComponents_for_MachneLearning_revoscalePY</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This could have been done when installing the SQL server by choosing the 
	"Shared Features" =&gt; Machine Learning Standalone and Python on the "Feature Selection" window
	
Here it is using the command line on the workstation


1] Mount the SQL install CD
2] Open a command line in the root of the CD:
&gt;setup.exe /QUIET /ACTION="Install" /IAcceptSQLServerLicenseTerms="True" /IAcceptPythonLicenseTerms="True" /FEATURES=SQL_SHARED_AA,SQL_SHARED_MPY

You can see results in the 'Summary.txt' file in this folder on the server:
C:\Program Files\Microsoft SQL Server\150\Setup Bootstrap\Log\

In that folder you can check in the newest folder (e.g. 20210207_145341) and there is a summary file (e.g. Summary_DESKTOP-GFV53FA_20210207_145341.txt)
Look for 'passed' in the 2nd line:

		Overall summary:
 		 Final result:                  Passed
 		 
 It should have installed the Python.exe in here:
 C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQL_2019_DEV\PYTHON_SERVICES
 
 for PyCharm the default interpreter is: 
 	Python 3.9
 	C:\Program Files\Python39\Python.exe
 Change it to:
 	C:\Program Files\Microsoft\ML Server\PYTHON_SERVER
 	or
 	C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQL_2019_DEV\PYTHON_SERVICES
 	
 You can now import revoscalepy, microsoftml, or azureml-model-management-sdk modules.

You can also choose Tools &gt; Python Console to open an interactive window.	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>01_Install_Ruby_on_Rails(v5)_on_Windows</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>01_Install_Ruby_on_Rails(v5)_on_Windows</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01_Install_Ruby_on_Rails(v5)_on_Windows
--------------------------------------
#FROM:  https://www.lynda.com/Ruby-Rails-tutorials/Ruby/500550/564213-4.html
1] Download
	
	# v2.2.2 or newer (e.g. 2.3.1) required for Ruby on Rails 5
	https://rubyinstaller.org/
	Ruby + Devkit 2.5.1-2(x64)
	
	www.ruby-lang.org says: "On Windows machines, you can use RubyInstaller."
	
2] Run the Ruby Installer
	(a)
	Take defaults 
	check: [x] Add Ruby Executable to your PATH	
		   [x] Associate .rb and .rbw files with the Ruby installation
	(b)	   
	#CMD window pops up:
	====================================================================
	 _____       _           _____           _        _ _         ___
	|  __ \     | |         |_   _|         | |      | | |       |__ \
	| |__) |   _| |__  _   _  | |  _ __  ___| |_ __ _| | | ___ _ __ ) |
	|  _  / | | | '_ \| | | | | | | '_ \/ __| __/ _` | | |/ _ \ '__/ /
	| | \ \ |_| | |_) | |_| |_| |_| | | \__ \ || (_| | | |  __/ | / /_
	|_|  \_\__,_|_.__/ \__, |_____|_| |_|___/\__\__,_|_|_|\___|_||____|
	                    __/ |           _
	                   |___/          _|_ _  __   | | o __  _| _     _
	                                   | (_) |    |^| | | |(_|(_)\^/_&gt;
	
	   1 - MSYS2 base installation
	   2 - MSYS2 system update (optional)
	   3 - MSYS2 and MINGW development toolchain
	
	Which components shall be installed? If unsure press ENTER [1,2,3]
	====================================================================
	
	#NOTE: http://mitzen.blogspot.com/2017/08/installing-ruby-24-without-tears-in.html
	I just pressed [Enter]
	#Then I get this after a many minutes and a lot of output
	
	====================================================================
	#This is the DevKit, which is now bundled with the Ruby application, and comes up automatically
	====================================================================
	Install MSYS2 and MINGW development toolchain succeeded

   1 - MSYS2 base installation
   2 - MSYS2 system update (optional)
   3 - MSYS2 and MINGW development toolchain

	Which components shall be installed? If unsure press ENTER []
	====================================================================
	
	I just pressed [Enter]
	#{Then the cmd window closed}
	
	#https://www.lynda.com/Ruby-Rails-tutorials/Ruby/500550/564213-4.html
	#stopped at 5:29 of 2nd video
	#Started back up.
	Reboot so that the PATH variable will be set
	start the CMD
	
	#to test it, get the version
	&gt;ruby -v
	#OUTPUT
	-----------------------------
	ruby 2.5.1p57 (2018-03-29 revision 63029) [x64-mingw32]
	
	#to test execute a command:
	&gt;ruby -e "put 1+1"
	#OUTPUT
	-----------------------------
	2

	========================================================================================================INTERACTIVE	Ruby
	
	#test Interactive Ruby, by typing a command into it
	&gt;irb
	irb(main):001:0&gt; puts 1+1
	
	#OUTPUT
	-----------------------------
	2
	=&gt; nil
	
	#to exit
	irb(main):003:0&gt;quit	
	
	
	#NOTE: it created the application in the folder: C:\Ruby25-x64
	# the existence of this folder tells you that the DevKit has been installed: C:\Ruby25-x64\msys64
	
	========================================================================================================GEMs
	
	#To see the version of Ruby Gem:
	&gt;gem -v
	
	#OUTPUT
	-----------------------------	
	2.7.6
	
	#to get a list of currently installed gems:
	&gt;gem list
	
	#OUTPUT
	-----------------------------		
	*** LOCAL GEMS ***
	
	bigdecimal (default: 1.3.4)
	cmath (default: 1.0.0)
	csv (default: 1.0.0)
	date (default: 1.0.0)
	dbm (default: 1.0.0)
	did_you_mean (1.2.0)
	etc (default: 1.0.0)
	fcntl (default: 1.0.0)
	fiddle (default: 1.0.0)
	fileutils (default: 1.0.2)
	gdbm (default: 2.0.0)
	io-console (default: 0.4.6)
	ipaddr (default: 1.2.0)
	json (default: 2.1.0)
	minitest (5.10.3)
	net-telnet (0.1.1)
	openssl (default: 2.1.0)
	power_assert (1.1.1)
	psych (default: 3.0.2)
	rake (12.3.0)
	rdoc (default: 6.0.1)
	scanf (default: 1.0.0)
	sdbm (default: 1.0.0)
	stringio (default: 0.0.1)
	strscan (default: 1.0.0)
	test-unit (3.2.7)
	webrick (default: 1.4.2)
	xmlrpc (0.3.0)
	zlib (default: 1.0.0)
	

	#To update Ruby Gems
	&gt;gem update --system
	
	========================================================================================================Install: Ruby on Rails (whch is a Ruby Gem)
	#Note it installs both gems and a small program called rails
	
	
	#To Uninstall a gem
	&gt;gem uninstall GEMNAME
	
	#Install Ruby on Rails without wasting space on the documentation
	&gt;gem install rails --version 5.0.0 --no-rdoc --no-ri
	
	&gt;gem list
	
	#OUTPUT - Note there are more gems after rails is installed
	-----------------------------
	*** LOCAL GEMS ***
	
	actioncable (5.2.1, 5.0.0)
	actionmailer (5.2.1, 5.0.0)
	actionpack (5.2.1, 5.0.0)
	actionview (5.2.1, 5.0.0)
	activejob (5.2.1, 5.0.0)
	activemodel (5.2.1, 5.0.0)
	activerecord (5.2.1, 5.0.0)
	activestorage (5.2.1)
	activesupport (5.2.1, 5.0.0)
	arel (9.0.0, 7.1.4)
	bigdecimal (default: 1.3.4)
	builder (3.2.3)
	bundler (default: 1.16.2)
	cmath (default: 1.0.0)
	concurrent-ruby (1.0.5)
	crass (1.0.4)
	csv (default: 1.0.0)
	date (default: 1.0.0)
	dbm (default: 1.0.0)
	did_you_mean (1.2.0)
	erubi (1.7.1)
	erubis (2.7.0)
	etc (default: 1.0.0)
	fcntl (default: 1.0.0)
	fiddle (default: 1.0.0)
	fileutils (default: 1.0.2)
	gdbm (default: 2.0.0)
	globalid (0.4.1)
	i18n (1.1.0, 0.9.5)
	io-console (default: 0.4.6)
	ipaddr (default: 1.2.0)
	json (default: 2.1.0)
	loofah (2.2.2)
	mail (2.7.0)
	marcel (0.3.3)
	method_source (0.9.0)
	mimemagic (0.3.2)
	mini_mime (1.0.1)
	mini_portile2 (2.3.0)
	minitest (5.10.3)
	net-telnet (0.1.1)
	nio4r (2.3.1, 1.2.1)
	nokogiri (1.8.4 x64-mingw32)
	openssl (default: 2.1.0)
	power_assert (1.1.1)
	psych (default: 3.0.2)
	rack (2.0.5)
	rack-test (1.1.0, 0.6.3)
	rails (5.0.0)
	rails-dom-testing (2.0.3)
	rails-html-sanitizer (1.0.4)
	railties (5.2.1, 5.0.0)
	rake (12.3.0)
	rdoc (default: 6.0.1)
	rubygems-update (2.7.7)
	scanf (default: 1.0.0)
	sdbm (default: 1.0.0)
	sprockets (3.7.2)
	sprockets-rails (3.2.1)
	stringio (default: 0.0.1)
	strscan (default: 1.0.0)
	test-unit (3.2.7)
	thor (0.20.0)
	thread_safe (0.3.6)
	tzinfo (1.2.5)
	webrick (default: 1.4.2)
	websocket-driver (0.7.0, 0.6.5)
	websocket-extensions (0.1.3)
	xmlrpc (0.3.0)
	zlib (default: 1.0.0)
	
#To check the rails version (it should be 5.0.0 for the video, but I accidently installed the newest one
#	then tried to uninstall it and just install v 5.0.0 but it appears to be wrong:

	&gt;rails -v
	#OUTPUT
	------------
	Rails 5.2.1</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>04_Create_RubyOnRails_Project_Windows</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>04_Create_RubyOnRails_Project_Windows</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

#In this example, Use folder: C:\DATA\Ruby (on vm_WIN_10_DEV)

Create the empty project
=========================
1] CMD
#	CD to the folder for all the projects: C:\DATA\Ruby
#	Project Name: demo_project, and create the configuration files for working with MySQL
#		by default it would use the sqllite database, but that could be changed later
	&gt; rails new demo_project -d mysql	
2] open the Atom IDE =&gt; File {menu} =&gt; Open Folder
	{chose the folder} C:\DATA\Ruby\demo_project
	{the MVC components live in the "app" folder

Configure the Database, and create the user 
=========================
# use the MySQL command line

# by convention use the same name as the project, as you use for the MySQL database (Stupid idea)
# then append "_development", which is the 'Environment'
# Generally there are 3 environments: development, test, production
--------------------------------------------------------------------------------------------
#create a local user w/ limited access for this database and this Ruby on Rails project, 
#	with password "demo_project_password"  visible, as text
3] #from the MySQL command window

	&gt;CREATE DATABASE demo_project_development;							#create the database
	&gt;create user demo_project_user;										#create the user
	&gt;ALTER USER demo_project_user IDENTIFIED BY 'project_password';		#set the user's password
	&gt;GRANT ALL ON demo_project_development.* TO 'demo_project_user';	#Grant user all privileges on the database
	#then you can quit the MySQL command line
	
	&gt;show databases; 		#to confirm that the database is there
--------------------------------------------------------------------------------------------

4] Configure some things for the project, go into the project using Atom
	=&gt; Config {folder} =&gt; database.yml {file}
	====================================================ORIG
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: root
	  password:
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: demo_project_development	
	====================================================Change it to:
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: demo_project_user
	  password: project_password
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: demo_project_development
	====================================================
	{then save the changes} 	
	
5] #To test that the username and password are working, just run the following command. If it succeeds, that proves that it is 
	#connecting with the credentials	
	#from command line, in the project folder
	&gt;rails db:schema:dump
	#IF there are no Errors, then it is working
	# and you should also see the file: "demo_project {folder} =&gt; db {folder} =&gt; schema.rb {file}
	
6] #Tell Puma to boot up and run the project so that it can respond to HTTP requests
	CMD: CD to the project folder
	&gt; rails server
	#OUTPUT
	#-----------------------------
	C:\DATA\Ruby\demo_project&gt;rails server
	=&gt; Booting Puma
	=&gt; Rails 5.2.1 application starting in development
	=&gt; Run `rails server -h` for more startup options
	*** SIGUSR2 not implemented, signal based restart unavailable!
	*** SIGUSR1 not implemented, signal based restart unavailable!
	*** SIGHUP not implemented, signal based logs reopening unavailable!
	Puma starting in single mode...
	* Version 3.12.0 (ruby 2.5.1-p57), codename: Llamas in Pajamas
	* Min threads: 5, max threads: 5
	* Environment: development
	* Listening on tcp://0.0.0.0:3000
	Use Ctrl-C to stop
	#-------------------------------------------------------------
	#should now be able to browse to it: http://localhost:3000</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_a_Intro</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_a_Intro</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>05_RubyOnRails_EssentialTraining_Lynda.Com_a_Intro
--------------------------------------------------

This Example will be the "simple_cms" project

1]  In folder: C:\DATA\Ruby\ {on vm_WIN_10_DEV}

	#For exercises copy the author's "simple_cms" project folder into my folder. 
	# The author's folder must contain the script: "simple_cms_development.sql" in the 'db' folder

2] When I get to the point where I need to Create database for the project:
--------------------------------------------------------------------------------------------
#create a local user w/ limited access for this database and this Ruby on Rails project, 
#	with password "simple_cms_password"  visible, as text
2a] #from the MySQL command window

	&gt;CREATE DATABASE simple_cms_development;							#create the database
	&gt;create user simple_cms_user;										#create the user
	&gt;ALTER USER simple_cms_user IDENTIFIED BY 'simple_cms_user_password';		#set the user's password
	&gt;GRANT ALL ON simple_cms_development.* TO 'simple_cms_user';	#Grant user all privileges on the database
	#then you can quit the MySQL command line
--------------------------------------------------------------------------------------------
2b] #from CMD use author's script to import the data
	&gt;mysql -u simple_cms_user -p simple_cms_development &lt; db/simple_cms_development.sql
	#NOTE: first edit the script to change the name of the user and the password
	
3] #The first project will not have a database, so just create the project, with the option to use MySQL rather than sqlLite.
	#in CMD cd into the parent folder: C:\DATA\Ruby\
	&gt;rails new simple_cms -d mysql

4] #cd into the new directory: C:\DATA\Ruby\simple_cms
	#start Atom, and have it load the current directory
	&gt; atom .</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_C_Configure_a_Project</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_C_Configure_a_Project</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>05_RubyOnRails_EssentialTraining_Lynda.Com_c_Configure_a_Project
-----------------------------------------------------------------
chap 2 exercise 02_03

#File: Gemfile
---------------
# Once you make any changes in the file and save it, you need to 'bundle' it
# from CMD, located at root of project:
&gt; bundle install
# any time you make changes to the file, you have to repeat this command

#File: config/application.rb
----------------------------
#Usually you will not modify the file, rather you would modify the  config/environments/*, and config/initializers

#Even if a Rails project does not use a database, it has to have one configured before it can get up and running

1] #So start up MySQL from the CMD:
	&gt; mysql -u root -p  #This will challenge us for the password (i.e. Abcd@1234)
	
--------------------------------------------------------------------------------------------
#create a local user w/ limited access for this database and this Ruby on Rails project, 
#	with password "simple_cms_password"  visible, as text
2a] #from the MySQL command window

	#NOTE to show users:
		&gt;select host, user from mysql.user;


	&gt;CREATE DATABASE simple_cms_development;							#create the database
	&gt;create user simple_cms_user;										#create the user
	&gt;ALTER USER simple_cms_user IDENTIFIED BY 'simple_cms_user_password';		#set the user's password
	&gt;GRANT ALL ON simple_cms_development.* TO 'simple_cms_user';	#Grant user all privileges on the database
	#and the Test database for the test project
	&gt;CREATE DATABASE simple_cms_test;							#create the database
	&gt;GRANT ALL ON simple_cms_test.* TO 'simple_cms_user';	#Grant user all privileges on the database
	
	#Exit out of the MySQL application
	&gt;quit
--------------------------------------------------------------------------------------------
	
3] #Configure some things for the project, go into the project using Atom
	=&gt; Config {folder} =&gt; database.yml {file}
	====================================================ORIG
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: root
	  password:
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: simple_cms_development	
	====================================================Change it to:
	default: &amp;default
	  adapter: mysql2
	  encoding: utf8
	  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
	  username: simple_cms_user
	  password: simple_cms_user_password
	  host: localhost
	
	development:
	  &lt;&lt;: *default
	  database: simple_cms_development
	====================================================
	{then save the changes} 
	
4] #To test that the username and password are working, just run the following command. If it succeeds, that proves that it is 
	#connecting with the credentials	
	#from command line, in the project folder
	&gt;rails db:schema:dump
	#IF there are no Errors, then it is working 
	#	if there was an error check to make the username/password is correct
	# and you should also see the file: "demo_project {folder} =&gt; db {folder} =&gt; schema.rb {file}
	
5] #Tell Puma to boot up and run the project so that it can respond to HTTP requests
	CMD: CD to the project folder
	&gt; rails server
	#OUTPUT
	#-----------------------------
	C:\DATA\Ruby\simple_cms&gt;rails server
	=&gt; Booting Puma
	=&gt; Rails 5.2.1 application starting in development
	=&gt; Run `rails server -h` for more startup options
	*** SIGUSR2 not implemented, signal based restart unavailable!
	*** SIGUSR1 not implemented, signal based restart unavailable!
	*** SIGHUP not implemented, signal based logs reopening unavailable!
	Puma starting in single mode...
	* Version 3.12.0 (ruby 2.5.1-p57), codename: Llamas in Pajamas
	* Min threads: 5, max threads: 5
	* Environment: development
	* Listening on tcp://0.0.0.0:3000
	Use Ctrl-C to stop
	#-------------------------------------------------------------
	#should now be able to browse to it: http://localhost:3000

	Cntrl-C 	#{To stop the web server}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_d_Start_Stop_webServer</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_d_Start_Stop_webServer</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>05_RubyOnRails_EssentialTraining_Lynda.Com_d_Start_Stop_webServer
------------------------------------------------------------------

http://localhost:3000

#Tell Puma to boot up and run the project so that it can respond to HTTP requests
	CMD: CD to the project folder
	&gt; rails server
	#OUTPUT
	#-----------------------------
	C:\DATA\Ruby\simple_cms&gt;rails server
	=&gt; Booting Puma
	=&gt; Rails 5.2.1 application starting in development
	=&gt; Run `rails server -h` for more startup options
	*** SIGUSR2 not implemented, signal based restart unavailable!
	*** SIGUSR1 not implemented, signal based restart unavailable!
	*** SIGHUP not implemented, signal based logs reopening unavailable!
	Puma starting in single mode...
	* Version 3.12.0 (ruby 2.5.1-p57), codename: Llamas in Pajamas
	* Min threads: 5, max threads: 5
	* Environment: development
	* Listening on tcp://0.0.0.0:3000
	Use Ctrl-C to stop
	#-------------------------------------------------------------
	#should now be able to browse to it: http://localhost:3000
	# You need to leave the CMD window open, b/c it is the webserver

	Cntrl-C 	#{To stop the web server}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_e_Create_Controller_and_View</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_e_Create_Controller_and_View</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>05_RubyOnRails_EssentialTraining_Lynda.Com_e_Create_Controller_and_View
--------------------------------------------------------------------------

1] CMD # in the root of the application

	#Create a controler named 'demo' with an action named 'index' (i.e. a view)
	C:\DATA\Ruby\simple_cms&gt; rails generate controller demo index
	#OUTPUT
	-------------------------------------------
      create  app/controllers/demo_controller.rb
       route  get 'demo/index'
      invoke  erb
      create    app/views/demo
      create    app/views/demo/index.html.erb
      invoke  test_unit
      create    test/controllers/demo_controller_test.rb
      invoke  helper
      create    app/helpers/demo_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/demo.coffee
      invoke    scss
      create      app/assets/stylesheets/demo.scss	
	-------------------------------------------
	
	#This is the code create in the file: app/controllers/demo_controller.rb
	-------------------------------------
		class DemoController &lt; ApplicationController
		  def index
		  end
		end	
	#For now modify it so that it does not create a 'layout'
	-------------------------------------
		class DemoController &lt; ApplicationController	#Class DemoController inherits from ApplicationController
		
		  layout false									#Don't create a layout		  
		  def index										#Method: index, when a method is in a controller it is an 'Action', 
		  												#			and it renders a 'View', as well as a default 'view layout'.
		  end
		end		
	
	#Save and close the Controller
	
	# it created: app/views/demo/index.html.erb
	#			  The folder name (demo) corresponds to the controller name
	#			  The view template name corresponds to our action (index)
	-------------------------------------
	&lt;h1&gt;Demo#index&lt;/h1&gt;
	&lt;p&gt;Find me in app/views/demo/index.html.erb&lt;/p&gt;	
	-------------------------------------
	#Modify it:
	-------------------------------------
	&lt;h1&gt;Hello World!&lt;/h1&gt;	
	-------------------------------------	
	
	#Also the output when we created the controller said: "route  get 'demo/index'"
	# there is a file at the location: /config/routes.rb
	-------------------------------------------------------
	Rails.application.routes.draw do
	  get 'demo/index'
	  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
	end
	--------------------------------------------------------
	
	
	
	
	
	
	
	
	
	
	
=============================================================================	
#This is the help for the rails GENERATE 	
&gt;rails g
#OUTPUT
---------------------------------------------------
Usage: rails generate GENERATOR [args] [options]

General options:
  -h, [--help]     # Print generator's options and usage
  -p, [--pretend]  # Run but do not make any changes
  -f, [--force]    # Overwrite files that already exist
  -s, [--skip]     # Skip files that already exist
  -q, [--quiet]    # Suppress status output

Please choose a generator below.

Rails:
  application_record
  assets
  channel
  controller
  generator
  helper
  integration_test
  jbuilder
  job
  mailer
  migration
  model
  resource
  scaffold
  scaffold_controller
  system_test
  task

ActiveRecord:
  active_record:application_record

Coffee:
  coffee:assets

Js:
  js:assets

TestUnit:
  test_unit:generator
  test_unit:plugin</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>RUBY_Misc</Category>
        <Language>PYTHON</Language>
        <Public>false</Public>
        <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_f_Rails_Architecture</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>RUBY_Misc</Category>
          <Language>PYTHON</Language>
          <Public>false</Public>
          <Name>05_RubyOnRails_EssentialTraining_Lynda.Com_f_Rails_Architecture</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] public #folder in root
		  #you can put static HTML files in there, so that a URL for static html page will find it
		  #That does not mean you should put static pages there.
		  
		  # /public is the firt place the Web Server looks (for exact match to a page specified in the URL)
		  # in Rails, if the Web Server does not find the requested page in '/public' it then goes to the MVC Rails Framework
		  #Puma knows that the folder /public is the default path for requests,
		  #	BUT, in production you will have to specify that default path in the 'routes'
		  
		  #If you were to place a page (static_page.html) in the public folder then you would request it like this:
		  http://localhost:3000/static_page.html
		  
		  #If you were to first create a 'demo' folder in /public folder and  place a page (static_page.html) in the public folder then you would request it like this:
		  http://localhost:3000/demo/static_page.html
		  #BUT if you used this URL
		  http://localhost:3000/demo/index
		  #that would go to the Controller (named 'demo') and the view (named 'index')
		  
		  #Then if you rename the 'static_page.html' page to be just 'index'
		  #and then if you used this URL
		  http://localhost:3000/demo/index	
		  # you would go to the static html page, b/c it's name matches the URL
		  
2] Route Types	
		
		  # types of routes
		  Simple route
		  				#example
		  				get 'demo/index'
		  				
		  				#which is Equivalent to:
		  				match "demo/index", :to =&gt; "demo#index",
		  				  :via =&gt; :get
		  Default route 
		  				#this type may go away in future versions of Rails
		  				#syntax
		  				:controller/:action/:id
		  				
		  				#example
		  				get ':controller(/:action(/:id))'
		  				
		  				#which is Equivalent to:
		  				match ':controller(/:action(/:id))',		# the '(' are for optional parts
		  				  :via =&gt; :get
		  
		  Root route
		  				#route to the homepage of web site
		  				
		  				#short version
		  				root "demo#index"
		  				
		  				#could write it with long syntax
		  				match "/", :to =&gt; "demo#index", :via =&gt; :get
		  
		  Resourceful route</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_OVER</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ROW_NUMBER_to_get_just_FIRST_row_using_CTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_OVER</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ROW_NUMBER_to_get_just_FIRST_row_using_CTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- Use ROW_NUMBER to get rid of duplicate rows

WITH CTE_One (RowNumber, ISOLATOR, Training_Description, Reminder_Type, Folder, Cost_Code, ClassCatagories)
AS
	(
		--==============================================NOTE: needed to ORDER BY something even if it is meaningless
		SELECT ROW_NUMBER() OVER(PARTITION BY [FIELD3] ORDER BY [CODE]) as RowNumber, --&lt;==== ROW_NUMBER
			   [ISOLATOR]								
			  ,[CODE] as [Training_Description]		
			  ,[FIELD1] as [Reminder_Type]			 
			  ,[FIELD2] as [Folder]					
			  ,[FIELD3] as [Cost_Code]				
				-------
				,(SELECT     'TheCalculation' = 
						CASE 
								WHEN (SUBSTRING([FIELD3],1,2)='CE')  THEN '(CE) Continuing Education'
								WHEN (SUBSTRING([FIELD3],1,2)='CT')  THEN '(CT) Computer'
								WHEN (SUBSTRING([FIELD3],1,2)='DS')  THEN '(DS) Division Specific'          		 
						ELSE 'unCategorized: ' + [FIELD3]

							END) as ClassCatagories								
				----------	      
		  FROM [barriere].[dbo].[SCD_SYSTEMCODES]
		  Where ISOLATOR = 'ht' 
		--===============================================
	)
	
-- NOTE: The field 'RowNumber' was not available inside the CTE, so got it in this next step:

SELECT ISOLATOR, Training_Description, Reminder_Type, Folder, Cost_Code, ClassCatagories
FROM CTE_One
WHERE RowNumber=1	--&lt;== This just leaves the first row
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SharePoint</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>ownload multiple files from SharePoint to my C drive</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SharePoint</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>ownload multiple files from SharePoint to my C drive</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://sharepoint.stackexchange.com/questions/179888/unable-to-download-multiple-files-from-sharepoint-to-my-c-drive

-------------------------
The only way that normal user can download multiple files from SP interface is through "Open With Explorer" in IE. 
	However, there's another backdoor way that user can map the library to disk that will open SharePoint Library as open a folder.

Click Computer &gt; Map network drive &gt; Connect to a website &gt; Choose a network location, then paste the library URL.

Be aware of that since you can see the backdoor of SharePoint, don't delete any folders. Otherwise, that can cause serious consequence.
-----------------------------
The only way you can download multiple files from SharePoint is by using "Open With Explorer" and it only works in IE.

List Navigate to the document library you want to download files
Click The Library option (from the ribbon)
Click on Open With Explorer
Wait couple of seconds (sometimes, it takes up to 10 secs or so to open the Windows explorer)
Once Windows Explorer open, you can select one or more files to copy to your local drive</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SOMEE.COM</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>How to Deploy an ASP.NET MVC 4 Application to a FREE Web Host </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SOMEE.COM</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>How to Deploy an ASP.NET MVC 4 Application to a FREE Web Host </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://themvcclub.blogspot.com/2014/06/how-to-deploy-asp-net-mvc-FREE-Web-Host.html

good pictoral  guide



1] Minimal site with no Database
=================================
a) create a folder in the filemanager and name it 'MVC_App_1'
	Then go into the "Applications' node and make that folder an 'application'
b) In the root folder of the project there were three things:
	i) MVC_App_1 {Folder with all the project files}
	ii) packages {another folder with the files for all the packages in the project}
	iii) MVC_App_1.sln {VS 2013 Solution file}
	
	 Zip up the first folder, and named it: "MVC_App_1.zip"
	 
c) in the User Menu =&gt; Managed Products =&gt; Websites =&gt; cmzandgig.somee.com =&gt; File manager
	=&gt; MVC_App_1 {folder} =&gt; Upload {menu item} =&gt; [Browse]
	
	{browsed and located the zip file: MVC_App_1.zip}
	click 'Upload and Unzip archives' link
	
	{This puts the folder 'MVC_App_1' and it's contents inside the root directory
		of the MVC_App_1 application folder.}
	
	Select all the files in the folder =&gt; click 'Cut' in the menu
	Click 'Up' in the Menu, then click 'Paste'
	
	You should now be able to browse to that MVC application Web: http://cmzandgig.somee.com/MVC_App_1/</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SOMEE.COM</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MVC4 site publish to Somee</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SOMEE.COM</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MVC4 site publish to Somee</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://stackoverflow.com/questions/23139910/mvc4-site-publish-to-somee

As @Ehsan Sajjad said there was a problem with the FTP. Site path is required in Somee.

Here is the way to configure the publish tool under the connection section:

Publish method: FTP
Server: ftp://[YOUR USERNAME].somee.com
Site path: /www.[YOUR USERNAME].somee.com/ 
Passive mode: Checked 
User name: [YOUR USERNAME] 
Password: [YOUR PASSWORD] 

You may try other alternative to upload your files, please just download Filezilla tools and then please upload it to your root folder


========================================================================================

Publish method: FTP
Server:  ftp://domain.somee.com						{ FiveHappiness.somee.com }
Site path: Protected.domain.somee.com
Passive mode: Checked 
User name: [YOUR USERNAME] 
Password: [YOUR PASSWORD] 

As I publish above and i succeeded..
======================================================================================

or site path: www. your domain.somee.com –  Tarık Eren Tan Nov 1 '14 at 23:53
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSMS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Execution Plans</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSMS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Execution Plans</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Thick/Thin lines
==================
One important thing arrows determine, via their thickness, is the amount of data being transferred from one operator to another. 
The thicker an arrow is, the more data is getting transfered.
Based on the number of rows, not on the size of data on disc
	As an example, 100 rows of bits will result in a thicker arrow than 5 rows each of which is 5000 bits.


FREE TOOL:
--------------
Installed .NET Framework 4.7.1, and saved download to VM share folder
	from:
		https://www.microsoft.com/en-us/download/confirmation.aspx?id=56116
Sentry One – SQL Server Query Tuning
	https://www.sentryone.com/plan-explorer
	video: https://www.youtube.com/watch?v=GeH2E_BUPq8&amp;feature=youtu.be
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_SSRS_Logging___VIEW</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_SSRS_Logging___VIEW</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>01_SSRS_Logging___VIEW

-- prj_8017_vw_501_ExecutionLog3_Modified_1.sql
/*
FROM: http://www.mssqltips.com/sqlservertip/2722/sql-server-report-server-2008-r2-execution-log-reports/

*/
use ReportServer
go


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vw_ExecutionLog3_Modified_1]
AS

SELECT 
EL.InstanceName, 
COALESCE(C.Path, 'Unknown') AS ItemPath, 
EL.UserName,
EL.ExecutionId, 
CASE(EL.RequestType)
  WHEN 0 THEN 'Interactive'
  WHEN 1 THEN 'Subscription'
  WHEN 2 THEN 'Refresh Cache'
  ELSE 'Unknown'
END AS RequestType, 
-- SubscriptionId, 
EL.Format, 
Parameters, 
CASE(EL.ReportAction) 
  WHEN 1 THEN 'Render'
  WHEN 2 THEN 'BookmarkNavigation'
  WHEN 3 THEN 'DocumentMapNavigation'
  WHEN 4 THEN 'DrillThrough'
  WHEN 5 THEN 'FindString'
  WHEN 6 THEN 'GetDocumentMap'
  WHEN 7 THEN 'Toggle'
  WHEN 8 THEN 'Sort'
  WHEN 9 THEN 'Execute'
  ELSE 'Unknown'
END AS ItemAction,
EL.TimeStart, 
YEAR(EL.TimeStart) AS Start_Year,
MONTH(EL.TimeStart) AS Start_Month,
DATENAME(MONTH,EL.TimeStart) AS Start_Month_Name,
DATENAME(DW,EL.TimeStart) AS Start_Day_Of_Week,
DATEPART(WEEKDAY,EL.TimeStart) AS Start_Day_Number_of_Week,
EL.TimeEnd, 
EL.TimeDataRetrieval, 
EL.TimeProcessing, 
EL.TimeRendering,
CASE(EL.Source)
  WHEN 1 THEN 'Live'
  WHEN 2 THEN 'Cache'
  WHEN 3 THEN 'Snapshot' 
  WHEN 4 THEN 'History' 
  WHEN 5 THEN 'AdHoc'
  WHEN 6 THEN 'Session'
  WHEN 7 THEN 'Rdce'
  ELSE 'Unknown'
END AS Source,
EL.Status,
EL.ByteCount,
EL.[RowCount],
EL.AdditionalInfo,
C.Name,
C.CreatedByID,
C.ModifiedByID,
C.Description,
C.CreationDate,
C.ModifiedDate,
CASE 
  WHEN C.TYPE=1 THEN 'Folder'
  WHEN C.TYPE=2 THEN 'Report'  
  WHEN C.TYPE=3 THEN 'XML' 
  WHEN C.TYPE=4 THEN 'Linked Report'
  WHEN C.TYPE=5 THEN 'Data Source'
  WHEN C.TYPE=6 THEN 'Model'
  WHEN C.TYPE=8 THEN 'Shared Dataset'
  WHEN C.TYPE=9 THEN 'Report Part'
END AS Type_Description  
FROM 
  ExecutionLogStorage AS EL
  LEFT OUTER JOIN Catalog AS C ON (EL.ReportID = C.ItemID)

--ORDER BY TimeStart DESC
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Get_user_Permissions_for_Reports_and_Folders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Get_user_Permissions_for_Reports_and_Folders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
use ReportServer
go

SELECT
    R.RoleName,
    U.UserName,
    C.Path
FROM
    ReportServer.dbo.Catalog C WITH (NOLOCK)    --Parent
    JOIN
    ReportServer.dbo.Policies P WITH (NOLOCK) ON C.PolicyID = P.PolicyID
    JOIN
    ReportServer.dbo.PolicyUserRole PUR WITH (NOLOCK) ON P.PolicyID = PUR.PolicyID 
    JOIN
    ReportServer.dbo.Users U WITH (NOLOCK) ON PUR.UserID = U.UserID 
    JOIN
    ReportServer.dbo.Roles R WITH (NOLOCK) ON PUR.RoleID = R.RoleID
WHERE
    C.Type = 2		--1:Folder
Order by Path


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


USE ReportServer
GO
SELECT CASE
         WHEN C.Path = '' THEN 'Home'
         ELSE C.Path
       END    AS Path,
       C.Name AS ItemName,
       USR.UserName,
       RL.RoleName,
       CASE
         WHEN C.TYPE = 1 THEN 'Folder'
         WHEN C.TYPE = 2 THEN 'Report'
         WHEN C.TYPE = 3 THEN 'File'
         WHEN C.TYPE = 4 THEN 'LinkedReport'
         WHEN C.TYPE = 5 THEN 'DataSource'
         WHEN C.TYPE = 6 THEN 'Model'
         WHEN C.TYPE = 7 THEN 'ReportPart'
         WHEN C.TYPE = 8 THEN 'SharedDataset'
       END    AS ItemType FROM   Catalog C
       INNER JOIN Policies PL
               ON C.PolicyID = PL.PolicyID
       INNER JOIN PolicyUserRole PUR
               ON PUR.PolicyID = PL.PolicyID
       INNER JOIN Users USR
               ON PUR.UserID = USR.UserID
       INNER JOIN dbo.Roles RL
               ON RL.RoleID = PUR.RoleID
ORDER  BY C.Path </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>List_Linked_Reports_and_other_types_of_objects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>List_Linked_Reports_and_other_types_of_objects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE ReportServer
GO
SELECT DISTINCT
	  CASE
         WHEN C.Path = '' THEN 'Home'
         ELSE C.Path
       END    AS Path,
       C.Name AS ItemName 

       --CASE
       --  WHEN C.TYPE = 1 THEN 'Folder'
       --  WHEN C.TYPE = 2 THEN 'Report'
       --  WHEN C.TYPE = 3 THEN 'File'
       --  WHEN C.TYPE = 4 THEN 'LinkedReport'
       --  WHEN C.TYPE = 5 THEN 'DataSource'
       --  WHEN C.TYPE = 6 THEN 'Model'
       --  WHEN C.TYPE = 7 THEN 'ReportPart'
       --  WHEN C.TYPE = 8 THEN 'SharedDataset'
       --END    AS ItemType 

FROM   Catalog C

WHERE C.TYPE = 4			--&lt;====== Here is where the type goes
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SSRS_Table_info</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SSRS_Table_info</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
from: http://sornanara.blogspot.com/2011/05/ssrs-reportserver-database-tables.html 
Part I, II, II
/*
Let us take a look at below 3 tables.

                                              1. Catalog
                                              2. DataSource
                                              3. DataSets

Catalog

Stores the master data about all the objects related to SSRS listed below 
  
1 = Folder
2 = Report (.rdl)
3 = .XML 
4 = Link Report 
5 = Data Source (.rds) 
6 = Model 
8 = Shared Dataset
9 = Report Part 

This is the base master table where all the objects related to the SSRS is stored.

Some important fields
Parentid   - Under which object this object is present.
Type         - Type of the object as metioned above.
Content    - Has the report xml stored in varbinary format.
Properties - Has the XML with the properties of the object.
Parameter - Has the XML with parameters used in the reports.

  
DataSource
Stores the list of shared and embedded data sources available.

Some important fields
ItemId - Reference to the catalog table
Link     - Reference to the Report to which this datasource is linked.

  
DataSets
Stores the list of the shared datasets available. 

Some important fields
ItemId - Reference to the catalog table.
LinkId  - Reference to the Report to which this datasource is linked.
Name   - DataSet Name in the report.

Sample usage queries

1. To View the Report code in XML format from content field in Catalog Table
*/

SELECT  Name,Convert(XML,(Convert(VARBINARY(MAX),Content))) AS ReportXML
  FROM  ReportServer.dbo.Catalog
 WHERE  Content IS NOT NULL
   AND  [Type] = 2 -- For Report objects alone
   
--2. Get the Report's Created/Modified User and Created/Modified Dates.

SELECT Name
      ,CreatedBy = U.UserName
      ,CreationDate = C.CreationDate
      ,ModifiedBy = UM.UserName
      ,ModifiedDate
  FROM Reportserver.dbo.Catalog C
  JOIN Reportserver.dbo.Users U
    ON C.CreatedByID = U.UserID
  JOIN Reportserver.dbo.Users UM
    ON c.ModifiedByID = UM.UserID
 WHERE Name = 'ReportName'

--3. Get the List of Report Parameters for the given Report

SELECT  Name = Paravalue.value('Name[1]', 'VARCHAR(250)')
       ,Type = Paravalue.value('Type[1]', 'VARCHAR(250)')
       ,Nullable = Paravalue.value('Nullable[1]', 'VARCHAR(250)')
       ,AllowBlank = Paravalue.value('AllowBlank[1]', 'VARCHAR(250)')
       ,MultiValue = Paravalue.value('MultiValue[1]', 'VARCHAR(250)')
       ,UsedInQuery = Paravalue.value('UsedInQuery[1]', 'VARCHAR(250)')
       ,Prompt = Paravalue.value('Prompt[1]', 'VARCHAR(250)')
       ,DynamicPrompt = Paravalue.value('DynamicPrompt[1]', 'VARCHAR(250)')
       ,PromptUser = Paravalue.value('PromptUser[1]', 'VARCHAR(250)')
       ,State = Paravalue.value('State[1]', 'VARCHAR(250)')
 FROM (
     SELECT C.Name,CONVERT(XML,C.Parameter) AS ParameterXML
       FROM  ReportServer.dbo.Catalog C
      WHERE  C.Content is not null
        AND  C.Type  = 2
        AND  C.Name  =  'ReportName'
    ) a
CROSS APPLY ParameterXML.nodes('//Parameters/Parameter') p ( Paravalue )

--4. Get the Data Sources used in the Report
--Note : The XML Schema used here is for SQL 2011. You need to change it to make it work for other versions. To see the schema use the first query in the samples list.

WITH XMLNAMESPACES ( DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition', 'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner' AS rd )
SELECT  ReportName     = name
       ,DataSourceName   = x.value('(@Name)[1]', 'VARCHAR(250)')
       ,DataProvider   = x.value('(ConnectionProperties/DataProvider)[1]','VARCHAR(250)')
       ,ConnectionString = x.value('(ConnectionProperties/ConnectString)[1]','VARCHAR(250)')
  FROM (  SELECT C.Name,CONVERT(XML,CONVERT(VARBINARY(MAX),C.Content)) AS reportXML
           FROM  ReportServer.dbo.Catalog C
          WHERE  C.Content is not null
            AND  C.Type  = 2
      AND  C.Name  = 'ReportName'
        ) a
  CROSS APPLY reportXML.nodes('/Report/DataSources/DataSource') r ( x )
 ORDER BY name ;

--5. Get the Data Sets used in the Report.
--Note : The XML Schema used here is for SQL 2011. You need to change it to make it work for other versions. To see the schema use the first query in the samples list.

WITH XMLNAMESPACES ( DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition', 'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner' AS rd )
SELECT  ReportName    = name
       ,DataSetName    = x.value('(@Name)[1]', 'VARCHAR(250)')
       ,DataSourceName  = x.value('(Query/DataSourceName)[1]','VARCHAR(250)')
       ,CommandText    = x.value('(Query/CommandText)[1]','VARCHAR(250)')
       ,Fields      = df.value('(@Name)[1]','VARCHAR(250)')
       ,DataField    = df.value('(DataField)[1]','VARCHAR(250)')
       ,DataType    = df.value('(rd:TypeName)[1]','VARCHAR(250)')
  FROM (  SELECT C.Name,CONVERT(XML,CONVERT(VARBINARY(MAX),C.Content)) AS reportXML
           FROM  ReportServer.dbo.Catalog C
          WHERE  C.Content is not null
            AND  C.Type = 2
         AND  C.Name = 'ReportName'
     ) a
  CROSS APPLY reportXML.nodes('/Report/DataSets/DataSet') r ( x )
  CROSS APPLY x.nodes('Fields/Field') f(df)
ORDER BY name
--6. Get the list of Data Sources used by Reports using DataSources Table.

SELECT D.Name
       ,'Using Report '
      = CASE
        WHEN D.Name IS NOT NULL THEN  C.Name
        ELSE 'Shared Data Source'
        END
      ,'IsSharedDataSource' = CLink.Name
     FROM DataSource D
     JOIN Catalog C
     ON D.ItemID = C.ItemID
LEFT JOIN Catalog CLink
     ON Clink.ItemID = D.Link
  WHERE C.Name = 'ReportName'   

/*  
Today let us look into the below tables

1. Subscription
2. Schedule
3. ReportSchedule
4. ActiveSubscription
5. Notifications
6. Event
7. Batch

Subscription

This table stores the subscriptions created by the user.

Some important fields

Description           - Name or detail of the subscription
Laststatus             - Last status of message of the subscription
Eventype              - Event type which has used the subscription
Parameters           - XML value with the parameters used while running the subscription
DeliveryExtension - The extension to which the report is delivered

Schedule

Stores the details of the schedules like shared schedules , TimedSubscription , ReportHistorySchedule

Some important fields

Name                    - Schedule Name
StartDate              - Schedule StartDate
NextRunTime       - Next run time for the schedule
LastRunTime        - Last Run time of the schedule
Endate                 - The end date for the schedule
State                    - State of the Subscription. If state &gt; 2 , the subscription is expired i.e, endate has crossed.
RecurrenceType   - Stores the recurrencetype of the schedule
                              1 - Once
                              2 - Hourly 
                              4 - Daily / Weekly
                              6 - Monthly
EventType           - Stores the eventtype 
                              SharedSchedule - Shared schedule
                              TimedSubscription - Schedule created within the subscription
                              RefreshCache - Schedule created for refreshing the cache.

ReportSchedule

Stores the mapping between Schedule , Report &amp; Subscription.

ActiveSubscriptions

Stores the subscription notification consolidated results.

Notifications

Stores the notification sent by the subscriptions.

Event

Internal Table. When the scheduled time comes for a scheduler , the SQL Server Agent generates an event by executing the scheduled job. The job inserts a row in the Event table of the ReportServer database. This row serves as an event for the Scheduling and Delivery Processor. The event record will be deleted after the process.

Batch

Internal Table. One event will be assigned as batches and processed. The batch record also will be deleted after process.

Sample usage queries

1. Get the Schedule List with type and Recurrence	*/

SELECT Name
    ,StartDate
    ,EndDate
    ,NextRunTime
    ,LastRunTime
    ,LastRunStatus
    ,RecurrenceType = CASE RecurrenceType
            WHEN  1 THEN 'Once'
            WHEN  2 THEN 'Hourly '
            WHEN  4 THEN 'Daily / Weekly'
            WHEN  6 THEN 'Monthly'
            End
   ,EventType
FROM Schedule

--2. Query to get the list of Subscription and it's schedule for a given report

SELECT Reportname = c.Name
      ,SubscriptionDesc=su.Description
      ,Subscriptiontype=su.EventType
      ,su.LastStatus
      ,su.LastRunTime
      ,su.Parameters
      ,Schedulename=sch.Name
      ,sch.Type
      ,sch.EventType
  FROM Subscriptions su
  JOIN Catalog c
    ON su.Report_OID = c.ItemID
  JOIN ReportSchedule rsc
    ON rsc.ReportID = c.ItemID
   AND rsc.SubscriptionID = su.SubscriptionID
  JOIN Schedule Sch
    ON rsc.ScheduleID = sch.ScheduleID
 WHERE c.Name = '@ReportName'

--3. Query to get the notification details sent for the given report

SELECT C.Name
      ,S.Description
      ,N.NotificationEntered
      ,A.TotalNotifications
      ,A.TotalSuccesses
      ,A.TotalFailures
  FROM Notifications N
  JOIN ActiveSubscriptions A
    ON N.SubscriptionID = A.SubscriptionID
   AND N.ActivationID = A.ActiveID
  JOIN Catalog C
    ON C.ItemID = N.ReportID
  JOIN Subscriptions S
    ON S.SubscriptionID = N.SubscriptionID
 WHERE c.Name = '@ReportName'  
 
 /*
 SSRS - Reportserver Database Tables Explored - Part 3
Today let us take look into the security related below tables

1. Users
2. Policies
3. Roles
4. PolicyRole
5. CachePolicy
6. SecData
7. ModelItemPolicy 
  
Users 

Stores the list of users 

Some important fields
Usertype - Stores User type 
                 0 – system defined
                 1 – User Defined

Policies

Stores a one policy per userdefined object created. If policy flag is 1 , that is system defined policy for the system administrators.

The policyId created will be mapped to each userdefined object in catalog table.

Roles

Stores the Roles related to the Reports. Presently available roles are

Browser	May view folders, reports and subscribe to reports.
Content Manager	May manage content in the Report Server. This includes folders, reports and resources.
Model Item Browser	Allows users to view model items in a particular model.
My Reports	May publish reports and linked reports; manage folders, reports and resources in a users My Reports folder.
Publisher	May publish reports and linked reports to the Report Server.
Report
Builder	May view report definitions.
System Administrator	View and modify system role assignments, system role definitions, system properties,and shared schedules.
System User	View system properties, shared schedules, and allow use of Report Builder or other clients that execute report definitions.

PolicyRole

This stores the mapping between the User , Role and policy of a catalog object.

CachePolicy

Stores the cache details in processing options section of reports. If you select donot cache option no records will be inserted in this table.

SecData

Stores the total permission for the reports and other objects in XML format .

ModelItemPolicy

This table stores the data of the access provided at the modelitem level in ModelItemSecurity tab under the Manage model.

Sample usage queries

1. Get the users and their roles mapped for the reports	*/

SELECT c.name,
       u.username,
       u.authtype,
       r.rolename,
       r.DESCRIPTION
 FROM users u
 JOIN policyuserrole pur
   ON u.userid = pur.userid
 JOIN policies p
   ON p.policyid = pur.policyid
 JOIN roles r
   ON r.roleid = pur.roleid
 JOIN catalog c
   ON c.policyid = p.policyid
WHERE c.TYPE = 2 -- For Reports Only
ORDER BY name,username 

--2. Get the Cache Policy for the Reports

SELECT c.name,
       cp.cacheexpiration,
       cp.expirationflags
 FROM  cachepolicy cp
 JOIN  catalog c
   ON  c.itemid = cp.reportid

--3. Get the Security Details XML from SecData Table

 SELECT c.name,
       CONVERT(XML, sec.xmldescription)
  FROM catalog c
  JOIN secdata sec
    ON c.policyid = sec.policyid
 WHERE c.TYPE = 2 

--4. Get the Model Item's User and Role

SELECT c.name,
       mip.modelitemid,
       u.username,
       r.rolename
  FROM catalog c
  JOIN modelitempolicy mip
    ON c.itemid = mip.catalogitemid
  JOIN policies p
    ON p.policyid = mip.policyid
  JOIN policyuserrole pur
    ON p.policyid = pur.policyid
  JOIN users u
    ON u.userid = pur.userid
  JOIN roles r
    ON r.roleid = pur.roleid 
    
/*
SSRS - Reportserver Database Tables Explored - Part 4
In this post of this series let us take a look into the below tables

1.SnapshotData
2.History
3.ExecutionLogStorage
4.ModelDrill
5.ModelPerspective

SnapshotData

Stores the configuration of the snapshot for the report.

History

Has the history of snapshot of reports with the parameters and other details.

ExecutionLogStorage

Has the execution log for each and every report launched in the reporting server. This table data is help full for performance tuning the report.
Some Important Fields
Parameters	Parameters passed for the report
TimeStart	Start time
TimeEnd	End time
TimeDataRetrieval	Total Reporting time = Timeprocessing + TimeRendering
TimeProcessing	Time taken to retrieve the data from database
TimeRendering	Time taken for rendering the report
Status	Status success or failure

ModelDrill

Stores the details of the custom click through report configured for the model items. This can be set up on ModelsàManage à Click through.

ModelPerspective

Stores the name and the perspectives list created with in the model. A perspective can be created in BIDS by rightclick on Model àNew à Perspective. 

This is similar to SSAS perspective to group the attributes. 

Sample usage queries 
  
1. Get the details of the history pf the snapshot with report name and schedule used to create the snapshot */


SELECT c.name,
       h.snapshotdate,
       s.DESCRIPTION,
       s.effectiveparams,
       s.queryparams,
       sc.name,
       sc.nextruntime
  FROM history h
  JOIN snapshotdata s
    ON h.snapshotdataid = s.snapshotdataid
  JOIN catalog c
    ON c.itemid = h.reportid
  JOIN reportschedule rs
    ON rs.reportid = h.reportid
  JOIN schedule sc
    ON sc.scheduleid = rs.scheduleid
 WHERE rs.reportaction = 2 -- Create schedule

--2. Get the execution details of a given report with the details like User executing the report , Execution time etc

SELECT c.name,
       CASE e.requesttype
       WHEN 1 THEN 'Subscription'
       WHEN 0 THEN 'Report Launch'
       ELSE ''
       END,
       e.*
  FROM executionlog e
  JOIN catalog c
    ON e.reportid = c.itemid
 WHERE c.name = N'@Reportname'     
/*
SSRS - Reportserver Database Tables Explored - Part 5 (Final)
In this last post of this series let us look into the below tables.All the below tables are SSRS internal tables which used by the Report Server to stores values needed for it's execution and other operations 

1.ConfigurationInfo
2.RunningJobs
3.Keys
4.UpgradeInfo
5.ServerUpgradeHistory
6.DBUpgradeHistory
7.ChunkData
8.ChunkSegmentMapping
9.Segment
10.SegmentedChunk
11.ServerParametersInstance
12.SubscriptionsBeingDeleted

ConfigurationInfo

Has server level configuration info like “EnableRemoteErrors” . If this set to true it will give detailed error from SSRS. This table can be manually updated.

RunningJobs

Internal Table : This stores the jobs currently which is associated with scheduling , snapshot etc

Keys

Internal Table. Has the details about the installation , symmetric encryption key and scale out option keys.

UpgradeInfo

Internal Table. Has the items and status for the items to be taken care during the server upgrade.

ServerUpgradeHistory

Internal Table. Has the details of the previous server version and current server versions in case of upgrades.

DBUpgradeHistory

Internal Table. Has the Database upgrade history for the DB upgrade.

ChunkData

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

ChunkSegmentMapping

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

Segment

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

SegmentedChunk

Internal Table : Used for storing the data while delivering the reports using Deliver extensions

ServerParametersInstance

Internal Table.

SubscriptionsBeingDeleted

Internal Table.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Config_Files</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Config_Files</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Find the configuration file you want to edit:

RSReportServer.config is located in the 
	\Program Files\Microsoft SQL Server\MSSQL.n\Reporting Services\ReportServer folder.
RSReportServerServices.exe.config is located in the 
	\Reporting Services\Report Server\Bin folder.
RSReportDesigner.config is located in the 
	\Program Files\Microsoft Visual Studio 8\Common7\IDE\PrivateAssemblies folder.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Deploy_SSRS_FirstReport</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Deploy_SSRS_FirstReport</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Example:

Deploy (Simple) Report to Web using Report Designer (Ch 10)
Right Click on the Project in the Solution Explorer =&gt; Properties =&gt; CRM_Practices_1 Property Pages {window}
TargetDataSourceFolder
	CRM\DataSources
TargetReportFolder:
	CRM
TargetServerURL:
	http://SQL-SERVER/ReportServer
[ok]
	Right-click on the project =&gt; Deploy
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>HowToCopyAReport</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>HowToCopyAReport</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>From: http://stackoverflow.com/questions/10015589/how-to-copy-a-report-in-sql-server-reporting-services-2008

The easiest way I've found to do this:

   1] In BIDS, after creating the original report, right click on the project or reports folder in the Solution Explorer pane and select Add -&gt; Existing Item...
    In the resulting dialog, copy and paste your first report, which will give you something similar to "Report1 Copy.rdl"
    Rename the copied file to your new report name.
    Select the new file again, so that this name is selected in the File name text box.
    Click the "Add" button.

Yes, there is no problem with addign multiple copies of identical .rdl's. There are no unique identifiers in the .rdl file.


///////////////////////////////////////////////////////////



I can right click the report (under Solution Explorer) and select copy, but can't find where to past. Or if I copy the .rdl file, I don't know how to add that to my project. – Amarundo Apr 4 '12 at 17:01
	
Just saw it - Add Existing Item... Thanks.

------
	

Just one last comment on Amarundo's callout:

"Diego, that's the thing. I can right click the report (under Solution Explorer) and select copy, but can't find where to past. Or if I copy the .rdl file, I don't know how to add that to my project."

If you right-click on a report item in the Solutions Explorer, the "Copy" option is available. However, the "Paste" option never becomes visible, even when you have a report item in your clipboard. However, the object is there, and you can paste it by pressing [CTRL] + V.

I think it was just a UI miss on Microsoft's part.
==============================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>HyperLink_Parent_Report_to_Child_report</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>HyperLink_Parent_Report_to_Child_report</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>from: http://www.youtube.com/watch?v=wbqwSM26Y8o

a] Parms

Parent Query: No parameter
Child Query: has a parameter

b] On the Parent Report

select field's text in table =&gt; right click =&gt; PlaceHolder Properties 
	=&gt; PlaceHolder Properties {window} 
	 	=&gt; Action {left pane}
	 		Enable as an action: (x) Go to a report

			{then this opens up the following}
			
			Specify a Report 
				{choose the child report}
				
			[Add] {Use these parameters to run the report

			{add the parms, note Name seems to be the childs parms"
			{Value seems to be the fields int he parent}
			
			
			
Example of Expression to use in the placeholder for the situaiton where the 
Root deployment folder is: "COI Reports", and the Report "107_SubForm_SubContract_COI_CheckList.rd"
is located in a sub folder of the Root, called "SubForms"

/COI Reports/SubForms/107_SubForm_SubContract_COI_CheckList

NOTE: since the sub-folder does not exist in BIDs, I had to first use the "Action" wizard with the subform, as it is in 
the BIDSs Solution Explorer, i.e. with the subform at the root, in order for it to Intellisence the parameter, then I replaced the information in the 
"Specify a Report" text box with the path that includes the subfolder.

When I did not use the Full path, like above, but rather the relative path, I used this:

SubForms/107_Details
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MaxMemorySetting</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MaxMemorySetting</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

file:  rsreportserver.config
folder: C:\Program Files\Microsoft SQL Server\MSRS10.MSSQLSERVER\Reporting Services\ReportServer\

---If you want to increase the max memory used by SSRS: (which means 7 GB)

&lt;WorkingSetMaximum&gt;7000000&lt;/WorkingSetMaximum&gt;


----If you want to improve the first call, you can set (in minutes)

&lt;RecycleTime&gt;4320&lt;/RecycleTime&gt;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>MultipleValueParameter</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>MultipleValueParameter</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Two versions:
1] Original from article
2] my working version
=========================

Getting Multi-Value params to work with Stored Procedures
This is no great secret. But anyway, here it is again:

1. The stored procedure for the report should declare any multi-value parameters as type nvarchar(max).

2. In the Report Designer, your parameter should have the 'Allow multiple values' option ticked (obviously). {Look in the Parameters folder}
Also, it helps to set the Data type to 'Text' even if its actually an integer or something, 
because we're going to have to treat it as text later on in the Stored Procedure.

 3. In the DataSet that calls the stored procedure, go to the Parameters tab:

4. For each parameter that needs to be a multi-value one, press the Fx button and change the default:

=Parameters!TerritoryMulti.Value

to

=Join(Parameters!xxxxxx.Value, ",")							{where xxxxxx is the parameter name}

This will just string the multi-values together into a comma separated string.

5. In the database, you need a function that can split comma-separated values back out into a table format. There are lots of variations of this sort of function around, here's the one I use:

CREATE FUNCTION [dbo].[ufnSplit]
   (@RepParam nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 

6. The query inside the stored procedure that uses the multi-value parameter should use it like this:

WHERE 
sometable.TerritoryID in (select Item from dbo.ufnSplit(@TerritoryMulti,','))

... that is, it uses ufnSplit to split the passed values out into a table, and then selects from that table and uses 'in' to check for membership.


==============================================================================================
This is also in the SQL section, for the function 'fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters'
Here are those notes:
=====================

--I used this function for a multivalue parameter report in  SSRS 

--SUMMARY: 
/*
a) Let a user pick one or more values for a particular Parm.
b) Use an Expression in the 'Value' of a Parameter that concatenates the multiple values into one string
c) Feed the multi-value string to the Stored Procedure
d) Then have a function that un-packs the substrings into seperate pieces, with commas between each piece
e) Then use that comma-seperated string of multiple values in an 'IN' statement of a WHERE clause in the 
	Stored Proc that gets the data for the DataSet of the SSRS Report



use a function that returns a table, of substrings, given a Large string made up of of Concatenated sub-strings



*/
--1] In the SSRS dataset properties, pass the multi-value param to the stored procedure as a comma-delimited string

-- for the Dataset, in the SSRS Report, right click =&gt; Properties =&gt; Parameters (e.g. for Parm '@BU'), for the Parm 'Value' 
--		use this expression:
								=JOIN(Parameters!BU.Value,",")

--2] Create this function in SQL Server to be used by the stored procedure that provides the data to the report

CREATE FUNCTION [dbo].[fn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters]
   (@ConcatenatedSubStrings nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind &gt; 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@ConcatenatedSubStrings)
      IF @chrind  &gt; 0
        SELECT @Piece = LEFT(@ConcatenatedSubStrings,@chrind - 1)
      ELSE
        SELECT @Piece = @ConcatenatedSubStrings
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @ConcatenatedSubStrings = RIGHT(@ConcatenatedSubStrings,LEN(@ConcatenatedSubStrings) - @chrind)
      IF LEN(@ConcatenatedSubStrings) = 0 BREAK
    END
  RETURN
  END 
  
 --3] Then in the Stored procedure, for the Dataset, you can call the function 
  
--======= How to Use the function in the Stored Proc for the report:=========================================================================================
SELECT *
FROM SomeTable
WHERE
	(BU_Name IN (select Item from dbofn_ReturnTableFromStringOfConcantenatedSubstringsAndDelimiters(@BU,','))	)	
--===================================================================================================================  
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Slow_Start_every_morning</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Slow_Start_every_morning</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://stackoverflow.com/questions/11207049/sql-reporting-services-first-call-is-very-slow


Option #1
==================
a)  set the RecycleTime in the rsreportserver.config to a value which is over one day 
	let’s say 1500 minutes (it is 25 hours)
b) schedule the execution of the PowerShell script out of the business hours, 
	each morning we will have SSRS ready without any delays.
 
 The PowerShell script:	
=========================================================================
Stop-Service "SQL Server Reporting Services (MSSQLSERVER)"
Start-Service "SQL Server Reporting Services (MSSQLSERVER)"
$wc = New-Object system.net.webClient
$cred = [System.Net.CredentialCache]::DefaultNetworkCredentials
$wc.Credentials = $cred
$src = $wc.DownloadString("http://localhost/Reports/Pages/Folder.aspx")
====================================================================================

The script above first stops the SQL Server Reporting Service of the default 
(MSSQLSERVER) instance and immediately starts it again 
(stopping and starting the service has the same effect as application domain recycling). 
Then an webClient object is created which is used to fetch the Report Manager page 
which causes the reporting services to load all the settings. 
The page is read as string (it doesn’t matter how we read the page. 
Important is to make a request to initialize the reporting services) 
and it will take a longer time (like the first report start).

It is also important to get the DefaultNetworkCredentials of the user account 
under which the script will be executed. 
It is necessary to assign those credentials to the web client so it can authenticate to the reporting services.

Also it is important to mention that it is necessary to execute the script 
with elevated administrative privileges to be able to stop and start the service.

You can create a scheduled task using the Scheduled Tasks GUI or execute a below command 
to create the scheduled task from within a command prompt. 
The command prompt needs to be running with elevated administrative privileges.

==============================================================================
schtasks /create /tn &amp;quot;SSRS Recycle&amp;quot; /ru UserName /rl highest /np /sc daily /sd 08/01/2011 /st 02:00 /tr &amp;quot;powershell.exe -noprofile -executionpolicy RemoteSigned -file c:scriptsSSRSRecycle.ps1&amp;quot;
===============================================================================

This command creates a new scheduled task named “SSRS Recycle”, 
which will be run non interactively with elevated rights as UserName. 
The task will be executed daily at 02:00 am starting from 1st of August 2011 
and will execute a PowerShell script SSRSRecycle.ps1 located in folder C:scripts.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>POPULATE_a_TVP_or_TempTable_from_SP_Then_SELECT_from_That</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>POPULATE_a_TVP_or_TempTable_from_SP_Then_SELECT_from_That</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--POPULATE_a_TVP_or_TempTable_from_SP_Then_SELECT_from_That
--EXEC_into_a_TableVariable_or_TempTable_Then_SELECT_from_That

--http://stackoverflow.com/questions/209383/select-columns-from-result-set-of-stored-procedure
--A stored procedure may only return text (print 'text'), or may return multiple tables, or may return no tables at all.
--So something like SELECT * FROM (exec sp_tables) Table1 will not work

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--prj_01_SP_205i_EXPLORER_Vendor_MSA_Searchable_v2.sql
/*
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 12/30/2015
	Modified: 1/18/2015 - get rid of the files form MSA_COI folder
	By: glenn garson
	************************************************************************************
*/



USE [COI]
GO


alter Procedure prj_01_SP_205i_EXPLORER_Vendor_MSA_Searchable(
		@WindowInDays_IN as INT,		 
		@SearchString_IN as NVARCHAR(100)
	)

	as

	IF OBJECT_ID('tempdb..#mytemp') IS NOT NULL

		DROP TABLE #mytemp
	    
	
	
	CREATE TABLE #mytemp (
							IDNumber nvarchar(150)					
						  ,[DOCUMENT] nvarchar(150)			
						  ,[ATTACH_DATE] nvarchar(110)			
						  ,[USER_ID] nvarchar(110)
						  ,Window_BEGINS nvarchar(110)
							)
	
	INSERT #mytemp 
	EXEC prj_01_SP_205_EXPLORER_documents_Searchable 
														@WindowInDays = @WindowInDays_IN,
														@DOCUMENT_GROUP = 'Vendor',
														@DOCUMENT_TYPE = 'MSA',
														@SearchString = @SearchString_IN
  SELECT * 
  from #mytemp
  --where IDNumber like '%1  95090%'
  WHERE DOCUMENT  not like '%MSA_COI%'

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Declare @tablevar table(col1,..
insert into @tablevar(col1,..) exec MyStoredProc 'param1', 'param2'

SELECT col1, col2 FROM @tablevar


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


CREATE TABLE #Result
(
  ID int,  Name varchar(500), Revenue money
)
INSERT #Result EXEC RevenueByAdvertiser '1/1/10', '2/1/10'
SELECT * FROM #Result ORDER BY Name
DROP TABLE #Result


///////////////////////////////////////////////////////////////////////////
create table #test_table(
    col1 int,
    col2 int,
   .
   .
   .
    col80 int
)
Now execute procedure and put value in #test_table:

insert into #test_table
EXEC MyStoredProc 'param1', 'param2'
Now you fetch the value from #test_table:

select col1,col2....,col80 from #test_table</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>TroubleShooting</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>01_Blocked_Process_Report___about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>TroubleShooting</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>01_Blocked_Process_Report___about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
--By default in SQL Server, the deadlock detector wakes up every 5 seconds to check if your queries are in a “deadly embrace”. 
--You can turn on an option that asks SQL Server to use this resource to check for long term blocking, and issue a report.

--WARNING: You should only configure the blocked process report to be issued for values of five seconds or higher. 
--Microsoft warns that if you set this from 1-4, you could cause the deadlock detector to run continuously and kill your performance.

--To use the Blocked Process Report, you need to configure a trace that looks for the “Blocked Process Report”  
--event under “Errors and Warnings”. We recommend using a server side trace

--Step 1: Turn on the blocked process report. This will look for any blocking taking 20 seconds or longer.

--Make sure you don't have any pending changes
SELECT *
FROM sys.configurations
WHERE value &lt;&gt; value_in_use;
GO
exec sp_configure 'show advanced options', 1;
GO
RECONFIGURE
GO
exec sp_configure 'blocked process threshold (s)', 20;
GO
RECONFIGURE
GO

--To check on the settings:

exec sp_configure 'blocked process threshold (s)';

--Step 2: Set up a trace to capture the blocked process report. Run it as a server side trace.

--	It should contain one event: Errors and Warnings -&gt; Blocked Process Report.
--	It needs just two columns: Text, spid
--This sample server side trace will run for five minutes and automatically stop. You must change the path to a valid directory SQL Server has permission to write to.

-- I tried to set up a trace:
-------------------------------
--I picked the 'Blank' template from the New Trace Window =&gt; 
--	The 6th item down is "Errors and Warnings" =&gt;
--	Opened up that and picked "Blocked Process Report"


--This sample server side trace will run for five minutes and automatically stop. You must change the path to a valid directory SQL Server has permission to write to.
--NOTE: I had to give local account "NT Service\MSSQLSERVER" 'Modify' permission to the folder, otherwise it threw a 'denied access' error
--=================================================================================================
-- Created by: SQL Server 2012  Profiler
-- Create a Queue
declare @rc int
declare @TraceID int
declare @maxfilesize bigint
declare @DateTime datetime
---------Added a function here:
set @DateTime = DATEADD(mi,5,getdate());  /* Run for five minutes */
set @maxfilesize = 5
-- Please replace the text InsertFileNameHere, with an appropriate
-- filename prefixed by a path, e.g., c:\MyFolder\MyTrace. The .trc extension
-- will be appended to the filename automatically. If you are writing from
-- remote server to local drive, please use UNC path and make sure server has
-- write access to your network share
-----------Set my filename here:
exec @rc = sp_trace_create @TraceID output, 0, N'C:\JUNK\Trace001.trc', @maxfilesize, @Datetime
if (@rc != 0) goto error
-- Client side File and Table cannot be scripted
-- Set the events
declare @on bit
set @on = 1
exec sp_trace_setevent @TraceID, 137, 1, @on
exec sp_trace_setevent @TraceID, 137, 12, @on
-- Set the Filters
declare @intfilter int
declare @bigintfilter bigint
-- Set the trace status to start
exec sp_trace_setstatus @TraceID, 1
-- display trace id for future references
select TraceID=@TraceID
goto finish
error:
select ErrorCode=@rc
finish:
go
--=================================================================================================

-- Look at running traces and get the trace id:

SELECT * from sys.traces;
GO

--Stop a trace, if needed
--Plug in the correct traceid from the query above
EXEC sp_trace_setstatus @traceid =2, @status = 0;
GO
EXEC sp_trace_setstatus @traceid =2, @status = 2;
GO

--=================================================================================================
http://michaeljswart.com/2011/04/a-new-way-to-examine-blocked-process-reports/
-- Downloaded and saved the sp_blocked_process_report_viewer.sql script

--SYNTAX:
sp_blocked_process_report_viewer [@Trace = ] 'TraceFileOrTable'
    [ , [ @Type = ] 'TraceType' ]

--Arguments
--[@Trace = ] ‘TraceFileOrTable’

--Is the name of the trace table or trace file that holds the blocked process reports
--[@Trace = ] ‘TraceType’

--Is the type of file referenced by TraceFileOrTable. Values can be TABLE, FILE or XMLFILE. The default is FILE

--In this sample we use the free blocked process report viewer by Michael J Swart.

exec dbo.sp_blocked_process_report_viewer
  @Trace='C:\JUNK\Trace001.trc';
GO

--=================================================================================================
--CLEANUP
--Make sure your trace is gone
SELECT * from sys.traces;
GO
--Turn off the blocked process report when you're not using it.
--Make sure you don't have any pending changes
SELECT *
FROM sys.configurations
WHERE value &lt;&gt; value_in_use;
GO
exec sp_configure 'blocked process threshold (s)', 0;
GO
RECONFIGURE
GO
exec sp_configure 'blocked process threshold (s)';
GO

////////////////////////////--To Demonstrate a Blocked Process:
http://www.sqlpassion.at/archive/2011/12/01/the-blocked-process-report/

--To demonstrate the Blocked Process Report, 
--I’m just creating a new transaction inside the AdventureWorks2008R2 database through an UPDATE statement:


BEGIN TRANSACTION

UPDATE Person.Person
SET Title = 'Mr'
WHERE BusinessEntityID = 1

BEGIN TRANSACTION
 
--After the execution of this statement, 
--the query has now acquired an Exclusive Lock (X) on the record where the column BusinessEntityID is equal to 1. 
--In a second session I’m now trying to read the same record.
--During the reading SQL Server tries to acquire a Shared Lock (S) which leads to a blocking scenario:

SELECT * FROM Person.Person
WHERE BusinessEntityID = 1
GO
 
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_Button</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Export_records_to_Excel_on_Desktop</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_Button</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Export_records_to_Excel_on_Desktop</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Sub Export_ServiceDates_Records()


    
        Dim outputFilePath As String
        outputFilePath = CreateObject("WScript.Shell").specialfolders("Desktop")
        
        Dim outputFileName As String
        outputFileName = outputFilePath &amp; "\" &amp; "ServiceDates_" &amp; Format(Date, "yyyyMMdd") &amp; ".xls"


        DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel9, "q015_ServiceDates_ALL_For_Export", outputFileName, True

        
        MsgBox "Data Exported to Desktop. The path and file are: " &amp; outputFileName



End Sub

'==q015_ServiceDates_ALL_For_Export========================================
SELECT 
		T001_Demo.NAME_F, 
		T001_Demo.NAME_L, 
		T001_Demo.NAME_M, 
		T001_Demo.SSN, 
		LIST_Lookups.ValueLabel AS Service, 
		T001_Demo.DEMO_PK, 
		T003_Service.*
FROM (
		T003_Service 
		INNER JOIN 
		LIST_Lookups 
		ON T003_Service.SERVICE = LIST_Lookups.Value
	) 
	LEFT JOIN 
	T001_Demo 
	ON T003_Service.Demo_FK = T001_Demo.DEMO_PK
WHERE (
		(
			(T003_Service.SERV_DATE) Between [Start Date] And [End Date]) 
			AND 
			(
				(LIST_Lookups.LK_ID)=3)
			)
ORDER BY T001_Demo.NAME_L, T001_Demo.NAME_F, T003_Service.SERV_DATE DESC;
'=========================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_File_Directory</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Drag_n_Drop_Filename_and_Directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_File_Directory</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Drag_n_Drop_Filename_and_Directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Drag_n_Drop_Filename_and_Directory
'From: http://www.mrexcel.com/forum/microsoft-access/408038-drag-drop-file-visual-basic-applications.html


'
'if the purpose is just to get a full path of a file that's dragged onto the form, your salvation is near .
' In Access you can create a table with a field set to Hyperlink. When you place this field on a form,
' you will be able to drag any file from the Windows Explorer into this field.
'
' But of course there is always a but. Normally you'd expect to simply retrieve the hyperlink address from the hyperlink field.
' Somehow you 'll end up with a relative path, or even worse an absolute path starting with the default path set under you're database options.
'
' Now I will explain how to deal with this. For this example create a simple table with just two fields,
' FileHyperlink (type = hyperlink) and FilePath(type = text). Then create a form and place the two fields on the form.
'
' Copy this code to the form code

'Now start the form and drag a file to the FileHyperlink control. Voila, you'll have the full path in the FilePath field.
' From here you can build you're app. 

'well there is one little bug in the code.
' If you're file is in the same folder as your databasefile it only returns the filename. Probably this is the case.

Option Compare Database

Private Sub FileHyperLink_AfterUpdate()
	Dim hlink As Hyperlink
	Me.FileHyperLink.Value = RelativeToAbsoluteHyperlink(Me.FileHyperLink.Value)
	Set hlink = Me.FileHyperLink.Hyperlink
	Me.FilePath.Value = hlink.Address
	Me.FileHyperLink.Value = vbNullString
	DoCmd.RunCommand acCmdSaveRecord
End Sub

Function ExtractDirName(strPathName As String, Optional strDelimiter As String = "\") As String
  Dim intIndex As Integer
  For intIndex = VBA.Len(strPathName) To 1 Step -1
    If Mid(strPathName, intIndex, 1) = strDelimiter Then Exit For
  Next
  If intIndex &lt;= 1 Then
    ExtractDirName = ""
  Else
    ExtractDirName = VBA.Left(strPathName, intIndex - 1)
  End If
End Function

Function ExtractFileName(strPathName As String, Optional strDelimiter As String = "\") As String
  Dim intIndex As Integer
  For intIndex = VBA.Len(strPathName) To 1 Step -1
    If Mid(strPathName, intIndex, 1) = strDelimiter Then Exit For
  Next
  ExtractFileName = VBA.Right(strPathName, VBA.Len(strPathName) - intIndex)
End Function

Function RelativeToAbsoluteHyperlink(strHyperlink As String) As String
  Dim strTemp() As String
  Dim intIndex As Integer
  Dim strResult As String
  If Nz(strHyperlink, "") &lt;&gt; "" Then
    strTemp() = Split(strHyperlink, "#", , vbTextCompare)
    For intIndex = LBound(strTemp) To UBound(strTemp)
      If Len(strTemp(intIndex)) &gt; 0 Then
        If Left(strTemp(intIndex), 2) = ".." Then
          strTemp(intIndex) = Replace(strTemp(intIndex), "/", "\")
        End If
        strTemp(intIndex) = RelativeToAbsolutePath(strTemp(intIndex))
      '  Debug.Print strTemp(intIndex)
      End If
      If intIndex = LBound(strTemp) Then
        strResult = strTemp(intIndex)
      Else
        strResult = strResult &amp; "#" &amp; strTemp(intIndex)
      End If
    Next
  End If
  RelativeToAbsoluteHyperlink = strResult
End Function

Function RelativeToAbsolutePath(strRelativePath As String, _
  Optional strStartPath As String = "", _
  Optional strDelimiter As String = "\") As String
  
  Dim intCount As Integer
  Dim intIndex As Integer
  Dim intIndex2 As Integer
  
  Dim strFileName As String
  Dim strPathName As String
  Dim strResult As String
  Dim strSplit() As String
  Dim strSplit2() As String
  Dim strTemp As String
  
  If strStartPath = "" Then
    strStartPath = Application.CurrentProject.Path
  End If
  If (Left(strRelativePath, 2) = "\\") Or _
    (Mid(strRelativePath, 2, 1) = ":") Or _
    (Left(strRelativePath, 5) = "http:") Or _
    (Left(strRelativePath, 6) = "https:") Or _
    (Left(strRelativePath, 4) = "ftp:") Or _
    (Left(strRelativePath, 7) = "mailto:") Or _
    (Left(strRelativePath, 7) = "callto:") Then
    'Path is already absolute
    RelativeToAbsolutePath = strRelativePath
    Exit Function
  End If
  
  strPathName = ExtractDirName(strRelativePath, strDelimiter)
  strFileName = ExtractFileName(strRelativePath, strDelimiter)
  If Left(strPathName, 2) = ".." Then
    'Go up
    intCount = 0
    strSplit() = Split(strPathName, strDelimiter, -1, vbTextCompare)
    strSplit2() = Split(strStartPath, strDelimiter, -1, vbTextCompare)
    For intIndex = 0 To UBound(strSplit())
      If strSplit(intIndex) = ".." Then
        intCount = intCount + 1
        strResult = ""
        For intIndex2 = 0 To UBound(strSplit2()) - intCount
          If strResult &lt;&gt; "" Then
            strResult = strResult &amp; strDelimiter
          End If
          strResult = strResult &amp; strSplit2(intIndex2)
        Next
      Else
        If strResult &lt;&gt; "" Then
          strResult = strResult &amp; strDelimiter
        End If
        strResult = strResult &amp; strSplit(intIndex)
      End If
    Next
    strResult = strResult &amp; strDelimiter &amp; strFileName
  Else
    strResult = strRelativePath
  End If
  
  RelativeToAbsolutePath = strResult
End Function
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS_File_Directory</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Path_DeskTop</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS_File_Directory</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Path_DeskTop</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Private Sub Command0_Click()

    MsgBox CreateObject("WScript.Shell").specialfolders("Desktop")

End Sub


Private Sub Command0_Click()
    
    Dim outputFilePath As String
    outputFilePath = CreateObject("WScript.Shell").specialfolders("Desktop")
    MsgBox outputFilePath

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_ACCESS</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Export_to_Excel</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_ACCESS</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Export_to_Excel</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'http://stackoverflow.com/questions/1849580/export-ms-access-tables-through-vba-to-an-excel-spreadsheet-in-same-directory

'You can use VBA to export an Access database table as a Worksheet in an Excel Workbook.
'To obtain the path of the Access database, use the CurrentProject.Path Property.
'To name the Excel Workbook file with the current date, use the Format(Date, "yyyyMMdd") method.
'Finally, to export the table as a Worksheet, use the DoCmd.TransferSpreadsheet method.

Example:

Dim outputFileName As String
outputFileName = CurrentProject.Path &amp; "\Export_" &amp; Format(Date, "yyyyMMdd") &amp; ".xls"
DoCmd.TransferSpreadsheet acExport, acSpreadsheettypeExcel9, "Table1", outputFileName , True
DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel9, "Table2", outputFileName , True

'This will output both Table1 and Table2 into the same Workbook.

'to export to CurrentProject.Path?
outputFileName = CurrentProject.Path &amp; "\Export_" &amp; Format(Date, "YYYYDDmm") &amp; ".xls" 


Private Sub ExportToDesktop()

    
    Dim outputFilePath As String
    outputFilePath = CreateObject("WScript.Shell").specialfolders("Desktop")

    Dim outputFileName As String
    outputFileName = outputFilePath &amp; "\Export_" &amp; Format(Date, "yyyyMMdd") &amp; ".xls"
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel9, "Main", outputFileName, True

    MsgBox "File saved: " &amp; outputFileName
End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_Files_Directory_Folders</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>ListFilesInDirectory_use_Function_ToGetFolder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_Files_Directory_Folders</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>ListFilesInDirectory_use_Function_ToGetFolder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

Sub ExcelFileSearch()
    Dim srchExt As Variant, srchDir As Variant, i As Long, j As Long
    Dim strName As String, varArr(1 To 1048576, 1 To 3) As Variant
    Dim strFileFullName As String
    Dim ws As Worksheet
    Dim fso As Object
    
    Let srchExt = Application.InputBox("Please Enter File Extension", "Info Request")
    If srchExt = False And Not TypeName(srchExt) = "String" Then
        Exit Sub
    End If
    
    Let srchDir = BrowseForFolderShell
    If srchDir = False And Not TypeName(srchDir) = "String" Then
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    Set ws = ThisWorkbook.Worksheets.Add(Sheets(1))
    On Error Resume Next
    Application.DisplayAlerts = False
    ThisWorkbook.Worksheets("FileSearch Results").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    ws.Name = "FileSearch Results"
    
    Let strName = Dir$(srchDir &amp; "\*" &amp; srchExt)
    Do While strName &lt;&gt; vbNullString
        Let i = i + 1
        Let strFileFullName = srchDir &amp; strName
        Let varArr(i, 1) = strFileFullName
        Let varArr(i, 2) = FileLen(strFileFullName) \ 1024
        Let varArr(i, 3) = FileDateTime(strFileFullName)
        Let strName = Dir$()
    Loop
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    Call recurseSubFolders(fso.GetFolder(srchDir), varArr(), i, CStr(srchExt))
    Set fso = Nothing
    
    ThisWorkbook.Windows(1).DisplayHeadings = False
    With ws
        If i &gt; 0 Then
            .Range("A2").Resize(i, UBound(varArr, 2)).Value = varArr
            For j = 1 To i
                .Hyperlinks.Add Anchor:=.Cells(j + 1, 1), Address:=varArr(j, 1)
            Next
        End If
        .Range(.Cells(1, 4), .Cells(1, .Columns.Count)).EntireColumn.Hidden = True
        .Range(.Cells(.Rows.Count, 1).End(xlUp)(2), _
            .Cells(.Rows.Count, 1)).EntireRow.Hidden = True
        With .Range("A1:C1")
            .Value = Array("Full Name", "Kilobytes", "Last Modified")
            .Font.Underline = xlUnderlineStyleSingle
            .EntireColumn.AutoFit
            .HorizontalAlignment = xlCenter
        End With
    End With
    Application.ScreenUpdating = True
End Sub


Private Sub recurseSubFolders(ByRef Folder As Object, _
    ByRef varArr() As Variant, _
    ByRef i As Long, _
    ByRef srchExt As String)
    
    Dim SubFolder As Object
    Dim strName As String, strFileFullName As String
    For Each SubFolder In Folder.SubFolders
        Let strName = Dir$(SubFolder.Path &amp; "\*" &amp; srchExt)
        Do While strName &lt;&gt; vbNullString
            Let i = i + 1
            Let strFileFullName = SubFolder.Path &amp; "\" &amp; strName
            Let varArr(i, 1) = strFileFullName
            Let varArr(i, 2) = FileLen(strFileFullName) \ 1024
            Let varArr(i, 3) = FileDateTime(strFileFullName)
            Let strName = Dir$()
        Loop
        If i &gt; 1048576 Then Exit Sub
        Call recurseSubFolders(SubFolder, varArr(), i, srchExt)
    Next
End Sub


Private Function BrowseForFolderShell() As Variant
    Dim objShell As Object, objFolder As Object
    Set objShell = CreateObject("Shell.Application")
    Set objFolder = objShell.BrowseForFolder(0, "Please select a folder", 0, "C:\")
    If Not objFolder Is Nothing Then
        On Error Resume Next
        If IsError(objFolder.Items.Item.Path) Then
            BrowseForFolderShell = CStr(objFolder)
        Else
            On Error GoTo 0
            If Len(objFolder.Items.Item.Path) &gt; 3 Then
                BrowseForFolderShell = objFolder.Items.Item.Path &amp; _
                Application.PathSeparator
            Else
                BrowseForFolderShell = objFolder.Items.Item.Path
            End If
        End If
    Else
        BrowseForFolderShell = False
    End If
    Set objFolder = Nothing: Set objShell = Nothing
End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_MISC</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Compile_Error_PtrSafe_update_for_use_on_64bit</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_MISC</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Compile_Error_PtrSafe_update_for_use_on_64bit</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Compile Error:
The code in this project must be updated for use on 64-bit sytems. 
Please review and upldate Declare statements and then mark them with the PtrSafe Attribute

'Example of code that caused the problem:
Private Declare Function SHGetPathFromIDList Lib "shell32.dll" _
    Alias "SHGetPathFromIDListA" (ByVal pidl As Long, ByVal pszPath As String) As Long
Private Declare Function SHBrowseForFolder Lib "shell32.dll" _
    Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
    
///////////////////////////////////////////////////////////////////////////////////////////////////////////
'FROM: https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2010/ee691831(v=office.14)
'examples: https://www.jkp-ads.com/articles/apideclarations.asp
    
Declare Function RegOpenKeyA Lib "advapi32.dll" (ByVal Key As Long, ByVal SubKey As String, NewKey As Long) As Long   
'change to:
Declare PtrSafe Function RegOpenKeyA Lib "advapire32.dll" (ByVal hKey as LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long 

'EXAMPLE: LEGACY CODE =================================================================================

    Declare Function SHBrowseForFolder Lib "shell32.dll" _
      Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
      
    Public Type BROWSEINFO
      hOwner As Long
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As Long
      lParam As Long
      iImage As Long
    End Type
  
 'NEW VBA CODE: =================================================================================
     #if VBA7 then    ' VBA7 
    Declare PtrSafe Function SHBrowseForFolder Lib "shell32.dll" _
      Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
    
    Public Type BROWSEINFO
      hOwner As LongPtr
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As LongPtr
      lParam As LongPtr
      iImage As Long
    End Type
     
    #else    ' Downlevel when using previous version of VBA7
    
    Declare Function SHBrowseForFolder Lib "shell32.dll" _
      Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
    
    Public Type BROWSEINFO
      hOwner As Long
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As Long
      lParam As Long
      iImage As Long
    End Type
     
    #end if
    Sub TestSHBrowseForFolder ()
        Dim bInfo As BROWSEINFO
        Dim pidList As Long
    
        bInfo.pidlRoot = 0&amp;
        bInfo.ulFlags = &amp;H1
        pidList = SHBrowseForFolder(bInfo)
    End Sub
    
 /////////////////////////////////////////////////////////////////////////////////////   </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_MISC</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Password_removeFromVBA</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_MISC</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Password_removeFromVBA</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://confluence.jaytaala.com/display/TKB/Remove+Excel+VBA+password

Remove Excel VBA password
Skip to end of metadata
Created by Jay Ta'ala on Nov 14, 2017 Go to start of metadata
Problem
I usually don't deal with VBA (thank goodness) - but I have been asked on several occasions to remove a VBA password from an excel workbook.  In the instances that I did (remove the password) it was not for nefarious purposes, but because someone had either forgotten the password or had a file they were now responsible for and the previous user had (who set the password) had left the company.

Plus, I quite enjoyed removing passwords with this approach since it reminded me of my youth and hex-editing files (anyone remember hex-editing SimCity 2000 saves to give you lots of money??).

Solution
You'll need a hex-editor for this.  Something like trusty ol' XVI32.

Make sure you have a backup of the file in case something goes wrong.

.xls (or .xla)
These are older files but they are still around.  Open the file in your hex-editor and find for text string "DPB":



Now basically just click on the B in DPB and replace it with an "x", like this:



Save and exit your hex-editor.

Your not done yet...
Open the file in excel - you may receive a couple of error notifications, just click through them.

Open the Visual Basic window (usually ALT+F11 if I remember correctly) and open the VBAProject properties (Tools menu).

Click on the Protection tab and change (do not remove at this stage) the password to something short and easy to remember (we'll be removing in next step).



Save the workbook and then close and reopen.

Open again the Visual Basic window and enter the password you just put in.  Redo the previous step but this time you can remove (delete) the password.

Save the workbook and you have now removed the password.

.xlsm
For xlsm files you need to do an extra step at the start.  Basically xlsm is a zipped format, so rename the extension to .zip and do the following:

open and open "xl" folder
extract "vbaProject.bin"
do hexedit method (see left)
save and reinsert into zip
rename back to xlsm.
repeat steps previously outlined by changing and then removing the password.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_EXCEL_WORKBOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>ReferenceWorkBooks</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_EXCEL_WORKBOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>ReferenceWorkBooks</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
/////////////////////////////////////////////////////////////
Function GetActiveWB() As String

  GetActiveWB = ActiveWorkbook.Path &amp; "\" &amp; ActiveWorkbook.Name

End Function
/////////////////////////////////////////////////////////////

Function GetThisWB() As String

  GetThisWB = ThisWorkbook.Path &amp; "\" &amp; ThisWorkbook.Name

End Function

/////////////////////////////////////////////////////////////
'Reference workbooks in the Workbooks collection
'The Workbooks collection contains all the open Workbook objects.

Private Sub UserForm_Activate()

  'Populate list box with names of open workbooks.

  Dim wb As Workbook

  For Each wb In Workbooks

    ListBox1.AddItem wb.Name

  Next wb

End Sub
/////////////////////////////////////////////////////////////
'opening all of the workbooks in a specified folder is a bit harder, 
'as you can see in the following subprocedure:

Sub OpenAllWB()

  'Open all workbooks in specified folder.

  Dim i As Integer

  With Application.FileSearch

    .LookIn = "C:\Examples"

    .FileType = msoFileTypeExcelWorkbooks

      'There are wb's

      If .Execute &gt; 0 Then

        For i = 1 To .FoundFiles.Count

          Workbooks.Open (.FoundFiles(i))

        Next i

      'There are no wb's

      Else

        MsgBox "There are no workbooks to open", vbOKOnly

      End If

  End With

End Sub

/////////////////////////////////////////////////////
'Closing all the open workbooks is a bit easier than opening them
Sub CloseAllWB()

  'Close all open workbooks.

    Workbooks.Close

End Sub

/////////////////////////////////////////////////////////////
'Open a specific WorkBook, but apparently only in the same folder:

Function ActivateWB(wbname As String)

  'Open wbname.

  Workbooks(wbname).Activate

End Function

To execute it, you simply pass the name of the workbook you want to activate as follows:

ActivateWB("HumanResources.xls")

/////////////////////////////////////////////////////////////

'The following function also uses the Workbooks property to determine whether a specific workbook is currently open:

Function IsWBOpen(wbname As String) As Boolean

  'Open workbook.

  Dim wb As Workbook

  On Error Resume Next

  Set wb = Workbooks(wbname)

  IsWBOpen = Not wb Is Nothing

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name> gets list of all Outlook Items (Emails, Contacts, Tasks, etc.)</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name> gets list of all Outlook Items (Emails, Contacts, Tasks, etc.)</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script to get list of All Emails
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' Uses new "Table" Object (available in Outlook 2007 and later -- won't work in Outlook 2003)
Public Sub GetListOfEmails()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim Folders As Outlook.Folders
    Dim Folder As Outlook.Folder
    Dim reply As Integer
    
    Set Session = Application.Session
    
    reply = MsgBox(Prompt:="This could take a VERY long time, and you won't be able to use Outlook while it runs -- are you sure you want to list all emails from all folders?", _
            Buttons:=vbYesNoCancel, Title:="Run Long Macro")
    If reply = vbYes Then
        Set Folders = Session.Folders
        ' Call RecurseFolders(Folders(1), vbTab, Report)
        For Each Folder In Folders
            Call RecurseFolders(Folder, vbTab, Report)
            Report = Report &amp; "---------------------------------------------------------------------------" &amp; vbCrLf
        Next
    Else
        reply = MsgBox(Prompt:="Would you like to just list all emails from your Inbox?", _
            Buttons:=vbYesNoCancel, Title:="Run Long Macro")
        If reply = vbYes Then
            Call RecurseFolders(Session.GetDefaultFolder(olFolderInbox), vbTab, Report)
        Else
            Exit Sub
        End If
        
    End If
    
    Dim retValue As Boolean
    retValue = CreateReportAsEmail("List of Emails", Report)
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub


Private Sub RecurseFolders(CurrentFolder As Outlook.Folder, Tabs, Report As String)
    Dim Table As Outlook.Table
    Dim Row As Outlook.Row
    Dim rowValues() As Variant
    Dim SubFolders As Outlook.Folders
    Dim SubFolder As Outlook.Folder
    
    Report = Report &amp; "Folder Name: " &amp; CurrentFolder.Name &amp; " (Store: " &amp; CurrentFolder.Store.DisplayName &amp; ")" &amp; vbCrLf
    
    Set Table = CurrentFolder.GetTable
    Do While Table.EndOfTable = False
        Set Row = Table.GetNextRow
        rowValues = Row.GetValues
        Report = Report &amp; Tabs
        Report = Report &amp; "Subject: " &amp; rowValues(1)
        Report = Report &amp; vbTab &amp; "MessageClass: " &amp; rowValues(4)
        ' Report = Report &amp; vbTab &amp; "Creation Time: " &amp; rowValues(2)
        Report = Report &amp; vbTab &amp; "Last Modification Time: " &amp; rowValues(3)
        'Report = Report &amp; vbTab &amp; "EntryID: " &amp; rowValues(0)
        Report = Report &amp; vbCrLf
    Loop
    
    Set SubFolders = CurrentFolder.Folders
    For Each SubFolder In SubFolders
        Call RecurseFolders(SubFolder, Tabs &amp; vbTab, Report)
    Next SubFolder

End Sub

' VBA Function which displays a report inside an email
Public Function CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error

    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.Folder

    CreateReportAsEmail = True

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")

    Set MyAddress = Session.CurrentUser.AddressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll

    mail.Subject = Title
    mail.Body = Report

    mail.Save
    mail.Display


Exiting:
        Set Session = Nothing
        Exit Function
On_Error:
    CreateReportAsEmail = False
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name> info on currently selected email using the Outlook Object Model</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name> info on currently selected email using the Outlook Object Model</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets info on the currently selected email using the Outlook Object Model
' (see other scripts a http://www.GregThatcher.com for other ways to get email properties)
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com

Public Sub GetCurrentEmailInfo()
    Dim Session As Outlook.NameSpace
    Dim currentExplorer As Explorer
    Dim Selection As Selection
    Dim currentItem As Object
    Dim currentMail As MailItem
    Dim report As String
    Dim currentAction As Action
    Dim currentConflict As Conflict
    Dim currentLink As Link
    Dim currentRecipient As Recipient
    
    Set currentExplorer = Application.ActiveExplorer
    Set Selection = currentExplorer.Selection
    
    'for all items do...
    For Each currentItem In Selection
        If currentItem.Class = olMail Then
            Set currentMail = currentItem
            report = report &amp; AddToReportIfNotBlank("EntryID: ", currentMail.entryID) &amp; vbCrLf
            report = report &amp; "Actions: " &amp; vbCrLf
            For Each currentAction In currentMail.Actions
                report = report &amp; vbTab &amp; currentAction.Name &amp; vbCrLf
            Next
            report = report &amp; vbCrLf
            
            report = report &amp; AddToReportIfNotBlank("AlternateRecipientAllowed: ", currentMail.AlternateRecipientAllowed)
            report = report &amp; AddToReportIfNotBlank("Application: ", currentMail.Application.Name)
            report = report &amp; AddToReportIfNotBlank("AutoForwarded: ", currentMail.AutoForwarded)
            report = report &amp; AddToReportIfNotBlank("AutoResolvedWinner: ", currentMail.AutoResolvedWinner)
            report = report &amp; AddToReportIfNotBlank("BCC: ", currentMail.BCC)
            report = report &amp; AddToReportIfNotBlank("BillingInformation: ", currentMail.BillingInformation)
            report = report &amp; AddToReportIfNotBlank("BodyFormat: ", currentMail.BodyFormat)
            
            report = report &amp; AddToReportIfNotBlank("Categories: ", currentMail.Categories)
            report = report &amp; AddToReportIfNotBlank("CC: ", currentMail.CC)
            report = report &amp; AddToReportIfNotBlank("Class: ", currentMail.Application.Class)
            report = report &amp; AddToReportIfNotBlank("Companies: ", currentMail.Companies)
            
            If currentMail.Conflicts.Count &gt; 0 Then
                report = report &amp; "Conflicts: " &amp; vbCrLf
                For Each currentConflict In currentMail.Conflicts
                    report = report &amp; vbTab &amp; currentConflict.Name &amp; vbCrLf
                Next
                report = report &amp; vbCrLf
            End If
            
            
            report = report &amp; AddToReportIfNotBlank("ConversationIndex: ", currentMail.ConversationIndex)
            report = report &amp; AddToReportIfNotBlank("ConversationTopic: ", currentMail.ConversationTopic)
            report = report &amp; AddToReportIfNotBlank("CreationTime: ", currentMail.CreationTime)
            report = report &amp; AddToReportIfNotBlank("DeferredDeliveryTime: ", currentMail.DeferredDeliveryTime)
            
            report = report &amp; AddToReportIfNotBlank("DeleteAfterSubmit: ", currentMail.DeleteAfterSubmit)
            report = report &amp; AddToReportIfNotBlank("DownloadState: ", currentMail.DownloadState)
            report = report &amp; AddToReportIfNotBlank("Entry ID: ", currentMail.entryID)

            report = report &amp; AddToReportIfNotBlank("ExpiryTime: ", currentMail.ExpiryTime)
            report = report &amp; AddToReportIfNotBlank("FlagRequest: ", currentMail.FlagRequest)
            report = report &amp; AddToReportIfNotBlank("FormDescription: ", currentMail.FormDescription)
            report = report &amp; AddToReportIfNotBlank("Importance: ", currentMail.Importance)
            report = report &amp; AddToReportIfNotBlank("InternetCodepage: ", currentMail.InternetCodepage)
            report = report &amp; AddToReportIfNotBlank("IsConflict: ", currentMail.IsConflict)
            ' Not available for Outlook 2003
            'report = report &amp; AddToReportIfNotBlank("IsMarkedAsTask: ", currentMail.IsMarkedAsTask)
            'report = report &amp; AddToReportIfNotBlank("LastModificationTime: ", currentMail.ItemProperties)

            report = report &amp; AddToReportIfNotBlank("LastModificationTime: ", currentMail.LastModificationTime)
            
            'If currentMail.Links.Count &gt; 0 Then
            '    report = report &amp; "Links: " &amp; vbCrLf
            '    For Each currentLink In currentMail.Links
            '        report = report &amp; vbTab &amp; currentLink.Name &amp; vbCrLf
            '    Next
            '    report = report &amp; vbCrLf
            'End If

            report = report &amp; AddToReportIfNotBlank("MarkForDownload: ", currentMail.MarkForDownload)
            report = report &amp; AddToReportIfNotBlank("MessageClass: ", currentMail.MessageClass)
            report = report &amp; AddToReportIfNotBlank("Mileage: ", currentMail.Mileage)
            report = report &amp; AddToReportIfNotBlank("NoAging: ", currentMail.NoAging)
            report = report &amp; AddToReportIfNotBlank("OriginatorDeliveryReportRequested: ", currentMail.OriginatorDeliveryReportRequested)
            report = report &amp; AddToReportIfNotBlank("OutlookInternalVersion: ", currentMail.OutlookInternalVersion)
            report = report &amp; AddToReportIfNotBlank("OutlookVersion: ", currentMail.OutlookVersion)
            report = report &amp; AddToReportIfNotBlank("Permission: ", currentMail.Permission)
            report = report &amp; AddToReportIfNotBlank("PermissionService: ", currentMail.PermissionService)
            'report = report &amp; AddToReportIfNotBlank("Permission: ", currentMail.PropertyAccessor)
            report = report &amp; AddToReportIfNotBlank("ReadReceiptRequested: ", currentMail.ReadReceiptRequested)
            'report = report &amp; AddToReportIfNotBlank("ReceivedByEntryID: ", currentMail.ReceivedByEntryID)
            report = report &amp; AddToReportIfNotBlank("ReceivedByName: ", currentMail.ReceivedByName)
            'report = report &amp; AddToReportIfNotBlank("ReceivedOnBehalfOfEntryID: ", currentMail.ReceivedOnBehalfOfEntryID)
            report = report &amp; AddToReportIfNotBlank("ReceivedOnBehalfOfName: ", currentMail.ReceivedOnBehalfOfName)
            report = report &amp; AddToReportIfNotBlank("ReceivedTime: ", currentMail.ReceivedTime)
            report = report &amp; AddToReportIfNotBlank("RecipientReassignmentProhibited: ", currentMail.RecipientReassignmentProhibited)
            
            report = report &amp; "Recipients: " &amp; vbCrLf
            For Each currentRecipient In currentMail.Recipients
                report = report &amp; vbTab &amp; "Name: " &amp; currentRecipient.Name &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "Address: " &amp; currentRecipient.Address &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "AddressEntry: " &amp; currentRecipient.AddressEntry &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "AutoResponse: " &amp; currentRecipient.AutoResponse &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "Class: " &amp; currentRecipient.Class &amp; vbCrLf
                'report = report &amp; vbTab &amp; vbTab &amp; "DisplayType: " &amp; currentRecipient.DisplayType &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "EntryID: " &amp; currentRecipient.entryID &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "Index: " &amp; currentRecipient.Index &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "MeetingResponseStatus: " &amp; currentRecipient.MeetingResponseStatus &amp; vbCrLf
                'report = report &amp; vbTab &amp; vbTab &amp; "Parent: " &amp; currentRecipient.Parent &amp; vbCrLf
                'report = report &amp; vbTab &amp; vbTab &amp; "PropertyAccessor: " &amp; currentRecipient.PropertyAccessor &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "Resolved: " &amp; currentRecipient.Resolved &amp; vbCrLf
                'report = report &amp; vbTab &amp; vbTab &amp; "Session: " &amp; currentRecipient.Session &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "TrackingStatus: " &amp; currentRecipient.TrackingStatus &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "TrackingStatusTime: " &amp; currentRecipient.TrackingStatusTime &amp; vbCrLf
                report = report &amp; vbTab &amp; vbTab &amp; "Type: " &amp; currentRecipient.Type &amp; vbCrLf
            Next
            report = report &amp; vbCrLf

            report = report &amp; AddToReportIfNotBlank("ReminderOverrideDefault: ", currentMail.ReminderOverrideDefault)
            report = report &amp; AddToReportIfNotBlank("ReminderPlaySound: ", currentMail.ReminderPlaySound)
            report = report &amp; AddToReportIfNotBlank("ReminderSet: ", currentMail.ReminderSet)
            report = report &amp; AddToReportIfNotBlank("ReminderSoundFile: ", currentMail.ReminderSoundFile)
            report = report &amp; AddToReportIfNotBlank("ReminderTime: ", currentMail.ReminderTime)
            report = report &amp; AddToReportIfNotBlank("ReminderTime: ", currentMail.RemoteStatus)

            report = report &amp; AddToReportIfNotBlank("ReplyRecipientNames: ", currentMail.ReplyRecipientNames)
            
            If currentMail.ReplyRecipients.Count &gt; 0 Then
                report = report &amp; "ReplyRecipients: " &amp; vbCrLf
                For Each currentRecipient In currentMail.ReplyRecipients
                    report = report &amp; vbTab &amp; "Name: " &amp; currentRecipient.Name &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "Address: " &amp; currentRecipient.Address &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "AddressEntry: " &amp; currentRecipient.AddressEntry &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "AutoResponse: " &amp; currentRecipient.AutoResponse &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "Class: " &amp; currentRecipient.Class &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "DisplayType: " &amp; currentRecipient.DisplayType &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "EntryID: " &amp; currentRecipient.entryID &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "Index: " &amp; currentRecipient.Index &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "MeetingResponseStatus: " &amp; currentRecipient.MeetingResponseStatus &amp; vbCrLf
                    'report = report &amp; vbTab &amp; vbTab &amp; "Parent: " &amp; currentRecipient.Parent &amp; vbCrLf
                    'report = report &amp; vbTab &amp; vbTab &amp; "PropertyAccessor: " &amp; currentRecipient.PropertyAccessor &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "Resolved: " &amp; currentRecipient.Resolved &amp; vbCrLf
                    'report = report &amp; vbTab &amp; vbTab &amp; "Session: " &amp; currentRecipient.Session &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "TrackingStatus: " &amp; currentRecipient.TrackingStatus &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "TrackingStatusTime: " &amp; currentRecipient.TrackingStatusTime &amp; vbCrLf
                    report = report &amp; vbTab &amp; vbTab &amp; "Type: " &amp; currentRecipient.Type &amp; vbCrLf
                Next
                report = report &amp; vbCrLf
            End If
            
            
            report = report &amp; AddToReportIfNotBlank("Saved: ", currentMail.Saved)
            report = report &amp; AddToReportIfNotBlank("Subject: ", currentMail.Subject)
            report = report &amp; AddToReportIfNotBlank("Submitted: ", currentMail.Submitted)
            ' Not Available for Outlook 2003
            'report = report &amp; AddToReportIfNotBlank("TaskCompletedDate: ", currentMail.TaskCompletedDate)
            ' Not Available for Outlook 2003
            'report = report &amp; AddToReportIfNotBlank("TaskDueDate: ", currentMail.TaskDueDate)
            ' Not Available for Outlook 2003
            'report = report &amp; AddToReportIfNotBlank("TaskStartDate: ", currentMail.TaskStartDate)
            ' Not Available for Outlook 2003
            'report = report &amp; AddToReportIfNotBlank("TaskSubject: ", currentMail.TaskSubject)
            report = report &amp; AddToReportIfNotBlank("To: ", currentMail.To)
            ' Not Available for Outlook 2003
            ' report = report &amp; AddToReportIfNotBlank("ToDoTaskOrdinal: ", currentMail.ToDoTaskOrdinal)
            report = report &amp; AddToReportIfNotBlank("UnRead: ", currentMail.UnRead)
            'report = report &amp; AddToReportIfNotBlank("UserProperties: ", currentMail.UserProperties)
            report = report &amp; AddToReportIfNotBlank("VotingOptions: ", currentMail.VotingOptions)
            report = report &amp; AddToReportIfNotBlank("VotingResponse: ", currentMail.VotingResponse)
            
            report = report &amp; vbCrLf
            report = report &amp; vbCrLf
            report = report &amp; "Body: " &amp; vbCrLf
            report = report &amp; currentMail.Body &amp; vbCrLf
            report = report &amp; vbCrLf
            report = report &amp; vbCrLf
            report = report &amp; "HTML Body: " &amp; vbCrLf
            report = report &amp; currentMail.HTMLBody &amp; vbCrLf
            report = report &amp; vbCrLf
            report = report &amp; vbCrLf
            report = report &amp; vbCrLf
            report = report &amp; vbCrLf
        End If
    Next
    
    Call CreateReportAsEmail("Current Email Report", report)
    
End Sub

Private Function AddToReportIfNotBlank(FieldName As String, FieldValue As String)
    AddToReportIfNotBlank = ""
    If (FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, report As String)
    On Error GoTo On_Error

    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")

    mail.Subject = Title
    mail.Body = report

    mail.Save
    mail.Display
    

Exiting:
        Set Session = Nothing
        Exit Sub

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name> info on currently selected email using various Property Syntaxes (DASL)</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name> info on currently selected email using various Property Syntaxes (DASL)</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets info on the currently selected email using propertyAccessor and various syntaxes
' (see other scripts at http://www.GregThatcher.com for other ways to get email properties)
' Property Tag Syntax looks like this http://schemas.microsoft.com/mapi/proptag/0x0005000b
' Property Tag Syntax is used for Outlook 'Properties' (defined by Outlook Object Model)
'
' Property ID Syntax looks like this http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8586001f
' Property ID Syntax is used for MAPI Named Properties (optional Outlook properties that can't be deleted) and UserProperties (properties you can add which are visible to the user)
'
' Named Property Syntax looks like this http://schemas.microsoft.com/mapi/string folloowed by a property name
' Named Property Syntax is used to create and view 'Named Properties" (properties you can create, but which are not visible to the user)
'
' Office document syntax looks like this: urn:schemas-microsoft-com:office:outlook#source-table-label
'
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' THIS SCRIPT WILL ONLY RUN ON OUTLOOK 2007 OR LATER (it won't work on Outlook 2003 -- there is no propertyAccessor)
'
' To find the DASL definition of Outlook Properties, use the method described in Professional Outlook 2007 Programming (Programmer to Programmer) by Ken Slovak
' From the 'Views' menu, create a new view (but don't save it)
' Click on the 'Advanced' tab, and choose 'Filter'
' Choose a Field from the 'Field' dropdown, also choose a condition and value
' Click on the 'Sql tab'
' Check the 'Edit these Criteria' checkbox
'

Public Sub GetCurrentMailInfoUsingpropertyAccessor()
    Dim Session As Outlook.NameSpace
    Dim currentExplorer As Explorer
    Dim Selection As Selection
    Dim currentItem As Object
    Dim currentMail As MailItem
    Dim report As String
    Dim propertyAccessor As Outlook.PropertyAccessor
    Dim stringArray() As String
    Dim index
    Dim currentString
    Dim tempVal
    
    Set currentExplorer = Application.ActiveExplorer
    Set Selection = currentExplorer.Selection
    
    'for all items do...
    For Each currentItem In Selection
        If currentItem.Class = olMail Then
            Set currentMail = currentItem
            
            Set propertyAccessor = currentMail.PropertyAccessor
    
            
        
            report = report &amp; AddToReportIfNotBlank("Auto Forwarded", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0005000b")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Bcc", propertyAccessor.GetProperty("urn:schemas:calendar:resources")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Billing Information", propertyAccessor.GetProperty("urn:schemas:contacts:billinginformation")) &amp; vbCrLf
            stringArray() = propertyAccessor.GetProperty("urn:schemas-microsoft-com:office:office#Keywords")
            For index = LBound(stringArray) To UBound(stringArray)
                report = report &amp; "Categories (" &amp; index &amp; ") " &amp; stringArray(index) &amp; vbCrLf
            Next index
            report = report &amp; AddToReportIfNotBlank("Cc", propertyAccessor.GetProperty("urn:schemas:httpmail:displaycc")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Changed By", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3ffa001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Contacts", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8586001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Conversation", propertyAccessor.GetProperty("urn:schemas:httpmail:thread-topic")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Created", propertyAccessor.GetProperty("urn:schemas:calendar:created")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Defer Until", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/deferred-delivery-iso")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Do Not AutoArchive", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/850e000b")) &amp; vbCrLf

            report = report &amp; AddToReportIfNotBlank("Due Date", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062003-0000-0000-C000-000000000046}/81050040")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("E-mail Account", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8580001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Expires", propertyAccessor.GetProperty("urn:schemas:mailheader:expiry-date")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Flag Complated Date", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x10910040")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Flag Status", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x10900003")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Follow Up Flag", propertyAccessor.GetProperty("urn:schemas:httpmail:messageflag")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("From", propertyAccessor.GetProperty("urn:schemas:httpmail:fromname")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Have Replies Sent To", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0050001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("IMAP Status", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85700003")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Importance", propertyAccessor.GetProperty("urn:schemas:httpmail:importance")) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("In Folder", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0e05001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("InfoPath Form Type", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85b1001f")) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("Message", propertyAccessor.GetProperty("urn:schemas:httpmail:textdescription")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Message Class", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x001a001e")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Mileage", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/mileage")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Modified", propertyAccessor.GetProperty("DAV:getlastmodified")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Originator Delivery Requested", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/deliveryreportrequested")) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("Outlook Data File", propertyAccessor.GetProperty("urn:schemas-microsoft-com:office:outlook#source-table-label")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Outlook Internal Version", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85520003")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Outlook Version", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8554001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Receipt Requested", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/readreceiptrequested")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Received", propertyAccessor.GetProperty("urn:schemas:httpmail:datereceived")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Received Representing Name", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0044001f")) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("Recipient Name", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/received_by_name")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Relevance", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x10840003")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Reminder", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8503000b")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Remote Status", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85110003")) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("Retrieval Time", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062014-0000-0000-C000-000000000046}/8f040003")) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("RSS Feed", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062041-0000-0000-C000-000000000046}/8904001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Sensitivity", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/sensitivity-long")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Sent", propertyAccessor.GetProperty("urn:schemas:httpmail:date")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Signed By", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00020328-0000-0000-C000-000000000046}/9104001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Start Date", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062003-0000-0000-C000-000000000046}/81040040")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Subject", propertyAccessor.GetProperty("urn:schemas:httpmail:subject")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Task Subject", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85a4001f")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("To", propertyAccessor.GetProperty("urn:schemas:httpmail:displayto")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Tracking Status", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{0006200B-0000-0000-C000-000000000046}/88090003")) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("Voting Response", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8524001f")) &amp; vbCrLf
           
        End If
    Next
    
    Call CreateReportAsEmail("Email properties from PropertyAccessor using various Property Syntaxes", report)
End Sub


Private Function AddToReportIfNotBlank(FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, report As String)
    On Error GoTo On_Error

    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")

    mail.Subject = Title
    mail.Body = report

    mail.Save
    mail.Display
    

Exiting:
        Set Session = Nothing
        Exit Sub

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name> list of Outlook Calendar Appointments using the Outlook Object Model</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name> list of Outlook Calendar Appointments using the Outlook Object Model</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Calendar Appointments and their Properties using the Outlook Object Model
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' See http://www.GregThatcher.com for other ways to get the properties of Appointments
Public Sub GetListOfAppointmentsUsingOutlookObjectModel()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim AppointmentsFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentAppointment As AppointmentItem
    Set Session = Application.Session
    
    Set AppointmentsFolder = Session.GetDefaultFolder(olFolderCalendar)
    
    For Each currentItem In AppointmentsFolder.Items
        If (currentItem.Class = olAppointment) Then
            Set currentAppointment = currentItem
            
            'Call AddToReportIfNotBlank(Report, "Actions", currentAppointment.Actions)
            Call AddToReportIfNotBlank(Report, "AllDayEvent", currentAppointment.AllDayEvent)
            ' Call AddToReportIfNotBlank(Report, "Attachments", currentAppointment.Attachments)
            Call AddToReportIfNotBlank(Report, "AutoResolvedWinner", currentAppointment.AutoResolvedWinner)
            Call AddToReportIfNotBlank(Report, "BillingInformation", currentAppointment.BillingInformation)
            Call AddToReportIfNotBlank(Report, "Body", currentAppointment.Body)
            Call AddToReportIfNotBlank(Report, "BusyStatus", currentAppointment.BusyStatus)
            Call AddToReportIfNotBlank(Report, "Categories", currentAppointment.Categories)
            Call AddToReportIfNotBlank(Report, "Class", currentAppointment.Class)
            Call AddToReportIfNotBlank(Report, "Companies", currentAppointment.Companies)
            ' Call AddToReportIfNotBlank(Report, "Conflicts", currentAppointment.Conflicts)
            ' Call AddToReportIfNotBlank(Report, "ConversationID", currentAppointment.ConversationID)
            Call AddToReportIfNotBlank(Report, "ConversationIndex", currentAppointment.ConversationIndex)
            Call AddToReportIfNotBlank(Report, "ConversationTopic", currentAppointment.ConversationTopic)
            Call AddToReportIfNotBlank(Report, "CreationTime", currentAppointment.CreationTime)
            Call AddToReportIfNotBlank(Report, "DownloadState", currentAppointment.DownloadState)
            Call AddToReportIfNotBlank(Report, "Duration", currentAppointment.Duration)
            Call AddToReportIfNotBlank(Report, "End", currentAppointment.End)
            Call AddToReportIfNotBlank(Report, "EndInEndTimeZone", currentAppointment.EndInEndTimeZone)
            Call AddToReportIfNotBlank(Report, "EndTimeZone", currentAppointment.EndTimeZone)
            Call AddToReportIfNotBlank(Report, "EndUTC", currentAppointment.EndUTC)
            
            Call AddToReportIfNotBlank(Report, "EntryID", currentAppointment.EntryID)
            Call AddToReportIfNotBlank(Report, "ForceUpdateToAllAttendees", currentAppointment.ForceUpdateToAllAttendees)
            Call AddToReportIfNotBlank(Report, "FormDescription", currentAppointment.FormDescription)
            Call AddToReportIfNotBlank(Report, "GlobalAppointmentID", currentAppointment.GlobalAppointmentID)
            Call AddToReportIfNotBlank(Report, "Importance", currentAppointment.Importance)
            Call AddToReportIfNotBlank(Report, "InternetCodepage", currentAppointment.InternetCodepage)
            Call AddToReportIfNotBlank(Report, "IsConflict", currentAppointment.IsConflict)
            Call AddToReportIfNotBlank(Report, "IsRecurring", currentAppointment.IsRecurring)
            ' Call AddToReportIfNotBlank(Report, "ItemProperties", currentAppointment.ItemProperties)
            Call AddToReportIfNotBlank(Report, "LastModificationTime", currentAppointment.LastModificationTime)
            
            ' Call AddToReportIfNotBlank(Report, "Links", currentAppointment.Links)
            Call AddToReportIfNotBlank(Report, "Location", currentAppointment.Location)
            Call AddToReportIfNotBlank(Report, "MarkForDownload", currentAppointment.MarkForDownload)
            Call AddToReportIfNotBlank(Report, "MeetingStatus", currentAppointment.MeetingStatus)
            Call AddToReportIfNotBlank(Report, "MeetingWorkspaceURL", currentAppointment.MeetingWorkspaceURL)
            Call AddToReportIfNotBlank(Report, "MessageClass", currentAppointment.MessageClass)
            Call AddToReportIfNotBlank(Report, "Mileage", currentAppointment.Mileage)
            Call AddToReportIfNotBlank(Report, "NoAging", currentAppointment.NoAging)
            Call AddToReportIfNotBlank(Report, "OptionalAttendees", currentAppointment.OptionalAttendees)
            Call AddToReportIfNotBlank(Report, "Organizer", currentAppointment.Organizer)
            
            Call AddToReportIfNotBlank(Report, "OutlookInternalVersion", currentAppointment.OutlookInternalVersion)
            Call AddToReportIfNotBlank(Report, "OutlookVersion", currentAppointment.OutlookVersion)
            ' Call AddToReportIfNotBlank(Report, "Recipients", currentAppointment.Recipients)
            Call AddToReportIfNotBlank(Report, "RecurrenceState", currentAppointment.RecurrenceState)
            Call AddToReportIfNotBlank(Report, "ReminderMinutesBeforeStart", currentAppointment.ReminderMinutesBeforeStart)
            Call AddToReportIfNotBlank(Report, "ReminderOverrideDefault", currentAppointment.ReminderOverrideDefault)
            Call AddToReportIfNotBlank(Report, "ReminderPlaySound", currentAppointment.ReminderPlaySound)
            Call AddToReportIfNotBlank(Report, "ReminderSet", currentAppointment.ReminderSet)
            Call AddToReportIfNotBlank(Report, "ReminderSoundFile", currentAppointment.ReminderSoundFile)
            Call AddToReportIfNotBlank(Report, "ReplyTime", currentAppointment.ReplyTime)
            
            
            Call AddToReportIfNotBlank(Report, "RequiredAttendees", currentAppointment.RequiredAttendees)
            Call AddToReportIfNotBlank(Report, "Resources", currentAppointment.Resources)
            Call AddToReportIfNotBlank(Report, "ResponseRequested", currentAppointment.ResponseRequested)
            Call AddToReportIfNotBlank(Report, "ResponseStatus", currentAppointment.ResponseStatus)
            ' Call AddToReportIfNotBlank(Report, "RTFBody", currentAppointment.RTFBody)
            Call AddToReportIfNotBlank(Report, "Saved", currentAppointment.Saved)
            ' Call AddToReportIfNotBlank(Report, "SendUsingAccount", currentAppointment.SendUsingAccount)
            Call AddToReportIfNotBlank(Report, "Sensitivity", currentAppointment.Sensitivity)
            Call AddToReportIfNotBlank(Report, "Size", currentAppointment.Size)
            Call AddToReportIfNotBlank(Report, "Start", currentAppointment.Start)
            
            Call AddToReportIfNotBlank(Report, "StartTimeZone", currentAppointment.StartTimeZone)
            Call AddToReportIfNotBlank(Report, "StartUTC", currentAppointment.StartUTC)
            Call AddToReportIfNotBlank(Report, "Subject", currentAppointment.Subject)
            Call AddToReportIfNotBlank(Report, "UnRead", currentAppointment.UnRead)
            ' Call AddToReportIfNotBlank(Report, "UserProperties", currentAppointment.UserProperties)
            
            Report = Report &amp; "--------------------------------------------------------------------------------------------------------"
            Report = Report &amp; vbCrLf &amp; vbCrLf
        End If
        
    Next
    
    
    Call CreateReportAsEmail("List of Appointments", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting
    
End Sub

Private Function AddToReportIfNotBlank(Report As String, FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
        Report = Report &amp; AddToReportIfNotBlank
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As addressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.addressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>GetListOfFolders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>GetListOfFolders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Public Sub GetListOfFolders()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim Folders As Outlook.Folders
    Dim Folder As Outlook.Folder
    Dim reply As Integer
    
    Set Session = Application.Session
    
    Set Folders = Session.Folders
    For Each Folder In Folders
        Call RecurseFolders(Folder, vbTab, Report)
        Report = Report &amp; "---------------------------------------------------------------------------" &amp; vbCrLf
    Next
    Dim retValue As Boolean
    retValue = CreateReportAsEmail("List of Folders", Report)
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub


Private Sub RecurseFolders(CurrentFolder As Outlook.Folder, Tabs, Report As String)
    Dim Table As Outlook.Table
    Dim Row As Outlook.Row
    Dim rowValues() As Variant
    Dim SubFolders As Outlook.Folders
    Dim SubFolder As Outlook.Folder
    
    Report = Report &amp; Tabs &amp; "Folder Name: " &amp; CurrentFolder.Name &amp; " (Store: " &amp; CurrentFolder.Store.DisplayName &amp; ")" &amp; vbCrLf
    
    Set SubFolders = CurrentFolder.Folders
    For Each SubFolder In SubFolders
        Call RecurseFolders(SubFolder, Tabs &amp; vbTab, Report)
    Next SubFolder

End Sub

' VBA Function which displays a report inside an email
Public Function CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As addressEntry
    Dim Inbox As Outlook.Folder
    
    CreateReportAsEmail = True
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.addressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Function
On_Error:
    CreateReportAsEmail = False
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>gets list of all Outlook Emails in the Currently Selected Folder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>gets list of all Outlook Emails in the Currently Selected Folder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script to get list of All Emails IN CURRENTLY SELECTED FOLDER
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com

Public Sub GetListOfEmails()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim Folder As Outlook.Folder
    
    Set Session = Application.Session
        
    Set Folder = Application.ActiveExplorer.CurrentFolder
    
    Call GetAllEmailsInFolder(Folder, Report)
    
    Dim retValue As Boolean
    retValue = CreateReportAsEmail("List of Emails", Report)
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub


Private Sub GetAllEmailsInFolder(CurrentFolder As Outlook.Folder, Report As String)
    Dim CurrentItem
    
    Report = Report &amp; "Folder Name: " &amp; CurrentFolder.Name &amp; " (Store: " &amp; CurrentFolder.Store.DisplayName &amp; ")" &amp; vbCrLf
    

    For Each CurrentItem In CurrentFolder.Items
        Report = Report &amp; CurrentItem.Subject
        Report = Report &amp; vbCrLf
        Report = Report &amp; CurrentItem.Body
        Report = Report &amp; vbCrLf
        Report = Report &amp; "----------------------------------------------------------------------------------------"
        Report = Report &amp; vbCrLf
    Next
    
End Sub

' VBA Function which displays a report inside an email
Public Function CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.Folder
    
    CreateReportAsEmail = True
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.AddressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Function
On_Error:
    CreateReportAsEmail = False
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>info on Attachments in currently selected email</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>info on Attachments in currently selected email</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets info on Attachments of Currently Selected Email
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Make sure you have selected an email with Attachments before running
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub GetAttachmentsOfCurrentEmail()
    Dim Session As Outlook.NameSpace
    Dim currentExplorer As Explorer
    Dim Selection As Selection
    Dim currentItem As Object
    Dim currentMail As MailItem
    Dim attachment As attachment
    Dim Report As String

    

    Set currentExplorer = Application.ActiveExplorer
    Set Selection = currentExplorer.Selection

    For Each currentItem In Selection
        If currentItem.Class = olMail Then
            Set currentMail = currentItem
            For Each attachment In currentMail.Attachments
                Report = Report &amp; GetAttachmentInfo(attachment)
                Report = Report &amp; vbCrLf &amp; "------------------------------------------------------------------------" &amp; vbCrLf
            Next

            Call CreateReportAsEmail("Attachment Report", Report)
        End If
    Next

End Sub

 

Public Function GetAttachmentInfo(attachment As attachment)
    On Error GoTo On_Error
    Dim Report

    GetAttachmentInfo = ""

    Report = Report &amp; "Block Level: " &amp; attachment.BlockLevel &amp; vbCrLf
    Report = Report &amp; "Display Name: " &amp; attachment.DisplayName &amp; vbCrLf
    Report = Report &amp; "File Name: " &amp; attachment.FileName &amp; vbCrLf
    Report = Report &amp; "Index: " &amp; attachment.Index &amp; vbCrLf
    Report = Report &amp; "Path Name: " &amp; attachment.PathName &amp; vbCrLf
    Report = Report &amp; "Position: " &amp; attachment.Position &amp; vbCrLf
    Report = Report &amp; "Size: " &amp; attachment.Size &amp; vbCrLf
    Report = Report &amp; "Type: " &amp; attachment.Type &amp; vbCrLf
    
    GetAttachmentInfo = Report

Exiting:
        Exit Function

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Function

 
' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error

    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As addressEntry
    Dim Inbox As Outlook.Folder

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")

    mail.Subject = Title
    mail.Body = Report

    mail.Save
    mail.Display
    

Exiting:
        Set Session = Nothing
        Exit Sub

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>info on currently selected email using Property Tag Syntax</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>info on currently selected email using Property Tag Syntax</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets info on the currently selected email using 'Property Tag Syntax'
' (see other scripts a http://www.GregThatcher.com for other ways to get email properties)
' Property Tag Syntax is used for Outlook Properties (defined by Outlook Object Model)
' as opposed to Named Mapi Properties (defined by Outlook, but only exist if Outlook has added that property to the item of interest)
' or UserProperties (visible to users, and can be added dynamically to an item) or Named Properties (not visible users, can be added dynamically)
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' THIS SCRIPT WILL ONLY RUN ON OUTLOOK 2007 OR LATER (it won't work on Outlook 2003)

' Types of Properties
Const PT_BOOLEAN As String = "000B"
Const PT_BINARY As String = "0102"
Const PT_MV_BINARY As String = "1102"
Const PT_DOUBLE As String = "0005"
Const PT_LONG As String = "0003"
Const PT_OBJECT As String = "000D"
Const PT_STRING8 As String = "001E"
Const PT_MV_STRING8 As String = "101E"
Const PT_SYSTIME As String = "0040"
Const PT_UNICODE As String = "001F"
Const PT_MV_UNICODE As String = "101F"

Public Sub GetCurrentMailInfoUsingPropertyTagSyntax()
    Dim Session As Outlook.NameSpace
    Dim currentExplorer As Explorer
    Dim Selection As Selection
    Dim currentItem As Object
    Dim currentMail As MailItem
    Dim report As String
    Dim propertyAccessor As Outlook.PropertyAccessor
    
    Set currentExplorer = Application.ActiveExplorer
    Set Selection = currentExplorer.Selection
    
    'for all items do...
    For Each currentItem In Selection
        If currentItem.Class = olMail Then
            Set currentMail = currentItem
            
            Set propertyAccessor = currentMail.PropertyAccessor
    
            report = report &amp; AddToReportIfNotBlank("PR_MESSAGE_CLASS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x001A" &amp; PT_STRING8)) &amp; vbCrLf
    
            report = report &amp; AddToReportIfNotBlank("PR_SUBJECT", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0037" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_CLIENT_SUBMIT_TIME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0039" &amp; PT_SYSTIME)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENT_REPRESENTING_SEARCH_KEY", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x003B" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SUBJECT_PREFIX PT_STRING8", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x003D" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_RECEIVED_BY_ENTRYID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x003F" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_RECEIVED_BY_NAME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0040" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENT_REPRESENTING_ENTRYID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0041" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENT_REPRESENTING_NAME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0042" &amp; PT_STRING8)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("PR_REPLY_RECIPIENT_ENTRIES", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x004F" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_REPLY_RECIPIENT_NAMES", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0050" &amp; PT_STRING8)) &amp; vbCrLf
    
            report = report &amp; AddToReportIfNotBlank("PR_RECEIVED_BY_SEARCH_KEY", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0051" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENT_REPRESENTING_ADDRTYPE", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0064" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENT_REPRESENTING_EMAIL_ADDRESS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0065" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_CONVERSATION_TOPIC", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0070" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_CONVERSATION_INDEX", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0071" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_RECEIVED_BY_ADDRTYPE", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0075" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_RECEIVED_BY_EMAIL_ADDRESS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0076" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_TRANSPORT_MESSAGE_HEADERS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x007D" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENDER_ENTRYID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0C19" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENDER_NAME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0C1A" &amp; PT_STRING8)) &amp; vbCrLf
    
            report = report &amp; AddToReportIfNotBlank("PR_SENDER_SEARCH_KEY", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0C1D" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENDER_ADDRTYPE", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0C1E" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SENDER_EMAIL_ADDRESS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0C1F" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_DISPLAY_BCC", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E02" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_DISPLAY_CC", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E03" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_DISPLAY_TO", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E04" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_MESSAGE_DELIVERY_TIME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E06" &amp; PT_SYSTIME)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_MESSAGE_FLAGS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E07" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_MESSAGE_SIZE", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E08" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_PARENT_ENTRYID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E09" &amp; PT_BINARY))) &amp; vbCrLf
    
            'report = report &amp; AddToReportIfNotBlank("PR_MESSAGE_RECIPIENTS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E12" &amp; PT_OBJECT)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("PR_MESSAGE_ATTACHMENTS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E13" &amp; PT_OBJECT)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_HASATTACH", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E1B" &amp; PT_BOOLEAN)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_NORMALIZED_SUBJECT", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E1D" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_RTF_IN_SYNC", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E1F" &amp; PT_BOOLEAN)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_PRIMARY_SEND_ACCT", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E28" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_NEXT_SEND_ACCT", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0E29" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_ACCESS", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FF4" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_ACCESS_LEVEL", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FF7" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_MAPPING_SIGNATURE", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FF8" &amp; PT_BINARY))) &amp; vbCrLf
    
            report = report &amp; AddToReportIfNotBlank("PR_RECORD_KEY", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FF9" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_STORE_RECORD_KEY", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FFA" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_STORE_ENTRYID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FFB" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_OBJECT_TYPE", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FFE" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_ENTRYID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0FFF" &amp; PT_BINARY))) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("PR_BODY", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x1000" &amp; PT_STRING8)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("PR_RTF_COMPRESSED", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x1009" &amp; PT_BINARY))) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("PR_HTML", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x1013" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_INTERNET_MESSAGE_ID", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x1035" &amp; PT_STRING8)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("PR_LIST_UNSUBSCRIBE", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x1045" &amp; PT_STRING8)) &amp; vbCrLf
    
            'report = report &amp; AddToReportIfNotBlank("N/A", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x1046" &amp; PT_STRING8)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_CREATION_TIME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3007" &amp; PT_SYSTIME)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_LAST_MODIFICATION_TIME", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3008" &amp; PT_SYSTIME)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_SEARCH_KEY", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x300B" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_STORE_SUPPORT_MASK", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x340D" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("N/A", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x340F" &amp; PT_LONG)) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_MDB_PROVIDER", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3414" &amp; PT_BINARY))) &amp; vbCrLf
            report = report &amp; AddToReportIfNotBlank("PR_INTERNET_CPID", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3FDE" &amp; PT_LONG)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("SideEffects", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x8005" &amp; PT_LONG)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("InetAcctID", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x802A" &amp; PT_STRING8)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("InetAcctName", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x804F" &amp; PT_STRING8)) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("RemoteEID", propertyAccessor.BinaryToString(propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x8066" &amp; PT_BINARY))) &amp; vbCrLf
            'report = report &amp; AddToReportIfNotBlank("x-rcpt-to", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x80AD" &amp; PT_STRING8)) &amp; vbCrLf

            
        End If
    Next
    
    Call CreateReportAsEmail("Email properties from PropertyAccessor using Property Tag Syntax", report)
End Sub


Private Function AddToReportIfNotBlank(FieldName As String, FieldValue As String)
    AddToReportIfNotBlank = ""
    If (FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, report As String)
    On Error GoTo On_Error

    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")

    mail.Subject = Title
    mail.Body = report

    mail.Save
    mail.Display
    

Exiting:
        Set Session = Nothing
        Exit Sub

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>list of Outlook Calendar Appointments and uses the Property Accessor</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>list of Outlook Calendar Appointments and uses the Property Accessor</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Calendar Appointments and their Properties and uses the Property Accessor
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' See http://www.GregThatcher.com for other ways to get the properties of Appointments
Public Sub GetListOfAppointmentsUsingPropertyAccessor()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim AppointmentsFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentAppointment As AppointmentItem
    Set Session = Application.Session
    
    Set AppointmentsFolder = Session.GetDefaultFolder(olFolderCalendar)
    
    For Each currentItem In AppointmentsFolder.Items
        If (currentItem.Class = olAppointment) Then
            Set currentAppointment = currentItem
            
            'Call AddToReportIfNotBlank(Report, "Actions", currentAppointment.Actions)
            Call AddToReportIfNotBlank(Report, "AllDayEvent", currentAppointment.AllDayEvent)
            ' Call AddToReportIfNotBlank(Report, "Attachments", currentAppointment.Attachments)
            Call AddToReportIfNotBlank(Report, "AutoResolvedWinner", currentAppointment.AutoResolvedWinner)
            Call AddToReportIfNotBlank(Report, "BillingInformation", currentAppointment.BillingInformation)
            Call AddToReportIfNotBlank(Report, "Body", currentAppointment.Body)
            Call AddToReportIfNotBlank(Report, "BusyStatus", currentAppointment.BusyStatus)
            Call AddToReportIfNotBlank(Report, "Categories", currentAppointment.Categories)
            Call AddToReportIfNotBlank(Report, "Class", currentAppointment.Class)
            Call AddToReportIfNotBlank(Report, "Companies", currentAppointment.Companies)
            ' Call AddToReportIfNotBlank(Report, "Conflicts", currentAppointment.Conflicts)
            ' Call AddToReportIfNotBlank(Report, "ConversationID", currentAppointment.ConversationID)
            Call AddToReportIfNotBlank(Report, "ConversationIndex", currentAppointment.ConversationIndex)
            Call AddToReportIfNotBlank(Report, "ConversationTopic", currentAppointment.ConversationTopic)
            Call AddToReportIfNotBlank(Report, "CreationTime", currentAppointment.CreationTime)
            Call AddToReportIfNotBlank(Report, "DownloadState", currentAppointment.DownloadState)
            Call AddToReportIfNotBlank(Report, "Duration", currentAppointment.Duration)
            Call AddToReportIfNotBlank(Report, "End", currentAppointment.End)
            Call AddToReportIfNotBlank(Report, "EndInEndTimeZone", currentAppointment.EndInEndTimeZone)
            Call AddToReportIfNotBlank(Report, "EndTimeZone", currentAppointment.EndTimeZone)
            Call AddToReportIfNotBlank(Report, "EndUTC", currentAppointment.EndUTC)
            
            Call AddToReportIfNotBlank(Report, "EntryID", currentAppointment.EntryID)
            Call AddToReportIfNotBlank(Report, "ForceUpdateToAllAttendees", currentAppointment.ForceUpdateToAllAttendees)
            Call AddToReportIfNotBlank(Report, "FormDescription", currentAppointment.FormDescription)
            Call AddToReportIfNotBlank(Report, "GlobalAppointmentID", currentAppointment.GlobalAppointmentID)
            Call AddToReportIfNotBlank(Report, "Importance", currentAppointment.Importance)
            Call AddToReportIfNotBlank(Report, "InternetCodepage", currentAppointment.InternetCodepage)
            Call AddToReportIfNotBlank(Report, "IsConflict", currentAppointment.IsConflict)
            Call AddToReportIfNotBlank(Report, "IsRecurring", currentAppointment.IsRecurring)
            ' Call AddToReportIfNotBlank(Report, "ItemProperties", currentAppointment.ItemProperties)
            Call AddToReportIfNotBlank(Report, "LastModificationTime", currentAppointment.LastModificationTime)
            
            ' Call AddToReportIfNotBlank(Report, "Links", currentAppointment.Links)
            Call AddToReportIfNotBlank(Report, "Location", currentAppointment.Location)
            Call AddToReportIfNotBlank(Report, "MarkForDownload", currentAppointment.MarkForDownload)
            Call AddToReportIfNotBlank(Report, "MeetingStatus", currentAppointment.MeetingStatus)
            Call AddToReportIfNotBlank(Report, "MeetingWorkspaceURL", currentAppointment.MeetingWorkspaceURL)
            Call AddToReportIfNotBlank(Report, "MessageClass", currentAppointment.MessageClass)
            Call AddToReportIfNotBlank(Report, "Mileage", currentAppointment.Mileage)
            Call AddToReportIfNotBlank(Report, "NoAging", currentAppointment.NoAging)
            Call AddToReportIfNotBlank(Report, "OptionalAttendees", currentAppointment.OptionalAttendees)
            Call AddToReportIfNotBlank(Report, "Organizer", currentAppointment.Organizer)
            
            Call AddToReportIfNotBlank(Report, "OutlookInternalVersion", currentAppointment.OutlookInternalVersion)
            Call AddToReportIfNotBlank(Report, "OutlookVersion", currentAppointment.OutlookVersion)
            ' Call AddToReportIfNotBlank(Report, "Recipients", currentAppointment.Recipients)
            Call AddToReportIfNotBlank(Report, "RecurrenceState", currentAppointment.RecurrenceState)
            Call AddToReportIfNotBlank(Report, "ReminderMinutesBeforeStart", currentAppointment.ReminderMinutesBeforeStart)
            Call AddToReportIfNotBlank(Report, "ReminderOverrideDefault", currentAppointment.ReminderOverrideDefault)
            Call AddToReportIfNotBlank(Report, "ReminderPlaySound", currentAppointment.ReminderPlaySound)
            Call AddToReportIfNotBlank(Report, "ReminderSet", currentAppointment.ReminderSet)
            Call AddToReportIfNotBlank(Report, "ReminderSoundFile", currentAppointment.ReminderSoundFile)
            Call AddToReportIfNotBlank(Report, "ReplyTime", currentAppointment.ReplyTime)
            
            
            Call AddToReportIfNotBlank(Report, "RequiredAttendees", currentAppointment.RequiredAttendees)
            Call AddToReportIfNotBlank(Report, "Resources", currentAppointment.Resources)
            Call AddToReportIfNotBlank(Report, "ResponseRequested", currentAppointment.ResponseRequested)
            Call AddToReportIfNotBlank(Report, "ResponseStatus", currentAppointment.ResponseStatus)
            ' Call AddToReportIfNotBlank(Report, "RTFBody", currentAppointment.RTFBody)
            Call AddToReportIfNotBlank(Report, "Saved", currentAppointment.Saved)
            ' Call AddToReportIfNotBlank(Report, "SendUsingAccount", currentAppointment.SendUsingAccount)
            Call AddToReportIfNotBlank(Report, "Sensitivity", currentAppointment.Sensitivity)
            Call AddToReportIfNotBlank(Report, "Size", currentAppointment.Size)
            Call AddToReportIfNotBlank(Report, "Start", currentAppointment.Start)
            
            Call AddToReportIfNotBlank(Report, "StartTimeZone", currentAppointment.StartTimeZone)
            Call AddToReportIfNotBlank(Report, "StartUTC", currentAppointment.StartUTC)
            Call AddToReportIfNotBlank(Report, "Subject", currentAppointment.Subject)
            Call AddToReportIfNotBlank(Report, "UnRead", currentAppointment.UnRead)
            ' Call AddToReportIfNotBlank(Report, "UserProperties", currentAppointment.UserProperties)
            
            Report = Report &amp; "--------------------------------------------------------------------------------------------------------"
            Report = Report &amp; vbCrLf &amp; vbCrLf
        End If
        
    Next
    
    
    Call CreateReportAsEmail("List of Appointments", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting
    
End Sub

Private Function AddToReportIfNotBlank(Report As String, FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
        Report = Report &amp; AddToReportIfNotBlank
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As addressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.addressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>list of Outlook Calendar Appointments using the Outlook Object Model</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>list of Outlook Calendar Appointments using the Outlook Object Model</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Calendar Appointments and their Properties using the Outlook Object Model
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' See http://www.GregThatcher.com for other ways to get the properties of Appointments
Public Sub GetListOfAppointmentsUsingOutlookObjectModel()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim AppointmentsFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentAppointment As AppointmentItem
    Set Session = Application.Session
    
    Set AppointmentsFolder = Session.GetDefaultFolder(olFolderCalendar)
    
    For Each currentItem In AppointmentsFolder.Items
        If (currentItem.Class = olAppointment) Then
            Set currentAppointment = currentItem
            
            'Call AddToReportIfNotBlank(Report, "Actions", currentAppointment.Actions)
            Call AddToReportIfNotBlank(Report, "AllDayEvent", currentAppointment.AllDayEvent)
            ' Call AddToReportIfNotBlank(Report, "Attachments", currentAppointment.Attachments)
            Call AddToReportIfNotBlank(Report, "AutoResolvedWinner", currentAppointment.AutoResolvedWinner)
            Call AddToReportIfNotBlank(Report, "BillingInformation", currentAppointment.BillingInformation)
            Call AddToReportIfNotBlank(Report, "Body", currentAppointment.Body)
            Call AddToReportIfNotBlank(Report, "BusyStatus", currentAppointment.BusyStatus)
            Call AddToReportIfNotBlank(Report, "Categories", currentAppointment.Categories)
            Call AddToReportIfNotBlank(Report, "Class", currentAppointment.Class)
            Call AddToReportIfNotBlank(Report, "Companies", currentAppointment.Companies)
            ' Call AddToReportIfNotBlank(Report, "Conflicts", currentAppointment.Conflicts)
            ' Call AddToReportIfNotBlank(Report, "ConversationID", currentAppointment.ConversationID)
            Call AddToReportIfNotBlank(Report, "ConversationIndex", currentAppointment.ConversationIndex)
            Call AddToReportIfNotBlank(Report, "ConversationTopic", currentAppointment.ConversationTopic)
            Call AddToReportIfNotBlank(Report, "CreationTime", currentAppointment.CreationTime)
            Call AddToReportIfNotBlank(Report, "DownloadState", currentAppointment.DownloadState)
            Call AddToReportIfNotBlank(Report, "Duration", currentAppointment.Duration)
            Call AddToReportIfNotBlank(Report, "End", currentAppointment.End)
            Call AddToReportIfNotBlank(Report, "EndInEndTimeZone", currentAppointment.EndInEndTimeZone)
            Call AddToReportIfNotBlank(Report, "EndTimeZone", currentAppointment.EndTimeZone)
            Call AddToReportIfNotBlank(Report, "EndUTC", currentAppointment.EndUTC)
            
            Call AddToReportIfNotBlank(Report, "EntryID", currentAppointment.EntryID)
            Call AddToReportIfNotBlank(Report, "ForceUpdateToAllAttendees", currentAppointment.ForceUpdateToAllAttendees)
            Call AddToReportIfNotBlank(Report, "FormDescription", currentAppointment.FormDescription)
            Call AddToReportIfNotBlank(Report, "GlobalAppointmentID", currentAppointment.GlobalAppointmentID)
            Call AddToReportIfNotBlank(Report, "Importance", currentAppointment.Importance)
            Call AddToReportIfNotBlank(Report, "InternetCodepage", currentAppointment.InternetCodepage)
            Call AddToReportIfNotBlank(Report, "IsConflict", currentAppointment.IsConflict)
            Call AddToReportIfNotBlank(Report, "IsRecurring", currentAppointment.IsRecurring)
            ' Call AddToReportIfNotBlank(Report, "ItemProperties", currentAppointment.ItemProperties)
            Call AddToReportIfNotBlank(Report, "LastModificationTime", currentAppointment.LastModificationTime)
            
            ' Call AddToReportIfNotBlank(Report, "Links", currentAppointment.Links)
            Call AddToReportIfNotBlank(Report, "Location", currentAppointment.Location)
            Call AddToReportIfNotBlank(Report, "MarkForDownload", currentAppointment.MarkForDownload)
            Call AddToReportIfNotBlank(Report, "MeetingStatus", currentAppointment.MeetingStatus)
            Call AddToReportIfNotBlank(Report, "MeetingWorkspaceURL", currentAppointment.MeetingWorkspaceURL)
            Call AddToReportIfNotBlank(Report, "MessageClass", currentAppointment.MessageClass)
            Call AddToReportIfNotBlank(Report, "Mileage", currentAppointment.Mileage)
            Call AddToReportIfNotBlank(Report, "NoAging", currentAppointment.NoAging)
            Call AddToReportIfNotBlank(Report, "OptionalAttendees", currentAppointment.OptionalAttendees)
            Call AddToReportIfNotBlank(Report, "Organizer", currentAppointment.Organizer)
            
            Call AddToReportIfNotBlank(Report, "OutlookInternalVersion", currentAppointment.OutlookInternalVersion)
            Call AddToReportIfNotBlank(Report, "OutlookVersion", currentAppointment.OutlookVersion)
            ' Call AddToReportIfNotBlank(Report, "Recipients", currentAppointment.Recipients)
            Call AddToReportIfNotBlank(Report, "RecurrenceState", currentAppointment.RecurrenceState)
            Call AddToReportIfNotBlank(Report, "ReminderMinutesBeforeStart", currentAppointment.ReminderMinutesBeforeStart)
            Call AddToReportIfNotBlank(Report, "ReminderOverrideDefault", currentAppointment.ReminderOverrideDefault)
            Call AddToReportIfNotBlank(Report, "ReminderPlaySound", currentAppointment.ReminderPlaySound)
            Call AddToReportIfNotBlank(Report, "ReminderSet", currentAppointment.ReminderSet)
            Call AddToReportIfNotBlank(Report, "ReminderSoundFile", currentAppointment.ReminderSoundFile)
            Call AddToReportIfNotBlank(Report, "ReplyTime", currentAppointment.ReplyTime)
            
            
            Call AddToReportIfNotBlank(Report, "RequiredAttendees", currentAppointment.RequiredAttendees)
            Call AddToReportIfNotBlank(Report, "Resources", currentAppointment.Resources)
            Call AddToReportIfNotBlank(Report, "ResponseRequested", currentAppointment.ResponseRequested)
            Call AddToReportIfNotBlank(Report, "ResponseStatus", currentAppointment.ResponseStatus)
            ' Call AddToReportIfNotBlank(Report, "RTFBody", currentAppointment.RTFBody)
            Call AddToReportIfNotBlank(Report, "Saved", currentAppointment.Saved)
            ' Call AddToReportIfNotBlank(Report, "SendUsingAccount", currentAppointment.SendUsingAccount)
            Call AddToReportIfNotBlank(Report, "Sensitivity", currentAppointment.Sensitivity)
            Call AddToReportIfNotBlank(Report, "Size", currentAppointment.Size)
            Call AddToReportIfNotBlank(Report, "Start", currentAppointment.Start)
            
            Call AddToReportIfNotBlank(Report, "StartTimeZone", currentAppointment.StartTimeZone)
            Call AddToReportIfNotBlank(Report, "StartUTC", currentAppointment.StartUTC)
            Call AddToReportIfNotBlank(Report, "Subject", currentAppointment.Subject)
            Call AddToReportIfNotBlank(Report, "UnRead", currentAppointment.UnRead)
            ' Call AddToReportIfNotBlank(Report, "UserProperties", currentAppointment.UserProperties)
            
            Report = Report &amp; "--------------------------------------------------------------------------------------------------------"
            Report = Report &amp; vbCrLf &amp; vbCrLf
        End If
        
    Next
    
    
    Call CreateReportAsEmail("List of Appointments", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting
    
End Sub

Private Function AddToReportIfNotBlank(Report As String, FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
        Report = Report &amp; AddToReportIfNotBlank
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As addressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.addressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>list of Outlook Contacts using the Outlook Object Model</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>list of Outlook Contacts using the Outlook Object Model</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Contacts
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' (see other scripts at http://www.GregThatcher.com for other ways to get contact properties)
Public Sub GetListOfContacts()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim ContactFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentContact As ContactItem
    Set Session = Application.Session
    
    Set ContactFolder = Session.GetDefaultFolder(olFolderContacts)
    
    For Each currentItem In ContactFolder.Items
        If (currentItem.Class = olContact) Then
            Set currentContact = currentItem
            
            
            Report = Report &amp; AddToReportIfNotBlank("Full Name", currentContact.FullName)
            Report = Report &amp; AddToReportIfNotBlank("Account", currentContact.Account)
            'Report = Report &amp; AddToReportIfNotBlank("Anniversary", currentContact.Anniversary)
            Report = Report &amp; AddToReportIfNotBlank("AssistantName", currentContact.AssistantName)
            Report = Report &amp; AddToReportIfNotBlank("AssistantTelephoneNumber", currentContact.AssistantTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("BillingInformation", currentContact.BillingInformation)
            'Report = Report &amp; AddToReportIfNotBlank("Birthday", currentContact.Birthday)
            Report = Report &amp; AddToReportIfNotBlank("Body", currentContact.Body)
            Report = Report &amp; AddToReportIfNotBlank("Business2TelephoneNumber", currentContact.Business2TelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddress", currentContact.BusinessAddress)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddressCity", currentContact.BusinessAddressCity)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddressCountry", currentContact.BusinessAddressCountry)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddressPostalCode", currentContact.BusinessAddressPostalCode)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddressPostOfficeBox", currentContact.BusinessAddressPostOfficeBox)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddressState", currentContact.BusinessAddressState)
            Report = Report &amp; AddToReportIfNotBlank("BusinessAddressStreet", currentContact.BusinessAddressStreet)
            'Report = Report &amp; AddToReportIfNotBlank("BusinessCardLayoutXml", currentContact.BusinessCardLayoutXml)
            Report = Report &amp; AddToReportIfNotBlank("BusinessCardType", currentContact.BusinessCardType)
            Report = Report &amp; AddToReportIfNotBlank("BusinessFaxNumber", currentContact.BusinessFaxNumber)
            Report = Report &amp; AddToReportIfNotBlank("BusinessHomePage", currentContact.BusinessHomePage)
            Report = Report &amp; AddToReportIfNotBlank("BusinessTelephoneNumber", currentContact.BusinessTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("CallbackTelephoneNumber", currentContact.CallbackTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("CarTelephoneNumber", currentContact.CarTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("Categories", currentContact.Categories)
            Report = Report &amp; AddToReportIfNotBlank("Children", currentContact.Children)
            Report = Report &amp; AddToReportIfNotBlank("Companies", currentContact.Companies)
            Report = Report &amp; AddToReportIfNotBlank("CompanyAndFullName", currentContact.CompanyAndFullName)
            Report = Report &amp; AddToReportIfNotBlank("CompanyLastFirstNoSpace", currentContact.CompanyLastFirstNoSpace)
            Report = Report &amp; AddToReportIfNotBlank("CompanyLastFirstSpaceOnly", currentContact.CompanyLastFirstSpaceOnly)
            Report = Report &amp; AddToReportIfNotBlank("CompanyMainTelephoneNumber", currentContact.CompanyMainTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("CompanyName", currentContact.CompanyName)
            Report = Report &amp; AddToReportIfNotBlank("ComputerNetworkName", currentContact.ComputerNetworkName)
            Report = Report &amp; AddToReportIfNotBlank("ConversationIndex ", currentContact.ConversationIndex)
            Report = Report &amp; AddToReportIfNotBlank("ConversationTopic", currentContact.ConversationTopic)
            Report = Report &amp; AddToReportIfNotBlank("CreationTime", currentContact.CreationTime)
            Report = Report &amp; AddToReportIfNotBlank("CustomerID", currentContact.CustomerID)
            Report = Report &amp; AddToReportIfNotBlank("Department", currentContact.Department)
            Report = Report &amp; AddToReportIfNotBlank("DownloadState", currentContact.DownloadState)
            Report = Report &amp; AddToReportIfNotBlank("Email1Address", currentContact.Email1Address)
            Report = Report &amp; AddToReportIfNotBlank("Email1AddressType", currentContact.Email1AddressType)
            Report = Report &amp; AddToReportIfNotBlank("Email1DisplayName", currentContact.Email1DisplayName)
            'Report = Report &amp; AddToReportIfNotBlank("Email1EntryID", currentContact.Email1EntryID)
            Report = Report &amp; AddToReportIfNotBlank("Email2Address", currentContact.Email2Address)
            Report = Report &amp; AddToReportIfNotBlank("Email2AddressType", currentContact.Email2AddressType)
            Report = Report &amp; AddToReportIfNotBlank("Email2DisplayName", currentContact.Email2DisplayName)
            Report = Report &amp; AddToReportIfNotBlank("Email2EntryID", currentContact.Email2EntryID)
            Report = Report &amp; AddToReportIfNotBlank("Email3Address", currentContact.Email3Address)
            Report = Report &amp; AddToReportIfNotBlank("Email3AddressType", currentContact.Email3AddressType)
            Report = Report &amp; AddToReportIfNotBlank("Email3DisplayName ", currentContact.Email3DisplayName)
            Report = Report &amp; AddToReportIfNotBlank("Email3EntryID ", currentContact.Email3EntryID)
            Report = Report &amp; AddToReportIfNotBlank("EntryID", currentContact.Account)
            Report = Report &amp; AddToReportIfNotBlank("FileAs", currentContact.FileAs)
            Report = Report &amp; AddToReportIfNotBlank("FirstName", currentContact.FirstName)
            Report = Report &amp; AddToReportIfNotBlank("FTPSite", currentContact.FTPSite)
            Report = Report &amp; AddToReportIfNotBlank("FullName", currentContact.FullName)
            Report = Report &amp; AddToReportIfNotBlank("FullNameAndCompany", currentContact.FullNameAndCompany)
            Report = Report &amp; AddToReportIfNotBlank("Gender", currentContact.Gender)
            Report = Report &amp; AddToReportIfNotBlank("GovernmentIDNumber", currentContact.GovernmentIDNumber)
            Report = Report &amp; AddToReportIfNotBlank("HasPicture", currentContact.HasPicture)
            Report = Report &amp; AddToReportIfNotBlank("Hobby", currentContact.Hobby)
            Report = Report &amp; AddToReportIfNotBlank("Home2TelephoneNumber", currentContact.Home2TelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("HomeAddress ", currentContact.HomeAddress)
            Report = Report &amp; AddToReportIfNotBlank("HomeAddressCity", currentContact.HomeAddressCity)
            Report = Report &amp; AddToReportIfNotBlank("HomeAddressCountry", currentContact.HomeAddressCountry)
            Report = Report &amp; AddToReportIfNotBlank("HomeAddressPostalCode ", currentContact.HomeAddressPostalCode)
            Report = Report &amp; AddToReportIfNotBlank("HomeAddressPostOfficeBox", currentContact.HomeAddressPostOfficeBox)
            Report = Report &amp; AddToReportIfNotBlank("HomeAddressState", currentContact.HomeAddressState)
           
            Report = Report &amp; AddToReportIfNotBlank("HomeAddressStreet", currentContact.HomeAddressStreet)
            Report = Report &amp; AddToReportIfNotBlank("HomeFaxNumber", currentContact.HomeFaxNumber)
            Report = Report &amp; AddToReportIfNotBlank("HomeTelephoneNumber", currentContact.HomeTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("IMAddress", currentContact.IMAddress)
            Report = Report &amp; AddToReportIfNotBlank("Importance", currentContact.Importance)
            Report = Report &amp; AddToReportIfNotBlank("Initials", currentContact.Initials)
            Report = Report &amp; AddToReportIfNotBlank("InternetFreeBusyAddress", currentContact.InternetFreeBusyAddress)
            Report = Report &amp; AddToReportIfNotBlank("IsConflict", currentContact.IsConflict)
            Report = Report &amp; AddToReportIfNotBlank("ISDNNumber", currentContact.ISDNNumber)
            Report = Report &amp; AddToReportIfNotBlank("IsMarkedAsTask", currentContact.IsMarkedAsTask)
            Report = Report &amp; AddToReportIfNotBlank("JobTitle", currentContact.JobTitle)
            Report = Report &amp; AddToReportIfNotBlank("Journal", currentContact.Journal)
            Report = Report &amp; AddToReportIfNotBlank("Language", currentContact.Language)
            Report = Report &amp; AddToReportIfNotBlank("LastFirstAndSuffix", currentContact.LastFirstAndSuffix)
            Report = Report &amp; AddToReportIfNotBlank("LastFirstNoSpace", currentContact.LastFirstNoSpace)
            Report = Report &amp; AddToReportIfNotBlank("LastFirstNoSpaceAndSuffix", currentContact.LastFirstNoSpaceAndSuffix)
            Report = Report &amp; AddToReportIfNotBlank("LastFirstNoSpaceCompany", currentContact.LastFirstNoSpaceCompany)
            Report = Report &amp; AddToReportIfNotBlank("LastFirstSpaceOnly", currentContact.LastFirstSpaceOnly)
            Report = Report &amp; AddToReportIfNotBlank("LastFirstSpaceOnlyCompany", currentContact.LastFirstSpaceOnlyCompany)
            Report = Report &amp; AddToReportIfNotBlank("LastModificationTime", currentContact.LastModificationTime)
            Report = Report &amp; AddToReportIfNotBlank("LastName", currentContact.LastName)
            Report = Report &amp; AddToReportIfNotBlank("LastNameAndFirstName", currentContact.LastNameAndFirstName)
            'Report = Report &amp; AddToReportIfNotBlank("Links", currentContact.Links)
            Report = Report &amp; AddToReportIfNotBlank("MailingAddress", currentContact.MailingAddress)
            Report = Report &amp; AddToReportIfNotBlank("MailingAddressCity", currentContact.MailingAddressCity)
            Report = Report &amp; AddToReportIfNotBlank("MailingAddressCountry", currentContact.MailingAddressCountry)
            Report = Report &amp; AddToReportIfNotBlank("MailingAddressPostalCode", currentContact.MailingAddressPostalCode)

            Report = Report &amp; AddToReportIfNotBlank("MailingAddressPostOfficeBox", currentContact.MailingAddressPostOfficeBox)
            Report = Report &amp; AddToReportIfNotBlank("MailingAddressState", currentContact.MailingAddressState)
            Report = Report &amp; AddToReportIfNotBlank("MailingAddressStreet", currentContact.MailingAddressStreet)
            Report = Report &amp; AddToReportIfNotBlank("ManagerName", currentContact.ManagerName)
            Report = Report &amp; AddToReportIfNotBlank("MarkForDownload", currentContact.MarkForDownload)
            Report = Report &amp; AddToReportIfNotBlank("MessageClass", currentContact.MessageClass)
            Report = Report &amp; AddToReportIfNotBlank("MiddleName", currentContact.MiddleName)
            Report = Report &amp; AddToReportIfNotBlank("Mileage", currentContact.Mileage)
            Report = Report &amp; AddToReportIfNotBlank("MobileTelephoneNumber", currentContact.MobileTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("NetMeetingAlias", currentContact.NetMeetingAlias)
            Report = Report &amp; AddToReportIfNotBlank("NetMeetingServer", currentContact.NetMeetingServer)
            Report = Report &amp; AddToReportIfNotBlank("NickName", currentContact.NickName)
            Report = Report &amp; AddToReportIfNotBlank("NoAging", currentContact.NoAging)
            Report = Report &amp; AddToReportIfNotBlank("OfficeLocation", currentContact.OfficeLocation)
            Report = Report &amp; AddToReportIfNotBlank("OrganizationalIDNumber", currentContact.OrganizationalIDNumber)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddress", currentContact.OtherAddress)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddressCity", currentContact.OtherAddressCity)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddressCountry", currentContact.OtherAddressCountry)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddressPostalCode", currentContact.OtherAddressPostalCode)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddressPostOfficeBox", currentContact.OtherAddressPostOfficeBox)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddressState", currentContact.OtherAddressState)
            Report = Report &amp; AddToReportIfNotBlank("OtherAddressStreet", currentContact.OtherAddressStreet)
            Report = Report &amp; AddToReportIfNotBlank("OtherFaxNumber", currentContact.OtherFaxNumber)
            Report = Report &amp; AddToReportIfNotBlank("OtherTelephoneNumber", currentContact.OtherTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("OutlookInternalVersion", currentContact.OutlookInternalVersion)
            Report = Report &amp; AddToReportIfNotBlank("OutlookVersion", currentContact.OutlookVersion)
            Report = Report &amp; AddToReportIfNotBlank("PagerNumber", currentContact.PagerNumber)
            Report = Report &amp; AddToReportIfNotBlank("PersonalHomePage", currentContact.PersonalHomePage)
            Report = Report &amp; AddToReportIfNotBlank("PrimaryTelephoneNumber", currentContact.PrimaryTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("Profession", currentContact.Profession)
            Report = Report &amp; AddToReportIfNotBlank("RadioTelephoneNumber", currentContact.RadioTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("ReferredBy", currentContact.ReferredBy)
            Report = Report &amp; AddToReportIfNotBlank("ReminderOverrideDefault", currentContact.ReminderOverrideDefault)
            Report = Report &amp; AddToReportIfNotBlank("ReminderPlaySound", currentContact.ReminderPlaySound)
            Report = Report &amp; AddToReportIfNotBlank("ReminderSet", currentContact.ReminderSet)
            Report = Report &amp; AddToReportIfNotBlank("ReminderSoundFile", currentContact.ReminderSoundFile)
            Report = Report &amp; AddToReportIfNotBlank("ReminderTime", currentContact.ReminderTime)
            Report = Report &amp; AddToReportIfNotBlank("Saved", currentContact.Saved)
            Report = Report &amp; AddToReportIfNotBlank("SelectedMailingAddress", currentContact.SelectedMailingAddress)
            Report = Report &amp; AddToReportIfNotBlank("Sensitivity", currentContact.Sensitivity)
            Report = Report &amp; AddToReportIfNotBlank("Size", currentContact.Size)
            Report = Report &amp; AddToReportIfNotBlank("Spouse", currentContact.Spouse)
            Report = Report &amp; AddToReportIfNotBlank("Subject", currentContact.Subject)
            Report = Report &amp; AddToReportIfNotBlank("Suffix", currentContact.Suffix)
            Report = Report &amp; AddToReportIfNotBlank("TaskCompletedDate", currentContact.TaskCompletedDate)
            Report = Report &amp; AddToReportIfNotBlank("TaskDueDate", currentContact.TaskDueDate)
            Report = Report &amp; AddToReportIfNotBlank("TaskStartDate", currentContact.TaskStartDate)
            Report = Report &amp; AddToReportIfNotBlank("TaskSubject", currentContact.TaskSubject)
            Report = Report &amp; AddToReportIfNotBlank("TelexNumber", currentContact.TelexNumber)
            Report = Report &amp; AddToReportIfNotBlank("Title", currentContact.Title)
            Report = Report &amp; AddToReportIfNotBlank("ToDoTaskOrdinal", currentContact.ToDoTaskOrdinal)
            Report = Report &amp; AddToReportIfNotBlank("TTYTDDTelephoneNumber", currentContact.TTYTDDTelephoneNumber)
            Report = Report &amp; AddToReportIfNotBlank("UnRead", currentContact.UnRead)
            Report = Report &amp; AddToReportIfNotBlank("User1", currentContact.User1)
            Report = Report &amp; AddToReportIfNotBlank("User2", currentContact.User2)
            Report = Report &amp; AddToReportIfNotBlank("User3", currentContact.User3)
            Report = Report &amp; AddToReportIfNotBlank("User4", currentContact.User4)
            Report = Report &amp; AddToReportIfNotBlank("WebPage", currentContact.WebPage)
            Report = Report &amp; AddToReportIfNotBlank("YomiCompanyName", currentContact.YomiCompanyName)
            Report = Report &amp; AddToReportIfNotBlank("YomiFirstName", currentContact.YomiFirstName)
            Report = Report &amp; AddToReportIfNotBlank("YomiLastName", currentContact.YomiLastName)
            Report = Report &amp; vbCrLf &amp; vbCrLf
        End If
        
    Next
    
    
    Call CreateReportAsEmail("List of Contacts", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting
    
End Sub

Private Function AddToReportIfNotBlank(FieldName As String, FieldValue As String)
    AddToReportIfNotBlank = ""
    If (FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.AddressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>list of Outlook Contacts using the Property Accessor</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>list of Outlook Contacts using the Property Accessor</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets info on Outlook Contacts using propertyAccessor and various syntaxes
' (see other scripts at http://www.GregThatcher.com for other ways to get contact properties)
' Property Tag Syntax looks like this http://schemas.microsoft.com/mapi/proptag/0x0005000b
' Property Tag Syntax is used for Outlook 'Properties' (defined by Outlook Object Model)
'
' Property ID Syntax looks like this http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8586001f
' Property ID Syntax is used for MAPI Named Properties (optional Outlook properties that can't be deleted) and UserProperties (properties you can add which are visible to the user)
'
' Named Property Syntax looks like this http://schemas.microsoft.com/mapi/string folloowed by a property name
' Named Property Syntax is used to create and view 'Named Properties" (properties you can create, but which are not visible to the user)
'
' Office document syntax looks like this: urn:schemas-microsoft-com:office:outlook#source-table-label
'
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' THIS SCRIPT WILL ONLY RUN ON OUTLOOK 2007 OR LATER (it won't work on Outlook 2003 -- there is no propertyAccessor)
'
' To find the DASL definition of Outlook Properties, use the method described in Professional Outlook 2007 Programming (Programmer to Programmer)
' From the 'Views' menu, create a new view (but don't save it)
' Click on the 'Advanced' tab, and choose 'Filter'
' Choose a Field from the 'Field' dropdown, also choose a condition and value
' Click on the 'Sql tab'
' Check the 'Edit these Criteria' checkbox
'

Public Sub GetContactInfoUsingpropertyAccessor()
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim ContactFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentContact As ContactItem
    Dim propertyAccessor As Outlook.propertyAccessor
    Dim stringArray() As String
    Dim index
    Dim currentString
    
    Set Session = Application.Session
    
    Set ContactFolder = Session.GetDefaultFolder(olFolderContacts)
    
    For Each currentItem In ContactFolder.Items
        If (currentItem.Class = olContact) Then
            Set currentContact = currentItem
            Set propertyAccessor = currentContact.propertyAccessor

            'report = report &amp; AddToReportIfNotBlank("Auto Forwarded", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0005000b")) &amp; vbCrLf
    

           'Report = Report &amp; AddToReportIfNotBlank("Account", propertyAccessor.GetProperty("urn:schemas:contacts:account")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Address Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8074001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Address Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80680003")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Anniversary", propertyAccessor.GetProperty("urn:schemas:contacts:weddinganniversary")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Assistant's Name", propertyAccessor.GetProperty("urn:schemas:contacts:secretarycn")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Assitant's Phone", propertyAccessor.GetProperty("urn:schemas:contacts:secretaryphone")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Billing information", propertyAccessor.GetProperty("urn:schemas:contacts:billinginformation")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Birthday", propertyAccessor.GetProperty("urn:schemas:contacts:bday")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business address", propertyAccessor.GetProperty("urn:schemas:contacts:workaddress")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business Address City", propertyAccessor.GetProperty("urn:schemas:contacts:l")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business Address Country/Region", propertyAccessor.GetProperty("urn:schemas:contacts:co")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business Address Post Office Box", propertyAccessor.GetProperty("urn:schemas:contacts:postofficebox")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business address postal code", propertyAccessor.GetProperty("urn:schemas:contacts:postalcode")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business address state", propertyAccessor.GetProperty("urn:schemas:contacts:st")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Business address street", propertyAccessor.GetProperty("urn:schemas:contacts:street")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Business fax number", propertyAccessor.GetProperty("urn:schemas:contacts:facsimiletelephonenumber")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Business home page", propertyAccessor.GetProperty("urn:schemas:contacts:businesshomepage")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Business telephone number", propertyAccessor.GetProperty("urn:schemas:contacts:officetelephonenumber")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Business telephone number", propertyAccessor.GetProperty("urn:schemas:contacts:office2telephonenumber")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Callback phone number", propertyAccessor.GetProperty("urn:schemas:contacts:callbackphone")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Car phone number", propertyAccessor.GetProperty("urn:schemas:contacts:othermobile")) &amp; vbCrLf
            stringArray() = propertyAccessor.GetProperty("urn:schemas-microsoft-com:office:office#Keywords")
            For index = LBound(stringArray) To UBound(stringArray)
                Report = Report &amp; "Categories (" &amp; index &amp; ") " &amp; stringArray(index) &amp; vbCrLf
            Next index

           'Report = Report &amp; AddToReportIfNotBlank("Children", propertyAccessor.GetProperty("urn:schemas:contacts:childrensnames")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("City", propertyAccessor.GetProperty("urn:schemas:contacts:mailingcity")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Company name", propertyAccessor.GetProperty("urn:schemas:contacts:o")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Company main telephone number", propertyAccessor.GetProperty("urn:schemas:contacts:organizationmainphone")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Computer network name", propertyAccessor.GetProperty("urn:schemas:contacts:computernetworkname")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Contacts", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8586001f")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Country/Region", propertyAccessor.GetProperty("urn:schemas:contacts:mailingcountry")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Created", propertyAccessor.GetProperty("urn:schemas:calendar:created")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Customer ID", propertyAccessor.GetProperty("urn:schemas:contacts:customerid")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Department", propertyAccessor.GetProperty("urn:schemas:contacts:department")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 1 address", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8084001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 2 address", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8094001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 3 address", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80a4001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 1 display name", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8080001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8009001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80690003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 2 display name", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8090001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 3 display name", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80a0001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 1 type", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8082001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 2 type", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8092001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("E-mail 3 type", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80a2001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("File As", propertyAccessor.GetProperty("urn:schemas:contacts:fileas")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("First name", propertyAccessor.GetProperty("urn:schemas:contacts:givenName")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Flag Completed Date", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x10910040")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Flag Status", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x10900003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Follow Up Flag", propertyAccessor.GetProperty("urn:schemas:httpmail:messageflag")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("FTP site", propertyAccessor.GetProperty("urn:schemas:contacts:ftpsite")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Full name", propertyAccessor.GetProperty("urn:schemas:contacts:cn")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Gender", propertyAccessor.GetProperty("urn:schemas:contacts:gender")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Government ID number", propertyAccessor.GetProperty("urn:schemas:contacts:governmentid")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Hobbies", propertyAccessor.GetProperty("urn:schemas:contacts:hobbies")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Home address", propertyAccessor.GetProperty("urn:schemas:contacts:homepostaladdress")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home address city", propertyAccessor.GetProperty("urn:schemas:contacts:homeCity")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home address country/region", propertyAccessor.GetProperty("urn:schemas:contacts:homeCountry")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home address post office box", propertyAccessor.GetProperty("urn:schemas:contacts:homepostofficebox")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home address postal code", propertyAccessor.GetProperty("urn:schemas:contacts:homePostalCode")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home address state", propertyAccessor.GetProperty("urn:schemas:contacts:homeState")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home address street", propertyAccessor.GetProperty("urn:schemas:contacts:homeStreet")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home fax", propertyAccessor.GetProperty("urn:schemas:contacts:homefax")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home phone", propertyAccessor.GetProperty("urn:schemas:contacts:homePhone")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Home phone 2", propertyAccessor.GetProperty("urn:schemas:contacts:homephone2")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("IM address", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8062001f")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("In Folder", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x0e05001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Initials", propertyAccessor.GetProperty("urn:schemas:contacts:initials")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Internet free/busy address", propertyAccessor.GetProperty("urn:schemas:calendar:fburl")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("ISDN number", propertyAccessor.GetProperty("urn:schemas:contacts:internationalisdnnumber")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Job title", propertyAccessor.GetProperty("urn:schemas:contacts:title")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Journal", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8025000b")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Language", propertyAccessor.GetProperty("urn:schemas:contacts:language")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Last name", propertyAccessor.GetProperty("urn:schemas:contacts:sn")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Location", propertyAccessor.GetProperty("urn:schemas:contacts:location")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Mailing Address", propertyAccessor.GetProperty("urn:schemas:contacts:mailingpostaladdress")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Mailing Address Indicator", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8002000b")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Manager's name", propertyAccessor.GetProperty("urn:schemas:contacts:manager")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Message Class", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x001a001e")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Middle name", propertyAccessor.GetProperty("urn:schemas:contacts:middlename")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Mileage", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/mileage")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Mobile phone", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3a1c001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Modified", propertyAccessor.GetProperty("DAV:getlastmodified")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Nickname", propertyAccessor.GetProperty("urn:schemas:contacts:nickname")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Notes", propertyAccessor.GetProperty("urn:schemas-microsoft-com:office:office#Notes")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Office location", propertyAccessor.GetProperty("urn:schemas:contacts:roomnumber")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Organizational ID number", propertyAccessor.GetProperty("urn:schemas:contacts:employeenumber")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Other address", propertyAccessor.GetProperty("urn:schemas:contacts:otherpostaladdress")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other address city", propertyAccessor.GetProperty("urn:schemas:contacts:othercity")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other address country/region", propertyAccessor.GetProperty("urn:schemas:contacts:othercountry")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other address post office box", propertyAccessor.GetProperty("urn:schemas:contacts:otherpostofficebox")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other address postal code", propertyAccessor.GetProperty("urn:schemas:contacts:otherpostalcode")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other address state", propertyAccessor.GetProperty("urn:schemas:contacts:otherstate")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other address street", propertyAccessor.GetProperty("urn:schemas:contacts:otherstreet")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other fax number", propertyAccessor.GetProperty("urn:schemas:contacts:otherfax")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Other phone number", propertyAccessor.GetProperty("urn:schemas:contacts:otherTelephone")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Outlook Data File", propertyAccessor.GetProperty("urn:schemas-microsoft-com:office:outlook#source-table-label")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Outlook Internal Version", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85520003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Outlook Version", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8554001f")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Pager", propertyAccessor.GetProperty("urn:schemas:contacts:pager")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Personal home page", propertyAccessor.GetProperty("urn:schemas:contacts:personalHomePage")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 1 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8076001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 1 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/806a0003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 2 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8077001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 2 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/806b0003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 3 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8078001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 3 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/806c0003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 4 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/8079001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 4 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/806d0003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 5 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/807a001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 5 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/806e0003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 6 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/807b001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 6 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/806f0003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 7 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/807c001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 7 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80700003")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 8 Selected", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/807d001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Phone 8 Selector", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/80710003")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("PO Box", propertyAccessor.GetProperty("urn:schemas:contacts:mailingpostofficebox")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Primary phone number", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3a1a001f")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Private", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8506000b")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Profession", propertyAccessor.GetProperty("urn:schemas:contacts:profession")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Radio phone number", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3a1d001f")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Referred by", propertyAccessor.GetProperty("urn:schemas:contacts:referredby")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Reminder", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/8503000b")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Reminder Time", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062008-0000-0000-C000-000000000046}/85020040")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Reminder Topic", propertyAccessor.GetProperty("urn:schemas:httpmail:messageflag")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Sensitivity", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/sensitivity-long")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Spouse/Partner", propertyAccessor.GetProperty("urn:schemas:contacts:spousecn")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("State", propertyAccessor.GetProperty("urn:schemas:contacts:mailingstate")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Street Address", propertyAccessor.GetProperty("urn:schemas:contacts:mailingstreet")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Subject", propertyAccessor.GetProperty("urn:schemas:httpmail:subject")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Suffix", propertyAccessor.GetProperty("urn:schemas:contacts:namesuffix")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Telex", propertyAccessor.GetProperty("urn:schemas:contacts:telexnumber")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Title", propertyAccessor.GetProperty("urn:schemas:contacts:personaltitle")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("TTY/TDD Phone", propertyAccessor.GetProperty("urn:schemas:contacts:ttytddphone")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("User Field 1", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/extensionattribute1")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("User Field 2", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/extensionattribute2")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("User Field 3", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/extensionattribute3")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("User Field 4", propertyAccessor.GetProperty("http://schemas.microsoft.com/exchange/extensionattribute4")) &amp; vbCrLf
           Report = Report &amp; AddToReportIfNotBlank("Web page", propertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/id/{00062004-0000-0000-C000-000000000046}/802b001f")) &amp; vbCrLf
           'Report = Report &amp; AddToReportIfNotBlank("Zip/Postal Code", propertyAccessor.GetProperty("urn:schemas:contacts:mailingpostalcode")) &amp; vbCrLf

            Report = Report &amp; "----------------------------------------------------------------------------------" &amp; vbCrLf &amp; vbCrLf
           
        End If
    Next
    
    Call CreateReportAsEmail("List of Contacts and properties using various Property Syntaxes", Report)
End Sub


Private Function AddToReportIfNotBlank(FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error

    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As addressEntry
    Dim Inbox

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")

    mail.Subject = Title
    mail.Body = Report

    mail.Save
    mail.Display
    

Exiting:
        Set Session = Nothing
        Exit Sub

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>list of Outlook Notes using the Outlook Object Model</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>list of Outlook Notes using the Outlook Object Model</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Notes and their Properties using the Outlook Object Model
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' See http://www.GregThatcher.com for other ways to get the properties of Notes
Public Sub GetListOfNotesUsingOutlookObjectModel()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim NotesFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentNote As NoteItem
    Set Session = Application.Session
    
    Set NotesFolder = Session.GetDefaultFolder(olFolderNotes)
    
    For Each currentItem In NotesFolder.Items
        If (currentItem.Class = olNote) Then
            Set currentNote = currentItem
            
            Call AddToReportIfNotBlank(Report, "AutoResolvedWinner", currentNote.AutoResolvedWinner)
            Call AddToReportIfNotBlank(Report, "Body", currentNote.Body)
            Call AddToReportIfNotBlank(Report, "Categories", currentNote.Categories)
            Call AddToReportIfNotBlank(Report, "Class", currentNote.Class)
            ' Call AddToReportIfNotBlank(Report, "Conflicts", currentNote.Conflicts)
            Call AddToReportIfNotBlank(Report, "CreationTime", currentNote.CreationTime)
            Call AddToReportIfNotBlank(Report, "DownloadState", currentNote.DownloadState)
            Call AddToReportIfNotBlank(Report, "EntryID", currentNote.EntryID)
            Call AddToReportIfNotBlank(Report, "Height", currentNote.Height)
            Call AddToReportIfNotBlank(Report, "IsConflict", currentNote.IsConflict)
            
            
            ' Report = Report &amp; AddToReportIfNotBlank("ItemProperties", currentNote.ItemProperties)
            Call AddToReportIfNotBlank(Report, "LastModificationTime", currentNote.LastModificationTime)
            Call AddToReportIfNotBlank(Report, "Left", currentNote.Left)
            ' Call AddToReportIfNotBlank(Report, "Links", currentNote.Links)
            Call AddToReportIfNotBlank(Report, "MarkForDownload", currentNote.MarkForDownload)
            Call AddToReportIfNotBlank(Report, "MessageClass", currentNote.MessageClass)
            Call AddToReportIfNotBlank(Report, "Saved", currentNote.Saved)
            Call AddToReportIfNotBlank(Report, "Size", currentNote.Size)
            Call AddToReportIfNotBlank(Report, "Subject", currentNote.Subject)
            Call AddToReportIfNotBlank(Report, "Top", currentNote.Top)
            
            Call AddToReportIfNotBlank(Report, "Width", currentNote.Width)
            
            Report = Report &amp; vbCrLf &amp; vbCrLf
        End If
        
    Next
    
    
    Call CreateReportAsEmail("List of Notes", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting
    
End Sub

Private Function AddToReportIfNotBlank(Report As String, FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
        Report = Report &amp; AddToReportIfNotBlank
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.AddressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>list of Outlook Tasks using the Outlook Object Model</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>list of Outlook Tasks using the Outlook Object Model</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Tasks
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub GetListOfTasks()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim TaskFolder As Outlook.Folder
    Dim currentItem As Object
    Dim currentTask As TaskItem
    Set Session = Application.Session
    
    Set TaskFolder = Session.GetDefaultFolder(olFolderTasks)
    
    For Each currentItem In TaskFolder.Items
        If (currentItem.Class = olTask) Then
            Set currentTask = currentItem
            
            
            Report = Report &amp; AddToReportIfNotBlank("ConversationTopic", currentTask.ConversationTopic)
            Report = Report &amp; AddToReportIfNotBlank("ActualWork", currentTask.ActualWork)
            Report = Report &amp; AddToReportIfNotBlank("AutoResolvedWinner", currentTask.AutoResolvedWinner)
            Report = Report &amp; AddToReportIfNotBlank("BillingInformation", currentTask.BillingInformation)
            Report = Report &amp; AddToReportIfNotBlank("Body", currentTask.Body)
            Report = Report &amp; AddToReportIfNotBlank("CardData", currentTask.CardData)
            Report = Report &amp; AddToReportIfNotBlank("Categories", currentTask.Categories)
            Report = Report &amp; AddToReportIfNotBlank("Companies", currentTask.Companies)
            Report = Report &amp; AddToReportIfNotBlank("Complete", currentTask.Complete)
            Report = Report &amp; AddToReportIfNotBlank("ContactNames", currentTask.ContactNames)
            Report = Report &amp; AddToReportIfNotBlank("ConversationIndex", currentTask.ConversationIndex)
            Report = Report &amp; AddToReportIfNotBlank("CreationTime", currentTask.CreationTime)
            Report = Report &amp; AddToReportIfNotBlank("DateCompleted", currentTask.DateCompleted)
            Report = Report &amp; AddToReportIfNotBlank("DelegationState", currentTask.DelegationState)
            Report = Report &amp; AddToReportIfNotBlank("Delegator", currentTask.Delegator)
            Report = Report &amp; AddToReportIfNotBlank("DownloadState", currentTask.DownloadState)
            Report = Report &amp; AddToReportIfNotBlank("DueDate", currentTask.DueDate)
            Report = Report &amp; AddToReportIfNotBlank("EntryID", currentTask.EntryID)
            Report = Report &amp; AddToReportIfNotBlank("Importance", currentTask.Importance)
            Report = Report &amp; AddToReportIfNotBlank("InternetCodepage", currentTask.InternetCodepage)
            Report = Report &amp; AddToReportIfNotBlank("IsConflict", currentTask.IsConflict)
            Report = Report &amp; AddToReportIfNotBlank("IsRecurring", currentTask.IsRecurring)
            Report = Report &amp; AddToReportIfNotBlank("LastModificationTime", currentTask.LastModificationTime)
            Report = Report &amp; AddToReportIfNotBlank("MarkForDownload", currentTask.MarkForDownload)
            Report = Report &amp; AddToReportIfNotBlank("MessageClass", currentTask.MessageClass)
            Report = Report &amp; AddToReportIfNotBlank("Mileage", currentTask.Mileage)
            Report = Report &amp; AddToReportIfNotBlank("NoAging", currentTask.NoAging)
            Report = Report &amp; AddToReportIfNotBlank("Ordinal", currentTask.Ordinal)
            Report = Report &amp; AddToReportIfNotBlank("OutlookInternalVersion", currentTask.OutlookInternalVersion)
            Report = Report &amp; AddToReportIfNotBlank("OutlookVersion", currentTask.OutlookVersion)
            Report = Report &amp; AddToReportIfNotBlank("Owner", currentTask.Owner)
            Report = Report &amp; AddToReportIfNotBlank("Ownership", currentTask.Ownership)
            Report = Report &amp; AddToReportIfNotBlank("PercentComplete", currentTask.PercentComplete)
            Report = Report &amp; AddToReportIfNotBlank("ReminderOverrideDefault", currentTask.ReminderOverrideDefault)
            Report = Report &amp; AddToReportIfNotBlank("ReminderPlaySound", currentTask.ReminderPlaySound)
            Report = Report &amp; AddToReportIfNotBlank("ReminderSet", currentTask.ReminderSet)
            Report = Report &amp; AddToReportIfNotBlank("ReminderSoundFile", currentTask.ReminderSoundFile)
            Report = Report &amp; AddToReportIfNotBlank("ReminderTime", currentTask.ReminderTime)
            Report = Report &amp; AddToReportIfNotBlank("ResponseState", currentTask.ResponseState)
            Report = Report &amp; AddToReportIfNotBlank("Role", currentTask.Role)
            Report = Report &amp; AddToReportIfNotBlank("Saved", currentTask.Saved)
            Report = Report &amp; AddToReportIfNotBlank("SchedulePlusPriority", currentTask.SchedulePlusPriority)
            Report = Report &amp; AddToReportIfNotBlank("SendUsingAccount", currentTask.SendUsingAccount)
            Report = Report &amp; AddToReportIfNotBlank("Sensitivity", currentTask.Sensitivity)
            Report = Report &amp; AddToReportIfNotBlank("Size", currentTask.Size)
            Report = Report &amp; AddToReportIfNotBlank("StartDate", currentTask.StartDate)
            Report = Report &amp; AddToReportIfNotBlank("Status", currentTask.Status)
            Report = Report &amp; AddToReportIfNotBlank("StatusOnCompletionRecipients", currentTask.StatusOnCompletionRecipients)
            Report = Report &amp; AddToReportIfNotBlank("StatusUpdateRecipients", currentTask.StatusUpdateRecipients)
            Report = Report &amp; AddToReportIfNotBlank("Subject", currentTask.Subject)
            Report = Report &amp; AddToReportIfNotBlank("TeamTask", currentTask.TeamTask)
            Report = Report &amp; AddToReportIfNotBlank("ToDoTaskOrdinal", currentTask.ToDoTaskOrdinal)
            Report = Report &amp; AddToReportIfNotBlank("TotalWork", currentTask.TotalWork)
            Report = Report &amp; AddToReportIfNotBlank("UnRead", currentTask.UnRead)
            
            Report = Report &amp; vbCrLf &amp; vbCrLf
        End If
        
    Next
    
    
    Call CreateReportAsEmail("List of Tasks", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting
    
End Sub

Private Function AddToReportIfNotBlank(FieldName As String, FieldValue As String)
    AddToReportIfNotBlank = ""
    If (FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.AddressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>List_of_Rules</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>List_of_Rules</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Option Explicit

' VBA Script that gets list of Outlook Rulesand Rule Properties using the Outlook Object Model
' Use Tools-&gt;Macro-&gt;Security to allow Macros to run, then restart Outlook
' Run Outlook, Press Alt+F11 to open VBA
' Programming by Greg Thatcher, http://www.GregThatcher.com
' See http://www.GregThatcher.com for other ways to get the properties of Rules
' This script uses the new Rules collection, available in Outlook 2007 and later

Public Sub GetListOfRulesUsingOutlookObjectModel()
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim Report As String
    Dim currentItem As Object
    Dim currentRule As Outlook.Rule
    Dim rules As Outlook.rules
    Set Session = Application.Session
    
    Set rules = Session.DefaultStore.GetRules()
    
    For Each currentRule In rules
            
        ' Call AddToReportIfNotBlank(Report, "Actions", currentRule.Actions)
        Call AddToReportIfNotBlank(Report, "Class", currentRule.Class)
        ' Call AddToReportIfNotBlank(Report, "Conditions", currentRule.Conditions)
        Call AddToReportIfNotBlank(Report, "Enabled", currentRule.Enabled)
        ' Call AddToReportIfNotBlank(Report, "Exceptions", currentRule.Exceptions)
        Call AddToReportIfNotBlank(Report, "ExecutionOrder", currentRule.ExecutionOrder)
        Call AddToReportIfNotBlank(Report, "IsLocalRule", currentRule.IsLocalRule)
        Call AddToReportIfNotBlank(Report, "Name", currentRule.Name)
        Call AddToReportIfNotBlank(Report, "RuleType", currentRule.RuleType)
            
        Report = Report &amp; vbCrLf &amp; vbCrLf
        
    Next
    
    
    Call CreateReportAsEmail("List of Rules", Report)
    
Exiting:
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Next ' Can use "Exit" also
    
End Sub

Private Function AddToReportIfNotBlank(Report As String, FieldName As String, FieldValue)
    AddToReportIfNotBlank = ""
    If (IsNull(FieldValue) Or FieldValue &lt;&gt; "") Then
        AddToReportIfNotBlank = FieldName &amp; " : " &amp; FieldValue &amp; vbCrLf
        Report = Report &amp; AddToReportIfNotBlank
    End If
    
End Function

' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com
Public Sub CreateReportAsEmail(Title As String, Report As String)
    On Error GoTo On_Error
    
    Dim Session As Outlook.NameSpace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.Folder
    
    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.Items.Add("IPM.Mail")
    
    Set MyAddress = Session.CurrentUser.AddressEntry
    mail.Recipients.Add (MyAddress.Address)
    mail.Recipients.ResolveAll
    
    mail.Subject = Title
    mail.Body = Report
    
    mail.Save
    mail.Display
    
    
Exiting:
        Set Session = Nothing
        Exit Sub
On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>SNOOZE_get_LIST_of_Snozzed_Reminders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>SNOOZE_get_LIST_of_Snozzed_Reminders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Works in Office 2016
https://www.extendoffice.com/documents/outlook/4608-outlook-find-snoozed-reminders.html

1. Shift to the Mail view, and press Alt + F11 keys together to open the Microsoft Visual Basic for Applications window.
2. Click Insert &gt; Module, and paste below VBA code into the new Module window.
3. Press the F5 key or click the Run button to run this VBA.

I ended up adding a quick access icon linked to the macro

=====================================================================================================

Sub SnoozedReminders()
 
  Dim xReminder As  Reminder
 
  Dim xReminders  As Outlook.Reminders
 
  Dim xRemItems As  String
 
  Dim k As Long
 
  k = 0
 
  Set xReminders =  Outlook.Reminders
 
  For Each xReminder  In xReminders
 
  If  ReminderExpired(xReminder) = True Then
 
  k = k +  1
 
  xRemItems = xRemItems &amp; k &amp; ": " &amp;  xReminder.Caption &amp; vbCr &amp; "      Snoozed to " &amp; xReminder.NextReminderDate &amp; vbCr &amp; vbCr
 
  End If
 
  Next xReminder
 
  CreateRemItemsAsEmail "Snoozed RemItems",  xRemItems
 
  End Sub
 
Function ReminderExpired(Reminder As Outlook.Reminder)  As Boolean
 
  If  (Reminder.OriginalReminderDate &lt;&gt; Reminder.NextReminderDate) Then
 
  ReminderExpired = (Reminder.OriginalReminderDate &lt;&gt;  Reminder.NextReminderDate)
 
  End If
 
  End Function
 
Public Sub CreateRemItemsAsEmail(Theme As String,  RemItems As String)
 
  Dim xSession As Outlook.NameSpace
 
  Dim xMailItem As MailItem
 
  Dim xInboxFd As Outlook.Folder
 
  On Error Resume Next
 
  Set xSession = Application.Session
 
  Set xInboxFd =  xSession.GetDefaultFolder(olFolderInbox)
 
  Set xMailItem =  xInboxFd.Items.Add("IPM.Mail")
 
  With xMailItem
 
  .Subject =  Theme
 
  .body =  RemItems
 
  .Save
 
  .Display
 
  End With
 
  Set xSession = Nothing
 
  Set xInboxFd = Nothing
 
  Set xmail = Nothing
 
  End Sub
  
  =====================================================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBA_OUTLOOK</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>View_Currently_Snoozing_Reminders</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBA_OUTLOOK</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>View_Currently_Snoozing_Reminders</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
http://superuser.com/questions/573467/in-outlook2010-is-there-a-way-to-view-the-currently-snoozing-reminders




Sub SnoozedReminders()

' http://www.jpsoftwaretech.com/check-your-outlook-reminders-in-vba/

Dim MyReminder As Outlook.Reminder
Dim MyReminders As Outlook.Reminders
Dim Report As String
Dim i As Long

Set MyReminders = Outlook.Reminders

i = 0

For Each MyReminder In MyReminders

    If HasReminderFired(MyReminder) = True Then
        i = i + 1
        Report = Report &amp; i &amp; ": " &amp; MyReminder.Caption &amp; vbCr &amp; _
            "     Snoozed to " &amp; MyReminder.NextReminderDate &amp; vbCr &amp; vbCr
    End If

Next MyReminder

CreateReportAsEmail "Snoozed Items", Report

End Sub


Function HasReminderFired(rmndr As Outlook.Reminder) As Boolean
    HasReminderFired = (rmndr.OriginalReminderDate &lt;&gt; rmndr.NextReminderDate)
End Function


' VBA SubRoutine which displays a report inside an email
' Programming by Greg Thatcher, http://www.GregThatcher.com

Public Sub CreateReportAsEmail(Title As String, Report As String)

    On Error GoTo On_Error

    Dim Session As Outlook.Namespace
    Dim mail As MailItem
    Dim MyAddress As AddressEntry
    Dim Inbox As Outlook.folder 

    Set Session = Application.Session
    Set Inbox = Session.GetDefaultFolder(olFolderInbox)
    Set mail = Inbox.items.Add("IPM.Mail")

    mail.Subject = Title
    mail.Body = Report

    mail.Save
    mail.Display

Exiting:
    Set Session = Nothing
    Set Inbox = Nothing
    Set mail = Nothing
    Exit Sub

On_Error:
    MsgBox "error=" &amp; Err.Number &amp; " " &amp; Err.Description
    Resume Exiting

End Sub
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBE_VBA_Extensibility</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Exporting A VBComponent Code Module To A Text File</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBE_VBA_Extensibility</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Exporting A VBComponent Code Module To A Text File</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'You can export an existing VBComponent CodeModule to a text file. 
'This can be useful if you are archiving modules to create a library of useful module to be used in other projects.

    Public Function ExportVBComponent(VBComp As VBIDE.VBComponent, _
                FolderName As String, _
                Optional FileName As String, _
                Optional OverwriteExisting As Boolean = True) As Boolean
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' This function exports the code module of a VBComponent to a text
    ' file. If FileName is missing, the code will be exported to
    ' a file with the same name as the VBComponent followed by the
    ' appropriate extension.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Dim Extension As String
    Dim FName As String
    Extension = GetFileExtension(VBComp:=VBComp)
    If Trim(FileName) = vbNullString Then
        FName = VBComp.Name &amp; Extension
    Else
        FName = FileName
        If InStr(1, FName, ".", vbBinaryCompare) = 0 Then
            FName = FName &amp; Extension
        End If
    End If
    
    If StrComp(Right(FolderName, 1), "\", vbBinaryCompare) = 0 Then
        FName = FolderName &amp; FName
    Else
        FName = FolderName &amp; "\" &amp; FName
    End If
    
    If Dir(FName, vbNormal + vbHidden + vbSystem) &lt;&gt; vbNullString Then
        If OverwriteExisting = True Then
            Kill FName
        Else
            ExportVBComponent = False
            Exit Function
        End If
    End If
    
    VBComp.Export FileName:=FName
    ExportVBComponent = True
    
    End Function
    
    Public Function GetFileExtension(VBComp As VBIDE.VBComponent) As String
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' This returns the appropriate file extension based on the Type of
    ' the VBComponent.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Select Case VBComp.Type
            Case vbext_ct_ClassModule
                GetFileExtension = ".cls"
            Case vbext_ct_Document
                GetFileExtension = ".cls"
            Case vbext_ct_MSForm
                GetFileExtension = ".frm"
            Case vbext_ct_StdModule
                GetFileExtension = ".bas"
            Case Else
                GetFileExtension = ".bas"
        End Select
        
    End Function</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VBOX_Misc</Category>
        <Language>DOSBATCH</Language>
        <Public>false</Public>
        <Name>showInfo_2018_09_18</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VBOX_Misc</Category>
          <Language>DOSBATCH</Language>
          <Public>false</Public>
          <Name>showInfo_2018_09_18</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
&gt;VBoxManage list vms --long
::OUTPUT
=======================================================================================

Name:            Ubuntu_Recreational
Groups:          /
Guest OS:        Ubuntu (64-bit)
UUID:            a4a362e9-f4dd-4cce-88c1-a820846d6587
Config file:     G:\VHD_WorkingVersions\Ubuntu_Recreational\Ubuntu_Recreational.vbox
Snapshot folder: G:\VHD_WorkingVersions\Ubuntu_Recreational\Snapshots
Log folder:      G:\VHD_WorkingVersions\Ubuntu_Recreational\Logs
Hardware UUID:   a4a362e9-f4dd-4cce-88c1-a820846d6587
Memory size:     8000MB
Page Fusion:     off
VRAM size:       50MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  2
PAE:             on
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          off
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): Floppy
Boot Device (2): DVD
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             UTC
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: KVM
State:           powered off (since 2018-09-18T01:23:22.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            IDE
Storage Controller Type (0):            PIIX4
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  2
Storage Controller Port Count (0):      2
Storage Controller Bootable (0):        on
Storage Controller Name (1):            SATA
Storage Controller Type (1):            IntelAhci
Storage Controller Instance Number (1): 0
Storage Controller Max Port Count (1):  30
Storage Controller Port Count (1):      1
Storage Controller Bootable (1):        on
IDE (1, 0): Empty
SATA (0, 0): G:\VHD_WorkingVersions\Ubuntu_Recreational\Ubuntu_Recreational.vdi (UUID: d7ea94cd-2107-4a08-a79d-3cebfbea2831)
NIC 1:           MAC: 080027D75ADA, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: HDA, Codec: STAC9221)
Audio playback:  enabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            disabled
XHCI:            disabled

USB Device Filters:

&lt;none&gt;

Bandwidth groups:  &lt;none&gt;

Shared folders:  

Name: 'VM_Shared_Folder', Host path: 'E:\VM_Shared_Folder' (machine mapping), writable

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Ubuntu_Recreational\Ubuntu_Recreational.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    

Guest:

Configured memory balloon size:      0 MB


Name:            vm_WIN_10_DEV
Groups:          /
Guest OS:        Windows 10 (64-bit)
UUID:            ed2476bb-a8b9-46e0-8795-a3c07abc2ae5
Config file:     G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\vm_WIN_10_DEV.vbox
Snapshot folder: G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\Snapshots
Log folder:      G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\Logs
Hardware UUID:   ed2476bb-a8b9-46e0-8795-a3c07abc2ae5
Memory size:     8192MB
Page Fusion:     off
VRAM size:       128MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  2
PAE:             off
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          off
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): Floppy
Boot Device (2): DVD
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             local time
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: HyperV
State:           powered off (since 2018-09-01T19:47:11.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            SATA
Storage Controller Type (0):            IntelAhci
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  30
Storage Controller Port Count (0):      3
Storage Controller Bootable (0):        on
SATA (0, 0): G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\Name_ vm_WIN_10_DEV.vdi (UUID: 27e4f1ee-8674-4499-92e2-5c5b52ee3933)
SATA (1, 0): D: (UUID: 00445644-0000-0000-0000-00000000443a) (temp eject)
NIC 1:           MAC: 0800275521D5, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: HDA, Codec: STAC9221)
Audio playback:  enabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            disabled
XHCI:            disabled

USB Device Filters:

&lt;none&gt;

Bandwidth groups:  &lt;none&gt;

Shared folders:  

Name: 'VM_Shared_Folder', Host path: 'E:\VM_Shared_Folder' (machine mapping), writable

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Name_ vm_WIN_10_DEV\vm_WIN_10_DEV.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    ac_enabled=false

Description:
Atlassian SourceSafe
Guest:

Configured memory balloon size:      0 MB


Name:            Win10_Build_1709
Groups:          /
Guest OS:        Windows 10 (64-bit)
UUID:            61ac460a-1eae-4eb8-ae5c-f6f3e852444a
Config file:     G:\VHD_WorkingVersions\Win10_Build_1709\Win10_Build_1709.vbox
Snapshot folder: G:\VHD_WorkingVersions\Win10_Build_1709\Snapshots
Log folder:      G:\VHD_WorkingVersions\Win10_Build_1709\Logs
Hardware UUID:   61ac460a-1eae-4eb8-ae5c-f6f3e852444a
Memory size:     8192MB
Page Fusion:     off
VRAM size:       128MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  2
PAE:             off
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          off
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): DVD
Boot Device (2): Floppy
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             local time
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: HyperV
State:           powered off (since 2018-09-01T19:48:20.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            SATA
Storage Controller Type (0):            IntelAhci
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  30
Storage Controller Port Count (0):      2
Storage Controller Bootable (0):        on
SATA (0, 0): G:\VHD_WorkingVersions\Win10_Build_1709\Win10_Build_1709.vdi (UUID: 9a7b047c-3fe1-48ba-810b-23b773eceb3e)
SATA (1, 0): Empty
NIC 1:           MAC: 080027ED4B8F, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: HDA, Codec: STAC9221)
Audio playback:  disabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            enabled
XHCI:            disabled

USB Device Filters:

Index:            0
Active:           yes
Name:             LGE LGMS210 [0318]
VendorId:         1004
ProductId:        61f9
Revision:         0318
Manufacturer:     LGE
Product:          LGMS210
remote:           0
Serial Number:    LGMS2101d884802

Bandwidth groups:  &lt;none&gt;

Shared folders:  

Name: 'VM_Shared_Folder', Host path: 'E:\VM_Shared_Folder' (machine mapping), writable

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Win10_Build_1709\Win10_Build_1709.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    ac_enabled=false

Description:
VS 2017, and SQL 2016, Atlassian SourceSafe, Git Desktop
Guest:

Configured memory balloon size:      0 MB


Name:            Ubuntu_18_04_v0
Groups:          /
Guest OS:        Ubuntu (64-bit)
UUID:            7f69042b-443e-4c2b-b02a-b10192d3c221
Config file:     G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Ubuntu_18_04_v0.vbox
Snapshot folder: G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Snapshots
Log folder:      G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Logs
Hardware UUID:   7f69042b-443e-4c2b-b02a-b10192d3c221
Memory size:     8192MB
Page Fusion:     off
VRAM size:       16MB
CPU exec cap:    100%
HPET:            off
Chipset:         piix3
Firmware:        BIOS
Number of CPUs:  4
PAE:             off
Long Mode:       on
Triple Fault Reset: off
APIC:            on
X2APIC:          on
CPUID Portability Level: 0
CPUID overrides: None
Boot menu mode:  message and menu
Boot Device (1): Floppy
Boot Device (2): DVD
Boot Device (3): HardDisk
Boot Device (4): Not Assigned
ACPI:            on
IOAPIC:          on
BIOS APIC mode:  APIC
Time offset:     0ms
RTC:             UTC
Hardw. virt.ext: on
Nested Paging:   on
Large Pages:     on
VT-x VPID:       on
VT-x unr. exec.: on
Paravirt. Provider: Default
Effective Paravirt. Provider: KVM
State:           powered off (since 2018-09-12T02:00:01.000000000)
Monitor count:   1
3D Acceleration: off
2D Video Acceleration: off
Teleporter Enabled: off
Teleporter Port: 0
Teleporter Address: 
Teleporter Password: 
Tracing Enabled: off
Allow Tracing to Access VM: off
Tracing Configuration: 
Autostart Enabled: off
Autostart Delay: 0
Default Frontend: 
Storage Controller Name (0):            IDE
Storage Controller Type (0):            PIIX4
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0):  2
Storage Controller Port Count (0):      2
Storage Controller Bootable (0):        on
Storage Controller Name (1):            SATA
Storage Controller Type (1):            IntelAhci
Storage Controller Instance Number (1): 0
Storage Controller Max Port Count (1):  30
Storage Controller Port Count (1):      1
Storage Controller Bootable (1):        on
IDE (1, 0): C:\Program Files\Oracle\VirtualBox\VBoxGuestAdditions.iso (UUID: 215fcf30-05e2-4314-9a6b-3b487b760496)
SATA (0, 0): G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Ubuntu_18_04_v0.vdi (UUID: 07e60df0-1c09-426a-b62d-c6a59b7ecde2)
NIC 1:           MAC: 080027115ACD, Attachment: NAT, Cable connected: on, Trace: off (file: none), Type: 82540EM, Reported speed: 0 Mbps, Boot priority: 0, Promisc Policy: deny, Bandwidth group: none
NIC 1 Settings:  MTU: 0, Socket (send: 64, receive: 64), TCP Window (send:64, receive: 64)
NIC 2:           disabled
NIC 3:           disabled
NIC 4:           disabled
NIC 5:           disabled
NIC 6:           disabled
NIC 7:           disabled
NIC 8:           disabled
Pointing Device: USB Tablet
Keyboard Device: PS/2 Keyboard
UART 1:          disabled
UART 2:          disabled
UART 3:          disabled
UART 4:          disabled
LPT 1:           disabled
LPT 2:           disabled
Audio:           enabled (Driver: DSOUND, Controller: AC97, Codec: AD1980)
Audio playback:  disabled
Audio capture: enabled
Clipboard Mode:  Bidirectional
Drag and drop Mode: Bidirectional
VRDE:            disabled
USB:             enabled
EHCI:            enabled
XHCI:            disabled

USB Device Filters:

&lt;none&gt;

Bandwidth groups:  &lt;none&gt;

Shared folders:  &lt;none&gt;

Capturing:          not active
Capture audio:      not active
Capture screens:    0
Capture file:       G:\VHD_WorkingVersions\Ubuntu_18_04_v0\Ubuntu_18_04_v0.webm
Capture dimensions: 1024x768
Capture rate:       512 kbps
Capture FPS:        25
Capture options:    ac_enabled=false

Description:
100 GB Dynamic HD, VDI, ISO: ubuntu-18.04.1-desktop-amd64.iso
Guest:

Configured memory balloon size:      0 MB


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VisualStudio_2010</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>EntityFramework_version</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VisualStudio_2010</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>EntityFramework_version</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

If you open the references folder and locate system.data.entity, click the item, 
	then check the runtime version number in the Properties explorer, 
	you will see the sub version as well. 
	
	Mine for instance shows runtime version v4.0.30319 with the Version property showing 4.0.0.0. 
	
The EntityFramework.dll can be viewed in this fashion also. 
	Only the Version will be 4.1.0.0 and the Runtime version will be v4.0.30319 which specifies it is a .NET 4 component. 
	Alternatively, you can open the file location as listed in the Path property and right-click the component in question, 
	choose properties, then choose the details tab and view the product version.
	
	
///////////////////////////////
if you use NUGET versions of EF
Another way to get the EF version you are using is to open the Package Manager Console (PMC) in Visual Studio and type Get-Package at the prompt. 
	The first line with be for EntityFramework and list the version the project has installed.	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VisualStudio_2010</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Project_Templates</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VisualStudio_2010</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Project_Templates</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Check if Project Templates are installed:

    Manually search if you find the project template (it would be *.zip) inside %ProgramFiles%\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates\CSharp\Web\1033
    If YES, please run devenv.exe /installvstemplates
    If NO, then its guaranteed that the ProjectTemplates are not installed. You would have to reinstall to get the ProjectTemplates on your disk.

For the records:

All the installed project templates are available here: (this is the default path)

    %ProgramFiles%\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplates

This is where the File-&gt;New -&gt;Project Dialog loads ProjectTemplates from, 
	and is displayed in the Same Folder heirarchy convention. 
	You could add another path by updating

    Tools -&gt; Options -&gt; Projects and Solutions -&gt; General -&gt; User Project Template Location

On studio(devenv.exe) launch/loading it would try to create a ProjectTemplateCache on 
	localappdata or %ProgramFiles% based on whether you are local user or admin. 
	The cache inside Programfiles are available here

    %ProgramFiles%\Microsoft Visual Studio 10.0\Common7\IDE\ProjectTemplatesCache

This ProjectTemplateCache directory is Created (if doesnt exists) or 
	Updated(if already exists) by running *devenv.exe /installvstemplates on cmd. 
	This command is run during installation of Visual Studio. 
	Ideally all other installers who ship project templates should run this command. 
	But, sometimes this might fail due to access rights. 
	So its is safe to run it again manually.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VisualStudio</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Publish_Fat_Application</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VisualStudio</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Publish_Fat_Application</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
VS =&gt; Build {Menu} =&gt; Publish {Left tab}

	Publish Folder Location(ftp server or file path);
		\\BCC-FS1\IT Data\Installers\VSTO\
	Installation Folder (URL)
		\\BCC-FS1\IT Data\Installers\VSTO\
		
	Install Settings
		Prerequisites {left defaults}
		Updates
			(x) check every time the customization runs
		Options
			Description
				Publish name: BCC IT Dept
				Office Settings: {default}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>web_config</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>Authorization_Location_Deny_AllowRoles</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>web_config</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>Authorization_Location_Deny_AllowRoles</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>reference: http://weblogs.asp.net/gurusarkar/archive/2008/09/29/setting-authorization-rules-for-a-particular-page-or-folder-in-web-config.aspx
ASP.NET Authorization : http://msdn.microsoft.com/en-us/library/wce3kxhd.aspx
Authorizing Users and Roles: http://quickstarts.asp.net/QuickStartv20/aspnet/doc/security/authorization.aspx
IIS 7: http://forums.iis.net/p/1173012/1961218.aspx


==&gt; PUT all allows BEFORE ANY deny.


We will start with the root web.config without any authorization.

&lt;configuration&gt;
	&lt;system.web&gt;
	
	&lt;authentication mode="Forms"&gt;
	&lt;/authentication&gt; &lt;/system.web&gt;
	
&lt;/configuration&gt;

Allow only users in particular Role


&lt;location path="AdminFolder"&gt;

    &lt;system.web&gt;
    &lt;authorization&gt;

    &lt;allow roles="Admin"/&gt; //Allows users in Admin role
    &lt;deny users="*"/&gt; // deny everyone else

    &lt;/authorization&gt;
    &lt;/system.web&gt;

&lt;/location&gt;
&lt;location path="CustomerFolder"&gt;

    &lt;system.web&gt;
    &lt;authorization&gt;

    &lt;allow roles="Admin, Customers"/&gt; //Allow users in Admin and Customers roles
    &lt;deny users="*"/&gt; // Deny rest of all

    &lt;/authorization&gt;
    &lt;/system.web&gt;

&lt;/location&gt;

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
Alternate way - using individual web.config for each Folder


    Web.config in AdminFolder should look like:

    &lt;configuration&gt;

        &lt;system.web&gt;

            &lt;authorization&gt;
            &lt;allow roles="Admin"/&gt; //Allows users in Admin role

            &lt;deny users="*"/&gt; // deny everyone else
            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/configuration&gt;
    Web.config in CustomerFolder should look like: 

    &lt;configuration&gt;

        &lt;system.web&gt;

            &lt;authorization&gt;
            &lt;allow roles="Admin, Customers"/&gt; //Allow users in Admin and Customers roles

            &lt;deny users="*"/&gt; // Deny rest of all
            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/configuration&gt;

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


Deny Anonymous user to access entire website

&lt;system.web&gt;

	&lt;authentication mode="Forms"&gt;
	
		&lt;/authentication&gt;
	
	&lt;authorization&gt;
	&lt;deny users="?"/&gt; 				//will deny anonymous users &lt;/authorization&gt;

&lt;/system.web&gt;


Allow access to everyone to a particular page

&lt;configuration&gt;

    &lt;system.web&gt;

    &lt;authentication mode="Forms"/&gt;
    &lt;authorization&gt; &lt;deny users="?"/&gt;  //this will restrict anonymous user access

    &lt;/authorization&gt;
    &lt;/system.web&gt;

    &lt;location path="register.aspx"&gt; //path here is path to your register.aspx page e.g. it could be ~/publicpages/register.aspx

        &lt;system.web&gt;

            &lt;authorization&gt;

            &lt;allow users="*"/&gt; // this will allow access to everyone to register.aspx
            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/location&gt;

&lt;/configuration&gt;


To allow access to particular user only and deny everyone else


&lt;location path="userpersonal.aspx"&gt;

    &lt;system.web&gt;

        &lt;authorization&gt;

        &lt;allow users="John"/&gt; // allow John ..note: you can have multiple users seperated by comma e.g. John,Mary,etc
        &lt;deny users="*"/&gt;  // deny others

        &lt;/authorization&gt;

    &lt;/system.web&gt;

&lt;/location&gt;


Images and CSS files

With IIS 7 you will have to give access to IUSR Anonymous user account to your folder that contains your css or images files

&lt;configuration&gt;

    &lt;system.web&gt;

        &lt;authorization&gt;

        &lt;allow users="*"/&gt; //Allow everyone

        &lt;/authorization&gt;

    &lt;/system.web&gt;

&lt;/configuration&gt;


Common Mistakes ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The common reason for that is placing &lt;deny../&gt; before &lt;allow ../&gt;.
    //This web.config will not allow access to users even they are in Admin Role 

    &lt;configuration&gt;

        &lt;system.web&gt;

            &lt;authorization&gt;

            &lt;deny users="*"/&gt; // deny everyone else
            &lt;allow roles="Admin"/&gt; //Allows users in Admin role

            &lt;/authorization&gt;

        &lt;/system.web&gt;

    &lt;/configuration&gt;

Since the authorization is done from top to bottom, rules are checked until a match is found. 
Here we have &lt;deny users="*"/&gt; 
first and so it will not check for allow any more and deny access even if in Admin role.













</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>WebApplications_gig</Category>
        <Language>ASP</Language>
        <Public>false</Public>
        <Name>1_New_Hire_about</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>WebApplications_gig</Category>
          <Language>ASP</Language>
          <Public>false</Public>
          <Name>1_New_Hire_about</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>WebApplications_gig_1_New_Hire_about

The web.config file in the root sets Authentication Mode to Windows

There is a sub-Folder: "ForNewHireRoles", the web.config in there restricts
	access to just the Active Directory (AD) security roles that should
	have access to the detailed pages in that folder
	
ListOfNewHires.aspx	is located in the folder: "ForNewHireRoles"
DetailsForm.aspx	is located in the ROOT folder

there are some utility pages that get Active Directory information:
Identity_1.aspx  - gets several types of user identity (WindowsIdentity.GetCurrent, User.Identity.Name, HttpContext.Current.User.Identity.Name)
UserGroup_1.aspx  - checks membership in various Security groups


	
Then I went to IIS and turned on Windows Authentication:
IIS Manager =&gt; NewHire {Web node} =&gt; Authentication =&gt; Windows Authentication
Changed it to: Enabled, from disabled
	
Top-Level Web site: NewHire
	Physical Location:
		C:\inetpub\ftproot\NewHire 
		Gave 'Network Service' read and write access to that folder
			Read &amp; Execute
			List Folder Contents
			Read
			Write
	Use an 'ASP.NET Web Application' template in VSS
		Create directory for Solution in:
			L:\prj_0031_Web_Applications_on_SharePoint01\WA005_NewHire
Permissions -  for folder
	Went to folder: C:\inetpub\ftproot\NewHire
	Confirmed that 'NETWORK SERVICE' permissions are:
		Read &amp; Execute
		List folder contents
		Read
		Write
	</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>DisableDataLogging_UninstallOneDrive_BlockTelemetry.bat</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>DisableDataLogging_UninstallOneDrive_BlockTelemetry.bat</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>@echo off
cls

echo This Script will do the following:
echo Disable Data Logging Services
echo Configure Windows Explorer
echo Uninstall Onedrive
echo Edit the Hosts file to block sending Telemetry Data to Microsoft
echo.
echo press any key to continue...
pause &gt; NUL

echo Checking for Administrator elevation...
echo.
openfiles &gt; NUL 2&gt;&amp;1
if %errorlevel%==0 (
    echo Elevation found! Proceeding...
) else (
    echo You are not running as Administrator...
    echo This batch cannot do it's job without elevation!
    echo.
    echo Right-click and select ^'Run as Administrator^' and try again...
    echo.
    echo Press any key to exit...
    pause &gt; NUL
    exit
)

echo.
echo Disabling Data Logging Services

sc config diagtrack start=disabled
sc config dmwappushservice start=disabled
sc config RetailDemo start=disabled
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection" /v AllowTelemetry /t REG_DWORD /d 0 /f &gt; NUL 2&gt;&amp;1
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Policies\DataCollection" /v AllowTelemetry /t REG_DWORD /d 0 /f &gt; NUL 2&gt;&amp;1
schtasks /change /TN "\Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser" /DISABLE
schtasks /change /TN "\Microsoft\Windows\Application Experience\ProgramDataUpdater" /DISABLE
schtasks /change /TN "\Microsoft\Windows\Customer Experience Improvement Program\Consolidator" /DISABLE
schtasks /change /TN "\Microsoft\Windows\Customer Experience Improvement Program\KernelCeipTask" /DISABLE
schtasks /change /TN "\Microsoft\Windows\Customer Experience Improvement Program\UsbCeip" /DISABLE
echo "" &gt; C:\ProgramData\Microsoft\Diagnosis\ETLLogs\AutoLogger\AutoLogger-Diagtrack-Listener.etl

echo.
echo Removing all Folders from MyPC
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{088e3905-0323-4b02-9826-5d99428e115f}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{1CF1260C-4DD0-4ebb-811F-33C572699FDE}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{24ad3ad4-a569-4530-98e1-ab02f9417aa8}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{374DE290-123F-4565-9164-39C4925E467B}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{3dfdf296-dbec-4fb4-81d1-6a3438bcf4de}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{A0953C92-50DC-43bf-BE83-3742FED03C9C}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{A8CDFF1C-4878-43be-B5FD-F8091C1C60D0}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{d3162b92-9365-467a-956b-92703aca08af}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{f86fa3ab-70d2-4fc7-9c99-fcbf05467f3a}" /f &gt; NUL 2&gt;&amp;1

echo.
echo Setup Windows Explorer View
REG ADD "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v LaunchTo /t REG_DWORD /d 1 /f &gt; NUL 2&gt;&amp;1
REG ADD "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v HideFileExt /t REG_DWORD /d 0 /f &gt; NUL 2&gt;&amp;1
REG ADD "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v Hidden /t REG_DWORD /d 1 /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_CLASSES_ROOT\CABFolder\CLSID" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_CLASSES_ROOT\SystemFileAssociations\.cab\CLSID" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_CLASSES_ROOT\CompressedFolder\CLSID" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_CLASSES_ROOT\SystemFileAssociations\.zip\CLSID" /f &gt; NUL 2&gt;&amp;1

echo.
echo Uninstalling OneDrive

set x86="%SYSTEMROOT%\System32\OneDriveSetup.exe"
set x64="%SYSTEMROOT%\SysWOW64\OneDriveSetup.exe"

taskkill /f /im OneDrive.exe &gt; NUL 2&gt;&amp;1
ping 127.0.0.1 -n 5 &gt; NUL 2&gt;&amp;1

if exist %x64% (
%x64% /uninstall
) else (
%x86% /uninstall
)
ping 127.0.0.1 -n 8 &gt; NUL 2&gt;&amp;1

rd "%USERPROFILE%\OneDrive" /Q /S &gt; NUL 2&gt;&amp;1
rd "C:\OneDriveTemp" /Q /S &gt; NUL 2&gt;&amp;1
rd "%LOCALAPPDATA%\Microsoft\OneDrive" /Q /S &gt; NUL 2&gt;&amp;1
rd "%PROGRAMDATA%\Microsoft OneDrive" /Q /S &gt; NUL 2&gt;&amp;1

echo.
echo Removeing OneDrive from the Explorer Side Panel.
REG DELETE "HKEY_CLASSES_ROOT\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_CLASSES_ROOT\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" /f &gt; NUL 2&gt;&amp;1

echo.
echo Editing Hosts File

SET NEWLINE=^&amp; echo.

FIND /C /I "telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "vortex.data.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 vortex.data.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "vortex-win.data.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 vortex-win.data.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "telecommand.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 telecommand.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "telecommand.telemetry.microsoft.com.nsatc.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 telecommand.telemetry.microsoft.com.nsatc.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "oca.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 oca.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "oca.telemetry.microsoft.com.nsatc.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 oca.telemetry.microsoft.com.nsatc.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "sqm.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 sqm.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "sqm.telemetry.microsoft.com.nsatc.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 sqm.telemetry.microsoft.com.nsatc.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "watson.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 watson.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "watson.telemetry.microsoft.com.nsatc.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 watson.telemetry.microsoft.com.nsatc.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "redir.metaservices.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 redir.metaservices.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "choice.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 choice.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "choice.microsoft.com.nsatc.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 choice.microsoft.com.nsatc.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "df.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 df.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "wes.df.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 wes.df.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "reports.wes.df.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 reports.wes.df.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "services.wes.df.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 services.wes.df.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "sqm.df.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 sqm.df.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "watson.ppe.telemetry.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 watson.ppe.telemetry.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "telemetry.appex.bing.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 telemetry.appex.bing.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "telemetry.urs.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 telemetry.urs.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "telemetry.appex.bing.net:443" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 telemetry.appex.bing.net:443&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "settings-sandbox.data.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 settings-sandbox.data.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "vortex-sandbox.data.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 vortex-sandbox.data.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "watson.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 watson.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "survey.watson.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 survey.watson.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "watson.live.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 watson.live.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "statsfe2.ws.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 statsfe2.ws.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "corpext.msitadfs.glbdns2.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 corpext.msitadfs.glbdns2.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "compatexchange.cloudapp.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 compatexchange.cloudapp.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "cs1.wpc.v0cdn.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 cs1.wpc.v0cdn.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "a-0001.a-msedge.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 a-0001.a-msedge.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "fe2.update.microsoft.com.akadns.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 fe2.update.microsoft.com.akadns.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "statsfe2.update.microsoft.com.akadns.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 statsfe2.update.microsoft.com.akadns.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "sls.update.microsoft.com.akadns.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 sls.update.microsoft.com.akadns.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "diagnostics.support.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 diagnostics.support.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "corp.sts.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 corp.sts.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "statsfe1.ws.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 statsfe1.ws.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "pre.footprintpredict.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 pre.footprintpredict.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "i1.services.social.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 i1.services.social.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "i1.services.social.microsoft.com.nsatc.net" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 i1.services.social.microsoft.com.nsatc.net&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "feedback.windows.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 feedback.windows.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "feedback.microsoft-hohm.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 feedback.microsoft-hohm.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts
FIND /C /I "feedback.search.microsoft.com" %WINDIR%\system32\drivers\etc\hosts &gt; NUL 2&gt;&amp;1
IF %ERRORLEVEL% NEQ 0 ECHO %NEWLINE%^0.0.0.0 feedback.search.microsoft.com&gt;&gt;%WINDIR%\System32\drivers\etc\hosts

echo.
echo.
echo Please make sure you do the following as well:
echo Head to Settings &gt; Privacy, and disable everything, unless there are some things you really need.
echo While within the Privacy page, go to Feedback, select Never in the first box, and Basic in the second box

pause
pause</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Group_Policy_Import_Export</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Group_Policy_Import_Export</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

configure Local Group Policy
	Make any desired changes to GP
	Group Policy for Start Menu
		Computer Configuration/Administrative Templates/Start Menu and Taskbar
			Pin Apps to start when installed
				Disabled
			Start Layout
				Enabled
			{path} 
				C:\StartLayout\jphsaStartLayout.xml

Export the Start Menu layout (.xml) from Powershell
==============================
	(from the PC where the Start menu has been configured)
	PowerShell
		Export-StartLayout -Path "C:\StartLayout\jphsaStartLayout.xml"
	Created folder: C:\StartLayout
		Added Domain users to the security
		Removed everything except Read from the folder
	Stored copy in:
		P:\p_0009_IT_Dept\Standardized_WIN_10_configuration\StartLayout\jphsaStartLayout.xml



EXPORT Group Policy
======
Place exported group policy’s folder into:
	C:\DATA\Group_Policy_Imports\
Run PowerShell to Import the GP
	&gt;LGPO.exe /g C:\DATA\Group_Policy_Imports
	
IMPORT
======
Start Menu Layout
	Create folder:
		C:\StartLayout\
		Set User Permissions - domain users: Read
			Place .xml in the folder
	Place exported group policy’s folder into:
		C:\DATA\Group_Policy_Imports\
		Run PowerShell to Import the GP
		&gt;LGPO.exe /g C:\DATA\Group_Policy_Imports
	
	
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>GroupPolicy__reset_all__thatIs_ClearThem</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>GroupPolicy__reset_all__thatIs_ClearThem</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.windowscentral.com/how-reset-local-group-policy-objects-their-default-settings-windows-10

The commands will delete the folders where Group Policy settings are stored on your computer, 
	and then Windows 10 will re-apply the default settings.

cmd:

RD /S /Q "%WinDir%\System32\GroupPolicyUsers"

RD /S /Q "%WinDir%\System32\GroupPolicy"


You can now restart your computer or force the update using the following command to complete the task:

gpupdate /force</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Microsoft Edge can't be opened using the Built-in Administrator account.</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Microsoft Edge can't be opened using the Built-in Administrator account.</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>caused b/c I turned UAC OFF, so instead leave UAC set to 1

The good news is that you can turn off these UAC prompts even if Admin Approval Mode is enabled, 
if you now set UAC in the Control Panel to Never notify.

However, the difference in the default configuration is that not all applications will be executed with administrator rights automatically. 
For instance, 
if you want to edit a file in the Windows folder, you now have to launch Notepad as an administrator (right-click).</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Migrate_StickyNotes_From_Win_7_to_Win_10</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Migrate_StickyNotes_From_Win_7_to_Win_10</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>=====================================================
to fix Issue with sticky notes in Windows 10 Version.1709

Close Sticky Notes.
Go to PC Settings &gt; System &gt; Apps &amp; Features &gt; Sticky Notes &gt; Advanced Options &gt; Reset. All app data will be deleted.
Do not open Sticky Notes app now.
Navigate to %LOCALAPPDATA%\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbw\LocalState
Create Folder within \LocalState called "Legacy"
Copy the Notes.snt to the Legacy folder and rename it "ThresholdNotes.snt"
Start Sticky Notes.
All notes will now appear!!!
This is all based on the info i found in this thread, tried this on my own machine and a users machine worked 1st time.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>OneDrive_Uninstall</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>OneDrive_Uninstall</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>



http://lifehacker.com/how-to-completely-uninstall-onedrive-in-windows-10-1725363532


Disabling OneDrive will prevent it from running as well as remove it from File Explorer, 
and you can easily re-enable it later if you want to.
==========================================================================================
 if you’re running Pro or another version of Windows 10, go to the Group Policy Editor 
 (type in “gpedit.msc” in the search box) 
 and go to 
 	Local Computer Policy &gt; 
 	Computer Configuration &gt; 
 	Administrative Templates &gt; 
 	Windows Components &gt; 
 	OneDrive. 
 	Then enable the “Prevent the usage of OneDrive for file storage” setting.
 	
To completely uninstall OneDrive:
=================================
1] Open Command Prompt in Administrator mode: 
	Right-click on the Windows icon in the taskbar and select Command Prompt (Admin).
2] Type in taskkill /f /im OneDrive.exe  
	to terminate any OneDrive processes and hit Enter.
3] Then type in either %SystemRoot%\System32\OneDriveSetup.exe /uninstall if you’re using 32-bit Windows 10
 																						  =======	
	or %SystemRoot%\SysWOW64\OneDriveSetup.exe /uninstall if you’re using 64-bit Windows 10 and hit Enter.
	                                                                      ==================
	                                                                      
Should you change your mind and want to reinstall OneDrive, head to the 
“%SystemRoot%\SysWOW64\” 
folder in File Explorer and run the OneDriveSetup.exe program.	                                                                      
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>QuickAccess_disable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>QuickAccess_disable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.windowscentral.com/how-remove-quick-access-file-explorer-windows-10

Step 1
======
Warning! Before removing quick access, make sure to set File Explorer to access "This PC" by default. 
If you don't do this, after changing the settings you'll get an error 

open File Explorer, navigate to View, 
click Options to access "Folder Options", and on the "General" tab, change Open File Explorer to "This PC".
Keep in mind that removing quick access doesn't clear the File Explorer history, 
	as such this is a good time to disable Show recently used files in Quick access 
	and Show frequently used folders in Quick access, 
	and click the Clear button to erase the File Explorer history.
	
Step 2
=======
 give the local administrator accounts full control over ShellFolder, 
 which will allow us to modify the registry keys located in this particular shell folder.
 
- Open the Windows Registry as an administrator by launching the Run command using the Windows + R keyboard shortcut, 
	typing "regedit", and hitting Enter.
- Navigate to the following registry path: 
	HKEY_CLASSES_ROOT\CLSID{679f85cb-0220-4080-b29b-5540cc05aab6}
 -Now you need to change the permissions of ShellFolder, 
	right-click ShellFolder, select Permissions, then click the Advanced button.
- At the top of Advanced Security Settings for ShellFolder, change the ownership of the folder to "Administrators". 
	To do this, click Change, click Advanced, click the Find Now button, and from "search results" select "Administrators", 
	then click OK, OK again, then Apply, hit OK, and hit OK one last time to close the ShellFolder Permissions box.
	
	I had to give myself full controll of the key before it would stop giving me errors on Step #3
	
Step 3
===========
Inside "ShellFolder", double-click Attributes, and change data value from a0100000 to a0600000, and click OK.


Step 4
============
You can now either restart Windows 10 or open the Task Manager, 
find and select Windows Explorer, and click Restart from bottom-right corner.



If you want to see quick access again, 
simply follow step 3 again and change the data on Attributes from a0600000 to a0100000, and click OK.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_10</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Windows cannot find " </Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_10</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Windows cannot find " </Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://answers.microsoft.com/en-us/windows/forum/windows_10-desktop-winpc/windows-10-explorerexe-error-windows-cannot-find/51d0a9cb-0937-412c-9d43-8bb5a9e425ed?auth=1

My instance of this problem was caused by my disabling (in registry) Quick Access in Explorer Navigation.
The solution is to get to Folder Options and set the "Open File Explorer to:" drop-down to "This PC" instead of "Quick access".</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>chkdsk</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>chkdsk</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://www.howtogeek.com/howto/windows-vista/guide-to-using-check-disk-in-windows-vista/


Using CheckDisk from the Command Line
Open up an administrator mode command prompt, and then type in the following command to do an exhaustive check of your drive. 
Substitute C: for whatever drive you want to check.

chkdsk /f /r C:

If the drive is a system drive or has files in use, you’ll be asked to schedule the check for the next reboot:


To see chkdsk results in Eventlog
================================
right click on the "Application" event log =&gt; Find =&gt; {search for:} chkdsk

To find chkdsk results from PowerShell:
======================================
get-winevent -FilterHashTable @{logname="Application"; id="1001"}| ?{$_.providername –match "wininit"} | fl timecreated, message | out-file Desktop\CHKDSK_SCAN.txt

{Go to your desktop and you should see a file called CHKDSK_SCAN.txt. All the results for your check disk scan will appear in this file}


Notes about results:
===================

EA Records are Extended Attribute records. 
----------
They're a feature of NTFS that allows for a file to have custom extra metadata stored along with it 
(metadata that is not interpretable to the file system). 
EA records are a somewhat obscure feature of NTFS that are used very infrequently, 
but having a few of them doesn't mean that there's anything wrong with your filesystem.

Reparse Records establish Reparse Points within your file system. 
---------------
Reparse Points are a very interesting feature of NTFS that allow a file to be tagged 
with some data that will essentially result in a program (an FS Filter, sort of like a driver)
being run every time you access the file. 
They're not used a lot, most notably they are used to create symlinks in Windows 
(via the mklink command) and for volume mount points 
(this is an obscure feature of Windows that allows you to mount a device as a folder in another device, 
somewhat like the Unix file system). A normal Windows install will have a number of them that are set up by the installer.



============================
Access denied you do not have sufficient privileges. 
=======================================================
https://www.disk-partition.com/diskpart/access-denied-as-you-do-not-have-sufficient-privileges-3889.html
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>compressed folders not recognized by Windows 7</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>compressed folders not recognized by Windows 7</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>CMD prompt, run as administrator

&gt;cmd /c assoc .zip=CompressedFolder</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>GodMode</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>GodMode</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>1] create folder on desktop
2] rename folder: "GodMode.{ED7BA470-8E54-465E-825C-99712043E01C}"


tutorial:
http://www.pcworld.com/article/220753/windows_7_god_mode_tips_tricks_tweaks.html 





GodMode.bat file
-=================

mkdir "Special Folders
cd ".\Special Folders
mkdir "God Mode.{ED7BA470-8E54-465E-825C-99712043E01C}
mkdir "Location Settings.{00C6D95F-329C-409a-81D7-C46C66EA7F33}
mkdir "Biometric Settings.{0142e4d0-fb7a-11dc-ba4a-000ffe7ab428}
mkdir "Power Settings.{025A5937-A6BE-4686-A844-36FE4BEC8B6D}
mkdir "Icons And Notifications.{05d7b0f4-2121-4eff-bf6b-ed3f69b894d9}
mkdir "Credentials and Logins.{1206F5F1-0569-412C-8FEC-3204630DFB70}
mkdir "Programs and Features.{15eae92e-f17a-4431-9f28-805e482dafd4}
mkdir "Default Programs.{17cd9488-1228-4b2f-88ce-4298e93e0966}
mkdir "All NET Frameworks and COM 
Libraries.{1D2680C9-0E2A-469d-B787-065558BC7D43}
mkdir "All Networks For Current 
Connection.{1FA9085F-25A2-489B-85D4-86326EEDCD87}
mkdir "Network.{208D2C60-3AEA-1069-A2D7-08002B30309D}
mkdir "My Computer.{20D04FE0-3AEA-1069-A2D8-08002B30309D}
mkdir "Printers.{2227A280-3AEA-1069-A2DE-08002B30309D}
mkdir "Application Connections.{241D7C96-F8BF-4F85-B01F-E2B043341A4B}
mkdir "Firewall and Security.{4026492F-2F69-46B8-B9BF-5654FC07E423}
mkdir "Performance.{78F3955E-3B90-4184-BD14-5397C15F1EFC}
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Network_Recyle_Bin</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Network_Recyle_Bin</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://forums.mydigitallife.info/threads/16974-Tip-Network-Recycle-bin

You may have noticed that when you delete a file stored on a network location or mapped network drive that the file is permanently deleted. 
It does not go to the local computer's recycle bin and does not go to the server's recycle bin. 
I have discovered a work-around that extends recycle bin coverage to include mapped network drives. 
The solution is not 100% perfect, but works extremely well and does not rely on Shadow Copies or 3rd-party software.

Here's how:
1. Map a network drive to the network share you want to use. Make sure that the drive is re-connected on logon. If you don't know how to do this, search Google.
2. Browse to C:\users\&lt;user name&gt;.
3. Right-click on one of the folders in this location (I chose saved games) and click properties.
4. Select the Location tab.
5. Click Move, browse to to root of the drive you mapped in step 1, and click Select Folder.
6. Click Ok and click yes in the dialogue box that appears.
7. Repeat these same steps for all users on the computer.

You can now verify that the network drive is protected by the recycle bin by right-clicking on the recycle bin and clicking properties. The network drive should be listed in the Recycle Bin Locations column.

Some warnings:
1. This only protects files accessed through the mapped network drive, and not by UNC paths. So for example, if you mapped \\server\share to z:, and delete something off the z drive, it will go to the recycle bin. However, if you browse to \\server\share and delete a file, it will be deleted directly.
2. I don't know what will happen if your network drive is not available, so beware. This may not work well with laptops.
3. What ever files that were supposed to be stored in the folder you select in step 3 will now be stored on your mapped network drive by default. This can actually be quite useful.


Potentially better method for Windows 8:
https://social.technet.microsoft.com/Forums/en-US/a349801f-398f-4139-8e8b-b0a92f599e2b/enable-recycle-bin-on-mapped-network-drives
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>ODBC_UDL_to_see_installed_Providers</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>ODBC_UDL_to_see_installed_Providers</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


https://blogs.msdn.microsoft.com/farukcelik/2007/12/31/basics-first-udl-test/

32bit providers on a 32 bit machine
====================================
1) Create a new empty text file like “test.txt” (For example, right mouse click on an empty place on your desktop, select “New” and “Text Document”)

2) Rename the file as “test.udl“

  As soon as you renamed the file, text file icon  should change to a UDL icon 

3) Double click on test.udl file and you’ll receive a window titled “Data Link Properties“

You’ll get all the installed OLE DB Providers on the box when you’ve switched to the Provider tab. 
	If the OLE DB Provider for the database/datasource you’re interested in is in the list, 
	select the OLE DB Provider and click on “Next“and you’ll switch to “Connection” tab and will be ready to play with the OLE DB Provider. 
	The rest depends on the OLE DB Provider you selected.
	
32bit providers on a 64bit machine
==================================
But one day, you followed the same procedure on a 64 bit machine and couldn’t see the OLE DB Providers though you’re sure that it’s been installed. 
There must be something wrong then ?

The reason behind for this is simple. When you double clicked on a UDL file on a 64 bit machine, 
it’ll enumerate only the 64 bit OLE DB Providers and most probably you’ve installed a 32 bit OLE DB Provider.

So then, there should be a way of making UDL Test using the 32 bit OLE DB Providers on a 64 bit machine.

Actually when you’ve created a UDL file on a 64 bit machine and double clicked on it,

“C:\Program Files\Common Files\System\Ole DB\oledb32.dll”,OpenDSLFile  C:\test.udl

command will be called through C:\windows\system32\rundll32.exe

Both binaries (oledb32.dll and rundll32.exe) used here are 64 bit and 64 bit oledb32.dll does not deal with 32 bit OLE DB Providers.

Since we already have 32 bit versions of those oledb32.dll and rundll32.exe in other folders on our 64 bit machines, 
we need to use them. Therefore, instead of double clicking on the UDL file, we’ll need to  execute the command below from a command line or Start/Run :

C:\Windows\syswow64\rundll32.exe “C:\Program Files (x86)\Common Files\System\Ole DB\oledb32.dll”,OpenDSLFile C:\test.udl</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Register_a_DLL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Register_a_DLL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>in CMD use 'cd' to move to the folder where the DLL is located

regsvr32 shmedia.dll for registering a file

regsvr32 /u shmedia.dll for unregistering a file


COM that is widely used in Windows relies on registration. 
A component will provide type libraries, interfaces and classes. 
Each of these are defined by a GUID to uniquely name them. 
COM components can also defined ProgID's that are kind of shortcuts to the unwieldy GUID's.

All this information is stored in a special registry hive on the computer named HKEY_CLASSES_ROOT. 
Use RegEdit.exe to view it. 
In particular you can find type libraries in HKEY_CLASSES_ROOT\TypeLib, 
interfaces in HKEY_CLASSES_ROOT\Interface and classes in HKEY_CLASSES_ROOT\CLSID. 
Some of the information in the registry will contain the path of the actual DLL with the component 
allowing Windows to locate and load the component when it is requested.

When you install a COM component it is necessary to create the correct registry information. 
By convention the DLL can provide two exported functions:

DllRegisterServer
DllUnregisterServer
When you execute RegSvr32.exe MyComponent.dll the RegSvr32.exe executable will attempt to call DllRegisterServer in MyComponent.dll. 
The DLL is then supposed to create all the necessary registry entries to allow the component to be used.

In a similar way you can use RegSvr32.exe /u MyComponent.dll to unregister the component. 
That will remove all the information previously added to the registry.

Windows relies heavily on COM and it is very important that COM registrations are up to date.
Unfortunately there is nothing that blocks you from deleting an already registered COM component. 
This will leave dangling pointers in the registry pointing to the no longer existing DLL. 
You can't even unregister it since it no longer exists.

Another problem is when two different applications requires different versions of the same component. 
The registry can only point to one of the two versions, and this may cause one of the applications to fail.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Startup_Folder</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Startup_Folder</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Your personal startup folder should be 

	C:\Users\&lt;user name&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup.

The All Users startup folder should be 
	
	C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup.

You can create the folders if they aren't there.  Enable viewing of hidden folders to see them.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>The action can't be completed because the file is open in another program</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>The action can't be completed because the file is open in another program</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
from: http://www.techsupportalert.com/content/how-find-out-which-windows-process-using-file.htm


with Process Explorer from sysinternals
 
 
 How to find out what program is using a file

In Windows 7 or 8, the system message may tell you what program is using the file. If it doesn’t or if you are using Windows XP, there is a simple way to find the program:

    Open Process Explorer, running as administrator.
    On the toolbar, find the gunsight icon on the right (shown highlighted in the figure shown below).
    Drag the icon and drop it on the open file or folder that is locked.
    The executable that is using the file will be highlighted in the Process Explorer main display list.
    
    
 How to find out which handle or DLL is using a file

    Open Process Explorer, running as administrator.
    Enter the keyboard shortcut Ctrl+F. Altenatively, click the “Find” menu and select “Find a Handle or DLL”.
    A search dialog box will open.
    Type in the name of the locked file or other file of interest. Partial names are usually sufficient.
    Click the button “Search”,
    A list will be generated. There may be a number of entries.
    An individual handle in the list can be killed by selecting it and pressing the delete key. However, care is necessary when deleting handles, as instabilities may occur. Often, just rebooting will free a locked file.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>WhenDeletingAFileOrFolder_MessageThatItCanNotFindTheObject</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>WhenDeletingAFileOrFolder_MessageThatItCanNotFindTheObject</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Deleting the following registry keys, and rebooting, has solved the problem for me:

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{2112AB0A-C86A-4ffe-A368-0DE96E47012E}]
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{2112AB0A-C86A-4ffe-A368-0DE96E47012E}\PropertyBag]

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{491E922F-5643-4af4-A7EB-4E7A138D8174}]
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{491E922F-5643-4af4-A7EB-4E7A138D8174}\PropertyBag]

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{7b0db17d-9cd2-4a93-9733-46cc89022e7c}]
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{7b0db17d-9cd2-4a93-9733-46cc89022e7c}\PropertyBag]

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{A302545D-DEFF-464b-ABE8-61C8648D939B}]
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{A302545D-DEFF-464b-ABE8-61C8648D939B}\PropertyBag]

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{A990AE9F-A03B-4e80-94BC-9912D7504104}]
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\{A990AE9F-A03B-4e80-94BC-9912D7504104}\PropertyBag]

 

I found the solution at this site: http://www.overclock.net/windows/721973-msupdate-kb980408-warning-all-win7-x64-2.html
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_7</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>WMI_Repair</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_7</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>WMI_Repair</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://social.technet.microsoft.com/Forums/windows/en-US/8ed26d46-9994-4052-a307-5b071805aea8/wmi-corrupt-how-to-reinstallrepair?forum=winservergen

1. Disable and stop the WMI service.
     sc config winmgmt start= disabled
     net stop winmgmt
 
2. Run the following commands.
     Winmgmt /salvagerepository %windir%\System32\wbem      (I noticed that you have run this command, but I would suggest that you try it again)
     Winmgmt /resetrepository %windir%\System32\wbem
 
4. Re-enable the WMI service and then reboot the server to see how it goes.
     sc config winmgmt start= auto
 
If the problem remains, then try the following steps to rebuild the repository:
 
1. Disable and stop the WMI service.
     sc config winmgmt start= disabled     (note that there is a blank between '=' and 'disabled')
     net stop winmgmt
 
2. Rename the repository folder (located at %windir%\System32\wbem\repository) to repository.old.
 
3. Re-enable the WMI service.
     sc config winmgmt start= auto
 
4. Reboot the server to see if the problem remains.
 
If the above steps cannot help, you may also need to check if some disk sectors 
	or system files are corrupted. 
	You may try "chkdsk" and "sfc /scannow" commands to see if they can help. Otherwise, you may need to reinstall the whole server.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows_Server_2012</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>add_Programs_List</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows_Server_2012</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>add_Programs_List</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Display "Hidden items" on your C: Drive
Open File Explorer and browse to your C: Drive. On the View tab, check the "Hidden items" checkbox.

2Add a New Toolbar on your Taskbar.
Right-click on a blank area of your Taskbar and select Toolbars &gt; New Toolbars.

3Browse to the Start Menu\Programs folder.
In the New Toolbar dialog box, browse to the "C:\Program Data\Microsoft\Windows\Start Menu\Programs" folder.

4Click the "Select Folder" button.
Click the "Select Folder" button to add the new Toolbar to your Taskbar.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Clear Windows Update Cache</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Clear Windows Update Cache</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://ccm.net/faq/2471-how-to-purge-the-windows-update-cache

The first step is to temporarily turn off the Windows Update service (to stop background downloads). 
Open the Command Prompt, type the net stop wuauserv command and press Enter.

Open File Explorer and go to View &gt; Folder Options. Select the Show hidden files, folder, 
and drives radio button and click on Apply to enable the display of hidden files on your computer. 

Once done, navigate to C:\Windows\SoftwareDistribution\Download and then delete the content of the Download folder. 

Open a new Command prompt window and run the net start wuauserv command to restart the Windows Update service. </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>List_EncryptedFiles</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>List_EncryptedFiles</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
    open a cmd prompt
    Enter the command: cipher /s:c:\ &gt; %UserProfile%\Desktop\Encrypted-Files.txt
    Open the file "encryption.txt"
        To find encrypted folders, search for "will be encrypted"
        To find encrypted files, search for "E" at the beginning of a line

Without parameters, Cipher lists state of the current directory and all files in it. 
The /s parameter tells it to recurse, and c:\ gives it the starting point.
 From there, "&gt; ..." just redirects the output.
 
 
 
 
 cipher /u /n to list all encrypted files, on all drives
 
 
 
 
 cipher /S:. | findstr /b /c:"E" /c:" " &gt; encryptedFiles.txt as slightly more accurate - 
 it won't catch unencrypted files with names like E Marketing strategy,
  I wanted to see what directory they were in also - to make for easy removal -
  so it also includes the directory names - 
  however it will include directories without encrypted files,
  so there is a little cruft still in the output.
  
  
   cipher /u /n  &gt; %UserProfile%\Desktop\Encrypted-Files.txt
   
   To decrypt a folder, and the files within them, and all subfolders
   cipher /d /a /s:G:\DATA_No_Backup\DEV_WebSites\Web_Test_1\</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Windows</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Scheduled_Tasks</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Windows</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Scheduled_Tasks</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
============
&gt;Schtasks
============
https://msdn.microsoft.com/en-us/library/bb736357(v=vs.85).aspx
Enables an administrator to create, delete, query, change, run, and end scheduled tasks on a local or remote computer. 
Running Schtasks.exe without arguments displays the status and next run time for each registered task.


----------------------------------------------------------------

You can create a scheduled task using the Scheduled Tasks GUI or execute a below command 
to create the scheduled task from within a command prompt. 
The command prompt needs to be running with elevated administrative privileges.

==============================================================================
schtasks /create /tn &amp;quot;SSRS Recycle&amp;quot; /ru UserName /rl highest /np /sc daily /sd 08/01/2011 /st 02:00 /tr &amp;quot;powershell.exe -noprofile -executionpolicy RemoteSigned -file c:scriptsSSRSRecycle.ps1&amp;quot;
===============================================================================

This command creates a new scheduled task named “SSRS Recycle”, 
which will be run non interactively with elevated rights as UserName. 
The task will be executed daily at 02:00 am starting from 1st of August 2011 
and will execute a PowerShell script SSRSRecycle.ps1 located in folder C:scripts.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>WORD</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Normal</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>WORD</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Normal</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
setting the NORMAL.dotm location

Modify the location of the "User templates"

File {Menu} =&gt; Options {Left pane} =&gt; Trust Center {Left Pane} =&gt; [Trust Center Settings...]
			=&gt; Trusted Locations {Left Pane} 
			=&gt; Select the line that says:
				C:\Users\ggarson\AppData\Roaming\Microsoft\Templates\
				Description of folder: Word 2010 default location: User Templates
			[Modify...]			

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Change the keyboard shortcut for a macro

     Click the Microsoft Office Button , and then click Word Options.
     Click Customize.
     Next to Keyboard shortcuts, click Customize.
     In the Categories list, click Macros.
     In the Macros list, click the macro that you want to change.
     In the Press new shortcut key box, type the key combination that you want to choose.
     Check the Current keys box to make sure that you aren't assigning a key combination that you already use to perform a different task.
     In the Save changes in list, click the option that matches where you want to run your macro.

      Important   To make your macro available in all documents, be sure 
to click Normal.dotm.
     Click Close
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\    .
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>XML_Import</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Example_Read_AssetManagement_XML_IntoTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>XML_Import</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Example_Read_AssetManagement_XML_IntoTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> --prj_1023_CreateTable_T0_Machine_v2.sql
-- This took 11 minutes 6 seconds to run
-- it reads directly from the XML file

Use DB6_AssetManagement
go
IF OBJECT_ID('dbo.T0_Machine') IS NOT NULL
    DROP TABLE dbo.T0_Machine
go
CREATE TABLE T0_Machine(

		  [T00_PK] [int] IDENTITY(1,1) NOT NULL,
		  chassis NVARCHAR(25),
		  IP NVARCHAR(15),
		  Deviceserial NVARCHAR(15),
		  mac1  NVARCHAR(17),
		  mac2  NVARCHAR(17),
		  mac3  NVARCHAR(17),
		 [USER] NVARCHAR(50), 
		  name NVARCHAR(50), 
		 manufacturer NVARCHAR(50),
		 model NVARCHAR(50), 
		 os NVARCHAR(100),
		 osserialnumber NVARCHAR(50),
		 osproductkey NVARCHAR(50),
		 servicepack smallINT,
		 ram  NVARCHAR(20),
		 scantime NVARCHAR(50),
		 Date_Uploaded as Date
		  
  );


--Finally, the following statement will load the XML file, parse the XML elements to columns, and insert into the Products table:

INSERT INTO T0_Machine (
		  chassis,
		  IP,
		  Deviceserial,
		  mac1,
		  mac2,
		  mac3,
		 [USER], 
		  name, 
		 manufacturer,
		 model, 
		 os,
		 osserialnumber,
		 osproductkey,
		 servicepack,
		 ram ,
		 scantime,
		 Date_Uploaded
			)
SELECT 
		--X.machine.query('ip').value('.', 'NVARCHAR(15)'),
		--X.machine.query('user').value('.', 'NVARCHAR(50)')
		
		
		  X.machine.query('chassis').value('.', 'NVARCHAR(25)'),
		  X.machine.query('ip').value('.', 'NVARCHAR(15)'),
		  X.machine.query('deviceserial').value('.', 'NVARCHAR(15)'),
		  X.machine.query('mac1').value('.', 'NVARCHAR(17)'),		  
		  X.machine.query('mac2').value('.', 'NVARCHAR(17)'),	
		  X.machine.query('mac3').value('.', 'NVARCHAR(17)'),			  
		  X.machine.query('user').value('.', 'NVARCHAR(50)'),		  
		  X.machine.query('name').value('.', 'NVARCHAR(50)'),		  		  
		  X.machine.query('manufacturer').value('.', 'NVARCHAR(50)'),
		  X.machine.query('model').value('.', 'NVARCHAR(50)'),
		  X.machine.query('os').value('.', 'NVARCHAR(100)'),
		  X.machine.query('osserialnumber').value('.', 'NVARCHAR(50)'),
		  X.machine.query('osproductkey').value('.', 'NVARCHAR(50)'),
		  X.machine.query('servicepack').value('.', 'smallINT'),
		  X.machine.query('ram').value('.', 'NVARCHAR(20)'),
		  X.machine.query('scantime').value('.', 'NVARCHAR(50)'),
		  GETDATE() as [Date_Uploaded]
	
		
		
		
FROM (
SELECT CAST(x AS XML)
FROM OPENROWSET(
    BULK '\\SQL-SERVER\QI_Data_Storage\AssetManagement_2013_04_18.xml',   --&lt;== MOVE data to folder:  N:\DATA\QI_Data_Storage 
    SINGLE_BLOB) AS T(x)
    ) AS T(x)
CROSS APPLY x.nodes('assets/client/machine') AS X(machine);


--Here are the results:
select *
--SELECT IP, [USER], LEN(ltrim(rtrim([user]))) as LenUser
FROM T0_Machine
--Order by LenUser desc</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>HyperLink_to_OPEN_another_URL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>HyperLink_to_OPEN_another_URL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
Good overview
https://acmeware.com/blog/24-data-repository/165-new-blog-urls-in-reporting-services-1
and
https://acmeware.com/blog/24-data-repository/173-using-urls-in-reporting-services-2

some issues from 2020
https://forums.ivanti.com/s/question/0D54O00006XJFVA/ssrs-open-url-in-new-tab?language=en_US

https://stackoverflow.com/questions/55051278/open-ssrs-action-urls-in-a-new-tab-window
I found that to use the snippet javascript:void etc... the report needed to be deployed to the ReportServer first.

https://stackoverflow.com/questions/65360159/add-target-window-tab-to-tablix-action-url
 URL defined in my query,

////////////////////////////////////////////////////////////////////////////////////////////////
2013:   https://stackoverflow.com/questions/18003013/open-ssrs-url-in-new-window/20102487
////////////////////////////////////////////////////////////////////////////////////////////////

Here is what I had used; it will open the ChildReport in a new tab,
 with a parameter voucher_id and its value passed from a dataset.
 
="javascript:void window.open(" &amp;"'"&amp; Globals!ReportServerUrl &amp;"/Pages/ReportViewer.aspx?"&amp;Globals!ReportFolder &amp;"/JournalVoucher&amp;voucher_id="&amp;Fields!account_voucher_id.Value &amp;" ','_blank')"
////////////////////////////////////////////////////////////////////////////////////////////////

="javascript:void(window.open('https://na5.salesforce.com/" &amp; Fields!id.Value &amp; "'))"

="javascript:void(window.open('https://na5.salesforce.com/" &amp; Fields!id.Value &amp; "','_blank'))"

/////////////////////////////////////////////////////////////////////////////////////////////

You can also add multiple javascript commands (but no functions) in the same action expression. 
Below is one of my most complicated SSRS Go-to-URL Action commands:

The key is to make sure that any and all necessary single quotes required by javascript show up inside a string (i.e., "'").

="Javascript:" 
    &amp; IIF(left(Fields!Name.Value,11)="RESTRICTED-", 
        "alert('Restricted!'); ","") &amp; IIF(Fields!Name_Alert.Value = 1, "alert('Alternate Alert!'); ","") 
    &amp; "void(window.open('" 
    &amp; Globals!ReportServerUrl 
    &amp; "/Pages/ReportViewer.aspx?%2fJPD%2fPO_Dashboard%2fJuvenile_Profile&amp;rs:Command=Render" 
    &amp; "&amp;rc:Parameters=true" 
    &amp; "&amp;Emp_Number=" 
    &amp; Parameters!Param1.Value 
    &amp; “&amp;ID=" &amp; Fields!ID.Value &amp; "'));"
    
ANOTHER PERSON SAID:
Tested it, worked only in Chrome for me.
And third, it's a mess to put it together.

There's a far easier &amp; better solution:
Add &amp;rc:LinkTarget=_blank to your report access URL, like:  (and it will open in a new window tab.)

https://your-domain.com/ReportServer/Pages/ReportViewer.aspx?%2fJPD%2fPO_Dashboard%2fJuvenile_Profile&amp;rs:Command=Render&amp;rc:LinkTarget=_blank   

</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Stored_Procedure</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>3_vw_ExecutionLog3_Modified_1</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Stored_Procedure</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>3_vw_ExecutionLog3_Modified_1</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>USE RiskMngt
GO

-- p_0025_vw_01_ExecutionLog3_Modified_1.sql
/*
FROM: http://www.mssqltips.com/sqlservertip/2722/sql-server-report-server-2008-r2-execution-log-reports/

*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER VIEW [Reporting].[vw_ExecutionLog3_Modified_1]
AS
SELECT
    EL.InstanceName
    , COALESCE(C.Path, 'Unknown') AS ItemPath
    , EL.UserName
    , EL.ExecutionId
    , CASE (EL.RequestType)
          WHEN 0
              THEN 'Interactive'
          WHEN 1
              THEN 'Subscription'
          WHEN 2
              THEN 'Refresh Cache'
          ELSE 'Unknown'
      END AS RequestType
    -- SubscriptionId, 
    , EL.Format
    , EL.Parameters
    , CASE (EL.ReportAction)
          WHEN 1
              THEN 'Render'
          WHEN 2
              THEN 'BookmarkNavigation'
          WHEN 3
              THEN 'DocumentMapNavigation'
          WHEN 4
              THEN 'DrillThrough'
          WHEN 5
              THEN 'FindString'
          WHEN 6
              THEN 'GetDocumentMap'
          WHEN 7
              THEN 'Toggle'
          WHEN 8
              THEN 'Sort'
          WHEN 9
              THEN 'Execute'
          ELSE 'Unknown'
      END AS ItemAction
    , EL.TimeStart
    , YEAR(EL.TimeStart) AS Start_Year
    , MONTH(EL.TimeStart) AS Start_Month
    , DATENAME(MONTH, EL.TimeStart) AS Start_Month_Name
    , DATENAME(DW, EL.TimeStart) AS Start_Day_Of_Week
    , DATEPART(WEEKDAY, EL.TimeStart) AS Start_Day_Number_of_Week
    , EL.TimeEnd
    , EL.TimeDataRetrieval
    , EL.TimeProcessing
    , EL.TimeRendering
    , CASE (EL.Source)
          WHEN 1
              THEN 'Live'
          WHEN 2
              THEN 'Cache'
          WHEN 3
              THEN 'Snapshot'
          WHEN 4
              THEN 'History'
          WHEN 5
              THEN 'AdHoc'
          WHEN 6
              THEN 'Session'
          WHEN 7
              THEN 'Rdce'
          ELSE 'Unknown'
      END AS Source
    , EL.Status
    , EL.ByteCount
    , EL.[RowCount]
    , EL.AdditionalInfo
    , C.Name
    , C.CreatedByID
    , C.ModifiedByID
    , C.Description
    , C.CreationDate
    , C.ModifiedDate
    , CASE
          WHEN C.Type = 1
              THEN 'Folder'
          WHEN C.Type = 2
              THEN 'Report'
          WHEN C.Type = 3
              THEN 'XML'
          WHEN C.Type = 4
              THEN 'Linked Report'
          WHEN C.Type = 5
              THEN 'Data Source'
          WHEN C.Type = 6
              THEN 'Model'
          WHEN C.Type = 8
              THEN 'Shared Dataset'
          WHEN C.Type = 9
              THEN 'Report Part'
      END AS Type_Description
FROM
    [ProductionReportServer].[dbo].[ExecutionLogStorage] AS EL
    LEFT OUTER JOIN
    [ProductionReportServer].[dbo].[Catalog] AS C
    ON
        (EL.ReportID = C.ItemID)

--ORDER BY TimeStart DESC
GO</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_HowTo</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Create_FOLDERs_for_Columns</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_HowTo</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Create_FOLDERs_for_Columns</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>This is good if you want to group all the non-measures together

1] In relationships view =&gt; select all the columns under a table in the FIELDS panel on the right
2] You will see a PROPERTIES panel next to the field panel, under the 'Display folder' 
	you will see a text box, enter the name of your folder (e.g. "Columns")
	Then touch somewhere else
Now in the REPORT view you will see the folder listed under the table</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>TEXT</Language>
        <Public>false</Public>
        <Name>Hyperlink_to_subreport_with_PARM</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>TEXT</Language>
          <Public>false</Public>
          <Name>Hyperlink_to_subreport_with_PARM</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


https://docs.microsoft.com/en-us/sql/reporting-services/pass-a-report-parameter-within-a-url?redirectedfrom=MSDN&amp;view=sql-server-ver15


------------------------------------------------------------------------------------------------------------------
Report parameters are case-sensitive and utilize the following special characters:

Any space characters in the URL string 
	are replaced with the characters "%20," according to URL encoding standards.
A space character in the parameter portion 
	of the URL is replaced with a plus character (+).
A semicolon in any portion of the string 
	is replaced with the characters "%3A."
Browsers should automatically perform the proper URL encoding. You do not have to encode any of the characters manually.
------------------------------------------------------------------------------------------------------------------

 To set a report parameter within a URL, use the following syntax:
 
	parameter=value  
	
For example, to specify two parameters, "ReportMonth" and "ReportYear", defined in a report, use the following URL for a native mode report server:	

	https://myrshost/ReportServer?/AdventureWorks 2008R2/Employee_Sales_Summary_2008R2&amp;ReportMonth=3&amp;ReportYear=2008
	
-------------------------------------------------------------------	
To pass a null value for a parameter, use the following syntax:

parameter  
:isnull=true  

For example:

SalesOrderNumber:isnull=true

-------------------------------------------------------------------
To pass a Boolean value, use 0 for false and 1 for true. 
To pass a Float value, include the decimal separator of the server locale

-------------------------------------------------------------------
Additional Examples

1] Ex. 1

Folder name of "SQL Server User Education Team" includes spaces and therefore the "+" replaces each space.

Report name of "team project report" includes spaces and therefore the "+" replaces each space.

Passes two parameters of "teamgrouping2" with a value of "xgroup" and "teamgrouping1" with a value of "ygroup".

LIKE THIS:

https://myserver/Reportserver?/SQL+Server+User+Education+Team/_ContentTeams/folder123/team+project+report&amp;teamgrouping2=xgroup&amp;teamgrouping1=ygroup

-------------------------------------------------------------------

2] Ex. 2

The following URL example includes a multi-value parameter "OrderID. The format for a Multi-Value parameter is to repeat the parameter name for each value.

https://myserver/Reportserver?/SQL+Server+User+Education+Team/_ContentTeams/folder123/team+project+report&amp;teamgrouping2=xgroup&amp;teamgrouping1=ygroup&amp;OrderID=747&amp;OrderID=787&amp;OrderID=12

-------------------------------------------------------------------

3] Ex. 3

The following URL example passes a single parameter of SellStartDate with a value of "7/1/2005", for a native mode report server.

https://myserver/ReportServer/Pages/ReportViewer.aspx?%2fProduct_and_Sales_Report_AdventureWorks&amp;SellStartDate=7/1/2005





















</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>