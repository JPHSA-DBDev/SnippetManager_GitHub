<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Functions</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Statistical_Functions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Functions</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Statistical_Functions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://docs.microsoft.com/en-us/dax/statistical-functions-dax

' Filters do not propogate in a Row Context, i.e. in Calculated Columns
----------------------------------------------------------------------------------
'SO if you created two columns in a Visual (e.g. Table) and one was based on a Calculated Column using data from a Related table, 
'	and the other was based on a Measure using data from a Related table, then the Calculated-based Rank would remain unchanged as you
'	apply filters to the related Table, but the Measure-based Rank would change as you applied filters to the related Table.

'e.g. for a Calculated Column
Ranking =        RANKX(ALL(Products), SUMX(RELATEDTABLE(SalesOrderDetail), SalesOrderDetail[GrossSales]))

'e.g. for a MEASURE Column
RankingMeasure = RANKX(ALL(Products), SUMX(RELATEDTABLE(SalesOrderDetail), SalesOrderDetail[GrossSales]))		
---------------------------------------------------------------------------------

ADDCOLUMNS
APPROXIMATEDISTINCTCOUNT
AVERAGE
AVERAGEA

AVERAGEX
 		'e.g.
 		AverageGrossSales = AVERAGEX(SalesOrderDetail, SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))
 		
BETA.DIST
BETA.INV
CHISQ.INV
CHISQ.INV.RT
CONFIDENCE.NORM
CONFIDENCE.T

COUNT():
	'The COUNT function counts the number of cells in a column that contains 
	'values of the whole number or integer or string datatype excluding the 
	'blank cell. It even counts the cell with repeated values.
	' only count non-empty cells  and are not sensitive to repetitive values 
	'in cells.
	Apps = COUNT(FactApplication[Client_App_ID])
	
	'EXAMPLE: show 0 if there are none, 1 if there are some
	' add a zero to convert the blanks to zero, then use "&gt;" to create boolean, then INT to convert back to 0/1
	INT((COUNT(FactApplication[Client_App_ID]) + 0) &gt; 0)

COUNTA():
	'COUNTA function can also count the boolean values (True or False) 
	'whereas count function returns an error .
	' only count non-empty cells  and are not sensitive to repetitive values 
	'in cells.

COUNTX():
	'Syntax: COUNTX(&lt;table&gt;,&lt;expression&gt;)
	'COUNTX function counts the number of rows which are non-empty when 
	'evaluating an expression over a table.
	'This function cannot be used for boolean values.

COUNTAX():
	'Syntax: COUNTAX(&lt;table&gt;,&lt;expression&gt;)
	'similar to COUNTX function with the only difference being that COUNTAX function can operate on boolean values.	

COUNTBLANKS():
	'Syntax: COUNTBLANK(&lt;column&gt;)
	' calculate the number of blanks present in a column.
	 NumbOfRowNumbersWithBlanks = COUNTBLANK('tableName'[columnName])
	
COUNTROWS():
	'Syntax : COUNTROWS(&lt;table&gt;)
	'NOTE: can use FILTERs in place of &lt;table&gt;
	'counts the number of rows in the specified table, or in a table defined by an expression .


CROSSJOIN
	'e.g. Cross Join 3 tables
	RowHeader_Territory_Segment = CROSSJOIN(RowHeaders,Segments,Territories)
DATATABLE function
DISTINCTCOUNT():
	'Syntax: DISTINCTCOUNT(&lt;column&gt;)
	' returns the number of unique values present in a column.
	'It counts NULL as a unique value

DISTINCTCOUNTNOBLANK
	' returns the number of unique values present in a column.
	'It DOES NOT counts NULL as a unique value
	
	CALCULATE( 
				DISTINCTCOUNT(DimDealer[DealerCode]),
				FILTER(DimDealer,DimDealer[DealerActive] = True())
			  )
	
	
EXPON.DIST
GENERATE
GENERATEALL
GEOMEAN
GEOMEANX
MAX
	'This takes the Max from a column, but does not let you filter by some category
MAXA
MAXX
	'This takes the Max from an expression, where the expression is what let's us 'filter' 
	'	down to just some rows
	
	Last Purchase Date for each Customer = 
	    //'return the MAX value from the set of returned rows
	    MAXX(
	            RELATEDTABLE(Internet Sales),     //'Work on the related set of rows from the table, related by the relationship (i.e. the customer)
	            Internet Sales[Order Date]       // 'for each row returned, return this field
	        )	
MEDIAN
MEDIANX
MIN
MINA
MINX
NORM.DIST
NORM.INV
NORM.S.DIST
NORM.S.INV (DAX)
PERCENTILE.EXC
PERCENTILE.INC
PERCENTILEX.EXC
PERCENTILEX.INC
POISSON.DIST
RANK.EQ
RANKX
	RANKX(&lt;table&gt;, &lt;expression&gt;[, &lt;value&gt;[, &lt;order&gt;[, &lt;ties&gt;]]])  
	'e.g. create a MEASURE: for each product (in TABLE_1: Products), go through each row in another table (TABLE_2: SalesOrderDetail)
	
	Ranking = RANKX(
					ALL(Products), 
					SUMX(
							RELATEDTABLE(SalesOrderDetail), 
							SalesOrderDetail[GrossSales])
						)
					)
	'NOTE: if you used  SUMX(SalesOrderDetail, SalesOrderDetail[GrossSales]) 
	'	then it would sum up all the rows, rather than just the related rows
	'NOTE: if we did not use ALL (for [Products] table) then it would only rank for the filtered rows of [Products], and not give us an overall Rank


ROW
SAMPLE
SELECTCOLUMNS
SIN
SINH
SQRTPI
STDEV.P
STDEV.S
STDEVX.P
STDEVX.S
SUMMARIZE
	'SYNTAX
	SUMMARIZE (&lt;table&gt;, &lt;groupBy_columnName&gt;[, &lt;groupBy_columnName&gt;]…[, &lt;name&gt;, &lt;expression&gt;]…)
	'Returns a summary table for the requested totals over a set of groups.
	&lt;expression&gt;	'Any DAX expression that returns a single scalar value, where the expression is to be evaluated multiple times (for each row/context).
T.DIST
T.DIST.2T
T.DIST.RT
T.INV
T.INV.2t
TAN
TANH
TOPN
VAR.P
VAR.S
VARX.P
VARX.S
XIRR
XNPV
</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>