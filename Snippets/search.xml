<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>BINDING_DataSets_to_FORMS_and_CONTROLS_synching_with_a_DataBase</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>1_simulated_data_DataSet_to_FORMS_and_CONTROLS__Settings.Designer.cs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>BINDING_DataSets_to_FORMS_and_CONTROLS_synching_with_a_DataBase</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>1_simulated_data_DataSet_to_FORMS_and_CONTROLS__Settings.Designer.cs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

namespace Data.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.ConnectionString)]
        [global::System.Configuration.DefaultSettingValueAttribute("Data Source=VMHOMETOWER;Initial Catalog=Northwind;Integrated Security=True")]
        public string NorthwindConnection {
            get {
                return ((string)(this["NorthwindConnection"]));
            }
        }
    }
}


/////////////////////////// OR if you open the Settings.settings object from Solution Explorer as an XML file you see this:

&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="Data.Properties" GeneratedClassName="Settings"&gt;
  &lt;Profiles /&gt;
  &lt;Settings&gt;
    &lt;Setting Name="NorthwindConnection" Type="(Connection string)" Scope="Application"&gt;
      &lt;DesignTimeValue Profile="(Default)"&gt;&amp;lt;?xml version="1.0" encoding="utf-16"?&amp;gt;
&amp;lt;SerializableConnectionString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&amp;gt;
  &amp;lt;ConnectionString&amp;gt;Data Source=VMHOMETOWER;Initial Catalog=Northwind;Integrated Security=True&amp;lt;/ConnectionString&amp;gt;
  &amp;lt;ProviderName&amp;gt;System.Data.SqlClient&amp;lt;/ProviderName&amp;gt;
&amp;lt;/SerializableConnectionString&amp;gt;&lt;/DesignTimeValue&gt;
      &lt;Value Profile="(Default)"&gt;Data Source=VMHOMETOWER;Initial Catalog=Northwind;Integrated Security=True&lt;/Value&gt;
    &lt;/Setting&gt;
  &lt;/Settings&gt;
&lt;/SettingsFile&gt;
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MERGE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>02_MERGE_from_BCC____prj_0010_JOB_100_Synchronize_T01_in_TRAIN.sql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MERGE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>02_MERGE_from_BCC____prj_0010_JOB_100_Synchronize_T01_in_TRAIN.sql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--prj_0010_JOB_100_Synchronize_T01_in_TRAIN.sql

USE [msdb]
GO

/****** Object:  Job [JOB_100_Synchronize_T01_in_TRAIN]    Script Date: 12/07/2016 10:15:26 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]]    Script Date: 12/07/2016 10:15:26 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR &lt;&gt; 0 OR @ReturnCode &lt;&gt; 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'JOB_100_Synchronize_T01_in_TRAIN', 
		@enabled=0, 
		@notify_level_eventlog=0, 
		@notify_level_email=3, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'BCC\glenng', 
		@notify_email_operator_name=N'glenn', @job_id = @jobId OUTPUT
IF (@@ERROR &lt;&gt; 0 OR @ReturnCode &lt;&gt; 0) GOTO QuitWithRollback
/****** Object:  Step [Synchronize]    Script Date: 12/07/2016 10:15:26 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Synchronize', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC  prj_0010_SP_213_MERGE_source_vw_0010_514__target__T01_Employee', 
		@database_name=N'TRAIN', 
		@flags=20
IF (@@ERROR &lt;&gt; 0 OR @ReturnCode &lt;&gt; 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR &lt;&gt; 0 OR @ReturnCode &lt;&gt; 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'NIGHTLY_JOB_100_Synchronize_T01_in_TRAIN', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20160224, 
		@active_end_date=99991231, 
		@active_start_time=70000, 
		@active_end_time=235959, 
		@schedule_uid=N'a1750c99-adba-4eda-8eb4-c34caf6d9548'
IF (@@ERROR &lt;&gt; 0 OR @ReturnCode &lt;&gt; 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR &lt;&gt; 0 OR @ReturnCode &lt;&gt; 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT &gt; 0) ROLLBACK TRANSACTION
EndSave:

GO


</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MERGE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_MERGE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MERGE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_MERGE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_MERGE

--Locking problem at Barriere: Look into HOLDLOCK
--HOLDLOCK means SERALIZABLE and therefore allows SELECTS, but blocks UPDATE and DELETES of the rows selected by T1, 
--	as well as any INSERT in the range selected by T1 (which is the entire table, therefore any insert).
--HOLDLOCKS are used at table level it prevents the table from being updated by any other DML transactions like an insert or an update. 
--	HOLDLOCKS are preferable to use in situations where we need only COMMITTED READS.

--NOLOCKS are opposite of HOLDLOCKS and when they are issued at a table level, 
--	it allows the user to access/read the data from a table whilst some update/ insert operations are running at the back. 
--	NOLOCKS may produce UNCOMMITTED READS and are preferred to use at the Production Environments so that the real time update is not hindered.

/*
MERGE inserts and updates data at the same time
we need to provide a source table and a destination table. 
We then give it a method of matching rows between them, 
 usually the primary key or business/natural key (this can use multiple fields).
We can then specify a number of actions depending on whether a match is found or not.
If a match is found we may want to update the existing record.
If a match isn’t found then it’s likely that we’ll want to insert a new record.
	
This feature is very useful in a scenario where we want to synchronize the data in the target table with source table data. 
	In earlier versions of sql server to achieve this synchronization we would have scanned the source and target tables multiple times
	(i.e. ones for inserting the new records , 
	second time for updating the matching records and third time for deleting the records in the destination table 
	which are not present in the source table), 
	but with Merge statement we can achieve all this with single statement 
	and with only one time looking-up of the source and target tables.	
	
http://www.purplefrogsystems.com/blog/2011/12/introduction-to-t-sql-merge-basics/	

First we set the tables and the joining key(s)		*/

MERGE [Destination Table] AS Target
   USING [Source Table] AS Source
     ON Target.KeyField = Source.KeyField

--Then we define what we want to happen if we find a match (optional)

  WHEN MATCHED

--If you want you can specify other conditions, such as checking whether anything has changed

     AND  (
         Target.Field1 &lt;&gt; Source.Field1
         OR Target.Field2 &lt;&gt; Source.Field2
         )
         
--We can then perform an action. i.e. an update, delete, etc.

  THEN UPDATE SET
        Field1 = Source.Field1
      , Field2 = Source.Field2

--Then we define what we want to happen if we don’t find a matching record (optional)

   WHEN NOT MATCHED

--In this case, we want to insert the new record

      THEN INSERT (
             KeyField
           , Field1
           , Field2
        ) VALUES (
             Source.KeyField
           , Source.Field1
           , Source.Field2
      );</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_AD</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Dirsync</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_AD</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Dirsync</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Start remote to BCC-Probe 


Invoke-Command -ComputerName BCC-Probe `
               -ScriptBlock { import-module Dirsync } `
               -Credential glenng
               
Invoke-Command -ComputerName BCC-Probe `
               -ScriptBlock { Start-OnlineCoexistenceSync } `
               -Credential glenng               
               
'=======================================================================================               
$Workload = {
    $ImportModule = import-module Dirsync
    $Synchronize = Start-OnlineCoexistenceSync

    $ImportModule,$Synchronize
}

$FirstJob,$SecondJob = Invoke-Command -ComputerName BCC-Probe -ScriptBlock $Workload    
'=======================================================================================       </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>POWERSHELL_Files_Folders_Directories</Category>
        <Language>VBSCRIPT</Language>
        <Public>false</Public>
        <Name>Permissions_recursive_on_items_in_Directory</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>POWERSHELL_Files_Folders_Directories</Category>
          <Language>VBSCRIPT</Language>
          <Public>false</Public>
          <Name>Permissions_recursive_on_items_in_Directory</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code> 
 #' This is just a huge list by folder
 #' You have to CD to the target folder, and it saves the output file
 #' to the target folder
 Get-ChildItem -Recurse | where-object {($_.PsIsContainer)} | get-acl | format-list &gt; permission.txt
 
 =================================================================
 #' This is 3 column output: User, Access, folder
 #' You have to CD to the target folder, and it saves the output file
 #' to the target folder 
 
 Get-childitem \\jphsa.org\shared\Data\CPS -recurse | where{$_.psiscontainer} |
				Get-Acl | % {
							    $path = $_.Path
							    $_.Access | % {
							        New-Object PSObject -Property @{
							            Folder = $path.Replace("Microsoft.PowerShell.Core\FileSystem::","")
							            Access = $_.FileSystemRights
							            Control = $_.AccessControlType
							            User = $_.IdentityReference
							            Inheritance = $_.IsInherited
							            }
							        }
							    } | select-object -Property User, Access, Folder | export-csv output.csv -force
    
#' Sample output
User				Access						Folder
JPHSA01\tjohnson	Modify, Synchronize			\\jphsa.org\shared\Data\CPS\Aftercare Records
JPHSA01\dharris		Modify, Synchronize			\\jphsa.org\shared\Data\CPS\Aftercare Records
JPHSA01\ERiehl		Modify, Synchronize			\\jphsa.org\shared\Data\CPS\Aftercare Records
JPHSA01\CPS			ReadAndExecute, Synchronize	\\jphsa.org\shared\Data\CPS\Aftercare Records

 =================================================================</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>VSTO_2015</Category>
        <Language>C#</Language>
        <Public>false</Public>
        <Name>EXCEL_Add-In_Synchronizing a Custom Task Pane with a Ribbon Button</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>VSTO_2015</Category>
          <Language>C#</Language>
          <Public>false</Public>
          <Name>EXCEL_Add-In_Synchronizing a Custom Task Pane with a Ribbon Button</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Walkthrough: Synchronizing a Custom Task Pane with a Ribbon Button
https://msdn.microsoft.com/en-us/library/bb608590.aspx

/*
 demonstrates how to create a custom task pane that users can hide or display by clicking a toggle button on the Ribbon. 
 You should always create a user interface (UI) element, such as a button, that users can click to display or hide your custom task pane, 
 because Microsoft Office applications do not provide a default way for users to show or hide custom task panes. 
 
 To create a new project
 ------------------------
	1.Create an Excel Add-in project with the name SynchronizeTaskPaneAndRibbon, 
		using the Excel Add-in project template. 

To add a toggle button to the Ribbon
-------------------------------------
1.On the Project menu, click Add New Item.
2.In the Add New Item dialog box, select Ribbon (Visual Designer).
3.Change the name of the new Ribbon to ManageTaskPaneRibbon, and click Add.
	The ManageTaskPaneRibbon.cs or ManageTaskPaneRibbon.vb file opens in the Ribbon Designer and displays a default tab and group.
4.In the Ribbon Designer, click group1.
5.In the Properties window, set the Label property to Task Pane Manager.
6.From the Office Ribbon Controls tab of the Toolbox, drag a ToggleButton onto the Task Pane Manager group.
7.Click toggleButton1.
8.In the Properties window, set the Label property to Show Task Pane.

To design the user interface of the custom task pane
-----------------------------------------------------
1.On the Project menu, click Add User Control.
2.In the Add New Item dialog box, change the name of the user control to TaskPaneControl, and click Add.
	The user control opens in the designer.
3.From the Common Controls tab of the Toolbox, drag a TextBox control to the user control.

To create the custom task pane
---------------------------------
1.In Solution Explorer, expand Excel.
2.Right-click ThisAddIn.cs or ThisAddIn.vb and click View Code.
3.Add the code which declares an instance of TaskPaneControl as a member of ThisAddIn.

To display and hide the custom task pane by using the toggle button
--------------------------------------------------------------------
1.In the Ribbon Designer, double-click the Show Task Pane toggle button.
 
	Visual Studio automatically generates an event handler named toggleButton1_Click, 
	which handles the Click event of the toggle button. 
	Visual Studio also opens the MyRibbon.cs or MyRibbon.vb file in the Code Editor.
	{actually it opened the "ManageTaskPaneRibbon.cs" window"


To test your VSTO Add-in
-------------------------

1.Press F5 to run your project.
	Confirm that Excel opens, and the Add-Ins tab appears on the Ribbon.
2.Click the Add-Ins tab on the Ribbon.
3.In the Task Pane Manager group, click the Show Task Pane toggle button.
	Verify that the task pane is alternately displayed and hidden when you click the toggle button.
4.When the task pane is visible, click the Close button (X) in the corner of the task pane.
	Verify that the toggle button appears to be not pressed.
*/

ManageTaskPaneRibbon.cs
=========================================================
using Microsoft.Office.Tools.Ribbon;

namespace SynchronizeTaskPaneAndRibbon
{
    public partial class ManageTaskPaneRibbon
    {
        private void ManageTaskPaneRibbon_Load(object sender, RibbonUIEventArgs e)
        {

        }

        private void toggleButton1_Click(object sender, RibbonControlEventArgs e)
        {
            Globals.ThisAddIn.TaskPane.Visible = ((RibbonToggleButton)sender).Checked;
        }
    }
}


ThisAddIn.cs
==========================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Excel = Microsoft.Office.Interop.Excel;
using Office = Microsoft.Office.Core;
using Microsoft.Office.Tools.Excel;

namespace SynchronizeTaskPaneAndRibbon
{
    public partial class ThisAddIn
    {
        //====================================================================================

        // This code declares an instance of TaskPaneControl as a member of ThisAddIn.
        private TaskPaneControl taskPaneControl1;
        private Microsoft.Office.Tools.CustomTaskPane taskPaneValue;

        private void ThisAddIn_Startup(object sender, System.EventArgs e)
        {
            // This code adds the TaskPaneControl object to the CustomTaskPanes field, 
            //  but it does not display the custom task pane 
            taskPaneControl1 = new TaskPaneControl();
            taskPaneValue = this.CustomTaskPanes.Add(taskPaneControl1, "MyCustomTaskPane");

            //(by default, the Visible property of the CustomTaskPane class is false). 

            //The Visual C# code also attaches an event handler to the VisibleChanged event.
            taskPaneValue.VisibleChanged += new EventHandler(taskPaneValue_VisibleChanged);
        }


        private void taskPaneValue_VisibleChanged(object sender, System.EventArgs e)
        {
            Globals.Ribbons.ManageTaskPaneRibbon.toggleButton1.Checked = taskPaneValue.Visible;
        }

        //This property exposes the private myCustomTaskPane1 object to other classes.
        public Microsoft.Office.Tools.CustomTaskPane TaskPane
        {
            get
            {
                return taskPaneValue;
            }
        }


        //====================================================================================
        private void ThisAddIn_Shutdown(object sender, System.EventArgs e)
        {
        }

        #region VSTO generated code

        /// &lt;summary&gt;
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// &lt;/summary&gt;
        private void InternalStartup()
        {
            this.Startup += new System.EventHandler(ThisAddIn_Startup);
            this.Shutdown += new System.EventHandler(ThisAddIn_Shutdown);
        }
        
        #endregion
    }
}
</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>