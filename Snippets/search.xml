<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Logic_statements</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>Condition_in_RelatedColumn_SUMX</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Logic_statements</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>Condition_in_RelatedColumn_SUMX</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://radacad.com/if-and-filter-are-different-be-careful-dax

Using FILTER {MEASURE}
===============
'For a visual, where each row is a different color: this will elimnate all the rows that are not red

Sum of Red Products - With Filter = SUMX(
	                                    FILTER(FactInternetSales,
											   RELATED(DimProduct[Color])='Red')
										,FactInternetSales[SalesAmount]
										)
'I have used a simple FILTER function to filter everything in FactInternetSales when Color or product is “Red”. 
'I have used RELATED function because Color is a column in DimProduct and Related Function 
	'goes through the relationship from Many (FactInternetSales) to One (DimProduct) 
	'and allow us to do the filtering based on a column in a related table.
										
Using IF
===============	
'For a visual, where each row is a different color: this will show the correct answer for Red, and zeros for the other rows
Sum of Red Products - With IF = SUMX(
	                                FactInternetSales,
									IF(RELATED(DimProduct[Color])='Red',
										FactInternetSales[SalesAmount],
										0)
                                    )									
' I have used a conditional expression to identify if the color of product is “Red” or not, 
	'if it is “Red”, then I use SalesAmount for sum calculation, otherwise 
'I use zero (means don’t summarize for other product colors).                                   

Simple Conditional Expression
==================================
'For a visual, where each row is a different color: all rows would be the same answer as the red row
Sum of Red Products - Calculate Simple Expression = CALCULATE(
	                                                      SUM(FactInternetSales[SalesAmount]),
														  DimProduct[Color]='Red'
														)
'Writing DimProduct[Color]=”Red” in this way is similar to writing a condition for every result set. 
'	The final result will be sum of Red Products.														

Testing Results – Similar
==========================
'If you bring both measures in Power BI as a Table Visual you will see the result of both are identical, 
'	and it will show you total sales amount for products with “Red” Color correctly;

Differnt Results
====================
'however if you use one of these measures for a data set you will see the result of data set is different, 
'	and it changes the result significantly.

'In both cases, the grand total is similar. 
'However the table with a FILTER measure will automatically filter the data set, 
'	and only shows result set for RED products, where the second table with IF measure, 
'	will show all products with zero in front of all colors, except Red. 
'These two are VERY different in user point of view, while the final total value is similar. 
'The reason is that IF just apply a conditional expression on the result set, 
'	where FILTER works differently and filters the data set to the custom filter expression. 
'Notice that we don’t have any Visual, Report, or Page Level filter applied in this example. 
'Filtering happened automatically because of FILTER function.
'If you bring the last method’s result  into a table (Sum of Red Products – Calculate Simple Expression), 
'	you will see the calculation happens on every row in the result set. It won’t filter the data set, 
'	but the filter applies on calculating the final result for every row.
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Relationhships</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>RELATED</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Relationhships</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>RELATED</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>RELATED

'SYNTAX
RELATED(&lt;column&gt;)  

column	
'The column that contains the values you want to retrieve.
'The column named must reference a table on the "one" side of a relationship (e.g. Many-to-One)
'	i.e. accesses columns from an expanded table

NOTES
=====
'The RELATED function requires that a relationship exists between the current table and the table with related information. 
'	You specify the column that contains the data that you want, 
'		and the function follows an existing many-to-one relationship to fetch the value from the specified column in the related table. 
'	If a relationship does not exist, you must create a relationship.

'When the RELATED function performs a lookup, 
'	it examines all values in the specified table regardless of any filters that may have been applied.

'The RELATED function needs a row context; 
'	therefore, it can only be used in calculated column expression, 
'		where the current row context is unambiguous, 
'		or as a nested function in an expression that uses a table scanning function. 
'A table scanning function, 
'	such as SUMX, gets the value of the current row value and then scans another table for instances of that value.

'The RELATED function cannot be used to fetch a column across a limited relationship.


This is not backed by testing: Row context propogation: Iterators vs (Revisers &amp; FILTER)
========================
'Iterator functions (SUMX, RANKX, etc.) use row context to evaluate row level calculations so they don't 
'	need to use RELATED or RELATEDTABLE functions
'CALCULATE and FILTER creates/modifies Filter Context) and therefore the Row context doesn't 
'	automatically propagate through table relationships so they need to use RELATED or RELATEDTABLE functions
	
'EXAMPLES
===========
FILTER( 
		'InternetSales_USD', 
		RELATED(
				'SalesTerritory'[SalesTerritoryCountry]
				)&lt;&gt;"United States"
	  )

'for a calculated column
'in this case if you remove RELATED you get an ERROR: 
		' A single value for column 'product_group' in table 'Product Lookup' cannot be determined.
Product Group = 
				RELATED(
				    'Product Lookup'[product_group]
				)
				
'for a Measure
'in this case if you remove RELATED you get an ERROR:
'		'A single value for column 'current_wholesale_price' in table 'Product Lookup' cannot be determined.
Wholesale Cost = 
				SUMX(
					    'Sales by Store',
					    'Sales by Store'[quantity_sold] * RELATED(
																        'Product Lookup'[current_wholesale_price]
																    )
					)				</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DAX_Relationhships</Category>
        <Language>VB</Language>
        <Public>false</Public>
        <Name>RELATEDTABLE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DAX_Relationhships</Category>
          <Language>VB</Language>
          <Public>false</Public>
          <Name>RELATEDTABLE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>RELATEDTABLE
'Evaluates a table expression in a context modified by the given filters.
'The RELATEDTABLE function will travel through the existing relationship between tables, 
'	and will populate a list of rows (sub-table) from the give table

'RELATEDTABLE is a shortcut for CALCULATETABLE (with no logical expression) and performs a
'	context transition from row context to filter context, in order to return only the rows
' which satisfy the filter condition

'SYNTAX
RELATEDTABLE(&lt;tableName&gt;)

tableName	
'The name of an existing table using standard DAX syntax. It cannot be an expression.
'Must reference a table on the "many" side of a many-to-one relationship

NOTE
=====
'The RELATEDTETABLE function changes the context in which the data is filtered, 
'	and evaluates the expression in the new context that you specify.
'RELATEDTETABLE is commonly used with aggregators like COUNTROWS, SUMX, AVERAGEX, etc

'This function is a shortcut for CALCULATETABLE function with no logical expression.


This is not backed by testing: Row context propogation: Iterators vs (Revisers &amp; FILTER)
========================
'Iterator functions (SUMX, RANKX, etc.) use row context to evaluate row level calculations so they don't 
'	need to use RELATED or RELATEDTABLE functions
'CALCULATE and FILTER creates/modifies Filter Context) and therefore the Row context doesn't 
'	automatically propagate through table relationships so they need to use RELATED or RELATEDTABLE functions


EXAMPLES
=================

SUMX( 
		RELATEDTABLE('InternetSales_USD')  
    	 , [SalesAmount_USD]
    ) 

'Calculated Column (aggregation)
' the related table is tied to this calculated column's table by the Product ID, so I think it is creating a virtual table of rows with the same Product IT
'	to be used as the &lt;table&gt; by SUMX, and then the column 'Food Inventory'[quantity_start_of_day] in the Virtual Table is summed up.
Number of Food Items Made = 
							SUMX(
							    RELATEDTABLE(								//'&lt;== This is doing the context transition for the SUMX on each row
										        'Food Inventory'
										    ),
									   'Food Inventory'[quantity_start_of_day]
									)        </Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>