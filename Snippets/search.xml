<?xml version="1.0" encoding="utf-8"?>
<dictionary>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Find and manage empty Active Directory groups</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Find and manage empty Active Directory groups</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Usage at bottom of the script

#requires -version 2
&lt;#
.SYNOPSIS
  Find and manage empty Active Directory groups.
.DESCRIPTION
  This script allows you to find and manage empty security and distribution groups withing your AD environment. This script also allows
  for the management of found groups. Management of empty groups includes one or more of the following options:
    - Reporting
    - Deleting
.PARAMETER SearchScope
  Optional. Specifies an Active Directory Path to search under. This is primarily used to narrow down your search within a certain OU and it's children.
  Search Scope must be specfied in LDAP format. If not specified, the default search scope is the root of the domain.
  Example: -SearchScope "OU=GROUPS,DC=testlab,DC=com"
.PARAMETER ReportFilePath
  Optional. This is the location where the report of empty groups will be saved to. If this parameter is not specified, the default location
  the report is saved to is C:\EmptyGroups.csv.
  Note: When specifying the file path, you MUST include the file name with the extension of .csv. Example: 'C:\MyReport.csv'.
.PARAMETER DeleteObjects
  Optional. If this parameter is specified, this script will delete the empty groups found based on the search scope specified.
  Note: If this parameter is not specified, then by default this script WILL NOT delete any empty groups found.
.INPUTS
  None.
.OUTPUTS
  Report of empty groups found. See ReportFilePath parameter for more information.
.NOTES
  Version:        1.0
  Author:         Luca Sturlese
  Creation Date:  16.07.2016
  Purpose/Change: Initial script development
.EXAMPLE
  Execution of script using default parameters. Default execution performs reporting of empty AD gruops only, not deleting any objects.
  By default the report is saved in C:\.
  .\Find-ADEmptyGroups.ps1
.EXAMPLE
  Reporting and deleting all empty groups found within the GROUPS OU. Store the report in C:\Reports.
  .\Find-ADEmptyGroups.ps1 -SeachScope "OU=GROUPS,DC=testlab,DC=com" -ReportFilePath 'C:\Reports\DeletedGroups.csv' -DeleteObjects
#&gt;

#---------------------------------------------------------[Script Parameters]------------------------------------------------------

Param (
  [Parameter(Mandatory = $false)][string]$SearchScope,
  [Parameter(Mandatory = $false)][string]$ReportFilePath = 'C:\EmptyGroups.csv',
  [Parameter(Mandatory = $false)][switch]$DeleteObjects = $false
)

#---------------------------------------------------------[Initialisations]--------------------------------------------------------

#Set Error Action to Silently Continue
$ErrorActionPreference = 'SilentlyContinue'

#Import Modules &amp; Snap-ins
Import-Module ActiveDirectory

#----------------------------------------------------------[Declarations]----------------------------------------------------------



#-----------------------------------------------------------[Functions]------------------------------------------------------------

Function Find-Objects {
  Param ()

  Begin {
    Write-Host "Finding empty groups based on search scope specified..."
  }

  Process {
    Try {
      If($SearchScope) {
        $global:Results = Get-ADGroup -Filter { Members -notlike "*" } -SearchBase $SearchScope | Select-Object Name, GroupCategory, DistinguishedName
      } Else {
        $global:Results = Get-ADGroup -Filter { Members -notlike "*" } | Select-Object Name, GroupCategory, DistinguishedName
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }

    End {
      If ($?) {
        Write-Host 'Completed Successfully.'
        Write-Host ' '
      }
    }
  }
}

Function Create-Report {
  Param ()

  Begin {
    Write-Host "Creating report of empty groups in specified path [$ReportFilePath]..."
  }

  Process {
    Try {
      #Check file path to ensure correct
      If ($ReportFilePath -notlike '*.csv') {
        $ReportFilePath = Join-Path -Path $ReportFilePath -ChildPath '\EmptyGroups.csv'
      }

      # Create CSV report
      $global:Results | Export-Csv $ReportFilePath -NoTypeInformation
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

Function Delete-Objects {
  Param ()

  Begin {
    Write-Host 'Deleting empty groups...'
  }

  Process {
    Try {
      ForEach ($Item in $global:Results){
        Remove-ADGroup -Identity $Item.DistinguishedName -Confirm:$false
        Write-Host "$($Item.Name) - Deleted"
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

#-----------------------------------------------------------[Execution]------------------------------------------------------------

Find-Objects
Create-Report

If ($DeleteObjects) {
  Delete-Objects
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Find and manage empty Active Directory OUs</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Find and manage empty Active Directory OUs</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Usage at the bottom of the script


#requires -version 2
&lt;#
.SYNOPSIS
  Find and manage empty Active Directory OUs.
.DESCRIPTION
  This script allows you to find and manage empty organizational units within your AD environment. This script also allows
  for the management of found OUs. Management of empty OUs includes one or more of the following options:
    - Reporting
    - Deleting
.PARAMETER SearchScope
  Optional. Specifies an Active Directory Path to search under. This is primarily used to narrow down your search within a certain OU and it's children.
  Search Scope must be specfied in LDAP format. If not specified, the default search scope is the root of the domain.
  Example: -SearchScope "OU=MGT,DC=testlab,DC=com"
.PARAMETER ReportFilePath
  Optional. This is the location where the report of empty OUs will be saved to. If this parameter is not specified, the default location
  the report is saved to is C:\EmptyOUs.csv.
  Note: When specifying the file path, you MUST include the file name with the extension of .csv. Example: 'C:\MyReport.csv'.
.PARAMETER DeleteObjects
  Optional. If this parameter is specified, this script will delete the empty OUs found based on the search scope specified.
  Note: If this parameter is not specified, then by default this script WILL NOT delete any empty OUs found.
  Note: If the OU to be deleted has been marked with PreventFromAccidentialDeletion, then this script will return an error.
.INPUTS
  None.
.OUTPUTS
  Report of empty OUs found. See ReportFilePath parameter for more information.
.NOTES
  Version:        1.0
  Author:         Luca Sturlese
  Creation Date:  16.07.2016
  Purpose/Change: Initial script development
.EXAMPLE
  Execution of script using default parameters. Default execution performs reporting of empty OUs only, not deleting any objects.
  By default the report is saved in C:\.
  .\Find-ADEmptyOU.ps1
.EXAMPLE
  Reporting and deleting all empty OUs found within the MGT OU. Store the report in C:\Reports.
  .\Find-ADEmptyOU.ps1 -SeachScope "OU=MGT,DC=testlab,DC=com" -ReportFilePath 'C:\Reports\DeletedOUs.csv' -DeleteObjects
#&gt;

#---------------------------------------------------------[Script Parameters]------------------------------------------------------

Param (
  [Parameter(Mandatory = $false)][string]$SearchScope,
  [Parameter(Mandatory = $false)][string]$ReportFilePath = 'C:\EmptyOUs.csv',
  [Parameter(Mandatory = $false)][switch]$DeleteObjects = $false
)

#---------------------------------------------------------[Initialisations]--------------------------------------------------------

#Set Error Action to Silently Continue
$ErrorActionPreference = 'SilentlyContinue'

#Import Modules &amp; Snap-ins
Import-Module ActiveDirectory

#----------------------------------------------------------[Declarations]----------------------------------------------------------



#-----------------------------------------------------------[Functions]------------------------------------------------------------

Function Find-Objects {
  Param ()

  Begin {
    Write-Host "Finding empty OUs based on search scope specified..."
  }

  Process {
    Try {
      If($SearchScope) {
        $global:Results = Get-ADOrganizationalUnit -Filter * -SearchBase $SearchScope | ForEach-Object { If ( !( Get-ADObject -Filter * -SearchBase $_ -SearchScope OneLevel) ) { $_ } } | Select-Object Name, DistinguishedName
      } Else {
        $global:Results = Get-ADOrganizationalUnit -Filter * | ForEach-Object { If ( !( Get-ADObject -Filter * -SearchBase $_ -SearchScope OneLevel) ) { $_ } } | Select-Object Name, DistinguishedName
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }

    End {
      If ($?) {
        Write-Host 'Completed Successfully.'
        Write-Host ' '
      }
    }
  }
}

Function Create-Report {
  Param ()

  Begin {
    Write-Host "Creating report of empty OUs in specified path [$ReportFilePath]..."
  }

  Process {
    Try {
      #Check file path to ensure correct
      If ($ReportFilePath -notlike '*.csv') {
        $ReportFilePath = Join-Path -Path $ReportFilePath -ChildPath '\EmptyOUs.csv'
      }

      # Create CSV report
      $global:Results | Export-Csv $ReportFilePath -NoTypeInformation
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

Function Delete-Objects {
  Param ()

  Begin {
    Write-Host 'Deleting empty OUs...'
  }

  Process {
    Try {
      ForEach ($Item in $global:Results){
        Remove-ADOrganizationalUnit -Identity $Item.DistinguishedName -Confirm:$false
        Write-Host "$($Item.Name) - Deleted"
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

#-----------------------------------------------------------[Execution]------------------------------------------------------------

Find-Objects
Create-Report

If ($DeleteObjects) {
  Delete-Objects
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>AD_Active_Directory</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Find and manage inactive Active Directory computer objects</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>AD_Active_Directory</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Find and manage inactive Active Directory computer objects</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>'Usage at bottom of script

#requires -version 2
&lt;#
.SYNOPSIS
  Find and manage inactive Active Directory computer objects.
.DESCRIPTION
  This script allows you to specify the criteria required to identify inactive computer objects within your AD environment. This script also allows
  for the management of found computers. Management of computer objects includes one or more of the following options:
    - Reporting
    - Disabling computer objects
    - Deleting computer objects
.PARAMETER SearchScope
  Optional. Determines the search scope of what type of computer object you would like to include in the inactive computers search. Options available are:
   - All                        : Default option. All computer including never logged on computer objects.
   - OnlyInactiveComputers      : Only inactive computers. These are computers that have logged on in the past but have not logged on since DaysInactive.
   - OnlyNeverLoggedOn          : Only never logged on objects. This option excludes computers that have logged on before.
   Note: If not specified, the default search scope is All (i.e. all inactive and never logged on computer objects).
.PARAMETER DaysInactive
  Optional. The number of days a computer hasn't logged into the domain for in order to classify it as inactive. The default option is 90
  days, which means any computer that hasn't logged into the domain for 90 days or more is considered inactive and therefore managed by this
  script.
.PARAMETER ReportFilePath
  Optional. This is the location where the report of inactive computer objects will be saved to. If this parameter is not specified, the default location
  the report is saved to is C:\InactiveComputers.csv.
  Note: When specifying the file path, you MUST include the file name with the extension of .csv. Example: 'C:\MyReport.csv'.
.PARAMETER DisableObjects
  Optional. If this parameter is specified, this script will disable the inactive computer objects found based on the search scope specified.
  Note: If this parameter is not specified, then by default this script WILL NOT disable any inactive computers found.
.PARAMETER DeleteObjects
  Optional. If this parameter is specified, this script will delete the inactive computer objects found based on the search scope specified.
  Note: If this parameter is not specified, then by default this script WILL NOT delete any inactive computers found.
.INPUTS
  None.
.OUTPUTS
  Report of inactive computer objects found. See ReportFilePath parameter for more information.
.NOTES
  Version:        1.0
  Author:         Luca Sturlese
  Creation Date:  16.07.2016
  Purpose/Change: Initial script development
.EXAMPLE
  Execution of script using default parameters. Default execution performs reporting of inactive AD computers only, not disabling or deleting any objects.
  By default the report is saved in C:\.
  .\Find-ADInactiveComputers.ps1
.EXAMPLE
  Reporting and disabling all inactive computer objects, except never logged on objects. Storing the report in C:\Reports.
  .\Find-ADInactiveComputers.ps1 -SeachScope OnlyInactiveComputers -ReportFilePath 'C:\Reports\DisabledComputers.csv' -DisableObjects
.EXAMPLE
  Find &amp; delete all inactive computer objects that haven't logged in for the last 30 days. Include never logged on objects in this search.
  .\Find-ADInactiveComputers.ps1 -SeachScope All -DaysInactive 30 -DeleteObjects
#&gt;

#---------------------------------------------------------[Script Parameters]------------------------------------------------------

Param (
  [Parameter(Mandatory = $false)][string][ValidateSet('All', 'OnlyInactiveComputers', 'OnlyNeverLoggedOn')]$SearchScope = 'All',
  [Parameter(Mandatory = $false)][int]$DaysInactive = 90,
  [Parameter(Mandatory = $false)][string]$ReportFilePath = 'C:\Inactivecomputers.csv',
  [Parameter(Mandatory = $false)][switch]$DisableObjects = $false,
  [Parameter(Mandatory = $false)][switch]$DeleteObjects = $false
)

#---------------------------------------------------------[Initialisations]--------------------------------------------------------

#Set Error Action to Silently Continue
$ErrorActionPreference = 'SilentlyContinue'

#Import Modules &amp; Snap-ins
Import-Module ActiveDirectory

#----------------------------------------------------------[Declarations]----------------------------------------------------------

#Set Inactive Date:
$InactiveDate = (Get-Date).Adddays(-($DaysInactive))

#-----------------------------------------------------------[Functions]------------------------------------------------------------

Function Find-Objects {
  Param ()

  Begin {
    Write-Host "Finding inactive computer objects based on search scope specified [$SearchScope]..."
  }

  Process {
    Try {
      Switch ($SearchScope) {
        'All' {
          $global:Results = Get-ADComputer -Filter { (LastLogonDate -lt $InactiveDate -or LastLogonDate -notlike "*") -and (Enabled -eq $true) } -Properties LastLogonDate | Select-Object Name, LastLogonDate, DistinguishedName
        }

        'OnlyInactiveComputers' {
          $global:Results = Get-ADComputer -Filter { LastLogonDate -lt $InactiveDate -and Enabled -eq $true } -Properties LastLogonDate | Select-Object Name, LastLogonDate, DistinguishedName
        }

        'OnlyNeverLoggedOn' {
          $global:Results = Get-ADComputer -Filter { LastLogonDate -notlike "*" -and Enabled -eq $true } -Properties LastLogonDate | Select-Object Name, LastLogonDate, DistinguishedName
        }

        Default {
          Write-Host -BackgroundColor Red "Error: An unknown error occcurred. Can't determine search scope. Exiting."
          Break
        }
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }

    End {
      If ($?) {
        Write-Host 'Completed Successfully.'
        Write-Host ' '
      }
    }
  }
}

Function Create-Report {
  Param ()

  Begin {
    Write-Host "Creating report of inactive computers in specified path [$ReportFilePath]..."
  }

  Process {
    Try {
      #Check file path to ensure correct
      If ($ReportFilePath -notlike '*.csv') {
        $ReportFilePath = Join-Path -Path $ReportFilePath -ChildPath '\InactiveComputers.csv'
      }

      # Create CSV report
      $global:Results | Export-Csv $ReportFilePath -NoTypeInformation
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

Function Disable-Objects {
  Param ()

  Begin {
    Write-Host 'Disabling inactive computers...'
  }

  Process {
    Try {
      ForEach ($Item in $global:Results){
        Set-ADComputer -Identity $Item.DistinguishedName -Enabled $false
        Write-Host "$($Item.Name) - Disabled"
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

Function Delete-Objects {
  Param ()

  Begin {
    Write-Host 'Deleting inactive computers...'
  }

  Process {
    Try {
      ForEach ($Item in $global:Results){
        Remove-ADComputer -Identity $Item.DistinguishedName -Confirm:$false
        Write-Host "$($Item.Name) - Deleted"
      }
    }

    Catch {
      Write-Host -BackgroundColor Red "Error: $($_.Exception)"
      Break
    }
  }

  End {
    If ($?) {
      Write-Host 'Completed Successfully.'
      Write-Host ' '
    }
  }
}

#-----------------------------------------------------------[Execution]------------------------------------------------------------

Find-Objects
Create-Report

If ($DisableObjects) {
  Disable-Objects
}

If ($DeleteObjects) {
  Delete-Objects
}</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>aspnetdb</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StoredProcedures</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>aspnetdb</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StoredProcedures</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>/*
reference: http://msdn.microsoft.com/en-us/library/aa478949.aspx

-- Stored Procedure	Description
==================================================================

-- aspnet_Membership_ChangePassword-QuestionAndAnswer	
	Changes the specified user's password question and answer.
	
-- aspnet_Membership_CreateUser	
	Adds a new membership user to the membership database. 
	Records the user in the aspnet_Users and aspnet_Membership tables and, 
	if necessary, adds a new application to the aspnet_Applications table.

-- aspnet_Membership_FindUsersByEmail	
	Retrieves records from aspnet_Membership table 
	with e-mail addresses matching the specified pattern and with the specified application ID.

-- aspnet_Membership_FindUsersByName	
	Retrieves records from aspnet_Membership table 
	with user names matching the specified pattern and with the specified application ID.

-- aspnet_Membership_GetAllUsers	
	Retrieves all users from the aspnet_Membership 
	table with the specified application ID.

-- aspnet_Membership_GetNumberOfUsersOnline	
	Gets the number of users currently online 
	(those whose last activity dates.

-- aspnet_Membership_GetPassword	
	Gets the specified user's password data from the database. 
	Used for retrieving passwords with a user-supplied password answer.

-- aspnet_Membership_GetPasswordWithFormat	
	Gets the specified user's password from the database. 
	Used by the provider to retrieve passwords for performing password comparisons 
	(for example, when ValidateUser needs to validate a password).

-- aspnet_Membership_GetUserByEmail	
	Given an e-mail address and application ID, 
	retrieves the corresponding record from the aspnet_Membership table.

-- aspnet_Membership_GetUserByName	
	Given a user name and application ID, 
	retrieves the corresponding record from the aspnet_Membership table.

-- aspnet_Membership_GetUserByUserId	
	Given a user ID and application ID, 
	retrieves the corresponding record from the aspnet_Membership table.

-- aspnet_Membership_ResetPassword	
	Resets the specified user's password based on a password answer.

-- aspnet_Membership_SetPassword	
	Sets the specified user's password to the password input 
	to the stored procedure.

-- aspnet_Membership_UnlockUser	
	Restores login privileges for the specified user by setting the user's 
	IsLockedOut bit to 0.

-- aspnet_Membership_UpdateUser	
	Updates the user's last activity date in the aspnet_Users table and e-mail address, 
	comment, is-approved status, and last login date in the aspnet_Membership table.

-- aspnet_Membership_UpdateUserInfo	
	Updates account locking data for the specified user in the aspnet_Users and 
	aspnet_Membership tables. Used in conjunction with provider methods that track bad password and bad password-answer attempts.

-- aspnet_Users_CreateUser	
	Adds a user to the aspnet_Users table. Called by aspnet_Membership_CreateUser.

-- aspnet_Users_DeleteUser	
	Deletes a user from the aspnet_Membership table and optionally from other SQL provider tables, including aspnet_Users.
	
	
reference: http://msdn.microsoft.com/en-us/library/aa478950.aspx	
	
aspnet_Roles_CreateRole	
	Adds a role to the aspnet_Roles table and, if necessary, adds a new application to the aspnet_Applications table.
	
aspnet_Roles_DeleteRole	
	Removes a role from the aspnet_Roles table. Optionally deletes records referencing the deleted role from the aspnet_UsersInRoles table.

aspnet_Roles_GetAllRoles	
	Retrieves all roles with the specified application ID from the aspnet_Roles table.

aspnet_Roles_RoleExists	
	Checks the aspnet_Roles table to determine whether the specified role exists.

aspnet_UsersInRoles_AddUsersToRoles	
	Adds the specified users to the specified roles by adding them to the aspnet_UsersInRoles table.
aspnet_UsersInRoles_FindUsersInRole	
	Queries the aspnet_UsersInRoles table for all users belonging to the specified role whose user names match the specified pattern.

aspnet_UsersInRoles_GetRolesForUser	
	Queries the aspnet_UsersInRoles table for all roles assigned to a specified user.

aspnet_UsersInRoles_GetUsersInRoles	
	Queries the aspnet_UsersInRoles table for all users belonging to the specified role.

aspnet_UsersInRoles_IsUserInRole	
	Checks the aspnet_UsersInRoles table to determine whether the specified user belongs to the specified role.

aspnet_UsersInRoles_RemoveUsersFromRoles	
	Removes the specified users from the specified roles by deleting the corresponding records from the aspnet_UsersInRoles table.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Calculations_Numeric</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Rounding</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Calculations_Numeric</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Rounding</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>
ROUND(number, decimal_places, operation)
--number			Required. The number to round
--decimal_places	Required. The number of decimal places to round to
--operation		Optional. Can be either 0 or any other numeric value. 
--					When 0,  ROUND() will round the result to the number of decimal_places. 
--					When another value than 0, ROUND() will truncate the result 
--						to the number of decimal_places. Default value is 0


--Rounds to 2 decimals, but shows 3 decimals
SELECT ROUND(235.415, 2) AS RoundValue;
--Returns a number rounded to a certain number of decimal places:
SELECT ROUND(235.415, 2, 1) AS RoundValue;
///////////////////////////////////////////////////////////////////////
--EXAMPLE: cast to Decimal, then round to n digits to the left, and 2 digits to the right
CAST((CAST(ftt.RANK as DECIMAL)/@topRank) AS DECIMAL(n,2)) as matchpercent,
/*
...where n is a number large enough not to truncate left of the decimal point. 
	That is to say, if you use "123.456", 
	you need to use DECIMAL(7,2) because the total length is 7 digits.
*/

--Divide the sum by the count to get the average, multiply by 10, and round to 2 places
Select Supervisor_Name, --SUM(ONE) as ONE_sum, COUNT(ONE) AS ONE_count,
	(
		CAST(  
				(
					(  cast(
							SUM(ONE) as float
							)
					)
					/ 
					(  cast
							(COUNT(ONE)as float
							)
					)
					*
					100.0
				)
				AS DECIMAL(4,2)
			)

	)  as ONE_avg


From CTE_Records_GradesFilledIn_One
Group by Supervisor_Name
Order by Supervisor_Name</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CCWNC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>CharIndex_get_text_between_special_Characters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CCWNC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>CharIndex_get_text_between_special_Characters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- PARSE: [*
  	  
  	  
  	  ,	(SELECT     'TheCalculation' = 
        		CASE 
            			WHEN (charINDEX('[*',[NOTES]) &gt;= 0) and (charINDEX('*]',[NOTES]) &gt; 0 ) THEN SUBSTRING([NOTES],(charINDEX('[*',[NOTES])+3), (  (charINDEX('*]',[NOTES])-1) - (charINDEX('[*',[NOTES])+2)  ))
        		 
				ELSE NULL

        			END) as GoodString
        			
        			
///////////////////// nicer formatted version//////////////////

	  	  ,	(SELECT     'TheCalculation' = 
CASE 
		WHEN (charINDEX('[*',[Program_Title]) &gt;= 0) and (charINDEX('*]',[Program_Title]) &gt; 0 ) 
		THEN SUBSTRING(
						[Program_Title],
						(charINDEX('[*',[Program_Title])+3),
						(  (charINDEX('*]',[Program_Title])-1) - (charINDEX('[*',[Program_Title])+2)  )
					  )
 
ELSE NULL

	END) as GoodString	
	
////////////////////  definitions and more verbose///////////////

	  	  ,	(SELECT     'TheCalculation' = 
        		CASE 
            			WHEN (charINDEX('[*',[Program_Title]) &gt;= 0) and (charINDEX('*]',[Program_Title]) &gt; 0 ) 
            			THEN SUBSTRING(
            							[Program_Title],						--SUBSTRING(value_expression , , )
            							(										--SUBSTRING(,start_expression , )	{Is an integer or bigint expression that specifies where the returned characters start}
            								charINDEX(							--charINDEX: Searches expression2 for expression1 and returns its starting position if found. The search starts at start_location.
            											'[*',					--charINDEX: expression1: Is a character expression that contains the sequence to be found. expression1 is limited to 8000 characters. 
            											[Program_Title]			--charINDEX: expression2: Is a character expression to be searched.
            																	--charINDEX: start_location (optional):  Is an integer or bigint expression at which the search starts. If start_location is not specified, is a negative number, or is 0, the search starts at the beginning of expression2
            										)
            								+
            								3
            							),
            							(										--SUBSTRING(, ,length_expression )  {Is a positive integer or bigint expression that specifies how many characters of the value_expression will be returned} 
            								(
            									charINDEX('*]',[Program_Title])
            									-
            									1
            								) 
            								- 
            								(
            									charINDEX('[*',[Program_Title])
            									+
            									2
            								)  
            							)
            						  )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>CTE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Optional_Parm_MultipleCTE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>CTE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Optional_Parm_MultipleCTE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>


--To accomplish CTE with optional parameter, you can use is as this way:

;WITH cte1 AS
( SELECT Col1
FROM Table
WHERE (@Param IS NULL OR Col1 = @Param)
),
cte2 AS (
SELECT Col2
FROM Table
WHERE (@Param IS NULL OR Col2 = @Param)
)
SELECT cte1.Col1,cte2.Col2
FROM cte1
CROSS JOIN cte2
GO

Here, if @param has value, then it will filter result in CTE.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>DynamicSQL</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_executesql</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>DynamicSQL</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_executesql</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--	[sp_executesql]
-- sp_executesql is a built-in stored procedure that takes two pre-defined parameters and any number of user-defined parameters.  

--The first parameter: @stmt is mandatory, 
--	and contains a batch of one or more SQL statements. 
--	The data type of @stmt is ntext in SQL 7 and SQL 2000, and nvarchar(MAX) in SQL 2005 and later. 
--	Beware that you must pass an nvarchar/ntext value (that is, a Unicode value). A varchar value won't do.    

--The second parameter @params is optional, 
--	but you will use it 90% of the time. 
--	@params declares the parameters that you refer to in @stmt. 
--	The syntax of @params is exactly the same as for the parameter list of a stored procedure. 
--	The parameters can have default values and they can have the OUTPUT marker. 
--	Not all parameters you declare must actually appear in the SQL string. 
--	(Whereas all variables that appear in the SQL string must be declared, either with a DECLARE inside @stmt, or in @params.) 
--	Just like @stmt, the data type of @params is ntext SQL 2000 and earlier and nvarchar(MAX) since SQL 2005. 

--The rest of the parameters are simply the parameters that you declared in @params, 
--	and you pass them as you pass parameters to a stored procedure, either positional or named. 
--	To get a value back from your output parameter, you must specify OUTPUT with the parameter, 
--	just like when you call a stored procedure. Note that the first two parameters, @stmt and @params, 
--	must be specified positionally. You can provide the parameter names for them, 
--	but these names are blissfully ignored.

-- Example:  You want to be able to find out how many rows in each table that were modified at least once during a period.

DECLARE @tbl    sysname,
        @sql    nvarchar(max),
        @params nvarchar(max),
        @count  int

DECLARE tblcur CURSOR STATIC LOCAL FOR
   SELECT object_name(id) FROM syscolumns WHERE name = 'LastUpdated'
   ORDER  BY 1
OPEN tblcur

WHILE 1 = 1
BEGIN
   FETCH tblcur INTO @tbl
   IF @@fetch_status &lt;&gt; 0
      BREAK
--  I've prefixed the string literals with N to denote that they are Unicode strings

   SELECT @sql =														--&lt;== START Dynamic
   N' SELECT @cnt = COUNT(*) FROM dbo.' + quotename(@tbl) +				--&lt;== quotename(), and prefix the table name with "dbo."
   N' WHERE LastUpdated BETWEEN @fromdate AND ' +
   N'                           coalesce(@todate, ''99991231'')'		--&lt;== '' around the date literal is doubled
   SELECT @params = N'@fromdate datetime, ' +
                    N'@todate   datetime = NULL, ' +
                    N'@cnt      int      OUTPUT'						--&lt;== OUTPUT variable
                    
--In this example, the dynamic SQL has three parameters: 
--	one mandatory input parameter, one optional input parameter, and one output parameter:
--I've assumed that this time the DBA wanted to see all changes made after 2006-01-01
-- Since I left out one variable, I must specify the last, @cnt by name
                    
   EXEC sp_executesql @sql, @params, '20060101', @cnt = @count OUTPUT	--&lt;== END Dynamic
   
--Note also that the variable is called @cnt in the dynamic SQL, 
--	but @count in the surrounding script. Normally, you might want to use the same name, 
--	but I wanted to stress that the @cnt in the dynamic SQL is only visible within the dynamic SQL, 
--	whereas @count is not visible there.

   PRINT @tbl + ': ' + convert(varchar(10), @count) + ' modified rows.'
END

DEALLOCATE tblcur 

--When I assign the @sql variable, I am careful to format the statement so that it is easy to read, 
--	and I leave in spaces to avoid that two concatenated parts are glued together without space in between, 
--	which could cause a syntax error. 
--I put the table name in quotename() in case a table name has any special characters in it. 
--I also prefix the table name with "dbo.", which is a good habit, as we will see when we look at dynamic SQL and query plans. 
--Overall, I will cover this sort of good practices more in detail later in the text. 
--Note also the appearance of '' around the date literal – the rule in T-SQL is that to include the string delimiter in a string, 
--	you must double it.

-------------------------------------------------------------------------------------

-- I've prefixed the string literals with N to denote that they are Unicode strings. 
--		As @sql and @params are declared as nvarchar, technically this is not necessary 
--	    (as long as you stick to your 8-bit character set). However, 
--		when you provide any of the strings directly in the call to sp_executesql, 
--		you must specify the N, as in this fairly silly example:

EXEC sp_executesql N'SELECT @x', N'@x int', @x = 2

--If you remove any of the Ns, you will get an error message. 
--	Since sp_executesql is a built-in stored procedure, there is no implicit conversion from varchar.

-------------------------------------------------------------------------------------

--You may wonder why I do not pass @tbl as a parameter as well. 
--	The answer is that you can't. Dynamic SQL is just like any other SQL. 
--	You can't specify a table name through a variable in T-SQL, that's the whole story. 
--Thus, when you need to specify things like table names, column names etc dynamically, 
--	you must interpolate them into the string.

-------------------------------------------------------------------------------------
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Functions_WINDOW_FUNCTIONS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_Functions_WINDOW_FUNCTIONS</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Functions_WINDOW_FUNCTIONS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_Functions_WINDOW_FUNCTIONS</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_Functions_WINDOW_FUNCTIONS

SUM: Returns the sum of all the values, or only the DISTINCT values, in the expression. 
	SUM can be used with numeric columns only. 
	Null values are ignored.


/*
Window Functions

	They have nothing to do with Windows API
	They Operate over a set of rows
	Always have an OVER clause
	
	You can not create UDF (User Defined Functions) with  aggregate functions
	BUT you can use CLR (.NET) to do so.

May appear in:

	SELECT list
	ORDER BY clause

May not appear in:

	FROM clause
	WHERE clause
	GROUP BY clause
	HAVING clause

In 2005:
	Apply row numbers, rank, or divide rows	
	Aggregate with no GROUP BY
In 2012:
	Moving aggregates
	Analytic functions
	Pull values from other rows
	


OVER Clause
==============
Order By 

	- Independent of any ORDER BY clause in the Query
	
Partition By

	- Always supported, but optional
	- Unlike GROUP BY b/c in GROUP BY there is only one record per group
		in PARTITION BY you retain all the rows

Framing
	
	- defined in 2012
	- more granular than the partition
	
OFFSET or Analytic Functions
=============================
LAG
	- Requires ORDER BY
	- By default it is the previous row
	- do not need a FRAME
	- If PARTITION is used, then it will only pull from within the window
	- OFFSET must be a positive integer, by default it is 1
	- Can provide a default if the OFFSET reaches beyond the window

LEAD
	- Requires ORDER BY
	- By default it is the next row
	- do not need a FRAME
	- If PARTITION is used, then it will only pull from within the window
	- OFFSET must be a positive integer, by default it is 1
	- Can provide a default if the OFFSET reaches beyond the window
		
FIRST_VALUE

LAST_VALUE</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Functions_WINDOW_FUNCTIONS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>ROW_NUMBER_with_PARTITION</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Functions_WINDOW_FUNCTIONS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>ROW_NUMBER_with_PARTITION</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--PARTITION BY is optional
--ROW_NUMBER start over for each Partion, and are unique within a Partition


--To get duplicate rows:
,ROW_NUMBER() OVER(PARTITION BY fcb.[ClientAppID] ORDER BY fcb.[ClientAppID]) as theRowNumber

--**PARTITION BY
SELECT CustomerID, SalesOrderID, OrderDate, 
	ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY SalesOrderID) AS RowNumber
FROM Sales.SalesOrderHeader;


--OUTPUT
==================
CustomerID	SalesOrderID	OrderDate	RowNumber
11000	43793	2011-06-21 00:00:00.000	1
11000	51522	2013-06-20 00:00:00.000	2
11000	57418	2013-10-03 00:00:00.000	3
11001	43767	2011-06-17 00:00:00.000	1	--&lt;== Starts Over
11001	51493	2013-06-18 00:00:00.000	2
11001	72773	2014-05-12 00:00:00.000	3


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ --GOOD WAY TO FIND DUPLICATES

--Multiple columns in the PARTITION
--The row number starts over for each unique combination of  OrderDate and CustomerID
SELECT CustomerID, SalesOrderID, OrderDate, 
	ROW_NUMBER() OVER(PARTITION BY OrderDate, CustomerID ORDER BY SalesOrderID) AS RowNumber
FROM Sales.SalesOrderHeader;

--OUTPUT
=============
CustomerID	SalesOrderID	OrderDate	RowNumber
11003	43701	2011-05-31 00:00:00.000	1
14501	43700	2011-05-31 00:00:00.000	1
21768	43697	2011-05-31 00:00:00.000	1
25863	43699	2011-05-31 00:00:00.000	1
28389	43698	2011-05-31 00:00:00.000	1	--&lt;== if there were a duplicate you would get a 2 (or more) 

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--An expression: One set of Row Numbers for EVEN CustomerIDs, one for ODD CustomerIDs
SELECT CustomerID, SalesOrderID, OrderDate, 
	ROW_NUMBER() OVER(PARTITION BY CustomerID % 2 ORDER BY SalesOrderID) AS RowNumber
FROM Sales.SalesOrderHeader;


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--A subquery (however in this case they are all in the same Partition, b/c it resolves to the same partition)
SELECT CustomerID, SalesOrderID, OrderDate, 
	ROW_NUMBER() OVER(PARTITION BY (SELECT 1) ORDER BY SalesOrderID) AS RowNumber
FROM Sales.SalesOrderHeader;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>INSERT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>INSERT_INTO</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>INSERT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>INSERT_INTO</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>INSERT INTO PV_VoucherComments_sst
	(Public_Vouchers_FK, PV_Bills_FK, HOLD_UserName, HOLD_Started_DateTime)
VALUES
	(@Public_Vouchers_PK, @PV_Bills_PK, @UserName, GETDATE() )
	
	
///////////////////////////////////////////////////

--prj_1027_409_Insert_TestData_into_T22.sql
-- This is optional for debugging purposes


use DB2_CRM
go



INSERT INTO [DB2_CRM].[dbo].[T22_CCWNC_Employee_AccountingPortal]
           ([T9_FK]
           ,[ADP_Number]
           ,[Full_Time_Employment_Percent]
           ,[Employment_Start_Date]
           ,[Employment_End_Date]
           ,[Accounting_First_Name]
           ,[Accounting_Middle_Name]
           ,[Accounting_Last_Name]
           ,[Accounting_Effective_Date_Start]
           ,[Accounting_Effective_Date_End]
           ,[Accounting_Effective_Change_e28]
           ,[b_Accounting_Unfilled_Position]
           ,[b_Accounting_Unfilled_Position_onHOLD]
           ,[Accounting_Unfilled_PositionDescription]
           ,[Accounting_ParentGroup_e29]
           ,[Accounting_ChildGroup_e30]
           ,[Accounting_Notes])
     VALUES
           (0,0000,1.00,NULL,NULL,NULL,NULL,NULL,'2013-05-29','2014-05-29',1,1,0,'DATA ANALYST',1,1,'Test Unfilled Position')
GO          
                                          
//////Multiple rows/////////////////////////////////////////////	
	
--INSERT INTO Table ( Column1, Column2 ) VALUES
--( Value1, Value2 ), ( Value1, Value2 )	


...............


/*	prj_0038_701_TestDataFor_T30.sql
	************************************************************************************
	NOTE: 
	Uses: 
	Created: 5/27/2014
	By: glenn garson
	************************************************************************************
*/

USE [DB2_CRM]
GO

INSERT INTO [DB2_CRM].[dbo].[T30_NewHire]
	(  --[T30_PK]
       [IncludeInNewHireListForHR_e00]
      ,[FirstName]
      ,[MiddleName]
      ,[LastName]
      ,[SupervisorName]
      ,[SupervisorEmailAddress]
      ,[Supervisor_T9_FK]
      ,[StartDate]
      ,[90DayReviewDate]
      ,[NCDriversLicenseNumber]
      ,[SSNLast4]
      )
  VALUES
		(
			2,
			'F1test',
			'M1Test',
			'L1Test',
			'Glenn Garson',
			'ggarson@ccwnc.org',
			33,
			'05/28/2014',
			'08/28/2014',
			'12345678',
			'2468'
		),
		(
			2,
			'F2test',
			'M2Test',
			'L2Test',
			'Glenn Garson',
			'ggarson@ccwnc.org',
			33,
			'05/29/2014',
			'08/29/2014',
			'23456789',
			'4680'
		),
		(
			2,
			'F3test',
			'M3Test',
			'L3Test',
			'Glenn Garson',
			'ggarson@ccwnc.org',
			33,
			'05/30/2014',
			'08/30/2014',
			'34567891',
			'6802'
		)				</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MERGE</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>about_MERGE</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MERGE</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>about_MERGE</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>about_MERGE

--Locking problem at Barriere: Look into HOLDLOCK
--HOLDLOCK means SERALIZABLE and therefore allows SELECTS, but blocks UPDATE and DELETES of the rows selected by T1, 
--	as well as any INSERT in the range selected by T1 (which is the entire table, therefore any insert).
--HOLDLOCKS are used at table level it prevents the table from being updated by any other DML transactions like an insert or an update. 
--	HOLDLOCKS are preferable to use in situations where we need only COMMITTED READS.

--NOLOCKS are opposite of HOLDLOCKS and when they are issued at a table level, 
--	it allows the user to access/read the data from a table whilst some update/ insert operations are running at the back. 
--	NOLOCKS may produce UNCOMMITTED READS and are preferred to use at the Production Environments so that the real time update is not hindered.

/*
MERGE inserts and updates data at the same time
we need to provide a source table and a destination table. 
We then give it a method of matching rows between them, 
 usually the primary key or business/natural key (this can use multiple fields).
We can then specify a number of actions depending on whether a match is found or not.
If a match is found we may want to update the existing record.
If a match isn’t found then it’s likely that we’ll want to insert a new record.
	
This feature is very useful in a scenario where we want to synchronize the data in the target table with source table data. 
	In earlier versions of sql server to achieve this synchronization we would have scanned the source and target tables multiple times
	(i.e. ones for inserting the new records , 
	second time for updating the matching records and third time for deleting the records in the destination table 
	which are not present in the source table), 
	but with Merge statement we can achieve all this with single statement 
	and with only one time looking-up of the source and target tables.	
	
http://www.purplefrogsystems.com/blog/2011/12/introduction-to-t-sql-merge-basics/	

First we set the tables and the joining key(s)		*/

MERGE [Destination Table] AS Target
   USING [Source Table] AS Source
     ON Target.KeyField = Source.KeyField

--Then we define what we want to happen if we find a match (optional)

  WHEN MATCHED

--If you want you can specify other conditions, such as checking whether anything has changed

     AND  (
         Target.Field1 &lt;&gt; Source.Field1
         OR Target.Field2 &lt;&gt; Source.Field2
         )
         
--We can then perform an action. i.e. an update, delete, etc.

  THEN UPDATE SET
        Field1 = Source.Field1
      , Field2 = Source.Field2

--Then we define what we want to happen if we don’t find a matching record (optional)

   WHEN NOT MATCHED

--In this case, we want to insert the new record

      THEN INSERT (
             KeyField
           , Field1
           , Field2
        ) VALUES (
             Source.KeyField
           , Source.Field1
           , Source.Field2
      );</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>MISC</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>RowCount_SpaceUsed_OneTable</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>MISC</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>RowCount_SpaceUsed_OneTable</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Counting Rows


select count(*) from table1

SELECT COUNT(TABLEID) FROM TABLE

select rows from sysindexes where name = table

DBCC UPDATEUSAGE


sp_spaceused



------
--  Updating page or row counts or both for all objects in the current database
--   BUT no results
DBCC UPDATEUSAGE (0);
GO
---------------
-- The following example reports disk space information for the Vendor table and its indexes.
USE [CCNCclaims]
GO
EXEC sp_spaceused N'dbo.MedClaims';
GO

------------------------------
--space used in the current database and uses the
--	 optional parameter @updateusage to ensure current values are returned. 

USE AdventureWorks2008R2;
GO
EXEC sp_spaceused @updateusage = N'TRUE';
GO
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>OLE_Automation</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>sp_OAMethod__OpenTextFile</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>OLE_Automation</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>sp_OAMethod__OpenTextFile</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--sp_OAMethod__OpenTextFile
/*
The sp_OAMethod stored procedure is used to call an object method, and it takes four parameters:

The object token
The method name
The method's return value
Any parameters that the method requires
- See more at: http://www.devx.com/getHelpOn/10MinuteSolution/20563#sthash.zvXt8MQA.dpuf

--sp_OAMethod OpenTextFile - has 4 parameters in this order:
================================================================
/* reference: http://www.w3schools.com/asp/met_opentextfile.asp
FilePath -Required. The name of the file to open
Mode - Optional. How to open the file
	1 = Reading - Open a file for reading. You cannot write to this file.
	2 = Writing - Open a file for writing.
	8 = Appending - Open a file and write to the end of the file.
Create - Optional. Sets whether a new file can be created if the filename does not exist. 
	True indicates that a new file can be created, 
	and False indicates that a new file will not be created. False is default.
Format - Optional. The format of the file
	0 = TristateFalse - Open the file as ASCII. This is default.
	1 = TristateTrue - Open the file as Unicode.
	2 = TristateUseDefault - Open the file using the system default.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>PIVOT</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>PIVOT_general_structure</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>PIVOT</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>PIVOT_general_structure</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>



SELECT &lt;non-pivoted column&gt;,

    [first pivoted column] AS &lt;column name&gt;,

    [second pivoted column] AS &lt;column name&gt;,

    ...

    [last pivoted column] AS &lt;column name&gt;

FROM

    (&lt;SELECT query that produces the data&gt;)

    AS &lt;alias for the source query&gt;

PIVOT

(

    &lt;aggregation function&gt;(&lt;column being aggregated&gt;)

FOR

[&lt;column that contains the values that will become column headers&gt;]

    IN ( [first pivoted column], [second pivoted column],

    ... [last pivoted column])

) AS &lt;alias for the pivot table&gt;

&lt;optional ORDER BY clause&gt;;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>R</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Input_from_SQL_and_Output_to_SQL</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>R</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Input_from_SQL_and_Output_to_SQL</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>Input_from_SQL_and_Output_to_SQL 

https://docs.microsoft.com/en-us/sql/advanced-analytics/tutorials/rtsql-working-with-inputs-and-outputs?view=sql-server-2017
//////////////////////////////////////////////////////////////////////
--Remember these requirements!
--================================

--1] Variable names must follow the rules for valid SQL identifiers.
--2] The order of the parameters is important. 
--	You must specify the required parameters @input_data_1 and @output_data_1 first, 
--	in order to use the optional parameters @input_data_1_name and @output_data_1_name.
--3] Only one input dataset can be passed as a parameter, 
--		and you can return only one dataset. 
--	However, you can call other datasets from inside your R code 
--		and you can return outputs of other types in addition to the dataset. 
--	You can also add the OUTPUT keyword to any parameter to have it returned with the results. 

--4] The WITH RESULT SETS statement defines the schema for the data, 
--		for the benefit of SQL Server.	
--	You need to provide SQL compatible data types for each column you return from R. 
--	You can use the schema definition to provide new column names too; 
--	you need not use the column names from the R data.frame. 
--	In some cases, this clause is optional; try omitting it and see what happen  
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--When you want to run R code in SQL Server, you must wrap R script in a stored procedure. 
--You can write one, or pass R script to sp_execute_external_script. 
--This system stored procedure is used to start the R runtime in the context of SQL Server, 
--	which passes data to R, manages R user sessions securely, and returns any results to the clien
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
--Create some simple test data
-------------------------------
CREATE TABLE RTestData ([col1] int not null) ON [PRIMARY]
INSERT INTO RTestData   VALUES (1);
INSERT INTO RTestData   VALUES (10);
INSERT INTO RTestData   VALUES (100) ;
GO


--Query the data
--------------
SELECT * FROM RTestData

--Get the same data using R script
------------------------------------

EXECUTE sp_execute_external_script
      @language = N'R'
    , @script = N' OutputDataSet &lt;- InputDataSet;'
    , @input_data_1 = N' SELECT *  FROM RTestData;'
    WITH RESULT SETS (([NewColName] int NOT NULL));
    
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

--The preceding example used the default input and output variable names, 
--	InputDataSet and OutputDataSet. 
--To define the input data associated with InputDatSet, 
--	you use the @input_data_1 variable.    

--In this example, 
--	the names of the output and input variables for the stored procedure have been changed to 
--	SQL_Out and SQL_I
//////////////////////////////////////////////////////////////////////
R is case-sensitive! -- Will get errors if case is not the same
-- EXECUTE statement failed because its WITH RESULT SETS clause specified 1 result set(s), 
--			but the statement only sent 0 result set(s) at run time


 -- We're showing you this error because you can expect to see it often when testing new R code. 
 -- It means that the R script ran successfully, 
	--but SQL Server received no data, or received wrong or unexpected da
//////////////////////////////////////////////////////////////////////

EXECUTE sp_execute_external_script
  @language = N'R'
  , @script = N' SQL_Out &lt;- SQL_In;'
  , @input_data_1 = N' SELECT 12 as Col;'
  , @input_data_1_name  = N'SQL_In'
  , @output_data_1_name =  N'SQL_Out'
  WITH RESULT SETS (([NewColName] int NOT NULL));
  

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||Another example

USE AdventureWorksDW2016_EXT
GO

--Develop the select statement in SQL -----------------------------------------------
SELECT ReportingDate
		, CAST(ModelRegion as varchar(50)) as ProductSeries
		, Amount
FROM [AdventureWorksDW2016_EXT].[dbo].[vTimeSeries]
WHERE [ModelRegion] = 'M200 Europe'
ORDER BY ReportingDate ASC

--Then use the select statement as input to the R-----------------------------------
EXECUTE sp_execute_external_script
       @language = N'R'
      , @script = N' str(InputDataSet);
      OutputDataSet &lt;- InputDataSet;'
      , @input_data_1 = N'
							   SELECT ReportingDate
									 , CAST(ModelRegion as varchar(50)) as ProductSeries
									 , Amount
							   FROM [AdventureWorksDW2016_EXT].[dbo].[vTimeSeries]
							   WHERE [ModelRegion] = ''M200 Europe''					--&lt;== string with double single apostrophes
							   ORDER BY ReportingDate ASC ;'
--WITH RESULT SETS undefined;															--&lt;=== without specifying the output columns
 WITH RESULT SETS (([dateCol] date, [strCol] varchar(50), [numCol] numeric(18,2)  ));	--&lt;===  specifying the output columns	
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SCHEMA_Security</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>SCHEMA_ROLE_PERMISSIONS_Login_User</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SCHEMA_Security</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>SCHEMA_ROLE_PERMISSIONS_Login_User</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--This object protection does not apply to users who are members of the sysadmin server role. 
--A member of the sysadmin server role has permission to undertake any activity within a SQL Server instanc


-- For example:
--The DESIGN TEAM wants to maintain the integrity of the database tables but allow the DEVELOPERS to create other database objects such 
--as stored procedures and views to suit the application.

--The database application tables (securables) are created in a schema. 
--This will allow access to the tables to be controlled by permissions. The schema could be the dbo schema or any other.

--A second schema is created—called, say, [Developer_Schema]. The Developer_Schema will be the schema in which the developers 
--will create all additional application related objects such as stored procedures, views, and functions.

--Lastly, a database role called something like [Developer_Role] is created. Security principals (developers) are added to Developer_Role. 
--Developer_Role is granted SELECT, REFERENCES, INSERT, UPDATE, DELETE, and (optionally) VIEW DEFINTION permissions on the dbo schema. 
--Developer_Role is not granted ALTER or CONTROL permissions on the dbo schema. Developer_Role is granted ALTER and CONTROL permissions on Developer_Schema. 
--This explicit set of permissions will allow the developer to perform any action on the database tables with the exception of altering or dropping the table in any way. 
--The developers (principals) are configured with a default schema of Developer_Schema, allowing them to create objects in the Developer_Schema by default.

--Lastly, the required permissions are assigned to Database_Role at a database level, 
--for example, CREATE TABLE or DROP TABLE permissions. This is done using the GRANT statement.



--create a test database
CREATE DATABASE [SecurityTest]
GO
USE SecurityTest
GO
CREATE TABLE [dbo].[table1](
       [pkcol] [int] IDENTITY(1,1) NOT NULL,
       [col1] [int] NULL,
PRIMARY KEY CLUSTERED ([pkcol])
)
GO
--create test user login
CREATE LOGIN [User1] WITH PASSWORD=N'p@55w0rd'
GO
--create user in test database
CREATE USER [User1] FOR LOGIN [User1] WITH DEFAULT_SCHEMA=[Developer_Schema]
GO
--create role
CREATE ROLE [Developer_Role] AUTHORIZATION [dbo]
GO
--create schema
CREATE SCHEMA [Developer_Schema] AUTHORIZATION [User1]
GO
--apply permissions to schemas
GRANT ALTER ON SCHEMA::[Developer_Schema] TO [Developer_Role]
GO
GRANT CONTROL ON SCHEMA::[Developer_Schema] TO [Developer_Role]
GO
GRANT SELECT ON SCHEMA::[Developer_Schema] TO [Developer_Role]
GO
GRANT DELETE ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT INSERT ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT SELECT ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT UPDATE ON SCHEMA::[dbo] TO [Developer_Role]
GO
GRANT REFERENCES ON SCHEMA::[dbo] TO [Developer_Role]
GO
--ensure role membership is correct
EXEC sp_addrolemember N'Developer_Role ', N'User1'
GO
--allow users to create tables in Developer_Schema
GRANT CREATE TABLE TO [Developer_Role]
GO
--Allow user to connect to database
GRANT CONNECT TO [User1]</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SELECT_COMPLEX</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Calculate_GetString_Between_Pattern_OfCharacters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SELECT_COMPLEX</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Calculate_GetString_Between_Pattern_OfCharacters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>-- PARSE: [*
 
 ;WITH CTE_Records_GradesFilledIn_One  (Supervisor_Name, 
										CM_Name
										,ONE
										,TWO
										)										
AS
(
	select Supervisor_Name, 
			[CM_Name]
			
			,(
				SELECT 'TheCalculation' = Case When ([ONE_0b_Demo_Page_e2]=0) then 0 ELSE 1 END 
			  ) AS ONE 
			,(
				SELECT 'TheCalculation' = Case When ([TWO_0b_Goals_e2]=0) then 0 ELSE 1 END 
			  ) AS TWO 			  
	FROM vwFORM_0010_T0

)
Select * from CTE_Records_GradesFilledIn_One 	  
  	  
 /////////////////////////////////////////////////////////////////////////////// 	  
  	  
  	  
  	  ,	(SELECT     'TheCalculation' = 
        		CASE 
            			WHEN (charINDEX('[*',[NOTES]) &gt;= 0) and (charINDEX('*]',[NOTES]) &gt; 0 ) 
            			THEN SUBSTRING([NOTES],(charINDEX('[*',[NOTES])+3), (  (charINDEX('*]',[NOTES])-1) - (charINDEX('[*',[NOTES])+2)  ))
        		 
				ELSE NULL

        			END) as GoodString
        			
        			
///////////////////// nicer formatted version//////////////////

,	(SELECT     'TheCalculation' = 
			CASE 
					WHEN (charINDEX('[*',[Program_Title]) &gt;= 0) and (charINDEX('*]',[Program_Title]) &gt; 0 ) 
					THEN SUBSTRING(
									[Program_Title],
									(charINDEX('[*',[Program_Title])+3),
									(  (charINDEX('*]',[Program_Title])-1) - (charINDEX('[*',[Program_Title])+2)  )
								  )
			 
			ELSE NULL
			
				END) as GoodString	
	
////////////////////  definitions and more verbose///////////////

	  	  ,	(SELECT     'TheCalculation' = 
        		CASE 
            			WHEN (charINDEX('[*',[Program_Title]) &gt;= 0) and (charINDEX('*]',[Program_Title]) &gt; 0 ) 
            			THEN SUBSTRING(
            							[Program_Title],						--SUBSTRING(value_expression , , )
            							(										--SUBSTRING(,start_expression , )	{Is an integer or bigint expression that specifies where the returned characters start}
            								charINDEX(							--charINDEX: Searches expression2 for expression1 and returns its starting position if found. The search starts at start_location.
            											'[*',					--charINDEX: expression1: Is a character expression that contains the sequence to be found. expression1 is limited to 8000 characters. 
            											[Program_Title]			--charINDEX: expression2: Is a character expression to be searched.
            																	--charINDEX: start_location (optional):  Is an integer or bigint expression at which the search starts. If start_location is not specified, is a negative number, or is 0, the search starts at the beginning of expression2
            										)
            								+
            								3
            							),
            							(										--SUBSTRING(, ,length_expression )  {Is a positive integer or bigint expression that specifies how many characters of the value_expression will be returned} 
            								(
            									charINDEX('*]',[Program_Title])
            									-
            									1
            								) 
            								- 
            								(
            									charINDEX('[*',[Program_Title])
            									+
            									2
            								)  
            							)
            						  )</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQLCMD</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Nomenclature_and_Syntax</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQLCMD</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Nomenclature_and_Syntax</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>https://www.simple-talk.com/sql/sql-tools/sql-server-sqlcmd-basics/

see BAT section of DOSBATCH language
/*
a colon (:) precedes the sqlcmd directives. 
The colon is required for most of these commands. 
For a few of them, however, such as quit and exit, you can omit the colon. 

each sqlcmd directive must run on its own line
*/
--WINDOWS COMMAND
\\\\\\\\\\\\\\\\\
--This one begins with double exclamation points (!!):
:!!if exist C:\DataFiles\PersonData.txt del C:\DataFiles\PersonData.txt
--The exclamation points let you run a Windows operating system command, such as those you’d run directly at a command prompt.

--CONNECT
\\\\\\\\\\\\
The second line in our example uses the connect command to specify a connection to a SQL Server instance:

:connect localhost\sqlsrv2012

/*
Although this example is specific to a local SQL Server instance, 
	you can connect to any available instance for which you’ve been granted access. 
If that instance is the default one, you need only provide the server name. 
In addition, when you specify the server and, optionally, the instance name, 
sqlcmd uses Windows authentication to connect to SQL Server with your current account. 
However, you can also specify a username and password when connecting to an instance. 
To specify a username, add the -U switch followed by the username. 
To include a password, add the -P switch followed by the password. 
If you enter the username option without the password option, you’ll be prompted for a password.	*/

--OUT
\\\\\\\\\\\\

:out C:\DataFiles\PersonData.txt

/*
The command specifies that all query results should be redirected to an output file, in this case, the PersonData.txt file. 
If the file already exists when you run this commend, the file will be truncated. 
For this reason, you might not need to run a Windows command to first delete the file	*/

--interactive
\\\\\\\\\\\\\

/*
To work in interactive mode, open a command prompt window and enter sqlcmd at the command prompt. 
The prompt’s drive letter will be replaced by a 1, which represents the first line where you start entering your commands. 
The lines are numbered sequentially until all the commands are submitted, and then the numbering starts again.
*/

--When you use sqlcmd to switch to interactive mode, the utility establishes a connection to the default instance of SQL Server. 
-- If your system includes only named instances or you want to connect to a specific instance, 
-- you must specify the instance by adding the -S switch and instance name, as shown in the following command:

sqlcmd -S .\sqlsrv2012

-- In this case, I’ve used a period to represent the local computer, and I’m connecting to an instance named SqlSrv2012. 
--But you can connect to any accessible instance.</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SQLCMD</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Parameters_for_SQLCMD</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SQLCMD</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Parameters_for_SQLCMD</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility?view=sql-server-2017
   -a packet_size  
   -A (dedicated administrator connection)  
   -b (terminate batch job if there is an error)  
   -c batch_terminator  
   -C (trust the server certificate)  
   -d db_name  
   -e (echo input)  
   -E (use trusted connection)  
   -f codepage | i:codepage[,o:codepage] | o:codepage[,i:codepage] 
   -g (enable column encryption) 
   -G (use Azure Active Directory for authentication)
   -h rows_per_header  
   -H workstation_name  
   -i input_file  
   -I (enable quoted identifiers)  --&lt;============== Need this for error: "INSERT failed because the following SET options have incorrect settings: 'QUOTED_IDENTIFIER'."
   -j (Print raw error messages)
   -k[1 | 2] (remove or replace control characters)  
   -K application_intent  
   -l login_timeout  								
   -L[c] (list servers, optional clean output)  
   -m error_level  
   -M multisubnet_failover  
   -N (encrypt connection)  
   -o output_file  
   -p[1] (print statistics, optional colon format)  
   -P password  
   -q "cmdline query"  
   -Q "cmdline query" (and exit)  
   -r[0 | 1] (msgs to stderr)  
   -R (use client regional settings)  
   -s col_separator  
   -S [protocol:]server[instance_name][,port]  
   -t query_timeout  
   -u (unicode output file)  
   -U login_id  
   -v var = "value"  
   -V error_severity_level  
   -w column_width  
   -W (remove trailing spaces)  
   -x (disable variable substitution)  
   -X[1] (disable commands, startup script, environment variables, optional exit)  
   -y variable_length_type_display_width  
   -Y fixed_length_type_display_width  
   -z new_password   
   -Z new_password (and exit)  
   -? (usage) </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>List_DataSources_ConnectionStrings_Credentials_SQL_vs_Windows___for_SQL_2012</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>List_DataSources_ConnectionStrings_Credentials_SQL_vs_Windows___for_SQL_2012</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--List_DataSources_ConnectionStrings_Credentials_SQL_vs_Windows___for_SQL_2012


use ReportServer
go



;WITH XMLNAMESPACES  -- XML namespace def must be the first in with clause.
(DEFAULT 'http://schemas.microsoft.com/sqlserver/reporting/2006/03/reportdatasource'
,'http://schemas.microsoft.com/SQLServer/reporting/reportdesigner'
 AS rd)
,SDS AS
(SELECT SDS .name AS SharedDsName
,isnull(RCounts .Dependents, 0) as Dependents ,SDS. [Path]
,CONVERT( xml, CONVERT(varbinary (max), content)) AS DEF 
,DS .extension as Extension
,case DS.credentialretrieval
       when 1 then 'User Supplied'
      when 2 then 'Stored'
      when 3 then 'Windows Integrated'
      when 4 then 'Not Required'
      end as CredentialType,
    CONVERT( smalldatetime,SDS .CreationDate, 100) as CreationDate,
   u .Username as CreatedBy, um . Username as ModifiedBy ,
    CONVERT(smalldatetime ,SDS. ModifiedDate,100 ) as ModifiedDate
     FROM dbo. [Catalog] AS SDS
 JOIN ReportServer. dbo.Users U ON SDS. CreatedByID = U .UserID
 JOIN ReportServer .dbo. Users UM ON SDS. ModifiedByID = UM .UserID
 JOIN Reportserver. dbo.Datasource DS on SDS. ItemID=DS .itemID
LEFT OUTER JOIN (SELECT DS .Link as DSLink, count(*) as Dependents
  FROM  Catalog AS C INNER JOIN Users AS CU ON C. CreatedByID = CU .UserID
  INNER JOIN Users AS MU ON C. ModifiedByID = MU .UserID
  LEFT OUTER JOIN SecData AS SD ON C.PolicyID = SD. PolicyID AND SD.AuthType = 1
  INNER JOIN DataSource AS DS ON C. ItemID = DS .ItemID
  group by DS.Link ) RCounts on Rcounts.DSLink =SDS. ItemID
WHERE SDS. Type = 5)    
  
SELECT  CON. [Path]
,CON. SharedDsName
,CON. Dependents
,CON. ConnString
,CON. extension
,CON. credentialtype
,CON. CreationDate
,CON. CreatedBy
,CON. ModifiedDate
,CON. ModifiedBy
FROM
(SELECT SDS .[Path]
,SDS. SharedDsName
,SDS. Dependents
,DSN. value('ConnectString[1]' , 'varchar(MAX)' ) AS ConnString
,SDS. extension
,SDS. credentialtype
,SDS. CreationDate
,SDS. CreatedBy
,SDS. ModifiedDate
,SDS. ModifiedBy
FROM SDS
CROSS APPLY  
SDS .DEF. nodes('/DataSourceDefinition' ) AS R(DSN )
 ) AS CON
-- Optional filter:
--WHERE upper (CON. Path) LIKE '%YOURPATH%'
</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>SSRS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>LIST_report_Parameters</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>SSRS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>LIST_report_Parameters</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--LIST_report_Parameters
--https://gallery.technet.microsoft.com/scriptcenter/List-all-SSRS-report-91324942


--P_0004_SSRS_databases_RES_06_report_Parameters_v0.sql

use ProductionReportServer
go

--This works for All the reports on the server, regardless of the XMLNAMESPACES

;WITH  DEF AS 
    (SELECT RPT.ReportPath 
           ,R.RptNode.value('Name[1]', 'nvarchar(425)') AS [Parameter_Name] 
           ,R.RptNode.value('Type[1]', 'nvarchar(425)') AS [Type] 
           ,R.RptNode.value('Nullable[1]', 'varchar(5)') AS [Null] 
           ,R.RptNode.value('AllowBlank[1]', 'varchar(5)') AS [Blank] 
           ,R.RptNode.value('MultiValue[1]', 'varchar(5)') AS [Multi] 
           ,R.RptNode.value('UsedInQuery[1]', 'varchar(5)') AS [UsedInQuery] 
           ,R.RptNode.value('State[1]', 'varchar(50)') AS [State] 
           ,R.RptNode.value('PromptUser[1]', 'varchar(5)') AS [PromptUsr] 
           ,R.RptNode.value('DynamicPrompt[1]', 'varchar(5)') AS [PromptDyn]   
           ,R.RptNode.value('Prompt[1]', 'varchar(50)') AS [Prompt]          
           ,R.RptNode.value('DynamicValidValues[1]', 'varchar(5)') AS [DynValid]     
           ,R.RptNode.value('DynamicDefaultValue[1]', 'varchar(5)') AS [DynDefault] 
           ,R.RptNode.exist('Dependencies[1]/Dependency') AS [Depends] 
           ,R.RptNode.exist('DefaultValues[1]/Value') AS [Defaults] 
           ,R.RptNode.exist('Values[1]/Value') AS [Values] 
     FROM (SELECT RPT.Path AS ReportPath 
                 ,RPT.name AS ReportName 
                 ,CONVERT(xml, RPT.Parameter) AS contentXML 
           FROM dbo.[Catalog] AS RPT 
           WHERE RPT.Type = 2  -- 2 = Reports 
         ) AS RPT 
     CROSS APPLY RPT.contentXML.nodes('/Parameters/Parameter') AS R(RptNode) 
    ) 
SELECT * 
FROM DEF 
-- Optional filter e.g. on ReportPath 
WHERE DEF.ReportPath LIKE '/Managerial Reports/%' 
ORDER BY DEF.ReportPath;</Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>STRINGS</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>StringFunctions</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>STRINGS</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>StringFunctions</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>http://msdn.microsoft.com/en-us/library/ms181984%28v=sql.105%29.aspx


ASCII
	

NCHAR
	

SOUNDEX

CHAR
	

PATINDEX : Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.
	=&gt; PATINDEX ( '%pattern%' , expression )
	========================================================================
	USE AdventureWorks2008R2;
	GO
	SELECT PATINDEX('%ensure%',DocumentSummary)
	FROM Production.Document
	WHERE DocumentNode = 0x7B40;
	GO
	=====wildcard==================================================================
	USE AdventureWorks2008R2;
	GO
	SELECT PATINDEX('%en_ure%', DocumentSummary)
	FROM Production.Document
	WHERE DocumentNode = 0x7B40;
	GO	
	======collate ==================================================================
	USE tempdb;
	GO
	SELECT PATINDEX ( '%ein%', 'Das ist ein Test'  COLLATE Latin1_General_BIN) ;
	GO
	==========variables to specify a pattern======================================
	USE AdventureWorks2008R2; 
	GO
	DECLARE @MyValue varchar(10) = 'safety'; 
	
	SELECT PATINDEX('%' + @MyValue + '%', DocumentSummary) 
	FROM Production.Document
	WHERE DocumentNode = 0x7B40;
	========================================================================

SPACE

CHARINDEX : Searches expression2 for expression1 and returns its starting position if found. The search starts at start_location. Zero (0) if not found
	=&gt; CHARINDEX ( expression1 ,expression2 [ , start_location ] ) 
	============================================================
	DECLARE @document varchar(64)

	SELECT @document = 'Reflectors are vital safety' +
	                   ' components of your bicycle.'
	SELECT CHARINDEX('bicycle', @document)
	GO
	=============================================================
	The following example uses the optional start_location parameter to start looking for vital in the fifth character of the DocumentSummary column.
	DECLARE @document varchar(64)
	
	SELECT @document = 'Reflectors are vital safety' +
	                   ' components of your bicycle.'
	SELECT CHARINDEX('vital', @document, 5)
	GO
	=============================================================
	--The following example performs a case insensitive search for the string 'TEST' in 'Das jst ein Test'.
	USE tempdb;
	GO
	SELECT CHARINDEX ( 'Test',
	       'Das ist ein Test'
	       COLLATE Latin1_General_CI_AS)
	GO
	
	============================================================
	--The following example performs a case sensitive search for the string 'Test' in 'Das jst ein Test'.

	USE tempdb;
	GO
	SELECT CHARINDEX ( 'Test',
	       'Das ist ein Test'
	       COLLATE Latin1_General_CS_AS)
	
	=================================================================
QUOTENAME
	

STR : Returns character data converted from numeric data.
	=&gt; STR ( float_expression [ , length [ , decimal ] ] )

DIFFERENCE
	

REPLACE : Replaces all occurrences of a specified string value with another string value
		Returns nvarchar if one of the input arguments is of the nvarchar data type; otherwise, REPLACE returns varchar.
		Returns NULL if any one of the arguments is NULL
		REPLACE ( string_expression , string_pattern , string_replacement )
======================================================================================================================

		--The following example replaces the string cde in abcdefghi with xxx.
		SELECT REPLACE('abcdefghicde','cde','xxx');
		GO
		--Here is the result set.
		------------
		abxxxfghixxx
		
		--The following example uses the COLLATE function.
		SELECT REPLACE('This is a Test'  COLLATE Latin1_General_BIN,
		'Test', 'desk' );
		GO
		--Here is the result set.
		------------
		This is a desk

		--Clean up URL
		REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(nvarchar(255),el2.Parameters),'%20','_'), '%2F', '/'),'%3A', ':'),'&amp;', ' and ') as Parm
======================================================================================================================	

STUFF

LEFT	: Returns the left part of a character string with the specified number of characters.
		LEFT ( character_expression , integer_expression )
		character_expression = character_expression can be of any data type, except text or ntext, 
								that can be implicitly converted to varchar or nvarchar. Otherwise, 
								use the CAST function to explicitly convert character_expression.
		integer_expression = Is a positive integer that specifies how many characters of the character_expression will be returned.
========================================================================================		
		SELECT LEFT(Name, 5) 
		FROM Production.Product
		ORDER BY ProductID;
		GO
========================================================================================
REPLICATE
	

SUBSTRING : Returns part of a character, binary, text, or image expression. 
	    =&gt;		SUBSTRING ( value_expression , start_expression , length_expression )
========================================================================================
--Here is how to display the second, third, and fourth characters of the string constant abcdef.
SELECT x = SUBSTRING('abcdef', 2, 3);

ERROR: --&gt; Invalid length parameter passed to the LEFT or SUBSTRING function
			http://www.sql-server-helper.com/error-messages/msg-537.aspx
			
			DECLARE @FullName    VARCHAR(50)
			DECLARE @Length      INT
			
			SET @FullName = 'Pluto'
			SET @Length = CHARINDEX(' ', @FullName)
			
			SELECT SUBSTRING(@FullName, 1, 
			                 CASE WHEN @Length - 1 &lt; 0 					--&lt;=======  CASE statement when zero
			                      THEN LEN(@FullName) 
			                      ELSE @Length - 1 END) AS [FirstName]			

========================================================================================
LEN
	

REVERSE
	

UNICODE

LOWER
	

RIGHT
	

UPPER

LTRIM
	

RTRIM
	

 </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Default_value_for_a_Column</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Default_value_for_a_Column</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>

[ONE_1_on_HM_for_the_appropriate_timeframe_e0] [smallint] NULL default(0), --&lt;== This did not work

[ONE_1_on_HM_for_the_appropriate_timeframe_e0] [smallint]  NOT NULL default(0),	--&lt;This Works!


--I believe the UPDATE to the default value will only be done for you if you specify NOT NULL when creating the column.
ALTER TABLE X add acolumn smallint NOT NULL Default '0'

--the optional WITH VALUES populates existing rows with the default value in the new column
ALTER TABLE X add acolumn smallint NULL Default 0 WITH VALUES



bit: True False:  TRUE is converted to 1 and FALSE is converted to 0. </Code>
      </SnippetValue>
    </value>
  </item>
  <item>
    <key>
      <SnippetKey xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Category>Table</Category>
        <Language>SQLSERVER2K SQL</Language>
        <Public>false</Public>
        <Name>Write_Table_to_Disk</Name>
        <Group>My Snippets</Group>
      </SnippetKey>
    </key>
    <value>
      <SnippetValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <Key>
          <Category>Table</Category>
          <Language>SQLSERVER2K SQL</Language>
          <Public>false</Public>
          <Name>Write_Table_to_Disk</Name>
          <Group>My Snippets</Group>
        </Key>
        <Keywords />
        <Imports />
        <Code>--from Dewey


--- turn on OLE

sp_configure 'show advanced options', 1;
GO
RECONFIGURE;
GO
sp_configure 'Ole Automation Procedures', 1;
GO
RECONFIGURE;
GO

DECLARE @File VARCHAR(2000) = 'C:\Temp\myfile.txt'
DECLARE @Text VARCHAR(2000) = 'This is the file content. Fill it as you wish'

DECLARE @OLE INT
DECLARE @FileID INT

EXECUTE sp_OACreate 'Scripting.FileSystemObject'
                ,@OLE OUTPUT

EXECUTE sp_OAMethod @OLE,'OpenTextFile',@FileID OUTPUT,@File,8,1

EXECUTE sp_OAMethod @FileID,'WriteLine',NULL,@Text

EXECUTE sp_OADestroy @FileID

EXECUTE sp_OADestroy @OLE
GO


///////--sp_OAMethod OpenTextFile - has 4 parameters in this order:
/* reference: http://www.w3schools.com/asp/met_opentextfile.asp
FilePath -Required. The name of the file to open
Mode - Optional. How to open the file
	1 = Reading - Open a file for reading. You cannot write to this file.
	2 = Writing - Open a file for writing.
	8 = Appending - Open a file and write to the end of the file.
Create - Optional. Sets whether a new file can be created if the filename does not exist. 
	True indicates that a new file can be created, 
	and False indicates that a new file will not be created. False is default.
Format - Optional. The format of the file
	0 = TristateFalse - Open the file as ASCII. This is default.
	1 = TristateTrue - Open the file as Unicode.
	2 = TristateUseDefault - Open the file using the system default.</Code>
      </SnippetValue>
    </value>
  </item>
</dictionary>